{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/src/lib/rate-limit.ts"],"sourcesContent":["import { Ratelimit } from \"@upstash/ratelimit\" // for deno: see above\nimport { Redis } from \"@upstash/redis\" // see below for cloudflare and fastly adapters\n\nexport const ratelimit = new Ratelimit({\n  redis: Redis.fromEnv(),\n  // Rate limit to 10 requests per 10 seconds\n  limiter: Ratelimit.slidingWindow(10, \"10 s\"),\n  analytics: true,\n  /**\n   * Optional prefix for the keys used in redis. This is useful if you want to share a redis\n   * instance with other applications and want to avoid key collisions. The default prefix is\n   * \"@upstash/ratelimit\"\n   */\n  prefix: \"uploader/ratelimit\",\n})\n"],"names":[],"mappings":";;;AAAA,yXAA+C,sBAAsB;AACrE,kZAAuC,+CAA+C;AAAtF;;;AAEO,MAAM,YAAY,IAAI,4NAAA,CAAA,YAAS,CAAC;IACrC,OAAO,+NAAA,CAAA,QAAK,CAAC,OAAO;IACpB,2CAA2C;IAC3C,SAAS,4NAAA,CAAA,YAAS,CAAC,aAAa,CAAC,IAAI;IACrC,WAAW;IACX;;;;GAIC,GACD,QAAQ;AACV"}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/src/app/api/uploadthing/core.ts"],"sourcesContent":["import { createUploadthing, type FileRouter } from \"uploadthing/next\"\nimport { UploadThingError } from \"uploadthing/server\"\n\nimport { ratelimit } from \"@/lib/rate-limit\"\n\nconst f = createUploadthing()\n\n// Fake auth function\nasync function auth(_req: Request) {\n  await new Promise((resolve) => setTimeout(resolve, 100))\n  return { id: \"fakeId\" }\n}\n\n// FileRouter for your app, can contain multiple FileRoutes\nexport const ourFileRouter = {\n  // Define as many FileRoutes as you like, each with a unique routeSlug\n  imageUploader: f({ image: { maxFileSize: \"4MB\", maxFileCount: 8 } })\n    // Set permissions and file types for this FileRoute\n    .middleware(async ({ req }) => {\n      // Rate limit the upload\n      const ip = req.headers.get(\"x-forwarded-for\") ?? \"127.0.0.1\"\n\n      const { success } = await ratelimit.limit(ip)\n\n      if (!success) {\n        // eslint-disable-next-line @typescript-eslint/only-throw-error\n        throw new UploadThingError(\"Rate limit exceeded\")\n      }\n\n      // This code runs on your server before upload\n      const user = await auth(req)\n\n      // If you throw, the user will not be able to upload\n      // eslint-disable-next-line @typescript-eslint/only-throw-error\n      if (!user) throw new UploadThingError(\"Unauthorized\")\n\n      // Whatever is returned here is accessible in onUploadComplete as `metadata`\n      return { userId: user.id }\n    })\n    .onUploadComplete(async ({ metadata, file }) => {\n      // This code RUNS ON YOUR SERVER after upload\n      console.log(\"Upload complete for userId:\", metadata.userId)\n\n      console.log(\"file url\", file.url)\n\n      // !!! Whatever is returned here is sent to the clientside `onClientUploadComplete` callback\n      return { uploadedBy: metadata.userId }\n    }),\n} satisfies FileRouter\n\nexport type OurFileRouter = typeof ourFileRouter\n"],"names":[],"mappings":";;;AAGA;AAFA;AADA;;;;AAKA,MAAM,IAAI,CAAA,GAAA,0WAAA,CAAA,oBAAiB,AAAD;AAE1B,qBAAqB;AACrB,eAAe,KAAK,IAAa;IAC/B,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACnD,OAAO;QAAE,IAAI;IAAS;AACxB;AAGO,MAAM,gBAAgB;IAC3B,sEAAsE;IACtE,eAAe,EAAE;QAAE,OAAO;YAAE,aAAa;YAAO,cAAc;QAAE;IAAE,EAChE,oDAAoD;KACnD,UAAU,CAAC,OAAO,EAAE,GAAG,EAAE;QACxB,wBAAwB;QACxB,MAAM,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,sBAAsB;QAEjD,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,6HAAA,CAAA,YAAS,CAAC,KAAK,CAAC;QAE1C,IAAI,CAAC,SAAS;YACZ,+DAA+D;YAC/D,MAAM,IAAI,8NAAA,CAAA,mBAAgB,CAAC;QAC7B;QAEA,8CAA8C;QAC9C,MAAM,OAAO,MAAM,KAAK;QAExB,oDAAoD;QACpD,+DAA+D;QAC/D,uCAAW;;QAAyC;QAEpD,4EAA4E;QAC5E,OAAO;YAAE,QAAQ,KAAK,EAAE;QAAC;IAC3B,GACC,gBAAgB,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE;QACzC,6CAA6C;QAC7C,QAAQ,GAAG,CAAC,+BAA+B,SAAS,MAAM;QAE1D,QAAQ,GAAG,CAAC,YAAY,KAAK,GAAG;QAEhC,4FAA4F;QAC5F,OAAO;YAAE,YAAY,SAAS,MAAM;QAAC;IACvC;AACJ"}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/src/app/api/uploadthing/route.ts"],"sourcesContent":["import { createRouteHandler } from \"uploadthing/next\"\n\nimport { ourFileRouter } from \"./core\"\n\n// Export routes for Next App Router\nexport const { GET, POST } = createRouteHandler({\n  router: ourFileRouter,\n\n  // Apply an (optional) custom config:\n  // config: { ... },\n})\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAKO,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,0WAAA,CAAA,qBAAkB,AAAD,EAAE;IAC9C,QAAQ,0IAAA,CAAA,gBAAa;AAIvB"}},
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}