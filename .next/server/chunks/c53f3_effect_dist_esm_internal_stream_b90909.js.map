{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"stream.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/internal/stream.ts"],"sourcesContent":["import * as Cause from \"../Cause.js\"\nimport type * as Channel from \"../Channel.js\"\nimport * as Chunk from \"../Chunk.js\"\nimport * as Clock from \"../Clock.js\"\nimport * as Context from \"../Context.js\"\nimport * as Deferred from \"../Deferred.js\"\nimport * as Duration from \"../Duration.js\"\nimport * as Effect from \"../Effect.js\"\nimport * as Either from \"../Either.js\"\nimport * as Equal from \"../Equal.js\"\nimport * as Exit from \"../Exit.js\"\nimport * as Fiber from \"../Fiber.js\"\nimport * as FiberRef from \"../FiberRef.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { constTrue, dual, identity, pipe } from \"../Function.js\"\nimport * as Layer from \"../Layer.js\"\nimport * as MergeDecision from \"../MergeDecision.js\"\nimport * as Option from \"../Option.js\"\nimport type * as Order from \"../Order.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport { hasProperty, type Predicate, type Refinement } from \"../Predicate.js\"\nimport * as PubSub from \"../PubSub.js\"\nimport * as Queue from \"../Queue.js\"\nimport * as RcRef from \"../RcRef.js\"\nimport * as Ref from \"../Ref.js\"\nimport * as Runtime from \"../Runtime.js\"\nimport * as Schedule from \"../Schedule.js\"\nimport * as Scope from \"../Scope.js\"\nimport type * as Sink from \"../Sink.js\"\nimport type * as Stream from \"../Stream.js\"\nimport type * as Emit from \"../StreamEmit.js\"\nimport * as HaltStrategy from \"../StreamHaltStrategy.js\"\nimport type * as Take from \"../Take.js\"\nimport * as TPubSub from \"../TPubSub.js\"\nimport * as TQueue from \"../TQueue.js\"\nimport type * as Tracer from \"../Tracer.js\"\nimport * as Tuple from \"../Tuple.js\"\nimport type { NoInfer, TupleOf } from \"../Types.js\"\nimport * as channel from \"./channel.js\"\nimport * as channelExecutor from \"./channel/channelExecutor.js\"\nimport * as MergeStrategy from \"./channel/mergeStrategy.js\"\nimport * as singleProducerAsyncInput from \"./channel/singleProducerAsyncInput.js\"\nimport * as core from \"./core-stream.js\"\nimport * as doNotation from \"./doNotation.js\"\nimport { RingBuffer } from \"./ringBuffer.js\"\nimport * as _sink from \"./sink.js\"\nimport * as DebounceState from \"./stream/debounceState.js\"\nimport * as emit from \"./stream/emit.js\"\nimport * as haltStrategy from \"./stream/haltStrategy.js\"\nimport * as Handoff from \"./stream/handoff.js\"\nimport * as HandoffSignal from \"./stream/handoffSignal.js\"\nimport * as pull from \"./stream/pull.js\"\nimport * as SinkEndReason from \"./stream/sinkEndReason.js\"\nimport * as ZipAllState from \"./stream/zipAllState.js\"\nimport * as ZipChunksState from \"./stream/zipChunksState.js\"\nimport * as InternalTake from \"./take.js\"\nimport * as InternalTracer from \"./tracer.js\"\n\n/** @internal */\nconst StreamSymbolKey = \"effect/Stream\"\n\n/** @internal */\nexport const StreamTypeId: Stream.StreamTypeId = Symbol.for(\n  StreamSymbolKey\n) as Stream.StreamTypeId\n\n/** @internal */\nconst streamVariance = {\n  _R: (_: never) => _,\n  _E: (_: never) => _,\n  _A: (_: never) => _\n}\n\n/** @internal */\nexport class StreamImpl<out A, out E = never, out R = never> implements Stream.Stream<A, E, R> {\n  readonly [StreamTypeId] = streamVariance\n  constructor(\n    readonly channel: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown, R>\n  ) {\n  }\n\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const isStream = (u: unknown): u is Stream.Stream<unknown, unknown, unknown> =>\n  hasProperty(u, StreamTypeId) || Effect.isEffect(u)\n\n/** @internal */\nexport const DefaultChunkSize = 4096\n\n/** @internal */\nexport const accumulate = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<Chunk.Chunk<A>, E, R> =>\n  chunks(accumulateChunks(self))\n\n/** @internal */\nexport const accumulateChunks = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<A, E, R> => {\n  const accumulator = (\n    s: Chunk.Chunk<A>\n  ): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E, E, void, unknown> =>\n    core.readWith({\n      onInput: (input: Chunk.Chunk<A>) => {\n        const next = Chunk.appendAll(s, input)\n        return core.flatMap(\n          core.write(next),\n          () => accumulator(next)\n        )\n      },\n      onFailure: core.fail,\n      onDone: () => core.void\n    })\n  return new StreamImpl(core.pipeTo(toChannel(self), accumulator(Chunk.empty())))\n}\n\n/** @internal */\nexport const acquireRelease = <A, E, R, R2, X>(\n  acquire: Effect.Effect<A, E, R>,\n  release: (resource: A, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R2>\n): Stream.Stream<A, E, R | R2> => scoped(Effect.acquireRelease(acquire, release))\n\n/** @internal */\nexport const aggregate = dual<\n  <B, A, A2, E2, R2>(\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E2 | E, R2 | R>,\n  <A, E, R, B, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>\n  ) => Stream.Stream<B, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, B, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>\n  ): Stream.Stream<B, E2 | E, R2 | R> => aggregateWithin(self, sink, Schedule.forever)\n)\n\n/** @internal */\nexport const aggregateWithin = dual<\n  <B, A, A2, E2, R2, C, R3>(\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>,\n    schedule: Schedule.Schedule<C, Option.Option<B>, R3>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E2 | E, R2 | R3 | R>,\n  <A, E, R, B, A2, E2, R2, C, R3>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>,\n    schedule: Schedule.Schedule<C, Option.Option<B>, R3>\n  ) => Stream.Stream<B, E2 | E, R2 | R3 | R>\n>(\n  3,\n  <A, E, R, B, A2, E2, R2, C, R3>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>,\n    schedule: Schedule.Schedule<C, Option.Option<B>, R3>\n  ): Stream.Stream<B, E2 | E, R2 | R3 | R> =>\n    filterMap(\n      aggregateWithinEither(self, sink, schedule),\n      (_) =>\n        Either.match(_, {\n          onLeft: Option.none,\n          onRight: Option.some\n        })\n    )\n)\n\n/** @internal */\nexport const aggregateWithinEither = dual<\n  <B, A, A2, E2, R2, C, R3>(\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>,\n    schedule: Schedule.Schedule<C, Option.Option<B>, R3>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Either.Either<B, C>, E2 | E, R2 | R3 | R>,\n  <A, E, R, B, A2, E2, R2, C, R3>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>,\n    schedule: Schedule.Schedule<C, Option.Option<B>, R3>\n  ) => Stream.Stream<Either.Either<B, C>, E2 | E, R2 | R3 | R>\n>(\n  3,\n  <A, E, R, B, A2, E2, R2, C, R3>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>,\n    schedule: Schedule.Schedule<C, Option.Option<B>, R3>\n  ): Stream.Stream<Either.Either<B, C>, E2 | E, R2 | R3 | R> => {\n    const layer = Effect.all([\n      Handoff.make<HandoffSignal.HandoffSignal<A, E | E2>>(),\n      Ref.make<SinkEndReason.SinkEndReason>(SinkEndReason.ScheduleEnd),\n      Ref.make(Chunk.empty<A | A2>()),\n      Schedule.driver(schedule),\n      Ref.make(false),\n      Ref.make(false)\n    ])\n    return pipe(\n      fromEffect(layer),\n      flatMap(([handoff, sinkEndReason, sinkLeftovers, scheduleDriver, consumed, endAfterEmit]) => {\n        const handoffProducer: Channel.Channel<never, Chunk.Chunk<A>, never, E | E2, unknown, unknown> = core\n          .readWithCause({\n            onInput: (input: Chunk.Chunk<A>) =>\n              core.flatMap(\n                core.fromEffect(pipe(\n                  handoff,\n                  Handoff.offer<HandoffSignal.HandoffSignal<A, E | E2>>(HandoffSignal.emit(input)),\n                  Effect.when(() => Chunk.isNonEmpty(input))\n                )),\n                () => handoffProducer\n              ),\n            onFailure: (cause) =>\n              core.fromEffect(\n                Handoff.offer<HandoffSignal.HandoffSignal<A, E | E2>>(\n                  handoff,\n                  HandoffSignal.halt(cause)\n                )\n              ),\n            onDone: () =>\n              core.fromEffect(\n                Handoff.offer<HandoffSignal.HandoffSignal<A, E | E2>>(\n                  handoff,\n                  HandoffSignal.end(SinkEndReason.UpstreamEnd)\n                )\n              )\n          })\n        const handoffConsumer: Channel.Channel<Chunk.Chunk<A | A2>, unknown, E | E2, unknown, void, unknown> = pipe(\n          Ref.getAndSet(sinkLeftovers, Chunk.empty()),\n          Effect.flatMap((leftovers) => {\n            if (Chunk.isNonEmpty(leftovers)) {\n              return pipe(\n                Ref.set(consumed, true),\n                Effect.zipRight(Effect.succeed(pipe(\n                  core.write(leftovers),\n                  core.flatMap(() => handoffConsumer)\n                )))\n              )\n            }\n            return pipe(\n              Handoff.take(handoff),\n              Effect.map((signal) => {\n                switch (signal._tag) {\n                  case HandoffSignal.OP_EMIT: {\n                    return pipe(\n                      core.fromEffect(Ref.set(consumed, true)),\n                      channel.zipRight(core.write(signal.elements)),\n                      channel.zipRight(core.fromEffect(Ref.get(endAfterEmit))),\n                      core.flatMap((bool) => bool ? core.void : handoffConsumer)\n                    )\n                  }\n                  case HandoffSignal.OP_HALT: {\n                    return core.failCause(signal.cause)\n                  }\n                  case HandoffSignal.OP_END: {\n                    if (signal.reason._tag === SinkEndReason.OP_SCHEDULE_END) {\n                      return pipe(\n                        Ref.get(consumed),\n                        Effect.map((bool) =>\n                          bool ?\n                            core.fromEffect(\n                              pipe(\n                                Ref.set(sinkEndReason, SinkEndReason.ScheduleEnd),\n                                Effect.zipRight(Ref.set(endAfterEmit, true))\n                              )\n                            ) :\n                            pipe(\n                              core.fromEffect(\n                                pipe(\n                                  Ref.set(sinkEndReason, SinkEndReason.ScheduleEnd),\n                                  Effect.zipRight(Ref.set(endAfterEmit, true))\n                                )\n                              ),\n                              core.flatMap(() => handoffConsumer)\n                            )\n                        ),\n                        channel.unwrap\n                      )\n                    }\n                    return pipe(\n                      Ref.set<SinkEndReason.SinkEndReason>(sinkEndReason, signal.reason),\n                      Effect.zipRight(Ref.set(endAfterEmit, true)),\n                      core.fromEffect\n                    )\n                  }\n                }\n              })\n            )\n          }),\n          channel.unwrap\n        )\n        const timeout = (lastB: Option.Option<B>): Effect.Effect<C, Option.Option<never>, R2 | R3> =>\n          scheduleDriver.next(lastB)\n        const scheduledAggregator = (\n          sinkFiber: Fiber.RuntimeFiber<readonly [Chunk.Chunk<Chunk.Chunk<A | A2>>, B], E | E2>,\n          scheduleFiber: Fiber.RuntimeFiber<C, Option.Option<never>>,\n          scope: Scope.Scope\n        ): Channel.Channel<Chunk.Chunk<Either.Either<B, C>>, unknown, E | E2, unknown, unknown, unknown, R2 | R3> => {\n          const forkSink = pipe(\n            Ref.set(consumed, false),\n            Effect.zipRight(Ref.set(endAfterEmit, false)),\n            Effect.zipRight(\n              pipe(\n                handoffConsumer,\n                channel.pipeToOrFail(_sink.toChannel(sink)),\n                core.collectElements,\n                channelExecutor.run,\n                Effect.forkIn(scope)\n              )\n            )\n          )\n          const handleSide = (\n            leftovers: Chunk.Chunk<Chunk.Chunk<A | A2>>,\n            b: B,\n            c: Option.Option<C>\n          ): Channel.Channel<Chunk.Chunk<Either.Either<B, C>>, unknown, E | E2, unknown, unknown, unknown, R2 | R3> =>\n            pipe(\n              Ref.set(sinkLeftovers, Chunk.flatten(leftovers)),\n              Effect.zipRight(\n                Effect.map(Ref.get(sinkEndReason), (reason) => {\n                  switch (reason._tag) {\n                    case SinkEndReason.OP_SCHEDULE_END: {\n                      return pipe(\n                        Effect.all([\n                          Ref.get(consumed),\n                          forkSink,\n                          pipe(timeout(Option.some(b)), Effect.forkIn(scope))\n                        ]),\n                        Effect.map(([wasConsumed, sinkFiber, scheduleFiber]) => {\n                          const toWrite = pipe(\n                            c,\n                            Option.match({\n                              onNone: (): Chunk.Chunk<Either.Either<B, C>> => Chunk.of(Either.right(b)),\n                              onSome: (c): Chunk.Chunk<Either.Either<B, C>> =>\n                                Chunk.make(Either.right(b), Either.left(c))\n                            })\n                          )\n                          if (wasConsumed) {\n                            return pipe(\n                              core.write(toWrite),\n                              core.flatMap(() => scheduledAggregator(sinkFiber, scheduleFiber, scope))\n                            )\n                          }\n                          return scheduledAggregator(sinkFiber, scheduleFiber, scope)\n                        }),\n                        channel.unwrap\n                      )\n                    }\n                    case SinkEndReason.OP_UPSTREAM_END: {\n                      return pipe(\n                        Ref.get(consumed),\n                        Effect.map((wasConsumed) =>\n                          wasConsumed ?\n                            core.write(Chunk.of<Either.Either<B, C>>(Either.right(b))) :\n                            core.void\n                        ),\n                        channel.unwrap\n                      )\n                    }\n                  }\n                })\n              ),\n              channel.unwrap\n            )\n          return channel.unwrap(\n            Effect.raceWith(Fiber.join(sinkFiber), Fiber.join(scheduleFiber), {\n              onSelfDone: (sinkExit, _) =>\n                pipe(\n                  Fiber.interrupt(scheduleFiber),\n                  Effect.zipRight(pipe(\n                    Effect.suspend(() => sinkExit),\n                    Effect.map(([leftovers, b]) => handleSide(leftovers, b, Option.none()))\n                  ))\n                ),\n              onOtherDone: (scheduleExit, _) =>\n                Effect.matchCauseEffect(Effect.suspend(() => scheduleExit), {\n                  onFailure: (cause) =>\n                    Either.match(\n                      Cause.failureOrCause(cause),\n                      {\n                        onLeft: () =>\n                          pipe(\n                            handoff,\n                            Handoff.offer<HandoffSignal.HandoffSignal<A, E | E2>>(\n                              HandoffSignal.end(SinkEndReason.ScheduleEnd)\n                            ),\n                            Effect.forkDaemon,\n                            Effect.zipRight(\n                              pipe(\n                                Fiber.join(sinkFiber),\n                                Effect.map(([leftovers, b]) => handleSide(leftovers, b, Option.none()))\n                              )\n                            )\n                          ),\n                        onRight: (cause) =>\n                          pipe(\n                            handoff,\n                            Handoff.offer<HandoffSignal.HandoffSignal<A, E | E2>>(\n                              HandoffSignal.halt(cause)\n                            ),\n                            Effect.forkDaemon,\n                            Effect.zipRight(\n                              pipe(\n                                Fiber.join(sinkFiber),\n                                Effect.map(([leftovers, b]) => handleSide(leftovers, b, Option.none()))\n                              )\n                            )\n                          )\n                      }\n                    ),\n                  onSuccess: (c) =>\n                    pipe(\n                      handoff,\n                      Handoff.offer<HandoffSignal.HandoffSignal<A, E | E2>>(\n                        HandoffSignal.end(SinkEndReason.ScheduleEnd)\n                      ),\n                      Effect.forkDaemon,\n                      Effect.zipRight(\n                        pipe(\n                          Fiber.join(sinkFiber),\n                          Effect.map(([leftovers, b]) => handleSide(leftovers, b, Option.some(c)))\n                        )\n                      )\n                    )\n                })\n            })\n          )\n        }\n        return unwrapScoped(\n          pipe(\n            self,\n            toChannel,\n            core.pipeTo(handoffProducer),\n            channelExecutor.run,\n            Effect.forkScoped,\n            Effect.zipRight(\n              pipe(\n                handoffConsumer,\n                channel.pipeToOrFail(_sink.toChannel(sink)),\n                core.collectElements,\n                channelExecutor.run,\n                Effect.forkScoped,\n                Effect.flatMap((sinkFiber) =>\n                  pipe(\n                    Effect.forkScoped(timeout(Option.none())),\n                    Effect.flatMap((scheduleFiber) =>\n                      pipe(\n                        Effect.scope,\n                        Effect.map((scope) =>\n                          new StreamImpl(\n                            scheduledAggregator(sinkFiber, scheduleFiber, scope)\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      })\n    )\n  }\n)\n\n/** @internal */\nexport const as = dual<\n  <B>(value: B) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E, R>,\n  <A, E, R, B>(self: Stream.Stream<A, E, R>, value: B) => Stream.Stream<B, E, R>\n>(2, <A, E, R, B>(self: Stream.Stream<A, E, R>, value: B): Stream.Stream<B, E, R> => map(self, () => value))\n\nconst queueFromBufferOptions = <A, E>(\n  bufferSize?: number | \"unbounded\" | {\n    readonly bufferSize?: number | undefined\n    readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n  } | undefined\n): Effect.Effect<Queue.Queue<Take.Take<A, E>>> => {\n  if (bufferSize === \"unbounded\") {\n    return Queue.unbounded()\n  } else if (typeof bufferSize === \"number\" || bufferSize === undefined) {\n    return Queue.bounded(bufferSize ?? 16)\n  }\n  switch (bufferSize.strategy) {\n    case \"dropping\":\n      return Queue.dropping(bufferSize.bufferSize ?? 16)\n    case \"sliding\":\n      return Queue.sliding(bufferSize.bufferSize ?? 16)\n    default:\n      return Queue.bounded(bufferSize.bufferSize ?? 16)\n  }\n}\n\n/** @internal */\nexport const _async = <A, E = never, R = never>(\n  register: (\n    emit: Emit.Emit<R, E, A, void>\n  ) => Effect.Effect<void, never, R> | void,\n  bufferSize?: number | \"unbounded\" | {\n    readonly bufferSize?: number | undefined\n    readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n  } | undefined\n): Stream.Stream<A, E, R> =>\n  Effect.acquireRelease(\n    queueFromBufferOptions<A, E>(bufferSize),\n    (queue) => Queue.shutdown(queue)\n  ).pipe(\n    Effect.flatMap((output) =>\n      Effect.runtime<R>().pipe(\n        Effect.flatMap((runtime) =>\n          Effect.sync(() => {\n            const runPromiseExit = Runtime.runPromiseExit(runtime)\n            const canceler = register(emit.make<R, E, A, void>((resume) =>\n              InternalTake.fromPull(resume).pipe(\n                Effect.flatMap((take) => Queue.offer(output, take)),\n                Effect.asVoid,\n                runPromiseExit\n              ).then((exit) => {\n                if (Exit.isFailure(exit)) {\n                  if (!Cause.isInterrupted(exit.cause)) {\n                    throw Cause.squash(exit.cause)\n                  }\n                }\n              })\n            ))\n            return canceler\n          })\n        ),\n        Effect.map((value) => {\n          const loop: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown> = Queue.take(output).pipe(\n            Effect.flatMap((take) => InternalTake.done(take)),\n            Effect.match({\n              onFailure: (maybeError) =>\n                core.fromEffect(Queue.shutdown(output)).pipe(\n                  channel.zipRight(Option.match(maybeError, {\n                    onNone: () => core.void,\n                    onSome: (error) => core.fail(error)\n                  }))\n                ),\n              onSuccess: (chunk) => core.write(chunk).pipe(core.flatMap(() => loop))\n            }),\n            channel.unwrap\n          )\n          return fromChannel(loop).pipe(ensuring(value ?? Effect.void))\n        })\n      )\n    ),\n    unwrapScoped\n  )\n\n/** @internal */\nexport const asyncEffect = <A, E = never, R = never>(\n  register: (emit: Emit.Emit<R, E, A, void>) => Effect.Effect<unknown, E, R>,\n  bufferSize?: number | \"unbounded\" | {\n    readonly bufferSize?: number | undefined\n    readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n  } | undefined\n): Stream.Stream<A, E, R> =>\n  pipe(\n    Effect.acquireRelease(\n      queueFromBufferOptions<A, E>(bufferSize),\n      (queue) => Queue.shutdown(queue)\n    ),\n    Effect.flatMap((output) =>\n      pipe(\n        Effect.runtime<R>(),\n        Effect.flatMap((runtime) =>\n          pipe(\n            register(\n              emit.make((k) =>\n                pipe(\n                  InternalTake.fromPull(k),\n                  Effect.flatMap((take) => Queue.offer(output, take)),\n                  Effect.asVoid,\n                  Runtime.runPromiseExit(runtime)\n                ).then((exit) => {\n                  if (Exit.isFailure(exit)) {\n                    if (!Cause.isInterrupted(exit.cause)) {\n                      throw Cause.squash(exit.cause)\n                    }\n                  }\n                })\n              )\n            ),\n            Effect.map(() => {\n              const loop: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown> = pipe(\n                Queue.take(output),\n                Effect.flatMap(InternalTake.done),\n                Effect.match({\n                  onFailure: (maybeError) =>\n                    pipe(\n                      core.fromEffect(Queue.shutdown(output)),\n                      channel.zipRight(Option.match(maybeError, { onNone: () => core.void, onSome: core.fail }))\n                    ),\n                  onSuccess: (chunk) => pipe(core.write(chunk), core.flatMap(() => loop))\n                }),\n                channel.unwrap\n              )\n              return loop\n            })\n          )\n        )\n      )\n    ),\n    channel.unwrapScoped,\n    fromChannel\n  )\n\nconst queueFromBufferOptionsPush = <A, E>(\n  options?: { readonly bufferSize: \"unbounded\" } | {\n    readonly bufferSize?: number | undefined\n    readonly strategy?: \"dropping\" | \"sliding\" | undefined\n  } | undefined\n): Effect.Effect<Queue.Queue<Array<A> | Exit.Exit<void, E>>> => {\n  if (options?.bufferSize === \"unbounded\" || (options?.bufferSize === undefined && options?.strategy === undefined)) {\n    return Queue.unbounded()\n  }\n  switch (options?.strategy) {\n    case \"sliding\":\n      return Queue.sliding(options.bufferSize ?? 16)\n    default:\n      return Queue.dropping(options?.bufferSize ?? 16)\n  }\n}\n\n/** @internal */\nexport const asyncPush = <A, E = never, R = never>(\n  register: (emit: Emit.EmitOpsPush<E, A>) => Effect.Effect<unknown, E, R | Scope.Scope>,\n  options?: {\n    readonly bufferSize: \"unbounded\"\n  } | {\n    readonly bufferSize?: number | undefined\n    readonly strategy?: \"dropping\" | \"sliding\" | undefined\n  } | undefined\n): Stream.Stream<A, E, Exclude<R, Scope.Scope>> =>\n  Effect.acquireRelease(\n    queueFromBufferOptionsPush<A, E>(options),\n    Queue.shutdown\n  ).pipe(\n    Effect.tap((queue) =>\n      FiberRef.getWith(FiberRef.currentScheduler, (scheduler) => register(emit.makePush(queue, scheduler)))\n    ),\n    Effect.map((queue) => {\n      const loop: Channel.Channel<Chunk.Chunk<A>, unknown, E> = core.flatMap(Queue.take(queue), (item) =>\n        Exit.isExit(item)\n          ? Exit.isSuccess(item) ? core.void : core.failCause(item.cause)\n          : channel.zipRight(core.write(Chunk.unsafeFromArray(item)), loop))\n      return loop\n    }),\n    channel.unwrapScoped,\n    fromChannel\n  )\n\n/** @internal */\nexport const asyncScoped = <A, E = never, R = never>(\n  register: (emit: Emit.Emit<R, E, A, void>) => Effect.Effect<unknown, E, R | Scope.Scope>,\n  bufferSize?: number | \"unbounded\" | {\n    readonly bufferSize?: number | undefined\n    readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n  } | undefined\n): Stream.Stream<A, E, Exclude<R, Scope.Scope>> =>\n  pipe(\n    Effect.acquireRelease(\n      queueFromBufferOptions<A, E>(bufferSize),\n      (queue) => Queue.shutdown(queue)\n    ),\n    Effect.flatMap((output) =>\n      pipe(\n        Effect.runtime<R>(),\n        Effect.flatMap((runtime) =>\n          pipe(\n            register(\n              emit.make((k) =>\n                pipe(\n                  InternalTake.fromPull(k),\n                  Effect.flatMap((take) => Queue.offer(output, take)),\n                  Effect.asVoid,\n                  Runtime.runPromiseExit(runtime)\n                ).then((exit) => {\n                  if (Exit.isFailure(exit)) {\n                    if (!Cause.isInterrupted(exit.cause)) {\n                      throw Cause.squash(exit.cause)\n                    }\n                  }\n                })\n              )\n            ),\n            Effect.zipRight(Ref.make(false)),\n            Effect.flatMap((ref) =>\n              pipe(\n                Ref.get(ref),\n                Effect.map((isDone) =>\n                  isDone ?\n                    pull.end() :\n                    pipe(\n                      Queue.take(output),\n                      Effect.flatMap(InternalTake.done),\n                      Effect.onError(() =>\n                        pipe(\n                          Ref.set(ref, true),\n                          Effect.zipRight(Queue.shutdown(output))\n                        )\n                      )\n                    )\n                )\n              )\n            )\n          )\n        )\n      )\n    ),\n    scoped,\n    flatMap(repeatEffectChunkOption)\n  )\n\n/** @internal */\nexport const branchAfter = dual<\n  <A, A2, E2, R2>(\n    n: number,\n    f: (input: Chunk.Chunk<A>) => Stream.Stream<A2, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    n: number,\n    f: (input: Chunk.Chunk<A>) => Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  3,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    n: number,\n    f: (input: Chunk.Chunk<A>) => Stream.Stream<A2, E2, R2>\n  ) =>\n    suspend(() => {\n      const buffering = (\n        acc: Chunk.Chunk<A>\n      ): Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, never, unknown, unknown, R | R2> =>\n        core.readWith({\n          onInput: (input) => {\n            const nextSize = acc.length + input.length\n            if (nextSize >= n) {\n              const [b1, b2] = pipe(input, Chunk.splitAt(n - acc.length))\n              return running(pipe(acc, Chunk.appendAll(b1)), b2)\n            }\n            return buffering(pipe(acc, Chunk.appendAll(input)))\n          },\n          onFailure: core.fail,\n          onDone: () => running(acc, Chunk.empty())\n        })\n      const running = (\n        prefix: Chunk.Chunk<A>,\n        leftover: Chunk.Chunk<A>\n      ): Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, never, unknown, unknown, R | R2> =>\n        core.pipeTo(\n          channel.zipRight(\n            core.write(leftover),\n            channel.identityChannel()\n          ),\n          toChannel(f(prefix))\n        )\n      return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(buffering(Chunk.empty<A>()))))\n    })\n)\n\n/** @internal */\nexport const broadcast = dual<\n  <N extends number>(\n    n: N,\n    maximumLag: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => <A, E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<TupleOf<N, Stream.Stream<A, E>>, never, Scope.Scope | R>,\n  <A, E, R, N extends number>(\n    self: Stream.Stream<A, E, R>,\n    n: N,\n    maximumLag: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => Effect.Effect<TupleOf<N, Stream.Stream<A, E>>, never, Scope.Scope | R>\n>(3, <A, E, R, N extends number>(\n  self: Stream.Stream<A, E, R>,\n  n: N,\n  maximumLag: number | {\n    readonly capacity: \"unbounded\"\n    readonly replay?: number | undefined\n  } | {\n    readonly capacity: number\n    readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n    readonly replay?: number | undefined\n  }\n): Effect.Effect<TupleOf<N, Stream.Stream<A, E>>, never, Scope.Scope | R> =>\n  pipe(\n    self,\n    broadcastedQueues(n, maximumLag),\n    Effect.map((tuple) =>\n      tuple.map((queue) => flattenTake(fromQueue(queue, { shutdown: true }))) as TupleOf<N, Stream.Stream<A, E>>\n    )\n  ))\n\n/** @internal */\nexport const broadcastDynamic = dual<\n  (\n    maximumLag: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<Stream.Stream<A, E>, never, Scope.Scope | R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    maximumLag: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => Effect.Effect<Stream.Stream<A, E>, never, Scope.Scope | R>\n>(2, <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  maximumLag: number | {\n    readonly capacity: \"unbounded\"\n    readonly replay?: number | undefined\n  } | {\n    readonly capacity: number\n    readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n    readonly replay?: number | undefined\n  }\n): Effect.Effect<Stream.Stream<A, E>, never, Scope.Scope | R> =>\n  Effect.map(toPubSub(self, maximumLag), (pubsub) => flattenTake(fromPubSub(pubsub))))\n\nexport const share = dual<\n  <A, E>(\n    config: {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n      readonly idleTimeToLive?: Duration.DurationInput | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n      readonly idleTimeToLive?: Duration.DurationInput | undefined\n    }\n  ) => <R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<Stream.Stream<A, E>, never, R | Scope.Scope>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    config: {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n      readonly idleTimeToLive?: Duration.DurationInput | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n      readonly idleTimeToLive?: Duration.DurationInput | undefined\n    }\n  ) => Effect.Effect<Stream.Stream<A, E>, never, R | Scope.Scope>\n>(\n  2,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n      readonly idleTimeToLive?: Duration.DurationInput | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n      readonly idleTimeToLive?: Duration.DurationInput | undefined\n    }\n  ): Effect.Effect<Stream.Stream<A, E>, never, R | Scope.Scope> =>\n    Effect.map(\n      RcRef.make({\n        acquire: broadcastDynamic(self, options),\n        idleTimeToLive: options.idleTimeToLive\n      }),\n      (rcRef) => unwrapScoped(RcRef.get(rcRef))\n    )\n)\n\n/** @internal */\nexport const broadcastedQueues = dual<\n  <N extends number>(\n    n: N,\n    maximumLag: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => <A, E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<TupleOf<N, Queue.Dequeue<Take.Take<A, E>>>, never, Scope.Scope | R>,\n  <A, E, R, N extends number>(\n    self: Stream.Stream<A, E, R>,\n    n: N,\n    maximumLag: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => Effect.Effect<TupleOf<N, Queue.Dequeue<Take.Take<A, E>>>, never, Scope.Scope | R>\n>(3, <A, E, R, N extends number>(\n  self: Stream.Stream<A, E, R>,\n  n: N,\n  maximumLag: number | {\n    readonly capacity: \"unbounded\"\n    readonly replay?: number | undefined\n  } | {\n    readonly capacity: number\n    readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n    readonly replay?: number | undefined\n  }\n): Effect.Effect<TupleOf<N, Queue.Dequeue<Take.Take<A, E>>>, never, Scope.Scope | R> =>\n  Effect.flatMap(pubsubFromOptions(maximumLag), (pubsub) =>\n    pipe(\n      Effect.all(Array.from({ length: n }, () => PubSub.subscribe(pubsub))) as Effect.Effect<\n        TupleOf<N, Queue.Dequeue<Take.Take<A, E>>>,\n        never,\n        R\n      >,\n      Effect.tap(() => Effect.forkScoped(runIntoPubSubScoped(self, pubsub)))\n    )))\n\n/** @internal */\nexport const broadcastedQueuesDynamic = dual<\n  (\n    maximumLag: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => <A, E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<Effect.Effect<Queue.Dequeue<Take.Take<A, E>>, never, Scope.Scope>, never, Scope.Scope | R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    maximumLag: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => Effect.Effect<Effect.Effect<Queue.Dequeue<Take.Take<A, E>>, never, Scope.Scope>, never, Scope.Scope | R>\n>(2, <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  maximumLag: number | {\n    readonly capacity: \"unbounded\"\n    readonly replay?: number | undefined\n  } | {\n    readonly capacity: number\n    readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n    readonly replay?: number | undefined\n  }\n): Effect.Effect<Effect.Effect<Queue.Dequeue<Take.Take<A, E>>, never, Scope.Scope>, never, Scope.Scope | R> =>\n  Effect.map(toPubSub(self, maximumLag), PubSub.subscribe))\n\n/** @internal */\nexport const buffer = dual<\n  (\n    options: {\n      readonly capacity: \"unbounded\"\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n    }\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly capacity: \"unbounded\"\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n    }\n  ) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  options: {\n    readonly capacity: \"unbounded\"\n  } | {\n    readonly capacity: number\n    readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n  }\n): Stream.Stream<A, E, R> => {\n  if (options.capacity === \"unbounded\") {\n    return bufferUnbounded(self)\n  } else if (options.strategy === \"dropping\") {\n    return bufferDropping(self, options.capacity)\n  } else if (options.strategy === \"sliding\") {\n    return bufferSliding(self, options.capacity)\n  }\n  const queue = toQueueOfElements(self, options)\n  return new StreamImpl(\n    channel.unwrapScoped(\n      Effect.map(queue, (queue) => {\n        const process: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown> = pipe(\n          core.fromEffect(Queue.take(queue)),\n          core.flatMap(Exit.match({\n            onFailure: (cause) =>\n              pipe(\n                Cause.flipCauseOption(cause),\n                Option.match({ onNone: () => core.void, onSome: core.failCause })\n              ),\n            onSuccess: (value) => core.flatMap(core.write(Chunk.of(value)), () => process)\n          }))\n        )\n        return process\n      })\n    )\n  )\n})\n\n/** @internal */\nexport const bufferChunks = dual<\n  (options: {\n    readonly capacity: number\n    readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n  }) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, options: {\n    readonly capacity: number\n    readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n  }) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, options: {\n  readonly capacity: number\n  readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n}): Stream.Stream<A, E, R> => {\n  if (options.strategy === \"dropping\") {\n    return bufferChunksDropping(self, options.capacity)\n  } else if (options.strategy === \"sliding\") {\n    return bufferChunksSliding(self, options.capacity)\n  }\n  const queue = toQueue(self, options)\n  return new StreamImpl(\n    channel.unwrapScoped(\n      Effect.map(queue, (queue) => {\n        const process: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown> = pipe(\n          core.fromEffect(Queue.take(queue)),\n          core.flatMap(InternalTake.match({\n            onEnd: () => core.void,\n            onFailure: core.failCause,\n            onSuccess: (value) => pipe(core.write(value), core.flatMap(() => process))\n          }))\n        )\n        return process\n      })\n    )\n  )\n})\n\nconst bufferChunksDropping = dual<\n  (capacity: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, capacity: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, capacity: number): Stream.Stream<A, E, R> => {\n  const queue = Effect.acquireRelease(\n    Queue.dropping<readonly [Take.Take<A, E>, Deferred.Deferred<void>]>(capacity),\n    (queue) => Queue.shutdown(queue)\n  )\n  return new StreamImpl(bufferSignal(queue, toChannel(self)))\n})\n\nconst bufferChunksSliding = dual<\n  (capacity: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, capacity: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, capacity: number): Stream.Stream<A, E, R> => {\n  const queue = Effect.acquireRelease(\n    Queue.sliding<readonly [Take.Take<A, E>, Deferred.Deferred<void>]>(capacity),\n    (queue) => Queue.shutdown(queue)\n  )\n  return new StreamImpl(bufferSignal(queue, toChannel(self)))\n})\n\nconst bufferDropping = dual<\n  (capacity: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, capacity: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, capacity: number): Stream.Stream<A, E, R> => {\n  const queue = Effect.acquireRelease(\n    Queue.dropping<readonly [Take.Take<A, E>, Deferred.Deferred<void>]>(capacity),\n    (queue) => Queue.shutdown(queue)\n  )\n  return new StreamImpl(bufferSignal(queue, toChannel(rechunk(1)(self))))\n})\n\nconst bufferSliding = dual<\n  (capacity: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, capacity: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, capacity: number): Stream.Stream<A, E, R> => {\n  const queue = Effect.acquireRelease(\n    Queue.sliding<readonly [Take.Take<A, E>, Deferred.Deferred<void>]>(capacity),\n    (queue) => Queue.shutdown(queue)\n  )\n  return new StreamImpl(bufferSignal(queue, toChannel(pipe(self, rechunk(1)))))\n})\n\nconst bufferUnbounded = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<A, E, R> => {\n  const queue = toQueue(self, { strategy: \"unbounded\" })\n  return new StreamImpl(\n    channel.unwrapScoped(\n      Effect.map(queue, (queue) => {\n        const process: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown> = pipe(\n          core.fromEffect(Queue.take(queue)),\n          core.flatMap(InternalTake.match({\n            onEnd: () => core.void,\n            onFailure: core.failCause,\n            onSuccess: (value) => core.flatMap(core.write(value), () => process)\n          }))\n        )\n        return process\n      })\n    )\n  )\n}\n\nconst bufferSignal = <A, E, R>(\n  scoped: Effect.Effect<Queue.Queue<readonly [Take.Take<A, E>, Deferred.Deferred<void>]>, never, Scope.Scope>,\n  bufferChannel: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown, R>\n): Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown, R> => {\n  const producer = (\n    queue: Queue.Queue<readonly [Take.Take<A, E>, Deferred.Deferred<void>]>,\n    ref: Ref.Ref<Deferred.Deferred<void>>\n  ): Channel.Channel<never, Chunk.Chunk<A>, never, E, unknown, unknown, R> => {\n    const terminate = (take: Take.Take<A, E>): Channel.Channel<never, Chunk.Chunk<A>, never, E, unknown, unknown, R> =>\n      pipe(\n        Ref.get(ref),\n        Effect.tap(Deferred.await),\n        Effect.zipRight(Deferred.make<void>()),\n        Effect.flatMap((deferred) =>\n          pipe(\n            Queue.offer(queue, [take, deferred] as const),\n            Effect.zipRight(Ref.set(ref, deferred)),\n            Effect.zipRight(Deferred.await(deferred))\n          )\n        ),\n        Effect.asVoid,\n        core.fromEffect\n      )\n    return core.readWithCause({\n      onInput: (input: Chunk.Chunk<A>) =>\n        pipe(\n          Deferred.make<void>(),\n          Effect.flatMap(\n            (deferred) =>\n              pipe(\n                Queue.offer(queue, [InternalTake.chunk(input), deferred] as const),\n                Effect.flatMap((added) => pipe(Ref.set(ref, deferred), Effect.when(() => added)))\n              )\n          ),\n          Effect.asVoid,\n          core.fromEffect,\n          core.flatMap(() => producer(queue, ref))\n        ),\n      onFailure: (error) => terminate(InternalTake.failCause(error)),\n      onDone: () => terminate(InternalTake.end)\n    })\n  }\n  const consumer = (\n    queue: Queue.Queue<readonly [Take.Take<A, E>, Deferred.Deferred<void>]>\n  ): Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown, R> => {\n    const process: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown> = pipe(\n      core.fromEffect(Queue.take(queue)),\n      core.flatMap(([take, deferred]) =>\n        channel.zipRight(\n          core.fromEffect(Deferred.succeed(deferred, void 0)),\n          InternalTake.match(take, {\n            onEnd: () => core.void,\n            onFailure: core.failCause,\n            onSuccess: (value) => pipe(core.write(value), core.flatMap(() => process))\n          })\n        )\n      )\n    )\n    return process\n  }\n  return channel.unwrapScoped(\n    pipe(\n      scoped,\n      Effect.flatMap((queue) =>\n        pipe(\n          Deferred.make<void>(),\n          Effect.tap((start) => Deferred.succeed(start, void 0)),\n          Effect.flatMap((start) =>\n            pipe(\n              Ref.make(start),\n              Effect.flatMap((ref) =>\n                pipe(\n                  bufferChannel,\n                  core.pipeTo(producer(queue, ref)),\n                  channelExecutor.runScoped,\n                  Effect.forkScoped\n                )\n              ),\n              Effect.as(consumer(queue))\n            )\n          )\n        )\n      )\n    )\n  )\n}\n\n/** @internal */\nexport const catchAll = dual<\n  <E, A2, E2, R2>(\n    f: (error: E) => Stream.Stream<A2, E2, R2>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (error: E) => Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<A2 | A, E2, R2 | R>\n>(2, <A, E, R, A2, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  f: (error: E) => Stream.Stream<A2, E2, R2>\n): Stream.Stream<A2 | A, E2, R2 | R> =>\n  catchAllCause(self, (cause) =>\n    Either.match(Cause.failureOrCause(cause), {\n      onLeft: f,\n      onRight: failCause\n    })))\n\n/** @internal */\nexport const catchAllCause = dual<\n  <E, A2, E2, R2>(\n    f: (cause: Cause.Cause<E>) => Stream.Stream<A2, E2, R2>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (cause: Cause.Cause<E>) => Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<A2 | A, E2, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (cause: Cause.Cause<E>) => Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<A | A2, E2, R | R2> =>\n    new StreamImpl<A | A2, E2, R | R2>(pipe(toChannel(self), core.catchAllCause((cause) => toChannel(f(cause)))))\n)\n\n/** @internal */\nexport const catchSome = dual<\n  <E, A2, E2, R2>(\n    pf: (error: E) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E | E2, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (error: E) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ) => Stream.Stream<A2 | A, E | E2, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (error: E) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ): Stream.Stream<A2 | A, E | E2, R2 | R> =>\n    pipe(self, catchAll((error) => pipe(pf(error), Option.getOrElse(() => fail<E | E2>(error)))))\n)\n\n/** @internal */\nexport const catchSomeCause = dual<\n  <E, A2, E2, R2>(\n    pf: (cause: Cause.Cause<E>) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E | E2, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (cause: Cause.Cause<E>) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ) => Stream.Stream<A2 | A, E | E2, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (cause: Cause.Cause<E>) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ): Stream.Stream<A2 | A, E | E2, R2 | R> =>\n    pipe(self, catchAllCause((cause) => pipe(pf(cause), Option.getOrElse(() => failCause<E | E2>(cause)))))\n)\n\n/* @internal */\nexport const catchTag = dual<\n  <K extends E[\"_tag\"] & string, E extends { _tag: string }, A1, E1, R1>(\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Stream.Stream<A1, E1, R1>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A | A1, Exclude<E, { _tag: K }> | E1, R | R1>,\n  <A, E extends { _tag: string }, R, K extends E[\"_tag\"] & string, A1, E1, R1>(\n    self: Stream.Stream<A, E, R>,\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Stream.Stream<A1, E1, R1>\n  ) => Stream.Stream<A | A1, Exclude<E, { _tag: K }> | E1, R | R1>\n>(3, (self, k, f) =>\n  catchAll(self, (e) => {\n    if (\"_tag\" in e && e[\"_tag\"] === k) {\n      return f(e as any)\n    }\n    return fail(e as any)\n  }))\n\n/** @internal */\nexport const catchTags: {\n  <\n    E extends { _tag: string },\n    Cases extends {\n      [K in E[\"_tag\"]]+?: (error: Extract<E, { _tag: K }>) => Stream.Stream<any, any, any>\n    }\n  >(\n    cases: Cases\n  ): <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<\n    | A\n    | {\n      [K in keyof Cases]: Cases[K] extends\n        ((...args: Array<any>) => Stream.Stream.Variance<infer A, infer _E, infer _R>) ? A\n        : never\n    }[keyof Cases],\n    | Exclude<E, { _tag: keyof Cases }>\n    | {\n      [K in keyof Cases]: Cases[K] extends\n        ((...args: Array<any>) => Stream.Stream.Variance<infer _A, infer E, infer _R>) ? E\n        : never\n    }[keyof Cases],\n    | R\n    | {\n      [K in keyof Cases]: Cases[K] extends\n        ((...args: Array<any>) => Stream.Stream.Variance<infer _A, infer _E, infer R>) ? R\n        : never\n    }[keyof Cases]\n  >\n  <\n    A,\n    E extends { _tag: string },\n    R,\n    Cases extends {\n      [K in E[\"_tag\"]]+?: (error: Extract<E, { _tag: K }>) => Stream.Stream<any, any, any>\n    }\n  >(\n    self: Stream.Stream<A, E, R>,\n    cases: Cases\n  ): Stream.Stream<\n    | A\n    | {\n      [K in keyof Cases]: Cases[K] extends\n        ((...args: Array<any>) => Stream.Stream.Variance<infer _R, infer _E, infer A>) ? A\n        : never\n    }[keyof Cases],\n    | Exclude<E, { _tag: keyof Cases }>\n    | {\n      [K in keyof Cases]: Cases[K] extends\n        ((...args: Array<any>) => Stream.Stream.Variance<infer _R, infer E, infer _A>) ? E\n        : never\n    }[keyof Cases],\n    | R\n    | {\n      [K in keyof Cases]: Cases[K] extends\n        ((...args: Array<any>) => Stream.Stream.Variance<infer R, infer _E, infer _A>) ? R\n        : never\n    }[keyof Cases]\n  >\n} = dual(2, (self, cases) =>\n  catchAll(self, (e: any) => {\n    const keys = Object.keys(cases)\n    if (\"_tag\" in e && keys.includes(e[\"_tag\"])) {\n      return cases[e[\"_tag\"]](e as any)\n    }\n    return fail(e as any)\n  }))\n\n/** @internal */\nexport const changes = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<A, E, R> =>\n  pipe(self, changesWith((x, y) => Equal.equals(y)(x)))\n\n/** @internal */\nexport const changesWith = dual<\n  <A>(f: (x: A, y: A) => boolean) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, f: (x: A, y: A) => boolean) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, f: (x: A, y: A) => boolean): Stream.Stream<A, E, R> => {\n  const writer = (\n    last: Option.Option<A>\n  ): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E, E, void, unknown> =>\n    core.readWithCause({\n      onInput: (input: Chunk.Chunk<A>) => {\n        const [newLast, newChunk] = Chunk.reduce(\n          input,\n          [last, Chunk.empty<A>()] as const,\n          ([option, outputs], output) => {\n            if (Option.isSome(option) && f(option.value, output)) {\n              return [Option.some(output), outputs] as const\n            }\n            return [Option.some(output), pipe(outputs, Chunk.append(output))] as const\n          }\n        )\n        return core.flatMap(\n          core.write(newChunk),\n          () => writer(newLast)\n        )\n      },\n      onFailure: core.failCause,\n      onDone: () => core.void\n    })\n  return new StreamImpl(pipe(toChannel(self), core.pipeTo(writer(Option.none()))))\n})\n\n/** @internal */\nexport const changesWithEffect = dual<\n  <A, E2, R2>(\n    f: (x: A, y: A) => Effect.Effect<boolean, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (x: A, y: A) => Effect.Effect<boolean, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (x: A, y: A) => Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E2 | E, R2 | R> => {\n    const writer = (\n      last: Option.Option<A>\n    ): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E | E2, void, unknown, R | R2> =>\n      core.readWithCause({\n        onInput: (input: Chunk.Chunk<A>) =>\n          pipe(\n            input,\n            Effect.reduce([last, Chunk.empty<A>()] as const, ([option, outputs], output) => {\n              if (Option.isSome(option)) {\n                return pipe(\n                  f(option.value, output),\n                  Effect.map((bool) =>\n                    bool ?\n                      [Option.some(output), outputs] as const :\n                      [Option.some(output), pipe(outputs, Chunk.append(output))] as const\n                  )\n                )\n              }\n              return Effect.succeed(\n                [\n                  Option.some(output),\n                  pipe(outputs, Chunk.append(output))\n                ] as const\n              )\n            }),\n            core.fromEffect,\n            core.flatMap(([newLast, newChunk]) =>\n              pipe(\n                core.write(newChunk),\n                core.flatMap(() => writer(newLast))\n              )\n            )\n          ),\n        onFailure: core.failCause,\n        onDone: () => core.void\n      })\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(writer(Option.none()))))\n  }\n)\n\n/** @internal */\nexport const chunks = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<Chunk.Chunk<A>, E, R> =>\n  pipe(self, mapChunks(Chunk.of))\n\n/** @internal */\nexport const chunksWith = dual<\n  <A, E, R, A2, E2, R2>(\n    f: (stream: Stream.Stream<Chunk.Chunk<A>, E, R>) => Stream.Stream<Chunk.Chunk<A2>, E2, R2>\n  ) => (self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (stream: Stream.Stream<Chunk.Chunk<A>, E, R>) => Stream.Stream<Chunk.Chunk<A2>, E2, R2>\n  ) => Stream.Stream<A2, E | E2, R | R2>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (stream: Stream.Stream<Chunk.Chunk<A>, E, R>) => Stream.Stream<Chunk.Chunk<A2>, E2, R2>\n  ): Stream.Stream<A2, E | E2, R | R2> => flattenChunks(f(chunks(self)))\n)\n\nconst unsome = <A, E, R>(effect: Effect.Effect<A, Option.Option<E>, R>): Effect.Effect<Option.Option<A>, E, R> =>\n  Effect.catchAll(\n    Effect.asSome(effect),\n    (o) => o._tag === \"None\" ? Effect.succeedNone : Effect.fail(o.value)\n  )\n\n/** @internal */\nexport const combine = dual<\n  <A2, E2, R2, S, R3, E, A, R4, R5, A3>(\n    that: Stream.Stream<A2, E2, R2>,\n    s: S,\n    f: (\n      s: S,\n      pullLeft: Effect.Effect<A, Option.Option<E>, R3>,\n      pullRight: Effect.Effect<A2, Option.Option<E2>, R4>\n    ) => Effect.Effect<Exit.Exit<readonly [A3, S], Option.Option<E2 | E>>, never, R5>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A3, E2 | E, R2 | R3 | R4 | R5 | R>,\n  <R, A2, E2, R2, S, R3, E, A, R4, R5, A3>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    s: S,\n    f: (\n      s: S,\n      pullLeft: Effect.Effect<A, Option.Option<E>, R3>,\n      pullRight: Effect.Effect<A2, Option.Option<E2>, R4>\n    ) => Effect.Effect<Exit.Exit<readonly [A3, S], Option.Option<E2 | E>>, never, R5>\n  ) => Stream.Stream<A3, E2 | E, R2 | R3 | R4 | R5 | R>\n>(4, <R, A2, E2, R2, S, R3, E, A, R4, R5, A3>(\n  self: Stream.Stream<A, E, R>,\n  that: Stream.Stream<A2, E2, R2>,\n  s: S,\n  f: (\n    s: S,\n    pullLeft: Effect.Effect<A, Option.Option<E>, R3>,\n    pullRight: Effect.Effect<A2, Option.Option<E2>, R4>\n  ) => Effect.Effect<Exit.Exit<readonly [A3, S], Option.Option<E2 | E>>, never, R5>\n): Stream.Stream<A3, E2 | E, R2 | R3 | R4 | R5 | R> => {\n  const producer = <Err, Elem>(\n    handoff: Handoff.Handoff<Exit.Exit<Elem, Option.Option<Err>>>,\n    latch: Handoff.Handoff<void>\n  ): Channel.Channel<never, Elem, never, Err, unknown, unknown, R> =>\n    pipe(\n      core.fromEffect(Handoff.take(latch)),\n      channel.zipRight(core.readWithCause({\n        onInput: (input) =>\n          core.flatMap(\n            core.fromEffect(pipe(\n              handoff,\n              Handoff.offer<Exit.Exit<Elem, Option.Option<Err>>>(Exit.succeed(input))\n            )),\n            () => producer(handoff, latch)\n          ),\n        onFailure: (cause) =>\n          core.fromEffect(\n            Handoff.offer<Exit.Exit<Elem, Option.Option<Err>>>(\n              handoff,\n              Exit.failCause(pipe(cause, Cause.map(Option.some)))\n            )\n          ),\n        onDone: () =>\n          core.flatMap(\n            core.fromEffect(\n              Handoff.offer<Exit.Exit<Elem, Option.Option<Err>>>(\n                handoff,\n                Exit.fail(Option.none())\n              )\n            ),\n            () => producer(handoff, latch)\n          )\n      }))\n    )\n  return new StreamImpl(\n    channel.unwrapScoped(\n      Effect.gen(function*($) {\n        const left = yield* $(Handoff.make<Exit.Exit<A, Option.Option<E>>>())\n        const right = yield* $(Handoff.make<Exit.Exit<A2, Option.Option<E2>>>())\n        const latchL = yield* $(Handoff.make<void>())\n        const latchR = yield* $(Handoff.make<void>())\n        yield* $(\n          toChannel(self),\n          channel.concatMap(channel.writeChunk),\n          core.pipeTo(producer(left, latchL)),\n          channelExecutor.runScoped,\n          Effect.forkScoped\n        )\n        yield* $(\n          toChannel(that),\n          channel.concatMap(channel.writeChunk),\n          core.pipeTo(producer(right, latchR)),\n          channelExecutor.runScoped,\n          Effect.forkScoped\n        )\n        const pullLeft = pipe(\n          latchL,\n          Handoff.offer<void>(void 0),\n          // TODO: remove\n          Effect.zipRight(pipe(Handoff.take(left), Effect.flatMap((exit) => Effect.suspend(() => exit))))\n        )\n        const pullRight = pipe(\n          latchR,\n          Handoff.offer<void>(void 0),\n          // TODO: remove\n          Effect.zipRight(pipe(Handoff.take(right), Effect.flatMap((exit) => Effect.suspend(() => exit))))\n        )\n        return toChannel(unfoldEffect(s, (s) => Effect.flatMap(f(s, pullLeft, pullRight), unsome)))\n      })\n    )\n  )\n})\n\n/** @internal */\nexport const combineChunks = dual<\n  <A2, E2, R2, S, R3, E, A, R4, R5, A3>(\n    that: Stream.Stream<A2, E2, R2>,\n    s: S,\n    f: (\n      s: S,\n      pullLeft: Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R3>,\n      pullRight: Effect.Effect<Chunk.Chunk<A2>, Option.Option<E2>, R4>\n    ) => Effect.Effect<Exit.Exit<readonly [Chunk.Chunk<A3>, S], Option.Option<E2 | E>>, never, R5>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A3, E2 | E, R2 | R3 | R4 | R5 | R>,\n  <R, A2, E2, R2, S, R3, E, A, R4, R5, A3>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    s: S,\n    f: (\n      s: S,\n      pullLeft: Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R3>,\n      pullRight: Effect.Effect<Chunk.Chunk<A2>, Option.Option<E2>, R4>\n    ) => Effect.Effect<Exit.Exit<readonly [Chunk.Chunk<A3>, S], Option.Option<E2 | E>>, never, R5>\n  ) => Stream.Stream<A3, E2 | E, R2 | R3 | R4 | R5 | R>\n>(4, <R, A2, E2, R2, S, R3, E, A, R4, R5, A3>(\n  self: Stream.Stream<A, E, R>,\n  that: Stream.Stream<A2, E2, R2>,\n  s: S,\n  f: (\n    s: S,\n    pullLeft: Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R3>,\n    pullRight: Effect.Effect<Chunk.Chunk<A2>, Option.Option<E2>, R4>\n  ) => Effect.Effect<Exit.Exit<readonly [Chunk.Chunk<A3>, S], Option.Option<E2 | E>>, never, R5>\n): Stream.Stream<A3, E2 | E, R2 | R3 | R4 | R5 | R> => {\n  const producer = <Err, Elem>(\n    handoff: Handoff.Handoff<Take.Take<Elem, Err>>,\n    latch: Handoff.Handoff<void>\n  ): Channel.Channel<never, Chunk.Chunk<Elem>, never, Err, unknown, unknown, R> =>\n    channel.zipRight(\n      core.fromEffect(Handoff.take(latch)),\n      core.readWithCause({\n        onInput: (input) =>\n          core.flatMap(\n            core.fromEffect(pipe(\n              handoff,\n              Handoff.offer<Take.Take<Elem, Err>>(InternalTake.chunk(input))\n            )),\n            () => producer(handoff, latch)\n          ),\n        onFailure: (cause) =>\n          core.fromEffect(\n            Handoff.offer<Take.Take<Elem, Err>>(\n              handoff,\n              InternalTake.failCause(cause)\n            )\n          ),\n        onDone: (): Channel.Channel<never, Chunk.Chunk<Elem>, never, Err, unknown, unknown, R> =>\n          core.fromEffect(Handoff.offer<Take.Take<Elem, Err>>(handoff, InternalTake.end))\n      })\n    )\n  return new StreamImpl(\n    pipe(\n      Effect.all([\n        Handoff.make<Take.Take<A, E>>(),\n        Handoff.make<Take.Take<A2, E2>>(),\n        Handoff.make<void>(),\n        Handoff.make<void>()\n      ]),\n      Effect.tap(([left, _, latchL]) =>\n        pipe(\n          toChannel(self),\n          core.pipeTo(producer(left, latchL)),\n          channelExecutor.runScoped,\n          Effect.forkScoped\n        )\n      ),\n      Effect.tap(([_, right, __, latchR]) =>\n        pipe(\n          toChannel(that),\n          core.pipeTo(producer(right, latchR)),\n          channelExecutor.runScoped,\n          Effect.forkScoped\n        )\n      ),\n      Effect.map(([left, right, latchL, latchR]) => {\n        const pullLeft = pipe(\n          latchL,\n          Handoff.offer<void>(void 0),\n          Effect.zipRight(\n            pipe(\n              Handoff.take(left),\n              Effect.flatMap(InternalTake.done)\n            )\n          )\n        )\n        const pullRight = pipe(\n          latchR,\n          Handoff.offer<void>(void 0),\n          Effect.zipRight(\n            pipe(\n              Handoff.take(right),\n              Effect.flatMap(InternalTake.done)\n            )\n          )\n        )\n        return toChannel(unfoldChunkEffect(s, (s) => Effect.flatMap(f(s, pullLeft, pullRight), unsome)))\n      }),\n      channel.unwrapScoped\n    )\n  )\n})\n\n/** @internal */\nexport const concat = dual<\n  <A2, E2, R2>(\n    that: Stream.Stream<A2, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<A2 | A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<A2 | A, E2 | E, R2 | R> =>\n    new StreamImpl<A2 | A, E2 | E, R2 | R>(pipe(toChannel(self), channel.zipRight(toChannel(that))))\n)\n\n/** @internal */\nexport const concatAll = <A, E, R>(streams: Chunk.Chunk<Stream.Stream<A, E, R>>): Stream.Stream<A, E, R> =>\n  suspend(() => pipe(streams, Chunk.reduce(empty as Stream.Stream<A, E, R>, (x, y) => concat(y)(x))))\n\n/** @internal */\nexport const cross: {\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ): <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<[AL, AR], EL | ER, RL | RR>\n  <AL, ER, RR, AR, EL, RL>(\n    left: Stream.Stream<AL, ER, RR>,\n    right: Stream.Stream<AR, EL, RL>\n  ): Stream.Stream<[AL, AR], EL | ER, RL | RR>\n} = dual(\n  2,\n  <AL, ER, RR, AR, EL, RL>(\n    left: Stream.Stream<AL, ER, RR>,\n    right: Stream.Stream<AR, EL, RL>\n  ): Stream.Stream<[AL, AR], EL | ER, RL | RR> => pipe(left, crossWith(right, (a, a2) => [a, a2]))\n)\n\n/** @internal */\nexport const crossLeft: {\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ): <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<AL, EL | ER, RL | RR>\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AL, EL | ER, RL | RR>\n} = dual(\n  2,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AL, EL | ER, RL | RR> => pipe(left, crossWith(right, (a, _) => a))\n)\n\n/** @internal */\nexport const crossRight: {\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ): <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<AR, EL | ER, RL | RR>\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AR, EL | ER, RL | RR>\n} = dual(\n  2,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AR, EL | ER, RL | RR> => flatMap(left, () => right)\n)\n\n/** @internal */\nexport const crossWith: {\n  <AR, ER, RR, AL, A>(\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): <EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<A, EL | ER, RL | RR>\n  <AL, EL, RL, AR, ER, RR, A>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): Stream.Stream<A, EL | ER, RL | RR>\n} = dual(\n  3,\n  <AL, EL, RL, AR, ER, RR, A>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): Stream.Stream<A, EL | ER, RL | RR> => pipe(left, flatMap((a) => pipe(right, map((b) => f(a, b)))))\n)\n\n/** @internal */\nexport const debounce = dual<\n  (duration: Duration.DurationInput) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, duration: Duration.DurationInput) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, duration: Duration.DurationInput): Stream.Stream<A, E, R> =>\n  pipe(\n    singleProducerAsyncInput.make<never, Chunk.Chunk<A>, unknown>(),\n    Effect.flatMap((input) =>\n      Effect.transplant((grafter) =>\n        pipe(\n          Handoff.make<HandoffSignal.HandoffSignal<A, E>>(),\n          Effect.map((handoff) => {\n            const enqueue = (last: Chunk.Chunk<A>): Effect.Effect<\n              Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown>\n            > =>\n              pipe(\n                Clock.sleep(duration),\n                Effect.as(last),\n                Effect.fork,\n                grafter,\n                Effect.map((fiber) => consumer(DebounceState.previous(fiber)))\n              )\n            const producer: Channel.Channel<never, Chunk.Chunk<A>, E, E, unknown, unknown> = core\n              .readWithCause({\n                onInput: (input: Chunk.Chunk<A>) =>\n                  Option.match(Chunk.last(input), {\n                    onNone: () => producer,\n                    onSome: (last) =>\n                      core.flatMap(\n                        core.fromEffect(\n                          Handoff.offer<HandoffSignal.HandoffSignal<A, E>>(\n                            handoff,\n                            HandoffSignal.emit(Chunk.of(last))\n                          )\n                        ),\n                        () => producer\n                      )\n                  }),\n                onFailure: (cause) =>\n                  core.fromEffect(\n                    Handoff.offer<HandoffSignal.HandoffSignal<A, E>>(handoff, HandoffSignal.halt(cause))\n                  ),\n                onDone: () =>\n                  core.fromEffect(\n                    Handoff.offer<HandoffSignal.HandoffSignal<A, E>>(\n                      handoff,\n                      HandoffSignal.end(SinkEndReason.UpstreamEnd)\n                    )\n                  )\n              })\n            const consumer = (\n              state: DebounceState.DebounceState<A, E>\n            ): Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown> => {\n              switch (state._tag) {\n                case DebounceState.OP_NOT_STARTED: {\n                  return pipe(\n                    Handoff.take(handoff),\n                    Effect.map((signal) => {\n                      switch (signal._tag) {\n                        case HandoffSignal.OP_EMIT: {\n                          return channel.unwrap(enqueue(signal.elements))\n                        }\n                        case HandoffSignal.OP_HALT: {\n                          return core.failCause(signal.cause)\n                        }\n                        case HandoffSignal.OP_END: {\n                          return core.void\n                        }\n                      }\n                    }),\n                    channel.unwrap\n                  )\n                }\n                case DebounceState.OP_PREVIOUS: {\n                  return channel.unwrap(\n                    Effect.raceWith(Fiber.join(state.fiber), Handoff.take(handoff), {\n                      onSelfDone: (leftExit, current) =>\n                        Exit.match(leftExit, {\n                          onFailure: (cause) => pipe(Fiber.interrupt(current), Effect.as(core.failCause(cause))),\n                          onSuccess: (chunk) =>\n                            Effect.succeed(\n                              pipe(core.write(chunk), core.flatMap(() => consumer(DebounceState.current(current))))\n                            )\n                        }),\n                      onOtherDone: (rightExit, previous) =>\n                        Exit.match(rightExit, {\n                          onFailure: (cause) => pipe(Fiber.interrupt(previous), Effect.as(core.failCause(cause))),\n                          onSuccess: (signal) => {\n                            switch (signal._tag) {\n                              case HandoffSignal.OP_EMIT: {\n                                return pipe(Fiber.interrupt(previous), Effect.zipRight(enqueue(signal.elements)))\n                              }\n                              case HandoffSignal.OP_HALT: {\n                                return pipe(Fiber.interrupt(previous), Effect.as(core.failCause(signal.cause)))\n                              }\n                              case HandoffSignal.OP_END: {\n                                return pipe(\n                                  Fiber.join(previous),\n                                  Effect.map((chunk) => pipe(core.write(chunk), channel.zipRight(core.void)))\n                                )\n                              }\n                            }\n                          }\n                        })\n                    })\n                  )\n                }\n                case DebounceState.OP_CURRENT: {\n                  return pipe(\n                    Fiber.join(state.fiber),\n                    Effect.map((signal) => {\n                      switch (signal._tag) {\n                        case HandoffSignal.OP_EMIT: {\n                          return channel.unwrap(enqueue(signal.elements))\n                        }\n                        case HandoffSignal.OP_HALT: {\n                          return core.failCause(signal.cause)\n                        }\n                        case HandoffSignal.OP_END: {\n                          return core.void\n                        }\n                      }\n                    }),\n                    channel.unwrap\n                  )\n                }\n              }\n            }\n            const debounceChannel: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E, E, unknown, unknown> = pipe(\n              channel.fromInput(input),\n              core.pipeTo(producer),\n              channelExecutor.run,\n              Effect.forkScoped,\n              Effect.as(pipe(\n                consumer(DebounceState.notStarted),\n                core.embedInput<E, Chunk.Chunk<A>, unknown>(input as any)\n              )),\n              channel.unwrapScoped\n            )\n            return new StreamImpl(pipe(toChannel(self), core.pipeTo(debounceChannel)))\n          })\n        )\n      )\n    ),\n    unwrap\n  ))\n\n/** @internal */\nexport const die = (defect: unknown): Stream.Stream<never> => fromEffect(Effect.die(defect))\n\n/** @internal */\nexport const dieSync = (evaluate: LazyArg<unknown>): Stream.Stream<never> => fromEffect(Effect.dieSync(evaluate))\n\n/** @internal */\nexport const dieMessage = (message: string): Stream.Stream<never> => fromEffect(Effect.dieMessage(message))\n\n/** @internal */\nexport const distributedWith = dual<\n  <N extends number, A>(\n    options: {\n      readonly size: N\n      readonly maximumLag: number\n      readonly decide: (a: A) => Effect.Effect<Predicate<number>>\n    }\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<\n    TupleOf<N, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>>,\n    never,\n    Scope.Scope | R\n  >,\n  <A, E, R, N extends number>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly size: N\n      readonly maximumLag: number\n      readonly decide: (a: A) => Effect.Effect<Predicate<number>>\n    }\n  ) => Effect.Effect<\n    TupleOf<N, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>>,\n    never,\n    Scope.Scope | R\n  >\n>(\n  2,\n  <A, E, R, N extends number>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly size: N\n      readonly maximumLag: number\n      readonly decide: (a: A) => Effect.Effect<Predicate<number>>\n    }\n  ): Effect.Effect<\n    TupleOf<N, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>>,\n    never,\n    Scope.Scope | R\n  > =>\n    pipe(\n      Deferred.make<(a: A) => Effect.Effect<Predicate<number>>>(),\n      Effect.flatMap((deferred) =>\n        pipe(\n          self,\n          distributedWithDynamic({\n            maximumLag: options.maximumLag,\n            decide: (a) => Effect.flatMap(Deferred.await(deferred), (f) => f(a))\n          }),\n          Effect.flatMap((next) =>\n            pipe(\n              Effect.all(\n                Chunk.map(\n                  Chunk.range(0, options.size - 1),\n                  (id) => Effect.map(next, ([key, queue]) => [[key, id], queue] as const)\n                )\n              ),\n              Effect.map(Chunk.unsafeFromArray),\n              Effect.flatMap((entries) => {\n                const [mappings, queues] = Chunk.reduceRight(\n                  entries,\n                  [\n                    new Map<number, number>(),\n                    Chunk.empty<Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>>()\n                  ] as const,\n                  ([mappings, queues], [mapping, queue]) =>\n                    [\n                      mappings.set(mapping[0], mapping[1]),\n                      pipe(queues, Chunk.prepend(queue))\n                    ] as const\n                )\n                return pipe(\n                  Deferred.succeed(deferred, (a: A) =>\n                    Effect.map(options.decide(a), (f) => (key: number) => pipe(f(mappings.get(key)!)))),\n                  Effect.as(\n                    Array.from(queues) as TupleOf<N, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>>\n                  )\n                )\n              })\n            )\n          )\n        )\n      )\n    )\n)\n\n/** @internal */\nconst distributedWithDynamicId = { ref: 0 }\n\nconst newDistributedWithDynamicId = () => {\n  const current = distributedWithDynamicId.ref\n  distributedWithDynamicId.ref = current + 1\n  return current\n}\n\n/** @internal */\nexport const distributedWithDynamic = dual<\n  <A>(\n    options: {\n      readonly maximumLag: number\n      readonly decide: (a: A) => Effect.Effect<Predicate<number>>\n    }\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<\n    Effect.Effect<[number, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>]>,\n    never,\n    Scope.Scope | R\n  >,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly maximumLag: number\n      readonly decide: (a: A) => Effect.Effect<Predicate<number>>\n    }\n  ) => Effect.Effect<\n    Effect.Effect<[number, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>]>,\n    never,\n    Scope.Scope | R\n  >\n>(2, <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  options: {\n    readonly maximumLag: number\n    readonly decide: (a: A) => Effect.Effect<Predicate<number>>\n  }\n): Effect.Effect<\n  Effect.Effect<[number, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>]>,\n  never,\n  Scope.Scope | R\n> => distributedWithDynamicCallback(self, options.maximumLag, options.decide, () => Effect.void))\n\n/** @internal */\nexport const distributedWithDynamicCallback = dual<\n  <A, E, X>(\n    maximumLag: number,\n    decide: (a: A) => Effect.Effect<Predicate<number>>,\n    done: (exit: Exit.Exit<never, Option.Option<E>>) => Effect.Effect<X>\n  ) => <R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<\n    Effect.Effect<[number, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>]>,\n    never,\n    Scope.Scope | R\n  >,\n  <A, E, R, X>(\n    self: Stream.Stream<A, E, R>,\n    maximumLag: number,\n    decide: (a: A) => Effect.Effect<Predicate<number>>,\n    done: (exit: Exit.Exit<never, Option.Option<E>>) => Effect.Effect<X>\n  ) => Effect.Effect<\n    Effect.Effect<[number, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>]>,\n    never,\n    Scope.Scope | R\n  >\n>(4, <A, E, R, X>(\n  self: Stream.Stream<A, E, R>,\n  maximumLag: number,\n  decide: (a: A) => Effect.Effect<Predicate<number>>,\n  done: (exit: Exit.Exit<never, Option.Option<E>>) => Effect.Effect<X>\n): Effect.Effect<\n  Effect.Effect<[number, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>]>,\n  never,\n  Scope.Scope | R\n> =>\n  pipe(\n    Effect.acquireRelease(\n      Ref.make<Map<number, Queue.Queue<Exit.Exit<A, Option.Option<E>>>>>(new Map()),\n      (ref, _) => pipe(Ref.get(ref), Effect.flatMap((queues) => pipe(queues.values(), Effect.forEach(Queue.shutdown))))\n    ),\n    Effect.flatMap((queuesRef) =>\n      Effect.gen(function*($) {\n        const offer = (a: A): Effect.Effect<void> =>\n          pipe(\n            decide(a),\n            Effect.flatMap((shouldProcess) =>\n              pipe(\n                Ref.get(queuesRef),\n                Effect.flatMap((queues) =>\n                  pipe(\n                    queues.entries(),\n                    Effect.reduce(Chunk.empty<number>(), (acc, [id, queue]) => {\n                      if (shouldProcess(id)) {\n                        return pipe(\n                          Queue.offer(queue, Exit.succeed(a)),\n                          Effect.matchCauseEffect({\n                            onFailure: (cause) =>\n                              // Ignore all downstream queues that were shut\n                              // down and remove them later\n                              Cause.isInterrupted(cause) ?\n                                Effect.succeed(pipe(acc, Chunk.prepend(id))) :\n                                Effect.failCause(cause),\n                            onSuccess: () => Effect.succeed(acc)\n                          })\n                        )\n                      }\n                      return Effect.succeed(acc)\n                    }),\n                    Effect.flatMap((ids) => {\n                      if (Chunk.isNonEmpty(ids)) {\n                        return pipe(\n                          Ref.update(queuesRef, (map) => {\n                            for (const id of ids) {\n                              map.delete(id)\n                            }\n                            return map\n                          })\n                        )\n                      }\n                      return Effect.void\n                    })\n                  )\n                )\n              )\n            ),\n            Effect.asVoid\n          )\n        const queuesLock = yield* $(Effect.makeSemaphore(1))\n        const newQueue = yield* $(\n          Ref.make<Effect.Effect<[number, Queue.Queue<Exit.Exit<A, Option.Option<E>>>]>>(\n            pipe(\n              Queue.bounded<Exit.Exit<A, Option.Option<E>>>(maximumLag),\n              Effect.flatMap((queue) => {\n                const id = newDistributedWithDynamicId()\n                return pipe(\n                  Ref.update(queuesRef, (map) => map.set(id, queue)),\n                  Effect.as([id, queue])\n                )\n              })\n            )\n          )\n        )\n        const finalize = (endTake: Exit.Exit<never, Option.Option<E>>): Effect.Effect<void> =>\n          // Make sure that no queues are currently being added\n          queuesLock.withPermits(1)(\n            pipe(\n              Ref.set(\n                newQueue,\n                pipe(\n                  // All newly created queues should end immediately\n                  Queue.bounded<Exit.Exit<A, Option.Option<E>>>(1),\n                  Effect.tap((queue) => Queue.offer(queue, endTake)),\n                  Effect.flatMap((queue) => {\n                    const id = newDistributedWithDynamicId()\n                    return pipe(\n                      Ref.update(queuesRef, (map) => map.set(id, queue)),\n                      Effect.as(Tuple.make(id, queue))\n                    )\n                  })\n                )\n              ),\n              Effect.zipRight(\n                pipe(\n                  Ref.get(queuesRef),\n                  Effect.flatMap((map) =>\n                    pipe(\n                      Chunk.fromIterable(map.values()),\n                      Effect.forEach((queue) =>\n                        pipe(\n                          Queue.offer(queue, endTake),\n                          Effect.catchSomeCause((cause) =>\n                            Cause.isInterrupted(cause) ? Option.some(Effect.void) : Option.none()\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              ),\n              Effect.zipRight(done(endTake)),\n              Effect.asVoid\n            )\n          )\n        yield* $(\n          self,\n          runForEachScoped(offer),\n          Effect.matchCauseEffect({\n            onFailure: (cause) => finalize(Exit.failCause(pipe(cause, Cause.map(Option.some)))),\n            onSuccess: () => finalize(Exit.fail(Option.none()))\n          }),\n          Effect.forkScoped\n        )\n        return queuesLock.withPermits(1)(\n          Effect.flatten(Ref.get(newQueue))\n        )\n      })\n    )\n  ))\n\n/** @internal */\nexport const drain = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<never, E, R> =>\n  new StreamImpl(channel.drain(toChannel(self)))\n\n/** @internal */\nexport const drainFork = dual<\n  <A2, E2, R2>(\n    that: Stream.Stream<A2, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<A, E2 | E, R2 | R> =>\n    pipe(\n      fromEffect(Deferred.make<never, E2>()),\n      flatMap((backgroundDied) =>\n        pipe(\n          scoped(\n            pipe(\n              that,\n              runForEachScoped(() => Effect.void),\n              Effect.catchAllCause((cause) => Deferred.failCause(backgroundDied, cause)),\n              Effect.forkScoped\n            )\n          ),\n          crossRight(pipe(self, interruptWhenDeferred(backgroundDied)))\n        )\n      )\n    )\n)\n\n/** @internal */\nexport const drop = dual<\n  (n: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, n: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, n: number): Stream.Stream<A, E, R> => {\n  const loop = (r: number): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, never, never, unknown, unknown> =>\n    core.readWith({\n      onInput: (input: Chunk.Chunk<A>) => {\n        const dropped = pipe(input, Chunk.drop(r))\n        const leftover = Math.max(0, r - input.length)\n        const more = Chunk.isEmpty(input) || leftover > 0\n        if (more) {\n          return loop(leftover)\n        }\n        return pipe(\n          core.write(dropped),\n          channel.zipRight(channel.identityChannel<Chunk.Chunk<A>, never, unknown>())\n        )\n      },\n      onFailure: core.fail,\n      onDone: () => core.void\n    })\n  return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(loop(n))))\n})\n\n/** @internal */\nexport const dropRight = dual<\n  (n: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, n: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, n: number): Stream.Stream<A, E, R> => {\n  if (n <= 0) {\n    return identityStream()\n  }\n  return suspend(() => {\n    const queue = new RingBuffer<A>(n)\n    const reader: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E, E, void, unknown> = core.readWith({\n      onInput: (input: Chunk.Chunk<A>) => {\n        const outputs = pipe(\n          input,\n          Chunk.filterMap((elem) => {\n            const head = queue.head()\n            queue.put(elem)\n            return head\n          })\n        )\n        return pipe(core.write(outputs), core.flatMap(() => reader))\n      },\n      onFailure: core.fail,\n      onDone: () => core.void\n    })\n    return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(reader)))\n  })\n})\n\n/** @internal */\nexport const dropUntil = dual<\n  <A>(predicate: Predicate<NoInfer<A>>) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>) => Stream.Stream<A, E, R>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R> =>\n    drop(dropWhile(self, (a) => !predicate(a)), 1)\n)\n\n/** @internal */\nexport const dropUntilEffect = dual<\n  <A, E2, R2>(\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E2 | E, R2 | R> => {\n    const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2> = core.readWith({\n      onInput: (input: Chunk.Chunk<A>) =>\n        pipe(\n          Effect.dropUntil(input, predicate),\n          Effect.map(Chunk.unsafeFromArray),\n          Effect.map((leftover) => {\n            const more = Chunk.isEmpty(leftover)\n            if (more) {\n              return core.suspend(() => loop)\n            }\n            return pipe(\n              core.write(leftover),\n              channel.zipRight(channel.identityChannel<Chunk.Chunk<A>, E | E2, unknown>())\n            )\n          }),\n          channel.unwrap\n        ),\n      onFailure: core.fail,\n      onDone: () => core.void\n    })\n    return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(loop)))\n  }\n)\n\n/** @internal */\nexport const dropWhile = dual<\n  <A>(predicate: Predicate<NoInfer<A>>) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R> => {\n  const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, never, never, unknown, unknown> = core.readWith({\n    onInput: (input: Chunk.Chunk<A>) => {\n      const output = Chunk.dropWhile(input, predicate)\n      if (Chunk.isEmpty(output)) {\n        return core.suspend(() => loop)\n      }\n      return channel.zipRight(\n        core.write(output),\n        channel.identityChannel<Chunk.Chunk<A>, never, unknown>()\n      )\n    },\n    onFailure: core.fail,\n    onDone: core.succeedNow\n  })\n  return new StreamImpl(channel.pipeToOrFail(toChannel(self), loop))\n})\n\n/** @internal */\nexport const dropWhileEffect = dual<\n  <A, E2, R2>(\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: A) => Effect.Effect<boolean, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: A) => Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E2 | E, R2 | R> => {\n    const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2> = core.readWith({\n      onInput: (input: Chunk.Chunk<A>) =>\n        pipe(\n          Effect.dropWhile(input, predicate),\n          Effect.map(Chunk.unsafeFromArray),\n          Effect.map((leftover) => {\n            const more = Chunk.isEmpty(leftover)\n            if (more) {\n              return core.suspend(() => loop)\n            }\n            return channel.zipRight(\n              core.write(leftover),\n              channel.identityChannel<Chunk.Chunk<A>, E | E2, unknown>()\n            )\n          }),\n          channel.unwrap\n        ),\n      onFailure: core.fail,\n      onDone: () => core.void\n    })\n    return new StreamImpl(channel.pipeToOrFail(\n      toChannel(self),\n      loop\n    ))\n  }\n)\n\n/** @internal */\nexport const either = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<Either.Either<A, E>, never, R> =>\n  pipe(self, map(Either.right), catchAll((error) => make(Either.left(error))))\n\n/** @internal */\nexport const empty: Stream.Stream<never> = new StreamImpl(core.void)\n\n/** @internal */\nexport const ensuring = dual<\n  <X, R2>(\n    finalizer: Effect.Effect<X, never, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R2 | R>,\n  <A, E, R, X, R2>(self: Stream.Stream<A, E, R>, finalizer: Effect.Effect<X, never, R2>) => Stream.Stream<A, E, R2 | R>\n>(\n  2,\n  <A, E, R, X, R2>(self: Stream.Stream<A, E, R>, finalizer: Effect.Effect<X, never, R2>): Stream.Stream<A, E, R2 | R> =>\n    new StreamImpl(pipe(toChannel(self), channel.ensuring(finalizer)))\n)\n\n/** @internal */\nexport const ensuringWith = dual<\n  <E, R2>(\n    finalizer: (exit: Exit.Exit<unknown, E>) => Effect.Effect<unknown, never, R2>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R | R2>,\n  <A, E, R, R2>(\n    self: Stream.Stream<A, E, R>,\n    finalizer: (exit: Exit.Exit<unknown, E>) => Effect.Effect<unknown, never, R2>\n  ) => Stream.Stream<A, E, R | R2>\n>(2, (self, finalizer) => new StreamImpl(core.ensuringWith(toChannel(self), finalizer)))\n\n/** @internal */\nexport const context = <R>(): Stream.Stream<Context.Context<R>, never, R> => fromEffect(Effect.context<R>())\n\n/** @internal */\nexport const contextWith = <R, A>(f: (env: Context.Context<R>) => A): Stream.Stream<A, never, R> =>\n  pipe(context<R>(), map(f))\n\n/** @internal */\nexport const contextWithEffect = <R0, A, E, R>(\n  f: (env: Context.Context<R0>) => Effect.Effect<A, E, R>\n): Stream.Stream<A, E, R0 | R> => pipe(context<R0>(), mapEffectSequential(f))\n\n/** @internal */\nexport const contextWithStream = <R0, A, E, R>(\n  f: (env: Context.Context<R0>) => Stream.Stream<A, E, R>\n): Stream.Stream<A, E, R0 | R> => pipe(context<R0>(), flatMap(f))\n\n/** @internal */\nexport const execute = <X, E, R>(effect: Effect.Effect<X, E, R>): Stream.Stream<never, E, R> =>\n  drain(fromEffect(effect))\n\n/** @internal */\nexport const fail = <E>(error: E): Stream.Stream<never, E> => fromEffectOption(Effect.fail(Option.some(error)))\n\n/** @internal */\nexport const failSync = <E>(evaluate: LazyArg<E>): Stream.Stream<never, E> =>\n  fromEffectOption(Effect.failSync(() => Option.some(evaluate())))\n\n/** @internal */\nexport const failCause = <E>(cause: Cause.Cause<E>): Stream.Stream<never, E> => fromEffect(Effect.failCause(cause))\n\n/** @internal */\nexport const failCauseSync = <E>(evaluate: LazyArg<Cause.Cause<E>>): Stream.Stream<never, E> =>\n  fromEffect(Effect.failCauseSync(evaluate))\n\n/** @internal */\nexport const filter: {\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E, R>\n  <A, B extends A>(predicate: Predicate<B>): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>\n  <A, E, R, B extends A>(self: Stream.Stream<A, E, R>, refinement: Refinement<A, B>): Stream.Stream<B, E, R>\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R>\n} = dual(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>) => mapChunks(self, Chunk.filter(predicate))\n)\n\n/** @internal */\nexport const filterEffect = dual<\n  <A, E2, R2>(\n    f: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<boolean, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E2 | E, R2 | R> => {\n    const loop = (\n      iterator: Iterator<A>\n    ): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2> => {\n      const next = iterator.next()\n      if (next.done) {\n        return core.readWithCause({\n          onInput: (input) => loop(input[Symbol.iterator]()),\n          onFailure: core.failCause,\n          onDone: core.succeed\n        })\n      } else {\n        return pipe(\n          f(next.value),\n          Effect.map((bool) =>\n            bool ?\n              pipe(core.write(Chunk.of(next.value)), core.flatMap(() => loop(iterator))) :\n              loop(iterator)\n          ),\n          channel.unwrap\n        )\n      }\n    }\n    return new StreamImpl(\n      core.suspend(() => pipe(toChannel(self), core.pipeTo(loop(Chunk.empty<A>()[Symbol.iterator]()))))\n    )\n  }\n)\n\n/** @internal */\nexport const filterMap = dual<\n  <A, B>(pf: (a: A) => Option.Option<B>) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E, R>,\n  <A, E, R, B>(self: Stream.Stream<A, E, R>, pf: (a: A) => Option.Option<B>) => Stream.Stream<B, E, R>\n>(\n  2,\n  <A, E, R, B>(self: Stream.Stream<A, E, R>, pf: (a: A) => Option.Option<B>): Stream.Stream<B, E, R> =>\n    mapChunks(self, Chunk.filterMap(pf))\n)\n\n/** @internal */\nexport const filterMapEffect = dual<\n  <A, A2, E2, R2>(\n    pf: (a: A) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (a: A) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (a: A) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ): Stream.Stream<A2, E | E2, R | R2> =>\n    suspend(() => {\n      const loop = (\n        iterator: Iterator<A>\n      ): Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R | R2> => {\n        const next = iterator.next()\n        if (next.done) {\n          return core.readWithCause({\n            onInput: (input) => loop(input[Symbol.iterator]()),\n            onFailure: core.failCause,\n            onDone: core.succeed\n          })\n        } else {\n          return pipe(\n            pf(next.value),\n            Option.match({\n              onNone: () => Effect.sync(() => loop(iterator)),\n              onSome: Effect.map((a2) => core.flatMap(core.write(Chunk.of(a2)), () => loop(iterator)))\n            }),\n            channel.unwrap\n          )\n        }\n      }\n      return new StreamImpl(pipe(toChannel(self), core.pipeTo(loop(Chunk.empty<A>()[Symbol.iterator]()))))\n    })\n)\n\n/** @internal */\nexport const filterMapWhile = dual<\n  <A, A2>(\n    pf: (a: A) => Option.Option<A2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E, R>,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, pf: (a: A) => Option.Option<A2>) => Stream.Stream<A2, E, R>\n>(\n  2,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, pf: (a: A) => Option.Option<A2>) => {\n    const loop: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E, E, unknown, unknown> = core.readWith({\n      onInput: (input: Chunk.Chunk<A>) => {\n        const mapped = Chunk.filterMapWhile(input, pf)\n        if (mapped.length === input.length) {\n          return pipe(core.write(mapped), core.flatMap(() => loop))\n        }\n        return core.write(mapped)\n      },\n      onFailure: core.fail,\n      onDone: core.succeed\n    })\n    return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(loop)))\n  }\n)\n\n/** @internal */\nexport const filterMapWhileEffect = dual<\n  <A, A2, E2, R2>(\n    pf: (a: A) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (a: A) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (a: A) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ): Stream.Stream<A2, E | E2, R | R2> =>\n    suspend(() => {\n      const loop = (\n        iterator: Iterator<A>\n      ): Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R | R2> => {\n        const next = iterator.next()\n        if (next.done) {\n          return core.readWithCause({\n            onInput: (input) => loop(input[Symbol.iterator]()),\n            onFailure: core.failCause,\n            onDone: core.succeed\n          })\n        } else {\n          return channel.unwrap(\n            Option.match(pf(next.value), {\n              onNone: () => Effect.succeed(core.void),\n              onSome: Effect.map(\n                (a2) => core.flatMap(core.write(Chunk.of(a2)), () => loop(iterator))\n              )\n            })\n          )\n        }\n      }\n      return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(loop(Chunk.empty<A>()[Symbol.iterator]()))))\n    })\n)\n\n/** @internal */\nexport const finalizer = <R, X>(finalizer: Effect.Effect<X, never, R>): Stream.Stream<void, never, R> =>\n  acquireRelease(Effect.void, () => finalizer)\n\n/** @internal */\nexport const find: {\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E, R>\n  <A>(predicate: Predicate<NoInfer<A>>): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>\n  <A, E, R, B extends A>(self: Stream.Stream<A, E, R>, refinement: Refinement<A, B>): Stream.Stream<B, E, R>\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R>\n} = dual(2, <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R> => {\n  const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E, E, unknown, unknown, R> = core.readWith({\n    onInput: (input: Chunk.Chunk<A>) =>\n      Option.match(Chunk.findFirst(input, predicate), {\n        onNone: () => loop,\n        onSome: (n) => core.write(Chunk.of(n))\n      }),\n    onFailure: core.fail,\n    onDone: () => core.void\n  })\n  return new StreamImpl(pipe(toChannel(self), core.pipeTo(loop)))\n})\n\n/** @internal */\nexport const findEffect: {\n  <A, E2, R2>(\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => {\n    const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2> = core.readWith({\n      onInput: (input: Chunk.Chunk<A>) =>\n        pipe(\n          Effect.findFirst(input, predicate),\n          Effect.map(Option.match({\n            onNone: () => loop,\n            onSome: (n) => core.write(Chunk.of(n))\n          })),\n          channel.unwrap\n        ),\n      onFailure: core.fail,\n      onDone: () => core.void\n    })\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(loop)))\n  }\n)\n\n/** @internal */\nexport const flatMap = dual<\n  <A, A2, E2, R2>(\n    f: (a: A) => Stream.Stream<A2, E2, R2>,\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly bufferSize?: number | undefined\n      readonly switch?: boolean | undefined\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Stream.Stream<A2, E2, R2>,\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly bufferSize?: number | undefined\n      readonly switch?: boolean | undefined\n    }\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  (args) => isStream(args[0]),\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Stream.Stream<A2, E2, R2>,\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly bufferSize?: number | undefined\n      readonly switch?: boolean | undefined\n    }\n  ): Stream.Stream<A2, E | E2, R | R2> => {\n    const bufferSize = options?.bufferSize ?? 16\n\n    if (options?.switch) {\n      return matchConcurrency(\n        options?.concurrency,\n        () => flatMapParSwitchBuffer(self, 1, bufferSize, f),\n        (n) => flatMapParSwitchBuffer(self, n, bufferSize, f)\n      )\n    }\n\n    return matchConcurrency(\n      options?.concurrency,\n      () =>\n        new StreamImpl(\n          channel.concatMap(\n            toChannel(self),\n            (as) =>\n              pipe(\n                as,\n                Chunk.map((a) => toChannel(f(a))),\n                Chunk.reduce(\n                  core.void as Channel.Channel<Chunk.Chunk<A2>, unknown, E2, unknown, unknown, unknown, R2>,\n                  (left, right) => pipe(left, channel.zipRight(right))\n                )\n              )\n          )\n        ),\n      (_) =>\n        new StreamImpl(\n          pipe(\n            toChannel(self),\n            channel.concatMap(channel.writeChunk),\n            channel.mergeMap((out) => toChannel(f(out)), options as any)\n          )\n        )\n    )\n  }\n)\n\n/** @internal */\nexport const matchConcurrency = <A>(\n  concurrency: number | \"unbounded\" | undefined,\n  sequential: () => A,\n  bounded: (n: number) => A\n) => {\n  switch (concurrency) {\n    case undefined:\n      return sequential()\n    case \"unbounded\":\n      return bounded(Number.MAX_SAFE_INTEGER)\n    default:\n      return concurrency > 1 ? bounded(concurrency) : sequential()\n  }\n}\n\nconst flatMapParSwitchBuffer = dual<\n  <A, A2, E2, R2>(\n    n: number,\n    bufferSize: number,\n    f: (a: A) => Stream.Stream<A2, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    n: number,\n    bufferSize: number,\n    f: (a: A) => Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  4,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    n: number,\n    bufferSize: number,\n    f: (a: A) => Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<A2, E | E2, R | R2> =>\n    new StreamImpl(\n      pipe(\n        toChannel(self),\n        channel.concatMap(channel.writeChunk),\n        channel.mergeMap((out) => toChannel(f(out)), {\n          concurrency: n,\n          mergeStrategy: MergeStrategy.BufferSliding(),\n          bufferSize\n        })\n      )\n    )\n)\n\n/** @internal */\nexport const flatten = dual<\n  (options?: {\n    readonly concurrency?: number | \"unbounded\" | undefined\n    readonly bufferSize?: number | undefined\n  }) => <A, E2, R2, E, R>(\n    self: Stream.Stream<Stream.Stream<A, E2, R2>, E, R>\n  ) => Stream.Stream<A, E | E2, R | R2>,\n  <A, E2, R2, E, R>(\n    self: Stream.Stream<Stream.Stream<A, E2, R2>, E, R>,\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly bufferSize?: number | undefined\n    }\n  ) => Stream.Stream<A, E | E2, R | R2>\n>((args) => isStream(args[0]), (self, options) => flatMap(self, identity, options))\n\n/** @internal */\nexport const flattenChunks = <A, E, R>(self: Stream.Stream<Chunk.Chunk<A>, E, R>): Stream.Stream<A, E, R> => {\n  const flatten: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<Chunk.Chunk<A>>, E, E, unknown, unknown> = core\n    .readWithCause({\n      onInput: (chunks: Chunk.Chunk<Chunk.Chunk<A>>) =>\n        core.flatMap(\n          channel.writeChunk(chunks),\n          () => flatten\n        ),\n      onFailure: core.failCause,\n      onDone: () => core.void\n    })\n  return new StreamImpl(pipe(toChannel(self), core.pipeTo(flatten)))\n}\n\n/** @internal */\nexport const flattenEffect = dual<\n  (\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly unordered?: boolean | undefined\n    }\n  ) => <A, E2, R2, E, R>(\n    self: Stream.Stream<Effect.Effect<A, E2, R2>, E, R>\n  ) => Stream.Stream<A, E | E2, R | R2>,\n  <A, E2, R2, E, R>(\n    self: Stream.Stream<Effect.Effect<A, E2, R2>, E, R>,\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly unordered?: boolean | undefined\n    }\n  ) => Stream.Stream<A, E | E2, R | R2>\n>(\n  (args) => isStream(args[0]),\n  (self, options) =>\n    options?.unordered ?\n      flatMap(self, (a) => fromEffect(a), { concurrency: options.concurrency }) :\n      matchConcurrency(\n        options?.concurrency,\n        () => mapEffectSequential(self, identity),\n        (n) =>\n          new StreamImpl(\n            pipe(\n              toChannel(self),\n              channel.concatMap(channel.writeChunk),\n              channel.mapOutEffectPar(identity, n),\n              channel.mapOut(Chunk.of)\n            )\n          )\n      )\n)\n\n/** @internal */\nexport const flattenExitOption = <A, E2, E, R>(\n  self: Stream.Stream<Exit.Exit<A, Option.Option<E2>>, E, R>\n): Stream.Stream<A, E | E2, R> => {\n  const processChunk = (\n    chunk: Chunk.Chunk<Exit.Exit<A, Option.Option<E2>>>,\n    cont: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<Exit.Exit<A, Option.Option<E2>>>, E | E2, E, unknown, unknown, R>\n  ) => {\n    const [toEmit, rest] = pipe(chunk, Chunk.splitWhere((exit) => !Exit.isSuccess(exit)))\n    const next = pipe(\n      Chunk.head(rest),\n      Option.match({\n        onNone: () => cont,\n        onSome: Exit.match({\n          onFailure: (cause) =>\n            Option.match(Cause.flipCauseOption(cause), {\n              onNone: () => core.void,\n              onSome: core.failCause\n            }),\n          onSuccess: () => core.void\n        })\n      })\n    )\n    return pipe(\n      core.write(pipe(\n        toEmit,\n        Chunk.filterMap((exit) =>\n          Exit.isSuccess(exit) ?\n            Option.some(exit.value) :\n            Option.none()\n        )\n      )),\n      core.flatMap(() => next)\n    )\n  }\n  const process: Channel.Channel<\n    Chunk.Chunk<A>,\n    Chunk.Chunk<Exit.Exit<A, Option.Option<E2>>>,\n    E | E2,\n    E,\n    unknown,\n    unknown,\n    R\n  > = core.readWithCause({\n    onInput: (chunk: Chunk.Chunk<Exit.Exit<A, Option.Option<E2>>>) => processChunk(chunk, process),\n    onFailure: (cause) => core.failCause<E | E2>(cause),\n    onDone: () => core.void\n  })\n  return new StreamImpl(pipe(toChannel(self), core.pipeTo(process)))\n}\n\n/** @internal */\nexport const flattenIterables = <A, E, R>(self: Stream.Stream<Iterable<A>, E, R>): Stream.Stream<A, E, R> =>\n  pipe(self, map(Chunk.fromIterable), flattenChunks)\n\n/** @internal */\nexport const flattenTake = <A, E2, E, R>(self: Stream.Stream<Take.Take<A, E2>, E, R>): Stream.Stream<A, E | E2, R> =>\n  flattenChunks(flattenExitOption(pipe(self, map((take) => take.exit))))\n\n/** @internal */\nexport const forever = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<A, E, R> =>\n  new StreamImpl(channel.repeated(toChannel(self)))\n\n/** @internal */\nexport const fromAsyncIterable = <A, E>(\n  iterable: AsyncIterable<A>,\n  onError: (e: unknown) => E\n) =>\n  pipe(\n    Effect.acquireRelease(\n      Effect.sync(() => iterable[Symbol.asyncIterator]()),\n      (iterator) => iterator.return ? Effect.promise(async () => iterator.return!()) : Effect.void\n    ),\n    Effect.map((iterator) =>\n      repeatEffectOption(pipe(\n        Effect.tryPromise({\n          try: async () => iterator.next(),\n          catch: (reason) => Option.some(onError(reason))\n        }),\n        Effect.flatMap((result) => result.done ? Effect.fail(Option.none()) : Effect.succeed(result.value))\n      ))\n    ),\n    unwrapScoped\n  )\n\n/** @internal */\nexport const fromChannel = <A, E, R>(\n  channel: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown, R>\n): Stream.Stream<A, E, R> => new StreamImpl(channel)\n\n/** @internal */\nexport const toChannel = <A, E, R>(\n  stream: Stream.Stream<A, E, R>\n): Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown, R> => {\n  if (\"channel\" in stream) {\n    return (stream as StreamImpl<A, E, R>).channel\n  } else if (Effect.isEffect(stream)) {\n    return toChannel(fromEffect(stream)) as any\n  } else {\n    throw new TypeError(`Expected a Stream.`)\n  }\n}\n\n/** @internal */\nexport const fromChunk = <A>(chunk: Chunk.Chunk<A>): Stream.Stream<A> =>\n  new StreamImpl(Chunk.isEmpty(chunk) ? core.void : core.write(chunk))\n\n/** @internal */\nexport const fromChunkPubSub: {\n  <A>(pubsub: PubSub.PubSub<Chunk.Chunk<A>>, options: {\n    readonly scoped: true\n    readonly shutdown?: boolean | undefined\n  }): Effect.Effect<Stream.Stream<A>, never, Scope.Scope>\n  <A>(pubsub: PubSub.PubSub<Chunk.Chunk<A>>, options?: {\n    readonly scoped?: false | undefined\n    readonly shutdown?: boolean | undefined\n  }): Stream.Stream<A>\n} = (pubsub, options): any => {\n  if (options?.scoped) {\n    const effect = Effect.map(PubSub.subscribe(pubsub), fromChunkQueue)\n    return options.shutdown ? Effect.map(effect, ensuring(PubSub.shutdown(pubsub))) : effect\n  }\n  const stream = flatMap(scoped(PubSub.subscribe(pubsub)), fromChunkQueue)\n  return options?.shutdown ? ensuring(stream, PubSub.shutdown(pubsub)) : stream\n}\n\n/** @internal */\nexport const fromChunkQueue = <A>(queue: Queue.Dequeue<Chunk.Chunk<A>>, options?: {\n  readonly shutdown?: boolean | undefined\n}): Stream.Stream<A> =>\n  pipe(\n    Queue.take(queue),\n    Effect.catchAllCause((cause) =>\n      pipe(\n        Queue.isShutdown(queue),\n        Effect.flatMap((isShutdown) =>\n          isShutdown && Cause.isInterrupted(cause) ?\n            pull.end() :\n            pull.failCause(cause)\n        )\n      )\n    ),\n    repeatEffectChunkOption,\n    options?.shutdown ? ensuring(Queue.shutdown(queue)) : identity\n  )\n\n/** @internal */\nexport const fromChunks = <A>(\n  ...chunks: Array<Chunk.Chunk<A>>\n): Stream.Stream<A> => pipe(fromIterable(chunks), flatMap(fromChunk))\n\n/** @internal */\nexport const fromEffect = <A, E, R>(effect: Effect.Effect<A, E, R>): Stream.Stream<A, E, R> =>\n  pipe(effect, Effect.mapError(Option.some), fromEffectOption)\n\n/** @internal */\nexport const fromEffectOption = <A, E, R>(effect: Effect.Effect<A, Option.Option<E>, R>): Stream.Stream<A, E, R> =>\n  new StreamImpl(\n    channel.unwrap(\n      Effect.match(effect, {\n        onFailure: Option.match({\n          onNone: () => core.void,\n          onSome: core.fail\n        }),\n        onSuccess: (a) => core.write(Chunk.of(a))\n      })\n    )\n  )\n\n/** @internal */\nexport const fromPubSub: {\n  <A>(pubsub: PubSub.PubSub<A>, options: {\n    readonly scoped: true\n    readonly maxChunkSize?: number | undefined\n    readonly shutdown?: boolean | undefined\n  }): Effect.Effect<Stream.Stream<A>, never, Scope.Scope>\n  <A>(pubsub: PubSub.PubSub<A>, options?: {\n    readonly scoped?: false | undefined\n    readonly maxChunkSize?: number | undefined\n    readonly shutdown?: boolean | undefined\n  }): Stream.Stream<A>\n} = (pubsub, options): any => {\n  const maxChunkSize = options?.maxChunkSize ?? DefaultChunkSize\n\n  if (options?.scoped) {\n    const effect = Effect.map(\n      PubSub.subscribe(pubsub),\n      (queue) => fromQueue(queue, { maxChunkSize, shutdown: true })\n    )\n\n    return options.shutdown ? Effect.map(effect, ensuring(PubSub.shutdown(pubsub))) : effect\n  }\n  const stream = flatMap(\n    scoped(PubSub.subscribe(pubsub)),\n    (queue) => fromQueue(queue, { maxChunkSize })\n  )\n  return options?.shutdown ? ensuring(stream, PubSub.shutdown(pubsub)) : stream\n}\n\n/** @internal */\nexport const fromTPubSub = <A>(pubsub: TPubSub.TPubSub<A>): Stream.Stream<A> => {\n  return unwrapScoped(Effect.map(\n    TPubSub.subscribeScoped(pubsub),\n    (queue) => fromTQueue(queue)\n  ))\n}\n\n/** @internal */\nexport const fromIterable = <A>(iterable: Iterable<A>): Stream.Stream<A> =>\n  suspend(() =>\n    Chunk.isChunk(iterable) ?\n      fromChunk(iterable) :\n      fromIteratorSucceed(iterable[Symbol.iterator]())\n  )\n\n/** @internal */\nexport const fromIterableEffect = <A, E, R>(\n  effect: Effect.Effect<Iterable<A>, E, R>\n): Stream.Stream<A, E, R> => pipe(effect, Effect.map(fromIterable), unwrap)\n\n/** @internal */\nexport const fromIteratorSucceed = <A>(\n  iterator: Iterator<A>,\n  maxChunkSize = DefaultChunkSize\n): Stream.Stream<A> => {\n  return pipe(\n    Effect.sync(() => {\n      let builder: Array<A> = []\n      const loop = (\n        iterator: Iterator<A>\n      ): Channel.Channel<Chunk.Chunk<A>, unknown, never, unknown, unknown, unknown> =>\n        pipe(\n          Effect.sync(() => {\n            let next: IteratorResult<A, any> = iterator.next()\n            if (maxChunkSize === 1) {\n              if (next.done) {\n                return core.void\n              }\n              return pipe(\n                core.write(Chunk.of(next.value)),\n                core.flatMap(() => loop(iterator))\n              )\n            }\n            builder = []\n            let count = 0\n            while (next.done === false) {\n              builder.push(next.value)\n              count = count + 1\n              if (count >= maxChunkSize) {\n                break\n              }\n              next = iterator.next()\n            }\n            if (count > 0) {\n              return pipe(\n                core.write(Chunk.unsafeFromArray(builder)),\n                core.flatMap(() => loop(iterator))\n              )\n            }\n            return core.void\n          }),\n          channel.unwrap\n        )\n      return new StreamImpl(loop(iterator))\n    }),\n    unwrap\n  )\n}\n\n/** @internal */\nexport const fromPull = <R, R2, E, A>(\n  effect: Effect.Effect<Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R2>, never, R | Scope.Scope>\n): Stream.Stream<A, E, Exclude<R, Scope.Scope> | R2> => pipe(effect, Effect.map(repeatEffectChunkOption), unwrapScoped)\n\n/** @internal */\nexport const fromQueue = <A>(\n  queue: Queue.Dequeue<A>,\n  options?: {\n    readonly maxChunkSize?: number | undefined\n    readonly shutdown?: boolean | undefined\n  }\n): Stream.Stream<A> =>\n  pipe(\n    Queue.takeBetween(queue, 1, options?.maxChunkSize ?? DefaultChunkSize),\n    Effect.catchAllCause((cause) =>\n      pipe(\n        Queue.isShutdown(queue),\n        Effect.flatMap((isShutdown) =>\n          isShutdown && Cause.isInterrupted(cause) ?\n            pull.end() :\n            pull.failCause(cause)\n        )\n      )\n    ),\n    repeatEffectChunkOption,\n    options?.shutdown ? ensuring(Queue.shutdown(queue)) : identity\n  )\n\n/** @internal */\nexport const fromTQueue = <A>(queue: TQueue.TDequeue<A>): Stream.Stream<A> =>\n  pipe(\n    TQueue.take(queue),\n    Effect.map(Chunk.of),\n    Effect.catchAllCause((cause) =>\n      pipe(\n        TQueue.isShutdown(queue),\n        Effect.flatMap((isShutdown) =>\n          isShutdown && Cause.isInterrupted(cause) ?\n            pull.end() :\n            pull.failCause(cause)\n        )\n      )\n    ),\n    repeatEffectChunkOption\n  )\n\n/** @internal */\nexport const fromSchedule = <A, R>(schedule: Schedule.Schedule<A, unknown, R>): Stream.Stream<A, never, R> =>\n  pipe(\n    Schedule.driver(schedule),\n    Effect.map((driver) => repeatEffectOption(driver.next(void 0))),\n    unwrap\n  )\n\n/** @internal */\nexport const fromReadableStream: {\n  <A, E>(\n    options: {\n      readonly evaluate: LazyArg<ReadableStream<A>>\n      readonly onError: (error: unknown) => E\n      readonly releaseLockOnEnd?: boolean | undefined\n    }\n  ): Stream.Stream<A, E>\n  <A, E>(\n    evaluate: LazyArg<ReadableStream<A>>,\n    onError: (error: unknown) => E\n  ): Stream.Stream<A, E>\n} = <A, E>(\n  ...args: [options: {\n    readonly evaluate: LazyArg<ReadableStream<A>>\n    readonly onError: (error: unknown) => E\n    readonly releaseLockOnEnd?: boolean | undefined\n  }] | [\n    evaluate: LazyArg<ReadableStream<A>>,\n    onError: (error: unknown) => E\n  ]\n): Stream.Stream<A, E> => {\n  const evaluate = args.length === 1 ? args[0].evaluate : args[0]\n  const onError = args.length === 1 ? args[0].onError : args[1]\n  const releaseLockOnEnd = args.length === 1 ? args[0].releaseLockOnEnd === true : false\n  return unwrapScoped(Effect.map(\n    Effect.acquireRelease(\n      Effect.sync(() => evaluate().getReader()),\n      (reader) =>\n        releaseLockOnEnd\n          ? Effect.sync(() => reader.releaseLock())\n          : Effect.promise(() => reader.cancel())\n    ),\n    (reader) =>\n      repeatEffectOption(\n        Effect.flatMap(\n          Effect.tryPromise({\n            try: () => reader.read(),\n            catch: (reason) => Option.some(onError(reason))\n          }),\n          ({ done, value }) => done ? Effect.fail(Option.none()) : Effect.succeed(value)\n        )\n      )\n  ))\n}\n\n/** @internal */\nexport const fromReadableStreamByob: {\n  <E>(\n    options: {\n      readonly evaluate: LazyArg<ReadableStream<Uint8Array>>\n      readonly onError: (error: unknown) => E\n      readonly bufferSize?: number | undefined\n      readonly releaseLockOnEnd?: boolean | undefined\n    }\n  ): Stream.Stream<Uint8Array, E>\n  <E>(\n    evaluate: LazyArg<ReadableStream<Uint8Array>>,\n    onError: (error: unknown) => E,\n    allocSize?: number\n  ): Stream.Stream<Uint8Array, E>\n} = <E>(\n  ...args: [options: {\n    readonly evaluate: LazyArg<ReadableStream<Uint8Array>>\n    readonly onError: (error: unknown) => E\n    readonly bufferSize?: number | undefined\n    readonly releaseLockOnEnd?: boolean | undefined\n  }] | [\n    evaluate: LazyArg<ReadableStream<Uint8Array>>,\n    onError: (error: unknown) => E,\n    allocSize?: number | undefined\n  ]\n): Stream.Stream<Uint8Array, E> => {\n  const evaluate = args.length === 1 ? args[0].evaluate : args[0]\n  const onError = args.length === 1 ? args[0].onError : args[1]\n  const allocSize = (args.length === 1 ? args[0].bufferSize : args[2]) ?? 4096\n  const releaseLockOnEnd = args.length === 1 ? args[0].releaseLockOnEnd === true : false\n  return unwrapScoped(Effect.map(\n    Effect.acquireRelease(\n      Effect.sync(() => evaluate().getReader({ mode: \"byob\" })),\n      (reader) => releaseLockOnEnd ? Effect.sync(() => reader.releaseLock()) : Effect.promise(() => reader.cancel())\n    ),\n    (reader) =>\n      catchAll(\n        forever(readChunkStreamByobReader(reader, onError, allocSize)),\n        (error) => error === EOF ? empty : fail(error)\n      )\n  ))\n}\n\nconst EOF = Symbol.for(\"effect/Stream/EOF\")\n\nconst readChunkStreamByobReader = <E>(\n  reader: ReadableStreamBYOBReader,\n  onError: (error: unknown) => E,\n  size: number\n): Stream.Stream<Uint8Array, E | typeof EOF> => {\n  const buffer = new ArrayBuffer(size)\n  return paginateEffect(0, (offset) =>\n    Effect.flatMap(\n      Effect.tryPromise({\n        try: () => reader.read(new Uint8Array(buffer, offset, buffer.byteLength - offset)),\n        catch: (reason) => onError(reason)\n      }),\n      ({ done, value }) => {\n        if (done) {\n          return Effect.fail(EOF)\n        }\n        const newOffset = offset + value.byteLength\n        return Effect.succeed([\n          value,\n          newOffset >= buffer.byteLength\n            ? Option.none<number>()\n            : Option.some(newOffset)\n        ])\n      }\n    ))\n}\n\n/** @internal */\nexport const groupAdjacentBy = dual<\n  <A, K>(\n    f: (a: A) => K\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<[K, Chunk.NonEmptyChunk<A>], E, R>,\n  <A, E, R, K>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => K\n  ) => Stream.Stream<[K, Chunk.NonEmptyChunk<A>], E, R>\n>(\n  2,\n  <A, E, R, K>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => K\n  ): Stream.Stream<[K, Chunk.NonEmptyChunk<A>], E, R> => {\n    type Output = [K, Chunk.NonEmptyChunk<A>]\n    const groupAdjacentByChunk = (\n      state: Option.Option<Output>,\n      chunk: Chunk.Chunk<A>\n    ): [Option.Option<Output>, Chunk.Chunk<Output>] => {\n      if (Chunk.isEmpty(chunk)) {\n        return [state, Chunk.empty()]\n      }\n      const builder: Array<Output> = []\n      let from = 0\n      let until = 0\n      let key: K | undefined = undefined\n      let previousChunk = Chunk.empty<A>()\n      switch (state._tag) {\n        case \"Some\": {\n          const tuple = state.value\n          key = tuple[0]\n          let loop = true\n          while (loop && until < chunk.length) {\n            const input = Chunk.unsafeGet(chunk, until)\n            const updatedKey = f(input)\n            if (!Equal.equals(key, updatedKey)) {\n              const previousChunk = tuple[1]\n              const additionalChunk = Chunk.unsafeFromArray(Array.from(chunk).slice(from, until))\n              const group = Chunk.appendAll(previousChunk, additionalChunk)\n              builder.push([key, group])\n              key = updatedKey\n              from = until\n              loop = false\n            }\n            until = until + 1\n          }\n          if (loop) {\n            previousChunk = tuple[1]\n          }\n          break\n        }\n        case \"None\": {\n          key = f(Chunk.unsafeGet(chunk, until))\n          until = until + 1\n          break\n        }\n      }\n      while (until < chunk.length) {\n        const input = Chunk.unsafeGet(chunk, until)\n        const updatedKey = f(input)\n        if (!Equal.equals(key, updatedKey)) {\n          builder.push([key, Chunk.unsafeFromArray(Array.from(chunk).slice(from, until)) as Chunk.NonEmptyChunk<A>])\n          key = updatedKey\n          from = until\n        }\n        until = until + 1\n      }\n      const nonEmptyChunk = Chunk.appendAll(previousChunk, Chunk.unsafeFromArray(Array.from(chunk).slice(from, until)))\n      const output = Chunk.unsafeFromArray(builder)\n      return [Option.some([key, nonEmptyChunk as Chunk.NonEmptyChunk<A>]), output]\n    }\n\n    const groupAdjacent = (\n      state: Option.Option<Output>\n    ): Channel.Channel<Chunk.Chunk<Output>, Chunk.Chunk<A>, never, never, unknown, unknown> =>\n      core.readWithCause({\n        onInput: (input: Chunk.Chunk<A>) => {\n          const [updatedState, output] = groupAdjacentByChunk(state, input)\n          return Chunk.isEmpty(output)\n            ? groupAdjacent(updatedState)\n            : core.flatMap(core.write(output), () => groupAdjacent(updatedState))\n        },\n        onFailure: (cause) =>\n          Option.match(state, {\n            onNone: () => core.failCause(cause),\n            onSome: (output) => core.flatMap(core.write(Chunk.of(output)), () => core.failCause(cause))\n          }),\n        onDone: (done) =>\n          Option.match(state, {\n            onNone: () => core.succeedNow(done),\n            onSome: (output) => core.flatMap(core.write(Chunk.of(output)), () => core.succeedNow(done))\n          })\n      })\n    return new StreamImpl(channel.pipeToOrFail(toChannel(self), groupAdjacent(Option.none())))\n  }\n)\n\n/** @internal */\nexport const grouped = dual<\n  (chunkSize: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Chunk.Chunk<A>, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, chunkSize: number) => Stream.Stream<Chunk.Chunk<A>, E, R>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, chunkSize: number): Stream.Stream<Chunk.Chunk<A>, E, R> =>\n    pipe(self, rechunk(chunkSize), chunks)\n)\n\n/** @internal */\nexport const groupedWithin = dual<\n  (\n    chunkSize: number,\n    duration: Duration.DurationInput\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Chunk.Chunk<A>, E, R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    chunkSize: number,\n    duration: Duration.DurationInput\n  ) => Stream.Stream<Chunk.Chunk<A>, E, R>\n>(\n  3,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    chunkSize: number,\n    duration: Duration.DurationInput\n  ): Stream.Stream<Chunk.Chunk<A>, E, R> =>\n    aggregateWithin(self, _sink.collectAllN(chunkSize), Schedule.spaced(duration))\n)\n\n/** @internal */\nexport const haltWhen = dual<\n  <X, E2, R2>(\n    effect: Effect.Effect<X, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<X, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<X, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => {\n    const writer = (\n      fiber: Fiber.Fiber<X, E2>\n    ): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E | E2, void, unknown, R2> =>\n      pipe(\n        Fiber.poll(fiber),\n        Effect.map(Option.match({\n          onNone: () =>\n            core.readWith({\n              onInput: (input: Chunk.Chunk<A>) => core.flatMap(core.write(input), () => writer(fiber)),\n              onFailure: core.fail,\n              onDone: () => core.void\n            }),\n          onSome: Exit.match({\n            onFailure: core.failCause,\n            onSuccess: () => core.void\n          })\n        })),\n        channel.unwrap\n      )\n    return new StreamImpl(\n      pipe(\n        Effect.forkScoped(effect),\n        Effect.map((fiber) => pipe(toChannel(self), core.pipeTo(writer(fiber)))),\n        channel.unwrapScoped\n      )\n    )\n  }\n)\n\n/** @internal */\nexport const haltAfter = dual<\n  (duration: Duration.DurationInput) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, duration: Duration.DurationInput) => Stream.Stream<A, E, R>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, duration: Duration.DurationInput): Stream.Stream<A, E, R> =>\n    pipe(self, haltWhen(Clock.sleep(duration)))\n)\n\n/** @internal */\nexport const haltWhenDeferred = dual<\n  <X, E2>(deferred: Deferred.Deferred<X, E2>) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R>,\n  <A, E, R, X, E2>(self: Stream.Stream<A, E, R>, deferred: Deferred.Deferred<X, E2>) => Stream.Stream<A, E2 | E, R>\n>(\n  2,\n  <A, E, R, X, E2>(self: Stream.Stream<A, E, R>, deferred: Deferred.Deferred<X, E2>): Stream.Stream<A, E | E2, R> => {\n    const writer: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E | E2, void, unknown, R> = pipe(\n      Deferred.poll(deferred),\n      Effect.map(Option.match({\n        onNone: () =>\n          core.readWith({\n            onInput: (input: Chunk.Chunk<A>) => pipe(core.write(input), core.flatMap(() => writer)),\n            onFailure: core.fail,\n            onDone: () => core.void\n          }),\n        onSome: (effect) =>\n          channel.unwrap(Effect.match(effect, {\n            onFailure: core.fail,\n            onSuccess: () => core.void\n          }))\n      })),\n      channel.unwrap\n    )\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(writer)))\n  }\n)\n\n/** @internal */\nexport const identityStream = <A, E = never, R = never>(): Stream.Stream<A, E, R> =>\n  new StreamImpl(\n    channel.identityChannel() as Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown>\n  )\n\n/** @internal */\nexport const interleave = dual<\n  <A2, E2, R2>(\n    that: Stream.Stream<A2, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<A2 | A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<A2 | A, E2 | E, R2 | R> => pipe(self, interleaveWith(that, forever(make(true, false))))\n)\n\n/** @internal */\nexport const interleaveWith = dual<\n  <A2, E2, R2, E3, R3>(\n    that: Stream.Stream<A2, E2, R2>,\n    decider: Stream.Stream<boolean, E3, R3>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2 | E3 | E, R2 | R3 | R>,\n  <A, E, R, A2, E2, R2, E3, R3>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    decider: Stream.Stream<boolean, E3, R3>\n  ) => Stream.Stream<A2 | A, E2 | E3 | E, R2 | R3 | R>\n>(\n  3,\n  <A, E, R, A2, E2, R2, E3, R3>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    decider: Stream.Stream<boolean, E3, R3>\n  ): Stream.Stream<A2 | A, E2 | E3 | E, R2 | R3 | R> => {\n    const producer = (\n      handoff: Handoff.Handoff<Take.Take<A | A2, E | E2 | E3>>\n    ): Channel.Channel<never, A | A2, never, E | E2 | E3, void, unknown, R | R2 | R3> =>\n      core.readWithCause({\n        onInput: (value: A | A2) =>\n          core.flatMap(\n            core.fromEffect(\n              Handoff.offer<Take.Take<A | A2, E | E2 | E3>>(handoff, InternalTake.of(value))\n            ),\n            () => producer(handoff)\n          ),\n        onFailure: (cause) =>\n          core.fromEffect(\n            Handoff.offer<Take.Take<A | A2, E | E2 | E3>>(\n              handoff,\n              InternalTake.failCause(cause)\n            )\n          ),\n        onDone: () =>\n          core.fromEffect(\n            Handoff.offer<Take.Take<A | A2, E | E2 | E3>>(handoff, InternalTake.end)\n          )\n      })\n    return new StreamImpl(\n      channel.unwrapScoped(\n        pipe(\n          Handoff.make<Take.Take<A | A2, E | E2 | E3>>(),\n          Effect.zip(Handoff.make<Take.Take<A | A2, E | E2 | E3>>()),\n          Effect.tap(([left]) =>\n            pipe(\n              toChannel(self),\n              channel.concatMap(channel.writeChunk),\n              core.pipeTo(producer(left)),\n              channelExecutor.runScoped,\n              Effect.forkScoped\n            )\n          ),\n          Effect.tap(([_, right]) =>\n            pipe(\n              toChannel(that),\n              channel.concatMap(channel.writeChunk),\n              core.pipeTo(producer(right)),\n              channelExecutor.runScoped,\n              Effect.forkScoped\n            )\n          ),\n          Effect.map(([left, right]) => {\n            const process = (\n              leftDone: boolean,\n              rightDone: boolean\n            ): Channel.Channel<Chunk.Chunk<A | A2>, boolean, E | E2 | E3, E | E2 | E3, void, unknown, R> =>\n              core.readWithCause({\n                onInput: (bool: boolean) => {\n                  if (bool && !leftDone) {\n                    return pipe(\n                      core.fromEffect(Handoff.take(left)),\n                      core.flatMap(InternalTake.match({\n                        onEnd: () => rightDone ? core.void : process(true, rightDone),\n                        onFailure: core.failCause,\n                        onSuccess: (chunk) => pipe(core.write(chunk), core.flatMap(() => process(leftDone, rightDone)))\n                      }))\n                    )\n                  }\n                  if (!bool && !rightDone) {\n                    return pipe(\n                      core.fromEffect(Handoff.take(right)),\n                      core.flatMap(InternalTake.match({\n                        onEnd: () => leftDone ? core.void : process(leftDone, true),\n                        onFailure: core.failCause,\n                        onSuccess: (chunk) => pipe(core.write(chunk), core.flatMap(() => process(leftDone, rightDone)))\n                      }))\n                    )\n                  }\n                  return process(leftDone, rightDone)\n                },\n                onFailure: core.failCause,\n                onDone: () => core.void\n              })\n            return pipe(\n              toChannel(decider),\n              channel.concatMap(channel.writeChunk),\n              core.pipeTo(process(false, false))\n            )\n          })\n        )\n      )\n    )\n  }\n)\n\n/** @internal */\nexport const intersperse = dual<\n  <A2>(element: A2) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E, R>,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, element: A2) => Stream.Stream<A2 | A, E, R>\n>(2, <A, E, R, A2>(self: Stream.Stream<A, E, R>, element: A2): Stream.Stream<A2 | A, E, R> =>\n  new StreamImpl(\n    pipe(\n      toChannel(self),\n      channel.pipeToOrFail(\n        core.suspend(() => {\n          const writer = (\n            isFirst: boolean\n          ): Channel.Channel<Chunk.Chunk<A | A2>, Chunk.Chunk<A>, E, E, unknown, unknown> =>\n            core.readWithCause({\n              onInput: (chunk: Chunk.Chunk<A>) => {\n                const builder: Array<A | A2> = []\n                let flagResult = isFirst\n                for (const output of chunk) {\n                  if (flagResult) {\n                    flagResult = false\n                    builder.push(output)\n                  } else {\n                    builder.push(element)\n                    builder.push(output)\n                  }\n                }\n                return pipe(\n                  core.write(Chunk.unsafeFromArray(builder)),\n                  core.flatMap(() => writer(flagResult))\n                )\n              },\n              onFailure: core.failCause,\n              onDone: () => core.void\n            })\n          return writer(true)\n        })\n      )\n    )\n  ))\n\n/** @internal */\nexport const intersperseAffixes = dual<\n  <A2, A3, A4>(\n    options: {\n      readonly start: A2\n      readonly middle: A3\n      readonly end: A4\n    }\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A3 | A4 | A, E, R>,\n  <A, E, R, A2, A3, A4>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly start: A2\n      readonly middle: A3\n      readonly end: A4\n    }\n  ) => Stream.Stream<A2 | A3 | A4 | A, E, R>\n>(\n  2,\n  <A, E, R, A2, A3, A4>(\n    self: Stream.Stream<A, E, R>,\n    { end, middle, start }: {\n      readonly start: A2\n      readonly middle: A3\n      readonly end: A4\n    }\n  ): Stream.Stream<A2 | A3 | A4 | A, E, R> =>\n    pipe(\n      make(start),\n      concat(pipe(self, intersperse(middle))),\n      concat(make(end))\n    )\n)\n\n/** @internal */\nexport const interruptAfter = dual<\n  (duration: Duration.DurationInput) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, duration: Duration.DurationInput) => Stream.Stream<A, E, R>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, duration: Duration.DurationInput): Stream.Stream<A, E, R> =>\n    pipe(self, interruptWhen(Clock.sleep(duration)))\n)\n\n/** @internal */\nexport const interruptWhen = dual<\n  <X, E2, R2>(\n    effect: Effect.Effect<X, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<X, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<X, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => new StreamImpl(pipe(toChannel(self), channel.interruptWhen(effect)))\n)\n\n/** @internal */\nexport const interruptWhenDeferred = dual<\n  <X, E2>(deferred: Deferred.Deferred<X, E2>) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R>,\n  <A, E, R, X, E2>(self: Stream.Stream<A, E, R>, deferred: Deferred.Deferred<X, E2>) => Stream.Stream<A, E2 | E, R>\n>(\n  2,\n  <A, E, R, X, E2>(self: Stream.Stream<A, E, R>, deferred: Deferred.Deferred<X, E2>): Stream.Stream<A, E2 | E, R> =>\n    new StreamImpl(pipe(toChannel(self), channel.interruptWhenDeferred(deferred)))\n)\n\n/** @internal */\nexport const iterate = <A>(value: A, next: (value: A) => A): Stream.Stream<A> =>\n  unfold(value, (a) => Option.some([a, next(a)] as const))\n\n/** @internal */\nexport const make = <As extends Array<any>>(...as: As): Stream.Stream<As[number]> => fromIterable(as)\n\n/** @internal */\nexport const map = dual<\n  <A, B>(f: (a: A) => B) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E, R>,\n  <A, E, R, B>(self: Stream.Stream<A, E, R>, f: (a: A) => B) => Stream.Stream<B, E, R>\n>(\n  2,\n  <A, E, R, B>(self: Stream.Stream<A, E, R>, f: (a: A) => B): Stream.Stream<B, E, R> =>\n    new StreamImpl(pipe(toChannel(self), channel.mapOut(Chunk.map(f))))\n)\n\n/** @internal */\nexport const mapAccum = dual<\n  <S, A, A2>(\n    s: S,\n    f: (s: S, a: A) => readonly [S, A2]\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E, R>,\n  <A, E, R, S, A2>(self: Stream.Stream<A, E, R>, s: S, f: (s: S, a: A) => readonly [S, A2]) => Stream.Stream<A2, E, R>\n>(\n  3,\n  <A, E, R, S, A2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => readonly [S, A2]\n  ): Stream.Stream<A2, E, R> => {\n    const accumulator = (s: S): Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E, E, void, unknown> =>\n      core.readWith({\n        onInput: (input: Chunk.Chunk<A>) => {\n          const [nextS, chunk] = Chunk.mapAccum(input, s, f)\n          return core.flatMap(\n            core.write(chunk),\n            () => accumulator(nextS)\n          )\n        },\n        onFailure: core.fail,\n        onDone: () => core.void\n      })\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(accumulator(s))))\n  }\n)\n\n/** @internal */\nexport const mapAccumEffect = dual<\n  <S, A, A2, E2, R2>(\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<readonly [S, A2], E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, S, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<readonly [S, A2], E2, R2>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  3,\n  <A, E, R, S, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<readonly [S, A2], E2, R2>\n  ): Stream.Stream<A2, E | E2, R | R2> =>\n    suspend(() => {\n      const accumulator = (\n        s: S\n      ): Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R | R2> =>\n        core.readWith({\n          onInput: (input: Chunk.Chunk<A>) =>\n            pipe(\n              Effect.suspend(() => {\n                const outputs: Array<A2> = []\n                const emit = (output: A2) =>\n                  Effect.sync(() => {\n                    outputs.push(output)\n                  })\n                return pipe(\n                  input,\n                  Effect.reduce(s, (s, a) =>\n                    pipe(\n                      f(s, a),\n                      Effect.flatMap(([s, a]) => pipe(emit(a), Effect.as(s)))\n                    )),\n                  Effect.match({\n                    onFailure: (error) => {\n                      if (outputs.length !== 0) {\n                        return channel.zipRight(core.write(Chunk.unsafeFromArray(outputs)), core.fail(error))\n                      }\n                      return core.fail(error)\n                    },\n                    onSuccess: (s) => core.flatMap(core.write(Chunk.unsafeFromArray(outputs)), () => accumulator(s))\n                  })\n                )\n              }),\n              channel.unwrap\n            ),\n          onFailure: core.fail,\n          onDone: () => core.void\n        })\n      return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(accumulator(s))))\n    })\n)\n\n/** @internal */\nexport const mapBoth = dual<\n  <E, E2, A, A2>(\n    options: {\n      readonly onFailure: (e: E) => E2\n      readonly onSuccess: (a: A) => A2\n    }\n  ) => <R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2, R>,\n  <A, E, R, E2, A2>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => E2\n      readonly onSuccess: (a: A) => A2\n    }\n  ) => Stream.Stream<A2, E2, R>\n>(\n  2,\n  <A, E, R, E2, A2>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => E2\n      readonly onSuccess: (a: A) => A2\n    }\n  ): Stream.Stream<A2, E2, R> => pipe(self, mapError(options.onFailure), map(options.onSuccess))\n)\n\n/** @internal */\nexport const mapChunks = dual<\n  <A, B>(\n    f: (chunk: Chunk.Chunk<A>) => Chunk.Chunk<B>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E, R>,\n  <A, E, R, B>(self: Stream.Stream<A, E, R>, f: (chunk: Chunk.Chunk<A>) => Chunk.Chunk<B>) => Stream.Stream<B, E, R>\n>(\n  2,\n  <A, E, R, B>(self: Stream.Stream<A, E, R>, f: (chunk: Chunk.Chunk<A>) => Chunk.Chunk<B>): Stream.Stream<B, E, R> =>\n    new StreamImpl(pipe(toChannel(self), channel.mapOut(f)))\n)\n\n/** @internal */\nexport const mapChunksEffect = dual<\n  <A, B, E2, R2>(\n    f: (chunk: Chunk.Chunk<A>) => Effect.Effect<Chunk.Chunk<B>, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E2 | E, R2 | R>,\n  <A, E, R, B, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (chunk: Chunk.Chunk<A>) => Effect.Effect<Chunk.Chunk<B>, E2, R2>\n  ) => Stream.Stream<B, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, B, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (chunk: Chunk.Chunk<A>) => Effect.Effect<Chunk.Chunk<B>, E2, R2>\n  ): Stream.Stream<B, E2 | E, R2 | R> => new StreamImpl(pipe(toChannel(self), channel.mapOutEffect(f)))\n)\n\n/** @internal */\nexport const mapConcat = dual<\n  <A, A2>(f: (a: A) => Iterable<A2>) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E, R>,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, f: (a: A) => Iterable<A2>) => Stream.Stream<A2, E, R>\n>(\n  2,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, f: (a: A) => Iterable<A2>): Stream.Stream<A2, E, R> =>\n    pipe(self, mapConcatChunk((a) => Chunk.fromIterable(f(a))))\n)\n\n/** @internal */\nexport const mapConcatChunk = dual<\n  <A, A2>(f: (a: A) => Chunk.Chunk<A2>) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E, R>,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, f: (a: A) => Chunk.Chunk<A2>) => Stream.Stream<A2, E, R>\n>(\n  2,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, f: (a: A) => Chunk.Chunk<A2>): Stream.Stream<A2, E, R> =>\n    pipe(self, mapChunks(Chunk.flatMap(f)))\n)\n\n/** @internal */\nexport const mapConcatChunkEffect = dual<\n  <A, A2, E2, R2>(\n    f: (a: A) => Effect.Effect<Chunk.Chunk<A2>, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<Chunk.Chunk<A2>, E2, R2>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<Chunk.Chunk<A2>, E2, R2>\n  ): Stream.Stream<A2, E | E2, R | R2> => pipe(self, mapEffectSequential(f), mapConcatChunk(identity))\n)\n\n/** @internal */\nexport const mapConcatEffect = dual<\n  <A, A2, E2, R2>(\n    f: (a: A) => Effect.Effect<Iterable<A2>, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<Iterable<A2>, E2, R2>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<Iterable<A2>, E2, R2>\n  ): Stream.Stream<A2, E | E2, R | R2> =>\n    pipe(self, mapEffectSequential((a) => pipe(f(a), Effect.map(Chunk.fromIterable))), mapConcatChunk(identity))\n)\n\n/** @internal */\nexport const mapEffectSequential = dual<\n  <A, A2, E2, R2>(\n    f: (a: A) => Effect.Effect<A2, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<A2, E2, R2>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<A2, E2, R2>\n  ): Stream.Stream<A2, E | E2, R | R2> => {\n    const loop = (\n      iterator: Iterator<A>\n    ): Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2> => {\n      const next = iterator.next()\n      if (next.done) {\n        return core.readWithCause({\n          onInput: (elem) => loop(elem[Symbol.iterator]()),\n          onFailure: core.failCause,\n          onDone: core.succeed\n        })\n      } else {\n        const value = next.value\n        return channel.unwrap(\n          Effect.map(f(value), (a2) =>\n            core.flatMap(\n              core.write(Chunk.of(a2)),\n              () => loop(iterator)\n            ))\n        )\n      }\n    }\n    return new StreamImpl(pipe(\n      toChannel(self),\n      core.pipeTo(core.suspend(() => loop(Chunk.empty<A>()[Symbol.iterator]())))\n    ))\n  }\n)\n\n/** @internal */\nexport const mapEffectPar = dual<\n  <A, A2, E2, R2>(\n    n: number,\n    f: (a: A) => Effect.Effect<A2, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    n: number,\n    f: (a: A) => Effect.Effect<A2, E2, R2>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  3,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    n: number,\n    f: (a: A) => Effect.Effect<A2, E2, R2>\n  ): Stream.Stream<A2, E | E2, R | R2> =>\n    new StreamImpl(\n      pipe(\n        toChannel(self),\n        channel.concatMap(channel.writeChunk),\n        channel.mapOutEffectPar(f, n),\n        channel.mapOut(Chunk.of)\n      )\n    )\n)\n\n/** @internal */\nexport const mapError = dual<\n  <E, E2>(f: (error: E) => E2) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2, R>,\n  <A, E, R, E2>(self: Stream.Stream<A, E, R>, f: (error: E) => E2) => Stream.Stream<A, E2, R>\n>(\n  2,\n  <A, E, R, E2>(self: Stream.Stream<A, E, R>, f: (error: E) => E2): Stream.Stream<A, E2, R> =>\n    new StreamImpl(pipe(toChannel(self), channel.mapError(f)))\n)\n\n/** @internal */\nexport const mapErrorCause = dual<\n  <E, E2>(\n    f: (cause: Cause.Cause<E>) => Cause.Cause<E2>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2, R>,\n  <A, E, R, E2>(self: Stream.Stream<A, E, R>, f: (cause: Cause.Cause<E>) => Cause.Cause<E2>) => Stream.Stream<A, E2, R>\n>(\n  2,\n  <A, E, R, E2>(self: Stream.Stream<A, E, R>, f: (cause: Cause.Cause<E>) => Cause.Cause<E2>): Stream.Stream<A, E2, R> =>\n    new StreamImpl(pipe(toChannel(self), channel.mapErrorCause(f)))\n)\n\n/** @internal */\nexport const merge = dual<\n  <A2, E2, R2>(\n    that: Stream.Stream<A2, E2, R2>,\n    options?: {\n      readonly haltStrategy?: HaltStrategy.HaltStrategyInput | undefined\n    }\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    options?: {\n      readonly haltStrategy?: HaltStrategy.HaltStrategyInput | undefined\n    }\n  ) => Stream.Stream<A2 | A, E2 | E, R2 | R>\n>(\n  (args) => isStream(args[1]),\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    options?: {\n      readonly haltStrategy?: HaltStrategy.HaltStrategyInput | undefined\n    }\n  ): Stream.Stream<A2 | A, E2 | E, R2 | R> =>\n    mergeWith(self, that, {\n      onSelf: identity,\n      onOther: identity,\n      haltStrategy: options?.haltStrategy\n    })\n)\n\n/** @internal */\nexport const mergeAll = dual<\n  (options: {\n    readonly concurrency: number | \"unbounded\"\n    readonly bufferSize?: number | undefined\n  }) => <A, E, R>(streams: Iterable<Stream.Stream<A, E, R>>) => Stream.Stream<A, E, R>,\n  <A, E, R>(streams: Iterable<Stream.Stream<A, E, R>>, options: {\n    readonly concurrency: number | \"unbounded\"\n    readonly bufferSize?: number | undefined\n  }) => Stream.Stream<A, E, R>\n>((args) => Symbol.iterator in args[0], (streams, options) => flatten(fromIterable(streams), options))\n\n/** @internal */\nexport const mergeWithTag: {\n  <S extends { [k in string]: Stream.Stream<any, any, any> }>(\n    streams: S,\n    options: {\n      readonly concurrency: number | \"unbounded\"\n      readonly bufferSize?: number | undefined\n    }\n  ): Stream.Stream<\n    { [K in keyof S]: { _tag: K; value: Stream.Stream.Success<S[K]> } }[keyof S],\n    Stream.Stream.Error<S[keyof S]>,\n    Stream.Stream.Context<S[keyof S]>\n  >\n  (options: {\n    readonly concurrency: number | \"unbounded\"\n    readonly bufferSize?: number | undefined\n  }): <S extends { [k in string]: Stream.Stream<any, any, any> }>(streams: S) => Stream.Stream<\n    { [K in keyof S]: { _tag: K; value: Stream.Stream.Success<S[K]> } }[keyof S],\n    Stream.Stream.Error<S[keyof S]>,\n    Stream.Stream.Context<S[keyof S]>\n  >\n} = dual(2, (streams, options) => {\n  const keys = Object.keys(streams)\n  const values = keys.map((key) => streams[key].pipe(map((value) => ({ _tag: key, value })))) as any\n  return mergeAll(values, options)\n})\n\n/** @internal */\nexport const mergeEither = dual<\n  <A2, E2, R2>(\n    that: Stream.Stream<A2, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Either.Either<A2, A>, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<Either.Either<A2, A>, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<Either.Either<A2, A>, E2 | E, R2 | R> =>\n    mergeWith(self, that, { onSelf: Either.left, onOther: Either.right })\n)\n\n/** @internal */\nexport const mergeLeft = dual<\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ) => <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<AL, ER | EL, RR | RL>,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ) => Stream.Stream<AL, ER | EL, RR | RL>\n>(\n  2,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AL, EL | ER, RL | RR> => pipe(left, merge(drain(right)))\n)\n\n/** @internal */\nexport const mergeRight = dual<\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ) => <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<AR, ER | EL, RR | RL>,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ) => Stream.Stream<AR, ER | EL, RR | RL>\n>(\n  2,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AR, EL | ER, RL | RR> => pipe(drain(left), merge(right))\n)\n\n/** @internal */\nexport const mergeWith = dual<\n  <A2, E2, R2, A, A3, A4>(\n    other: Stream.Stream<A2, E2, R2>,\n    options: {\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A4\n      readonly haltStrategy?: HaltStrategy.HaltStrategyInput | undefined\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A3 | A4, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2, A3, A4>(\n    self: Stream.Stream<A, E, R>,\n    other: Stream.Stream<A2, E2, R2>,\n    options: {\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A4\n      readonly haltStrategy?: HaltStrategy.HaltStrategyInput | undefined\n    }\n  ) => Stream.Stream<A3 | A4, E2 | E, R2 | R>\n>(\n  3,\n  <A, E, R, A2, E2, R2, A3, A4>(\n    self: Stream.Stream<A, E, R>,\n    other: Stream.Stream<A2, E2, R2>,\n    options: {\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A4\n      readonly haltStrategy?: HaltStrategy.HaltStrategyInput | undefined\n    }\n  ): Stream.Stream<A3 | A4, E2 | E, R2 | R> => {\n    const strategy = options.haltStrategy ? haltStrategy.fromInput(options.haltStrategy) : HaltStrategy.Both\n    const handler =\n      (terminate: boolean) =>\n      (exit: Exit.Exit<unknown, E | E2>): MergeDecision.MergeDecision<R | R2, E | E2, unknown, E | E2, unknown> =>\n        terminate || !Exit.isSuccess(exit) ?\n          // TODO: remove\n          MergeDecision.Done(Effect.suspend(() => exit)) :\n          MergeDecision.Await((exit) => Effect.suspend(() => exit))\n\n    return new StreamImpl<A3 | A4, E | E2, R | R2>(\n      channel.mergeWith(toChannel(map(self, options.onSelf)), {\n        other: toChannel(map(other, options.onOther)),\n        onSelfDone: handler(strategy._tag === \"Either\" || strategy._tag === \"Left\"),\n        onOtherDone: handler(strategy._tag === \"Either\" || strategy._tag === \"Right\")\n      })\n    )\n  }\n)\n\n/** @internal */\nexport const mkString = <E, R>(self: Stream.Stream<string, E, R>): Effect.Effect<string, E, R> =>\n  run(self, _sink.mkString)\n\n/** @internal */\nexport const never: Stream.Stream<never> = fromEffect(Effect.never)\n\n/** @internal */\nexport const onEnd: {\n  <_, E2, R2>(\n    effect: Effect.Effect<_, E2, R2>\n  ): <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>\n  <A, E, R, _, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<_, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, _, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<_, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => concat(self, drain(fromEffect(effect)))\n)\n\n/** @internal */\nexport const onError = dual<\n  <E, X, R2>(\n    cleanup: (cause: Cause.Cause<E>) => Effect.Effect<X, never, R2>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R2 | R>,\n  <A, E, R, X, R2>(\n    self: Stream.Stream<A, E, R>,\n    cleanup: (cause: Cause.Cause<E>) => Effect.Effect<X, never, R2>\n  ) => Stream.Stream<A, E, R2 | R>\n>(\n  2,\n  <A, E, R, X, R2>(\n    self: Stream.Stream<A, E, R>,\n    cleanup: (cause: Cause.Cause<E>) => Effect.Effect<X, never, R2>\n  ): Stream.Stream<A, E, R | R2> =>\n    pipe(self, catchAllCause((cause) => fromEffect(pipe(cleanup(cause), Effect.zipRight(Effect.failCause(cause))))))\n)\n\n/** @internal */\nexport const onDone = dual<\n  <X, R2>(\n    cleanup: () => Effect.Effect<X, never, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R2 | R>,\n  <A, E, R, X, R2>(\n    self: Stream.Stream<A, E, R>,\n    cleanup: () => Effect.Effect<X, never, R2>\n  ) => Stream.Stream<A, E, R2 | R>\n>(\n  2,\n  <A, E, R, X, R2>(\n    self: Stream.Stream<A, E, R>,\n    cleanup: () => Effect.Effect<X, never, R2>\n  ): Stream.Stream<A, E, R | R2> =>\n    new StreamImpl<A, E, R | R2>(\n      pipe(toChannel(self), core.ensuringWith((exit) => Exit.isSuccess(exit) ? cleanup() : Effect.void))\n    )\n)\n\n/** @internal */\nexport const onStart: {\n  <_, E2, R2>(\n    effect: Effect.Effect<_, E2, R2>\n  ): <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>\n  <A, E, R, _, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<_, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, _, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<_, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => unwrap(Effect.as(effect, self))\n)\n\n/** @internal */\nexport const orDie = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<A, never, R> =>\n  pipe(self, orDieWith(identity))\n\n/** @internal */\nexport const orDieWith = dual<\n  <E>(f: (e: E) => unknown) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, never, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, f: (e: E) => unknown) => Stream.Stream<A, never, R>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, f: (e: E) => unknown): Stream.Stream<A, never, R> =>\n    new StreamImpl(pipe(toChannel(self), channel.orDieWith(f)))\n)\n\n/** @internal */\nexport const orElse = dual<\n  <A2, E2, R2>(\n    that: LazyArg<Stream.Stream<A2, E2, R2>>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: LazyArg<Stream.Stream<A2, E2, R2>>\n  ) => Stream.Stream<A2 | A, E2, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: LazyArg<Stream.Stream<A2, E2, R2>>\n  ): Stream.Stream<A2 | A, E2, R2 | R> =>\n    new StreamImpl<A | A2, E2, R | R2>(pipe(toChannel(self), channel.orElse(() => toChannel(that()))))\n)\n\n/** @internal */\nexport const orElseEither = dual<\n  <A2, E2, R2>(\n    that: LazyArg<Stream.Stream<A2, E2, R2>>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Either.Either<A2, A>, E2, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: LazyArg<Stream.Stream<A2, E2, R2>>\n  ) => Stream.Stream<Either.Either<A2, A>, E2, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: LazyArg<Stream.Stream<A2, E2, R2>>\n  ): Stream.Stream<Either.Either<A2, A>, E2, R2 | R> =>\n    pipe(self, map(Either.left), orElse(() => pipe(that(), map(Either.right))))\n)\n\n/** @internal */\nexport const orElseFail = dual<\n  <E2>(error: LazyArg<E2>) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2, R>,\n  <A, E, R, E2>(self: Stream.Stream<A, E, R>, error: LazyArg<E2>) => Stream.Stream<A, E2, R>\n>(\n  2,\n  <A, E, R, E2>(self: Stream.Stream<A, E, R>, error: LazyArg<E2>): Stream.Stream<A, E2, R> =>\n    pipe(self, orElse(() => failSync(error)))\n)\n\n/** @internal */\nexport const orElseIfEmpty = dual<\n  <A2>(element: LazyArg<A2>) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E, R>,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, element: LazyArg<A2>) => Stream.Stream<A2 | A, E, R>\n>(\n  2,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, element: LazyArg<A2>): Stream.Stream<A | A2, E, R> =>\n    pipe(self, orElseIfEmptyChunk(() => Chunk.of(element())))\n)\n\n/** @internal */\nexport const orElseIfEmptyChunk = dual<\n  <A2>(chunk: LazyArg<Chunk.Chunk<A2>>) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E, R>,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, chunk: LazyArg<Chunk.Chunk<A2>>) => Stream.Stream<A2 | A, E, R>\n>(\n  2,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, chunk: LazyArg<Chunk.Chunk<A2>>): Stream.Stream<A | A2, E, R> =>\n    pipe(self, orElseIfEmptyStream(() => new StreamImpl(core.write(chunk()))))\n)\n\n/** @internal */\nexport const orElseIfEmptyStream = dual<\n  <A2, E2, R2>(\n    stream: LazyArg<Stream.Stream<A2, E2, R2>>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    stream: LazyArg<Stream.Stream<A2, E2, R2>>\n  ) => Stream.Stream<A2 | A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    stream: LazyArg<Stream.Stream<A2, E2, R2>>\n  ): Stream.Stream<A2 | A, E2 | E, R2 | R> => {\n    const writer: Channel.Channel<Chunk.Chunk<A | A2>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2> = core.readWith(\n      {\n        onInput: (input: Chunk.Chunk<A>) => {\n          if (Chunk.isEmpty(input)) {\n            return core.suspend(() => writer)\n          }\n          return pipe(\n            core.write(input),\n            channel.zipRight(channel.identityChannel<Chunk.Chunk<A>, E, unknown>())\n          )\n        },\n        onFailure: core.fail,\n        onDone: () => core.suspend(() => toChannel(stream()))\n      }\n    )\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(writer)))\n  }\n)\n\n/** @internal */\nexport const orElseSucceed = dual<\n  <A2>(value: LazyArg<A2>) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, never, R>,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, value: LazyArg<A2>) => Stream.Stream<A2 | A, never, R>\n>(\n  2,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, value: LazyArg<A2>): Stream.Stream<A2 | A, never, R> =>\n    pipe(self, orElse(() => sync(value)))\n)\n\n/** @internal */\nexport const paginate = <S, A>(s: S, f: (s: S) => readonly [A, Option.Option<S>]): Stream.Stream<A> =>\n  paginateChunk(s, (s) => {\n    const page = f(s)\n    return [Chunk.of(page[0]), page[1]] as const\n  })\n\n/** @internal */\nexport const paginateChunk = <S, A>(\n  s: S,\n  f: (s: S) => readonly [Chunk.Chunk<A>, Option.Option<S>]\n): Stream.Stream<A> => {\n  const loop = (s: S): Channel.Channel<Chunk.Chunk<A>, unknown, never, unknown, unknown, unknown> => {\n    const page = f(s)\n    return Option.match(page[1], {\n      onNone: () => channel.zipRight(core.write(page[0]), core.void),\n      onSome: (s) => core.flatMap(core.write(page[0]), () => loop(s))\n    })\n  }\n  return new StreamImpl(core.suspend(() => loop(s)))\n}\n\n/** @internal */\nexport const paginateChunkEffect = <S, A, E, R>(\n  s: S,\n  f: (s: S) => Effect.Effect<readonly [Chunk.Chunk<A>, Option.Option<S>], E, R>\n): Stream.Stream<A, E, R> => {\n  const loop = (s: S): Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown, R> =>\n    channel.unwrap(\n      Effect.map(f(s), ([chunk, option]) =>\n        Option.match(option, {\n          onNone: () => channel.zipRight(core.write(chunk), core.void),\n          onSome: (s) => core.flatMap(core.write(chunk), () => loop(s))\n        }))\n    )\n  return new StreamImpl(core.suspend(() => loop(s)))\n}\n\n/** @internal */\nexport const paginateEffect = <S, A, E, R>(\n  s: S,\n  f: (s: S) => Effect.Effect<readonly [A, Option.Option<S>], E, R>\n): Stream.Stream<A, E, R> =>\n  paginateChunkEffect(s, (s) => pipe(f(s), Effect.map(([a, s]) => [Chunk.of(a), s] as const)))\n\n/** @internal */\nexport const peel = dual<\n  <A2, A, E2, R2>(\n    sink: Sink.Sink<A2, A, A, E2, R2>\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<[A2, Stream.Stream<A, E>], E2 | E, Scope.Scope | R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<A2, A, A, E2, R2>\n  ) => Effect.Effect<[A2, Stream.Stream<A, E>], E2 | E, Scope.Scope | R2 | R>\n>(2, <A, E, R, A2, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  sink: Sink.Sink<A2, A, A, E2, R2>\n): Effect.Effect<[A2, Stream.Stream<A, E>], E2 | E, Scope.Scope | R2 | R> => {\n  type Signal = Emit | Halt | End\n  const OP_EMIT = \"Emit\" as const\n  type OP_EMIT = typeof OP_EMIT\n  const OP_HALT = \"Halt\" as const\n  type OP_HALT = typeof OP_HALT\n  const OP_END = \"End\" as const\n  type OP_END = typeof OP_END\n  interface Emit {\n    readonly _tag: OP_EMIT\n    readonly elements: Chunk.Chunk<A>\n  }\n  interface Halt {\n    readonly _tag: OP_HALT\n    readonly cause: Cause.Cause<E>\n  }\n  interface End {\n    readonly _tag: OP_END\n  }\n  return pipe(\n    Deferred.make<A2, E | E2>(),\n    Effect.flatMap((deferred) =>\n      pipe(\n        Handoff.make<Signal>(),\n        Effect.map((handoff) => {\n          const consumer = _sink.foldSink(_sink.collectLeftover(sink), {\n            onFailure: (error) =>\n              _sink.zipRight(\n                _sink.fromEffect(Deferred.fail(deferred, error)),\n                _sink.fail(error)\n              ),\n            onSuccess: ([z, leftovers]) => {\n              const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, void, unknown> = core\n                .readWithCause({\n                  onInput: (elements) =>\n                    core.flatMap(\n                      core.fromEffect(\n                        Handoff.offer<Signal>(handoff, { _tag: OP_EMIT, elements })\n                      ),\n                      () => loop\n                    ),\n                  onFailure: (cause) =>\n                    channel.zipRight(\n                      core.fromEffect(Handoff.offer<Signal>(handoff, { _tag: OP_HALT, cause })),\n                      core.failCause(cause)\n                    ),\n                  onDone: (_) =>\n                    channel.zipRight(\n                      core.fromEffect(Handoff.offer<Signal>(handoff, { _tag: OP_END })),\n                      core.void\n                    )\n                })\n              return _sink.fromChannel(\n                pipe(\n                  core.fromEffect(Deferred.succeed(deferred, z)),\n                  channel.zipRight(core.fromEffect(\n                    pipe(\n                      handoff,\n                      Handoff.offer<Signal>({ _tag: OP_EMIT, elements: leftovers })\n                    )\n                  )),\n                  channel.zipRight(loop)\n                )\n              )\n            }\n          })\n\n          const producer: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown> = pipe(\n            Handoff.take(handoff),\n            Effect.map((signal) => {\n              switch (signal._tag) {\n                case OP_EMIT: {\n                  return pipe(core.write(signal.elements), core.flatMap(() => producer))\n                }\n                case OP_HALT: {\n                  return core.failCause(signal.cause)\n                }\n                case OP_END: {\n                  return core.void\n                }\n              }\n            }),\n            channel.unwrap\n          )\n\n          return pipe(\n            self,\n            tapErrorCause((cause) => Deferred.failCause(deferred, cause)),\n            run(consumer),\n            Effect.forkScoped,\n            Effect.zipRight(Deferred.await(deferred)),\n            Effect.map((z) => [z, new StreamImpl(producer)] as [A2, StreamImpl<A, E>])\n          )\n        })\n      )\n    ),\n    Effect.flatten\n  )\n})\n\n/** @internal */\nexport const partition: {\n  <C extends A, B extends A, A = C>(\n    refinement: Refinement<NoInfer<A>, B>,\n    options?: {\n      bufferSize?: number | undefined\n    }\n  ): <E, R>(\n    self: Stream.Stream<C, E, R>\n  ) => Effect.Effect<\n    [excluded: Stream.Stream<Exclude<C, B>, E>, satisfying: Stream.Stream<B, E>],\n    E,\n    Scope.Scope | R\n  >\n  <A>(\n    predicate: Predicate<A>,\n    options?: {\n      bufferSize?: number | undefined\n    }\n  ): <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<[excluded: Stream.Stream<A, E>, satisfying: Stream.Stream<A, E>], E, Scope.Scope | R>\n  <C extends A, E, R, B extends A, A = C>(\n    self: Stream.Stream<C, E, R>,\n    refinement: Refinement<A, B>,\n    options?: {\n      bufferSize?: number | undefined\n    }\n  ): Effect.Effect<\n    [excluded: Stream.Stream<Exclude<C, B>, E>, satisfying: Stream.Stream<B, E>],\n    E,\n    Scope.Scope | R\n  >\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    predicate: Predicate<A>,\n    options?: {\n      bufferSize?: number | undefined\n    }\n  ): Effect.Effect<[excluded: Stream.Stream<A, E>, satisfying: Stream.Stream<A, E>], E, Scope.Scope | R>\n} = dual(\n  (args) => typeof args[1] === \"function\",\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    predicate: Predicate<A>,\n    options?: {\n      readonly bufferSize?: number | undefined\n    }\n  ): Effect.Effect<\n    [Stream.Stream<A, E>, Stream.Stream<A, E>],\n    E,\n    R | Scope.Scope\n  > =>\n    partitionEither(\n      self,\n      (a) => Effect.succeed(predicate(a) ? Either.left(a) : Either.right(a)),\n      options\n    )\n)\n\n/** @internal */\nexport const partitionEither = dual<\n  <A, A3, A2, E2, R2>(\n    predicate: (a: NoInfer<A>) => Effect.Effect<Either.Either<A3, A2>, E2, R2>,\n    options?: {\n      readonly bufferSize?: number | undefined\n    }\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<\n    [left: Stream.Stream<A2, E2 | E>, right: Stream.Stream<A3, E2 | E>],\n    E2 | E,\n    Scope.Scope | R2 | R\n  >,\n  <A, E, R, A3, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: A) => Effect.Effect<Either.Either<A3, A2>, E2, R2>,\n    options?: {\n      readonly bufferSize?: number | undefined\n    }\n  ) => Effect.Effect<\n    [left: Stream.Stream<A2, E2 | E>, right: Stream.Stream<A3, E2 | E>],\n    E2 | E,\n    Scope.Scope | R2 | R\n  >\n>(\n  (args) => typeof args[1] === \"function\",\n  <A, E, R, A3, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: A) => Effect.Effect<Either.Either<A3, A2>, E2, R2>,\n    options?: {\n      readonly bufferSize?: number | undefined\n    }\n  ): Effect.Effect<\n    [left: Stream.Stream<A2, E2 | E>, right: Stream.Stream<A3, E2 | E>],\n    E | E2,\n    R | R2 | Scope.Scope\n  > =>\n    pipe(\n      mapEffectSequential(self, predicate),\n      distributedWith({\n        size: 2,\n        maximumLag: options?.bufferSize ?? 16,\n        decide: Either.match({\n          onLeft: () => Effect.succeed((n) => n === 0),\n          onRight: () => Effect.succeed((n) => n === 1)\n        })\n      }),\n      Effect.flatMap(([queue1, queue2]) =>\n        Effect.succeed([\n          filterMap(\n            flattenExitOption(fromQueue(queue1, { shutdown: true })),\n            (_) =>\n              Either.match(_, {\n                onLeft: Option.some,\n                onRight: Option.none\n              })\n          ),\n          filterMap(\n            flattenExitOption(fromQueue(queue2, { shutdown: true })),\n            (_) =>\n              Either.match(_, {\n                onLeft: Option.none,\n                onRight: Option.some\n              })\n          )\n        ])\n      )\n    )\n)\n\n/** @internal */\nexport const pipeThrough = dual<\n  <A2, A, L, E2, R2>(\n    sink: Sink.Sink<A2, A, L, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<L, E2 | E, R2 | R>,\n  <A, E, R, A2, L, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<A2, A, L, E2, R2>\n  ) => Stream.Stream<L, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, L, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<A2, A, L, E2, R2>\n  ): Stream.Stream<L, E2 | E, R2 | R> =>\n    new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(_sink.toChannel(sink))))\n)\n\n/** @internal */\nexport const pipeThroughChannel = dual<\n  <R2, E, E2, A, A2>(\n    channel: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, E, unknown, unknown, R2>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2, R2 | R>,\n  <R, R2, E, E2, A, A2>(\n    self: Stream.Stream<A, E, R>,\n    channel: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, E, unknown, unknown, R2>\n  ) => Stream.Stream<A2, E2, R2 | R>\n>(\n  2,\n  <R, R2, E, E2, A, A2>(\n    self: Stream.Stream<A, E, R>,\n    channel: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, E, unknown, unknown, R2>\n  ): Stream.Stream<A2, E2, R2 | R> => new StreamImpl(core.pipeTo(toChannel(self), channel))\n)\n\n/** @internal */\nexport const pipeThroughChannelOrFail = dual<\n  <R2, E, E2, A, A2>(\n    chan: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, E, unknown, unknown, R2>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E | E2, R2 | R>,\n  <R, R2, E, E2, A, A2>(\n    self: Stream.Stream<A, E, R>,\n    chan: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, E, unknown, unknown, R2>\n  ) => Stream.Stream<A2, E | E2, R2 | R>\n>(\n  2,\n  <R, R2, E, E2, A, A2>(\n    self: Stream.Stream<A, E, R>,\n    chan: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, E, unknown, unknown, R2>\n  ): Stream.Stream<A2, E | E2, R2 | R> => new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(chan)))\n)\n\n/** @internal */\nexport const prepend = dual<\n  <B>(values: Chunk.Chunk<B>) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A | B, E, R>,\n  <A, E, R, B>(self: Stream.Stream<A, E, R>, values: Chunk.Chunk<B>) => Stream.Stream<A | B, E, R>\n>(2, (self, values) =>\n  new StreamImpl(\n    channel.zipRight(\n      core.write(values as Chunk.Chunk<any>),\n      toChannel(self)\n    )\n  ))\n\n/** @internal */\nexport const provideContext = dual<\n  <R>(context: Context.Context<R>) => <A, E>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, context: Context.Context<R>) => Stream.Stream<A, E>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, context: Context.Context<R>): Stream.Stream<A, E> =>\n    new StreamImpl(pipe(toChannel(self), core.provideContext(context)))\n)\n\n/** @internal */\nexport const provideLayer = dual<\n  <RIn, E2, ROut>(\n    layer: Layer.Layer<ROut, E2, RIn>\n  ) => <A, E>(self: Stream.Stream<A, E, ROut>) => Stream.Stream<A, E2 | E, RIn>,\n  <A, E, RIn, E2, ROut>(\n    self: Stream.Stream<A, E, ROut>,\n    layer: Layer.Layer<ROut, E2, RIn>\n  ) => Stream.Stream<A, E2 | E, RIn>\n>(\n  2,\n  <A, E, RIn, E2, ROut>(\n    self: Stream.Stream<A, E, ROut>,\n    layer: Layer.Layer<ROut, E2, RIn>\n  ): Stream.Stream<A, E2 | E, RIn> =>\n    new StreamImpl(\n      channel.unwrapScoped(pipe(\n        Layer.build(layer),\n        Effect.map((env) => pipe(toChannel(self), core.provideContext(env)))\n      ))\n    )\n)\n\n/** @internal */\nexport const provideService = dual<\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    resource: Context.Tag.Service<T>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, Exclude<R, Context.Tag.Identifier<T>>>,\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Stream.Stream<A, E, R>,\n    tag: T,\n    resource: Context.Tag.Service<T>\n  ) => Stream.Stream<A, E, Exclude<R, Context.Tag.Identifier<T>>>\n>(\n  3,\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Stream.Stream<A, E, R>,\n    tag: T,\n    resource: Context.Tag.Service<T>\n  ) => provideServiceEffect(self, tag, Effect.succeed(resource))\n)\n\n/** @internal */\nexport const provideServiceEffect = dual<\n  <T extends Context.Tag<any, any>, E2, R2>(\n    tag: T,\n    effect: Effect.Effect<Context.Tag.Service<T>, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | Exclude<R, Context.Tag.Identifier<T>>>,\n  <A, E, R, T extends Context.Tag<any, any>, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    tag: T,\n    effect: Effect.Effect<Context.Tag.Service<T>, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | Exclude<R, Context.Tag.Identifier<T>>>\n>(\n  3,\n  <A, E, R, T extends Context.Tag<any, any>, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    tag: T,\n    effect: Effect.Effect<Context.Tag.Service<T>, E2, R2>\n  ) => provideServiceStream(self, tag, fromEffect(effect))\n)\n\n/** @internal */\nexport const provideServiceStream = dual<\n  <T extends Context.Tag<any, any>, E2, R2>(\n    tag: T,\n    stream: Stream.Stream<Context.Tag.Service<T>, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | Exclude<R, Context.Tag.Identifier<T>>>,\n  <A, E, R, T extends Context.Tag<any, any>, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    tag: T,\n    stream: Stream.Stream<Context.Tag.Service<T>, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | Exclude<R, Context.Tag.Identifier<T>>>\n>(\n  3,\n  <A, E, R, T extends Context.Tag<any, any>, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    tag: T,\n    stream: Stream.Stream<Context.Tag.Service<T>, E2, R2>\n  ): Stream.Stream<A, E2 | E, R2 | Exclude<R, Context.Tag.Identifier<T>>> =>\n    contextWithStream((env: Context.Context<R2 | Exclude<R, Context.Tag.Identifier<T>>>) =>\n      flatMap(\n        stream,\n        (service) => pipe(self, provideContext(Context.add(env, tag, service) as Context.Context<R | R2>))\n      )\n    )\n)\n\n/** @internal */\nexport const mapInputContext = dual<\n  <R0, R>(\n    f: (env: Context.Context<R0>) => Context.Context<R>\n  ) => <A, E>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R0>,\n  <A, E, R0, R>(\n    self: Stream.Stream<A, E, R>,\n    f: (env: Context.Context<R0>) => Context.Context<R>\n  ) => Stream.Stream<A, E, R0>\n>(\n  2,\n  <A, E, R0, R>(\n    self: Stream.Stream<A, E, R>,\n    f: (env: Context.Context<R0>) => Context.Context<R>\n  ): Stream.Stream<A, E, R0> => contextWithStream((env) => pipe(self, provideContext(f(env))))\n)\n\n/** @internal */\nexport const provideSomeLayer = dual<\n  <RIn, E2, ROut>(\n    layer: Layer.Layer<ROut, E2, RIn>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, RIn | Exclude<R, ROut>>,\n  <A, E, R, RIn, E2, ROut>(\n    self: Stream.Stream<A, E, R>,\n    layer: Layer.Layer<ROut, E2, RIn>\n  ) => Stream.Stream<A, E2 | E, RIn | Exclude<R, ROut>>\n>(\n  2,\n  <A, E, R, RIn, E2, ROut>(\n    self: Stream.Stream<A, E, R>,\n    layer: Layer.Layer<ROut, E2, RIn>\n  ): Stream.Stream<A, E2 | E, RIn | Exclude<R, ROut>> =>\n    // @ts-expect-error\n    pipe(\n      self,\n      provideLayer(pipe(Layer.context(), Layer.merge(layer)))\n    )\n)\n\n/** @internal */\nexport const range = (min: number, max: number, chunkSize = DefaultChunkSize): Stream.Stream<number> =>\n  suspend(() => {\n    if (min > max) {\n      return empty as Stream.Stream<number>\n    }\n    const go = (\n      min: number,\n      max: number,\n      chunkSize: number\n    ): Channel.Channel<Chunk.Chunk<number>, unknown, never, unknown, unknown, unknown> => {\n      const remaining = max - min + 1\n      if (remaining > chunkSize) {\n        return pipe(\n          core.write(Chunk.range(min, min + chunkSize - 1)),\n          core.flatMap(() => go(min + chunkSize, max, chunkSize))\n        )\n      }\n      return core.write(Chunk.range(min, min + remaining - 1))\n    }\n    return new StreamImpl(go(min, max, chunkSize))\n  })\n\n/** @internal */\nexport const race: {\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ): <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<AL | AR, EL | ER, RL | RR>\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AL | AR, EL | ER, RL | RR>\n} = dual(\n  2,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AL | AR, EL | ER, RL | RR> => raceAll(left, right)\n)\n\n/** @internal */\nexport const raceAll = <S extends ReadonlyArray<Stream.Stream<any, any, any>>>(\n  ...streams: S\n): Stream.Stream<\n  Stream.Stream.Success<S[number]>,\n  Stream.Stream.Error<S[number]>,\n  Stream.Stream.Context<S[number]>\n> =>\n  Deferred.make<void>().pipe(\n    Effect.map((halt) => {\n      let winner: number | null = null\n      return mergeAll(\n        streams.map((stream, index) =>\n          stream.pipe(\n            takeWhile(() => {\n              if (winner === null) {\n                winner = index\n                Deferred.unsafeDone(halt, Exit.void)\n                return true\n              }\n              return winner === index\n            }),\n            interruptWhen(\n              Deferred.await(halt).pipe(\n                Effect.flatMap(() => winner === index ? Effect.never : Effect.void)\n              )\n            )\n          )\n        ),\n        { concurrency: streams.length }\n      )\n    }),\n    unwrap\n  )\n\n/** @internal */\nexport const rechunk = dual<\n  (n: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, n: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, n: number): Stream.Stream<A, E, R> =>\n  suspend(() => {\n    const target = Math.max(n, 1)\n    const process = rechunkProcess(new StreamRechunker(target), target)\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(process)))\n  }))\n\n/** @internal */\nconst rechunkProcess = <A, E>(\n  rechunker: StreamRechunker<A, E>,\n  target: number\n): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E, E, unknown, unknown> =>\n  core.readWithCause({\n    onInput: (chunk: Chunk.Chunk<A>) => {\n      if (chunk.length === target && rechunker.isEmpty()) {\n        return core.flatMap(\n          core.write(chunk),\n          () => rechunkProcess(rechunker, target)\n        )\n      }\n      if (chunk.length > 0) {\n        const chunks: Array<Chunk.Chunk<A>> = []\n        let result: Chunk.Chunk<A> | undefined = undefined\n        let index = 0\n        while (index < chunk.length) {\n          while (index < chunk.length && result === undefined) {\n            result = rechunker.write(pipe(chunk, Chunk.unsafeGet(index)))\n            index = index + 1\n          }\n          if (result !== undefined) {\n            chunks.push(result)\n            result = undefined\n          }\n        }\n        return core.flatMap(\n          channel.writeAll(...chunks),\n          () => rechunkProcess(rechunker, target)\n        )\n      }\n      return core.suspend(() => rechunkProcess(rechunker, target))\n    },\n    onFailure: (cause) => channel.zipRight(rechunker.emitIfNotEmpty(), core.failCause(cause)),\n    onDone: () => rechunker.emitIfNotEmpty()\n  })\n\nclass StreamRechunker<out A, in out E> {\n  private builder: Array<A> = []\n  private pos = 0\n\n  constructor(readonly n: number) {\n  }\n\n  isEmpty(): boolean {\n    return this.pos === 0\n  }\n\n  write(elem: A): Chunk.Chunk<A> | undefined {\n    this.builder.push(elem)\n    this.pos += 1\n\n    if (this.pos === this.n) {\n      const result = Chunk.unsafeFromArray(this.builder)\n      this.builder = []\n      this.pos = 0\n      return result\n    }\n\n    return undefined\n  }\n\n  emitIfNotEmpty(): Channel.Channel<Chunk.Chunk<A>, unknown, E, E, void, unknown> {\n    if (this.pos !== 0) {\n      return core.write(Chunk.unsafeFromArray(this.builder))\n    }\n    return core.void\n  }\n}\n\n/** @internal */\nexport const refineOrDie = dual<\n  <E, E2>(pf: (error: E) => Option.Option<E2>) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2, R>,\n  <A, E, R, E2>(self: Stream.Stream<A, E, R>, pf: (error: E) => Option.Option<E2>) => Stream.Stream<A, E2, R>\n>(\n  2,\n  <A, E, R, E2>(self: Stream.Stream<A, E, R>, pf: (error: E) => Option.Option<E2>): Stream.Stream<A, E2, R> =>\n    pipe(self, refineOrDieWith(pf, identity))\n)\n\n/** @internal */\nexport const refineOrDieWith = dual<\n  <E, E2>(\n    pf: (error: E) => Option.Option<E2>,\n    f: (error: E) => unknown\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2, R>,\n  <A, E, R, E2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (error: E) => Option.Option<E2>,\n    f: (error: E) => unknown\n  ) => Stream.Stream<A, E2, R>\n>(\n  3,\n  <A, E, R, E2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (error: E) => Option.Option<E2>,\n    f: (error: E) => unknown\n  ): Stream.Stream<A, E2, R> =>\n    new StreamImpl(\n      channel.catchAll(toChannel(self), (error) =>\n        Option.match(pf(error), {\n          onNone: () => core.failCause(Cause.die(f(error))),\n          onSome: core.fail\n        }))\n    )\n)\n\n/** @internal */\nexport const repeat = dual<\n  <B, R2>(\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R2 | R>,\n  <A, E, R, B, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ) => Stream.Stream<A, E, R2 | R>\n>(\n  2,\n  <A, E, R, B, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ): Stream.Stream<A, E, R | R2> =>\n    filterMap(\n      repeatEither(self, schedule),\n      (_) =>\n        Either.match(_, {\n          onLeft: Option.none,\n          onRight: Option.some\n        })\n    )\n)\n\n/** @internal */\nexport const repeatEffect = <A, E, R>(effect: Effect.Effect<A, E, R>): Stream.Stream<A, E, R> =>\n  repeatEffectOption(pipe(effect, Effect.mapError(Option.some)))\n\n/** @internal */\nexport const repeatEffectChunk = <A, E, R>(effect: Effect.Effect<Chunk.Chunk<A>, E, R>): Stream.Stream<A, E, R> =>\n  repeatEffectChunkOption(pipe(effect, Effect.mapError(Option.some)))\n\n/** @internal */\nexport const repeatEffectChunkOption = <A, E, R>(\n  effect: Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R>\n): Stream.Stream<A, E, R> =>\n  unfoldChunkEffect(effect, (effect) =>\n    pipe(\n      Effect.map(effect, (chunk) => Option.some([chunk, effect] as const)),\n      Effect.catchAll(Option.match({\n        onNone: () => Effect.succeed(Option.none()),\n        onSome: Effect.fail\n      }))\n    ))\n\n/** @internal */\nexport const repeatEffectOption = <A, E, R>(effect: Effect.Effect<A, Option.Option<E>, R>): Stream.Stream<A, E, R> =>\n  repeatEffectChunkOption(pipe(effect, Effect.map(Chunk.of)))\n\n/** @internal */\nexport const repeatEither = dual<\n  <B, R2>(\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Either.Either<A, B>, E, R2 | R>,\n  <A, E, R, B, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ) => Stream.Stream<Either.Either<A, B>, E, R2 | R>\n>(\n  2,\n  <A, E, R, B, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ): Stream.Stream<Either.Either<A, B>, E, R2 | R> =>\n    repeatWith(self, schedule, {\n      onElement: (a): Either.Either<A, B> => Either.right(a),\n      onSchedule: Either.left\n    })\n)\n\n/** @internal */\nexport const repeatElements = dual<\n  <B, R2>(\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R2 | R>,\n  <A, E, R, B, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ) => Stream.Stream<A, E, R2 | R>\n>(\n  2,\n  <A, E, R, B, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ): Stream.Stream<A, E, R | R2> =>\n    filterMap(\n      repeatElementsWith(self, schedule, { onElement: (a) => Option.some(a), onSchedule: Option.none }),\n      identity\n    )\n)\n\n/** @internal */\nexport const repeatElementsWith = dual<\n  <B, R2, A, C>(\n    schedule: Schedule.Schedule<B, unknown, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<C, E, R2 | R>,\n  <A, E, R, B, R2, C>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ) => Stream.Stream<C, E, R2 | R>\n>(\n  3,\n  <A, E, R, B, R2, C>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ): Stream.Stream<C, E, R | R2> => {\n    const driver = pipe(\n      Schedule.driver(schedule),\n      Effect.map((driver) => {\n        const feed = (\n          input: Chunk.Chunk<A>\n        ): Channel.Channel<Chunk.Chunk<C>, Chunk.Chunk<A>, E, E, void, unknown, R2> =>\n          Option.match(Chunk.head(input), {\n            onNone: () => loop,\n            onSome: (a) =>\n              channel.zipRight(\n                core.write(Chunk.of(options.onElement(a))),\n                step(pipe(input, Chunk.drop(1)), a)\n              )\n          })\n        const step = (\n          input: Chunk.Chunk<A>,\n          a: A\n        ): Channel.Channel<Chunk.Chunk<C>, Chunk.Chunk<A>, E, E, void, unknown, R2> => {\n          const advance = pipe(\n            driver.next(a),\n            Effect.as(pipe(core.write(Chunk.of(options.onElement(a))), core.flatMap(() => step(input, a))))\n          )\n          const reset: Effect.Effect<\n            Channel.Channel<Chunk.Chunk<C>, Chunk.Chunk<A>, E, E, void, unknown, R2>,\n            never,\n            R2\n          > = pipe(\n            driver.last,\n            Effect.orDie,\n            Effect.flatMap((b) =>\n              pipe(\n                driver.reset,\n                Effect.map(() =>\n                  pipe(\n                    core.write(Chunk.of(options.onSchedule(b))),\n                    channel.zipRight(feed(input))\n                  )\n                )\n              )\n            )\n          )\n          return pipe(advance, Effect.orElse(() => reset), channel.unwrap)\n        }\n        const loop: Channel.Channel<Chunk.Chunk<C>, Chunk.Chunk<A>, E, E, void, unknown, R2> = core.readWith({\n          onInput: feed,\n          onFailure: core.fail,\n          onDone: () => core.void\n        })\n        return loop\n      }),\n      channel.unwrap\n    )\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(driver)))\n  }\n)\n\n/** @internal */\nexport const repeatValue = <A>(value: A): Stream.Stream<A> =>\n  new StreamImpl(\n    channel.repeated(core.write(Chunk.of(value)))\n  )\n\n/** @internal */\nexport const repeatWith = dual<\n  <B, R2, A, C>(\n    schedule: Schedule.Schedule<B, unknown, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<C, E, R2 | R>,\n  <A, E, R, B, R2, C>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ) => Stream.Stream<C, E, R2 | R>\n>(\n  3,\n  <A, E, R, B, R2, C>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ): Stream.Stream<C, E, R | R2> => {\n    return pipe(\n      Schedule.driver(schedule),\n      Effect.map((driver) => {\n        const scheduleOutput = pipe(driver.last, Effect.orDie, Effect.map(options.onSchedule))\n        const process = pipe(self, map(options.onElement), toChannel)\n        const loop: Channel.Channel<Chunk.Chunk<C>, unknown, E, unknown, void, unknown, R | R2> = channel.unwrap(\n          Effect.match(driver.next(void 0), {\n            onFailure: () => core.void,\n            onSuccess: () =>\n              pipe(\n                process,\n                channel.zipRight(\n                  pipe(\n                    scheduleOutput,\n                    Effect.map((c) => pipe(core.write(Chunk.of(c)), core.flatMap(() => loop))),\n                    channel.unwrap\n                  )\n                )\n              )\n          })\n        )\n        return new StreamImpl(pipe(process, channel.zipRight(loop)))\n      }),\n      unwrap\n    )\n  }\n)\n\nconst repeatWithSchedule = <A, R, X>(\n  value: A,\n  schedule: Schedule.Schedule<X, A, R>\n): Stream.Stream<A, never, R> => repeatEffectWithSchedule(Effect.succeed(value), schedule)\n\n/** @internal */\nexport const repeatEffectWithSchedule = <A, E, R, X, A0 extends A, R2>(\n  effect: Effect.Effect<A, E, R>,\n  schedule: Schedule.Schedule<X, A0, R2>\n): Stream.Stream<A, E, R | R2> =>\n  flatMap(\n    fromEffect(Effect.zip(effect, Schedule.driver(schedule))),\n    ([a, driver]) =>\n      concat(\n        succeed(a),\n        unfoldEffect(a, (s) =>\n          Effect.matchEffect(driver.next(s as A0), {\n            onFailure: Effect.succeed,\n            onSuccess: () => Effect.map(effect, (nextA) => Option.some([nextA, nextA] as const))\n          }))\n      )\n  )\n\n/** @internal */\nexport const retry = dual<\n  <E0 extends E, R2, E, X>(\n    schedule: Schedule.Schedule<X, E0, R2>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R2 | R>,\n  <A, E, R, X, E0 extends E, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<X, E0, R2>\n  ) => Stream.Stream<A, E, R2 | R>\n>(\n  2,\n  <A, E, R, X, E0 extends E, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<X, E0, R2>\n  ): Stream.Stream<A, E, R | R2> =>\n    unwrap(\n      Effect.map(Schedule.driver(schedule), (driver) => {\n        const loop: Stream.Stream<A, E, R | R2> = catchAll(self, (error) =>\n          unwrap(\n            Effect.matchEffect(driver.next(error as E0), {\n              onFailure: () => Effect.fail(error),\n              onSuccess: () => Effect.succeed(pipe(loop, tap(() => driver.reset)))\n            })\n          ))\n        return loop\n      })\n    )\n)\n\n/** @internal */\nexport const run = dual<\n  <A2, A, E2, R2>(\n    sink: Sink.Sink<A2, A, unknown, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<A2, E2 | E, Exclude<R | R2, Scope.Scope>>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<A2, A, unknown, E2, R2>\n  ) => Effect.Effect<A2, E2 | E, Exclude<R | R2, Scope.Scope>>\n>(2, <A, E, R, A2, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  sink: Sink.Sink<A2, A, unknown, E2, R2>\n): Effect.Effect<A2, E2 | E, Exclude<R | R2, Scope.Scope>> =>\n  pipe(toChannel(self), channel.pipeToOrFail(_sink.toChannel(sink)), channel.runDrain))\n\n/** @internal */\nexport const runCollect = <A, E, R>(\n  self: Stream.Stream<A, E, R>\n): Effect.Effect<Chunk.Chunk<A>, E, Exclude<R, Scope.Scope>> => pipe(self, run(_sink.collectAll()))\n\n/** @internal */\nexport const runCount = <A, E, R>(self: Stream.Stream<A, E, R>): Effect.Effect<number, E, Exclude<R, Scope.Scope>> =>\n  pipe(self, run(_sink.count))\n\n/** @internal */\nexport const runDrain = <A, E, R>(self: Stream.Stream<A, E, R>): Effect.Effect<void, E, Exclude<R, Scope.Scope>> =>\n  pipe(self, run(_sink.drain))\n\n/** @internal */\nexport const runFold = dual<\n  <S, A>(\n    s: S,\n    f: (s: S, a: A) => S\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<S, E, Exclude<R, Scope.Scope>>,\n  <A, E, R, S>(self: Stream.Stream<A, E, R>, s: S, f: (s: S, a: A) => S) => Effect.Effect<S, E, Exclude<R, Scope.Scope>>\n>(\n  3,\n  <A, E, R, S>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => S\n  ): Effect.Effect<S, E, Exclude<R, Scope.Scope>> => pipe(self, runFoldWhileScoped(s, constTrue, f), Effect.scoped)\n)\n\n/** @internal */\nexport const runFoldEffect = dual<\n  <S, A, E2, R2>(\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<S, E2 | E, Exclude<R | R2, Scope.Scope>>,\n  <A, E, R, S, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => Effect.Effect<S, E2 | E, Exclude<R | R2, Scope.Scope>>\n>(3, <A, E, R, S, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  s: S,\n  f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n): Effect.Effect<S, E2 | E, Exclude<R | R2, Scope.Scope>> =>\n  pipe(self, runFoldWhileScopedEffect(s, constTrue, f), Effect.scoped))\n\n/** @internal */\nexport const runFoldScoped = dual<\n  <S, A>(s: S, f: (s: S, a: A) => S) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<S, E, Scope.Scope | R>,\n  <A, E, R, S>(self: Stream.Stream<A, E, R>, s: S, f: (s: S, a: A) => S) => Effect.Effect<S, E, Scope.Scope | R>\n>(\n  3,\n  <A, E, R, S>(self: Stream.Stream<A, E, R>, s: S, f: (s: S, a: A) => S): Effect.Effect<S, E, Scope.Scope | R> =>\n    pipe(self, runFoldWhileScoped(s, constTrue, f))\n)\n\n/** @internal */\nexport const runFoldScopedEffect = dual<\n  <S, A, E2, R2>(\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<S, E2 | E, Scope.Scope | R2 | R>,\n  <A, E, R, S, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => Effect.Effect<S, E2 | E, Scope.Scope | R2 | R>\n>(3, <A, E, R, S, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  s: S,\n  f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n): Effect.Effect<S, E2 | E, Scope.Scope | R2 | R> => pipe(self, runFoldWhileScopedEffect(s, constTrue, f)))\n\n/** @internal */\nexport const runFoldWhile = dual<\n  <S, A>(\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => S\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<S, E, Exclude<R, Scope.Scope>>,\n  <A, E, R, S>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => S\n  ) => Effect.Effect<S, E, Exclude<R, Scope.Scope>>\n>(4, <A, E, R, S>(\n  self: Stream.Stream<A, E, R>,\n  s: S,\n  cont: Predicate<S>,\n  f: (s: S, a: A) => S\n): Effect.Effect<S, E, Exclude<R, Scope.Scope>> => pipe(self, runFoldWhileScoped(s, cont, f), Effect.scoped))\n\n/** @internal */\nexport const runFoldWhileEffect = dual<\n  <S, A, E2, R2>(\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<S, E2 | E, Exclude<R | R2, Scope.Scope>>,\n  <A, E, R, S, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => Effect.Effect<S, E2 | E, Exclude<R | R2, Scope.Scope>>\n>(4, <A, E, R, S, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  s: S,\n  cont: Predicate<S>,\n  f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n): Effect.Effect<S, E2 | E, Exclude<R | R2, Scope.Scope>> =>\n  pipe(self, runFoldWhileScopedEffect(s, cont, f), Effect.scoped))\n\n/** @internal */\nexport const runFoldWhileScoped = dual<\n  <S, A>(\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => S\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<S, E, Scope.Scope | R>,\n  <A, E, R, S>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => S\n  ) => Effect.Effect<S, E, Scope.Scope | R>\n>(4, <A, E, R, S>(\n  self: Stream.Stream<A, E, R>,\n  s: S,\n  cont: Predicate<S>,\n  f: (s: S, a: A) => S\n): Effect.Effect<S, E, Scope.Scope | R> => pipe(self, runScoped(_sink.fold(s, cont, f))))\n\n/** @internal */\nexport const runFoldWhileScopedEffect = dual<\n  <S, A, E2, R2>(\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<S, E2 | E, Scope.Scope | R2 | R>,\n  <A, E, R, S, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => Effect.Effect<S, E2 | E, Scope.Scope | R2 | R>\n>(4, <A, E, R, S, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  s: S,\n  cont: Predicate<S>,\n  f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n): Effect.Effect<S, E2 | E, Scope.Scope | R2 | R> => pipe(self, runScoped(_sink.foldEffect(s, cont, f))))\n\n/** @internal */\nexport const runForEach = dual<\n  <A, X, E2, R2>(\n    f: (a: A) => Effect.Effect<X, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, E2 | E, Exclude<R | R2, Scope.Scope>>,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<X, E2, R2>\n  ) => Effect.Effect<void, E2 | E, Exclude<R | R2, Scope.Scope>>\n>(2, <A, E, R, X, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  f: (a: A) => Effect.Effect<X, E2, R2>\n): Effect.Effect<void, E2 | E, Exclude<R | R2, Scope.Scope>> => pipe(self, run(_sink.forEach(f))))\n\n/** @internal */\nexport const runForEachChunk = dual<\n  <A, X, E2, R2>(\n    f: (a: Chunk.Chunk<A>) => Effect.Effect<X, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, E2 | E, Exclude<R | R2, Scope.Scope>>,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: Chunk.Chunk<A>) => Effect.Effect<X, E2, R2>\n  ) => Effect.Effect<void, E2 | E, Exclude<R | R2, Scope.Scope>>\n>(2, <A, E, R, X, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  f: (a: Chunk.Chunk<A>) => Effect.Effect<X, E2, R2>\n): Effect.Effect<void, E2 | E, Exclude<R | R2, Scope.Scope>> => pipe(self, run(_sink.forEachChunk(f))))\n\n/** @internal */\nexport const runForEachChunkScoped = dual<\n  <A, X, E2, R2>(\n    f: (a: Chunk.Chunk<A>) => Effect.Effect<X, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, E2 | E, Scope.Scope | R2 | R>,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: Chunk.Chunk<A>) => Effect.Effect<X, E2, R2>\n  ) => Effect.Effect<void, E2 | E, Scope.Scope | R2 | R>\n>(2, <A, E, R, X, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  f: (a: Chunk.Chunk<A>) => Effect.Effect<X, E2, R2>\n): Effect.Effect<void, E2 | E, Scope.Scope | R2 | R> => pipe(self, runScoped(_sink.forEachChunk(f))))\n\n/** @internal */\nexport const runForEachScoped = dual<\n  <A, X, E2, R2>(\n    f: (a: A) => Effect.Effect<X, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, E2 | E, R2 | R | Scope.Scope>,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<X, E2, R2>\n  ) => Effect.Effect<void, E2 | E, R2 | R | Scope.Scope>\n>(2, <A, E, R, X, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  f: (a: A) => Effect.Effect<X, E2, R2>\n): Effect.Effect<void, E2 | E, R2 | R | Scope.Scope> => pipe(self, runScoped(_sink.forEach(f))))\n\n/** @internal */\nexport const runForEachWhile = dual<\n  <A, E2, R2>(\n    f: (a: A) => Effect.Effect<boolean, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, E2 | E, Exclude<R | R2, Scope.Scope>>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<boolean, E2, R2>\n  ) => Effect.Effect<void, E2 | E, Exclude<R | R2, Scope.Scope>>\n>(2, <A, E, R, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  f: (a: A) => Effect.Effect<boolean, E2, R2>\n): Effect.Effect<void, E2 | E, Exclude<R | R2, Scope.Scope>> => pipe(self, run(_sink.forEachWhile(f))))\n\n/** @internal */\nexport const runForEachWhileScoped = dual<\n  <A, E2, R2>(\n    f: (a: A) => Effect.Effect<boolean, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, E2 | E, R2 | R | Scope.Scope>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<boolean, E2, R2>\n  ) => Effect.Effect<void, E2 | E, R2 | R | Scope.Scope>\n>(2, <A, E, R, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  f: (a: A) => Effect.Effect<boolean, E2, R2>\n): Effect.Effect<void, E2 | E, R2 | R | Scope.Scope> => pipe(self, runScoped(_sink.forEachWhile(f))))\n\n/** @internal */\nexport const runHead = <A, E, R>(\n  self: Stream.Stream<A, E, R>\n): Effect.Effect<Option.Option<A>, E, Exclude<R, Scope.Scope>> => pipe(self, run(_sink.head<A>()))\n\n/** @internal */\nexport const runIntoPubSub = dual<\n  <A, E>(\n    pubsub: PubSub.PubSub<Take.Take<A, E>>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, never, Exclude<R, Scope.Scope>>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    pubsub: PubSub.PubSub<Take.Take<A, E>>\n  ) => Effect.Effect<void, never, Exclude<R, Scope.Scope>>\n>(\n  2,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    pubsub: PubSub.PubSub<Take.Take<A, E>>\n  ): Effect.Effect<void, never, Exclude<R, Scope.Scope>> => pipe(self, runIntoQueue(pubsub))\n)\n\n/** @internal */\nexport const runIntoPubSubScoped = dual<\n  <A, E>(\n    pubsub: PubSub.PubSub<Take.Take<A, E>>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, never, Scope.Scope | R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    pubsub: PubSub.PubSub<Take.Take<A, E>>\n  ) => Effect.Effect<void, never, Scope.Scope | R>\n>(2, <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  pubsub: PubSub.PubSub<Take.Take<A, E>>\n): Effect.Effect<void, never, Scope.Scope | R> => pipe(self, runIntoQueueScoped(pubsub)))\n\n/** @internal */\nexport const runIntoQueue = dual<\n  <A, E>(\n    queue: Queue.Enqueue<Take.Take<A, E>>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, never, Exclude<R, Scope.Scope>>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    queue: Queue.Enqueue<Take.Take<A, E>>\n  ) => Effect.Effect<void, never, Exclude<R, Scope.Scope>>\n>(\n  2,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    queue: Queue.Enqueue<Take.Take<A, E>>\n  ): Effect.Effect<void, never, Exclude<R, Scope.Scope>> => pipe(self, runIntoQueueScoped(queue), Effect.scoped)\n)\n\n/** @internal */\nexport const runIntoQueueElementsScoped = dual<\n  <A, E>(\n    queue: Queue.Enqueue<Exit.Exit<A, Option.Option<E>>>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, never, Scope.Scope | R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    queue: Queue.Enqueue<Exit.Exit<A, Option.Option<E>>>\n  ) => Effect.Effect<void, never, Scope.Scope | R>\n>(2, <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  queue: Queue.Enqueue<Exit.Exit<A, Option.Option<E>>>\n): Effect.Effect<void, never, Scope.Scope | R> => {\n  const writer: Channel.Channel<Exit.Exit<A, Option.Option<E>>, Chunk.Chunk<A>, never, E, unknown, unknown, R> = core\n    .readWithCause({\n      onInput: (input: Chunk.Chunk<A>) =>\n        core.flatMap(\n          core.fromEffect(Queue.offerAll(queue, Chunk.map(input, Exit.succeed))),\n          () => writer\n        ),\n      onFailure: (cause) => core.fromEffect(Queue.offer(queue, Exit.failCause(Cause.map(cause, Option.some)))),\n      onDone: () => core.fromEffect(Queue.offer(queue, Exit.fail(Option.none())))\n    })\n  return pipe(\n    core.pipeTo(toChannel(self), writer),\n    channel.drain,\n    channelExecutor.runScoped,\n    Effect.asVoid\n  )\n})\n\n/** @internal */\nexport const runIntoQueueScoped = dual<\n  <A, E>(\n    queue: Queue.Enqueue<Take.Take<A, E>>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, never, Scope.Scope | R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    queue: Queue.Enqueue<Take.Take<A, E>>\n  ) => Effect.Effect<void, never, Scope.Scope | R>\n>(2, <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  queue: Queue.Enqueue<Take.Take<A, E>>\n): Effect.Effect<void, never, Scope.Scope | R> => {\n  const writer: Channel.Channel<Take.Take<A, E>, Chunk.Chunk<A>, never, E, unknown, unknown, R> = core\n    .readWithCause({\n      onInput: (input: Chunk.Chunk<A>) => core.flatMap(core.write(InternalTake.chunk(input)), () => writer),\n      onFailure: (cause) => core.write(InternalTake.failCause(cause)),\n      onDone: () => core.write(InternalTake.end)\n    })\n  return pipe(\n    core.pipeTo(toChannel(self), writer),\n    channel.mapOutEffect((take) => Queue.offer(queue, take)),\n    channel.drain,\n    channelExecutor.runScoped,\n    Effect.asVoid\n  )\n})\n\n/** @internal */\nexport const runLast = <A, E, R>(\n  self: Stream.Stream<A, E, R>\n): Effect.Effect<Option.Option<A>, E, Exclude<R, Scope.Scope>> => pipe(self, run(_sink.last()))\n\n/** @internal */\nexport const runScoped = dual<\n  <A2, A, E2, R2>(\n    sink: Sink.Sink<A2, A, unknown, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<A2, E | E2, R | R2 | Scope.Scope>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<A2, A, unknown, E2, R2>\n  ) => Effect.Effect<A2, E | E2, R | R2 | Scope.Scope>\n>(2, <A, E, R, A2, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  sink: Sink.Sink<A2, A, unknown, E2, R2>\n): Effect.Effect<A2, E | E2, R | R2 | Scope.Scope> =>\n  pipe(\n    toChannel(self),\n    channel.pipeToOrFail(_sink.toChannel(sink)),\n    channel.drain,\n    channelExecutor.runScoped\n  ))\n\n/** @internal */\nexport const runSum = <E, R>(self: Stream.Stream<number, E, R>): Effect.Effect<number, E, Exclude<R, Scope.Scope>> =>\n  pipe(self, run(_sink.sum))\n\n/** @internal */\nexport const scan = dual<\n  <S, A>(s: S, f: (s: S, a: A) => S) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<S, E, R>,\n  <A, E, R, S>(self: Stream.Stream<A, E, R>, s: S, f: (s: S, a: A) => S) => Stream.Stream<S, E, R>\n>(\n  3,\n  <A, E, R, S>(self: Stream.Stream<A, E, R>, s: S, f: (s: S, a: A) => S): Stream.Stream<S, E, R> =>\n    pipe(self, scanEffect(s, (s, a) => Effect.succeed(f(s, a))))\n)\n\n/** @internal */\nexport const scanReduce = dual<\n  <A2, A>(f: (a2: A2 | A, a: A) => A2) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E, R>,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, f: (a2: A2 | A, a: A) => A2) => Stream.Stream<A2 | A, E, R>\n>(\n  2,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, f: (a2: A | A2, a: A) => A2): Stream.Stream<A | A2, E, R> =>\n    pipe(self, scanReduceEffect((a2, a) => Effect.succeed(f(a2, a))))\n)\n\n/** @internal */\nexport const scanReduceEffect = dual<\n  <A2, A, E2, R2>(\n    f: (a2: A2 | A, a: A) => Effect.Effect<A2 | A, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a2: A2 | A, a: A) => Effect.Effect<A2 | A, E2, R2>\n  ) => Stream.Stream<A2 | A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a2: A | A2, a: A) => Effect.Effect<A2 | A, E2, R2>\n  ): Stream.Stream<A2 | A, E2 | E, R2 | R> =>\n    pipe(\n      self,\n      mapAccumEffect<Option.Option<A | A2>, A, A | A2, E2, R2>(Option.none() as Option.Option<A | A2>, (option, a) => {\n        switch (option._tag) {\n          case \"None\": {\n            return Effect.succeed([Option.some<A | A2>(a), a] as const)\n          }\n          case \"Some\": {\n            return pipe(\n              f(option.value, a),\n              Effect.map((b) => [Option.some<A | A2>(b), b] as const)\n            )\n          }\n        }\n      })\n    )\n)\n\n/** @internal */\nexport const schedule = dual<\n  <X, A0 extends A, R2, A>(\n    schedule: Schedule.Schedule<X, A0, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R2 | R>,\n  <A, E, R, X, A0 extends A, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<X, A0, R2>\n  ) => Stream.Stream<A, E, R2 | R>\n>(\n  2,\n  <A, E, R, X, A0 extends A, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<X, A0, R2>\n  ): Stream.Stream<A, E, R | R2> =>\n    filterMap(\n      scheduleWith(self, schedule, { onElement: Option.some, onSchedule: Option.none }),\n      identity\n    )\n)\n\n/** @internal */\nexport const scheduleWith = dual<\n  <B, A0 extends A, R2, A, C>(\n    schedule: Schedule.Schedule<B, A0, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<C, E, R2 | R>,\n  <A, E, R, B, A0 extends A, R2, C>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, A0, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ) => Stream.Stream<C, E, R2 | R>\n>(\n  3,\n  <A, E, R, B, A0 extends A, R2, C>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, A0, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ): Stream.Stream<C, E, R | R2> => {\n    const loop = (\n      driver: Schedule.ScheduleDriver<B, A0, R2>,\n      iterator: Iterator<A>\n    ): Channel.Channel<Chunk.Chunk<C>, Chunk.Chunk<A>, E, E, unknown, unknown, R2> => {\n      const next = iterator.next()\n      if (next.done) {\n        return core.readWithCause({\n          onInput: (chunk: Chunk.Chunk<A>) => loop(driver, chunk[Symbol.iterator]()),\n          onFailure: core.failCause,\n          onDone: core.succeedNow\n        })\n      }\n      return channel.unwrap(\n        Effect.matchEffect(driver.next(next.value as A0), {\n          onFailure: () =>\n            pipe(\n              driver.last,\n              Effect.orDie,\n              Effect.map((b) =>\n                pipe(\n                  core.write(Chunk.make(options.onElement(next.value), options.onSchedule(b))),\n                  core.flatMap(() => loop(driver, iterator))\n                )\n              ),\n              Effect.zipLeft(driver.reset)\n            ),\n          onSuccess: () =>\n            Effect.succeed(pipe(\n              core.write(Chunk.of(options.onElement(next.value))),\n              core.flatMap(() => loop(driver, iterator))\n            ))\n        })\n      )\n    }\n    return new StreamImpl(\n      pipe(\n        core.fromEffect(Schedule.driver(schedule)),\n        core.flatMap((driver) =>\n          pipe(\n            toChannel(self),\n            core.pipeTo(loop(driver, Chunk.empty<A>()[Symbol.iterator]()))\n          )\n        )\n      )\n    )\n  }\n)\n\n/** @internal */\nexport const scanEffect = dual<\n  <S, A, E2, R2>(\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<S, E2 | E, R2 | R>,\n  <A, E, R, S, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => Stream.Stream<S, E2 | E, R2 | R>\n>(\n  3,\n  <A, E, R, S, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ): Stream.Stream<S, E2 | E, R2 | R> =>\n    new StreamImpl(\n      pipe(\n        core.write(Chunk.of(s)),\n        core.flatMap(() =>\n          toChannel(pipe(\n            self,\n            mapAccumEffect(s, (s, a) => pipe(f(s, a), Effect.map((s) => [s, s])))\n          ))\n        )\n      )\n    )\n)\n\n/** @internal */\nexport const scoped = <A, E, R>(\n  effect: Effect.Effect<A, E, R>\n): Stream.Stream<A, E, Exclude<R, Scope.Scope>> =>\n  new StreamImpl(channel.ensuring(channel.scoped(pipe(effect, Effect.map(Chunk.of))), Effect.void))\n\n/** @internal */\nexport const some = <A, E, R>(self: Stream.Stream<Option.Option<A>, E, R>): Stream.Stream<A, Option.Option<E>, R> =>\n  pipe(self, mapError(Option.some), someOrFail(() => Option.none()))\n\n/** @internal */\nexport const someOrElse = dual<\n  <A2>(fallback: LazyArg<A2>) => <A, E, R>(self: Stream.Stream<Option.Option<A>, E, R>) => Stream.Stream<A2 | A, E, R>,\n  <A, E, R, A2>(self: Stream.Stream<Option.Option<A>, E, R>, fallback: LazyArg<A2>) => Stream.Stream<A2 | A, E, R>\n>(\n  2,\n  <A, E, R, A2>(self: Stream.Stream<Option.Option<A>, E, R>, fallback: LazyArg<A2>): Stream.Stream<A | A2, E, R> =>\n    pipe(self, map(Option.getOrElse(fallback)))\n)\n\n/** @internal */\nexport const someOrFail = dual<\n  <E2>(error: LazyArg<E2>) => <A, E, R>(self: Stream.Stream<Option.Option<A>, E, R>) => Stream.Stream<A, E2 | E, R>,\n  <A, E, R, E2>(self: Stream.Stream<Option.Option<A>, E, R>, error: LazyArg<E2>) => Stream.Stream<A, E2 | E, R>\n>(\n  2,\n  <A, E, R, E2>(self: Stream.Stream<Option.Option<A>, E, R>, error: LazyArg<E2>): Stream.Stream<A, E | E2, R> =>\n    mapEffectSequential(\n      self,\n      Option.match({\n        onNone: () => Effect.failSync(error),\n        onSome: Effect.succeed\n      })\n    )\n)\n\n/** @internal */\nexport const sliding = dual<\n  (\n    chunkSize: number\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Chunk.Chunk<A>, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, chunkSize: number) => Stream.Stream<Chunk.Chunk<A>, E, R>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, chunkSize: number): Stream.Stream<Chunk.Chunk<A>, E, R> =>\n    slidingSize(self, chunkSize, 1)\n)\n\n/** @internal */\nexport const slidingSize = dual<\n  (\n    chunkSize: number,\n    stepSize: number\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Chunk.Chunk<A>, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, chunkSize: number, stepSize: number) => Stream.Stream<Chunk.Chunk<A>, E, R>\n>(\n  3,\n  <A, E, R>(self: Stream.Stream<A, E, R>, chunkSize: number, stepSize: number): Stream.Stream<Chunk.Chunk<A>, E, R> => {\n    if (chunkSize <= 0 || stepSize <= 0) {\n      return die(\n        new Cause.IllegalArgumentException(\"Invalid bounds - `chunkSize` and `stepSize` must be greater than zero\")\n      )\n    }\n    return new StreamImpl(core.suspend(() => {\n      const queue = new RingBuffer<A>(chunkSize)\n      const emitOnStreamEnd = (\n        queueSize: number,\n        channelEnd: Channel.Channel<Chunk.Chunk<Chunk.Chunk<A>>, Chunk.Chunk<A>, E, E, unknown, unknown>\n      ) => {\n        if (queueSize < chunkSize) {\n          const items = queue.toChunk()\n          const result = Chunk.isEmpty(items) ? Chunk.empty<Chunk.Chunk<A>>() : Chunk.of(items)\n          return pipe(core.write(result), core.flatMap(() => channelEnd))\n        }\n        const lastEmitIndex = queueSize - (queueSize - chunkSize) % stepSize\n        if (lastEmitIndex === queueSize) {\n          return channelEnd\n        }\n        const leftovers = queueSize - (lastEmitIndex - chunkSize + stepSize)\n        const lastItems = pipe(queue.toChunk(), Chunk.takeRight(leftovers))\n        const result = Chunk.isEmpty(lastItems) ? Chunk.empty<Chunk.Chunk<A>>() : Chunk.of(lastItems)\n        return pipe(core.write(result), core.flatMap(() => channelEnd))\n      }\n      const reader = (\n        queueSize: number\n      ): Channel.Channel<Chunk.Chunk<Chunk.Chunk<A>>, Chunk.Chunk<A>, E, E, unknown, unknown> =>\n        core.readWithCause({\n          onInput: (input: Chunk.Chunk<A>) =>\n            core.flatMap(\n              core.write(\n                Chunk.filterMap(input, (element, index) => {\n                  queue.put(element)\n                  const currentIndex = queueSize + index + 1\n                  if (currentIndex < chunkSize || (currentIndex - chunkSize) % stepSize > 0) {\n                    return Option.none()\n                  }\n                  return Option.some(queue.toChunk())\n                })\n              ),\n              () => reader(queueSize + input.length)\n            ),\n          onFailure: (cause) => emitOnStreamEnd(queueSize, core.failCause(cause)),\n          onDone: () => emitOnStreamEnd(queueSize, core.void)\n        })\n      return pipe(toChannel(self), core.pipeTo(reader(0)))\n    }))\n  }\n)\n\n/** @internal */\nexport const split = dual<\n  <A>(predicate: Predicate<NoInfer<A>>) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Chunk.Chunk<A>, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>) => Stream.Stream<Chunk.Chunk<A>, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<Chunk.Chunk<A>, E, R> => {\n  const split = (\n    leftovers: Chunk.Chunk<A>,\n    input: Chunk.Chunk<A>\n  ): Channel.Channel<Chunk.Chunk<Chunk.Chunk<A>>, Chunk.Chunk<A>, E, E, unknown, unknown, R> => {\n    const [chunk, remaining] = pipe(leftovers, Chunk.appendAll(input), Chunk.splitWhere(predicate))\n    if (Chunk.isEmpty(chunk) || Chunk.isEmpty(remaining)) {\n      return loop(pipe(chunk, Chunk.appendAll(pipe(remaining, Chunk.drop(1)))))\n    }\n    return pipe(\n      core.write(Chunk.of(chunk)),\n      core.flatMap(() => split(Chunk.empty(), pipe(remaining, Chunk.drop(1))))\n    )\n  }\n  const loop = (\n    leftovers: Chunk.Chunk<A>\n  ): Channel.Channel<Chunk.Chunk<Chunk.Chunk<A>>, Chunk.Chunk<A>, E, E, unknown, unknown, R> =>\n    core.readWith({\n      onInput: (input: Chunk.Chunk<A>) => split(leftovers, input),\n      onFailure: core.fail,\n      onDone: () => {\n        if (Chunk.isEmpty(leftovers)) {\n          return core.void\n        }\n        if (Option.isNone(pipe(leftovers, Chunk.findFirst(predicate)))) {\n          return channel.zipRight(core.write(Chunk.of(leftovers)), core.void)\n        }\n        return channel.zipRight(\n          split(Chunk.empty(), leftovers),\n          core.void\n        )\n      }\n    })\n  return new StreamImpl(pipe(toChannel(self), core.pipeTo(loop(Chunk.empty()))))\n})\n\n/** @internal */\nexport const splitOnChunk = dual<\n  <A>(delimiter: Chunk.Chunk<A>) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Chunk.Chunk<A>, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, delimiter: Chunk.Chunk<A>) => Stream.Stream<Chunk.Chunk<A>, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, delimiter: Chunk.Chunk<A>): Stream.Stream<Chunk.Chunk<A>, E, R> => {\n  const next = (\n    leftover: Option.Option<Chunk.Chunk<A>>,\n    delimiterIndex: number\n  ): Channel.Channel<Chunk.Chunk<Chunk.Chunk<A>>, Chunk.Chunk<A>, E, E, unknown, unknown, R> =>\n    core.readWithCause({\n      onInput: (inputChunk: Chunk.Chunk<A>) => {\n        let buffer: Array<Chunk.Chunk<A>> | undefined\n        const [carry, delimiterCursor] = pipe(\n          inputChunk,\n          Chunk.reduce(\n            [pipe(leftover, Option.getOrElse(() => Chunk.empty<A>())), delimiterIndex] as const,\n            ([carry, delimiterCursor], a) => {\n              const concatenated = pipe(carry, Chunk.append(a))\n              if (\n                delimiterCursor < delimiter.length &&\n                Equal.equals(a, pipe(delimiter, Chunk.unsafeGet(delimiterCursor)))\n              ) {\n                if (delimiterCursor + 1 === delimiter.length) {\n                  if (buffer === undefined) {\n                    buffer = []\n                  }\n                  buffer.push(pipe(concatenated, Chunk.take(concatenated.length - delimiter.length)))\n                  return [Chunk.empty<A>(), 0] as const\n                }\n                return [concatenated, delimiterCursor + 1] as const\n              }\n              return [concatenated, Equal.equals(a, pipe(delimiter, Chunk.unsafeGet(0))) ? 1 : 0] as const\n            }\n          )\n        )\n        const output = buffer === undefined ? Chunk.empty<Chunk.Chunk<A>>() : Chunk.unsafeFromArray(buffer)\n        return core.flatMap(\n          core.write(output),\n          () => next(Chunk.isNonEmpty(carry) ? Option.some(carry) : Option.none(), delimiterCursor)\n        )\n      },\n      onFailure: (cause) =>\n        Option.match(leftover, {\n          onNone: () => core.failCause(cause),\n          onSome: (chunk) =>\n            channel.zipRight(\n              core.write(Chunk.of(chunk)),\n              core.failCause(cause)\n            )\n        }),\n      onDone: (done) =>\n        Option.match(leftover, {\n          onNone: () => core.succeed(done),\n          onSome: (chunk) => channel.zipRight(core.write(Chunk.of(chunk)), core.succeed(done))\n        })\n    })\n  return new StreamImpl(pipe(toChannel(self), core.pipeTo(next(Option.none(), 0))))\n})\n\n/** @internal */\nexport const splitLines = <E, R>(self: Stream.Stream<string, E, R>): Stream.Stream<string, E, R> =>\n  pipeThroughChannel(self, channel.splitLines())\n\n/** @internal */\nexport const succeed = <A>(value: A): Stream.Stream<A> => fromChunk(Chunk.of(value))\n\n/** @internal */\nexport const sync = <A>(evaluate: LazyArg<A>): Stream.Stream<A> => suspend(() => fromChunk(Chunk.of(evaluate())))\n\n/** @internal */\nexport const suspend = <A, E, R>(stream: LazyArg<Stream.Stream<A, E, R>>): Stream.Stream<A, E, R> =>\n  new StreamImpl(core.suspend(() => toChannel(stream())))\n\n/** @internal */\nexport const take = dual<\n  (n: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, n: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, n: number): Stream.Stream<A, E, R> => {\n  if (!Number.isInteger(n)) {\n    return die(new Cause.IllegalArgumentException(`${n} must be an integer`))\n  }\n  const loop = (n: number): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, never, never, unknown, unknown> =>\n    core.readWith({\n      onInput: (input: Chunk.Chunk<A>) => {\n        const taken = pipe(input, Chunk.take(Math.min(n, Number.POSITIVE_INFINITY)))\n        const leftover = Math.max(0, n - taken.length)\n        const more = leftover > 0\n        if (more) {\n          return pipe(core.write(taken), core.flatMap(() => loop(leftover)))\n        }\n        return core.write(taken)\n      },\n      onFailure: core.fail,\n      onDone: core.succeed\n    })\n  return new StreamImpl(\n    pipe(\n      toChannel(self),\n      channel.pipeToOrFail(0 < n ? loop(n) : core.void)\n    )\n  )\n})\n\n/** @internal */\nexport const takeRight = dual<\n  (n: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, n: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, n: number): Stream.Stream<A, E, R> => {\n  if (n <= 0) {\n    return empty\n  }\n  return new StreamImpl(\n    pipe(\n      Effect.succeed(new RingBuffer<A>(n)),\n      Effect.map((queue) => {\n        const reader: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E, E, void, unknown> = core.readWith({\n          onInput: (input: Chunk.Chunk<A>) => {\n            for (const element of input) {\n              queue.put(element)\n            }\n            return reader\n          },\n          onFailure: core.fail,\n          onDone: () => pipe(core.write(queue.toChunk()), channel.zipRight(core.void))\n        })\n        return pipe(toChannel(self), core.pipeTo(reader))\n      }),\n      channel.unwrap\n    )\n  )\n})\n\n/** @internal */\nexport const takeUntil: {\n  <A>(predicate: Predicate<NoInfer<A>>): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R>\n} = dual(2, <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R> => {\n  const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, never, never, unknown, unknown> = core.readWith({\n    onInput: (input: Chunk.Chunk<A>) => {\n      const taken = pipe(input, Chunk.takeWhile((a) => !predicate(a)))\n      const last = pipe(input, Chunk.drop(taken.length), Chunk.take(1))\n      if (Chunk.isEmpty(last)) {\n        return pipe(core.write(taken), core.flatMap(() => loop))\n      }\n      return core.write(pipe(taken, Chunk.appendAll(last)))\n    },\n    onFailure: core.fail,\n    onDone: core.succeed\n  })\n  return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(loop)))\n})\n\n/** @internal */\nexport const takeUntilEffect: {\n  <A, E2, R2>(\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: A) => Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: A) => Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => {\n    const loop = (\n      iterator: Iterator<A>\n    ): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2> => {\n      const next = iterator.next()\n      if (next.done) {\n        return core.readWithCause({\n          onInput: (elem) => loop(elem[Symbol.iterator]()),\n          onFailure: core.failCause,\n          onDone: core.succeed\n        })\n      }\n      return pipe(\n        predicate(next.value),\n        Effect.map((bool) =>\n          bool ?\n            core.write(Chunk.of(next.value)) :\n            pipe(\n              core.write(Chunk.of(next.value)),\n              core.flatMap(() => loop(iterator))\n            )\n        ),\n        channel.unwrap\n      )\n    }\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(loop(Chunk.empty<A>()[Symbol.iterator]()))))\n  }\n)\n\n/** @internal */\nexport const takeWhile: {\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E, R>\n  <A>(predicate: Predicate<NoInfer<A>>): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>\n  <A, E, R, B extends A>(self: Stream.Stream<A, E, R>, refinement: Refinement<A, B>): Stream.Stream<B, E, R>\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R>\n} = dual(2, <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R> => {\n  const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, never, never, unknown, unknown> = core.readWith({\n    onInput: (input: Chunk.Chunk<A>) => {\n      const taken = pipe(input, Chunk.takeWhile(predicate))\n      const more = taken.length === input.length\n      if (more) {\n        return pipe(core.write(taken), core.flatMap(() => loop))\n      }\n      return core.write(taken)\n    },\n    onFailure: core.fail,\n    onDone: core.succeed\n  })\n  return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(loop)))\n})\n\n/** @internal */\nexport const tap: {\n  <A, X, E2, R2>(\n    f: (a: NoInfer<A>) => Effect.Effect<X, E2, R2>\n  ): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: NoInfer<A>) => Effect.Effect<X, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: NoInfer<A>) => Effect.Effect<X, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => mapEffectSequential(self, (a) => Effect.as(f(a), a))\n)\n\n/** @internal */\nexport const tapBoth: {\n  <E, X1, E2, R2, A, X2, E3, R3>(\n    options: {\n      readonly onFailure: (e: NoInfer<E>) => Effect.Effect<X1, E2, R2>\n      readonly onSuccess: (a: NoInfer<A>) => Effect.Effect<X2, E3, R3>\n    }\n  ): <R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E | E2 | E3, R | R2 | R3>\n  <A, E, R, X1, E2, R2, X2, E3, R3>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly onFailure: (e: NoInfer<E>) => Effect.Effect<X1, E2, R2>\n      readonly onSuccess: (a: NoInfer<A>) => Effect.Effect<X2, E3, R3>\n    }\n  ): Stream.Stream<A, E | E2 | E3, R | R2 | R3>\n} = dual(\n  2,\n  <A, E, R, X1, E2, R2, X2, E3, R3>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly onFailure: (e: NoInfer<E>) => Effect.Effect<X1, E2, R2>\n      readonly onSuccess: (a: NoInfer<A>) => Effect.Effect<X2, E3, R3>\n    }\n  ): Stream.Stream<A, E | E2 | E3, R | R2 | R3> => pipe(self, tapError(options.onFailure), tap(options.onSuccess))\n)\n\n/** @internal */\nexport const tapError: {\n  <E, X, E2, R2>(\n    f: (error: NoInfer<E>) => Effect.Effect<X, E2, R2>\n  ): <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E | E2, R2 | R>\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (error: E) => Effect.Effect<X, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (error: E) => Effect.Effect<X, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> =>\n    catchAll(self, (error) => fromEffect(Effect.zipRight(f(error), Effect.fail(error))))\n)\n\n/** @internal */\nexport const tapErrorCause: {\n  <E, X, E2, R2>(\n    f: (cause: Cause.Cause<NoInfer<E>>) => Effect.Effect<X, E2, R2>\n  ): <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E | E2, R2 | R>\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (cause: Cause.Cause<E>) => Effect.Effect<X, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (cause: Cause.Cause<E>) => Effect.Effect<X, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => {\n    const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R | R2> = core\n      .readWithCause({\n        onInput: (chunk) => core.flatMap(core.write(chunk), () => loop),\n        onFailure: (cause) => core.fromEffect(Effect.zipRight(f(cause), Effect.failCause(cause))),\n        onDone: core.succeedNow\n      })\n\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(loop)))\n  }\n)\n\n/** @internal */\nexport const tapSink = dual<\n  <A, E2, R2>(\n    sink: Sink.Sink<unknown, A, unknown, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<unknown, A, unknown, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<unknown, A, unknown, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> =>\n    pipe(\n      fromEffect(Effect.all([Queue.bounded<Take.Take<A, E | E2>>(1), Deferred.make<void>()])),\n      flatMap(([queue, deferred]) => {\n        const right = flattenTake(fromQueue(queue, { maxChunkSize: 1 }))\n        const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2> = core\n          .readWithCause({\n            onInput: (chunk: Chunk.Chunk<A>) =>\n              pipe(\n                core.fromEffect(Queue.offer(queue, InternalTake.chunk(chunk))),\n                core.foldCauseChannel({\n                  onFailure: () => core.flatMap(core.write(chunk), () => channel.identityChannel()),\n                  onSuccess: () => core.flatMap(core.write(chunk), () => loop)\n                })\n              ) as Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2>,\n            onFailure: (cause: Cause.Cause<E | E2>) =>\n              pipe(\n                core.fromEffect(Queue.offer(queue, InternalTake.failCause(cause))),\n                core.foldCauseChannel({\n                  onFailure: () => core.failCause(cause),\n                  onSuccess: () => core.failCause(cause)\n                })\n              ),\n            onDone: () =>\n              pipe(\n                core.fromEffect(Queue.offer(queue, InternalTake.end)),\n                core.foldCauseChannel({\n                  onFailure: () => core.void,\n                  onSuccess: () => core.void\n                })\n              )\n          })\n        return pipe(\n          new StreamImpl(pipe(\n            core.pipeTo(toChannel(self), loop),\n            channel.ensuring(Effect.zipRight(\n              Effect.forkDaemon(Queue.offer(queue, InternalTake.end)),\n              Deferred.await(deferred)\n            ))\n          )),\n          merge(\n            execute(pipe(\n              run(right, sink),\n              Effect.ensuring(Effect.zipRight(\n                Queue.shutdown(queue),\n                Deferred.succeed(deferred, void 0)\n              ))\n            ))\n          )\n        )\n      })\n    )\n)\n\n/** @internal */\nexport const throttle = dual<\n  <A>(\n    options: {\n      readonly cost: (chunk: Chunk.Chunk<A>) => number\n      readonly units: number\n      readonly duration: Duration.DurationInput\n      readonly burst?: number | undefined\n      readonly strategy?: \"enforce\" | \"shape\" | undefined\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly cost: (chunk: Chunk.Chunk<A>) => number\n      readonly units: number\n      readonly duration: Duration.DurationInput\n      readonly burst?: number | undefined\n      readonly strategy?: \"enforce\" | \"shape\" | undefined\n    }\n  ) => Stream.Stream<A, E, R>\n>(\n  2,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly cost: (chunk: Chunk.Chunk<A>) => number\n      readonly units: number\n      readonly duration: Duration.DurationInput\n      readonly burst?: number | undefined\n      readonly strategy?: \"enforce\" | \"shape\" | undefined\n    }\n  ): Stream.Stream<A, E, R> =>\n    throttleEffect(self, {\n      ...options,\n      cost: (chunk) => Effect.succeed(options.cost(chunk))\n    })\n)\n\n/** @internal */\nexport const throttleEffect = dual<\n  <A, E2, R2>(\n    options: {\n      readonly cost: (chunk: Chunk.Chunk<A>) => Effect.Effect<number, E2, R2>\n      readonly units: number\n      readonly duration: Duration.DurationInput\n      readonly burst?: number | undefined\n      readonly strategy?: \"enforce\" | \"shape\" | undefined\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly cost: (chunk: Chunk.Chunk<A>) => Effect.Effect<number, E2, R2>\n      readonly units: number\n      readonly duration: Duration.DurationInput\n      readonly burst?: number | undefined\n      readonly strategy?: \"enforce\" | \"shape\" | undefined\n    }\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly cost: (chunk: Chunk.Chunk<A>) => Effect.Effect<number, E2, R2>\n      readonly units: number\n      readonly duration: Duration.DurationInput\n      readonly burst?: number | undefined\n      readonly strategy?: \"enforce\" | \"shape\" | undefined\n    }\n  ): Stream.Stream<A, E | E2, R | R2> => {\n    if (options.strategy === \"enforce\") {\n      return throttleEnforceEffect(self, options.cost, options.units, options.duration, options.burst ?? 0)\n    }\n    return throttleShapeEffect(self, options.cost, options.units, options.duration, options.burst ?? 0)\n  }\n)\n\nconst throttleEnforceEffect = <A, E, R, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  cost: (chunk: Chunk.Chunk<A>) => Effect.Effect<number, E2, R2>,\n  units: number,\n  duration: Duration.DurationInput,\n  burst: number\n): Stream.Stream<A, E | E2, R | R2> => {\n  const loop = (\n    tokens: number,\n    timestampMillis: number\n  ): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, void, unknown, R2> =>\n    core.readWithCause({\n      onInput: (input: Chunk.Chunk<A>) =>\n        pipe(\n          cost(input),\n          Effect.zip(Clock.currentTimeMillis),\n          Effect.map(([weight, currentTimeMillis]) => {\n            const elapsed = currentTimeMillis - timestampMillis\n            const cycles = elapsed / Duration.toMillis(duration)\n            const sum = tokens + (cycles * units)\n            const max = units + burst < 0 ? Number.POSITIVE_INFINITY : units + burst\n            const available = sum < 0 ? max : Math.min(sum, max)\n            if (weight <= available) {\n              return pipe(\n                core.write(input),\n                core.flatMap(() => loop(available - weight, currentTimeMillis))\n              )\n            }\n            return loop(tokens, timestampMillis)\n          }),\n          channel.unwrap\n        ),\n      onFailure: core.failCause,\n      onDone: () => core.void\n    })\n  const throttled = pipe(\n    Clock.currentTimeMillis,\n    Effect.map((currentTimeMillis) => loop(units, currentTimeMillis)),\n    channel.unwrap\n  )\n  return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(throttled)))\n}\n\nconst throttleShapeEffect = <A, E, R, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  costFn: (chunk: Chunk.Chunk<A>) => Effect.Effect<number, E2, R2>,\n  units: number,\n  duration: Duration.DurationInput,\n  burst: number\n): Stream.Stream<A, E | E2, R | R2> => {\n  const loop = (\n    tokens: number,\n    timestampMillis: number\n  ): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, void, unknown, R2> =>\n    core.readWithCause({\n      onInput: (input: Chunk.Chunk<A>) =>\n        pipe(\n          costFn(input),\n          Effect.zip(Clock.currentTimeMillis),\n          Effect.map(([weight, currentTimeMillis]) => {\n            const elapsed = currentTimeMillis - timestampMillis\n            const cycles = elapsed / Duration.toMillis(duration)\n            const sum = tokens + (cycles * units)\n            const max = units + burst < 0 ? Number.POSITIVE_INFINITY : units + burst\n            const available = sum < 0 ? max : Math.min(sum, max)\n            const remaining = available - weight\n            const waitCycles = remaining >= 0 ? 0 : -remaining / units\n            const delay = Duration.millis(Math.max(0, waitCycles * Duration.toMillis(duration)))\n            if (Duration.greaterThan(delay, Duration.zero)) {\n              return pipe(\n                core.fromEffect(Clock.sleep(delay)),\n                channel.zipRight(core.write(input)),\n                core.flatMap(() => loop(remaining, currentTimeMillis))\n              )\n            }\n            return core.flatMap(\n              core.write(input),\n              () => loop(remaining, currentTimeMillis)\n            )\n          }),\n          channel.unwrap\n        ),\n      onFailure: core.failCause,\n      onDone: () => core.void\n    })\n  const throttled = pipe(\n    Clock.currentTimeMillis,\n    Effect.map((currentTimeMillis) => loop(units, currentTimeMillis)),\n    channel.unwrap\n  )\n  return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(throttled)))\n}\n\n/** @internal */\nexport const tick = (interval: Duration.DurationInput): Stream.Stream<void> =>\n  repeatWithSchedule(void 0, Schedule.spaced(interval))\n\n/** @internal */\nexport const timeout = dual<\n  (duration: Duration.DurationInput) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, duration: Duration.DurationInput) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, duration: Duration.DurationInput): Stream.Stream<A, E, R> =>\n  pipe(\n    toPull(self),\n    Effect.map(Effect.timeoutFail<Option.Option<E>>({\n      onTimeout: () => Option.none(),\n      duration\n    })),\n    fromPull\n  ))\n\n/** @internal */\nexport const timeoutFail = dual<\n  <E2>(\n    error: LazyArg<E2>,\n    duration: Duration.DurationInput\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R>,\n  <A, E, R, E2>(\n    self: Stream.Stream<A, E, R>,\n    error: LazyArg<E2>,\n    duration: Duration.DurationInput\n  ) => Stream.Stream<A, E2 | E, R>\n>(\n  3,\n  <A, E, R, E2>(\n    self: Stream.Stream<A, E, R>,\n    error: LazyArg<E2>,\n    duration: Duration.DurationInput\n  ): Stream.Stream<A, E | E2, R> => pipe(self, timeoutTo(duration, failSync(error)))\n)\n\n/** @internal */\nexport const timeoutFailCause = dual<\n  <E2>(\n    cause: LazyArg<Cause.Cause<E2>>,\n    duration: Duration.DurationInput\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R>,\n  <A, E, R, E2>(\n    self: Stream.Stream<A, E, R>,\n    cause: LazyArg<Cause.Cause<E2>>,\n    duration: Duration.DurationInput\n  ) => Stream.Stream<A, E2 | E, R>\n>(\n  3,\n  <A, E, R, E2>(\n    self: Stream.Stream<A, E, R>,\n    cause: LazyArg<Cause.Cause<E2>>,\n    duration: Duration.DurationInput\n  ): Stream.Stream<A, E | E2, R> =>\n    pipe(\n      toPull(self),\n      Effect.map(\n        Effect.timeoutFailCause<Option.Option<E | E2>>({\n          onTimeout: () => Cause.map(cause(), Option.some),\n          duration\n        })\n      ),\n      fromPull\n    )\n)\n\n/** @internal */\nexport const timeoutTo = dual<\n  <A2, E2, R2>(\n    duration: Duration.DurationInput,\n    that: Stream.Stream<A2, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    duration: Duration.DurationInput,\n    that: Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<A2 | A, E2 | E, R2 | R>\n>(\n  3,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    duration: Duration.DurationInput,\n    that: Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<A2 | A, E2 | E, R2 | R> => {\n    const StreamTimeout = new Cause.RuntimeException(\"Stream Timeout\")\n    return pipe(\n      self,\n      timeoutFailCause<E | E2>(() => Cause.die(StreamTimeout), duration),\n      catchSomeCause((cause) =>\n        Cause.isDieType(cause) &&\n          Cause.isRuntimeException(cause.defect) &&\n          cause.defect.message !== undefined &&\n          cause.defect.message === \"Stream Timeout\" ?\n          Option.some(that) :\n          Option.none()\n      )\n    )\n  }\n)\n\nconst pubsubFromOptions = <A, E>(\n  options: number | {\n    readonly capacity: \"unbounded\"\n    readonly replay?: number | undefined\n  } | {\n    readonly capacity: number\n    readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n    readonly replay?: number | undefined\n  }\n): Effect.Effect<PubSub.PubSub<Take.Take<A, E>>> => {\n  if (typeof options === \"number\") {\n    return PubSub.bounded(options)\n  } else if (options.capacity === \"unbounded\") {\n    return PubSub.unbounded({ replay: options.replay })\n  }\n  switch (options.strategy) {\n    case \"dropping\":\n      return PubSub.dropping(options)\n    case \"sliding\":\n      return PubSub.sliding(options)\n    default:\n      return PubSub.bounded(options)\n  }\n}\n\n/** @internal */\nexport const toPubSub = dual<\n  (\n    capacity: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<PubSub.PubSub<Take.Take<A, E>>, never, Scope.Scope | R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    capacity: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => Effect.Effect<PubSub.PubSub<Take.Take<A, E>>, never, Scope.Scope | R>\n>(2, <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  capacity: number | {\n    readonly capacity: \"unbounded\"\n    readonly replay?: number | undefined\n  } | {\n    readonly capacity: number\n    readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n    readonly replay?: number | undefined\n  }\n): Effect.Effect<PubSub.PubSub<Take.Take<A, E>>, never, Scope.Scope | R> =>\n  pipe(\n    Effect.acquireRelease(pubsubFromOptions<A, E>(capacity), (pubsub) => PubSub.shutdown(pubsub)),\n    Effect.tap((pubsub) => pipe(self, runIntoPubSubScoped(pubsub), Effect.forkScoped))\n  ))\n\n/** @internal */\nexport const toPull = <A, E, R>(\n  self: Stream.Stream<A, E, R>\n): Effect.Effect<Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R>, never, R | Scope.Scope> =>\n  Effect.map(channel.toPull(toChannel(self)), (pull) =>\n    pipe(\n      pull,\n      Effect.mapError(Option.some),\n      Effect.flatMap(Either.match({\n        onLeft: () => Effect.fail(Option.none()),\n        onRight: Effect.succeed\n      }))\n    ))\n\n/** @internal */\nexport const toQueue = dual<\n  (\n    options?: {\n      readonly strategy?: \"suspend\" | \"sliding\" | \"dropping\" | undefined\n      readonly capacity?: number | undefined\n    } | {\n      readonly strategy: \"unbounded\"\n    }\n  ) => <A, E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<Queue.Dequeue<Take.Take<A, E>>, never, R | Scope.Scope>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options?: {\n      readonly strategy?: \"suspend\" | \"sliding\" | \"dropping\" | undefined\n      readonly capacity?: number | undefined\n    } | {\n      readonly strategy: \"unbounded\"\n    }\n  ) => Effect.Effect<Queue.Dequeue<Take.Take<A, E>>, never, R | Scope.Scope>\n>((args) => isStream(args[0]), <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  options?: {\n    readonly strategy?: \"suspend\" | \"sliding\" | \"dropping\" | undefined\n    readonly capacity?: number | undefined\n  } | {\n    readonly strategy: \"unbounded\"\n  }\n) =>\n  Effect.tap(\n    Effect.acquireRelease(\n      options?.strategy === \"unbounded\" ?\n        Queue.unbounded<Take.Take<A, E>>() :\n        options?.strategy === \"dropping\" ?\n        Queue.dropping<Take.Take<A, E>>(options.capacity ?? 2) :\n        options?.strategy === \"sliding\" ?\n        Queue.sliding<Take.Take<A, E>>(options.capacity ?? 2) :\n        Queue.bounded<Take.Take<A, E>>(options?.capacity ?? 2),\n      (queue) => Queue.shutdown(queue)\n    ),\n    (queue) => Effect.forkScoped(runIntoQueueScoped(self, queue))\n  ))\n\n/** @internal */\nexport const toQueueOfElements = dual<\n  (options?: {\n    readonly capacity?: number | undefined\n  }) => <A, E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>, never, R | Scope.Scope>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options?: {\n      readonly capacity?: number | undefined\n    }\n  ) => Effect.Effect<Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>, never, R | Scope.Scope>\n>((args) => isStream(args[0]), <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  options?: {\n    readonly capacity?: number | undefined\n  }\n) =>\n  Effect.tap(\n    Effect.acquireRelease(\n      Queue.bounded<Exit.Exit<A, Option.Option<E>>>(options?.capacity ?? 2),\n      (queue) => Queue.shutdown(queue)\n    ),\n    (queue) => Effect.forkScoped(runIntoQueueElementsScoped(self, queue))\n  ))\n\n/** @internal */\nexport const toReadableStream = dual<\n  <A>(\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ) => <E>(self: Stream.Stream<A, E>) => ReadableStream<A>,\n  <A, E>(\n    self: Stream.Stream<A, E>,\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ) => ReadableStream<A>\n>(\n  (args) => isStream(args[0]),\n  <A, E>(\n    self: Stream.Stream<A, E>,\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ) => toReadableStreamRuntime(self, Runtime.defaultRuntime, options)\n)\n\n/** @internal */\nexport const toReadableStreamEffect = dual<\n  <A>(\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<ReadableStream<A>, never, R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ) => Effect.Effect<ReadableStream<A>, never, R>\n>(\n  (args) => isStream(args[0]),\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ) => Effect.map(Effect.runtime<R>(), (runtime) => toReadableStreamRuntime(self, runtime, options))\n)\n\n/** @internal */\nexport const toReadableStreamRuntime = dual<\n  <A, XR>(\n    runtime: Runtime.Runtime<XR>,\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ) => <E, R extends XR>(self: Stream.Stream<A, E, R>) => ReadableStream<A>,\n  <A, E, XR, R extends XR>(\n    self: Stream.Stream<A, E, R>,\n    runtime: Runtime.Runtime<XR>,\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ) => ReadableStream<A>\n>(\n  (args) => isStream(args[0]),\n  <A, E, XR, R extends XR>(\n    self: Stream.Stream<A, E, R>,\n    runtime: Runtime.Runtime<XR>,\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ): ReadableStream<A> => {\n    const runSync = Runtime.runSync(runtime)\n    const runFork = Runtime.runFork(runtime)\n\n    let pull: Effect.Effect<void, never, R>\n    let scope: Scope.CloseableScope\n    return new ReadableStream<A>({\n      start(controller) {\n        scope = runSync(Scope.make())\n        const pullChunk: Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R> = pipe(\n          toPull(self),\n          Scope.extend(scope),\n          runSync,\n          Effect.flatMap((chunk) => Chunk.isEmpty(chunk) ? pullChunk : Effect.succeed(chunk))\n        )\n        pull = pipe(\n          pullChunk,\n          Effect.tap((chunk) =>\n            Effect.sync(() => {\n              Chunk.map(chunk, (a) => {\n                controller.enqueue(a)\n              })\n            })\n          ),\n          Effect.tapErrorCause(() => Scope.close(scope, Exit.void)),\n          Effect.catchTags({\n            \"None\": () =>\n              Effect.sync(() => {\n                controller.close()\n              }),\n            \"Some\": (error) =>\n              Effect.sync(() => {\n                controller.error(error.value)\n              })\n          }),\n          Effect.asVoid\n        )\n      },\n      pull() {\n        return new Promise<void>((resolve) => {\n          runFork(pull, { scope }).addObserver((_) => resolve())\n        })\n      },\n      cancel() {\n        return new Promise<void>((resolve) => {\n          runFork(Scope.close(scope, Exit.void)).addObserver((_) => resolve())\n        })\n      }\n    }, options?.strategy)\n  }\n)\n\n/** @internal */\nexport const transduce = dual<\n  <A2, A, E2, R2>(\n    sink: Sink.Sink<A2, A, A, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<A2, A, A, E2, R2>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<A2, A, A, E2, R2>\n  ): Stream.Stream<A2, E2 | E, R2 | R> => {\n    const newChannel = core.suspend(() => {\n      const leftovers = { ref: Chunk.empty<Chunk.Chunk<A>>() }\n      const upstreamDone = { ref: false }\n      const buffer: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E, E, unknown, unknown> = core.suspend(\n        () => {\n          const leftover = leftovers.ref\n          if (Chunk.isEmpty(leftover)) {\n            return core.readWith({\n              onInput: (input) => pipe(core.write(input), core.flatMap(() => buffer)),\n              onFailure: core.fail,\n              onDone: core.succeedNow\n            })\n          }\n          leftovers.ref = Chunk.empty<Chunk.Chunk<A>>()\n          return pipe(channel.writeChunk(leftover), core.flatMap(() => buffer))\n        }\n      )\n      const concatAndGet = (chunk: Chunk.Chunk<Chunk.Chunk<A>>): Chunk.Chunk<Chunk.Chunk<A>> => {\n        const leftover = leftovers.ref\n        const concatenated = Chunk.appendAll(leftover, Chunk.filter(chunk, (chunk) => chunk.length !== 0))\n        leftovers.ref = concatenated\n        return concatenated\n      }\n      const upstreamMarker: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E, E, unknown, unknown> = core\n        .readWith({\n          onInput: (input: Chunk.Chunk<A>) => core.flatMap(core.write(input), () => upstreamMarker),\n          onFailure: core.fail,\n          onDone: (done) =>\n            channel.zipRight(\n              core.sync(() => {\n                upstreamDone.ref = true\n              }),\n              core.succeedNow(done)\n            )\n        })\n      const transducer: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E | E2, never, void, unknown, R | R2> = pipe(\n        sink,\n        _sink.toChannel,\n        core.collectElements,\n        core.flatMap(([leftover, z]) =>\n          pipe(\n            core.succeed([upstreamDone.ref, concatAndGet(leftover)] as const),\n            core.flatMap(([done, newLeftovers]) => {\n              const nextChannel = done && Chunk.isEmpty(newLeftovers) ?\n                core.void :\n                transducer\n              return pipe(core.write(Chunk.of(z)), core.flatMap(() => nextChannel))\n            })\n          )\n        )\n      )\n      return pipe(\n        toChannel(self),\n        core.pipeTo(upstreamMarker),\n        core.pipeTo(buffer),\n        channel.pipeToOrFail(transducer)\n      )\n    })\n    return new StreamImpl(newChannel)\n  }\n)\n\n/** @internal */\nexport const unfold = <S, A>(s: S, f: (s: S) => Option.Option<readonly [A, S]>): Stream.Stream<A> =>\n  unfoldChunk(s, (s) => pipe(f(s), Option.map(([a, s]) => [Chunk.of(a), s])))\n\n/** @internal */\nexport const unfoldChunk = <S, A>(\n  s: S,\n  f: (s: S) => Option.Option<readonly [Chunk.Chunk<A>, S]>\n): Stream.Stream<A> => {\n  const loop = (s: S): Channel.Channel<Chunk.Chunk<A>, unknown, never, unknown, unknown, unknown> =>\n    Option.match(f(s), {\n      onNone: () => core.void,\n      onSome: ([chunk, s]) => core.flatMap(core.write(chunk), () => loop(s))\n    })\n  return new StreamImpl(core.suspend(() => loop(s)))\n}\n\n/** @internal */\nexport const unfoldChunkEffect = <S, A, E, R>(\n  s: S,\n  f: (s: S) => Effect.Effect<Option.Option<readonly [Chunk.Chunk<A>, S]>, E, R>\n): Stream.Stream<A, E, R> =>\n  suspend(() => {\n    const loop = (s: S): Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown, R> =>\n      channel.unwrap(\n        Effect.map(\n          f(s),\n          Option.match({\n            onNone: () => core.void,\n            onSome: ([chunk, s]) => core.flatMap(core.write(chunk), () => loop(s))\n          })\n        )\n      )\n    return new StreamImpl(loop(s))\n  })\n\n/** @internal */\nexport const unfoldEffect = <S, A, E, R>(\n  s: S,\n  f: (s: S) => Effect.Effect<Option.Option<readonly [A, S]>, E, R>\n): Stream.Stream<A, E, R> =>\n  unfoldChunkEffect(s, (s) => pipe(f(s), Effect.map(Option.map(([a, s]) => [Chunk.of(a), s]))))\n\nconst void_: Stream.Stream<void> = succeed(void 0)\nexport {\n  /** @internal */\n  void_ as void\n}\n\n/** @internal */\nexport const unwrap = <A, E2, R2, E, R>(\n  effect: Effect.Effect<Stream.Stream<A, E2, R2>, E, R>\n): Stream.Stream<A, E | E2, R | R2> => flatten(fromEffect(effect))\n\n/** @internal */\nexport const unwrapScoped = <A, E2, R2, E, R>(\n  effect: Effect.Effect<Stream.Stream<A, E2, R2>, E, R>\n): Stream.Stream<A, E | E2, Exclude<R, Scope.Scope> | R2> => flatten(scoped(effect))\n\n/** @internal */\nexport const updateService = dual<\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    f: (service: Context.Tag.Service<T>) => Context.Tag.Service<T>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, T | R>,\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Stream.Stream<A, E, R>,\n    tag: T,\n    f: (service: Context.Tag.Service<T>) => Context.Tag.Service<T>\n  ) => Stream.Stream<A, E, T | R>\n>(\n  3,\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Stream.Stream<A, E, R>,\n    tag: T,\n    f: (service: Context.Tag.Service<T>) => Context.Tag.Service<T>\n  ): Stream.Stream<A, E, T | R> =>\n    pipe(\n      self,\n      mapInputContext((context) =>\n        pipe(\n          context,\n          Context.add(tag, f(pipe(context, Context.unsafeGet(tag))))\n        )\n      )\n    )\n)\n\n/** @internal */\nexport const when = dual<\n  (test: LazyArg<boolean>) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, test: LazyArg<boolean>) => Stream.Stream<A, E, R>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, test: LazyArg<boolean>): Stream.Stream<A, E, R> =>\n    pipe(self, whenEffect(Effect.sync(test)))\n)\n\n/** @internal */\nexport const whenCase = <A, A2, E, R>(\n  evaluate: LazyArg<A>,\n  pf: (a: A) => Option.Option<Stream.Stream<A2, E, R>>\n) => whenCaseEffect(pf)(Effect.sync(evaluate))\n\n/** @internal */\nexport const whenCaseEffect = dual<\n  <A, A2, E2, R2>(\n    pf: (a: A) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ) => <E, R>(self: Effect.Effect<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    pf: (a: A) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    pf: (a: A) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ): Stream.Stream<A2, E | E2, R | R2> =>\n    pipe(\n      fromEffect(self),\n      flatMap((a) => pipe(pf(a), Option.getOrElse(() => empty)))\n    )\n)\n\n/** @internal */\nexport const whenEffect = dual<\n  <E2, R2>(\n    effect: Effect.Effect<boolean, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<boolean, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => pipe(fromEffect(effect), flatMap((bool) => bool ? self : empty))\n)\n\n/** @internal */\nexport const withSpan: {\n  (\n    name: string,\n    options?: Tracer.SpanOptions\n  ): <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, Exclude<R, Tracer.ParentSpan>>\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    name: string,\n    options?: Tracer.SpanOptions\n  ): Stream.Stream<A, E, Exclude<R, Tracer.ParentSpan>>\n} = function() {\n  const dataFirst = typeof arguments[0] !== \"string\"\n  const name = dataFirst ? arguments[1] : arguments[0]\n  const options = InternalTracer.addSpanStackTrace(dataFirst ? arguments[2] : arguments[1])\n  if (dataFirst) {\n    const self = arguments[0]\n    return new StreamImpl(channel.withSpan(toChannel(self), name, options))\n  }\n  return (self: Stream.Stream<any, any, any>) => new StreamImpl(channel.withSpan(toChannel(self), name, options))\n} as any\n\n/** @internal */\nexport const zip = dual<\n  <A2, E2, R2>(\n    that: Stream.Stream<A2, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<[A, A2], E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<[A, A2], E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<[A, A2], E2 | E, R2 | R> => pipe(self, zipWith(that, (a, a2) => [a, a2]))\n)\n\n/** @internal */\nexport const zipFlatten = dual<\n  <A2, E2, R2>(\n    that: Stream.Stream<A2, E2, R2>\n  ) => <A extends ReadonlyArray<any>, E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Stream.Stream<[...A, A2], E2 | E, R2 | R>,\n  <A extends ReadonlyArray<any>, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<[...A, A2], E2 | E, R2 | R>\n>(\n  2,\n  <A extends ReadonlyArray<any>, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<[...A, A2], E2 | E, R2 | R> => pipe(self, zipWith(that, (a, a2) => [...a, a2]))\n)\n\n/** @internal */\nexport const zipAll = dual<\n  <A2, E2, R2, A>(\n    options: {\n      readonly other: Stream.Stream<A2, E2, R2>\n      readonly defaultSelf: A\n      readonly defaultOther: A2\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<[A, A2], E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly other: Stream.Stream<A2, E2, R2>\n      readonly defaultSelf: A\n      readonly defaultOther: A2\n    }\n  ) => Stream.Stream<[A, A2], E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly other: Stream.Stream<A2, E2, R2>\n      readonly defaultSelf: A\n      readonly defaultOther: A2\n    }\n  ): Stream.Stream<[A, A2], E2 | E, R2 | R> =>\n    zipAllWith(self, {\n      other: options.other,\n      onSelf: (a) => [a, options.defaultOther],\n      onOther: (a2) => [options.defaultSelf, a2],\n      onBoth: (a, a2) => [a, a2]\n    })\n)\n\n/** @internal */\nexport const zipAllLeft = dual<\n  <A2, E2, R2, A>(\n    that: Stream.Stream<A2, E2, R2>,\n    defaultLeft: A\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    defaultLeft: A\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  3,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    other: Stream.Stream<A2, E2, R2>,\n    defaultSelf: A\n  ): Stream.Stream<A, E | E2, R | R2> =>\n    zipAllWith(self, {\n      other,\n      onSelf: identity,\n      onOther: () => defaultSelf,\n      onBoth: (a) => a\n    })\n)\n\n/** @internal */\nexport const zipAllRight = dual<\n  <A2, E2, R2>(\n    that: Stream.Stream<A2, E2, R2>,\n    defaultRight: A2\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    defaultRight: A2\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  3,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    other: Stream.Stream<A2, E2, R2>,\n    defaultRight: A2\n  ): Stream.Stream<A2, E | E2, R | R2> =>\n    zipAllWith(self, {\n      other,\n      onSelf: () => defaultRight,\n      onOther: identity,\n      onBoth: (_, a2) => a2\n    })\n)\n\n/** @internal */\nexport const zipAllSortedByKey = dual<\n  <A2, E2, R2, A, K>(\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultSelf: A\n      readonly defaultOther: A2\n      readonly order: Order.Order<K>\n    }\n  ) => <E, R>(\n    self: Stream.Stream<readonly [K, A], E, R>\n  ) => Stream.Stream<[K, [A, A2]], E2 | E, R2 | R>,\n  <K, A, E, R, A2, E2, R2>(\n    self: Stream.Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultSelf: A\n      readonly defaultOther: A2\n      readonly order: Order.Order<K>\n    }\n  ) => Stream.Stream<[K, [A, A2]], E2 | E, R2 | R>\n>(\n  2,\n  <K, A, E, R, A2, E2, R2>(\n    self: Stream.Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultSelf: A\n      readonly defaultOther: A2\n      readonly order: Order.Order<K>\n    }\n  ): Stream.Stream<[K, [A, A2]], E2 | E, R2 | R> =>\n    zipAllSortedByKeyWith(self, {\n      other: options.other,\n      onSelf: (a) => [a, options.defaultOther],\n      onOther: (a2) => [options.defaultSelf, a2],\n      onBoth: (a, a2) => [a, a2],\n      order: options.order\n    })\n)\n\n/** @internal */\nexport const zipAllSortedByKeyLeft = dual<\n  <A2, E2, R2, A, K>(\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultSelf: A\n      readonly order: Order.Order<K>\n    }\n  ) => <E, R>(self: Stream.Stream<readonly [K, A], E, R>) => Stream.Stream<[K, A], E2 | E, R2 | R>,\n  <K, A, E, R, A2, E2, R2>(\n    self: Stream.Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultSelf: A\n      readonly order: Order.Order<K>\n    }\n  ) => Stream.Stream<[K, A], E2 | E, R2 | R>\n>(\n  2,\n  <K, A, E, R, A2, E2, R2>(\n    self: Stream.Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultSelf: A\n      readonly order: Order.Order<K>\n    }\n  ): Stream.Stream<[K, A], E2 | E, R2 | R> =>\n    zipAllSortedByKeyWith(self, {\n      other: options.other,\n      onSelf: identity,\n      onOther: () => options.defaultSelf,\n      onBoth: (a) => a,\n      order: options.order\n    })\n)\n\n/** @internal */\nexport const zipAllSortedByKeyRight = dual<\n  <K, A2, E2, R2>(\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultOther: A2\n      readonly order: Order.Order<K>\n    }\n  ) => <A, E, R>(self: Stream.Stream<readonly [K, A], E, R>) => Stream.Stream<[K, A2], E2 | E, R2 | R>,\n  <A, E, R, K, A2, E2, R2>(\n    self: Stream.Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultOther: A2\n      readonly order: Order.Order<K>\n    }\n  ) => Stream.Stream<[K, A2], E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, K, A2, E2, R2>(\n    self: Stream.Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultOther: A2\n      readonly order: Order.Order<K>\n    }\n  ): Stream.Stream<[K, A2], E2 | E, R2 | R> =>\n    zipAllSortedByKeyWith(self, {\n      other: options.other,\n      onSelf: () => options.defaultOther,\n      onOther: identity,\n      onBoth: (_, a2) => a2,\n      order: options.order\n    })\n)\n\n/** @internal */\nexport const zipAllSortedByKeyWith = dual<\n  <K, A2, E2, R2, A, A3>(\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A3\n      readonly onBoth: (a: A, a2: A2) => A3\n      readonly order: Order.Order<K>\n    }\n  ) => <E, R>(self: Stream.Stream<readonly [K, A], E, R>) => Stream.Stream<[K, A3], E2 | E, R2 | R>,\n  <K, A, E, R, A2, E2, R2, A3>(\n    self: Stream.Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A3\n      readonly onBoth: (a: A, a2: A2) => A3\n      readonly order: Order.Order<K>\n    }\n  ) => Stream.Stream<[K, A3], E2 | E, R2 | R>\n>(\n  2,\n  <K, A, E, R, A2, E2, R2, A3>(\n    self: Stream.Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A3\n      readonly onBoth: (a: A, a2: A2) => A3\n      readonly order: Order.Order<K>\n    }\n  ): Stream.Stream<[K, A3], E2 | E, R2 | R> => {\n    const pull = (\n      state: ZipAllState.ZipAllState<readonly [K, A], readonly [K, A2]>,\n      pullLeft: Effect.Effect<Chunk.Chunk<readonly [K, A]>, Option.Option<E>, R>,\n      pullRight: Effect.Effect<Chunk.Chunk<readonly [K, A2]>, Option.Option<E2>, R2>\n    ): Effect.Effect<\n      Exit.Exit<\n        readonly [\n          Chunk.Chunk<[K, A3]>,\n          ZipAllState.ZipAllState<readonly [K, A], readonly [K, A2]>\n        ],\n        Option.Option<E | E2>\n      >,\n      never,\n      R | R2\n    > => {\n      switch (state._tag) {\n        case ZipAllState.OP_DRAIN_LEFT: {\n          return pipe(\n            pullLeft,\n            Effect.match({\n              onFailure: Exit.fail,\n              onSuccess: (leftChunk) =>\n                Exit.succeed(\n                  [\n                    Chunk.map(leftChunk, ([k, a]) => [k, options.onSelf(a)]),\n                    ZipAllState.DrainLeft\n                  ] as const\n                )\n            })\n          )\n        }\n        case ZipAllState.OP_DRAIN_RIGHT: {\n          return pipe(\n            pullRight,\n            Effect.match({\n              onFailure: Exit.fail,\n              onSuccess: (rightChunk) =>\n                Exit.succeed(\n                  [\n                    Chunk.map(rightChunk, ([k, a2]) => [k, options.onOther(a2)]),\n                    ZipAllState.DrainRight\n                  ] as const\n                )\n            })\n          )\n        }\n        case ZipAllState.OP_PULL_BOTH: {\n          return pipe(\n            unsome(pullLeft),\n            Effect.zip(unsome(pullRight), { concurrent: true }),\n            Effect.matchEffect({\n              onFailure: (error) => Effect.succeed(Exit.fail(Option.some(error))),\n              onSuccess: ([leftOption, rightOption]) => {\n                if (Option.isSome(leftOption) && Option.isSome(rightOption)) {\n                  if (Chunk.isEmpty(leftOption.value) && Chunk.isEmpty(rightOption.value)) {\n                    return pull(ZipAllState.PullBoth, pullLeft, pullRight)\n                  }\n                  if (Chunk.isEmpty(leftOption.value)) {\n                    return pull(ZipAllState.PullLeft(rightOption.value), pullLeft, pullRight)\n                  }\n                  if (Chunk.isEmpty(rightOption.value)) {\n                    return pull(ZipAllState.PullRight(leftOption.value), pullLeft, pullRight)\n                  }\n                  return Effect.succeed(Exit.succeed(merge(leftOption.value, rightOption.value)))\n                }\n                if (Option.isSome(leftOption) && Option.isNone(rightOption)) {\n                  if (Chunk.isEmpty(leftOption.value)) {\n                    return pull(ZipAllState.DrainLeft, pullLeft, pullRight)\n                  }\n                  return Effect.succeed(\n                    Exit.succeed(\n                      [\n                        pipe(leftOption.value, Chunk.map(([k, a]) => [k, options.onSelf(a)])),\n                        ZipAllState.DrainLeft\n                      ] as const\n                    )\n                  )\n                }\n                if (Option.isNone(leftOption) && Option.isSome(rightOption)) {\n                  if (Chunk.isEmpty(rightOption.value)) {\n                    return pull(ZipAllState.DrainRight, pullLeft, pullRight)\n                  }\n                  return Effect.succeed(\n                    Exit.succeed(\n                      [\n                        pipe(rightOption.value, Chunk.map(([k, a2]) => [k, options.onOther(a2)])),\n                        ZipAllState.DrainRight\n                      ] as const\n                    )\n                  )\n                }\n                return Effect.succeed(Exit.fail<Option.Option<E | E2>>(Option.none()))\n              }\n            })\n          )\n        }\n        case ZipAllState.OP_PULL_LEFT: {\n          return Effect.matchEffect(pullLeft, {\n            onFailure: Option.match({\n              onNone: () =>\n                Effect.succeed(\n                  Exit.succeed([\n                    pipe(state.rightChunk, Chunk.map(([k, a2]) => [k, options.onOther(a2)])),\n                    ZipAllState.DrainRight\n                  ])\n                ),\n              onSome: (error) =>\n                Effect.succeed<\n                  Exit.Exit<\n                    readonly [\n                      Chunk.Chunk<[K, A3]>,\n                      ZipAllState.ZipAllState<readonly [K, A], readonly [K, A2]>\n                    ],\n                    Option.Option<E | E2>\n                  >\n                >(Exit.fail(Option.some(error)))\n            }),\n            onSuccess: (leftChunk) =>\n              Chunk.isEmpty(leftChunk) ?\n                pull(ZipAllState.PullLeft(state.rightChunk), pullLeft, pullRight) :\n                Effect.succeed(Exit.succeed(merge(leftChunk, state.rightChunk)))\n          })\n        }\n        case ZipAllState.OP_PULL_RIGHT: {\n          return Effect.matchEffect(pullRight, {\n            onFailure: Option.match({\n              onNone: () =>\n                Effect.succeed(\n                  Exit.succeed(\n                    [\n                      Chunk.map(state.leftChunk, ([k, a]) => [k, options.onSelf(a)]),\n                      ZipAllState.DrainLeft\n                    ] as const\n                  )\n                ),\n              onSome: (error) =>\n                Effect.succeed<\n                  Exit.Exit<\n                    readonly [\n                      Chunk.Chunk<[K, A3]>,\n                      ZipAllState.ZipAllState<readonly [K, A], readonly [K, A2]>\n                    ],\n                    Option.Option<E | E2>\n                  >\n                >(Exit.fail(Option.some(error)))\n            }),\n            onSuccess: (rightChunk) =>\n              Chunk.isEmpty(rightChunk) ?\n                pull(ZipAllState.PullRight(state.leftChunk), pullLeft, pullRight) :\n                Effect.succeed(Exit.succeed(merge(state.leftChunk, rightChunk)))\n          })\n        }\n      }\n    }\n    const merge = (\n      leftChunk: Chunk.Chunk<readonly [K, A]>,\n      rightChunk: Chunk.Chunk<readonly [K, A2]>\n    ): readonly [\n      Chunk.Chunk<[K, A3]>,\n      ZipAllState.ZipAllState<readonly [K, A], readonly [K, A2]>\n    ] => {\n      const hasNext = <T>(chunk: Chunk.Chunk<T>, index: number) => index < chunk.length - 1\n      const builder: Array<[K, A3]> = []\n      let state:\n        | ZipAllState.ZipAllState<\n          readonly [K, A],\n          readonly [K, A2]\n        >\n        | undefined = undefined\n      let leftIndex = 0\n      let rightIndex = 0\n      let leftTuple = pipe(leftChunk, Chunk.unsafeGet(leftIndex))\n      let rightTuple = pipe(rightChunk, Chunk.unsafeGet(rightIndex))\n      let k1 = leftTuple[0]\n      let a = leftTuple[1]\n      let k2 = rightTuple[0]\n      let a2 = rightTuple[1]\n      let loop = true\n      while (loop) {\n        const compare = options.order(k1, k2)\n        if (compare === 0) {\n          builder.push([k1, options.onBoth(a, a2)])\n          if (hasNext(leftChunk, leftIndex) && hasNext(rightChunk, rightIndex)) {\n            leftIndex = leftIndex + 1\n            rightIndex = rightIndex + 1\n            leftTuple = pipe(leftChunk, Chunk.unsafeGet(leftIndex))\n            rightTuple = pipe(rightChunk, Chunk.unsafeGet(rightIndex))\n            k1 = leftTuple[0]\n            a = leftTuple[1]\n            k2 = rightTuple[0]\n            a2 = rightTuple[1]\n          } else if (hasNext(leftChunk, leftIndex)) {\n            state = ZipAllState.PullRight(pipe(leftChunk, Chunk.drop(leftIndex + 1)))\n            loop = false\n          } else if (hasNext(rightChunk, rightIndex)) {\n            state = ZipAllState.PullLeft(pipe(rightChunk, Chunk.drop(rightIndex + 1)))\n            loop = false\n          } else {\n            state = ZipAllState.PullBoth\n            loop = false\n          }\n        } else if (compare < 0) {\n          builder.push([k1, options.onSelf(a)])\n          if (hasNext(leftChunk, leftIndex)) {\n            leftIndex = leftIndex + 1\n            leftTuple = pipe(leftChunk, Chunk.unsafeGet(leftIndex))\n            k1 = leftTuple[0]\n            a = leftTuple[1]\n          } else {\n            const rightBuilder: Array<readonly [K, A2]> = []\n            rightBuilder.push(rightTuple)\n            while (hasNext(rightChunk, rightIndex)) {\n              rightIndex = rightIndex + 1\n              rightTuple = pipe(rightChunk, Chunk.unsafeGet(rightIndex))\n              rightBuilder.push(rightTuple)\n            }\n            state = ZipAllState.PullLeft(Chunk.unsafeFromArray(rightBuilder))\n            loop = false\n          }\n        } else {\n          builder.push([k2, options.onOther(a2)])\n          if (hasNext(rightChunk, rightIndex)) {\n            rightIndex = rightIndex + 1\n            rightTuple = pipe(rightChunk, Chunk.unsafeGet(rightIndex))\n            k2 = rightTuple[0]\n            a2 = rightTuple[1]\n          } else {\n            const leftBuilder: Array<readonly [K, A]> = []\n            leftBuilder.push(leftTuple)\n            while (hasNext(leftChunk, leftIndex)) {\n              leftIndex = leftIndex + 1\n              leftTuple = pipe(leftChunk, Chunk.unsafeGet(leftIndex))\n              leftBuilder.push(leftTuple)\n            }\n            state = ZipAllState.PullRight(Chunk.unsafeFromArray(leftBuilder))\n            loop = false\n          }\n        }\n      }\n      return [Chunk.unsafeFromArray(builder), state!]\n    }\n    return combineChunks(self, options.other, ZipAllState.PullBoth, pull)\n  }\n)\n\n/** @internal */\nexport const zipAllWith = dual<\n  <A2, E2, R2, A, A3>(\n    options: {\n      readonly other: Stream.Stream<A2, E2, R2>\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A3\n      readonly onBoth: (a: A, a2: A2) => A3\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A3, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2, A3>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly other: Stream.Stream<A2, E2, R2>\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A3\n      readonly onBoth: (a: A, a2: A2) => A3\n    }\n  ) => Stream.Stream<A3, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2, A3>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly other: Stream.Stream<A2, E2, R2>\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A3\n      readonly onBoth: (a: A, a2: A2) => A3\n    }\n  ): Stream.Stream<A3, E2 | E, R2 | R> => {\n    const pull = (\n      state: ZipAllState.ZipAllState<A, A2>,\n      pullLeft: Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R>,\n      pullRight: Effect.Effect<Chunk.Chunk<A2>, Option.Option<E2>, R2>\n    ): Effect.Effect<\n      Exit.Exit<readonly [Chunk.Chunk<A3>, ZipAllState.ZipAllState<A, A2>], Option.Option<E | E2>>,\n      never,\n      R | R2\n    > => {\n      switch (state._tag) {\n        case ZipAllState.OP_DRAIN_LEFT: {\n          return Effect.matchEffect(pullLeft, {\n            onFailure: (error) => Effect.succeed(Exit.fail(error)),\n            onSuccess: (leftChunk) =>\n              Effect.succeed(Exit.succeed(\n                [\n                  Chunk.map(leftChunk, options.onSelf),\n                  ZipAllState.DrainLeft\n                ] as const\n              ))\n          })\n        }\n        case ZipAllState.OP_DRAIN_RIGHT: {\n          return Effect.matchEffect(pullRight, {\n            onFailure: (error) => Effect.succeed(Exit.fail(error)),\n            onSuccess: (rightChunk) =>\n              Effect.succeed(Exit.succeed(\n                [\n                  Chunk.map(rightChunk, options.onOther),\n                  ZipAllState.DrainRight\n                ] as const\n              ))\n          })\n        }\n        case ZipAllState.OP_PULL_BOTH: {\n          return pipe(\n            unsome(pullLeft),\n            Effect.zip(unsome(pullRight), { concurrent: true }),\n            Effect.matchEffect({\n              onFailure: (error) => Effect.succeed(Exit.fail(Option.some(error))),\n              onSuccess: ([leftOption, rightOption]) => {\n                if (Option.isSome(leftOption) && Option.isSome(rightOption)) {\n                  if (Chunk.isEmpty(leftOption.value) && Chunk.isEmpty(rightOption.value)) {\n                    return pull(ZipAllState.PullBoth, pullLeft, pullRight)\n                  }\n                  if (Chunk.isEmpty(leftOption.value)) {\n                    return pull(ZipAllState.PullLeft(rightOption.value), pullLeft, pullRight)\n                  }\n                  if (Chunk.isEmpty(rightOption.value)) {\n                    return pull(ZipAllState.PullRight(leftOption.value), pullLeft, pullRight)\n                  }\n                  return Effect.succeed(Exit.succeed(zip(leftOption.value, rightOption.value, options.onBoth)))\n                }\n                if (Option.isSome(leftOption) && Option.isNone(rightOption)) {\n                  return Effect.succeed(Exit.succeed(\n                    [\n                      Chunk.map(leftOption.value, options.onSelf),\n                      ZipAllState.DrainLeft\n                    ] as const\n                  ))\n                }\n                if (Option.isNone(leftOption) && Option.isSome(rightOption)) {\n                  return Effect.succeed(Exit.succeed(\n                    [\n                      Chunk.map(rightOption.value, options.onOther),\n                      ZipAllState.DrainRight\n                    ] as const\n                  ))\n                }\n                return Effect.succeed(Exit.fail<Option.Option<E | E2>>(Option.none()))\n              }\n            })\n          )\n        }\n        case ZipAllState.OP_PULL_LEFT: {\n          return Effect.matchEffect(pullLeft, {\n            onFailure: Option.match({\n              onNone: () =>\n                Effect.succeed(Exit.succeed(\n                  [\n                    Chunk.map(state.rightChunk, options.onOther),\n                    ZipAllState.DrainRight\n                  ] as const\n                )),\n              onSome: (error) =>\n                Effect.succeed<\n                  Exit.Exit<readonly [Chunk.Chunk<A3>, ZipAllState.ZipAllState<A, A2>], Option.Option<E | E2>>\n                >(\n                  Exit.fail(Option.some(error))\n                )\n            }),\n            onSuccess: (leftChunk) => {\n              if (Chunk.isEmpty(leftChunk)) {\n                return pull(ZipAllState.PullLeft(state.rightChunk), pullLeft, pullRight)\n              }\n              if (Chunk.isEmpty(state.rightChunk)) {\n                return pull(ZipAllState.PullRight(leftChunk), pullLeft, pullRight)\n              }\n              return Effect.succeed(Exit.succeed(zip(leftChunk, state.rightChunk, options.onBoth)))\n            }\n          })\n        }\n        case ZipAllState.OP_PULL_RIGHT: {\n          return Effect.matchEffect(pullRight, {\n            onFailure: Option.match({\n              onNone: () =>\n                Effect.succeed(\n                  Exit.succeed(\n                    [\n                      Chunk.map(state.leftChunk, options.onSelf),\n                      ZipAllState.DrainLeft\n                    ] as const\n                  )\n                ),\n              onSome: (error) =>\n                Effect.succeed<\n                  Exit.Exit<readonly [Chunk.Chunk<A3>, ZipAllState.ZipAllState<A, A2>], Option.Option<E | E2>>\n                >(\n                  Exit.fail(Option.some(error))\n                )\n            }),\n            onSuccess: (rightChunk) => {\n              if (Chunk.isEmpty(rightChunk)) {\n                return pull(\n                  ZipAllState.PullRight(state.leftChunk),\n                  pullLeft,\n                  pullRight\n                )\n              }\n              if (Chunk.isEmpty(state.leftChunk)) {\n                return pull(\n                  ZipAllState.PullLeft(rightChunk),\n                  pullLeft,\n                  pullRight\n                )\n              }\n              return Effect.succeed(Exit.succeed(zip(state.leftChunk, rightChunk, options.onBoth)))\n            }\n          })\n        }\n      }\n    }\n    const zip = (\n      leftChunk: Chunk.Chunk<A>,\n      rightChunk: Chunk.Chunk<A2>,\n      f: (a: A, a2: A2) => A3\n    ): readonly [Chunk.Chunk<A3>, ZipAllState.ZipAllState<A, A2>] => {\n      const [output, either] = zipChunks(leftChunk, rightChunk, f)\n      switch (either._tag) {\n        case \"Left\": {\n          if (Chunk.isEmpty(either.left)) {\n            return [output, ZipAllState.PullBoth] as const\n          }\n          return [output, ZipAllState.PullRight(either.left)] as const\n        }\n        case \"Right\": {\n          if (Chunk.isEmpty(either.right)) {\n            return [output, ZipAllState.PullBoth] as const\n          }\n          return [output, ZipAllState.PullLeft(either.right)] as const\n        }\n      }\n    }\n    return combineChunks(self, options.other, ZipAllState.PullBoth, pull)\n  }\n)\n\n/** @internal */\nexport const zipLatest: {\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ): <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<[AL, AR], EL | ER, RL | RR>\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<[AL, AR], EL | ER, RL | RR>\n} = dual(\n  2,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<[AL, AR], EL | ER, RL | RR> => pipe(left, zipLatestWith(right, (a, a2) => [a, a2]))\n)\n\nexport const zipLatestAll = <T extends ReadonlyArray<Stream.Stream<any, any, any>>>(\n  ...streams: T\n): Stream.Stream<\n  [T[number]] extends [never] ? never\n    : { [K in keyof T]: T[K] extends Stream.Stream<infer A, infer _E, infer _R> ? A : never },\n  [T[number]] extends [never] ? never : T[number] extends Stream.Stream<infer _A, infer _E, infer _R> ? _E : never,\n  [T[number]] extends [never] ? never : T[number] extends Stream.Stream<infer _A, infer _E, infer _R> ? _R : never\n> => {\n  if (streams.length === 0) {\n    return empty\n  } else if (streams.length === 1) {\n    return map(streams[0]!, (x) => [x]) as any\n  }\n  const [head, ...tail] = streams\n  return zipLatestWith(\n    head,\n    zipLatestAll(...tail),\n    (first, second) => [first, ...second]\n  ) as any\n}\n\n/** @internal */\nexport const zipLatestWith: {\n  <AR, ER, RR, AL, A>(\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): <EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<A, EL | ER, RL | RR>\n  <AL, EL, RL, AR, ER, RR, A>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): Stream.Stream<A, EL | ER, RL | RR>\n} = dual(\n  3,\n  <AL, EL, RL, AR, ER, RR, A>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): Stream.Stream<A, EL | ER, RL | RR> => {\n    const pullNonEmpty = <_R, _E, _A>(\n      pull: Effect.Effect<Chunk.Chunk<_A>, Option.Option<_E>, _R>\n    ): Effect.Effect<Chunk.Chunk<_A>, Option.Option<_E>, _R> =>\n      pipe(pull, Effect.flatMap((chunk) => Chunk.isEmpty(chunk) ? pullNonEmpty(pull) : Effect.succeed(chunk)))\n    return pipe(\n      toPull(left),\n      Effect.map(pullNonEmpty),\n      Effect.zip(pipe(toPull(right), Effect.map(pullNonEmpty))),\n      Effect.flatMap(([left, right]) =>\n        pipe(\n          fromEffectOption<readonly [Chunk.Chunk<AL>, Chunk.Chunk<AR>, boolean], EL | ER, RL | RR>(\n            Effect.raceWith(left, right, {\n              onSelfDone: (leftDone, rightFiber) =>\n                pipe(\n                  Effect.suspend(() => leftDone),\n                  Effect.zipWith(Fiber.join(rightFiber), (l, r) => [l, r, true] as const)\n                ),\n              onOtherDone: (rightDone, leftFiber) =>\n                pipe(\n                  Effect.suspend(() => rightDone),\n                  Effect.zipWith(Fiber.join(leftFiber), (l, r) => [r, l, false] as const)\n                )\n            })\n          ),\n          flatMap(([l, r, leftFirst]) =>\n            pipe(\n              fromEffect(\n                Ref.make([Chunk.unsafeLast(l), Chunk.unsafeLast(r)] as const)\n              ),\n              flatMap((latest) =>\n                pipe(\n                  fromChunk(\n                    leftFirst ?\n                      pipe(r, Chunk.map((a2) => f(Chunk.unsafeLast(l), a2))) :\n                      pipe(l, Chunk.map((a) => f(a, Chunk.unsafeLast(r))))\n                  ),\n                  concat(\n                    pipe(\n                      repeatEffectOption(left),\n                      mergeEither(repeatEffectOption(right)),\n                      mapEffectSequential(Either.match({\n                        onLeft: (leftChunk) =>\n                          pipe(\n                            Ref.modify(latest, ([_, rightLatest]) =>\n                              [\n                                pipe(leftChunk, Chunk.map((a) => f(a, rightLatest))),\n                                [Chunk.unsafeLast(leftChunk), rightLatest] as const\n                              ] as const)\n                          ),\n                        onRight: (rightChunk) =>\n                          pipe(\n                            Ref.modify(latest, ([leftLatest, _]) =>\n                              [\n                                pipe(rightChunk, Chunk.map((a2) => f(leftLatest, a2))),\n                                [leftLatest, Chunk.unsafeLast(rightChunk)] as const\n                              ] as const)\n                          )\n                      })),\n                      flatMap(fromChunk)\n                    )\n                  )\n                )\n              )\n            )\n          ),\n          toPull\n        )\n      ),\n      fromPull\n    )\n  }\n)\n\n/** @internal */\nexport const zipLeft: {\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ): <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<AL, ER | EL, RR | RL>\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AL, EL | ER, RL | RR>\n} = dual(\n  2,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AL, EL | ER, RL | RR> =>\n    pipe(\n      left,\n      zipWithChunks(right, (left, right) => {\n        if (left.length > right.length) {\n          return [\n            pipe(left, Chunk.take(right.length)),\n            Either.left(pipe(left, Chunk.take(right.length)))\n          ] as const\n        }\n        return [\n          left,\n          Either.right(pipe(right, Chunk.drop(left.length)))\n        ]\n      })\n    )\n)\n\n/** @internal */\nexport const zipRight: {\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ): <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<AR, ER | EL, RR | RL>\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AR, EL | ER, RL | RR>\n} = dual(\n  2,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AR, EL | ER, RL | RR> =>\n    pipe(\n      left,\n      zipWithChunks(right, (left, right) => {\n        if (left.length > right.length) {\n          return [\n            right,\n            Either.left(pipe(left, Chunk.take(right.length)))\n          ] as const\n        }\n        return [\n          pipe(right, Chunk.take(left.length)),\n          Either.right(pipe(right, Chunk.drop(left.length)))\n        ]\n      })\n    )\n)\n\n/** @internal */\nexport const zipWith: {\n  <AR, ER, RR, AL, A>(\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): <EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<A, EL | ER, RL | RR>\n  <AL, EL, RL, AR, ER, RR, A>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): Stream.Stream<A, EL | ER, RL | RR>\n} = dual(\n  3,\n  <AL, EL, RL, AR, ER, RR, A>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): Stream.Stream<A, EL | ER, RL | RR> =>\n    pipe(left, zipWithChunks(right, (leftChunk, rightChunk) => zipChunks(leftChunk, rightChunk, f)))\n)\n\n/** @internal */\nexport const zipWithChunks = dual<\n  <A2, E2, R2, A, A3>(\n    that: Stream.Stream<A2, E2, R2>,\n    f: (\n      left: Chunk.Chunk<A>,\n      right: Chunk.Chunk<A2>\n    ) => readonly [Chunk.Chunk<A3>, Either.Either<Chunk.Chunk<A2>, Chunk.Chunk<A>>]\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A3, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2, A3>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    f: (\n      left: Chunk.Chunk<A>,\n      right: Chunk.Chunk<A2>\n    ) => readonly [Chunk.Chunk<A3>, Either.Either<Chunk.Chunk<A2>, Chunk.Chunk<A>>]\n  ) => Stream.Stream<A3, E2 | E, R2 | R>\n>(3, <A, E, R, A2, E2, R2, A3>(\n  self: Stream.Stream<A, E, R>,\n  that: Stream.Stream<A2, E2, R2>,\n  f: (\n    left: Chunk.Chunk<A>,\n    right: Chunk.Chunk<A2>\n  ) => readonly [Chunk.Chunk<A3>, Either.Either<Chunk.Chunk<A2>, Chunk.Chunk<A>>]\n): Stream.Stream<A3, E2 | E, R2 | R> => {\n  const pull = (\n    state: ZipChunksState.ZipChunksState<A, A2>,\n    pullLeft: Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R>,\n    pullRight: Effect.Effect<Chunk.Chunk<A2>, Option.Option<E2>, R2>\n  ): Effect.Effect<\n    Exit.Exit<readonly [Chunk.Chunk<A3>, ZipChunksState.ZipChunksState<A, A2>], Option.Option<E | E2>>,\n    never,\n    R | R2\n  > => {\n    switch (state._tag) {\n      case ZipChunksState.OP_PULL_BOTH: {\n        return pipe(\n          unsome(pullLeft),\n          Effect.zip(unsome(pullRight), { concurrent: true }),\n          Effect.matchEffect({\n            onFailure: (error) => Effect.succeed(Exit.fail(Option.some(error))),\n            onSuccess: ([leftOption, rightOption]) => {\n              if (Option.isSome(leftOption) && Option.isSome(rightOption)) {\n                if (Chunk.isEmpty(leftOption.value) && Chunk.isEmpty(rightOption.value)) {\n                  return pull(ZipChunksState.PullBoth, pullLeft, pullRight)\n                }\n                if (Chunk.isEmpty(leftOption.value)) {\n                  return pull(ZipChunksState.PullLeft(rightOption.value), pullLeft, pullRight)\n                }\n                if (Chunk.isEmpty(rightOption.value)) {\n                  return pull(ZipChunksState.PullRight(leftOption.value), pullLeft, pullRight)\n                }\n                return Effect.succeed(Exit.succeed(zip(leftOption.value, rightOption.value)))\n              }\n              return Effect.succeed(Exit.fail(Option.none()))\n            }\n          })\n        )\n      }\n      case ZipChunksState.OP_PULL_LEFT: {\n        return Effect.matchEffect(pullLeft, {\n          onFailure: (error) => Effect.succeed(Exit.fail(error)),\n          onSuccess: (leftChunk) => {\n            if (Chunk.isEmpty(leftChunk)) {\n              return pull(ZipChunksState.PullLeft(state.rightChunk), pullLeft, pullRight)\n            }\n            if (Chunk.isEmpty(state.rightChunk)) {\n              return pull(ZipChunksState.PullRight(leftChunk), pullLeft, pullRight)\n            }\n            return Effect.succeed(Exit.succeed(zip(leftChunk, state.rightChunk)))\n          }\n        })\n      }\n      case ZipChunksState.OP_PULL_RIGHT: {\n        return Effect.matchEffect(pullRight, {\n          onFailure: (error) => Effect.succeed(Exit.fail(error)),\n          onSuccess: (rightChunk) => {\n            if (Chunk.isEmpty(rightChunk)) {\n              return pull(ZipChunksState.PullRight(state.leftChunk), pullLeft, pullRight)\n            }\n            if (Chunk.isEmpty(state.leftChunk)) {\n              return pull(ZipChunksState.PullLeft(rightChunk), pullLeft, pullRight)\n            }\n            return Effect.succeed(Exit.succeed(zip(state.leftChunk, rightChunk)))\n          }\n        })\n      }\n    }\n  }\n  const zip = (\n    leftChunk: Chunk.Chunk<A>,\n    rightChunk: Chunk.Chunk<A2>\n  ): readonly [Chunk.Chunk<A3>, ZipChunksState.ZipChunksState<A, A2>] => {\n    const [output, either] = f(leftChunk, rightChunk)\n    switch (either._tag) {\n      case \"Left\": {\n        if (Chunk.isEmpty(either.left)) {\n          return [output, ZipChunksState.PullBoth] as const\n        }\n        return [output, ZipChunksState.PullRight(either.left)] as const\n      }\n      case \"Right\": {\n        if (Chunk.isEmpty(either.right)) {\n          return [output, ZipChunksState.PullBoth] as const\n        }\n        return [output, ZipChunksState.PullLeft(either.right)] as const\n      }\n    }\n  }\n  return pipe(\n    self,\n    combineChunks(that, ZipChunksState.PullBoth, pull)\n  )\n})\n\n/** @internal */\nexport const zipWithIndex = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<[A, number], E, R> =>\n  pipe(self, mapAccum(0, (index, a) => [index + 1, [a, index]]))\n\n/** @internal */\nexport const zipWithNext = <A, E, R>(\n  self: Stream.Stream<A, E, R>\n): Stream.Stream<[A, Option.Option<A>], E, R> => {\n  const process = (\n    last: Option.Option<A>\n  ): Channel.Channel<Chunk.Chunk<readonly [A, Option.Option<A>]>, Chunk.Chunk<A>, never, never, void, unknown> =>\n    core.readWithCause({\n      onInput: (input: Chunk.Chunk<A>) => {\n        const [newLast, chunk] = Chunk.mapAccum(\n          input,\n          last,\n          (prev, curr) => [Option.some(curr), pipe(prev, Option.map((a) => [a, curr] as const))] as const\n        )\n        const output = Chunk.filterMap(\n          chunk,\n          (option) =>\n            Option.isSome(option) ?\n              Option.some([option.value[0], Option.some(option.value[1])] as const) :\n              Option.none()\n        )\n        return core.flatMap(\n          core.write(output),\n          () => process(newLast)\n        )\n      },\n      onFailure: core.failCause,\n      onDone: () =>\n        Option.match(last, {\n          onNone: () => core.void,\n          onSome: (value) =>\n            channel.zipRight(\n              core.write(Chunk.of<readonly [A, Option.Option<A>]>([value, Option.none()])),\n              core.void\n            )\n        })\n    })\n  return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(process(Option.none()))))\n}\n\n/** @internal */\nexport const zipWithPrevious = <A, E, R>(\n  self: Stream.Stream<A, E, R>\n): Stream.Stream<[Option.Option<A>, A], E, R> =>\n  pipe(\n    self,\n    mapAccum<Option.Option<A>, A, [Option.Option<A>, A]>(\n      Option.none(),\n      (prev, curr) => [Option.some(curr), [prev, curr]]\n    )\n  )\n\n/** @internal */\nexport const zipWithPreviousAndNext = <A, E, R>(\n  self: Stream.Stream<A, E, R>\n): Stream.Stream<[Option.Option<A>, A, Option.Option<A>], E, R> =>\n  pipe(\n    zipWithNext(zipWithPrevious(self)),\n    map(([[prev, curr], next]) => [prev, curr, pipe(next, Option.map((tuple) => tuple[1]))])\n  )\n\n/** @internal */\nconst zipChunks = <A, B, C>(\n  left: Chunk.Chunk<A>,\n  right: Chunk.Chunk<B>,\n  f: (a: A, b: B) => C\n): [Chunk.Chunk<C>, Either.Either<Chunk.Chunk<B>, Chunk.Chunk<A>>] => {\n  if (left.length > right.length) {\n    return [\n      pipe(left, Chunk.take(right.length), Chunk.zipWith(right, f)),\n      Either.left(pipe(left, Chunk.drop(right.length)))\n    ]\n  }\n  return [\n    pipe(left, Chunk.zipWith(pipe(right, Chunk.take(left.length)), f)),\n    Either.right(pipe(right, Chunk.drop(left.length)))\n  ]\n}\n\n// Do notation\n\n/** @internal */\nexport const Do: Stream.Stream<{}> = succeed({})\n\n/** @internal */\nexport const bind = dual<\n  <N extends string, A, B, E2, R2>(\n    tag: Exclude<N, keyof A>,\n    f: (_: NoInfer<A>) => Stream.Stream<B, E2, R2>,\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly bufferSize?: number | undefined\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<\n    { [K in keyof A | N]: K extends keyof A ? A[K] : B },\n    E | E2,\n    R | R2\n  >,\n  <A, E, R, N extends string, B, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    tag: Exclude<N, keyof A>,\n    f: (_: NoInfer<A>) => Stream.Stream<B, E2, R2>,\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly bufferSize?: number | undefined\n    }\n  ) => Stream.Stream<\n    { [K in keyof A | N]: K extends keyof A ? A[K] : B },\n    E | E2,\n    R | R2\n  >\n>((args) => typeof args[0] !== \"string\", <A, E, R, N extends string, B, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  tag: Exclude<N, keyof A>,\n  f: (_: A) => Stream.Stream<B, E2, R2>,\n  options?: {\n    readonly concurrency?: number | \"unbounded\" | undefined\n    readonly bufferSize?: number | undefined\n  }\n) =>\n  flatMap(self, (k) =>\n    map(\n      f(k),\n      (a) => ({ ...k, [tag]: a } as { [K in keyof A | N]: K extends keyof A ? A[K] : B })\n    ), options))\n\n/* @internal */\nexport const bindTo: {\n  <N extends string>(name: N): <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<{ [K in N]: A }, E, R>\n  <A, E, R, N extends string>(self: Stream.Stream<A, E, R>, name: N): Stream.Stream<{ [K in N]: A }, E, R>\n} = doNotation.bindTo<Stream.StreamTypeLambda>(map)\n\n/* @internal */\nexport const let_: {\n  <N extends string, A extends object, B>(\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Stream.Stream<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E, R>\n  <A extends object, E, R, N extends string, B>(\n    self: Stream.Stream<A, E, R>,\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): Stream.Stream<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E, R>\n} = doNotation.let_<Stream.StreamTypeLambda>(map)\n\n// Circular with Channel\n\n/** @internal */\nexport const channelToStream = <OutElem, OutErr, OutDone, Env>(\n  self: Channel.Channel<Chunk.Chunk<OutElem>, unknown, OutErr, unknown, OutDone, unknown, Env>\n): Stream.Stream<OutElem, OutErr, Env> => {\n  return new StreamImpl(self)\n}\n\n// =============================================================================\n// encoding\n// =============================================================================\n\n/** @internal */\nexport const decodeText = dual<\n  (encoding?: string) => <E, R>(self: Stream.Stream<Uint8Array, E, R>) => Stream.Stream<string, E, R>,\n  <E, R>(self: Stream.Stream<Uint8Array, E, R>, encoding?: string) => Stream.Stream<string, E, R>\n>((args) => isStream(args[0]), (self, encoding = \"utf-8\") =>\n  suspend(() => {\n    const decoder = new TextDecoder(encoding)\n    return map(self, (s) => decoder.decode(s))\n  }))\n\n/** @internal */\nexport const encodeText = <E, R>(self: Stream.Stream<string, E, R>): Stream.Stream<Uint8Array, E, R> =>\n  suspend(() => {\n    const encoder = new TextEncoder()\n    return map(self, (s) => encoder.encode(s))\n  })\n\n/** @internal */\nexport const fromEventListener = <A = unknown>(\n  target: Stream.EventListener<A>,\n  type: string,\n  options?: boolean | {\n    readonly capture?: boolean\n    readonly passive?: boolean\n    readonly once?: boolean\n    readonly bufferSize?: number | \"unbounded\" | undefined\n  } | undefined\n): Stream.Stream<A> =>\n  asyncPush<A>((emit) =>\n    Effect.acquireRelease(\n      Effect.sync(() => target.addEventListener(type, emit.single as any, options)),\n      () => Effect.sync(() => target.removeEventListener(type, emit.single, options))\n    ), { bufferSize: typeof options === \"object\" ? options.bufferSize : undefined })\n"],"names":["Cause","Chunk","Clock","Context","Deferred","Duration","Effect","Either","Equal","Exit","Fiber","FiberRef","constTrue","dual","identity","pipe","Layer","MergeDecision","Option","pipeArguments","hasProperty","PubSub","Queue","RcRef","Ref","Runtime","Schedule","Scope","HaltStrategy","TPubSub","TQueue","Tuple","channel","channelExecutor","MergeStrategy","singleProducerAsyncInput","core","doNotation","RingBuffer","_sink","DebounceState","emit","haltStrategy","Handoff","HandoffSignal","pull","SinkEndReason","ZipAllState","ZipChunksState","InternalTake","InternalTracer","StreamSymbolKey","StreamTypeId","Symbol","for","streamVariance","_R","_","_E","_A","StreamImpl","constructor","arguments","isStream","u","isEffect","DefaultChunkSize","accumulate","self","chunks","accumulateChunks","accumulator","s","readWith","onInput","input","next","appendAll","flatMap","write","onFailure","fail","onDone","void","pipeTo","toChannel","empty","acquireRelease","acquire","release","scoped","aggregate","sink","aggregateWithin","forever","schedule","filterMap","aggregateWithinEither","match","onLeft","none","onRight","some","layer","all","make","ScheduleEnd","driver","fromEffect","handoff","sinkEndReason","sinkLeftovers","scheduleDriver","consumed","endAfterEmit","handoffProducer","readWithCause","offer","when","isNonEmpty","cause","halt","end","UpstreamEnd","handoffConsumer","getAndSet","leftovers","set","zipRight","succeed","take","map","signal","_tag","OP_EMIT","elements","get","bool","OP_HALT","failCause","OP_END","reason","OP_SCHEDULE_END","unwrap","timeout","lastB","scheduledAggregator","sinkFiber","scheduleFiber","scope","forkSink","pipeToOrFail","collectElements","run","forkIn","handleSide","b","c","flatten","wasConsumed","toWrite","onNone","of","right","onSome","left","OP_UPSTREAM_END","raceWith","join","onSelfDone","sinkExit","interrupt","suspend","onOtherDone","scheduleExit","matchCauseEffect","failureOrCause","forkDaemon","onSuccess","unwrapScoped","forkScoped","as","value","queueFromBufferOptions","bufferSize","unbounded","undefined","bounded","strategy","dropping","sliding","_async","register","queue","shutdown","output","runtime","sync","runPromiseExit","canceler","resume","fromPull","asVoid","then","exit","isFailure","isInterrupted","squash","loop","done","maybeError","error","chunk","fromChannel","ensuring","asyncEffect","k","queueFromBufferOptionsPush","options","asyncPush","tap","getWith","currentScheduler","scheduler","makePush","item","isExit","isSuccess","unsafeFromArray","asyncScoped","ref","isDone","onError","repeatEffectChunkOption","branchAfter","n","f","buffering","acc","nextSize","length","b1","b2","splitAt","running","prefix","leftover","identityChannel","broadcast","maximumLag","broadcastedQueues","tuple","flattenTake","fromQueue","broadcastDynamic","toPubSub","pubsub","fromPubSub","share","idleTimeToLive","rcRef","pubsubFromOptions","Array","from","subscribe","runIntoPubSubScoped","broadcastedQueuesDynamic","buffer","capacity","bufferUnbounded","bufferDropping","bufferSliding","toQueueOfElements","process","flipCauseOption","bufferChunks","bufferChunksDropping","bufferChunksSliding","toQueue","onEnd","bufferSignal","rechunk","bufferChannel","producer","terminate","await","deferred","added","consumer","start","runScoped","catchAll","catchAllCause","catchSome","pf","getOrElse","catchSomeCause","catchTag","e","catchTags","cases","keys","Object","includes","changes","changesWith","x","y","equals","writer","last","newLast","newChunk","reduce","option","outputs","isSome","append","changesWithEffect","mapChunks","chunksWith","flattenChunks","unsome","effect","asSome","o","succeedNone","combine","that","latch","gen","$","latchL","latchR","concatMap","writeChunk","pullLeft","pullRight","unfoldEffect","combineChunks","__","unfoldChunkEffect","concat","concatAll","streams","cross","crossWith","a","a2","crossLeft","crossRight","debounce","duration","transplant","grafter","enqueue","sleep","fork","fiber","previous","state","OP_NOT_STARTED","OP_PREVIOUS","leftExit","current","rightExit","OP_CURRENT","debounceChannel","fromInput","notStarted","embedInput","die","defect","dieSync","evaluate","dieMessage","message","distributedWith","distributedWithDynamic","decide","range","size","id","key","entries","mappings","queues","reduceRight","Map","mapping","prepend","distributedWithDynamicId","newDistributedWithDynamicId","distributedWithDynamicCallback","values","forEach","queuesRef","shouldProcess","ids","update","delete","queuesLock","makeSemaphore","newQueue","finalize","endTake","withPermits","fromIterable","runForEachScoped","drain","drainFork","backgroundDied","interruptWhenDeferred","drop","r","dropped","Math","max","more","isEmpty","dropRight","identityStream","reader","elem","head","put","dropUntil","predicate","dropWhile","dropUntilEffect","succeedNow","dropWhileEffect","either","finalizer","ensuringWith","context","contextWith","contextWithEffect","mapEffectSequential","contextWithStream","execute","fromEffectOption","failSync","failCauseSync","filter","filterEffect","iterator","filterMapEffect","filterMapWhile","mapped","filterMapWhileEffect","find","findFirst","findEffect","args","switch","matchConcurrency","concurrency","flatMapParSwitchBuffer","mergeMap","out","sequential","Number","MAX_SAFE_INTEGER","mergeStrategy","BufferSliding","flattenEffect","unordered","mapOutEffectPar","mapOut","flattenExitOption","processChunk","cont","toEmit","rest","splitWhere","flattenIterables","repeated","fromAsyncIterable","iterable","asyncIterator","return","promise","repeatEffectOption","tryPromise","try","catch","result","stream","TypeError","fromChunk","fromChunkPubSub","fromChunkQueue","isShutdown","fromChunks","mapError","maxChunkSize","fromTPubSub","subscribeScoped","fromTQueue","isChunk","fromIteratorSucceed","fromIterableEffect","builder","count","push","takeBetween","fromSchedule","fromReadableStream","releaseLockOnEnd","getReader","releaseLock","cancel","read","fromReadableStreamByob","allocSize","mode","readChunkStreamByobReader","EOF","ArrayBuffer","paginateEffect","offset","Uint8Array","byteLength","newOffset","groupAdjacentBy","groupAdjacentByChunk","until","previousChunk","unsafeGet","updatedKey","additionalChunk","slice","group","nonEmptyChunk","groupAdjacent","updatedState","grouped","chunkSize","groupedWithin","collectAllN","spaced","haltWhen","poll","haltAfter","haltWhenDeferred","interleave","interleaveWith","decider","zip","leftDone","rightDone","intersperse","element","isFirst","flagResult","intersperseAffixes","middle","interruptAfter","interruptWhen","iterate","unfold","mapAccum","nextS","mapAccumEffect","mapBoth","mapChunksEffect","mapOutEffect","mapConcat","mapConcatChunk","mapConcatChunkEffect","mapConcatEffect","mapEffectPar","mapErrorCause","merge","mergeWith","onSelf","onOther","mergeAll","mergeWithTag","mergeEither","mergeLeft","mergeRight","other","Both","handler","Done","Await","mkString","never","cleanup","onStart","orDie","orDieWith","orElse","orElseEither","orElseFail","orElseIfEmpty","orElseIfEmptyChunk","orElseIfEmptyStream","orElseSucceed","paginate","paginateChunk","page","paginateChunkEffect","peel","foldSink","collectLeftover","z","tapErrorCause","partition","partitionEither","queue1","queue2","pipeThrough","pipeThroughChannel","pipeThroughChannelOrFail","chan","provideContext","provideLayer","build","env","provideService","tag","resource","provideServiceEffect","provideServiceStream","service","add","mapInputContext","provideSomeLayer","min","go","remaining","race","raceAll","winner","index","takeWhile","unsafeDone","target","rechunkProcess","StreamRechunker","rechunker","writeAll","emitIfNotEmpty","pos","refineOrDie","refineOrDieWith","repeat","repeatEither","repeatEffect","repeatEffectChunk","repeatWith","onElement","onSchedule","repeatElements","repeatElementsWith","feed","step","advance","reset","repeatValue","scheduleOutput","repeatWithSchedule","repeatEffectWithSchedule","matchEffect","nextA","retry","runDrain","runCollect","collectAll","runCount","runFold","runFoldWhileScoped","runFoldEffect","runFoldWhileScopedEffect","runFoldScoped","runFoldScopedEffect","runFoldWhile","runFoldWhileEffect","fold","foldEffect","runForEach","runForEachChunk","forEachChunk","runForEachChunkScoped","runForEachWhile","forEachWhile","runForEachWhileScoped","runHead","runIntoPubSub","runIntoQueue","runIntoQueueScoped","runIntoQueueElementsScoped","offerAll","runLast","runSum","sum","scan","scanEffect","scanReduce","scanReduceEffect","scheduleWith","zipLeft","someOrFail","someOrElse","fallback","slidingSize","stepSize","IllegalArgumentException","emitOnStreamEnd","queueSize","channelEnd","items","toChunk","lastEmitIndex","lastItems","takeRight","currentIndex","split","isNone","splitOnChunk","delimiter","delimiterIndex","inputChunk","carry","delimiterCursor","concatenated","splitLines","isInteger","taken","POSITIVE_INFINITY","takeUntil","takeUntilEffect","tapBoth","tapError","tapSink","foldCauseChannel","throttle","throttleEffect","cost","throttleEnforceEffect","units","burst","throttleShapeEffect","tokens","timestampMillis","currentTimeMillis","weight","elapsed","cycles","toMillis","available","throttled","costFn","waitCycles","delay","millis","greaterThan","zero","tick","interval","toPull","timeoutFail","onTimeout","timeoutTo","timeoutFailCause","StreamTimeout","RuntimeException","isDieType","isRuntimeException","replay","toReadableStream","toReadableStreamRuntime","defaultRuntime","toReadableStreamEffect","runSync","runFork","ReadableStream","controller","pullChunk","extend","close","None","Promise","resolve","addObserver","transduce","newChannel","upstreamDone","concatAndGet","upstreamMarker","transducer","newLeftovers","nextChannel","unfoldChunk","void_","updateService","test","whenEffect","whenCase","whenCaseEffect","withSpan","dataFirst","name","addSpanStackTrace","zipWith","zipFlatten","zipAll","zipAllWith","defaultOther","defaultSelf","onBoth","zipAllLeft","zipAllRight","defaultRight","zipAllSortedByKey","zipAllSortedByKeyWith","order","zipAllSortedByKeyLeft","zipAllSortedByKeyRight","OP_DRAIN_LEFT","leftChunk","DrainLeft","OP_DRAIN_RIGHT","rightChunk","DrainRight","OP_PULL_BOTH","concurrent","leftOption","rightOption","PullBoth","PullLeft","PullRight","OP_PULL_LEFT","OP_PULL_RIGHT","hasNext","leftIndex","rightIndex","leftTuple","rightTuple","k1","k2","compare","rightBuilder","leftBuilder","zipChunks","zipLatest","zipLatestWith","zipLatestAll","tail","first","second","pullNonEmpty","rightFiber","l","leftFiber","leftFirst","unsafeLast","latest","modify","rightLatest","leftLatest","zipWithChunks","zipWithIndex","zipWithNext","prev","curr","zipWithPrevious","zipWithPreviousAndNext","Do","bind","bindTo","let_","channelToStream","decodeText","encoding","decoder","TextDecoder","decode","encodeText","encoder","TextEncoder","encode","fromEventListener","type","addEventListener","single","removeEventListener"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3106, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}