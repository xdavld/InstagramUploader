{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"Function.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Function.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type { TypeLambda } from \"./HKT.js\"\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface FunctionTypeLambda extends TypeLambda {\n  readonly type: (a: this[\"In\"]) => this[\"Target\"]\n}\n\n/**\n * Tests if a value is a `function`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isFunction } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isFunction(isFunction), true)\n * assert.deepStrictEqual(isFunction(\"function\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isFunction = (input: unknown): input is Function => typeof input === \"function\"\n\n/**\n * Creates a function that can be used in a data-last (aka `pipe`able) or\n * data-first style.\n *\n * The first parameter to `dual` is either the arity of the uncurried function\n * or a predicate that determines if the function is being used in a data-first\n * or data-last style.\n *\n * Using the arity is the most common use case, but there are some cases where\n * you may want to use a predicate. For example, if you have a function that\n * takes an optional argument, you can use a predicate to determine if the\n * function is being used in a data-first or data-last style.\n *\n * @param arity - Either the arity of the uncurried function or a predicate\n *                which determines if the function is being used in a data-first\n *                or data-last style.\n * @param body - The definition of the uncurried function.\n *\n * @example\n * import { dual, pipe } from \"effect/Function\"\n *\n * // Exampe using arity to determine data-first or data-last style\n * const sum: {\n *   (that: number): (self: number) => number\n *   (self: number, that: number): number\n * } = dual(2, (self: number, that: number): number => self + that)\n *\n * assert.deepStrictEqual(sum(2, 3), 5)\n * assert.deepStrictEqual(pipe(2, sum(3)), 5)\n *\n * // Example using a predicate to determine data-first or data-last style\n * const sum2: {\n *   (that: number): (self: number) => number\n *   (self: number, that: number): number\n * } = dual((args) => args.length === 1, (self: number, that: number): number => self + that)\n *\n * assert.deepStrictEqual(sum(2, 3), 5)\n * assert.deepStrictEqual(pipe(2, sum(3)), 5)\n *\n * @since 2.0.0\n */\nexport const dual: {\n  /**\n   * Creates a function that can be used in a data-last (aka `pipe`able) or\n   * data-first style.\n   *\n   * The first parameter to `dual` is either the arity of the uncurried function\n   * or a predicate that determines if the function is being used in a data-first\n   * or data-last style.\n   *\n   * Using the arity is the most common use case, but there are some cases where\n   * you may want to use a predicate. For example, if you have a function that\n   * takes an optional argument, you can use a predicate to determine if the\n   * function is being used in a data-first or data-last style.\n   *\n   * @param arity - Either the arity of the uncurried function or a predicate\n   *                which determines if the function is being used in a data-first\n   *                or data-last style.\n   * @param body - The definition of the uncurried function.\n   *\n   * @example\n   * import { dual, pipe } from \"effect/Function\"\n   *\n   * // Exampe using arity to determine data-first or data-last style\n   * const sum: {\n   *   (that: number): (self: number) => number\n   *   (self: number, that: number): number\n   * } = dual(2, (self: number, that: number): number => self + that)\n   *\n   * assert.deepStrictEqual(sum(2, 3), 5)\n   * assert.deepStrictEqual(pipe(2, sum(3)), 5)\n   *\n   * // Example using a predicate to determine data-first or data-last style\n   * const sum2: {\n   *   (that: number): (self: number) => number\n   *   (self: number, that: number): number\n   * } = dual((args) => args.length === 1, (self: number, that: number): number => self + that)\n   *\n   * assert.deepStrictEqual(sum(2, 3), 5)\n   * assert.deepStrictEqual(pipe(2, sum(3)), 5)\n   *\n   * @since 2.0.0\n   */\n  <DataLast extends (...args: Array<any>) => any, DataFirst extends (...args: Array<any>) => any>(\n    arity: Parameters<DataFirst>[\"length\"],\n    body: DataFirst\n  ): DataLast & DataFirst\n  /**\n   * Creates a function that can be used in a data-last (aka `pipe`able) or\n   * data-first style.\n   *\n   * The first parameter to `dual` is either the arity of the uncurried function\n   * or a predicate that determines if the function is being used in a data-first\n   * or data-last style.\n   *\n   * Using the arity is the most common use case, but there are some cases where\n   * you may want to use a predicate. For example, if you have a function that\n   * takes an optional argument, you can use a predicate to determine if the\n   * function is being used in a data-first or data-last style.\n   *\n   * @param arity - Either the arity of the uncurried function or a predicate\n   *                which determines if the function is being used in a data-first\n   *                or data-last style.\n   * @param body - The definition of the uncurried function.\n   *\n   * @example\n   * import { dual, pipe } from \"effect/Function\"\n   *\n   * // Exampe using arity to determine data-first or data-last style\n   * const sum: {\n   *   (that: number): (self: number) => number\n   *   (self: number, that: number): number\n   * } = dual(2, (self: number, that: number): number => self + that)\n   *\n   * assert.deepStrictEqual(sum(2, 3), 5)\n   * assert.deepStrictEqual(pipe(2, sum(3)), 5)\n   *\n   * // Example using a predicate to determine data-first or data-last style\n   * const sum2: {\n   *   (that: number): (self: number) => number\n   *   (self: number, that: number): number\n   * } = dual((args) => args.length === 1, (self: number, that: number): number => self + that)\n   *\n   * assert.deepStrictEqual(sum(2, 3), 5)\n   * assert.deepStrictEqual(pipe(2, sum(3)), 5)\n   *\n   * @since 2.0.0\n   */\n  <DataLast extends (...args: Array<any>) => any, DataFirst extends (...args: Array<any>) => any>(\n    isDataFirst: (args: IArguments) => boolean,\n    body: DataFirst\n  ): DataLast & DataFirst\n} = function(arity, body) {\n  if (typeof arity === \"function\") {\n    return function() {\n      if (arity(arguments)) {\n        // @ts-expect-error\n        return body.apply(this, arguments)\n      }\n      return ((self: any) => body(self, ...arguments)) as any\n    }\n  }\n\n  switch (arity) {\n    case 0:\n    case 1:\n      throw new RangeError(`Invalid arity ${arity}`)\n\n    case 2:\n      return function(a, b) {\n        if (arguments.length >= 2) {\n          return body(a, b)\n        }\n        return function(self: any) {\n          return body(self, a)\n        }\n      }\n\n    case 3:\n      return function(a, b, c) {\n        if (arguments.length >= 3) {\n          return body(a, b, c)\n        }\n        return function(self: any) {\n          return body(self, a, b)\n        }\n      }\n\n    case 4:\n      return function(a, b, c, d) {\n        if (arguments.length >= 4) {\n          return body(a, b, c, d)\n        }\n        return function(self: any) {\n          return body(self, a, b, c)\n        }\n      }\n\n    case 5:\n      return function(a, b, c, d, e) {\n        if (arguments.length >= 5) {\n          return body(a, b, c, d, e)\n        }\n        return function(self: any) {\n          return body(self, a, b, c, d)\n        }\n      }\n\n    default:\n      return function() {\n        if (arguments.length >= arity) {\n          // @ts-expect-error\n          return body.apply(this, arguments)\n        }\n        const args = arguments\n        return function(self: any) {\n          return body(self, ...args)\n        }\n      }\n  }\n}\n/**\n * Apply a function to a given value.\n *\n * @param a - The value that the function will be applied to.\n * @param self - The function to be applied to a value.\n *\n * @example\n * import { pipe, apply } from \"effect/Function\"\n * import { length } from \"effect/String\"\n *\n * assert.deepStrictEqual(pipe(length, apply(\"hello\")), 5)\n *\n * @since 2.0.0\n */\nexport const apply = <A>(a: A) => <B>(self: (a: A) => B): B => self(a)\n\n/**\n * A lazy argument.\n *\n * @example\n * import { LazyArg, constant } from \"effect/Function\"\n *\n * const constNull: LazyArg<null> = constant(null)\n *\n * @since 2.0.0\n */\nexport interface LazyArg<A> {\n  (): A\n}\n\n/**\n * @example\n * import { FunctionN } from \"effect/Function\"\n *\n * const sum: FunctionN<[number, number], number> = (a, b) => a + b\n *\n * @since 2.0.0\n */\nexport interface FunctionN<A extends ReadonlyArray<unknown>, B> {\n  (...args: A): B\n}\n\n/**\n * The identity function, i.e. A function that returns its input argument.\n *\n * @param a - The input argument.\n *\n * @example\n * import { identity } from \"effect/Function\"\n *\n * assert.deepStrictEqual(identity(5), 5)\n *\n * @since 2.0.0\n */\nexport const identity = <A>(a: A): A => a\n\n/**\n * A function that ensures that the type of an expression matches some type,\n * without changing the resulting type of that expression.\n *\n * @example\n * import { satisfies } from \"effect/Function\"\n *\n * const test1 = satisfies<number>()(5 as const)\n *     //^? const test: 5\n *     // @ts-expect-error\n * const test2 = satisfies<string>()(5)\n *     //^? Argument of type 'number' is not assignable to parameter of type 'string'\n *\n * assert.deepStrictEqual(satisfies<number>()(5), 5)\n *\n * @since 2.0.0\n */\nexport const satisfies = <A>() => <B extends A>(b: B) => b\n\n/**\n * Casts the result to the specified type.\n *\n * @param a - The value to be casted to the target type.\n *\n * @example\n * import { unsafeCoerce, identity } from \"effect/Function\"\n *\n * assert.deepStrictEqual(unsafeCoerce, identity)\n *\n * @since 2.0.0\n */\nexport const unsafeCoerce: <A, B>(a: A) => B = identity as any\n\n/**\n * Creates a constant value that never changes.\n *\n * This is useful when you want to pass a value to a higher-order function (a function that takes another function as its argument)\n * and want that inner function to always use the same value, no matter how many times it is called.\n *\n * @param value - The constant value to be returned.\n *\n * @example\n * import { constant } from \"effect/Function\"\n *\n * const constNull = constant(null)\n *\n * assert.deepStrictEqual(constNull(), null)\n * assert.deepStrictEqual(constNull(), null)\n *\n * @since 2.0.0\n */\nexport const constant = <A>(value: A): LazyArg<A> => () => value\n\n/**\n * A thunk that returns always `true`.\n *\n * @example\n * import { constTrue } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constTrue(), true)\n *\n * @since 2.0.0\n */\nexport const constTrue: LazyArg<boolean> = constant(true)\n\n/**\n * A thunk that returns always `false`.\n *\n * @example\n * import { constFalse } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constFalse(), false)\n *\n * @since 2.0.0\n */\nexport const constFalse: LazyArg<boolean> = constant(false)\n\n/**\n * A thunk that returns always `null`.\n *\n * @example\n * import { constNull } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constNull(), null)\n *\n * @since 2.0.0\n */\nexport const constNull: LazyArg<null> = constant(null)\n\n/**\n * A thunk that returns always `undefined`.\n *\n * @example\n * import { constUndefined } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constUndefined(), undefined)\n *\n * @since 2.0.0\n */\nexport const constUndefined: LazyArg<undefined> = constant(undefined)\n\n/**\n * A thunk that returns always `void`.\n *\n * @example\n * import { constVoid } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constVoid(), undefined)\n *\n * @since 2.0.0\n */\nexport const constVoid: LazyArg<void> = constUndefined\n\n/**\n * Reverses the order of arguments for a curried function.\n *\n * @param f - A curried function that takes multiple arguments.\n *\n * @example\n * import { flip } from \"effect/Function\"\n *\n * const f = (a: number) => (b: string) => a - b.length\n *\n * assert.deepStrictEqual(flip(f)('aaa')(2), -1)\n *\n * @since 2.0.0\n */\nexport const flip = <A extends Array<unknown>, B extends Array<unknown>, C>(\n  f: (...a: A) => (...b: B) => C\n): (...b: B) => (...a: A) => C =>\n(...b) =>\n(...a) => f(...a)(...b)\n\n/**\n * Composes two functions, `ab` and `bc` into a single function that takes in an argument `a` of type `A` and returns a result of type `C`.\n * The result is obtained by first applying the `ab` function to `a` and then applying the `bc` function to the result of `ab`.\n *\n * @param ab - A function that maps from `A` to `B`.\n * @param bc - A function that maps from `B` to `C`.\n *\n * @example\n * import { compose } from \"effect/Function\"\n *\n * const increment = (n: number) => n + 1;\n * const square = (n: number) => n * n;\n *\n * assert.strictEqual(compose(increment, square)(2), 9);\n *\n * @since 2.0.0\n */\nexport const compose: {\n  /**\n   * Composes two functions, `ab` and `bc` into a single function that takes in an argument `a` of type `A` and returns a result of type `C`.\n   * The result is obtained by first applying the `ab` function to `a` and then applying the `bc` function to the result of `ab`.\n   *\n   * @param ab - A function that maps from `A` to `B`.\n   * @param bc - A function that maps from `B` to `C`.\n   *\n   * @example\n   * import { compose } from \"effect/Function\"\n   *\n   * const increment = (n: number) => n + 1;\n   * const square = (n: number) => n * n;\n   *\n   * assert.strictEqual(compose(increment, square)(2), 9);\n   *\n   * @since 2.0.0\n   */\n  <B, C>(bc: (b: B) => C): <A>(self: (a: A) => B) => (a: A) => C\n  /**\n   * Composes two functions, `ab` and `bc` into a single function that takes in an argument `a` of type `A` and returns a result of type `C`.\n   * The result is obtained by first applying the `ab` function to `a` and then applying the `bc` function to the result of `ab`.\n   *\n   * @param ab - A function that maps from `A` to `B`.\n   * @param bc - A function that maps from `B` to `C`.\n   *\n   * @example\n   * import { compose } from \"effect/Function\"\n   *\n   * const increment = (n: number) => n + 1;\n   * const square = (n: number) => n * n;\n   *\n   * assert.strictEqual(compose(increment, square)(2), 9);\n   *\n   * @since 2.0.0\n   */\n  <A, B, C>(self: (a: A) => B, bc: (b: B) => C): (a: A) => C\n} = dual(2, <A, B, C>(ab: (a: A) => B, bc: (b: B) => C): (a: A) => C => (a) => bc(ab(a)))\n\n/**\n * The `absurd` function is a stub for cases where a value of type `never` is encountered in your code,\n * meaning that it should be impossible for this code to be executed.\n *\n * This function is particularly when it's necessary to specify that certain cases are impossible.\n *\n * @since 2.0.0\n */\nexport const absurd = <A>(_: never): A => {\n  throw new Error(\"Called `absurd` function which should be uncallable\")\n}\n\n/**\n * Creates a tupled version of this function: instead of `n` arguments, it accepts a single tuple argument.\n *\n * @example\n * import { tupled } from \"effect/Function\"\n *\n * const sumTupled = tupled((x: number, y: number): number => x + y)\n *\n * assert.deepStrictEqual(sumTupled([1, 2]), 3)\n *\n * @since 2.0.0\n */\nexport const tupled = <A extends ReadonlyArray<unknown>, B>(f: (...a: A) => B): (a: A) => B => (a) => f(...a)\n\n/**\n * Inverse function of `tupled`\n *\n * @example\n * import { untupled } from \"effect/Function\"\n *\n * const getFirst = untupled(<A, B>(tuple: [A, B]): A => tuple[0])\n *\n * assert.deepStrictEqual(getFirst(1, 2), 1)\n *\n * @since 2.0.0\n */\nexport const untupled = <A extends ReadonlyArray<unknown>, B>(f: (a: A) => B): (...a: A) => B => (...a) => f(a)\n\n/**\n * Pipes the value of an expression into a pipeline of functions.\n *\n * This is useful in combination with data-last functions as a simulation of methods:\n *\n * ```\n * as.map(f).filter(g) -> pipe(as, map(f), filter(g))\n * ```\n *\n * @example\n * import { pipe } from \"effect/Function\"\n * // Alternatively, you can use the following import syntax, as `pipe` is also conveniently exported from the `effect` entry point:\n * // import { pipe } from \"effect\"\n *\n * const length = (s: string): number => s.length\n * const double = (n: number): number => n * 2\n * const decrement = (n: number): number => n - 1\n *\n * assert.deepStrictEqual(pipe(length(\"hello\"), double, decrement), 9)\n *\n * @since 2.0.0\n */\nexport function pipe<A>(a: A): A\nexport function pipe<A, B = never>(a: A, ab: (a: A) => B): B\nexport function pipe<A, B = never, C = never>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C\n): C\nexport function pipe<A, B = never, C = never, D = never>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D\n): D\nexport function pipe<A, B = never, C = never, D = never, E = never>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E\n): E\nexport function pipe<A, B = never, C = never, D = never, E = never, F = never>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F\n): F\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G\n): G\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H\n): H\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I\n): I\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J\n): J\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K\n): K\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L\n): L\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never,\n  M = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M\n): M\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never,\n  M = never,\n  N = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N\n): N\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never,\n  M = never,\n  N = never,\n  O = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O\n): O\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never,\n  M = never,\n  N = never,\n  O = never,\n  P = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O,\n  op: (o: O) => P\n): P\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never,\n  M = never,\n  N = never,\n  O = never,\n  P = never,\n  Q = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O,\n  op: (o: O) => P,\n  pq: (p: P) => Q\n): Q\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never,\n  M = never,\n  N = never,\n  O = never,\n  P = never,\n  Q = never,\n  R = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O,\n  op: (o: O) => P,\n  pq: (p: P) => Q,\n  qr: (q: Q) => R\n): R\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never,\n  M = never,\n  N = never,\n  O = never,\n  P = never,\n  Q = never,\n  R = never,\n  S = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O,\n  op: (o: O) => P,\n  pq: (p: P) => Q,\n  qr: (q: Q) => R,\n  rs: (r: R) => S\n): S\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never,\n  M = never,\n  N = never,\n  O = never,\n  P = never,\n  Q = never,\n  R = never,\n  S = never,\n  T = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O,\n  op: (o: O) => P,\n  pq: (p: P) => Q,\n  qr: (q: Q) => R,\n  rs: (r: R) => S,\n  st: (s: S) => T\n): T\nexport function pipe(\n  a: unknown,\n  ab?: Function,\n  bc?: Function,\n  cd?: Function,\n  de?: Function,\n  ef?: Function,\n  fg?: Function,\n  gh?: Function,\n  hi?: Function\n): unknown {\n  switch (arguments.length) {\n    case 1:\n      return a\n    case 2:\n      return ab!(a)\n    case 3:\n      return bc!(ab!(a))\n    case 4:\n      return cd!(bc!(ab!(a)))\n    case 5:\n      return de!(cd!(bc!(ab!(a))))\n    case 6:\n      return ef!(de!(cd!(bc!(ab!(a)))))\n    case 7:\n      return fg!(ef!(de!(cd!(bc!(ab!(a))))))\n    case 8:\n      return gh!(fg!(ef!(de!(cd!(bc!(ab!(a)))))))\n    case 9:\n      return hi!(gh!(fg!(ef!(de!(cd!(bc!(ab!(a))))))))\n    default: {\n      let ret = arguments[0]\n      for (let i = 1; i < arguments.length; i++) {\n        ret = arguments[i](ret)\n      }\n      return ret\n    }\n  }\n}\n\n/**\n * Performs left-to-right function composition. The first argument may have any arity, the remaining arguments must be unary.\n *\n * See also [`pipe`](#pipe).\n *\n * @example\n * import { flow } from \"effect/Function\"\n *\n * const len = (s: string): number => s.length\n * const double = (n: number): number => n * 2\n *\n * const f = flow(len, double)\n *\n * assert.strictEqual(f('aaa'), 6)\n *\n * @since 2.0.0\n */\nexport function flow<A extends ReadonlyArray<unknown>, B = never>(\n  ab: (...a: A) => B\n): (...a: A) => B\nexport function flow<A extends ReadonlyArray<unknown>, B = never, C = never>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C\n): (...a: A) => C\nexport function flow<\n  A extends ReadonlyArray<unknown>,\n  B = never,\n  C = never,\n  D = never\n>(ab: (...a: A) => B, bc: (b: B) => C, cd: (c: C) => D): (...a: A) => D\nexport function flow<\n  A extends ReadonlyArray<unknown>,\n  B = never,\n  C = never,\n  D = never,\n  E = never\n>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E\n): (...a: A) => E\nexport function flow<\n  A extends ReadonlyArray<unknown>,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never\n>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F\n): (...a: A) => F\nexport function flow<\n  A extends ReadonlyArray<unknown>,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never\n>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G\n): (...a: A) => G\nexport function flow<\n  A extends ReadonlyArray<unknown>,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never\n>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H\n): (...a: A) => H\nexport function flow<\n  A extends ReadonlyArray<unknown>,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never\n>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I\n): (...a: A) => I\nexport function flow<\n  A extends ReadonlyArray<unknown>,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never\n>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J\n): (...a: A) => J\nexport function flow(\n  ab: Function,\n  bc?: Function,\n  cd?: Function,\n  de?: Function,\n  ef?: Function,\n  fg?: Function,\n  gh?: Function,\n  hi?: Function,\n  ij?: Function\n): unknown {\n  switch (arguments.length) {\n    case 1:\n      return ab\n    case 2:\n      return function(this: unknown) {\n        return bc!(ab.apply(this, arguments))\n      }\n    case 3:\n      return function(this: unknown) {\n        return cd!(bc!(ab.apply(this, arguments)))\n      }\n    case 4:\n      return function(this: unknown) {\n        return de!(cd!(bc!(ab.apply(this, arguments))))\n      }\n    case 5:\n      return function(this: unknown) {\n        return ef!(de!(cd!(bc!(ab.apply(this, arguments)))))\n      }\n    case 6:\n      return function(this: unknown) {\n        return fg!(ef!(de!(cd!(bc!(ab.apply(this, arguments))))))\n      }\n    case 7:\n      return function(this: unknown) {\n        return gh!(fg!(ef!(de!(cd!(bc!(ab.apply(this, arguments)))))))\n      }\n    case 8:\n      return function(this: unknown) {\n        return hi!(gh!(fg!(ef!(de!(cd!(bc!(ab.apply(this, arguments))))))))\n      }\n    case 9:\n      return function(this: unknown) {\n        return ij!(hi!(gh!(fg!(ef!(de!(cd!(bc!(ab.apply(this, arguments)))))))))\n      }\n  }\n  return\n}\n\n/**\n * Type hole simulation.\n *\n * @since 2.0.0\n */\nexport const hole: <T>() => T = unsafeCoerce(absurd)\n\n/**\n * The SK combinator, also known as the \"S-K combinator\" or \"S-combinator\", is a fundamental combinator in the\n * lambda calculus and the SKI combinator calculus.\n *\n * This function is useful for discarding the first argument passed to it and returning the second argument.\n *\n * @param _ - The first argument to be discarded.\n * @param b - The second argument to be returned.\n *\n * @example\n * import { SK } from \"effect/Function\";\n *\n * assert.deepStrictEqual(SK(0, \"hello\"), \"hello\")\n *\n * @since 2.0.0\n */\nexport const SK = <A, B>(_: A, b: B): B => b\n"],"names":["isFunction","input","dual","arity","body","arguments","apply","self","RangeError","a","b","length","c","d","e","args","identity","satisfies","unsafeCoerce","constant","value","constTrue","constFalse","constNull","constUndefined","undefined","constVoid","flip","f","compose","ab","bc","absurd","_","Error","tupled","untupled","pipe","cd","de","ef","fg","gh","hi","ret","i","flow","ij","hole","SK"],"mappings":"AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcO,MAAMA,UAAU,IAAIC,KAAc,GAAwB,OAAOA,KAAK,KAAK,UAAU;AA2CrF,MAAMC,IAAI,GA2Fb,SAAAA,AAASC,KAAK,EAAEC,IAAI;IACtB,IAAI,OAAOD,KAAK,KAAK,UAAU,EAAE;QAC/B,OAAO;YACL,IAAIA,KAAK,CAACE,SAAS,CAAC,EAAE;gBACpB,mBAAA;gBACA,OAAOD,IAAI,CAACE,KAAK,CAAC,IAAI,EAAED,SAAS,CAAC;YACpC;YACA,QAASE,IAAS,GAAKH,IAAI,CAACG,IAAI,EAAE,GAAGF,SAAS,CAAC;QACjD,CAAC;IACH;IAEA,OAAQF,KAAK;QACX,KAAK,CAAC;QACN,KAAK,CAAC;YACJ,MAAM,IAAIK,UAAU,CAAC,CAAA,cAAA,EAAiBL,KAAK,EAAE,CAAC;QAEhD,KAAK,CAAC;YACJ,OAAO,SAASM,CAAC,EAAEC,CAAC;gBAClB,IAAIL,SAAS,CAACM,MAAM,IAAI,CAAC,EAAE;oBACzB,OAAOP,IAAI,CAACK,CAAC,EAAEC,CAAC,CAAC;gBACnB;gBACA,OAAO,SAASH,IAAS;oBACvB,OAAOH,IAAI,CAACG,IAAI,EAAEE,CAAC,CAAC;gBACtB,CAAC;YACH,CAAC;QAEH,KAAK,CAAC;YACJ,OAAO,SAASA,CAAC,EAAEC,CAAC,EAAEE,CAAC;gBACrB,IAAIP,SAAS,CAACM,MAAM,IAAI,CAAC,EAAE;oBACzB,OAAOP,IAAI,CAACK,CAAC,EAAEC,CAAC,EAAEE,CAAC,CAAC;gBACtB;gBACA,OAAO,SAASL,IAAS;oBACvB,OAAOH,IAAI,CAACG,IAAI,EAAEE,CAAC,EAAEC,CAAC,CAAC;gBACzB,CAAC;YACH,CAAC;QAEH,KAAK,CAAC;YACJ,OAAO,SAASD,CAAC,EAAEC,CAAC,EAAEE,CAAC,EAAEC,CAAC;gBACxB,IAAIR,SAAS,CAACM,MAAM,IAAI,CAAC,EAAE;oBACzB,OAAOP,IAAI,CAACK,CAAC,EAAEC,CAAC,EAAEE,CAAC,EAAEC,CAAC,CAAC;gBACzB;gBACA,OAAO,SAASN,IAAS;oBACvB,OAAOH,IAAI,CAACG,IAAI,EAAEE,CAAC,EAAEC,CAAC,EAAEE,CAAC,CAAC;gBAC5B,CAAC;YACH,CAAC;QAEH,KAAK,CAAC;YACJ,OAAO,SAASH,CAAC,EAAEC,CAAC,EAAEE,CAAC,EAAEC,CAAC,EAAEC,CAAC;gBAC3B,IAAIT,SAAS,CAACM,MAAM,IAAI,CAAC,EAAE;oBACzB,OAAOP,IAAI,CAACK,CAAC,EAAEC,CAAC,EAAEE,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;gBAC5B;gBACA,OAAO,SAASP,IAAS;oBACvB,OAAOH,IAAI,CAACG,IAAI,EAAEE,CAAC,EAAEC,CAAC,EAAEE,CAAC,EAAEC,CAAC,CAAC;gBAC/B,CAAC;YACH,CAAC;QAEH;YACE,OAAO;gBACL,IAAIR,SAAS,CAACM,MAAM,IAAIR,KAAK,EAAE;oBAC7B,mBAAA;oBACA,OAAOC,IAAI,CAACE,KAAK,CAAC,IAAI,EAAED,SAAS,CAAC;gBACpC;gBACA,MAAMU,IAAI,GAAGV,SAAS;gBACtB,OAAO,SAASE,IAAS;oBACvB,OAAOH,IAAI,CAACG,IAAI,EAAE,GAAGQ,IAAI,CAAC;gBAC5B,CAAC;YACH,CAAC;IACL;AACF,CAAC;AAeM,MAAMT,KAAK,IAAOG,CAAI,IAASF,IAAiB,GAAQA,IAAI,CAACE,CAAC,CAAC;AAwC/D,MAAMO,QAAQ,IAAOP,CAAI,GAAQA,CAAC;AAmBlC,MAAMQ,SAAS,GAAGA,CAAA,IAAuBP,CAAI,GAAKA,CAAC;AAcnD,MAAMQ,YAAY,GAAsBF,QAAe;AAoBvD,MAAMG,QAAQ,IAAOC,KAAQ,GAAiB,IAAMA,KAAK;AAYzD,MAAMC,SAAS,GAAA,WAAA,GAAqBF,QAAQ,CAAC,IAAI,CAAC;AAYlD,MAAMG,UAAU,GAAA,WAAA,GAAqBH,QAAQ,CAAC,KAAK,CAAC;AAYpD,MAAMI,SAAS,GAAA,WAAA,GAAkBJ,QAAQ,CAAC,IAAI,CAAC;AAY/C,MAAMK,cAAc,GAAA,WAAA,GAAuBL,QAAQ,CAACM,SAAS,CAAC;AAY9D,MAAMC,SAAS,GAAkBF,cAAc;AAgB/C,MAAMG,IAAI,IACfC,CAA8B,GAEhC,CAAC,GAAGlB,CAAC,GACL,CAAC,GAAGD,CAAC,GAAKmB,CAAC,CAAC,GAAGnB,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC;AAmBhB,MAAMmB,OAAO,GAAA,WAAA,GAqChB3B,IAAI,CAAC,CAAC,EAAE,CAAU4B,EAAe,EAAEC,EAAe,IAAmBtB,CAAC,GAAKsB,EAAE,CAACD,EAAE,CAACrB,CAAC,CAAC,CAAC,CAAC;AAUlF,MAAMuB,MAAM,IAAOC,CAAQ,IAAO;IACvC,MAAM,IAAIC,KAAK,CAAC,qDAAqD,CAAC;AACxE,CAAC;AAcM,MAAMC,MAAM,IAAyCP,CAAiB,IAAmBnB,CAAC,GAAKmB,CAAC,CAAC,GAAGnB,CAAC,CAAC;AActG,MAAM2B,QAAQ,IAAyCR,CAAc,GAAqB,CAAC,GAAGnB,CAAC,GAAKmB,CAAC,CAACnB,CAAC,CAAC;AAwdzG,SAAU4B,IAAIA,CAClB5B,CAAU,EACVqB,EAAa,EACbC,EAAa,EACbO,EAAa,EACbC,EAAa,EACbC,EAAa,EACbC,EAAa,EACbC,EAAa,EACbC,EAAa;IAEb,OAAQtC,SAAS,CAACM,MAAM;QACtB,KAAK,CAAC;YACJ,OAAOF,CAAC;QACV,KAAK,CAAC;YACJ,OAAOqB,EAAG,CAACrB,CAAC,CAAC;QACf,KAAK,CAAC;YACJ,OAAOsB,EAAG,CAACD,EAAG,CAACrB,CAAC,CAAC,CAAC;QACpB,KAAK,CAAC;YACJ,OAAO6B,EAAG,CAACP,EAAG,CAACD,EAAG,CAACrB,CAAC,CAAC,CAAC,CAAC;QACzB,KAAK,CAAC;YACJ,OAAO8B,EAAG,CAACD,EAAG,CAACP,EAAG,CAACD,EAAG,CAACrB,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9B,KAAK,CAAC;YACJ,OAAO+B,EAAG,CAACD,EAAG,CAACD,EAAG,CAACP,EAAG,CAACD,EAAG,CAACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnC,KAAK,CAAC;YACJ,OAAOgC,EAAG,CAACD,EAAG,CAACD,EAAG,CAACD,EAAG,CAACP,EAAG,CAACD,EAAG,CAACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACxC,KAAK,CAAC;YACJ,OAAOiC,EAAG,CAACD,EAAG,CAACD,EAAG,CAACD,EAAG,CAACD,EAAG,CAACP,EAAG,CAACD,EAAG,CAACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7C,KAAK,CAAC;YACJ,OAAOkC,EAAG,CAACD,EAAG,CAACD,EAAG,CAACD,EAAG,CAACD,EAAG,CAACD,EAAG,CAACP,EAAG,CAACD,EAAG,CAACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAClD;YAAS;gBACP,IAAImC,GAAG,GAAGvC,SAAS,CAAC,CAAC,CAAC;gBACtB,IAAK,IAAIwC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxC,SAAS,CAACM,MAAM,EAAEkC,CAAC,EAAE,CAAE;oBACzCD,GAAG,GAAGvC,SAAS,CAACwC,CAAC,CAAC,CAACD,GAAG,CAAC;gBACzB;gBACA,OAAOA,GAAG;YACZ;IACF;AACF;AAsIM,SAAUE,IAAIA,CAClBhB,EAAY,EACZC,EAAa,EACbO,EAAa,EACbC,EAAa,EACbC,EAAa,EACbC,EAAa,EACbC,EAAa,EACbC,EAAa,EACbI,EAAa;IAEb,OAAQ1C,SAAS,CAACM,MAAM;QACtB,KAAK,CAAC;YACJ,OAAOmB,EAAE;QACX,KAAK,CAAC;YACJ,OAAO;gBACL,OAAOC,EAAG,CAACD,EAAE,CAACxB,KAAK,CAAC,IAAI,EAAED,SAAS,CAAC,CAAC;YACvC,CAAC;QACH,KAAK,CAAC;YACJ,OAAO;gBACL,OAAOiC,EAAG,CAACP,EAAG,CAACD,EAAE,CAACxB,KAAK,CAAC,IAAI,EAAED,SAAS,CAAC,CAAC,CAAC;YAC5C,CAAC;QACH,KAAK,CAAC;YACJ,OAAO;gBACL,OAAOkC,EAAG,CAACD,EAAG,CAACP,EAAG,CAACD,EAAE,CAACxB,KAAK,CAAC,IAAI,EAAED,SAAS,CAAC,CAAC,CAAC,CAAC;YACjD,CAAC;QACH,KAAK,CAAC;YACJ,OAAO;gBACL,OAAOmC,EAAG,CAACD,EAAG,CAACD,EAAG,CAACP,EAAG,CAACD,EAAE,CAACxB,KAAK,CAAC,IAAI,EAAED,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YACtD,CAAC;QACH,KAAK,CAAC;YACJ,OAAO;gBACL,OAAOoC,EAAG,CAACD,EAAG,CAACD,EAAG,CAACD,EAAG,CAACP,EAAG,CAACD,EAAE,CAACxB,KAAK,CAAC,IAAI,EAAED,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3D,CAAC;QACH,KAAK,CAAC;YACJ,OAAO;gBACL,OAAOqC,EAAG,CAACD,EAAG,CAACD,EAAG,CAACD,EAAG,CAACD,EAAG,CAACP,EAAG,CAACD,EAAE,CAACxB,KAAK,CAAC,IAAI,EAAED,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChE,CAAC;QACH,KAAK,CAAC;YACJ,OAAO;gBACL,OAAOsC,EAAG,CAACD,EAAG,CAACD,EAAG,CAACD,EAAG,CAACD,EAAG,CAACD,EAAG,CAACP,EAAG,CAACD,EAAE,CAACxB,KAAK,CAAC,IAAI,EAAED,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACrE,CAAC;QACH,KAAK,CAAC;YACJ,OAAO;gBACL,OAAO0C,EAAG,CAACJ,EAAG,CAACD,EAAG,CAACD,EAAG,CAACD,EAAG,CAACD,EAAG,CAACD,EAAG,CAACP,EAAG,CAACD,EAAE,CAACxB,KAAK,CAAC,IAAI,EAAED,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1E,CAAC;IACL;IACA;AACF;AAOO,MAAM2C,IAAI,GAAA,WAAA,GAAe9B,YAAY,CAACc,MAAM,CAAC;AAkB7C,MAAMiB,EAAE,GAAGA,CAAOhB,CAAI,EAAEvB,CAAI,GAAQA,CAAC","ignoreList":[0]}},
    {"offset": {"line": 195, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 201, "column": 0}, "map": {"version":3,"file":"Predicate.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Predicate.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport { dual, isFunction as isFunction_ } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport type { TupleOf, TupleOfAtLeast } from \"./Types.js\"\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Predicate<in A> {\n  (a: A): boolean\n}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface PredicateTypeLambda extends TypeLambda {\n  readonly type: Predicate<this[\"Target\"]>\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Refinement<in A, out B extends A> {\n  (a: A): a is B\n}\n\n/**\n * @since 3.6.0\n * @category type-level\n */\nexport declare namespace Predicate {\n  /**\n   * @since 3.6.0\n   * @category type-level\n   */\n  export type In<T extends Any> = [T] extends [Predicate<infer _A>] ? _A : never\n  /**\n   * @since 3.6.0\n   * @category type-level\n   */\n  export type Any = Predicate<any>\n}\n\n/**\n * @since 3.6.0\n * @category type-level\n */\nexport declare namespace Refinement {\n  /**\n   * @since 3.6.0\n   * @category type-level\n   */\n  export type In<T extends Any> = [T] extends [Refinement<infer _A, infer _>] ? _A : never\n  /**\n   * @since 3.6.0\n   * @category type-level\n   */\n  export type Out<T extends Any> = [T] extends [Refinement<infer _, infer _B>] ? _B : never\n  /**\n   * @since 3.6.0\n   * @category type-level\n   */\n  export type Any = Refinement<any, any>\n}\n\n/**\n * Given a `Predicate<A>` returns a `Predicate<B>`\n *\n * @param self - the `Predicate<A>` to be transformed to `Predicate<B>`.\n * @param f - a function to transform `B` to `A`.\n *\n * @example\n * import { Predicate, Number } from \"effect\"\n *\n * const minLength3 = Predicate.mapInput(Number.greaterThan(2), (s: string) => s.length)\n *\n * assert.deepStrictEqual(minLength3(\"a\"), false)\n * assert.deepStrictEqual(minLength3(\"aa\"), false)\n * assert.deepStrictEqual(minLength3(\"aaa\"), true)\n * assert.deepStrictEqual(minLength3(\"aaaa\"), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const mapInput: {\n  /**\n   * Given a `Predicate<A>` returns a `Predicate<B>`\n   *\n   * @param self - the `Predicate<A>` to be transformed to `Predicate<B>`.\n   * @param f - a function to transform `B` to `A`.\n   *\n   * @example\n   * import { Predicate, Number } from \"effect\"\n   *\n   * const minLength3 = Predicate.mapInput(Number.greaterThan(2), (s: string) => s.length)\n   *\n   * assert.deepStrictEqual(minLength3(\"a\"), false)\n   * assert.deepStrictEqual(minLength3(\"aa\"), false)\n   * assert.deepStrictEqual(minLength3(\"aaa\"), true)\n   * assert.deepStrictEqual(minLength3(\"aaaa\"), true)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <B, A>(f: (b: B) => A): (self: Predicate<A>) => Predicate<B>\n  /**\n   * Given a `Predicate<A>` returns a `Predicate<B>`\n   *\n   * @param self - the `Predicate<A>` to be transformed to `Predicate<B>`.\n   * @param f - a function to transform `B` to `A`.\n   *\n   * @example\n   * import { Predicate, Number } from \"effect\"\n   *\n   * const minLength3 = Predicate.mapInput(Number.greaterThan(2), (s: string) => s.length)\n   *\n   * assert.deepStrictEqual(minLength3(\"a\"), false)\n   * assert.deepStrictEqual(minLength3(\"aa\"), false)\n   * assert.deepStrictEqual(minLength3(\"aaa\"), true)\n   * assert.deepStrictEqual(minLength3(\"aaaa\"), true)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A, B>(self: Predicate<A>, f: (b: B) => A): Predicate<B>\n} = dual(2, <A, B>(self: Predicate<A>, f: (b: B) => A): Predicate<B> => (b) => self(f(b)))\n\n/**\n * Determine if an `Array` is a tuple with exactly `N` elements, narrowing down the type to `TupleOf`.\n *\n * An `Array` is considered to be a `TupleOf` if its length is exactly `N`.\n *\n * @param self - The `Array` to check.\n * @param n - The exact number of elements that the `Array` should have to be considered a `TupleOf`.\n *\n * @example\n * import { isTupleOf } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTupleOf([1, 2, 3], 3), true);\n * assert.deepStrictEqual(isTupleOf([1, 2, 3], 2), false);\n * assert.deepStrictEqual(isTupleOf([1, 2, 3], 4), false);\n *\n * const arr: number[] = [1, 2, 3];\n * if (isTupleOf(arr, 3)) {\n *   console.log(arr);\n *   // ^? [number, number, number]\n * }\n *\n * @category guards\n * @since 3.3.0\n */\nexport const isTupleOf: {\n  /**\n   * Determine if an `Array` is a tuple with exactly `N` elements, narrowing down the type to `TupleOf`.\n   *\n   * An `Array` is considered to be a `TupleOf` if its length is exactly `N`.\n   *\n   * @param self - The `Array` to check.\n   * @param n - The exact number of elements that the `Array` should have to be considered a `TupleOf`.\n   *\n   * @example\n   * import { isTupleOf } from \"effect/Predicate\"\n   *\n   * assert.deepStrictEqual(isTupleOf([1, 2, 3], 3), true);\n   * assert.deepStrictEqual(isTupleOf([1, 2, 3], 2), false);\n   * assert.deepStrictEqual(isTupleOf([1, 2, 3], 4), false);\n   *\n   * const arr: number[] = [1, 2, 3];\n   * if (isTupleOf(arr, 3)) {\n   *   console.log(arr);\n   *   // ^? [number, number, number]\n   * }\n   *\n   * @category guards\n   * @since 3.3.0\n   */\n  <N extends number>(n: N): <T>(self: ReadonlyArray<T>) => self is TupleOf<N, T>\n  /**\n   * Determine if an `Array` is a tuple with exactly `N` elements, narrowing down the type to `TupleOf`.\n   *\n   * An `Array` is considered to be a `TupleOf` if its length is exactly `N`.\n   *\n   * @param self - The `Array` to check.\n   * @param n - The exact number of elements that the `Array` should have to be considered a `TupleOf`.\n   *\n   * @example\n   * import { isTupleOf } from \"effect/Predicate\"\n   *\n   * assert.deepStrictEqual(isTupleOf([1, 2, 3], 3), true);\n   * assert.deepStrictEqual(isTupleOf([1, 2, 3], 2), false);\n   * assert.deepStrictEqual(isTupleOf([1, 2, 3], 4), false);\n   *\n   * const arr: number[] = [1, 2, 3];\n   * if (isTupleOf(arr, 3)) {\n   *   console.log(arr);\n   *   // ^? [number, number, number]\n   * }\n   *\n   * @category guards\n   * @since 3.3.0\n   */\n  <T, N extends number>(self: ReadonlyArray<T>, n: N): self is TupleOf<N, T>\n} = dual(2, <T, N extends number>(self: ReadonlyArray<T>, n: N): self is TupleOf<N, T> => self.length === n)\n\n/**\n * Determine if an `Array` is a tuple with at least `N` elements, narrowing down the type to `TupleOfAtLeast`.\n *\n * An `Array` is considered to be a `TupleOfAtLeast` if its length is at least `N`.\n *\n * @param self - The `Array` to check.\n * @param n - The minimum number of elements that the `Array` should have to be considered a `TupleOfAtLeast`.\n *\n * @example\n * import { isTupleOfAtLeast } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 3), true);\n * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 2), true);\n * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 4), false);\n *\n * const arr: number[] = [1, 2, 3, 4];\n * if (isTupleOfAtLeast(arr, 3)) {\n *   console.log(arr);\n *   // ^? [number, number, number, ...number[]]\n * }\n *\n * @category guards\n * @since 3.3.0\n */\nexport const isTupleOfAtLeast: {\n  /**\n   * Determine if an `Array` is a tuple with at least `N` elements, narrowing down the type to `TupleOfAtLeast`.\n   *\n   * An `Array` is considered to be a `TupleOfAtLeast` if its length is at least `N`.\n   *\n   * @param self - The `Array` to check.\n   * @param n - The minimum number of elements that the `Array` should have to be considered a `TupleOfAtLeast`.\n   *\n   * @example\n   * import { isTupleOfAtLeast } from \"effect/Predicate\"\n   *\n   * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 3), true);\n   * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 2), true);\n   * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 4), false);\n   *\n   * const arr: number[] = [1, 2, 3, 4];\n   * if (isTupleOfAtLeast(arr, 3)) {\n   *   console.log(arr);\n   *   // ^? [number, number, number, ...number[]]\n   * }\n   *\n   * @category guards\n   * @since 3.3.0\n   */\n  <N extends number>(n: N): <T>(self: ReadonlyArray<T>) => self is TupleOfAtLeast<N, T>\n  /**\n   * Determine if an `Array` is a tuple with at least `N` elements, narrowing down the type to `TupleOfAtLeast`.\n   *\n   * An `Array` is considered to be a `TupleOfAtLeast` if its length is at least `N`.\n   *\n   * @param self - The `Array` to check.\n   * @param n - The minimum number of elements that the `Array` should have to be considered a `TupleOfAtLeast`.\n   *\n   * @example\n   * import { isTupleOfAtLeast } from \"effect/Predicate\"\n   *\n   * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 3), true);\n   * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 2), true);\n   * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 4), false);\n   *\n   * const arr: number[] = [1, 2, 3, 4];\n   * if (isTupleOfAtLeast(arr, 3)) {\n   *   console.log(arr);\n   *   // ^? [number, number, number, ...number[]]\n   * }\n   *\n   * @category guards\n   * @since 3.3.0\n   */\n  <T, N extends number>(self: ReadonlyArray<T>, n: N): self is TupleOfAtLeast<N, T>\n} = dual(2, <T, N extends number>(self: ReadonlyArray<T>, n: N): self is TupleOfAtLeast<N, T> => self.length >= n)\n\n/**\n * Tests if a value is `truthy`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isTruthy } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTruthy(1), true)\n * assert.deepStrictEqual(isTruthy(0), false)\n * assert.deepStrictEqual(isTruthy(\"\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isTruthy = (input: unknown) => !!input\n\n/**\n * Tests if a value is a `Set`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isSet } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isSet(new Set([1, 2])), true)\n * assert.deepStrictEqual(isSet(new Set()), true)\n * assert.deepStrictEqual(isSet({}), false)\n * assert.deepStrictEqual(isSet(null), false)\n * assert.deepStrictEqual(isSet(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isSet = (input: unknown): input is Set<unknown> => input instanceof Set\n\n/**\n * Tests if a value is a `Map`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isMap } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isMap(new Map()), true)\n * assert.deepStrictEqual(isMap({}), false)\n * assert.deepStrictEqual(isMap(null), false)\n * assert.deepStrictEqual(isMap(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isMap = (input: unknown): input is Map<unknown, unknown> => input instanceof Map\n\n/**\n * Tests if a value is a `string`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isString } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isString(\"a\"), true)\n *\n * assert.deepStrictEqual(isString(1), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isString = (input: unknown): input is string => typeof input === \"string\"\n\n/**\n * Tests if a value is a `number`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNumber } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNumber(2), true)\n *\n * assert.deepStrictEqual(isNumber(\"2\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNumber = (input: unknown): input is number => typeof input === \"number\"\n\n/**\n * Tests if a value is a `boolean`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isBoolean } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isBoolean(true), true)\n *\n * assert.deepStrictEqual(isBoolean(\"true\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isBoolean = (input: unknown): input is boolean => typeof input === \"boolean\"\n\n/**\n * Tests if a value is a `bigint`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isBigInt } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isBigInt(1n), true)\n *\n * assert.deepStrictEqual(isBigInt(1), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isBigInt = (input: unknown): input is bigint => typeof input === \"bigint\"\n\n/**\n * Tests if a value is a `symbol`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isSymbol } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isSymbol(Symbol.for(\"a\")), true)\n *\n * assert.deepStrictEqual(isSymbol(\"a\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isSymbol = (input: unknown): input is symbol => typeof input === \"symbol\"\n\n/**\n * Tests if a value is a `function`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isFunction } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isFunction(isFunction), true)\n *\n * assert.deepStrictEqual(isFunction(\"function\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isFunction: (input: unknown) => input is Function = isFunction_\n\n/**\n * Tests if a value is `undefined`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isUndefined } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isUndefined(undefined), true)\n *\n * assert.deepStrictEqual(isUndefined(null), false)\n * assert.deepStrictEqual(isUndefined(\"undefined\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isUndefined = (input: unknown): input is undefined => input === undefined\n\n/**\n * Tests if a value is not `undefined`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNotUndefined } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNotUndefined(null), true)\n * assert.deepStrictEqual(isNotUndefined(\"undefined\"), true)\n *\n * assert.deepStrictEqual(isNotUndefined(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNotUndefined = <A>(input: A): input is Exclude<A, undefined> => input !== undefined\n\n/**\n * Tests if a value is `null`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNull } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNull(null), true)\n *\n * assert.deepStrictEqual(isNull(undefined), false)\n * assert.deepStrictEqual(isNull(\"null\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNull = (input: unknown): input is null => input === null\n\n/**\n * Tests if a value is not `null`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNotNull } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNotNull(undefined), true)\n * assert.deepStrictEqual(isNotNull(\"null\"), true)\n *\n * assert.deepStrictEqual(isNotNull(null), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNotNull = <A>(input: A): input is Exclude<A, null> => input !== null\n\n/**\n * A guard that always fails.\n *\n * @param _ - The value to test.\n *\n * @example\n * import { isNever } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNever(null), false)\n * assert.deepStrictEqual(isNever(undefined), false)\n * assert.deepStrictEqual(isNever({}), false)\n * assert.deepStrictEqual(isNever([]), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNever: (input: unknown) => input is never = (_: unknown): _ is never => false\n\n/**\n * A guard that always succeeds.\n *\n * @param _ - The value to test.\n *\n * @example\n * import { isUnknown } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isUnknown(null), true)\n * assert.deepStrictEqual(isUnknown(undefined), true)\n *\n * assert.deepStrictEqual(isUnknown({}), true)\n * assert.deepStrictEqual(isUnknown([]), true)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isUnknown: (input: unknown) => input is unknown = (_): _ is unknown => true\n\n/** @internal */\nexport const isRecordOrArray = (input: unknown): input is { [x: PropertyKey]: unknown } =>\n  typeof input === \"object\" && input !== null\n\n/**\n * Tests if a value is an `object`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isObject } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isObject({}), true)\n * assert.deepStrictEqual(isObject([]), true)\n *\n * assert.deepStrictEqual(isObject(null), false)\n * assert.deepStrictEqual(isObject(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isObject = (input: unknown): input is object => isRecordOrArray(input) || isFunction(input)\n\n/**\n * Checks whether a value is an `object` containing a specified property key.\n *\n * @param property - The field to check within the object.\n * @param self - The value to examine.\n *\n * @category guards\n * @since 2.0.0\n */\nexport const hasProperty: {\n  /**\n   * Checks whether a value is an `object` containing a specified property key.\n   *\n   * @param property - The field to check within the object.\n   * @param self - The value to examine.\n   *\n   * @category guards\n   * @since 2.0.0\n   */\n  <P extends PropertyKey>(property: P): (self: unknown) => self is { [K in P]: unknown }\n  /**\n   * Checks whether a value is an `object` containing a specified property key.\n   *\n   * @param property - The field to check within the object.\n   * @param self - The value to examine.\n   *\n   * @category guards\n   * @since 2.0.0\n   */\n  <P extends PropertyKey>(self: unknown, property: P): self is { [K in P]: unknown }\n} = dual(\n  2,\n  <P extends PropertyKey>(self: unknown, property: P): self is { [K in P]: unknown } =>\n    isObject(self) && (property in self)\n)\n\n/**\n * Tests if a value is an `object` with a property `_tag` that matches the given tag.\n *\n * @param input - The value to test.\n * @param tag - The tag to test for.\n *\n * @example\n * import { isTagged } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTagged(1, \"a\"), false)\n * assert.deepStrictEqual(isTagged(null, \"a\"), false)\n * assert.deepStrictEqual(isTagged({}, \"a\"), false)\n * assert.deepStrictEqual(isTagged({ a: \"a\" }, \"a\"), false)\n * assert.deepStrictEqual(isTagged({ _tag: \"a\" }, \"a\"), true)\n * assert.deepStrictEqual(isTagged(\"a\")({ _tag: \"a\" }), true)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isTagged: {\n  /**\n   * Tests if a value is an `object` with a property `_tag` that matches the given tag.\n   *\n   * @param input - The value to test.\n   * @param tag - The tag to test for.\n   *\n   * @example\n   * import { isTagged } from \"effect/Predicate\"\n   *\n   * assert.deepStrictEqual(isTagged(1, \"a\"), false)\n   * assert.deepStrictEqual(isTagged(null, \"a\"), false)\n   * assert.deepStrictEqual(isTagged({}, \"a\"), false)\n   * assert.deepStrictEqual(isTagged({ a: \"a\" }, \"a\"), false)\n   * assert.deepStrictEqual(isTagged({ _tag: \"a\" }, \"a\"), true)\n   * assert.deepStrictEqual(isTagged(\"a\")({ _tag: \"a\" }), true)\n   *\n   * @category guards\n   * @since 2.0.0\n   */\n  <K extends string>(tag: K): (self: unknown) => self is { _tag: K }\n  /**\n   * Tests if a value is an `object` with a property `_tag` that matches the given tag.\n   *\n   * @param input - The value to test.\n   * @param tag - The tag to test for.\n   *\n   * @example\n   * import { isTagged } from \"effect/Predicate\"\n   *\n   * assert.deepStrictEqual(isTagged(1, \"a\"), false)\n   * assert.deepStrictEqual(isTagged(null, \"a\"), false)\n   * assert.deepStrictEqual(isTagged({}, \"a\"), false)\n   * assert.deepStrictEqual(isTagged({ a: \"a\" }, \"a\"), false)\n   * assert.deepStrictEqual(isTagged({ _tag: \"a\" }, \"a\"), true)\n   * assert.deepStrictEqual(isTagged(\"a\")({ _tag: \"a\" }), true)\n   *\n   * @category guards\n   * @since 2.0.0\n   */\n  <K extends string>(self: unknown, tag: K): self is { _tag: K }\n} = dual(\n  2,\n  <K extends string>(self: unknown, tag: K): self is { _tag: K } => hasProperty(self, \"_tag\") && self[\"_tag\"] === tag\n)\n\n/**\n * A guard that succeeds when the input is `null` or `undefined`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNullable } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNullable(null), true)\n * assert.deepStrictEqual(isNullable(undefined), true)\n *\n * assert.deepStrictEqual(isNullable({}), false)\n * assert.deepStrictEqual(isNullable([]), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNullable = <A>(input: A): input is Extract<A, null | undefined> => input === null || input === undefined\n\n/**\n * A guard that succeeds when the input is not `null` or `undefined`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNotNullable } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNotNullable({}), true)\n * assert.deepStrictEqual(isNotNullable([]), true)\n *\n * assert.deepStrictEqual(isNotNullable(null), false)\n * assert.deepStrictEqual(isNotNullable(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNotNullable = <A>(input: A): input is NonNullable<A> => input !== null && input !== undefined\n\n/**\n * A guard that succeeds when the input is an `Error`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isError } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isError(new Error()), true)\n *\n * assert.deepStrictEqual(isError(null), false)\n * assert.deepStrictEqual(isError({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isError = (input: unknown): input is Error => input instanceof Error\n\n/**\n * A guard that succeeds when the input is a `Uint8Array`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isUint8Array } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isUint8Array(new Uint8Array()), true)\n *\n * assert.deepStrictEqual(isUint8Array(null), false)\n * assert.deepStrictEqual(isUint8Array({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isUint8Array = (input: unknown): input is Uint8Array => input instanceof Uint8Array\n\n/**\n * A guard that succeeds when the input is a `Date`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isDate } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isDate(new Date()), true)\n *\n * assert.deepStrictEqual(isDate(null), false)\n * assert.deepStrictEqual(isDate({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isDate = (input: unknown): input is Date => input instanceof Date\n\n/**\n * A guard that succeeds when the input is an `Iterable`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isIterable } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isIterable([]), true)\n * assert.deepStrictEqual(isIterable(new Set()), true)\n *\n * assert.deepStrictEqual(isIterable(null), false)\n * assert.deepStrictEqual(isIterable({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isIterable = (input: unknown): input is Iterable<unknown> => hasProperty(input, Symbol.iterator)\n\n/**\n * A guard that succeeds when the input is a record.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isRecord } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isRecord({}), true)\n * assert.deepStrictEqual(isRecord({ a: 1 }), true)\n *\n * assert.deepStrictEqual(isRecord([]), false)\n * assert.deepStrictEqual(isRecord([1, 2, 3]), false)\n * assert.deepStrictEqual(isRecord(null), false)\n * assert.deepStrictEqual(isRecord(undefined), false)\n * assert.deepStrictEqual(isRecord(() => null), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isRecord = (input: unknown): input is { [x: string | symbol]: unknown } =>\n  isRecordOrArray(input) && !Array.isArray(input)\n\n/**\n * A guard that succeeds when the input is a readonly record.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isReadonlyRecord } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isReadonlyRecord({}), true)\n * assert.deepStrictEqual(isReadonlyRecord({ a: 1 }), true)\n *\n * assert.deepStrictEqual(isReadonlyRecord([]), false)\n * assert.deepStrictEqual(isReadonlyRecord([1, 2, 3]), false)\n * assert.deepStrictEqual(isReadonlyRecord(null), false)\n * assert.deepStrictEqual(isReadonlyRecord(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isReadonlyRecord: (\n  input: unknown\n) => input is { readonly [x: string | symbol]: unknown } = isRecord\n\n/**\n * A guard that succeeds when the input is a Promise.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isPromise } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isPromise({}), false)\n * assert.deepStrictEqual(isPromise(Promise.resolve(\"hello\")), true)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isPromise = (\n  input: unknown\n): input is Promise<unknown> =>\n  hasProperty(input, \"then\") && \"catch\" in input && isFunction(input.then) && isFunction(input.catch)\n\n/**\n * @category guards\n * @since 2.0.0\n */\nexport const isPromiseLike = (\n  input: unknown\n): input is PromiseLike<unknown> => hasProperty(input, \"then\") && isFunction(input.then)\n\n/**\n * Tests if a value is a `RegExp`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { Predicate } from \"effect\"\n *\n * assert.deepStrictEqual(Predicate.isRegExp(/a/), true)\n * assert.deepStrictEqual(Predicate.isRegExp(\"a\"), false)\n *\n * @category guards\n * @since 3.9.0\n */\nexport const isRegExp = (input: unknown): input is RegExp => input instanceof RegExp\n\n/**\n * @since 2.0.0\n */\nexport const compose: {\n  /**\n   * @since 2.0.0\n   */\n  <A, B extends A, C extends B>(bc: Refinement<B, C>): (ab: Refinement<A, B>) => Refinement<A, C>\n  /**\n   * @since 2.0.0\n   */\n  <A, B extends A>(bc: Predicate<NoInfer<B>>): (ab: Refinement<A, B>) => Refinement<A, B>\n  /**\n   * @since 2.0.0\n   */\n  <A, B extends A, C extends B>(ab: Refinement<A, B>, bc: Refinement<B, C>): Refinement<A, C>\n  /**\n   * @since 2.0.0\n   */\n  <A, B extends A>(ab: Refinement<A, B>, bc: Predicate<NoInfer<B>>): Refinement<A, B>\n} = dual(\n  2,\n  <A, B extends A, C extends B>(ab: Refinement<A, B>, bc: Refinement<B, C>): Refinement<A, C> => (a): a is C =>\n    ab(a) && bc(a)\n)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const product =\n  <A, B>(self: Predicate<A>, that: Predicate<B>): Predicate<readonly [A, B]> /* readonly because contravariant */ =>\n  ([a, b]) => self(a) && that(b)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const all = <A>(\n  collection: Iterable<Predicate<A>>\n): Predicate<ReadonlyArray<A>> => {\n  return (as) => {\n    let collectionIndex = 0\n    for (const p of collection) {\n      if (collectionIndex >= as.length) {\n        break\n      }\n      if (p(as[collectionIndex]) === false) {\n        return false\n      }\n      collectionIndex++\n    }\n    return true\n  }\n}\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const productMany = <A>(\n  self: Predicate<A>,\n  collection: Iterable<Predicate<A>>\n): Predicate<readonly [A, ...Array<A>]> /* readonly because contravariant */ => {\n  const rest = all(collection)\n  return ([head, ...tail]) => self(head) === false ? false : rest(tail)\n}\n\n/**\n * Similar to `Promise.all` but operates on `Predicate`s.\n *\n * ```\n * [Refinement<A, B>, Refinement<C, D>, ...] -> Refinement<[A, C, ...], [B, D, ...]>\n * [Predicate<A>, Predicate<B>, ...] -> Predicate<[A, B, ...]>\n * [Refinement<A, B>, Predicate<C>, ...] -> Refinement<[A, C, ...], [B, C, ...]>\n * ```\n *\n * @since 2.0.0\n */\nexport const tuple: {\n  /**\n   * Similar to `Promise.all` but operates on `Predicate`s.\n   *\n   * ```\n   * [Refinement<A, B>, Refinement<C, D>, ...] -> Refinement<[A, C, ...], [B, D, ...]>\n   * [Predicate<A>, Predicate<B>, ...] -> Predicate<[A, B, ...]>\n   * [Refinement<A, B>, Predicate<C>, ...] -> Refinement<[A, C, ...], [B, C, ...]>\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <T extends ReadonlyArray<Predicate.Any>>(\n    ...elements: T\n  ): [Extract<T[number], Refinement.Any>] extends [never] ? Predicate<{ readonly [I in keyof T]: Predicate.In<T[I]> }>\n    : Refinement<\n      { readonly [I in keyof T]: T[I] extends Refinement.Any ? Refinement.In<T[I]> : Predicate.In<T[I]> },\n      { readonly [I in keyof T]: T[I] extends Refinement.Any ? Refinement.Out<T[I]> : Predicate.In<T[I]> }\n    >\n} = (...elements: ReadonlyArray<Predicate.Any>) => all(elements) as any\n\n/**\n * ```\n * { ab: Refinement<A, B>; cd: Refinement<C, D>, ... } -> Refinement<{ ab: A; cd: C; ... }, { ab: B; cd: D; ... }>\n * { a: Predicate<A, B>; b: Predicate<B>, ... } -> Predicate<{ a: A; b: B; ... }>\n * { ab: Refinement<A, B>; c: Predicate<C>, ... } -> Refinement<{ ab: A; c: C; ... }, { ab: B; c: С; ... }>\n * ```\n *\n * @since 2.0.0\n */\nexport const struct: {\n  /**\n   * ```\n   * { ab: Refinement<A, B>; cd: Refinement<C, D>, ... } -> Refinement<{ ab: A; cd: C; ... }, { ab: B; cd: D; ... }>\n   * { a: Predicate<A, B>; b: Predicate<B>, ... } -> Predicate<{ a: A; b: B; ... }>\n   * { ab: Refinement<A, B>; c: Predicate<C>, ... } -> Refinement<{ ab: A; c: C; ... }, { ab: B; c: С; ... }>\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <R extends Record<string, Predicate.Any>>(\n    fields: R\n  ): [Extract<R[keyof R], Refinement.Any>] extends [never] ?\n    Predicate<{ readonly [K in keyof R]: Predicate.In<R[K]> }> :\n    Refinement<\n      { readonly [K in keyof R]: R[K] extends Refinement.Any ? Refinement.In<R[K]> : Predicate.In<R[K]> },\n      { readonly [K in keyof R]: R[K] extends Refinement.Any ? Refinement.Out<R[K]> : Predicate.In<R[K]> }\n    >\n} = (<R extends Record<string, Predicate.Any>>(fields: R) => {\n  const keys = Object.keys(fields)\n  return (a: Record<string, unknown>) => {\n    for (const key of keys) {\n      if (!fields[key](a[key])) {\n        return false\n      }\n    }\n    return true\n  }\n}) as any\n\n/**\n * Negates the result of a given predicate.\n *\n * @param self - A predicate.\n *\n * @example\n * import { Predicate, Number } from \"effect\"\n *\n * const isPositive = Predicate.not(Number.lessThan(0))\n *\n * assert.deepStrictEqual(isPositive(-1), false)\n * assert.deepStrictEqual(isPositive(0), true)\n * assert.deepStrictEqual(isPositive(1), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const not = <A>(self: Predicate<A>): Predicate<A> => (a) => !self(a)\n\n/**\n * Combines two predicates into a new predicate that returns `true` if at least one of the predicates returns `true`.\n *\n * @param self - A predicate.\n * @param that - A predicate.\n *\n * @example\n * import { Predicate, Number } from \"effect\"\n *\n * const nonZero = Predicate.or(Number.lessThan(0), Number.greaterThan(0))\n *\n * assert.deepStrictEqual(nonZero(-1), true)\n * assert.deepStrictEqual(nonZero(0), false)\n * assert.deepStrictEqual(nonZero(1), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const or: {\n  /**\n   * Combines two predicates into a new predicate that returns `true` if at least one of the predicates returns `true`.\n   *\n   * @param self - A predicate.\n   * @param that - A predicate.\n   *\n   * @example\n   * import { Predicate, Number } from \"effect\"\n   *\n   * const nonZero = Predicate.or(Number.lessThan(0), Number.greaterThan(0))\n   *\n   * assert.deepStrictEqual(nonZero(-1), true)\n   * assert.deepStrictEqual(nonZero(0), false)\n   * assert.deepStrictEqual(nonZero(1), true)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A, C extends A>(that: Refinement<A, C>): <B extends A>(self: Refinement<A, B>) => Refinement<A, B | C>\n  /**\n   * Combines two predicates into a new predicate that returns `true` if at least one of the predicates returns `true`.\n   *\n   * @param self - A predicate.\n   * @param that - A predicate.\n   *\n   * @example\n   * import { Predicate, Number } from \"effect\"\n   *\n   * const nonZero = Predicate.or(Number.lessThan(0), Number.greaterThan(0))\n   *\n   * assert.deepStrictEqual(nonZero(-1), true)\n   * assert.deepStrictEqual(nonZero(0), false)\n   * assert.deepStrictEqual(nonZero(1), true)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A, B extends A, C extends A>(self: Refinement<A, B>, that: Refinement<A, C>): Refinement<A, B | C>\n  /**\n   * Combines two predicates into a new predicate that returns `true` if at least one of the predicates returns `true`.\n   *\n   * @param self - A predicate.\n   * @param that - A predicate.\n   *\n   * @example\n   * import { Predicate, Number } from \"effect\"\n   *\n   * const nonZero = Predicate.or(Number.lessThan(0), Number.greaterThan(0))\n   *\n   * assert.deepStrictEqual(nonZero(-1), true)\n   * assert.deepStrictEqual(nonZero(0), false)\n   * assert.deepStrictEqual(nonZero(1), true)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  /**\n   * Combines two predicates into a new predicate that returns `true` if at least one of the predicates returns `true`.\n   *\n   * @param self - A predicate.\n   * @param that - A predicate.\n   *\n   * @example\n   * import { Predicate, Number } from \"effect\"\n   *\n   * const nonZero = Predicate.or(Number.lessThan(0), Number.greaterThan(0))\n   *\n   * assert.deepStrictEqual(nonZero(-1), true)\n   * assert.deepStrictEqual(nonZero(0), false)\n   * assert.deepStrictEqual(nonZero(1), true)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(2, <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => self(a) || that(a))\n\n/**\n * Combines two predicates into a new predicate that returns `true` if both of the predicates returns `true`.\n *\n * @param self - A predicate.\n * @param that - A predicate.\n *\n * @example\n * import { Predicate } from \"effect\"\n *\n * const minLength = (n: number) => (s: string) => s.length >= n\n * const maxLength = (n: number) => (s: string) => s.length <= n\n *\n * const length = (n: number) => Predicate.and(minLength(n), maxLength(n))\n *\n * assert.deepStrictEqual(length(2)(\"aa\"), true)\n * assert.deepStrictEqual(length(2)(\"a\"), false)\n * assert.deepStrictEqual(length(2)(\"aaa\"), false)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const and: {\n  /**\n   * Combines two predicates into a new predicate that returns `true` if both of the predicates returns `true`.\n   *\n   * @param self - A predicate.\n   * @param that - A predicate.\n   *\n   * @example\n   * import { Predicate } from \"effect\"\n   *\n   * const minLength = (n: number) => (s: string) => s.length >= n\n   * const maxLength = (n: number) => (s: string) => s.length <= n\n   *\n   * const length = (n: number) => Predicate.and(minLength(n), maxLength(n))\n   *\n   * assert.deepStrictEqual(length(2)(\"aa\"), true)\n   * assert.deepStrictEqual(length(2)(\"a\"), false)\n   * assert.deepStrictEqual(length(2)(\"aaa\"), false)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A, C extends A>(that: Refinement<A, C>): <B extends A>(self: Refinement<A, B>) => Refinement<A, B & C>\n  /**\n   * Combines two predicates into a new predicate that returns `true` if both of the predicates returns `true`.\n   *\n   * @param self - A predicate.\n   * @param that - A predicate.\n   *\n   * @example\n   * import { Predicate } from \"effect\"\n   *\n   * const minLength = (n: number) => (s: string) => s.length >= n\n   * const maxLength = (n: number) => (s: string) => s.length <= n\n   *\n   * const length = (n: number) => Predicate.and(minLength(n), maxLength(n))\n   *\n   * assert.deepStrictEqual(length(2)(\"aa\"), true)\n   * assert.deepStrictEqual(length(2)(\"a\"), false)\n   * assert.deepStrictEqual(length(2)(\"aaa\"), false)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A, B extends A, C extends A>(self: Refinement<A, B>, that: Refinement<A, C>): Refinement<A, B & C>\n  /**\n   * Combines two predicates into a new predicate that returns `true` if both of the predicates returns `true`.\n   *\n   * @param self - A predicate.\n   * @param that - A predicate.\n   *\n   * @example\n   * import { Predicate } from \"effect\"\n   *\n   * const minLength = (n: number) => (s: string) => s.length >= n\n   * const maxLength = (n: number) => (s: string) => s.length <= n\n   *\n   * const length = (n: number) => Predicate.and(minLength(n), maxLength(n))\n   *\n   * assert.deepStrictEqual(length(2)(\"aa\"), true)\n   * assert.deepStrictEqual(length(2)(\"a\"), false)\n   * assert.deepStrictEqual(length(2)(\"aaa\"), false)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  /**\n   * Combines two predicates into a new predicate that returns `true` if both of the predicates returns `true`.\n   *\n   * @param self - A predicate.\n   * @param that - A predicate.\n   *\n   * @example\n   * import { Predicate } from \"effect\"\n   *\n   * const minLength = (n: number) => (s: string) => s.length >= n\n   * const maxLength = (n: number) => (s: string) => s.length <= n\n   *\n   * const length = (n: number) => Predicate.and(minLength(n), maxLength(n))\n   *\n   * assert.deepStrictEqual(length(2)(\"aa\"), true)\n   * assert.deepStrictEqual(length(2)(\"a\"), false)\n   * assert.deepStrictEqual(length(2)(\"aaa\"), false)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(2, <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => self(a) && that(a))\n\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport const xor: {\n  /**\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  /**\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(2, <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => self(a) !== that(a))\n\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport const eqv: {\n  /**\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  /**\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(2, <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => self(a) === that(a))\n\n/**\n * Represents the logical implication combinator for predicates. In formal\n * logic, the implication operator `->` denotes that if the first proposition\n * (antecedent) is true, then the second proposition (consequent) must also be\n * true. In simpler terms, `p implies q` can be interpreted as \"if p then q\". If\n * the first predicate holds, then the second predicate must hold\n * for the given context.\n *\n * In practical terms within TypeScript, `p implies q` is equivalent to `!p || (p && q)`.\n *\n * Note that if the antecedent is `false`, the result is `true` by default\n * because the outcome of the consequent cannot be determined.\n *\n * This function is useful in situations where you need to enforce rules or\n * constraints that are contingent on certain conditions.\n * It proves especially helpful in defining property tests.\n *\n * The example below illustrates the transitive property of order using the\n * `implies` function. In simple terms, if `a <= b` and `b <= c`, then `a <= c`\n * must be true.\n *\n * @example\n * import { Predicate } from \"effect\"\n *\n * type Triple = {\n *   readonly a: number\n *   readonly b: number\n *   readonly c: number\n * }\n *\n * const transitivity = Predicate.implies(\n *   // antecedent\n *   (input: Triple) => input.a <= input.b && input.b <= input.c,\n *   // consequent\n *   (input: Triple) => input.a <= input.c\n * )\n *\n * assert.equal(transitivity({ a: 1, b: 2, c: 3 }), true)\n * // antecedent is `false`, so the result is `true`\n * assert.equal(transitivity({ a: 1, b: 0, c: 0 }), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const implies: {\n  /**\n   * Represents the logical implication combinator for predicates. In formal\n   * logic, the implication operator `->` denotes that if the first proposition\n   * (antecedent) is true, then the second proposition (consequent) must also be\n   * true. In simpler terms, `p implies q` can be interpreted as \"if p then q\". If\n   * the first predicate holds, then the second predicate must hold\n   * for the given context.\n   *\n   * In practical terms within TypeScript, `p implies q` is equivalent to `!p || (p && q)`.\n   *\n   * Note that if the antecedent is `false`, the result is `true` by default\n   * because the outcome of the consequent cannot be determined.\n   *\n   * This function is useful in situations where you need to enforce rules or\n   * constraints that are contingent on certain conditions.\n   * It proves especially helpful in defining property tests.\n   *\n   * The example below illustrates the transitive property of order using the\n   * `implies` function. In simple terms, if `a <= b` and `b <= c`, then `a <= c`\n   * must be true.\n   *\n   * @example\n   * import { Predicate } from \"effect\"\n   *\n   * type Triple = {\n   *   readonly a: number\n   *   readonly b: number\n   *   readonly c: number\n   * }\n   *\n   * const transitivity = Predicate.implies(\n   *   // antecedent\n   *   (input: Triple) => input.a <= input.b && input.b <= input.c,\n   *   // consequent\n   *   (input: Triple) => input.a <= input.c\n   * )\n   *\n   * assert.equal(transitivity({ a: 1, b: 2, c: 3 }), true)\n   * // antecedent is `false`, so the result is `true`\n   * assert.equal(transitivity({ a: 1, b: 0, c: 0 }), true)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(consequent: Predicate<A>): (antecedent: Predicate<A>) => Predicate<A>\n  /**\n   * Represents the logical implication combinator for predicates. In formal\n   * logic, the implication operator `->` denotes that if the first proposition\n   * (antecedent) is true, then the second proposition (consequent) must also be\n   * true. In simpler terms, `p implies q` can be interpreted as \"if p then q\". If\n   * the first predicate holds, then the second predicate must hold\n   * for the given context.\n   *\n   * In practical terms within TypeScript, `p implies q` is equivalent to `!p || (p && q)`.\n   *\n   * Note that if the antecedent is `false`, the result is `true` by default\n   * because the outcome of the consequent cannot be determined.\n   *\n   * This function is useful in situations where you need to enforce rules or\n   * constraints that are contingent on certain conditions.\n   * It proves especially helpful in defining property tests.\n   *\n   * The example below illustrates the transitive property of order using the\n   * `implies` function. In simple terms, if `a <= b` and `b <= c`, then `a <= c`\n   * must be true.\n   *\n   * @example\n   * import { Predicate } from \"effect\"\n   *\n   * type Triple = {\n   *   readonly a: number\n   *   readonly b: number\n   *   readonly c: number\n   * }\n   *\n   * const transitivity = Predicate.implies(\n   *   // antecedent\n   *   (input: Triple) => input.a <= input.b && input.b <= input.c,\n   *   // consequent\n   *   (input: Triple) => input.a <= input.c\n   * )\n   *\n   * assert.equal(transitivity({ a: 1, b: 2, c: 3 }), true)\n   * // antecedent is `false`, so the result is `true`\n   * assert.equal(transitivity({ a: 1, b: 0, c: 0 }), true)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(antecedent: Predicate<A>, consequent: Predicate<A>): Predicate<A>\n} = dual(\n  2,\n  <A>(antecedent: Predicate<A>, consequent: Predicate<A>): Predicate<A> => (a) => antecedent(a) ? consequent(a) : true\n)\n\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport const nor: {\n  /**\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  /**\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(\n  2,\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => !(self(a) || that(a))\n)\n\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport const nand: {\n  /**\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  /**\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(\n  2,\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => !(self(a) && that(a))\n)\n\n/**\n * @category elements\n * @since 2.0.0\n */\nexport const every = <A>(collection: Iterable<Predicate<A>>): Predicate<A> => (a: A) => {\n  for (const p of collection) {\n    if (!p(a)) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * @category elements\n * @since 2.0.0\n */\nexport const some = <A>(collection: Iterable<Predicate<A>>): Predicate<A> => (a) => {\n  for (const p of collection) {\n    if (p(a)) {\n      return true\n    }\n  }\n  return false\n}\n"],"names":["dual","isFunction","isFunction_","mapInput","self","f","b","isTupleOf","n","length","isTupleOfAtLeast","isTruthy","input","isSet","Set","isMap","Map","isString","isNumber","isBoolean","isBigInt","isSymbol","isUndefined","undefined","isNotUndefined","isNull","isNotNull","isNever","_","isUnknown","isRecordOrArray","isObject","hasProperty","property","isTagged","tag","isNullable","isNotNullable","isError","Error","isUint8Array","Uint8Array","isDate","Date","isIterable","Symbol","iterator","isRecord","Array","isArray","isReadonlyRecord","isPromise","then","catch","isPromiseLike","isRegExp","RegExp","compose","ab","bc","a","product","that","all","collection","as","collectionIndex","p","productMany","rest","head","tail","tuple","elements","struct","fields","keys","Object","key","not","or","and","xor","eqv","implies","antecedent","consequent","nor","nand","every","some"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 346, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 352, "column": 0}, "map": {"version":3,"file":"GlobalValue.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/GlobalValue.ts"],"sourcesContent":["/**\n * The `GlobalValue` module ensures that a single instance of a value is created globally,\n * even when modules are imported multiple times (e.g., due to mixing CommonJS and ESM builds)\n * or during hot-reloading in development environments like Next.js or Remix.\n *\n * It achieves this by using a versioned global store, identified by a unique `Symbol` tied to\n * the current version of the `effect` library. The store holds values that are keyed by an identifier,\n * allowing the reuse of previously computed instances across imports or reloads.\n *\n * This pattern is particularly useful in scenarios where frequent reloading can cause services or\n * single-instance objects to be recreated unnecessarily, such as in development environments with hot-reloading.\n *\n * @since 2.0.0\n */\nimport * as version from \"./internal/version.js\"\n\nconst globalStoreId = Symbol.for(`effect/GlobalValue/globalStoreId/${version.getCurrentVersion()}`)\n\nif (!(globalStoreId in globalThis)) {\n  ;(globalThis as any)[globalStoreId] = new Map()\n}\n\nconst globalStore = (globalThis as any)[globalStoreId] as Map<unknown, any>\n\n/**\n * Retrieves or computes a global value associated with the given `id`. If the value for this `id`\n * has already been computed, it will be returned from the global store. If it does not exist yet,\n * the provided `compute` function will be executed to compute the value, store it, and then return it.\n *\n * This ensures that even in cases where the module is imported multiple times (e.g., in mixed environments\n * like CommonJS and ESM, or during hot-reloading in development), the value is computed only once and reused\n * thereafter.\n *\n * @example\n * import { globalValue } from \"effect/GlobalValue\"\n *\n * // This cache will persist as long as the module is running,\n * // even if reloaded or imported elsewhere\n * const myCache = globalValue(\n *   Symbol.for(\"myCache\"),\n *   () => new WeakMap<object, number>()\n * )\n *\n * @since 2.0.0\n */\nexport const globalValue = <A>(id: unknown, compute: () => A): A => {\n  if (!globalStore.has(id)) {\n    globalStore.set(id, compute())\n  }\n  return globalStore.get(id)!\n}\n"],"names":["version","globalStoreId","Symbol","for","getCurrentVersion","globalThis","Map","globalStore","globalValue","id","compute","has","set","get"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAcA,OAAO,KAAKA,OAAO,MAAM,uBAAuB;;AAEhD,MAAMC,aAAa,GAAA,WAAA,GAAGC,MAAM,CAACC,GAAG,CAAC,CAAA,iCAAA,EAAoCH,OAAO,4MAACI,iBAAiB,EAAE,EAAE,CAAC;AAEnG,IAAI,CAAA,CAAEH,aAAa,IAAII,UAAU,CAAC,EAAE;;IAChCA,UAAkB,CAACJ,aAAa,CAAC,GAAA,WAAA,GAAG,IAAIK,GAAG,EAAE;AACjD;AAEA,MAAMC,WAAW,GAAIF,UAAkB,CAACJ,aAAa,CAAsB;AAuBpE,MAAMO,WAAW,GAAGA,CAAIC,EAAW,EAAEC,OAAgB,KAAO;IACjE,IAAI,CAACH,WAAW,CAACI,GAAG,CAACF,EAAE,CAAC,EAAE;QACxBF,WAAW,CAACK,GAAG,CAACH,EAAE,EAAEC,OAAO,EAAE,CAAC;IAChC;IACA,OAAOH,WAAW,CAACM,GAAG,CAACJ,EAAE,CAAE;AAC7B,CAAC","ignoreList":[0]}},
    {"offset": {"line": 382, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 388, "column": 0}, "map": {"version":3,"file":"Utils.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Utils.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport { identity } from \"./Function.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport type { Kind, TypeLambda } from \"./HKT.js\"\nimport { getBugErrorMessage } from \"./internal/errors.js\"\nimport { isNullable, isObject } from \"./Predicate.js\"\nimport type * as Types from \"./Types.js\"\n\n/*\n * Copyright 2014 Thom Chiovoloni, released under the MIT license.\n *\n * A random number generator based on the basic implementation of the PCG algorithm,\n * as described here: http://www.pcg-random.org/\n *\n * Adapted for TypeScript from Thom's original code at https://github.com/thomcc/pcg-random\n *\n * forked from https://github.com/frptools\n *\n * @since 2.0.0\n */\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport const GenKindTypeId: unique symbol = Symbol.for(\"effect/Gen/GenKind\")\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport type GenKindTypeId = typeof GenKindTypeId\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface GenKind<F extends TypeLambda, R, O, E, A> extends Variance<F, R, O, E> {\n  readonly value: Kind<F, R, O, E, A>\n\n  [Symbol.iterator](): Generator<GenKind<F, R, O, E, A>, A>\n}\n\n/**\n * @category predicates\n * @since 3.0.6\n */\nexport const isGenKind = (u: unknown): u is GenKind<any, any, any, any, any> => isObject(u) && GenKindTypeId in u\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport class GenKindImpl<F extends TypeLambda, R, O, E, A> implements GenKind<F, R, O, E, A> {\n  constructor(\n    /**\n     * @since 2.0.0\n     */\n    readonly value: Kind<F, R, O, E, A>\n  ) {}\n\n  /**\n   * @since 2.0.0\n   */\n  get _F() {\n    return identity\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  get _R() {\n    return (_: R) => _\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  get _O() {\n    return (_: never): O => _\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  get _E() {\n    return (_: never): E => _\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  readonly [GenKindTypeId]: typeof GenKindTypeId = GenKindTypeId;\n\n  /**\n   * @since 2.0.0\n   */\n  [Symbol.iterator](): Generator<GenKind<F, R, O, E, A>, A> {\n    return new SingleShotGen<GenKind<F, R, O, E, A>, A>(this as any)\n  }\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport class SingleShotGen<T, A> implements Generator<T, A> {\n  private called = false\n\n  constructor(readonly self: T) {}\n\n  /**\n   * @since 2.0.0\n   */\n  next(a: A): IteratorResult<T, A> {\n    return this.called ?\n      ({\n        value: a,\n        done: true\n      }) :\n      (this.called = true,\n        ({\n          value: this.self,\n          done: false\n        }))\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  return(a: A): IteratorResult<T, A> {\n    return ({\n      value: a,\n      done: true\n    })\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  throw(e: unknown): IteratorResult<T, A> {\n    throw e\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  [Symbol.iterator](): Generator<T, A> {\n    return new SingleShotGen<T, A>(this.self)\n  }\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const makeGenKind = <F extends TypeLambda, R, O, E, A>(\n  kind: Kind<F, R, O, E, A>\n): GenKind<F, R, O, E, A> => new GenKindImpl(kind)\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Variance<in out F extends TypeLambda, in R, out O, out E> {\n  readonly [GenKindTypeId]: GenKindTypeId\n  readonly _F: Types.Invariant<F>\n  readonly _R: Types.Contravariant<R>\n  readonly _O: Types.Covariant<O>\n  readonly _E: Types.Covariant<E>\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Gen<F extends TypeLambda, Z> {\n  <Self, K extends Variance<F, any, any, any> | YieldWrap<Kind<F, any, any, any, any>>, A>(\n    ...args:\n      | [\n        self: Self,\n        body: (this: Self, resume: Z) => Generator<K, A, never>\n      ]\n      | [\n        body: (resume: Z) => Generator<K, A, never>\n      ]\n  ): Kind<\n    F,\n    [K] extends [Variance<F, infer R, any, any>] ? R\n      : [K] extends [YieldWrap<Kind<F, infer R, any, any, any>>] ? R\n      : never,\n    [K] extends [Variance<F, any, infer O, any>] ? O\n      : [K] extends [YieldWrap<Kind<F, any, infer O, any, any>>] ? O\n      : never,\n    [K] extends [Variance<F, any, any, infer E>] ? E\n      : [K] extends [YieldWrap<Kind<F, any, any, infer E, any>>] ? E\n      : never,\n    A\n  >\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Adapter<Z extends TypeLambda> {\n  <_R, _O, _E, _A>(\n    self: Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, _R, _O, _E, _A>(a: A, ab: (a: A) => Kind<Z, _R, _O, _E, _A>): GenKind<Z, _R, _O, _E, _A>\n  <A, B, _R, _O, _E, _A>(a: A, ab: (a: A) => B, bc: (b: B) => Kind<Z, _R, _O, _E, _A>): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: F) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (g: H) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => S,\n    st: (s: S) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => S,\n    st: (s: S) => T,\n    tu: (s: T) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n}\n\n/**\n * @category adapters\n * @since 2.0.0\n */\nexport const adapter: <F extends TypeLambda>() => Adapter<F> = () => (function() {\n  let x = arguments[0]\n  for (let i = 1; i < arguments.length; i++) {\n    x = arguments[i](x)\n  }\n  return new GenKindImpl(x) as any\n})\n\nconst defaultIncHi = 0x14057b7e\nconst defaultIncLo = 0xf767814f\nconst MUL_HI = 0x5851f42d >>> 0\nconst MUL_LO = 0x4c957f2d >>> 0\nconst BIT_53 = 9007199254740992.0\nconst BIT_27 = 134217728.0\n\n/**\n * @category model\n * @since 2.0.0\n */\nexport type PCGRandomState = [number, number, number, number]\n\n/**\n * @category model\n * @since 2.0.0\n */\nexport type OptionalNumber = number | null | undefined\n\n/**\n * PCG is a family of simple fast space-efficient statistically good algorithms\n * for random number generation. Unlike many general-purpose RNGs, they are also\n * hard to predict.\n *\n * @category model\n * @since 2.0.0\n */\nexport class PCGRandom {\n  private _state!: Int32Array\n\n  /**\n   * Creates an instance of PCGRandom.\n   *\n   * @param seed - The low 32 bits of the seed (0 is used for high 32 bits).\n   *\n   * @memberOf PCGRandom\n   */\n  constructor(seed?: OptionalNumber)\n  /**\n   * Creates an instance of PCGRandom.\n   *\n   * @param seedHi - The high 32 bits of the seed.\n   * @param seedLo - The low 32 bits of the seed.\n   * @param inc - The low 32 bits of the incrementer (0 is used for high 32 bits).\n   *\n   * @memberOf PCGRandom\n   */\n  constructor(seedHi: OptionalNumber, seedLo: OptionalNumber, inc?: OptionalNumber)\n  /**\n   * Creates an instance of PCGRandom.\n   *\n   * @param seedHi - The high 32 bits of the seed.\n   * @param seedLo - The low 32 bits of the seed.\n   * @param incHi - The high 32 bits of the incrementer.\n   * @param incLo - The low 32 bits of the incrementer.\n   *\n   * @memberOf PCGRandom\n   */\n  constructor(\n    seedHi: OptionalNumber,\n    seedLo: OptionalNumber,\n    incHi: OptionalNumber,\n    incLo: OptionalNumber\n  )\n  constructor(\n    seedHi?: OptionalNumber,\n    seedLo?: OptionalNumber,\n    incHi?: OptionalNumber,\n    incLo?: OptionalNumber\n  ) {\n    if (isNullable(seedLo) && isNullable(seedHi)) {\n      seedLo = (Math.random() * 0xffffffff) >>> 0\n      seedHi = 0\n    } else if (isNullable(seedLo)) {\n      seedLo = seedHi\n      seedHi = 0\n    }\n    if (isNullable(incLo) && isNullable(incHi)) {\n      incLo = this._state ? this._state[3] : defaultIncLo\n      incHi = this._state ? this._state[2] : defaultIncHi\n    } else if (isNullable(incLo)) {\n      incLo = <number> incHi\n      incHi = 0\n    }\n\n    this._state = new Int32Array([0, 0, (<number> incHi) >>> 0, ((incLo || 0) | 1) >>> 0])\n    this._next()\n    add64(\n      this._state,\n      this._state[0]!,\n      this._state[1]!,\n      (<number> seedHi) >>> 0,\n      (<number> seedLo) >>> 0\n    )\n    this._next()\n    return this\n  }\n\n  /**\n   * Returns a copy of the internal state of this random number generator as a\n   * JavaScript Array.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  getState(): PCGRandomState {\n    return [this._state[0]!, this._state[1]!, this._state[2]!, this._state[3]!]\n  }\n\n  /**\n   * Restore state previously retrieved using `getState()`.\n   *\n   * @since 2.0.0\n   */\n  setState(state: PCGRandomState) {\n    this._state[0] = state[0]\n    this._state[1] = state[1]\n    this._state[2] = state[2]\n    this._state[3] = state[3] | 1\n  }\n\n  /**\n   * Get a uniformly distributed 32 bit integer between [0, max).\n   *\n   * @category getter\n   * @since 2.0.0\n   */\n  integer(max: number) {\n    return Math.round(this.number() * Number.MAX_SAFE_INTEGER) % max\n  }\n\n  /**\n   * Get a uniformly distributed IEEE-754 double between 0.0 and 1.0, with\n   * 53 bits of precision (every bit of the mantissa is randomized).\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  number() {\n    const hi = (this._next() & 0x03ffffff) * 1.0\n    const lo = (this._next() & 0x07ffffff) * 1.0\n    return (hi * BIT_27 + lo) / BIT_53\n  }\n\n  /** @internal */\n  private _next() {\n    // save current state (what we'll use for this number)\n    const oldHi = this._state[0]! >>> 0\n    const oldLo = this._state[1]! >>> 0\n\n    // churn LCG.\n    mul64(this._state, oldHi, oldLo, MUL_HI, MUL_LO)\n    add64(this._state, this._state[0]!, this._state[1]!, this._state[2]!, this._state[3]!)\n\n    // get least sig. 32 bits of ((oldstate >> 18) ^ oldstate) >> 27\n    let xsHi = oldHi >>> 18\n    let xsLo = ((oldLo >>> 18) | (oldHi << 14)) >>> 0\n    xsHi = (xsHi ^ oldHi) >>> 0\n    xsLo = (xsLo ^ oldLo) >>> 0\n    const xorshifted = ((xsLo >>> 27) | (xsHi << 5)) >>> 0\n    // rotate xorshifted right a random amount, based on the most sig. 5 bits\n    // bits of the old state.\n    const rot = oldHi >>> 27\n    const rot2 = ((-rot >>> 0) & 31) >>> 0\n    return ((xorshifted >>> rot) | (xorshifted << rot2)) >>> 0\n  }\n}\n\nfunction mul64(\n  out: Int32Array,\n  aHi: number,\n  aLo: number,\n  bHi: number,\n  bLo: number\n): void {\n  let c1 = ((aLo >>> 16) * (bLo & 0xffff)) >>> 0\n  let c0 = ((aLo & 0xffff) * (bLo >>> 16)) >>> 0\n\n  let lo = ((aLo & 0xffff) * (bLo & 0xffff)) >>> 0\n  let hi = ((aLo >>> 16) * (bLo >>> 16) + ((c0 >>> 16) + (c1 >>> 16))) >>> 0\n\n  c0 = (c0 << 16) >>> 0\n  lo = (lo + c0) >>> 0\n  if ((lo >>> 0) < (c0 >>> 0)) {\n    hi = (hi + 1) >>> 0\n  }\n\n  c1 = (c1 << 16) >>> 0\n  lo = (lo + c1) >>> 0\n  if ((lo >>> 0) < (c1 >>> 0)) {\n    hi = (hi + 1) >>> 0\n  }\n\n  hi = (hi + Math.imul(aLo, bHi)) >>> 0\n  hi = (hi + Math.imul(aHi, bLo)) >>> 0\n\n  out[0] = hi\n  out[1] = lo\n}\n\n// add two 64 bit numbers (given in parts), and store the result in `out`.\nfunction add64(\n  out: Int32Array,\n  aHi: number,\n  aLo: number,\n  bHi: number,\n  bLo: number\n): void {\n  let hi = (aHi + bHi) >>> 0\n  const lo = (aLo + bLo) >>> 0\n  if ((lo >>> 0) < (aLo >>> 0)) {\n    hi = (hi + 1) | 0\n  }\n  out[0] = hi\n  out[1] = lo\n}\n\n/**\n * @since 3.0.6\n */\nexport const YieldWrapTypeId: unique symbol = Symbol.for(\"effect/Utils/YieldWrap\")\n\n/**\n * @since 3.0.6\n */\nexport class YieldWrap<T> {\n  /**\n   * @since 3.0.6\n   */\n  readonly #value: T\n  constructor(value: T) {\n    this.#value = value\n  }\n  /**\n   * @since 3.0.6\n   */\n  [YieldWrapTypeId](): T {\n    return this.#value\n  }\n}\n\n/**\n * @since 3.0.6\n */\nexport function yieldWrapGet<T>(self: YieldWrap<T>): T {\n  if (typeof self === \"object\" && self !== null && YieldWrapTypeId in self) {\n    return self[YieldWrapTypeId]()\n  }\n  throw new Error(getBugErrorMessage(\"yieldWrapGet\"))\n}\n\n/**\n * Note: this is an experimental feature made available to allow custom matchers in tests, not to be directly used yet in user code\n *\n * @since 3.1.1\n * @status experimental\n * @category modifiers\n */\nexport const structuralRegionState = globalValue(\n  \"effect/Utils/isStructuralRegion\",\n  (): { enabled: boolean; tester: ((a: unknown, b: unknown) => boolean) | undefined } => ({\n    enabled: false,\n    tester: undefined\n  })\n)\n\n/**\n * Note: this is an experimental feature made available to allow custom matchers in tests, not to be directly used yet in user code\n *\n * @since 3.1.1\n * @status experimental\n * @category modifiers\n */\nexport const structuralRegion = <A>(body: () => A, tester?: (a: unknown, b: unknown) => boolean): A => {\n  const current = structuralRegionState.enabled\n  const currentTester = structuralRegionState.tester\n  structuralRegionState.enabled = true\n  if (tester) {\n    structuralRegionState.tester = tester\n  }\n  try {\n    return body()\n  } finally {\n    structuralRegionState.enabled = current\n    structuralRegionState.tester = currentTester\n  }\n}\n\nconst tracingFunction = (name: string) => {\n  const wrap = {\n    [name]<A>(body: () => A) {\n      return body()\n    }\n  }\n  return function<A>(fn: () => A): A {\n    return wrap[name](fn)\n  }\n}\n\n/**\n * @since 3.2.2\n * @status experimental\n * @category tracing\n */\nexport const internalCall = tracingFunction(\"effect_internal_function\")\n"],"names":["identity","globalValue","getBugErrorMessage","isNullable","isObject","GenKindTypeId","Symbol","for","isGenKind","u","GenKindImpl","value","constructor","_F","_R","_","_O","_E","iterator","SingleShotGen","self","called","next","a","done","return","throw","e","makeGenKind","kind","adapter","x","arguments","i","length","defaultIncHi","defaultIncLo","MUL_HI","MUL_LO","BIT_53","BIT_27","PCGRandom","_state","seedHi","seedLo","incHi","incLo","Math","random","Int32Array","_next","add64","getState","setState","state","integer","max","round","number","Number","MAX_SAFE_INTEGER","hi","lo","oldHi","oldLo","mul64","xsHi","xsLo","xorshifted","rot","rot2","out","aHi","aLo","bHi","bLo","c1","c0","imul","YieldWrapTypeId","YieldWrap","yieldWrapGet","Error","structuralRegionState","enabled","tester","undefined","structuralRegion","body","current","currentTester","tracingFunction","name","wrap","fn","internalCall"],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAIA,SAASC,WAAW,QAAQ,kBAAkB;AAG9C,SAASE,UAAU,EAAEC,QAAQ,QAAQ,gBAAgB;AAJrD,SAASJ,QAAQ,QAAQ,eAAe;AAGxC,SAASE,kBAAkB,QAAQ,sBAAsB;;;;;AAqBlD,MAAMG,aAAa,GAAA,WAAA,GAAkBC,MAAM,CAACC,GAAG,CAAC,oBAAoB,CAAC;AAsBrE,MAAMC,SAAS,IAAIC,CAAU,gNAA4CL,WAAAA,AAAQ,EAACK,CAAC,CAAC,IAAIJ,aAAa,IAAII,CAAC;AAM3G,MAAOC,WAAW;IAKXC,KAAA,CAAA;IAJXC,YACE;;MAGSD,KAA0B,CAAA;QAA1B,IAAA,CAAAA,KAAK,GAALA,KAAK;IACb;IAEH;;MAGA,IAAIE,EAAEA,CAAA,EAAA;QACJ,+MAAOb,WAAQ;IACjB;IAEA;;MAGA,IAAIc,EAAEA,CAAA,EAAA;QACJ,OAAQC,CAAI,IAAKA,CAAC;IACpB;IAEA;;MAGA,IAAIC,EAAEA,CAAA,EAAA;QACJ,QAAQD,CAAQ,GAAQA,CAAC;IAC3B;IAEA;;MAGA,IAAIE,EAAEA,CAAA,EAAA;QACJ,QAAQF,CAAQ,GAAQA,CAAC;IAC3B;IAEA;;MAGS,CAACV,aAAa,CAAA,GAA0BA,aAAa,CAAA;IAE9D;;MAGA,CAACC,MAAM,CAACY,QAAQ,CAAA,GAAC;QACf,OAAO,IAAIC,aAAa,CAA4B,IAAW,CAAC;IAClE;;AAOI,MAAOA,aAAa;IAGHC,IAAA,CAAA;IAFbC,MAAM,GAAG,KAAK,CAAA;IAEtBT,YAAqBQ,IAAO,CAAA;QAAP,IAAA,CAAAA,IAAI,GAAJA,IAAI;IAAM;IAE/B;;MAGAE,IAAIA,CAACC,CAAI,EAAA;QACP,OAAO,IAAI,CAACF,MAAM,GACf;YACCV,KAAK,EAAEY,CAAC;YACRC,IAAI,EAAE;SACP,GAAA,CACA,IAAI,CAACH,MAAM,GAAG,IAAI,EAChB;YACCV,KAAK,EAAE,IAAI,CAACS,IAAI;YAChBI,IAAI,EAAE;SACN,CAAC;IACT;IAEA;;MAGAC,MAAMA,CAACF,CAAI,EAAA;QACT,OAAQ;YACNZ,KAAK,EAAEY,CAAC;YACRC,IAAI,EAAE;SACP;IACH;IAEA;;MAGAE,KAAKA,CAACC,CAAU,EAAA;QACd,MAAMA,CAAC;IACT;IAEA;;MAGA,CAACrB,MAAM,CAACY,QAAQ,CAAA,GAAC;QACf,OAAO,IAAIC,aAAa,CAAO,IAAI,CAACC,IAAI,CAAC;IAC3C;;AAOK,MAAMQ,WAAW,IACtBC,IAAyB,GACE,IAAInB,WAAW,CAACmB,IAAI,CAAC;AAgU3C,MAAMC,OAAO,GAA2CA,CAAA,GAAO;QACpE,IAAIC,CAAC,GAAGC,SAAS,CAAC,CAAC,CAAC;QACpB,IAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,SAAS,CAACE,MAAM,EAAED,CAAC,EAAE,CAAE;YACzCF,CAAC,GAAGC,SAAS,CAACC,CAAC,CAAC,CAACF,CAAC,CAAC;QACrB;QACA,OAAO,IAAIrB,WAAW,CAACqB,CAAC,CAAQ;IAClC,CAAE;AAEF,MAAMI,YAAY,GAAG,UAAU;AAC/B,MAAMC,YAAY,GAAG,UAAU;AAC/B,MAAMC,MAAM,GAAG,UAAU,KAAK,CAAC;AAC/B,MAAMC,MAAM,GAAG,UAAU,KAAK,CAAC;AAC/B,MAAMC,MAAM,GAAG,kBAAkB;AACjC,MAAMC,MAAM,GAAG,WAAW;AAsBpB,MAAOC,SAAS;IACZC,MAAM,CAAA;IAoCd9B,YACE+B,MAAuB,EACvBC,MAAuB,EACvBC,KAAsB,EACtBC,KAAsB,CAAA;QAEtB,IAAI3C,0NAAAA,AAAU,EAACyC,MAAM,CAAC,iNAAIzC,aAAAA,AAAU,EAACwC,MAAM,CAAC,EAAE;YAC5CC,MAAM,GAAIG,IAAI,CAACC,MAAM,EAAE,GAAG,UAAU,KAAM,CAAC;YAC3CL,MAAM,GAAG,CAAC;QACZ,CAAC,MAAM,QAAIxC,sNAAAA,AAAU,EAACyC,MAAM,CAAC,EAAE;YAC7BA,MAAM,GAAGD,MAAM;YACfA,MAAM,GAAG,CAAC;QACZ;QACA,QAAIxC,sNAAAA,AAAU,EAAC2C,KAAK,CAAC,iNAAI3C,aAAAA,AAAU,EAAC0C,KAAK,CAAC,EAAE;YAC1CC,KAAK,GAAG,IAAI,CAACJ,MAAM,GAAG,IAAI,CAACA,MAAM,CAAC,CAAC,CAAC,GAAGN,YAAY;YACnDS,KAAK,GAAG,IAAI,CAACH,MAAM,GAAG,IAAI,CAACA,MAAM,CAAC,CAAC,CAAC,GAAGP,YAAY;QACrD,CAAC,MAAM,iNAAIhC,aAAAA,AAAU,EAAC2C,KAAK,CAAC,EAAE;YAC5BA,KAAK,GAAYD,KAAK;YACtBA,KAAK,GAAG,CAAC;QACX;QAEA,IAAI,CAACH,MAAM,GAAG,IAAIO,UAAU,CAAC;YAAC,CAAC;YAAE,CAAC;YAAYJ,KAAM,KAAK,CAAC;YAAE,CAAC,CAACC,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;SAAC,CAAC;QACtF,IAAI,CAACI,KAAK,EAAE;QACZC,KAAK,CACH,IAAI,CAACT,MAAM,EACX,IAAI,CAACA,MAAM,CAAC,CAAC,CAAE,EACf,IAAI,CAACA,MAAM,CAAC,CAAC,CAAE,EACLC,MAAO,KAAK,CAAC,EACbC,MAAO,KAAK,CAAC,CACxB;QACD,IAAI,CAACM,KAAK,EAAE;QACZ,OAAO,IAAI;IACb;IAEA;;;;;;MAOAE,QAAQA,CAAA,EAAA;QACN,OAAO;YAAC,IAAI,CAACV,MAAM,CAAC,CAAC,CAAE;YAAE,IAAI,CAACA,MAAM,CAAC,CAAC,CAAE;YAAE,IAAI,CAACA,MAAM,CAAC,CAAC,CAAE;YAAE,IAAI,CAACA,MAAM,CAAC,CAAC,CAAE;SAAC;IAC7E;IAEA;;;;MAKAW,QAAQA,CAACC,KAAqB,EAAA;QAC5B,IAAI,CAACZ,MAAM,CAAC,CAAC,CAAC,GAAGY,KAAK,CAAC,CAAC,CAAC;QACzB,IAAI,CAACZ,MAAM,CAAC,CAAC,CAAC,GAAGY,KAAK,CAAC,CAAC,CAAC;QACzB,IAAI,CAACZ,MAAM,CAAC,CAAC,CAAC,GAAGY,KAAK,CAAC,CAAC,CAAC;QACzB,IAAI,CAACZ,MAAM,CAAC,CAAC,CAAC,GAAGY,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;IAC/B;IAEA;;;;;MAMAC,OAAOA,CAACC,GAAW,EAAA;QACjB,OAAOT,IAAI,CAACU,KAAK,CAAC,IAAI,CAACC,MAAM,EAAE,GAAGC,MAAM,CAACC,gBAAgB,CAAC,GAAGJ,GAAG;IAClE;IAEA;;;;;;MAOAE,MAAMA,CAAA,EAAA;QACJ,MAAMG,EAAE,GAAG,CAAC,IAAI,CAACX,KAAK,EAAE,GAAG,UAAU,IAAI,GAAG;QAC5C,MAAMY,EAAE,GAAG,CAAC,IAAI,CAACZ,KAAK,EAAE,GAAG,UAAU,IAAI,GAAG;QAC5C,OAAO,CAACW,EAAE,GAAGrB,MAAM,GAAGsB,EAAE,IAAIvB,MAAM;IACpC;IAEA,cAAA,GACQW,KAAKA,CAAA,EAAA;QACX,sDAAA;QACA,MAAMa,KAAK,GAAG,IAAI,CAACrB,MAAM,CAAC,CAAC,CAAE,KAAK,CAAC;QACnC,MAAMsB,KAAK,GAAG,IAAI,CAACtB,MAAM,CAAC,CAAC,CAAE,KAAK,CAAC;QAEnC,aAAA;QACAuB,KAAK,CAAC,IAAI,CAACvB,MAAM,EAAEqB,KAAK,EAAEC,KAAK,EAAE3B,MAAM,EAAEC,MAAM,CAAC;QAChDa,KAAK,CAAC,IAAI,CAACT,MAAM,EAAE,IAAI,CAACA,MAAM,CAAC,CAAC,CAAE,EAAE,IAAI,CAACA,MAAM,CAAC,CAAC,CAAE,EAAE,IAAI,CAACA,MAAM,CAAC,CAAC,CAAE,EAAE,IAAI,CAACA,MAAM,CAAC,CAAC,CAAE,CAAC;QAEtF,gEAAA;QACA,IAAIwB,IAAI,GAAGH,KAAK,KAAK,EAAE;QACvB,IAAII,IAAI,GAAG,CAAEH,KAAK,KAAK,EAAE,GAAKD,KAAK,IAAI,EAAG,MAAM,CAAC;QACjDG,IAAI,GAAG,CAACA,IAAI,GAAGH,KAAK,MAAM,CAAC;QAC3BI,IAAI,GAAG,CAACA,IAAI,GAAGH,KAAK,MAAM,CAAC;QAC3B,MAAMI,UAAU,GAAG,CAAED,IAAI,KAAK,EAAE,GAAKD,IAAI,IAAI,CAAE,MAAM,CAAC;QACtD,yEAAA;QACA,yBAAA;QACA,MAAMG,GAAG,GAAGN,KAAK,KAAK,EAAE;QACxB,MAAMO,IAAI,GAAG,CAAE,CAACD,GAAG,KAAK,CAAC,GAAI,EAAE,MAAM,CAAC;QACtC,OAAO,CAAED,UAAU,KAAKC,GAAG,GAAKD,UAAU,IAAIE,IAAK,MAAM,CAAC;IAC5D;;AAGF,SAASL,KAAKA,CACZM,GAAe,EACfC,GAAW,EACXC,GAAW,EACXC,GAAW,EACXC,GAAW;IAEX,IAAIC,EAAE,GAAI,CAACH,GAAG,KAAK,EAAE,IAAA,CAAKE,GAAG,GAAG,MAAM,CAAC,KAAM,CAAC;IAC9C,IAAIE,EAAE,GAAI,CAACJ,GAAG,GAAG,MAAM,IAAA,CAAKE,GAAG,KAAK,EAAE,CAAC,KAAM,CAAC;IAE9C,IAAIb,EAAE,GAAI,CAACW,GAAG,GAAG,MAAM,IAAA,CAAKE,GAAG,GAAG,MAAM,CAAC,KAAM,CAAC;IAChD,IAAId,EAAE,GAAI,CAACY,GAAG,KAAK,EAAE,IAAA,CAAKE,GAAG,KAAK,EAAE,CAAC,GAAA,CAAI,CAACE,EAAE,KAAK,EAAE,IAAA,CAAKD,EAAE,KAAK,EAAE,CAAC,CAAC,KAAM,CAAC;IAE1EC,EAAE,GAAIA,EAAE,IAAI,EAAE,KAAM,CAAC;IACrBf,EAAE,GAAIA,EAAE,GAAGe,EAAE,KAAM,CAAC;IACpB,IAAKf,EAAE,KAAK,CAAC,GAAKe,EAAE,KAAK,CAAE,EAAE;QAC3BhB,EAAE,GAAIA,EAAE,GAAG,CAAC,KAAM,CAAC;IACrB;IAEAe,EAAE,GAAIA,EAAE,IAAI,EAAE,KAAM,CAAC;IACrBd,EAAE,GAAIA,EAAE,GAAGc,EAAE,KAAM,CAAC;IACpB,IAAKd,EAAE,KAAK,CAAC,GAAKc,EAAE,KAAK,CAAE,EAAE;QAC3Bf,EAAE,GAAIA,EAAE,GAAG,CAAC,KAAM,CAAC;IACrB;IAEAA,EAAE,GAAIA,EAAE,GAAGd,IAAI,CAAC+B,IAAI,CAACL,GAAG,EAAEC,GAAG,CAAC,KAAM,CAAC;IACrCb,EAAE,GAAIA,EAAE,GAAGd,IAAI,CAAC+B,IAAI,CAACN,GAAG,EAAEG,GAAG,CAAC,KAAM,CAAC;IAErCJ,GAAG,CAAC,CAAC,CAAC,GAAGV,EAAE;IACXU,GAAG,CAAC,CAAC,CAAC,GAAGT,EAAE;AACb;AAEA,0EAAA;AACA,SAASX,KAAKA,CACZoB,GAAe,EACfC,GAAW,EACXC,GAAW,EACXC,GAAW,EACXC,GAAW;IAEX,IAAId,EAAE,GAAIW,GAAG,GAAGE,GAAG,KAAM,CAAC;IAC1B,MAAMZ,EAAE,GAAIW,GAAG,GAAGE,GAAG,KAAM,CAAC;IAC5B,IAAKb,EAAE,KAAK,CAAC,GAAKW,GAAG,KAAK,CAAE,EAAE;QAC5BZ,EAAE,GAAIA,EAAE,GAAG,CAAC,GAAI,CAAC;IACnB;IACAU,GAAG,CAAC,CAAC,CAAC,GAAGV,EAAE;IACXU,GAAG,CAAC,CAAC,CAAC,GAAGT,EAAE;AACb;AAKO,MAAMiB,eAAe,GAAA,WAAA,GAAkBzE,MAAM,CAACC,GAAG,CAAC,wBAAwB,CAAC;AAK5E,MAAOyE,SAAS;IACpB;;OAGS,CAAArE,IAAM,CAAA;IACfC,YAAYD,KAAQ,CAAA;QAClB,IAAI,EAAC,CAAAA,IAAM,GAAGA,KAAK;IACrB;IACA;;MAGA,CAACoE,eAAe,CAAA,GAAC;QACf,OAAO,IAAI,EAAC,CAAApE,IAAM;IACpB;;AAMI,SAAUsE,YAAYA,CAAI7D,IAAkB;IAChD,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,IAAI,IAAI2D,eAAe,IAAI3D,IAAI,EAAE;QACxE,OAAOA,IAAI,CAAC2D,eAAe,CAAC,EAAE;IAChC;IACA,MAAM,IAAIG,KAAK,uNAAChF,qBAAAA,AAAkB,EAAC,cAAc,CAAC,CAAC;AACrD;AASO,MAAMiF,qBAAqB,GAAA,WAAA,kNAAGlF,cAAAA,AAAW,EAC9C,iCAAiC,EACjC,IAAA,CAAwF;QACtFmF,OAAO,EAAE,KAAK;QACdC,MAAM,EAAEC;KACT,CAAC,CACH;AASM,MAAMC,gBAAgB,GAAGA,CAAIC,IAAa,EAAEH,MAA4C,KAAO;IACpG,MAAMI,OAAO,GAAGN,qBAAqB,CAACC,OAAO;IAC7C,MAAMM,aAAa,GAAGP,qBAAqB,CAACE,MAAM;IAClDF,qBAAqB,CAACC,OAAO,GAAG,IAAI;IACpC,IAAIC,MAAM,EAAE;QACVF,qBAAqB,CAACE,MAAM,GAAGA,MAAM;IACvC;IACA,IAAI;QACF,OAAOG,IAAI,EAAE;IACf,CAAC,QAAS;QACRL,qBAAqB,CAACC,OAAO,GAAGK,OAAO;QACvCN,qBAAqB,CAACE,MAAM,GAAGK,aAAa;IAC9C;AACF,CAAC;AAED,MAAMC,eAAe,IAAIC,IAAY,IAAI;IACvC,MAAMC,IAAI,GAAG;QACX,CAACD,IAAI,CAAA,EAAKJ,IAAa;YACrB,OAAOA,IAAI,EAAE;QACf;KACD;IACD,OAAO,SAAYM,EAAW;QAC5B,OAAOD,IAAI,CAACD,IAAI,CAAC,CAACE,EAAE,CAAC;IACvB,CAAC;AACH,CAAC;AAOM,MAAMC,YAAY,GAAA,WAAA,GAAGJ,eAAe,CAAC,0BAA0B,CAAC","ignoreList":[0]}},
    {"offset": {"line": 671, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 677, "column": 0}, "map": {"version":3,"file":"Hash.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Hash.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport { pipe } from \"./Function.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport { hasProperty } from \"./Predicate.js\"\nimport { structuralRegionState } from \"./Utils.js\"\n\n/** @internal */\nconst randomHashCache = globalValue(\n  Symbol.for(\"effect/Hash/randomHashCache\"),\n  () => new WeakMap<object, number>()\n)\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const symbol: unique symbol = Symbol.for(\"effect/Hash\")\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Hash {\n  [symbol](): number\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const hash: <A>(self: A) => number = <A>(self: A) => {\n  if (structuralRegionState.enabled === true) {\n    return 0\n  }\n\n  switch (typeof self) {\n    case \"number\":\n      return number(self)\n    case \"bigint\":\n      return string(self.toString(10))\n    case \"boolean\":\n      return string(String(self))\n    case \"symbol\":\n      return string(String(self))\n    case \"string\":\n      return string(self)\n    case \"undefined\":\n      return string(\"undefined\")\n    case \"function\":\n    case \"object\": {\n      if (self === null) {\n        return string(\"null\")\n      } else if (self instanceof Date) {\n        return hash(self.toISOString())\n      } else if (isHash(self)) {\n        return self[symbol]()\n      } else {\n        return random(self)\n      }\n    }\n    default:\n      throw new Error(\n        `BUG: unhandled typeof ${typeof self} - please report an issue at https://github.com/Effect-TS/effect/issues`\n      )\n  }\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const random: <A extends object>(self: A) => number = (self) => {\n  if (!randomHashCache.has(self)) {\n    randomHashCache.set(self, number(Math.floor(Math.random() * Number.MAX_SAFE_INTEGER)))\n  }\n  return randomHashCache.get(self)!\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const combine: (b: number) => (self: number) => number = (b) => (self) => (self * 53) ^ b\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const optimize = (n: number): number => (n & 0xbfffffff) | ((n >>> 1) & 0x40000000)\n\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isHash = (u: unknown): u is Hash => hasProperty(u, symbol)\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const number = (n: number) => {\n  if (n !== n || n === Infinity) {\n    return 0\n  }\n  let h = n | 0\n  if (h !== n) {\n    h ^= n * 0xffffffff\n  }\n  while (n > 0xffffffff) {\n    h ^= n /= 0xffffffff\n  }\n  return optimize(h)\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const string = (str: string) => {\n  let h = 5381, i = str.length\n  while (i) {\n    h = (h * 33) ^ str.charCodeAt(--i)\n  }\n  return optimize(h)\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const structureKeys = <A extends object>(o: A, keys: ReadonlyArray<keyof A>) => {\n  let h = 12289\n  for (let i = 0; i < keys.length; i++) {\n    h ^= pipe(string(keys[i]! as string), combine(hash((o as any)[keys[i]!])))\n  }\n  return optimize(h)\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const structure = <A extends object>(o: A) =>\n  structureKeys(o, Object.keys(o) as unknown as ReadonlyArray<keyof A>)\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const array = <A>(arr: ReadonlyArray<A>) => {\n  let h = 6151\n  for (let i = 0; i < arr.length; i++) {\n    h = pipe(h, combine(hash(arr[i])))\n  }\n  return optimize(h)\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const cached: {\n  /**\n   * @since 2.0.0\n   * @category hashing\n   */\n  (self: object): (hash: number) => number\n  /**\n   * @since 2.0.0\n   * @category hashing\n   */\n  (self: object, hash: number): number\n} = function() {\n  if (arguments.length === 1) {\n    const self = arguments[0] as object\n    return function(hash: number) {\n      Object.defineProperty(self, symbol, {\n        value() {\n          return hash\n        },\n        enumerable: false\n      })\n      return hash\n    } as any\n  }\n  const self = arguments[0] as object\n  const hash = arguments[1] as number\n  Object.defineProperty(self, symbol, {\n    value() {\n      return hash\n    },\n    enumerable: false\n  })\n\n  return hash\n}\n"],"names":["pipe","globalValue","hasProperty","structuralRegionState","randomHashCache","Symbol","for","WeakMap","symbol","hash","self","enabled","number","string","toString","String","Date","toISOString","isHash","random","Error","has","set","Math","floor","Number","MAX_SAFE_INTEGER","get","combine","b","optimize","n","u","Infinity","h","str","i","length","charCodeAt","structureKeys","o","keys","structure","Object","array","arr","cached","arguments","defineProperty","value","enumerable"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 804, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 810, "column": 0}, "map": {"version":3,"file":"Equal.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Equal.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type { Equivalence } from \"./Equivalence.js\"\nimport * as Hash from \"./Hash.js\"\nimport { hasProperty } from \"./Predicate.js\"\nimport { structuralRegionState } from \"./Utils.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const symbol: unique symbol = Symbol.for(\"effect/Equal\")\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Equal extends Hash.Hash {\n  [symbol](that: Equal): boolean\n}\n\n/**\n * @since 2.0.0\n * @category equality\n */\nexport function equals<B>(that: B): <A>(self: A) => boolean\nexport function equals<A, B>(self: A, that: B): boolean\nexport function equals(): any {\n  if (arguments.length === 1) {\n    return (self: unknown) => compareBoth(self, arguments[0])\n  }\n  return compareBoth(arguments[0], arguments[1])\n}\n\nfunction compareBoth(self: unknown, that: unknown): boolean {\n  if (self === that) {\n    return true\n  }\n  const selfType = typeof self\n  if (selfType !== typeof that) {\n    return false\n  }\n  if (selfType === \"object\" || selfType === \"function\") {\n    if (self !== null && that !== null) {\n      if (isEqual(self) && isEqual(that)) {\n        if (Hash.hash(self) === Hash.hash(that) && self[symbol](that)) {\n          return true\n        } else {\n          return structuralRegionState.enabled && structuralRegionState.tester\n            ? structuralRegionState.tester(self, that)\n            : false\n        }\n      } else if (self instanceof Date && that instanceof Date) {\n        return self.toISOString() === that.toISOString()\n      }\n    }\n    if (structuralRegionState.enabled) {\n      if (Array.isArray(self) && Array.isArray(that)) {\n        return self.length === that.length && self.every((v, i) => compareBoth(v, that[i]))\n      }\n      if (Object.getPrototypeOf(self) === Object.prototype && Object.getPrototypeOf(self) === Object.prototype) {\n        const keysSelf = Object.keys(self as any)\n        const keysThat = Object.keys(that as any)\n        if (keysSelf.length === keysThat.length) {\n          for (const key of keysSelf) {\n            // @ts-expect-error\n            if (!(key in that && compareBoth(self[key], that[key]))) {\n              return structuralRegionState.tester ? structuralRegionState.tester(self, that) : false\n            }\n          }\n          return true\n        }\n      }\n      return structuralRegionState.tester ? structuralRegionState.tester(self, that) : false\n    }\n  }\n\n  return structuralRegionState.enabled && structuralRegionState.tester\n    ? structuralRegionState.tester(self, that)\n    : false\n}\n\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isEqual = (u: unknown): u is Equal => hasProperty(u, symbol)\n\n/**\n * @since 2.0.0\n * @category instances\n */\nexport const equivalence: <A>() => Equivalence<A> = () => equals\n"],"names":["Hash","hasProperty","structuralRegionState","symbol","Symbol","for","equals","arguments","length","self","compareBoth","that","selfType","isEqual","hash","enabled","tester","Date","toISOString","Array","isArray","every","v","i","Object","getPrototypeOf","prototype","keysSelf","keys","keysThat","key","u","equivalence"],"mappings":";;;;;;AAKA,SAASC,WAAW,QAAQ,gBAAgB;AAD5C,OAAO,KAAKD,IAAI,MAAM,WAAW;AAEjC,SAASE,qBAAqB,QAAQ,YAAY;;;;AAM3C,MAAMC,MAAM,GAAA,WAAA,GAAkBC,MAAM,CAACC,GAAG,CAAC,cAAc,CAAC;AAgBzD,SAAUC,MAAMA,CAAA;IACpB,IAAIC,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;QAC1B,QAAQC,IAAa,GAAKC,WAAW,CAACD,IAAI,EAAEF,SAAS,CAAC,CAAC,CAAC,CAAC;IAC3D;IACA,OAAOG,WAAW,CAACH,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,CAAC;AAChD;AAEA,SAASG,WAAWA,CAACD,IAAa,EAAEE,IAAa;IAC/C,IAAIF,IAAI,KAAKE,IAAI,EAAE;QACjB,OAAO,IAAI;IACb;IACA,MAAMC,QAAQ,GAAG,OAAOH,IAAI;IAC5B,IAAIG,QAAQ,KAAK,OAAOD,IAAI,EAAE;QAC5B,OAAO,KAAK;IACd;IACA,IAAIC,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,UAAU,EAAE;QACpD,IAAIH,IAAI,KAAK,IAAI,IAAIE,IAAI,KAAK,IAAI,EAAE;YAClC,IAAIE,OAAO,CAACJ,IAAI,CAAC,IAAII,OAAO,CAACF,IAAI,CAAC,EAAE;gBAClC,IAAIX,IAAI,gMAACc,IAAI,CAACL,IAAI,CAAC,KAAKT,IAAI,gMAACc,IAAI,CAACH,IAAI,CAAC,IAAIF,IAAI,CAACN,MAAM,CAAC,CAACQ,IAAI,CAAC,EAAE;oBAC7D,OAAO,IAAI;gBACb,CAAC,MAAM;oBACL,4MAAOT,wBAAqB,CAACa,OAAO,yMAAIb,wBAAqB,CAACc,MAAM,wMAChEd,wBAAqB,CAACc,MAAM,CAACP,IAAI,EAAEE,IAAI,CAAC,GACxC,KAAK;gBACX;YACF,CAAC,MAAM,IAAIF,IAAI,YAAYQ,IAAI,IAAIN,IAAI,YAAYM,IAAI,EAAE;gBACvD,OAAOR,IAAI,CAACS,WAAW,EAAE,KAAKP,IAAI,CAACO,WAAW,EAAE;YAClD;QACF;QACA,IAAIhB,6NAAqB,CAACa,OAAO,EAAE;YACjC,IAAII,KAAK,CAACC,OAAO,CAACX,IAAI,CAAC,IAAIU,KAAK,CAACC,OAAO,CAACT,IAAI,CAAC,EAAE;gBAC9C,OAAOF,IAAI,CAACD,MAAM,KAAKG,IAAI,CAACH,MAAM,IAAIC,IAAI,CAACY,KAAK,CAAC,CAACC,CAAC,EAAEC,CAAC,GAAKb,WAAW,CAACY,CAAC,EAAEX,IAAI,CAACY,CAAC,CAAC,CAAC,CAAC;YACrF;YACA,IAAIC,MAAM,CAACC,cAAc,CAAChB,IAAI,CAAC,KAAKe,MAAM,CAACE,SAAS,IAAIF,MAAM,CAACC,cAAc,CAAChB,IAAI,CAAC,KAAKe,MAAM,CAACE,SAAS,EAAE;gBACxG,MAAMC,QAAQ,GAAGH,MAAM,CAACI,IAAI,CAACnB,IAAW,CAAC;gBACzC,MAAMoB,QAAQ,GAAGL,MAAM,CAACI,IAAI,CAACjB,IAAW,CAAC;gBACzC,IAAIgB,QAAQ,CAACnB,MAAM,KAAKqB,QAAQ,CAACrB,MAAM,EAAE;oBACvC,KAAK,MAAMsB,GAAG,IAAIH,QAAQ,CAAE;wBAC1B,mBAAA;wBACA,IAAI,CAAA,CAAEG,GAAG,IAAInB,IAAI,IAAID,WAAW,CAACD,IAAI,CAACqB,GAAG,CAAC,EAAEnB,IAAI,CAACmB,GAAG,CAAC,CAAC,CAAC,EAAE;4BACvD,OAAO5B,6NAAqB,CAACc,MAAM,wMAAGd,wBAAqB,CAACc,MAAM,CAACP,IAAI,EAAEE,IAAI,CAAC,GAAG,KAAK;wBACxF;oBACF;oBACA,OAAO,IAAI;gBACb;YACF;YACA,4MAAOT,wBAAqB,CAACc,MAAM,wMAAGd,wBAAqB,CAACc,MAAM,CAACP,IAAI,EAAEE,IAAI,CAAC,GAAG,KAAK;QACxF;IACF;IAEA,4MAAOT,wBAAqB,CAACa,OAAO,IAAIb,6NAAqB,CAACc,MAAM,wMAChEd,wBAAqB,CAACc,MAAM,CAACP,IAAI,EAAEE,IAAI,CAAC,GACxC,KAAK;AACX;AAMO,MAAME,OAAO,IAAIkB,CAAU,gNAAiB9B,cAAAA,AAAW,EAAC8B,CAAC,EAAE5B,MAAM,CAAC;AAMlE,MAAM6B,WAAW,GAA4BA,CAAA,GAAM1B,MAAM","ignoreList":[0]}},
    {"offset": {"line": 873, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 879, "column": 0}, "map": {"version":3,"file":"Pipeable.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Pipeable.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Pipeable {\n  pipe<A>(this: A): A\n  pipe<A, B = never>(this: A, ab: (_: A) => B): B\n  pipe<A, B = never, C = never>(this: A, ab: (_: A) => B, bc: (_: B) => C): C\n  pipe<A, B = never, C = never, D = never>(this: A, ab: (_: A) => B, bc: (_: B) => C, cd: (_: C) => D): D\n  pipe<A, B = never, C = never, D = never, E = never>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E\n  ): E\n  pipe<A, B = never, C = never, D = never, E = never, F = never>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F\n  ): F\n  pipe<A, B = never, C = never, D = never, E = never, F = never, G = never>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G\n  ): G\n  pipe<A, B = never, C = never, D = never, E = never, F = never, G = never, H = never>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H\n  ): H\n  pipe<A, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I\n  ): I\n  pipe<A, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J\n  ): J\n  pipe<A, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K\n  ): K\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L\n  ): L\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M\n  ): M\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N\n  ): N\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never,\n    O = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O\n  ): O\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never,\n    O = never,\n    P = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P\n  ): P\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never,\n    O = never,\n    P = never,\n    Q = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q\n  ): Q\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never,\n    O = never,\n    P = never,\n    Q = never,\n    R = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R\n  ): R\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never,\n    O = never,\n    P = never,\n    Q = never,\n    R = never,\n    S = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R,\n    rs: (_: R) => S\n  ): S\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never,\n    O = never,\n    P = never,\n    Q = never,\n    R = never,\n    S = never,\n    T = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R,\n    rs: (_: R) => S,\n    st: (_: S) => T\n  ): T\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never,\n    O = never,\n    P = never,\n    Q = never,\n    R = never,\n    S = never,\n    T = never,\n    U = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R,\n    rs: (_: R) => S,\n    st: (_: S) => T,\n    tu: (_: T) => U\n  ): U\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never,\n    O = never,\n    P = never,\n    Q = never,\n    R = never,\n    S = never,\n    T = never,\n    U = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R,\n    rs: (_: R) => S,\n    st: (_: S) => T,\n    tu: (_: T) => U\n  ): U\n}\n\n/**\n * @since 2.0.0\n */\nexport const pipeArguments = <A>(self: A, args: IArguments): unknown => {\n  switch (args.length) {\n    case 0:\n      return self\n    case 1:\n      return args[0](self)\n    case 2:\n      return args[1](args[0](self))\n    case 3:\n      return args[2](args[1](args[0](self)))\n    case 4:\n      return args[3](args[2](args[1](args[0](self))))\n    case 5:\n      return args[4](args[3](args[2](args[1](args[0](self)))))\n    case 6:\n      return args[5](args[4](args[3](args[2](args[1](args[0](self))))))\n    case 7:\n      return args[6](args[5](args[4](args[3](args[2](args[1](args[0](self)))))))\n    case 8:\n      return args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self))))))))\n    case 9:\n      return args[8](args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self)))))))))\n    default: {\n      let ret = self\n      for (let i = 0, len = args.length; i < len; i++) {\n        ret = args[i](ret)\n      }\n      return ret\n    }\n  }\n}\n"],"names":["pipeArguments","self","args","length","ret","i","len"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 918, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 924, "column": 0}, "map": {"version":3,"file":"Inspectable.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Inspectable.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\n\nimport type * as FiberRefs from \"./FiberRefs.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport { hasProperty, isFunction } from \"./Predicate.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const NodeInspectSymbol = Symbol.for(\"nodejs.util.inspect.custom\")\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type NodeInspectSymbol = typeof NodeInspectSymbol\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Inspectable {\n  toString(): string\n  toJSON(): unknown\n  [NodeInspectSymbol](): unknown\n}\n\n/**\n * @since 2.0.0\n */\nexport const toJSON = (x: unknown): unknown => {\n  if (\n    hasProperty(x, \"toJSON\") && isFunction(x[\"toJSON\"]) &&\n    x[\"toJSON\"].length === 0\n  ) {\n    return x.toJSON()\n  } else if (Array.isArray(x)) {\n    return x.map(toJSON)\n  }\n  return redact(x)\n}\n\n/**\n * @since 2.0.0\n */\nexport const format = (x: unknown): string => JSON.stringify(x, null, 2)\n\n/**\n * @since 2.0.0\n */\nexport const BaseProto: Inspectable = {\n  toJSON() {\n    return toJSON(this)\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  toString() {\n    return format(this.toJSON())\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport abstract class Class {\n  /**\n   * @since 2.0.0\n   */\n  abstract toJSON(): unknown\n  /**\n   * @since 2.0.0\n   */\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n  /**\n   * @since 2.0.0\n   */\n  toString() {\n    return format(this.toJSON())\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport const toStringUnknown = (u: unknown, whitespace: number | string | undefined = 2): string => {\n  if (typeof u === \"string\") {\n    return u\n  }\n  try {\n    return typeof u === \"object\" ? stringifyCircular(u, whitespace) : String(u)\n  } catch (_) {\n    return String(u)\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport const stringifyCircular = (obj: unknown, whitespace?: number | string | undefined): string => {\n  let cache: Array<unknown> = []\n  const retVal = JSON.stringify(\n    obj,\n    (_key, value) =>\n      typeof value === \"object\" && value !== null\n        ? cache.includes(value)\n          ? undefined // circular reference\n          : cache.push(value) && (redactableState.fiberRefs !== undefined && isRedactable(value)\n            ? value[symbolRedactable](redactableState.fiberRefs)\n            : value)\n        : value,\n    whitespace\n  )\n  ;(cache as any) = undefined\n  return retVal\n}\n\n/**\n * @since 3.10.0\n * @category redactable\n */\nexport interface Redactable {\n  readonly [symbolRedactable]: (fiberRefs: FiberRefs.FiberRefs) => unknown\n}\n\n/**\n * @since 3.10.0\n * @category redactable\n */\nexport const symbolRedactable: unique symbol = Symbol.for(\"effect/Inspectable/Redactable\")\n\n/**\n * @since 3.10.0\n * @category redactable\n */\nexport const isRedactable = (u: unknown): u is Redactable =>\n  typeof u === \"object\" && u !== null && symbolRedactable in u\n\nconst redactableState = globalValue(\"effect/Inspectable/redactableState\", () => ({\n  fiberRefs: undefined as FiberRefs.FiberRefs | undefined\n}))\n\n/**\n * @since 3.10.0\n * @category redactable\n */\nexport const withRedactableContext = <A>(context: FiberRefs.FiberRefs, f: () => A): A => {\n  const prev = redactableState.fiberRefs\n  redactableState.fiberRefs = context\n  try {\n    return f()\n  } finally {\n    redactableState.fiberRefs = prev\n  }\n}\n\n/**\n * @since 3.10.0\n * @category redactable\n */\nexport const redact = (u: unknown): unknown => {\n  if (isRedactable(u) && redactableState.fiberRefs !== undefined) {\n    return u[symbolRedactable](redactableState.fiberRefs)\n  }\n  return u\n}\n"],"names":["globalValue","hasProperty","isFunction","NodeInspectSymbol","Symbol","for","toJSON","x","length","Array","isArray","map","redact","format","JSON","stringify","BaseProto","toString","Class","toStringUnknown","u","whitespace","stringifyCircular","String","_","obj","cache","retVal","_key","value","includes","undefined","push","redactableState","fiberRefs","isRedactable","symbolRedactable","withRedactableContext","context","f","prev"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1013, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1019, "column": 0}, "map": {"version":3,"file":"Equivalence.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Equivalence.ts"],"sourcesContent":["/**\n * This module provides an implementation of the `Equivalence` type class, which defines a binary relation\n * that is reflexive, symmetric, and transitive. In other words, it defines a notion of equivalence between values of a certain type.\n * These properties are also known in mathematics as an \"equivalence relation\".\n *\n * @since 2.0.0\n */\nimport { dual } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\n\n/**\n * @category type class\n * @since 2.0.0\n */\nexport interface Equivalence<in A> {\n  (self: A, that: A): boolean\n}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface EquivalenceTypeLambda extends TypeLambda {\n  readonly type: Equivalence<this[\"Target\"]>\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <A>(isEquivalent: (self: A, that: A) => boolean): Equivalence<A> => (self: A, that: A): boolean =>\n  self === that || isEquivalent(self, that)\n\nconst isStrictEquivalent = (x: unknown, y: unknown) => x === y\n\n/**\n * Return an `Equivalence` that uses strict equality (===) to compare values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const strict: <A>() => Equivalence<A> = () => isStrictEquivalent\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const string: Equivalence<string> = strict()\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const number: Equivalence<number> = strict()\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const boolean: Equivalence<boolean> = strict()\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const bigint: Equivalence<bigint> = strict()\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const symbol: Equivalence<symbol> = strict()\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combine: {\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A>(that: Equivalence<A>): (self: Equivalence<A>) => Equivalence<A>\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A>(self: Equivalence<A>, that: Equivalence<A>): Equivalence<A>\n} = dual(2, <A>(self: Equivalence<A>, that: Equivalence<A>): Equivalence<A> => make((x, y) => self(x, y) && that(x, y)))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineMany: {\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A>(collection: Iterable<Equivalence<A>>): (self: Equivalence<A>) => Equivalence<A>\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A>(self: Equivalence<A>, collection: Iterable<Equivalence<A>>): Equivalence<A>\n} = dual(2, <A>(self: Equivalence<A>, collection: Iterable<Equivalence<A>>): Equivalence<A> =>\n  make((x, y) => {\n    if (!self(x, y)) {\n      return false\n    }\n    for (const equivalence of collection) {\n      if (!equivalence(x, y)) {\n        return false\n      }\n    }\n    return true\n  }))\n\nconst isAlwaysEquivalent: Equivalence<unknown> = (_x, _y) => true\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineAll = <A>(collection: Iterable<Equivalence<A>>): Equivalence<A> =>\n  combineMany(isAlwaysEquivalent, collection)\n\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const mapInput: {\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <B, A>(f: (b: B) => A): (self: Equivalence<A>) => Equivalence<B>\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <A, B>(self: Equivalence<A>, f: (b: B) => A): Equivalence<B>\n} = dual(\n  2,\n  <A, B>(self: Equivalence<A>, f: (b: B) => A): Equivalence<B> => make((x, y) => self(f(x), f(y)))\n)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Date: Equivalence<Date> = mapInput(number, (date) => date.getTime())\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const product: {\n  <B>(that: Equivalence<B>): <A>(self: Equivalence<A>) => Equivalence<readonly [A, B]> // readonly because invariant\n  <A, B>(self: Equivalence<A>, that: Equivalence<B>): Equivalence<readonly [A, B]> // readonly because invariant\n} = dual(\n  2,\n  <A, B>(self: Equivalence<A>, that: Equivalence<B>): Equivalence<readonly [A, B]> =>\n    make(([xa, xb], [ya, yb]) => self(xa, ya) && that(xb, yb))\n)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const all = <A>(collection: Iterable<Equivalence<A>>): Equivalence<ReadonlyArray<A>> => {\n  return make((x, y) => {\n    const len = Math.min(x.length, y.length)\n\n    let collectionLength = 0\n    for (const equivalence of collection) {\n      if (collectionLength >= len) {\n        break\n      }\n      if (!equivalence(x[collectionLength], y[collectionLength])) {\n        return false\n      }\n      collectionLength++\n    }\n    return true\n  })\n}\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const productMany = <A>(\n  self: Equivalence<A>,\n  collection: Iterable<Equivalence<A>>\n): Equivalence<readonly [A, ...Array<A>]> /* readonly because invariant */ => {\n  const equivalence = all(collection)\n  return make((x, y) => !self(x[0], y[0]) ? false : equivalence(x.slice(1), y.slice(1)))\n}\n\n/**\n * Similar to `Promise.all` but operates on `Equivalence`s.\n *\n * ```\n * [Equivalence<A>, Equivalence<B>, ...] -> Equivalence<[A, B, ...]>\n * ```\n *\n * Given a tuple of `Equivalence`s returns a new `Equivalence` that compares values of a tuple\n * by applying each `Equivalence` to the corresponding element of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const tuple = <T extends ReadonlyArray<Equivalence<any>>>(\n  ...elements: T\n): Equivalence<Readonly<{ [I in keyof T]: [T[I]] extends [Equivalence<infer A>] ? A : never }>> => all(elements) as any\n\n/**\n * Creates a new `Equivalence` for an array of values based on a given `Equivalence` for the elements of the array.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const array = <A>(item: Equivalence<A>): Equivalence<ReadonlyArray<A>> =>\n  make((self, that) => {\n    if (self.length !== that.length) {\n      return false\n    }\n\n    for (let i = 0; i < self.length; i++) {\n      const isEq = item(self[i], that[i])\n      if (!isEq) {\n        return false\n      }\n    }\n\n    return true\n  })\n\n/**\n * Given a struct of `Equivalence`s returns a new `Equivalence` that compares values of a struct\n * by applying each `Equivalence` to the corresponding property of the struct.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const struct = <R extends Record<string, Equivalence<any>>>(\n  fields: R\n): Equivalence<{ readonly [K in keyof R]: [R[K]] extends [Equivalence<infer A>] ? A : never }> => {\n  const keys = Object.keys(fields)\n  return make((self, that) => {\n    for (const key of keys) {\n      if (!fields[key](self[key], that[key])) {\n        return false\n      }\n    }\n    return true\n  })\n}\n"],"names":["dual","make","isEquivalent","self","that","isStrictEquivalent","x","y","strict","string","number","boolean","bigint","symbol","combine","combineMany","collection","equivalence","isAlwaysEquivalent","_x","_y","combineAll","mapInput","f","Date","date","getTime","product","xa","xb","ya","yb","all","len","Math","min","length","collectionLength","productMany","slice","tuple","elements","array","item","i","isEq","struct","fields","keys","Object","key"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1116, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1122, "column": 0}, "map": {"version":3,"file":"Either.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Either.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\n\nimport * as Equivalence from \"./Equivalence.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { constNull, constUndefined, dual, identity } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as doNotation from \"./internal/doNotation.js\"\nimport * as either from \"./internal/either.js\"\nimport type { Option } from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport { isFunction } from \"./Predicate.js\"\nimport type { Covariant, NoInfer, NotFunction } from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\nimport * as Gen from \"./Utils.js\"\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport type Either<R, L = never> = Left<L, R> | Right<L, R>\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport const TypeId: unique symbol = either.TypeId\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Left<out L, out R> extends Pipeable, Inspectable {\n  readonly _tag: \"Left\"\n  readonly _op: \"Left\"\n  readonly left: L\n  readonly [TypeId]: {\n    readonly _R: Covariant<R>\n    readonly _L: Covariant<L>\n  }\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: EitherUnify<this>\n  [Unify.ignoreSymbol]?: EitherUnifyIgnore\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Right<out L, out R> extends Pipeable, Inspectable {\n  readonly _tag: \"Right\"\n  readonly _op: \"Right\"\n  readonly right: R\n  readonly [TypeId]: {\n    readonly _R: Covariant<R>\n    readonly _L: Covariant<L>\n  }\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: EitherUnify<this>\n  [Unify.ignoreSymbol]?: EitherUnifyIgnore\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface EitherUnify<A extends { [Unify.typeSymbol]?: any }> {\n  Either?: () => A[Unify.typeSymbol] extends Either<infer R0, infer L0> | infer _ ? Either<R0, L0> : never\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface EitherUnifyIgnore {}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface EitherTypeLambda extends TypeLambda {\n  readonly type: Either<this[\"Target\"], this[\"Out1\"]>\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Either {\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Left<T extends Either<any, any>> = [T] extends [Either<infer _A, infer _E>] ? _E : never\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Right<T extends Either<any, any>> = [T] extends [Either<infer _A, infer _E>] ? _A : never\n}\n\n/**\n * Constructs a new `Either` holding a `Right` value. This usually represents a successful value due to the right bias\n * of this structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const right: <R>(right: R) => Either<R> = either.right\n\n/**\n * Constructs a new `Either` holding a `Left` value. This usually represents a failure, due to the right-bias of this\n * structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const left: <L>(left: L) => Either<never, L> = either.left\n\n/**\n * Takes a lazy default and a nullable value, if the value is not nully (`null` or `undefined`), turn it into a `Right`, if the value is nully use\n * the provided default as a `Left`.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.fromNullable(1, () => 'fallback'), Either.right(1))\n * assert.deepStrictEqual(Either.fromNullable(null, () => 'fallback'), Either.left('fallback'))\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromNullable: {\n  /**\n   * Takes a lazy default and a nullable value, if the value is not nully (`null` or `undefined`), turn it into a `Right`, if the value is nully use\n   * the provided default as a `Left`.\n   *\n   * @example\n   * import { Either } from \"effect\"\n   *\n   * assert.deepStrictEqual(Either.fromNullable(1, () => 'fallback'), Either.right(1))\n   * assert.deepStrictEqual(Either.fromNullable(null, () => 'fallback'), Either.left('fallback'))\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <R, L>(onNullable: (right: R) => L): (self: R) => Either<NonNullable<R>, L>\n  /**\n   * Takes a lazy default and a nullable value, if the value is not nully (`null` or `undefined`), turn it into a `Right`, if the value is nully use\n   * the provided default as a `Left`.\n   *\n   * @example\n   * import { Either } from \"effect\"\n   *\n   * assert.deepStrictEqual(Either.fromNullable(1, () => 'fallback'), Either.right(1))\n   * assert.deepStrictEqual(Either.fromNullable(null, () => 'fallback'), Either.left('fallback'))\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <R, L>(self: R, onNullable: (right: R) => L): Either<NonNullable<R>, L>\n} = dual(\n  2,\n  <R, L>(self: R, onNullable: (right: R) => L): Either<NonNullable<R>, L> =>\n    self == null ? left(onNullable(self)) : right(self as NonNullable<R>)\n)\n\n/**\n * @example\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.fromOption(Option.some(1), () => 'error'), Either.right(1))\n * assert.deepStrictEqual(Either.fromOption(Option.none(), () => 'error'), Either.left('error'))\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromOption: {\n  /**\n   * @example\n   * import { Either, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(Either.fromOption(Option.some(1), () => 'error'), Either.right(1))\n   * assert.deepStrictEqual(Either.fromOption(Option.none(), () => 'error'), Either.left('error'))\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <L>(onNone: () => L): <R>(self: Option<R>) => Either<R, L>\n  /**\n   * @example\n   * import { Either, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(Either.fromOption(Option.some(1), () => 'error'), Either.right(1))\n   * assert.deepStrictEqual(Either.fromOption(Option.none(), () => 'error'), Either.left('error'))\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <R, L>(self: Option<R>, onNone: () => L): Either<R, L>\n} = either.fromOption\n\nconst try_: {\n  <R, L>(\n    options: {\n      readonly try: LazyArg<R>\n      readonly catch: (error: unknown) => L\n    }\n  ): Either<R, L>\n  <R>(evaluate: LazyArg<R>): Either<R, unknown>\n} = (<R, L>(\n  evaluate: LazyArg<R> | {\n    readonly try: LazyArg<R>\n    readonly catch: (error: unknown) => L\n  }\n) => {\n  if (isFunction(evaluate)) {\n    try {\n      return right(evaluate())\n    } catch (e) {\n      return left(e)\n    }\n  } else {\n    try {\n      return right(evaluate.try())\n    } catch (e) {\n      return left(evaluate.catch(e))\n    }\n  }\n}) as any\n\nexport {\n  /**\n   * Imports a synchronous side-effect into a pure `Either` value, translating any\n   * thrown exceptions into typed failed eithers creating with `Either.left`.\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  try_ as try\n}\n\n/**\n * Tests if a value is a `Either`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isEither(Either.right(1)), true)\n * assert.deepStrictEqual(Either.isEither(Either.left(\"a\")), true)\n * assert.deepStrictEqual(Either.isEither({ right: 1 }), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEither: (input: unknown) => input is Either<unknown, unknown> = either.isEither\n\n/**\n * Determine if a `Either` is a `Left`.\n *\n * @param self - The `Either` to check.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isLeft(Either.right(1)), false)\n * assert.deepStrictEqual(Either.isLeft(Either.left(\"a\")), true)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isLeft: <R, L>(self: Either<R, L>) => self is Left<L, R> = either.isLeft\n\n/**\n * Determine if a `Either` is a `Right`.\n *\n * @param self - The `Either` to check.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isRight(Either.right(1)), true)\n * assert.deepStrictEqual(Either.isRight(Either.left(\"a\")), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isRight: <R, L>(self: Either<R, L>) => self is Right<L, R> = either.isRight\n\n/**\n * Converts a `Either` to an `Option` discarding the `Left`.\n *\n * Alias of {@link toOption}.\n *\n * @example\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getRight(Either.right('ok')), Option.some('ok'))\n * assert.deepStrictEqual(Either.getRight(Either.left('err')), Option.none())\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getRight: <R, L>(self: Either<R, L>) => Option<R> = either.getRight\n\n/**\n * Converts a `Either` to an `Option` discarding the value.\n *\n * @example\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getLeft(Either.right('ok')), Option.none())\n * assert.deepStrictEqual(Either.getLeft(Either.left('err')), Option.some('err'))\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getLeft: <R, L>(self: Either<R, L>) => Option<L> = either.getLeft\n\n/**\n * @category equivalence\n * @since 2.0.0\n */\nexport const getEquivalence = <R, L>({ left, right }: {\n  right: Equivalence.Equivalence<R>\n  left: Equivalence.Equivalence<L>\n}): Equivalence.Equivalence<Either<R, L>> =>\n  Equivalence.make((x, y) =>\n    isLeft(x) ?\n      isLeft(y) && left(x.left, y.left) :\n      isRight(y) && right(x.right, y.right)\n  )\n\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const mapBoth: {\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <L, L2, R, R2>(\n    options: {\n      readonly onLeft: (left: L) => L2\n      readonly onRight: (right: R) => R2\n    }\n  ): (self: Either<R, L>) => Either<R2, L2>\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <L, R, L2, R2>(\n    self: Either<R, L>,\n    options: {\n      readonly onLeft: (left: L) => L2\n      readonly onRight: (right: R) => R2\n    }\n  ): Either<R2, L2>\n} = dual(\n  2,\n  <L, R, L2, R2>(self: Either<R, L>, { onLeft, onRight }: {\n    readonly onLeft: (left: L) => L2\n    readonly onRight: (right: R) => R2\n  }): Either<R2, L2> => isLeft(self) ? left(onLeft(self.left)) : right(onRight(self.right))\n)\n\n/**\n * Maps the `Left` side of an `Either` value to a new `Either` value.\n *\n * @param self - The input `Either` value to map.\n * @param f - A transformation function to apply to the `Left` value of the input `Either`.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapLeft: {\n  /**\n   * Maps the `Left` side of an `Either` value to a new `Either` value.\n   *\n   * @param self - The input `Either` value to map.\n   * @param f - A transformation function to apply to the `Left` value of the input `Either`.\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <L, L2>(f: (left: L) => L2): <R>(self: Either<R, L>) => Either<R, L2>\n  /**\n   * Maps the `Left` side of an `Either` value to a new `Either` value.\n   *\n   * @param self - The input `Either` value to map.\n   * @param f - A transformation function to apply to the `Left` value of the input `Either`.\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <R, L, L2>(self: Either<R, L>, f: (left: L) => L2): Either<R, L2>\n} = dual(\n  2,\n  <R, L1, L2>(self: Either<R, L1>, f: (left: L1) => L2): Either<R, L2> =>\n    isLeft(self) ? left(f(self.left)) : right(self.right)\n)\n\n/**\n * Maps the `Right` side of an `Either` value to a new `Either` value.\n *\n * @param self - An `Either` to map\n * @param f - The function to map over the value of the `Either`\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const map: {\n  /**\n   * Maps the `Right` side of an `Either` value to a new `Either` value.\n   *\n   * @param self - An `Either` to map\n   * @param f - The function to map over the value of the `Either`\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <R, R2>(f: (right: R) => R2): <L>(self: Either<R, L>) => Either<R2, L>\n  /**\n   * Maps the `Right` side of an `Either` value to a new `Either` value.\n   *\n   * @param self - An `Either` to map\n   * @param f - The function to map over the value of the `Either`\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <R, L, R2>(self: Either<R, L>, f: (right: R) => R2): Either<R2, L>\n} = dual(\n  2,\n  <R1, L, R2>(self: Either<R1, L>, f: (right: R1) => R2): Either<R2, L> =>\n    isRight(self) ? right(f(self.right)) : left(self.left)\n)\n\n/**\n * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the `onLeft function,\n * if the value is a `Right` the inner value is applied to the `onRight` function.\n *\n * @example\n * import { pipe, Either } from \"effect\"\n *\n * const onLeft  = (strings: ReadonlyArray<string>): string => `strings: ${strings.join(', ')}`\n *\n * const onRight = (value: number): string => `Ok: ${value}`\n *\n * assert.deepStrictEqual(pipe(Either.right(1), Either.match({ onLeft, onRight })), 'Ok: 1')\n * assert.deepStrictEqual(\n *   pipe(Either.left(['string 1', 'string 2']), Either.match({ onLeft, onRight })),\n *   'strings: string 1, string 2'\n * )\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const match: {\n  /**\n   * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the `onLeft function,\n   * if the value is a `Right` the inner value is applied to the `onRight` function.\n   *\n   * @example\n   * import { pipe, Either } from \"effect\"\n   *\n   * const onLeft  = (strings: ReadonlyArray<string>): string => `strings: ${strings.join(', ')}`\n   *\n   * const onRight = (value: number): string => `Ok: ${value}`\n   *\n   * assert.deepStrictEqual(pipe(Either.right(1), Either.match({ onLeft, onRight })), 'Ok: 1')\n   * assert.deepStrictEqual(\n   *   pipe(Either.left(['string 1', 'string 2']), Either.match({ onLeft, onRight })),\n   *   'strings: string 1, string 2'\n   * )\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <L, B, R, C = B>(\n    options: {\n      readonly onLeft: (left: L) => B\n      readonly onRight: (right: R) => C\n    }\n  ): (self: Either<R, L>) => B | C\n  /**\n   * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the `onLeft function,\n   * if the value is a `Right` the inner value is applied to the `onRight` function.\n   *\n   * @example\n   * import { pipe, Either } from \"effect\"\n   *\n   * const onLeft  = (strings: ReadonlyArray<string>): string => `strings: ${strings.join(', ')}`\n   *\n   * const onRight = (value: number): string => `Ok: ${value}`\n   *\n   * assert.deepStrictEqual(pipe(Either.right(1), Either.match({ onLeft, onRight })), 'Ok: 1')\n   * assert.deepStrictEqual(\n   *   pipe(Either.left(['string 1', 'string 2']), Either.match({ onLeft, onRight })),\n   *   'strings: string 1, string 2'\n   * )\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <R, L, B, C = B>(\n    self: Either<R, L>,\n    options: {\n      readonly onLeft: (left: L) => B\n      readonly onRight: (right: R) => C\n    }\n  ): B | C\n} = dual(\n  2,\n  <R, L, B, C = B>(self: Either<R, L>, { onLeft, onRight }: {\n    readonly onLeft: (left: L) => B\n    readonly onRight: (right: R) => C\n  }): B | C => isLeft(self) ? onLeft(self.left) : onRight(self.right)\n)\n\n/**\n * Transforms a `Predicate` function into a `Right` of the input value if the predicate returns `true`\n * or `Left` of the result of the provided function if the predicate returns false\n *\n * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n *\n * @example\n * import { pipe, Either } from \"effect\"\n *\n * const isPositive = (n: number): boolean => n > 0\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     1,\n *     Either.liftPredicate(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     0,\n *     Either.liftPredicate(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.left(\"0 is not positive\")\n * )\n *\n * @category lifting\n * @since 3.4.0\n */\nexport const liftPredicate: {\n  /**\n   * Transforms a `Predicate` function into a `Right` of the input value if the predicate returns `true`\n   * or `Left` of the result of the provided function if the predicate returns false\n   *\n   * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n   *\n   * @example\n   * import { pipe, Either } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     1,\n   *     Either.liftPredicate(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.right(1)\n   * )\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     0,\n   *     Either.liftPredicate(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.left(\"0 is not positive\")\n   * )\n   *\n   * @category lifting\n   * @since 3.4.0\n   */\n  <A, B extends A, E>(refinement: Refinement<NoInfer<A>, B>, orLeftWith: (a: NoInfer<A>) => E): (a: A) => Either<B, E>\n  /**\n   * Transforms a `Predicate` function into a `Right` of the input value if the predicate returns `true`\n   * or `Left` of the result of the provided function if the predicate returns false\n   *\n   * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n   *\n   * @example\n   * import { pipe, Either } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     1,\n   *     Either.liftPredicate(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.right(1)\n   * )\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     0,\n   *     Either.liftPredicate(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.left(\"0 is not positive\")\n   * )\n   *\n   * @category lifting\n   * @since 3.4.0\n   */\n  <A, E>(predicate: Predicate<NoInfer<A>>, orLeftWith: (a: NoInfer<A>) => E): (a: A) => Either<A, E>\n  /**\n   * Transforms a `Predicate` function into a `Right` of the input value if the predicate returns `true`\n   * or `Left` of the result of the provided function if the predicate returns false\n   *\n   * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n   *\n   * @example\n   * import { pipe, Either } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     1,\n   *     Either.liftPredicate(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.right(1)\n   * )\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     0,\n   *     Either.liftPredicate(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.left(\"0 is not positive\")\n   * )\n   *\n   * @category lifting\n   * @since 3.4.0\n   */\n  <A, E, B extends A>(self: A, refinement: Refinement<A, B>, orLeftWith: (a: A) => E): Either<B, E>\n  /**\n   * Transforms a `Predicate` function into a `Right` of the input value if the predicate returns `true`\n   * or `Left` of the result of the provided function if the predicate returns false\n   *\n   * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n   *\n   * @example\n   * import { pipe, Either } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     1,\n   *     Either.liftPredicate(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.right(1)\n   * )\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     0,\n   *     Either.liftPredicate(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.left(\"0 is not positive\")\n   * )\n   *\n   * @category lifting\n   * @since 3.4.0\n   */\n  <A, E>(\n    self: A,\n    predicate: Predicate<NoInfer<A>>,\n    orLeftWith: (a: NoInfer<A>) => E\n  ): Either<A, E>\n} = dual(\n  3,\n  <A, E>(a: A, predicate: Predicate<A>, orLeftWith: (a: A) => E): Either<A, E> =>\n    predicate(a) ? right(a) : left(orLeftWith(a))\n)\n\n/**\n * Filter the right value with the provided function.\n * If the predicate fails, set the left value with the result of the provided function.\n *\n * @example\n * import { pipe, Either } from \"effect\"\n *\n * const isPositive = (n: number): boolean => n > 0\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Either.right(1),\n *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Either.right(0),\n *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.left(\"0 is not positive\")\n * )\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const filterOrLeft: {\n  /**\n   * Filter the right value with the provided function.\n   * If the predicate fails, set the left value with the result of the provided function.\n   *\n   * @example\n   * import { pipe, Either } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Either.right(1),\n   *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.right(1)\n   * )\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Either.right(0),\n   *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.left(\"0 is not positive\")\n   * )\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <R, B extends R, L2>(\n    refinement: Refinement<NoInfer<R>, B>,\n    orLeftWith: (right: NoInfer<R>) => L2\n  ): <L>(self: Either<R, L>) => Either<B, L2 | L>\n  /**\n   * Filter the right value with the provided function.\n   * If the predicate fails, set the left value with the result of the provided function.\n   *\n   * @example\n   * import { pipe, Either } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Either.right(1),\n   *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.right(1)\n   * )\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Either.right(0),\n   *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.left(\"0 is not positive\")\n   * )\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <R, L2>(\n    predicate: Predicate<NoInfer<R>>,\n    orLeftWith: (right: NoInfer<R>) => L2\n  ): <L>(self: Either<R, L>) => Either<R, L2 | L>\n  /**\n   * Filter the right value with the provided function.\n   * If the predicate fails, set the left value with the result of the provided function.\n   *\n   * @example\n   * import { pipe, Either } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Either.right(1),\n   *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.right(1)\n   * )\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Either.right(0),\n   *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.left(\"0 is not positive\")\n   * )\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <R, L, B extends R, L2>(\n    self: Either<R, L>,\n    refinement: Refinement<R, B>,\n    orLeftWith: (right: R) => L2\n  ): Either<B, L | L2>\n  /**\n   * Filter the right value with the provided function.\n   * If the predicate fails, set the left value with the result of the provided function.\n   *\n   * @example\n   * import { pipe, Either } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Either.right(1),\n   *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.right(1)\n   * )\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Either.right(0),\n   *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.left(\"0 is not positive\")\n   * )\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <R, L, E2>(self: Either<R, L>, predicate: Predicate<R>, orLeftWith: (right: R) => E2): Either<R, L | E2>\n} = dual(3, <R, L, E2>(\n  self: Either<R, L>,\n  predicate: Predicate<R>,\n  orLeftWith: (right: R) => E2\n): Either<R, L | E2> => flatMap(self, (r) => predicate(r) ? right(r) : left(orLeftWith(r))))\n\n/**\n * @category getters\n * @since 2.0.0\n */\nexport const merge: <R, L>(self: Either<R, L>) => L | R = match({\n  onLeft: identity,\n  onRight: identity\n})\n\n/**\n * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrElse(Either.right(1), (error) => error + \"!\"), 1)\n * assert.deepStrictEqual(Either.getOrElse(Either.left(\"not a number\"), (error) => error + \"!\"), \"not a number!\")\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrElse: {\n  /**\n   * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n   *\n   * @example\n   * import { Either } from \"effect\"\n   *\n   * assert.deepStrictEqual(Either.getOrElse(Either.right(1), (error) => error + \"!\"), 1)\n   * assert.deepStrictEqual(Either.getOrElse(Either.left(\"not a number\"), (error) => error + \"!\"), \"not a number!\")\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <L, R2>(onLeft: (left: L) => R2): <R>(self: Either<R, L>) => R2 | R\n  /**\n   * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n   *\n   * @example\n   * import { Either } from \"effect\"\n   *\n   * assert.deepStrictEqual(Either.getOrElse(Either.right(1), (error) => error + \"!\"), 1)\n   * assert.deepStrictEqual(Either.getOrElse(Either.left(\"not a number\"), (error) => error + \"!\"), \"not a number!\")\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <R, L, R2>(self: Either<R, L>, onLeft: (left: L) => R2): R | R2\n} = dual(\n  2,\n  <R, L, B>(self: Either<R, L>, onLeft: (left: L) => B): R | B => isLeft(self) ? onLeft(self.left) : self.right\n)\n\n/**\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrNull(Either.right(1)), 1)\n * assert.deepStrictEqual(Either.getOrNull(Either.left(\"a\")), null)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrNull: <R, L>(self: Either<R, L>) => R | null = getOrElse(constNull)\n\n/**\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrUndefined(Either.right(1)), 1)\n * assert.deepStrictEqual(Either.getOrUndefined(Either.left(\"a\")), undefined)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrUndefined: <R, L>(self: Either<R, L>) => R | undefined = getOrElse(constUndefined)\n\n/**\n * Extracts the value of an `Either` or throws if the `Either` is `Left`.\n *\n * If a default error is sufficient for your use case and you don't need to configure the thrown error, see {@link getOrThrow}.\n *\n * @param self - The `Either` to extract the value from.\n * @param onLeft - A function that will be called if the `Either` is `Left`. It returns the error to be thrown.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Either.getOrThrowWith(Either.right(1), () => new Error('Unexpected Left')),\n *   1\n * )\n * assert.throws(() => Either.getOrThrowWith(Either.left(\"error\"), () => new Error('Unexpected Left')))\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrThrowWith: {\n  /**\n   * Extracts the value of an `Either` or throws if the `Either` is `Left`.\n   *\n   * If a default error is sufficient for your use case and you don't need to configure the thrown error, see {@link getOrThrow}.\n   *\n   * @param self - The `Either` to extract the value from.\n   * @param onLeft - A function that will be called if the `Either` is `Left`. It returns the error to be thrown.\n   *\n   * @example\n   * import { Either } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Either.getOrThrowWith(Either.right(1), () => new Error('Unexpected Left')),\n   *   1\n   * )\n   * assert.throws(() => Either.getOrThrowWith(Either.left(\"error\"), () => new Error('Unexpected Left')))\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <L>(onLeft: (left: L) => unknown): <A>(self: Either<A, L>) => A\n  /**\n   * Extracts the value of an `Either` or throws if the `Either` is `Left`.\n   *\n   * If a default error is sufficient for your use case and you don't need to configure the thrown error, see {@link getOrThrow}.\n   *\n   * @param self - The `Either` to extract the value from.\n   * @param onLeft - A function that will be called if the `Either` is `Left`. It returns the error to be thrown.\n   *\n   * @example\n   * import { Either } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Either.getOrThrowWith(Either.right(1), () => new Error('Unexpected Left')),\n   *   1\n   * )\n   * assert.throws(() => Either.getOrThrowWith(Either.left(\"error\"), () => new Error('Unexpected Left')))\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <R, L>(self: Either<R, L>, onLeft: (left: L) => unknown): R\n} = dual(2, <R, L>(self: Either<R, L>, onLeft: (left: L) => unknown): R => {\n  if (isRight(self)) {\n    return self.right\n  }\n  throw onLeft(self.left)\n})\n\n/**\n * Extracts the value of an `Either` or throws if the `Either` is `Left`.\n *\n * The thrown error is a default error. To configure the error thrown, see  {@link getOrThrowWith}.\n *\n * @param self - The `Either` to extract the value from.\n * @throws `Error(\"getOrThrow called on a Left\")`\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrThrow(Either.right(1)), 1)\n * assert.throws(() => Either.getOrThrow(Either.left(\"error\")))\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrThrow: <R, L>(self: Either<R, L>) => R = getOrThrowWith(() =>\n  new Error(\"getOrThrow called on a Left\")\n)\n\n/**\n * Returns `self` if it is a `Right` or `that` otherwise.\n *\n * @param self - The input `Either` value to check and potentially return.\n * @param that - A function that takes the error value from `self` (if it's a `Left`) and returns a new `Either` value.\n *\n * @category error handling\n * @since 2.0.0\n */\nexport const orElse: {\n  /**\n   * Returns `self` if it is a `Right` or `that` otherwise.\n   *\n   * @param self - The input `Either` value to check and potentially return.\n   * @param that - A function that takes the error value from `self` (if it's a `Left`) and returns a new `Either` value.\n   *\n   * @category error handling\n   * @since 2.0.0\n   */\n  <L, R2, L2>(that: (left: L) => Either<R2, L2>): <R>(self: Either<R, L>) => Either<R | R2, L2>\n  /**\n   * Returns `self` if it is a `Right` or `that` otherwise.\n   *\n   * @param self - The input `Either` value to check and potentially return.\n   * @param that - A function that takes the error value from `self` (if it's a `Left`) and returns a new `Either` value.\n   *\n   * @category error handling\n   * @since 2.0.0\n   */\n  <R, L, R2, L2>(self: Either<R, L>, that: (left: L) => Either<R2, L2>): Either<R | R2, L2>\n} = dual(\n  2,\n  <R1, L1, R2, L2>(self: Either<R1, L1>, that: (left: L1) => Either<R2, L2>): Either<R1 | R2, L2> =>\n    isLeft(self) ? that(self.left) : right(self.right)\n)\n\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMap: {\n  /**\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <R, R2, L2>(f: (right: R) => Either<R2, L2>): <L>(self: Either<R, L>) => Either<R2, L | L2>\n  /**\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <R, L, R2, L2>(self: Either<R, L>, f: (right: R) => Either<R2, L2>): Either<R2, L | L2>\n} = dual(\n  2,\n  <R1, L1, R2, L2>(self: Either<R1, L1>, f: (right: R1) => Either<R2, L2>): Either<R2, L1 | L2> =>\n    isLeft(self) ? left(self.left) : f(self.right)\n)\n\n/**\n * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const andThen: {\n  /**\n   * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <R, R2, L2>(f: (right: R) => Either<R2, L2>): <L>(self: Either<R, L>) => Either<R2, L | L2>\n  /**\n   * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <R2, L2>(f: Either<R2, L2>): <L, R1>(self: Either<R1, L>) => Either<R2, L | L2>\n  /**\n   * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <R, R2>(f: (right: R) => R2): <L>(self: Either<R, L>) => Either<R2, L>\n  /**\n   * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <R2>(right: NotFunction<R2>): <R1, L>(self: Either<R1, L>) => Either<R2, L>\n  /**\n   * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <R, L, R2, L2>(self: Either<R, L>, f: (right: R) => Either<R2, L2>): Either<R2, L | L2>\n  /**\n   * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <R, L, R2, L2>(self: Either<R, L>, f: Either<R2, L2>): Either<R2, L | L2>\n  /**\n   * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <R, L, R2>(self: Either<R, L>, f: (right: R) => R2): Either<R2, L>\n  /**\n   * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <R, L, R2>(self: Either<R, L>, f: NotFunction<R2>): Either<R2, L>\n} = dual(\n  2,\n  <R, L, R2, L2>(self: Either<R, L>, f: (right: R) => Either<R2, L2> | Either<R2, L2>): Either<R2, L | L2> =>\n    flatMap(self, (a) => {\n      const b = isFunction(f) ? f(a) : f\n      return isEither(b) ? b : right(b)\n    })\n)\n\n/**\n * @category zipping\n * @since 2.0.0\n */\nexport const zipWith: {\n  /**\n   * @category zipping\n   * @since 2.0.0\n   */\n  <R2, L2, R, B>(that: Either<R2, L2>, f: (right: R, right2: R2) => B): <L>(self: Either<R, L>) => Either<B, L2 | L>\n  /**\n   * @category zipping\n   * @since 2.0.0\n   */\n  <R, L, R2, L2, B>(self: Either<R, L>, that: Either<R2, L2>, f: (right: R, right2: R2) => B): Either<B, L | L2>\n} = dual(\n  3,\n  <R, L, R2, L2, B>(self: Either<R, L>, that: Either<R2, L2>, f: (right: R, right2: R2) => B): Either<B, L | L2> =>\n    flatMap(self, (r) => map(that, (r2) => f(r, r2)))\n)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const ap: {\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <R, L2>(that: Either<R, L2>): <R2, L>(self: Either<(right: R) => R2, L>) => Either<R2, L | L2>\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <R, R2, L, L2>(self: Either<(right: R) => R2, L>, that: Either<R, L2>): Either<R2, L | L2>\n} = dual(\n  2,\n  <R, R2, L, L2>(self: Either<(right: R) => R2, L>, that: Either<R, L2>): Either<R2, L | L2> =>\n    zipWith(self, that, (f, a) => f(a))\n)\n\n/**\n * Takes a structure of `Either`s and returns an `Either` of values with the same structure.\n *\n * - If a tuple is supplied, then the returned `Either` will contain a tuple with the same length.\n * - If a struct is supplied, then the returned `Either` will contain a struct with the same keys.\n * - If an iterable is supplied, then the returned `Either` will contain an array.\n *\n * @param fields - the struct of `Either`s to be sequenced.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.all([Either.right(1), Either.right(2)]), Either.right([1, 2]))\n * assert.deepStrictEqual(Either.all({ right: Either.right(1), b: Either.right(\"hello\") }), Either.right({ right: 1, b: \"hello\" }))\n * assert.deepStrictEqual(Either.all({ right: Either.right(1), b: Either.left(\"error\") }), Either.left(\"error\"))\n *\n * @category combining\n * @since 2.0.0\n */\n// @ts-expect-error\nexport const all: <const I extends Iterable<Either<any, any>> | Record<string, Either<any, any>>>(\n  input: I\n) => [I] extends [ReadonlyArray<Either<any, any>>] ? Either<\n    { -readonly [K in keyof I]: [I[K]] extends [Either<infer R, any>] ? R : never },\n    I[number] extends never ? never : [I[number]] extends [Either<any, infer L>] ? L : never\n  >\n  : [I] extends [Iterable<Either<infer R, infer L>>] ? Either<Array<R>, L>\n  : Either<\n    { -readonly [K in keyof I]: [I[K]] extends [Either<infer R, any>] ? R : never },\n    I[keyof I] extends never ? never : [I[keyof I]] extends [Either<any, infer L>] ? L : never\n  > = (\n    input: Iterable<Either<any, any>> | Record<string, Either<any, any>>\n  ): Either<any, any> => {\n    if (Symbol.iterator in input) {\n      const out: Array<Either<any, any>> = []\n      for (const e of (input as Iterable<Either<any, any>>)) {\n        if (isLeft(e)) {\n          return e\n        }\n        out.push(e.right)\n      }\n      return right(out)\n    }\n\n    const out: Record<string, any> = {}\n    for (const key of Object.keys(input)) {\n      const e = input[key]\n      if (isLeft(e)) {\n        return e\n      }\n      out[key] = e.right\n    }\n    return right(out)\n  }\n\n/**\n * Returns an `Either` that swaps the error/success cases. This allows you to\n * use all methods on the error channel, possibly before flipping back.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const flip = <R, L>(self: Either<R, L>): Either<L, R> => isLeft(self) ? right(self.left) : left(self.right)\n\nconst adapter = Gen.adapter<EitherTypeLambda>()\n\n/**\n * @category generators\n * @since 2.0.0\n */\nexport const gen: Gen.Gen<EitherTypeLambda, Gen.Adapter<EitherTypeLambda>> = (...args) => {\n  const f = (args.length === 1)\n    ? args[0]\n    : args[1].bind(args[0])\n  const iterator = f(adapter)\n  let state: IteratorYieldResult<any> | IteratorReturnResult<any> = iterator.next()\n  if (state.done) {\n    return right(state.value) as any\n  } else {\n    let current = state.value\n    if (Gen.isGenKind(current)) {\n      current = current.value\n    } else {\n      current = Gen.yieldWrapGet(current)\n    }\n    if (isLeft(current)) {\n      return current\n    }\n    while (!state.done) {\n      state = iterator.next(current.right as never)\n      if (!state.done) {\n        current = state.value\n        if (Gen.isGenKind(current)) {\n          current = current.value\n        } else {\n          current = Gen.yieldWrapGet(current)\n        }\n        if (isLeft(current)) {\n          return current\n        }\n      }\n    }\n    return right(state.value)\n  }\n}\n\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link bind}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @example\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const Do: Either<{}> = right({})\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link Do}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @example\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bind: {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link let_ let}\n   *\n   * @example\n   * import { Either, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Either.Do,\n   *   Either.bind(\"x\", () => Either.right(2)),\n   *   Either.bind(\"y\", () => Either.right(3)),\n   *   Either.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  <N extends string, A extends object, B, L2>(\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => Either<B, L2>\n  ): <L1>(self: Either<A, L1>) => Either<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, L1 | L2>\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link let_ let}\n   *\n   * @example\n   * import { Either, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Either.Do,\n   *   Either.bind(\"x\", () => Either.right(2)),\n   *   Either.bind(\"y\", () => Either.right(3)),\n   *   Either.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  <A extends object, L1, N extends string, B, L2>(\n    self: Either<A, L1>,\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => Either<B, L2>\n  ): Either<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, L1 | L2>\n} = doNotation.bind<EitherTypeLambda>(map, flatMap)\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link Do}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bindTo: {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link let_ let}\n   *\n   * @example\n   * import { Either, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Either.Do,\n   *   Either.bind(\"x\", () => Either.right(2)),\n   *   Either.bind(\"y\", () => Either.right(3)),\n   *   Either.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  <N extends string>(name: N): <R, L>(self: Either<R, L>) => Either<{ [K in N]: R }, L>\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link let_ let}\n   *\n   * @example\n   * import { Either, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Either.Do,\n   *   Either.bind(\"x\", () => Either.right(2)),\n   *   Either.bind(\"y\", () => Either.right(3)),\n   *   Either.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  <R, L, N extends string>(self: Either<R, L>, name: N): Either<{ [K in N]: R }, L>\n} = doNotation.bindTo<EitherTypeLambda>(map)\n\nconst let_: {\n  <N extends string, R extends object, B>(\n    name: Exclude<N, keyof R>,\n    f: (r: NoInfer<R>) => B\n  ): <L>(self: Either<R, L>) => Either<{ [K in N | keyof R]: K extends keyof R ? R[K] : B }, L>\n  <R extends object, L, N extends string, B>(\n    self: Either<R, L>,\n    name: Exclude<N, keyof R>,\n    f: (r: NoInfer<R>) => B\n  ): Either<{ [K in N | keyof R]: K extends keyof R ? R[K] : B }, L>\n} = doNotation.let_<EitherTypeLambda>(map)\n\nexport {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link bind}\n   *\n   * @example\n   * import { Either, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Either.Do,\n   *   Either.bind(\"x\", () => Either.right(2)),\n   *   Either.bind(\"y\", () => Either.right(3)),\n   *   Either.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  let_ as let\n}\n"],"names":["Equivalence","constNull","constUndefined","dual","identity","doNotation","either","isFunction","Gen","TypeId","right","left","fromNullable","self","onNullable","fromOption","try_","evaluate","e","try","catch","isEither","isLeft","isRight","getRight","getLeft","getEquivalence","make","x","y","mapBoth","onLeft","onRight","mapLeft","f","map","match","liftPredicate","a","predicate","orLeftWith","filterOrLeft","flatMap","r","merge","getOrElse","getOrNull","getOrUndefined","getOrThrowWith","getOrThrow","Error","orElse","that","andThen","b","zipWith","r2","ap","all","input","Symbol","iterator","out","push","key","Object","keys","flip","adapter","gen","args","length","bind","state","next","done","value","current","isGenKind","yieldWrapGet","Do","bindTo","let_","let"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1291, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1297, "column": 0}, "map": {"version":3,"file":"Order.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Order.ts"],"sourcesContent":["/**\n * This module provides an implementation of the `Order` type class which is used to define a total ordering on some type `A`.\n * An order is defined by a relation `<=`, which obeys the following laws:\n *\n * - either `x <= y` or `y <= x` (totality)\n * - if `x <= y` and `y <= x`, then `x == y` (antisymmetry)\n * - if `x <= y` and `y <= z`, then `x <= z` (transitivity)\n *\n * The truth table for compare is defined as follows:\n *\n * | `x <= y` | `x >= y` | Ordering |                       |\n * | -------- | -------- | -------- | --------------------- |\n * | `true`   | `true`   | `0`      | corresponds to x == y |\n * | `true`   | `false`  | `< 0`    | corresponds to x < y  |\n * | `false`  | `true`   | `> 0`    | corresponds to x > y  |\n *\n * @since 2.0.0\n */\nimport { dual } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\n\n/**\n * @category type class\n * @since 2.0.0\n */\nexport interface Order<in A> {\n  (self: A, that: A): -1 | 0 | 1\n}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface OrderTypeLambda extends TypeLambda {\n  readonly type: Order<this[\"Target\"]>\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <A>(\n  compare: (self: A, that: A) => -1 | 0 | 1\n): Order<A> =>\n(self, that) => self === that ? 0 : compare(self, that)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const string: Order<string> = make((self, that) => self < that ? -1 : 1)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const number: Order<number> = make((self, that) => self < that ? -1 : 1)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const boolean: Order<boolean> = make((self, that) => self < that ? -1 : 1)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const bigint: Order<bigint> = make((self, that) => self < that ? -1 : 1)\n\n/**\n * @since 2.0.0\n */\nexport const reverse = <A>(O: Order<A>): Order<A> => make((self, that) => O(that, self))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combine: {\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A>(that: Order<A>): (self: Order<A>) => Order<A>\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A>(self: Order<A>, that: Order<A>): Order<A>\n} = dual(2, <A>(self: Order<A>, that: Order<A>): Order<A> =>\n  make((a1, a2) => {\n    const out = self(a1, a2)\n    if (out !== 0) {\n      return out\n    }\n    return that(a1, a2)\n  }))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineMany: {\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A>(collection: Iterable<Order<A>>): (self: Order<A>) => Order<A>\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A>(self: Order<A>, collection: Iterable<Order<A>>): Order<A>\n} = dual(2, <A>(self: Order<A>, collection: Iterable<Order<A>>): Order<A> =>\n  make((a1, a2) => {\n    let out = self(a1, a2)\n    if (out !== 0) {\n      return out\n    }\n    for (const O of collection) {\n      out = O(a1, a2)\n      if (out !== 0) {\n        return out\n      }\n    }\n    return out\n  }))\n\n/**\n * @since 2.0.0\n */\nexport const empty = <A>(): Order<A> => make(() => 0)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineAll = <A>(collection: Iterable<Order<A>>): Order<A> => combineMany(empty(), collection)\n\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const mapInput: {\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <B, A>(f: (b: B) => A): (self: Order<A>) => Order<B>\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <A, B>(self: Order<A>, f: (b: B) => A): Order<B>\n} = dual(\n  2,\n  <A, B>(self: Order<A>, f: (b: B) => A): Order<B> => make((b1, b2) => self(f(b1), f(b2)))\n)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Date: Order<Date> = mapInput(number, (date) => date.getTime())\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const product: {\n  <B>(that: Order<B>): <A>(self: Order<A>) => Order<readonly [A, B]> // readonly because invariant\n  <A, B>(self: Order<A>, that: Order<B>): Order<readonly [A, B]> // readonly because invariant\n} = dual(2, <A, B>(self: Order<A>, that: Order<B>): Order<readonly [A, B]> =>\n  make(([xa, xb], [ya, yb]) => {\n    const o = self(xa, ya)\n    return o !== 0 ? o : that(xb, yb)\n  }))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const all = <A>(collection: Iterable<Order<A>>): Order<ReadonlyArray<A>> => {\n  return make((x, y) => {\n    const len = Math.min(x.length, y.length)\n    let collectionLength = 0\n    for (const O of collection) {\n      if (collectionLength >= len) {\n        break\n      }\n      const o = O(x[collectionLength], y[collectionLength])\n      if (o !== 0) {\n        return o\n      }\n      collectionLength++\n    }\n    return 0\n  })\n}\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const productMany: {\n  <A>(collection: Iterable<Order<A>>): (self: Order<A>) => Order<readonly [A, ...Array<A>]> // readonly because invariant\n  <A>(self: Order<A>, collection: Iterable<Order<A>>): Order<readonly [A, ...Array<A>]> // readonly because invariant\n} = dual(2, <A>(self: Order<A>, collection: Iterable<Order<A>>): Order<readonly [A, ...Array<A>]> => {\n  const O = all(collection)\n  return make((x, y) => {\n    const o = self(x[0], y[0])\n    return o !== 0 ? o : O(x.slice(1), y.slice(1))\n  })\n})\n\n/**\n * Similar to `Promise.all` but operates on `Order`s.\n *\n * ```\n * [Order<A>, Order<B>, ...] -> Order<[A, B, ...]>\n * ```\n *\n * This function creates and returns a new `Order` for a tuple of values based on the given `Order`s for each element in the tuple.\n * The returned `Order` compares two tuples of the same type by applying the corresponding `Order` to each element in the tuple.\n * It is useful when you need to compare two tuples of the same type and you have a specific way of comparing each element\n * of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const tuple = <T extends ReadonlyArray<Order<any>>>(\n  ...elements: T\n): Order<Readonly<{ [I in keyof T]: [T[I]] extends [Order<infer A>] ? A : never }>> => all(elements) as any\n\n/**\n * This function creates and returns a new `Order` for an array of values based on a given `Order` for the elements of the array.\n * The returned `Order` compares two arrays by applying the given `Order` to each element in the arrays.\n * If all elements are equal, the arrays are then compared based on their length.\n * It is useful when you need to compare two arrays of the same type and you have a specific way of comparing each element of the array.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const array = <A>(O: Order<A>): Order<ReadonlyArray<A>> =>\n  make((self, that) => {\n    const aLen = self.length\n    const bLen = that.length\n    const len = Math.min(aLen, bLen)\n    for (let i = 0; i < len; i++) {\n      const o = O(self[i], that[i])\n      if (o !== 0) {\n        return o\n      }\n    }\n    return number(aLen, bLen)\n  })\n\n/**\n * This function creates and returns a new `Order` for a struct of values based on the given `Order`s\n * for each property in the struct.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const struct = <R extends { readonly [x: string]: Order<any> }>(\n  fields: R\n): Order<{ [K in keyof R]: [R[K]] extends [Order<infer A>] ? A : never }> => {\n  const keys = Object.keys(fields)\n  return make((self, that) => {\n    for (const key of keys) {\n      const o = fields[key](self[key], that[key])\n      if (o !== 0) {\n        return o\n      }\n    }\n    return 0\n  })\n}\n\n/**\n * Test whether one value is _strictly less than_ another.\n *\n * @since 2.0.0\n */\nexport const lessThan = <A>(O: Order<A>): {\n  (that: A): (self: A) => boolean\n  (self: A, that: A): boolean\n} => dual(2, (self: A, that: A) => O(self, that) === -1)\n\n/**\n * Test whether one value is _strictly greater than_ another.\n *\n * @since 2.0.0\n */\nexport const greaterThan = <A>(O: Order<A>): {\n  (that: A): (self: A) => boolean\n  (self: A, that: A): boolean\n} => dual(2, (self: A, that: A) => O(self, that) === 1)\n\n/**\n * Test whether one value is _non-strictly less than_ another.\n *\n * @since 2.0.0\n */\nexport const lessThanOrEqualTo = <A>(O: Order<A>): {\n  (that: A): (self: A) => boolean\n  (self: A, that: A): boolean\n} => dual(2, (self: A, that: A) => O(self, that) !== 1)\n\n/**\n * Test whether one value is _non-strictly greater than_ another.\n *\n * @since 2.0.0\n */\nexport const greaterThanOrEqualTo = <A>(O: Order<A>): {\n  (that: A): (self: A) => boolean\n  (self: A, that: A): boolean\n} => dual(2, (self: A, that: A) => O(self, that) !== -1)\n\n/**\n * Take the minimum of two values. If they are considered equal, the first argument is chosen.\n *\n * @since 2.0.0\n */\nexport const min = <A>(O: Order<A>): {\n  (that: A): (self: A) => A\n  (self: A, that: A): A\n} => dual(2, (self: A, that: A) => self === that || O(self, that) < 1 ? self : that)\n\n/**\n * Take the maximum of two values. If they are considered equal, the first argument is chosen.\n *\n * @since 2.0.0\n */\nexport const max = <A>(O: Order<A>): {\n  (that: A): (self: A) => A\n  (self: A, that: A): A\n} => dual(2, (self: A, that: A) => self === that || O(self, that) > -1 ? self : that)\n\n/**\n * Clamp a value between a minimum and a maximum.\n *\n * @example\n * import { Order, Number } from \"effect\"\n *\n * const clamp = Order.clamp(Number.Order)({ minimum: 1, maximum: 5 })\n *\n * assert.equal(clamp(3), 3)\n * assert.equal(clamp(0), 1)\n * assert.equal(clamp(6), 5)\n *\n * @since 2.0.0\n */\nexport const clamp = <A>(O: Order<A>): {\n  (options: {\n    minimum: A\n    maximum: A\n  }): (self: A) => A\n  (self: A, options: {\n    minimum: A\n    maximum: A\n  }): A\n} =>\n  dual(\n    2,\n    (self: A, options: {\n      minimum: A\n      maximum: A\n    }): A => min(O)(options.maximum, max(O)(options.minimum, self))\n  )\n\n/**\n * Test whether a value is between a minimum and a maximum (inclusive).\n *\n * @since 2.0.0\n */\nexport const between = <A>(O: Order<A>): {\n  (options: {\n    minimum: A\n    maximum: A\n  }): (self: A) => boolean\n  (self: A, options: {\n    minimum: A\n    maximum: A\n  }): boolean\n} =>\n  dual(\n    2,\n    (self: A, options: {\n      minimum: A\n      maximum: A\n    }): boolean => !lessThan(O)(self, options.minimum) && !greaterThan(O)(self, options.maximum)\n  )\n"],"names":["dual","make","compare","self","that","string","number","boolean","bigint","reverse","O","combine","a1","a2","out","combineMany","collection","empty","combineAll","mapInput","f","b1","b2","Date","date","getTime","product","xa","xb","ya","yb","o","all","x","y","len","Math","min","length","collectionLength","productMany","slice","tuple","elements","array","aLen","bLen","i","struct","fields","keys","Object","key","lessThan","greaterThan","lessThanOrEqualTo","greaterThanOrEqualTo","max","clamp","options","maximum","minimum","between"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1435, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1441, "column": 0}, "map": {"version":3,"file":"Option.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Option.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type { Either } from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport * as Equivalence from \"./Equivalence.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { constNull, constUndefined, dual, identity, isFunction } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as doNotation from \"./internal/doNotation.js\"\nimport * as either from \"./internal/either.js\"\nimport * as option from \"./internal/option.js\"\nimport type { Order } from \"./Order.js\"\nimport * as order from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport type { Covariant, NoInfer, NotFunction } from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\nimport * as Gen from \"./Utils.js\"\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport type Option<A> = None<A> | Some<A>\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport const TypeId: unique symbol = Symbol.for(\"effect/Option\")\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface None<out A> extends Pipeable, Inspectable {\n  readonly _tag: \"None\"\n  readonly _op: \"None\"\n  readonly [TypeId]: {\n    readonly _A: Covariant<A>\n  }\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: OptionUnify<this>\n  [Unify.ignoreSymbol]?: OptionUnifyIgnore\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Some<out A> extends Pipeable, Inspectable {\n  readonly _tag: \"Some\"\n  readonly _op: \"Some\"\n  readonly value: A\n  readonly [TypeId]: {\n    readonly _A: Covariant<A>\n  }\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: OptionUnify<this>\n  [Unify.ignoreSymbol]?: OptionUnifyIgnore\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface OptionUnify<A extends { [Unify.typeSymbol]?: any }> {\n  Option?: () => A[Unify.typeSymbol] extends Option<infer A0> | infer _ ? Option<A0> : never\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Option {\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Value<T extends Option<any>> = [T] extends [Option<infer _A>] ? _A : never\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface OptionUnifyIgnore {}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface OptionTypeLambda extends TypeLambda {\n  readonly type: Option<this[\"Target\"]>\n}\n\n/**\n * Creates a new `Option` that represents the absence of a value.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const none = <A = never>(): Option<A> => option.none\n\n/**\n * Creates a new `Option` that wraps the given value.\n *\n * @param value - The value to wrap.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const some: <A>(value: A) => Option<A> = option.some\n\n/**\n * Tests if a value is a `Option`.\n *\n * @param input - The value to check.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.isOption(Option.some(1)), true)\n * assert.deepStrictEqual(Option.isOption(Option.none()), true)\n * assert.deepStrictEqual(Option.isOption({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isOption: (input: unknown) => input is Option<unknown> = option.isOption\n\n/**\n * Determine if a `Option` is a `None`.\n *\n * @param self - The `Option` to check.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.isNone(Option.some(1)), false)\n * assert.deepStrictEqual(Option.isNone(Option.none()), true)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNone: <A>(self: Option<A>) => self is None<A> = option.isNone\n\n/**\n * Determine if a `Option` is a `Some`.\n *\n * @param self - The `Option` to check.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.isSome(Option.some(1)), true)\n * assert.deepStrictEqual(Option.isSome(Option.none()), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isSome: <A>(self: Option<A>) => self is Some<A> = option.isSome\n\n/**\n * Matches the given `Option` and returns either the provided `onNone` value or the result of the provided `onSome`\n * function when passed the `Option`'s value.\n *\n * @param self - The `Option` to match\n * @param onNone - The value to be returned if the `Option` is `None`\n * @param onSome - The function to be called if the `Option` is `Some`, it will be passed the `Option`'s value and its result will be returned\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   pipe(Option.some(1), Option.match({ onNone: () => 'a none', onSome: (a) => `a some containing ${a}` })),\n *   'a some containing 1'\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(Option.none(), Option.match({ onNone: () => 'a none', onSome: (a) => `a some containing ${a}` })),\n *   'a none'\n * )\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const match: {\n  /**\n   * Matches the given `Option` and returns either the provided `onNone` value or the result of the provided `onSome`\n   * function when passed the `Option`'s value.\n   *\n   * @param self - The `Option` to match\n   * @param onNone - The value to be returned if the `Option` is `None`\n   * @param onSome - The function to be called if the `Option` is `Some`, it will be passed the `Option`'s value and its result will be returned\n   *\n   * @example\n   * import { pipe, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   pipe(Option.some(1), Option.match({ onNone: () => 'a none', onSome: (a) => `a some containing ${a}` })),\n   *   'a some containing 1'\n   * )\n   *\n   * assert.deepStrictEqual(\n   *   pipe(Option.none(), Option.match({ onNone: () => 'a none', onSome: (a) => `a some containing ${a}` })),\n   *   'a none'\n   * )\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <B, A, C = B>(\n    options: {\n      readonly onNone: LazyArg<B>\n      readonly onSome: (a: A) => C\n    }\n  ): (self: Option<A>) => B | C\n  /**\n   * Matches the given `Option` and returns either the provided `onNone` value or the result of the provided `onSome`\n   * function when passed the `Option`'s value.\n   *\n   * @param self - The `Option` to match\n   * @param onNone - The value to be returned if the `Option` is `None`\n   * @param onSome - The function to be called if the `Option` is `Some`, it will be passed the `Option`'s value and its result will be returned\n   *\n   * @example\n   * import { pipe, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   pipe(Option.some(1), Option.match({ onNone: () => 'a none', onSome: (a) => `a some containing ${a}` })),\n   *   'a some containing 1'\n   * )\n   *\n   * assert.deepStrictEqual(\n   *   pipe(Option.none(), Option.match({ onNone: () => 'a none', onSome: (a) => `a some containing ${a}` })),\n   *   'a none'\n   * )\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <A, B, C = B>(\n    self: Option<A>,\n    options: {\n      readonly onNone: LazyArg<B>\n      readonly onSome: (a: A) => C\n    }\n  ): B | C\n} = dual(\n  2,\n  <A, B, C = B>(self: Option<A>, { onNone, onSome }: {\n    readonly onNone: LazyArg<B>\n    readonly onSome: (a: A) => C\n  }): B | C => isNone(self) ? onNone() : onSome(self.value)\n)\n\n/**\n * Returns a type guard from a `Option` returning function.\n * This function ensures that a type guard definition is type-safe.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const parsePositive = (n: number): Option.Option<number> =>\n *   n > 0 ? Option.some(n) : Option.none()\n *\n * const isPositive = Option.toRefinement(parsePositive)\n *\n * assert.deepStrictEqual(isPositive(1), true)\n * assert.deepStrictEqual(isPositive(-1), false)\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const toRefinement = <A, B extends A>(f: (a: A) => Option<B>): (a: A) => a is B => (a: A): a is B => isSome(f(a))\n\n/**\n * Converts an `Iterable` of values into an `Option`. Returns the first value of the `Iterable` wrapped in a `Some`\n * if the `Iterable` is not empty, otherwise returns `None`.\n *\n * @param collection - The `Iterable` to be converted to an `Option`.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.fromIterable([1, 2, 3]), Option.some(1))\n * assert.deepStrictEqual(Option.fromIterable([]), Option.none())\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromIterable = <A>(collection: Iterable<A>): Option<A> => {\n  for (const a of collection) {\n    return some(a)\n  }\n  return none()\n}\n\n/**\n * Converts a `Either` to an `Option` discarding the error.\n *\n * @example\n * import { Option, Either } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getRight(Either.right('ok')), Option.some('ok'))\n * assert.deepStrictEqual(Option.getRight(Either.left('err')), Option.none())\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const getRight: <R, L>(self: Either<R, L>) => Option<R> = either.getRight\n\n/**\n * Converts a `Either` to an `Option` discarding the value.\n *\n * @example\n * import { Option, Either } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getLeft(Either.right(\"ok\")), Option.none())\n * assert.deepStrictEqual(Option.getLeft(Either.left(\"a\")), Option.some(\"a\"))\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const getLeft: <R, L>(self: Either<R, L>) => Option<L> = either.getLeft\n\n/**\n * Returns the value of the `Option` if it is `Some`, otherwise returns `onNone`\n *\n * @param self - The `Option` to get the value of.\n * @param onNone - Function that returns the default value to return if the `Option` is `None`.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(Option.some(1), Option.getOrElse(() => 0)), 1)\n * assert.deepStrictEqual(pipe(Option.none(), Option.getOrElse(() => 0)), 0)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrElse: {\n  /**\n   * Returns the value of the `Option` if it is `Some`, otherwise returns `onNone`\n   *\n   * @param self - The `Option` to get the value of.\n   * @param onNone - Function that returns the default value to return if the `Option` is `None`.\n   *\n   * @example\n   * import { pipe, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe(Option.some(1), Option.getOrElse(() => 0)), 1)\n   * assert.deepStrictEqual(pipe(Option.none(), Option.getOrElse(() => 0)), 0)\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <B>(onNone: LazyArg<B>): <A>(self: Option<A>) => B | A\n  /**\n   * Returns the value of the `Option` if it is `Some`, otherwise returns `onNone`\n   *\n   * @param self - The `Option` to get the value of.\n   * @param onNone - Function that returns the default value to return if the `Option` is `None`.\n   *\n   * @example\n   * import { pipe, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe(Option.some(1), Option.getOrElse(() => 0)), 1)\n   * assert.deepStrictEqual(pipe(Option.none(), Option.getOrElse(() => 0)), 0)\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, onNone: LazyArg<B>): A | B\n} = dual(\n  2,\n  <A, B>(self: Option<A>, onNone: LazyArg<B>): A | B => isNone(self) ? onNone() : self.value\n)\n\n/**\n * Returns the provided `Option` `that` if `self` is `None`, otherwise returns `self`.\n *\n * @param self - The first `Option` to be checked.\n * @param that - The `Option` to return if `self` is `None`.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.none(),\n *     Option.orElse(() => Option.none())\n *   ),\n *   Option.none()\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some('a'),\n *     Option.orElse(() => Option.none())\n *   ),\n *   Option.some('a')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.none(),\n *     Option.orElse(() => Option.some('b'))\n *   ),\n *   Option.some('b')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some('a'),\n *     Option.orElse(() => Option.some('b'))\n *   ),\n *   Option.some('a')\n * )\n *\n * @category error handling\n * @since 2.0.0\n */\nexport const orElse: {\n  /**\n   * Returns the provided `Option` `that` if `self` is `None`, otherwise returns `self`.\n   *\n   * @param self - The first `Option` to be checked.\n   * @param that - The `Option` to return if `self` is `None`.\n   *\n   * @example\n   * import { pipe, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Option.none(),\n   *     Option.orElse(() => Option.none())\n   *   ),\n   *   Option.none()\n   * )\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Option.some('a'),\n   *     Option.orElse(() => Option.none())\n   *   ),\n   *   Option.some('a')\n   * )\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Option.none(),\n   *     Option.orElse(() => Option.some('b'))\n   *   ),\n   *   Option.some('b')\n   * )\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Option.some('a'),\n   *     Option.orElse(() => Option.some('b'))\n   *   ),\n   *   Option.some('a')\n   * )\n   *\n   * @category error handling\n   * @since 2.0.0\n   */\n  <B>(that: LazyArg<Option<B>>): <A>(self: Option<A>) => Option<B | A>\n  /**\n   * Returns the provided `Option` `that` if `self` is `None`, otherwise returns `self`.\n   *\n   * @param self - The first `Option` to be checked.\n   * @param that - The `Option` to return if `self` is `None`.\n   *\n   * @example\n   * import { pipe, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Option.none(),\n   *     Option.orElse(() => Option.none())\n   *   ),\n   *   Option.none()\n   * )\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Option.some('a'),\n   *     Option.orElse(() => Option.none())\n   *   ),\n   *   Option.some('a')\n   * )\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Option.none(),\n   *     Option.orElse(() => Option.some('b'))\n   *   ),\n   *   Option.some('b')\n   * )\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Option.some('a'),\n   *     Option.orElse(() => Option.some('b'))\n   *   ),\n   *   Option.some('a')\n   * )\n   *\n   * @category error handling\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, that: LazyArg<Option<B>>): Option<A | B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, that: LazyArg<Option<B>>): Option<A | B> => isNone(self) ? that() : self\n)\n\n/**\n * Returns the provided default value as `Some` if `self` is `None`, otherwise returns `self`.\n *\n * @param self - The first `Option` to be checked.\n * @param onNone - Function that returns the default value to return if the `Option` is `None`.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.none(),\n *     Option.orElseSome(() => 'b')\n *   ),\n *   Option.some('b')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some('a'),\n *     Option.orElseSome(() => 'b')\n *   ),\n *   Option.some('a')\n * )\n *\n * @category error handling\n * @since 2.0.0\n */\nexport const orElseSome: {\n  /**\n   * Returns the provided default value as `Some` if `self` is `None`, otherwise returns `self`.\n   *\n   * @param self - The first `Option` to be checked.\n   * @param onNone - Function that returns the default value to return if the `Option` is `None`.\n   *\n   * @example\n   * import { pipe, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Option.none(),\n   *     Option.orElseSome(() => 'b')\n   *   ),\n   *   Option.some('b')\n   * )\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Option.some('a'),\n   *     Option.orElseSome(() => 'b')\n   *   ),\n   *   Option.some('a')\n   * )\n   *\n   * @category error handling\n   * @since 2.0.0\n   */\n  <B>(onNone: LazyArg<B>): <A>(self: Option<A>) => Option<B | A>\n  /**\n   * Returns the provided default value as `Some` if `self` is `None`, otherwise returns `self`.\n   *\n   * @param self - The first `Option` to be checked.\n   * @param onNone - Function that returns the default value to return if the `Option` is `None`.\n   *\n   * @example\n   * import { pipe, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Option.none(),\n   *     Option.orElseSome(() => 'b')\n   *   ),\n   *   Option.some('b')\n   * )\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Option.some('a'),\n   *     Option.orElseSome(() => 'b')\n   *   ),\n   *   Option.some('a')\n   * )\n   *\n   * @category error handling\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, onNone: LazyArg<B>): Option<A | B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, onNone: LazyArg<B>): Option<A | B> => isNone(self) ? some(onNone()) : self\n)\n\n/**\n * Similar to `orElse`, but instead of returning a simple union, it returns an `Either` object,\n * which contains information about which of the two `Option`s has been chosen.\n *\n * This is useful when it's important to know whether the value was retrieved from the first `Option` or the second option.\n *\n * @param self - The first `Option` to be checked.\n * @param that - The second `Option` to be considered if the first `Option` is `None`.\n *\n * @category error handling\n * @since 2.0.0\n */\nexport const orElseEither: {\n  /**\n   * Similar to `orElse`, but instead of returning a simple union, it returns an `Either` object,\n   * which contains information about which of the two `Option`s has been chosen.\n   *\n   * This is useful when it's important to know whether the value was retrieved from the first `Option` or the second option.\n   *\n   * @param self - The first `Option` to be checked.\n   * @param that - The second `Option` to be considered if the first `Option` is `None`.\n   *\n   * @category error handling\n   * @since 2.0.0\n   */\n  <B>(that: LazyArg<Option<B>>): <A>(self: Option<A>) => Option<Either<B, A>>\n  /**\n   * Similar to `orElse`, but instead of returning a simple union, it returns an `Either` object,\n   * which contains information about which of the two `Option`s has been chosen.\n   *\n   * This is useful when it's important to know whether the value was retrieved from the first `Option` or the second option.\n   *\n   * @param self - The first `Option` to be checked.\n   * @param that - The second `Option` to be considered if the first `Option` is `None`.\n   *\n   * @category error handling\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, that: LazyArg<Option<B>>): Option<Either<B, A>>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, that: LazyArg<Option<B>>): Option<Either<B, A>> =>\n    isNone(self) ? map(that(), either.right) : map(self, either.left)\n)\n\n/**\n * Given an `Iterable` collection of `Option`s, returns the first `Some` found in the collection.\n *\n * @param collection - An iterable collection of `Option` to be searched.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.firstSomeOf([Option.none(), Option.some(1), Option.some(2)]), Option.some(1))\n *\n * @category error handling\n * @since 2.0.0\n */\nexport const firstSomeOf = <T, C extends Iterable<Option<T>> = Iterable<Option<T>>>(\n  collection: C\n): [C] extends [Iterable<Option<infer A>>] ? Option<A> : never => {\n  let out: Option<unknown> = none()\n  for (out of collection) {\n    if (isSome(out)) {\n      return out as any\n    }\n  }\n  return out as any\n}\n\n/**\n * Constructs a new `Option` from a nullable type. If the value is `null` or `undefined`, returns `None`, otherwise\n * returns the value wrapped in a `Some`.\n *\n * @param nullableValue - The nullable value to be converted to an `Option`.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.fromNullable(undefined), Option.none())\n * assert.deepStrictEqual(Option.fromNullable(null), Option.none())\n * assert.deepStrictEqual(Option.fromNullable(1), Option.some(1))\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const fromNullable = <A>(\n  nullableValue: A\n): Option<\n  NonNullable<A>\n> => (nullableValue == null ? none() : some(nullableValue as NonNullable<A>))\n\n/**\n * This API is useful for lifting a function that returns `null` or `undefined` into the `Option` context.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const parse = (s: string): number | undefined => {\n *   const n = parseFloat(s)\n *   return isNaN(n) ? undefined : n\n * }\n *\n * const parseOption = Option.liftNullable(parse)\n *\n * assert.deepStrictEqual(parseOption('1'), Option.some(1))\n * assert.deepStrictEqual(parseOption('not a number'), Option.none())\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const liftNullable = <A extends ReadonlyArray<unknown>, B>(\n  f: (...a: A) => B | null | undefined\n): (...a: A) => Option<NonNullable<B>> =>\n(...a) => fromNullable(f(...a))\n\n/**\n * Returns the value of the `Option` if it is a `Some`, otherwise returns `null`.\n *\n * @param self - The `Option` to extract the value from.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getOrNull(Option.some(1)), 1)\n * assert.deepStrictEqual(Option.getOrNull(Option.none()), null)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrNull: <A>(self: Option<A>) => A | null = getOrElse(constNull)\n\n/**\n * Returns the value of the `Option` if it is a `Some`, otherwise returns `undefined`.\n *\n * @param self - The `Option` to extract the value from.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getOrUndefined(Option.some(1)), 1)\n * assert.deepStrictEqual(Option.getOrUndefined(Option.none()), undefined)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrUndefined: <A>(self: Option<A>) => A | undefined = getOrElse(constUndefined)\n\n/**\n * A utility function that lifts a function that throws exceptions into a function that returns an `Option`.\n *\n * This function is useful for any function that might throw an exception, allowing the developer to handle\n * the exception in a more functional way.\n *\n * @param f - the function that can throw exceptions.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const parse = Option.liftThrowable(JSON.parse)\n *\n * assert.deepStrictEqual(parse(\"1\"), Option.some(1))\n * assert.deepStrictEqual(parse(\"\"), Option.none())\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const liftThrowable = <A extends ReadonlyArray<unknown>, B>(\n  f: (...a: A) => B\n): (...a: A) => Option<B> =>\n(...a) => {\n  try {\n    return some(f(...a))\n  } catch (e) {\n    return none()\n  }\n}\n\n/**\n * Extracts the value of an `Option` or throws if the `Option` is `None`.\n *\n * If a default error is sufficient for your use case and you don't need to configure the thrown error, see {@link getOrThrow}.\n *\n * @param self - The `Option` to extract the value from.\n * @param onNone - A function that will be called if the `Option` is `None`. It returns the error to be thrown.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Option.getOrThrowWith(Option.some(1), () => new Error('Unexpected None')),\n *   1\n * )\n * assert.throws(() => Option.getOrThrowWith(Option.none(), () => new Error('Unexpected None')))\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const getOrThrowWith: {\n  /**\n   * Extracts the value of an `Option` or throws if the `Option` is `None`.\n   *\n   * If a default error is sufficient for your use case and you don't need to configure the thrown error, see {@link getOrThrow}.\n   *\n   * @param self - The `Option` to extract the value from.\n   * @param onNone - A function that will be called if the `Option` is `None`. It returns the error to be thrown.\n   *\n   * @example\n   * import { Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Option.getOrThrowWith(Option.some(1), () => new Error('Unexpected None')),\n   *   1\n   * )\n   * assert.throws(() => Option.getOrThrowWith(Option.none(), () => new Error('Unexpected None')))\n   *\n   * @category conversions\n   * @since 2.0.0\n   */\n  (onNone: () => unknown): <A>(self: Option<A>) => A\n  /**\n   * Extracts the value of an `Option` or throws if the `Option` is `None`.\n   *\n   * If a default error is sufficient for your use case and you don't need to configure the thrown error, see {@link getOrThrow}.\n   *\n   * @param self - The `Option` to extract the value from.\n   * @param onNone - A function that will be called if the `Option` is `None`. It returns the error to be thrown.\n   *\n   * @example\n   * import { Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Option.getOrThrowWith(Option.some(1), () => new Error('Unexpected None')),\n   *   1\n   * )\n   * assert.throws(() => Option.getOrThrowWith(Option.none(), () => new Error('Unexpected None')))\n   *\n   * @category conversions\n   * @since 2.0.0\n   */\n  <A>(self: Option<A>, onNone: () => unknown): A\n} = dual(2, <A>(self: Option<A>, onNone: () => unknown): A => {\n  if (isSome(self)) {\n    return self.value\n  }\n  throw onNone()\n})\n\n/**\n * Extracts the value of an `Option` or throws if the `Option` is `None`.\n *\n * The thrown error is a default error. To configure the error thrown, see  {@link getOrThrowWith}.\n *\n * @param self - The `Option` to extract the value from.\n * @throws `Error(\"getOrThrow called on a None\")`\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getOrThrow(Option.some(1)), 1)\n * assert.throws(() => Option.getOrThrow(Option.none()))\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const getOrThrow: <A>(self: Option<A>) => A = getOrThrowWith(() => new Error(\"getOrThrow called on a None\"))\n\n/**\n * Maps the `Some` side of an `Option` value to a new `Option` value.\n *\n * @param self - An `Option` to map\n * @param f - The function to map over the value of the `Option`\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const map: {\n  /**\n   * Maps the `Some` side of an `Option` value to a new `Option` value.\n   *\n   * @param self - An `Option` to map\n   * @param f - The function to map over the value of the `Option`\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => B): (self: Option<A>) => Option<B>\n  /**\n   * Maps the `Some` side of an `Option` value to a new `Option` value.\n   *\n   * @param self - An `Option` to map\n   * @param f - The function to map over the value of the `Option`\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, f: (a: A) => B): Option<B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, f: (a: A) => B): Option<B> => isNone(self) ? none() : some(f(self.value))\n)\n\n/**\n * Maps the `Some` value of this `Option` to the specified constant value.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const as: {\n  /**\n   * Maps the `Some` value of this `Option` to the specified constant value.\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <B>(b: B): <X>(self: Option<X>) => Option<B>\n} = dual(2, <X, B>(self: Option<X>, b: B): Option<B> => map(self, () => b))\n\n/**\n * Maps the `Some` value of this `Option` to the `void` constant value.\n *\n * This is useful when the value of the `Option` is not needed, but the presence or absence of the value is important.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const asVoid: <_>(self: Option<_>) => Option<void> = as(undefined)\n\nconst void_: Option<void> = some(undefined)\nexport {\n  /**\n   * @since 2.0.0\n   */\n  void_ as void\n}\n\n/**\n * Applies a function to the value of an `Option` and flattens the result, if the input is `Some`.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMap: {\n  /**\n   * Applies a function to the value of an `Option` and flattens the result, if the input is `Some`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => Option<B>): (self: Option<A>) => Option<B>\n  /**\n   * Applies a function to the value of an `Option` and flattens the result, if the input is `Some`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, f: (a: A) => Option<B>): Option<B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, f: (a: A) => Option<B>): Option<B> => isNone(self) ? none() : f(self.value)\n)\n\n/**\n * Executes a sequence of two `Option`s. The second `Option` can be dependent on the result of the first `Option`.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const andThen: {\n  /**\n   * Executes a sequence of two `Option`s. The second `Option` can be dependent on the result of the first `Option`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => Option<B>): (self: Option<A>) => Option<B>\n  /**\n   * Executes a sequence of two `Option`s. The second `Option` can be dependent on the result of the first `Option`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <B>(f: Option<B>): <A>(self: Option<A>) => Option<B>\n  /**\n   * Executes a sequence of two `Option`s. The second `Option` can be dependent on the result of the first `Option`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => B): (self: Option<A>) => Option<B>\n  /**\n   * Executes a sequence of two `Option`s. The second `Option` can be dependent on the result of the first `Option`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <B>(f: NotFunction<B>): <A>(self: Option<A>) => Option<B>\n  /**\n   * Executes a sequence of two `Option`s. The second `Option` can be dependent on the result of the first `Option`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, f: (a: A) => Option<B>): Option<B>\n  /**\n   * Executes a sequence of two `Option`s. The second `Option` can be dependent on the result of the first `Option`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, f: Option<B>): Option<B>\n  /**\n   * Executes a sequence of two `Option`s. The second `Option` can be dependent on the result of the first `Option`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, f: (a: A) => B): Option<B>\n  /**\n   * Executes a sequence of two `Option`s. The second `Option` can be dependent on the result of the first `Option`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, f: NotFunction<B>): Option<B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, f: (a: A) => Option<B> | Option<B>): Option<B> =>\n    flatMap(self, (a) => {\n      const b = isFunction(f) ? f(a) : f\n      return isOption(b) ? b : some(b)\n    })\n)\n\n/**\n * This is `flatMap` + `fromNullable`, useful when working with optional values.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * interface Employee {\n *   company?: {\n *     address?: {\n *       street?: {\n *         name?: string\n *       }\n *     }\n *   }\n * }\n *\n * const employee1: Employee = { company: { address: { street: { name: 'high street' } } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some(employee1),\n *     Option.flatMapNullable(employee => employee.company?.address?.street?.name),\n *   ),\n *   Option.some('high street')\n * )\n *\n * const employee2: Employee = { company: { address: { street: {} } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some(employee2),\n *     Option.flatMapNullable(employee => employee.company?.address?.street?.name),\n *   ),\n *   Option.none()\n * )\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMapNullable: {\n  /**\n   * This is `flatMap` + `fromNullable`, useful when working with optional values.\n   *\n   * @example\n   * import { pipe, Option } from \"effect\"\n   *\n   * interface Employee {\n   *   company?: {\n   *     address?: {\n   *       street?: {\n   *         name?: string\n   *       }\n   *     }\n   *   }\n   * }\n   *\n   * const employee1: Employee = { company: { address: { street: { name: 'high street' } } } }\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Option.some(employee1),\n   *     Option.flatMapNullable(employee => employee.company?.address?.street?.name),\n   *   ),\n   *   Option.some('high street')\n   * )\n   *\n   * const employee2: Employee = { company: { address: { street: {} } } }\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Option.some(employee2),\n   *     Option.flatMapNullable(employee => employee.company?.address?.street?.name),\n   *   ),\n   *   Option.none()\n   * )\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => B | null | undefined): (self: Option<A>) => Option<NonNullable<B>>\n  /**\n   * This is `flatMap` + `fromNullable`, useful when working with optional values.\n   *\n   * @example\n   * import { pipe, Option } from \"effect\"\n   *\n   * interface Employee {\n   *   company?: {\n   *     address?: {\n   *       street?: {\n   *         name?: string\n   *       }\n   *     }\n   *   }\n   * }\n   *\n   * const employee1: Employee = { company: { address: { street: { name: 'high street' } } } }\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Option.some(employee1),\n   *     Option.flatMapNullable(employee => employee.company?.address?.street?.name),\n   *   ),\n   *   Option.some('high street')\n   * )\n   *\n   * const employee2: Employee = { company: { address: { street: {} } } }\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Option.some(employee2),\n   *     Option.flatMapNullable(employee => employee.company?.address?.street?.name),\n   *   ),\n   *   Option.none()\n   * )\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, f: (a: A) => B | null | undefined): Option<NonNullable<B>>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, f: (a: A) => B | null | undefined): Option<NonNullable<B>> =>\n    isNone(self) ? none() : fromNullable(f(self.value))\n)\n\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatten: <A>(self: Option<Option<A>>) => Option<A> = flatMap(identity)\n\n/**\n * @category zipping\n * @since 2.0.0\n */\nexport const zipRight: {\n  /**\n   * @category zipping\n   * @since 2.0.0\n   */\n  <B>(that: Option<B>): <_>(self: Option<_>) => Option<B>\n  /**\n   * @category zipping\n   * @since 2.0.0\n   */\n  <X, B>(self: Option<X>, that: Option<B>): Option<B>\n} = dual(2, <X, B>(self: Option<X>, that: Option<B>): Option<B> => flatMap(self, () => that))\n\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport const composeK: {\n  /**\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <B, C>(bfc: (b: B) => Option<C>): <A>(afb: (a: A) => Option<B>) => (a: A) => Option<C>\n  /**\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B, C>(afb: (a: A) => Option<B>, bfc: (b: B) => Option<C>): (a: A) => Option<C>\n} = dual(2, <A, B, C>(afb: (a: A) => Option<B>, bfc: (b: B) => Option<C>) => (a: A): Option<C> => flatMap(afb(a), bfc))\n\n/**\n * Sequences the specified `that` `Option` but ignores its value.\n *\n * It is useful when we want to chain multiple operations, but only care about the result of `self`.\n *\n * @param that - The `Option` that will be ignored in the chain and discarded\n * @param self - The `Option` we care about\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zipLeft: {\n  /**\n   * Sequences the specified `that` `Option` but ignores its value.\n   *\n   * It is useful when we want to chain multiple operations, but only care about the result of `self`.\n   *\n   * @param that - The `Option` that will be ignored in the chain and discarded\n   * @param self - The `Option` we care about\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <_>(that: Option<_>): <A>(self: Option<A>) => Option<A>\n  /**\n   * Sequences the specified `that` `Option` but ignores its value.\n   *\n   * It is useful when we want to chain multiple operations, but only care about the result of `self`.\n   *\n   * @param that - The `Option` that will be ignored in the chain and discarded\n   * @param self - The `Option` we care about\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <A, X>(self: Option<A>, that: Option<X>): Option<A>\n} = dual(2, <A, X>(self: Option<A>, that: Option<X>): Option<A> => tap(self, () => that))\n\n/**\n * Applies the provided function `f` to the value of the `Option` if it is `Some` and returns the original `Option`\n * unless `f` returns `None`, in which case it returns `None`.\n *\n * This function is useful for performing additional computations on the value of the input `Option` without affecting its value.\n *\n * @param f - Function to apply to the value of the `Option` if it is `Some`\n * @param self - The `Option` to apply the function to\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const getInteger = (n: number) => Number.isInteger(n) ? Option.some(n) : Option.none()\n *\n * assert.deepStrictEqual(Option.tap(Option.none(), getInteger), Option.none())\n * assert.deepStrictEqual(Option.tap(Option.some(1), getInteger), Option.some(1))\n * assert.deepStrictEqual(Option.tap(Option.some(1.14), getInteger), Option.none())\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const tap: {\n  /**\n   * Applies the provided function `f` to the value of the `Option` if it is `Some` and returns the original `Option`\n   * unless `f` returns `None`, in which case it returns `None`.\n   *\n   * This function is useful for performing additional computations on the value of the input `Option` without affecting its value.\n   *\n   * @param f - Function to apply to the value of the `Option` if it is `Some`\n   * @param self - The `Option` to apply the function to\n   *\n   * @example\n   * import { Option } from \"effect\"\n   *\n   * const getInteger = (n: number) => Number.isInteger(n) ? Option.some(n) : Option.none()\n   *\n   * assert.deepStrictEqual(Option.tap(Option.none(), getInteger), Option.none())\n   * assert.deepStrictEqual(Option.tap(Option.some(1), getInteger), Option.some(1))\n   * assert.deepStrictEqual(Option.tap(Option.some(1.14), getInteger), Option.none())\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, X>(f: (a: A) => Option<X>): (self: Option<A>) => Option<A>\n  /**\n   * Applies the provided function `f` to the value of the `Option` if it is `Some` and returns the original `Option`\n   * unless `f` returns `None`, in which case it returns `None`.\n   *\n   * This function is useful for performing additional computations on the value of the input `Option` without affecting its value.\n   *\n   * @param f - Function to apply to the value of the `Option` if it is `Some`\n   * @param self - The `Option` to apply the function to\n   *\n   * @example\n   * import { Option } from \"effect\"\n   *\n   * const getInteger = (n: number) => Number.isInteger(n) ? Option.some(n) : Option.none()\n   *\n   * assert.deepStrictEqual(Option.tap(Option.none(), getInteger), Option.none())\n   * assert.deepStrictEqual(Option.tap(Option.some(1), getInteger), Option.some(1))\n   * assert.deepStrictEqual(Option.tap(Option.some(1.14), getInteger), Option.none())\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, X>(self: Option<A>, f: (a: A) => Option<X>): Option<A>\n} = dual(2, <A, X>(self: Option<A>, f: (a: A) => Option<X>): Option<A> => flatMap(self, (a) => map(f(a), () => a)))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const product = <A, B>(self: Option<A>, that: Option<B>): Option<[A, B]> =>\n  isSome(self) && isSome(that) ? some([self.value, that.value]) : none()\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const productMany = <A>(\n  self: Option<A>,\n  collection: Iterable<Option<A>>\n): Option<[A, ...Array<A>]> => {\n  if (isNone(self)) {\n    return none()\n  }\n  const out: [A, ...Array<A>] = [self.value]\n  for (const o of collection) {\n    if (isNone(o)) {\n      return none()\n    }\n    out.push(o.value)\n  }\n  return some(out)\n}\n\n/**\n * Takes a structure of `Option`s and returns an `Option` of values with the same structure.\n *\n * - If a tuple is supplied, then the returned `Option` will contain a tuple with the same length.\n * - If a struct is supplied, then the returned `Option` will contain a struct with the same keys.\n * - If an iterable is supplied, then the returned `Option` will contain an array.\n *\n * @param fields - the struct of `Option`s to be sequenced.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.all([Option.some(1), Option.some(2)]), Option.some([1, 2]))\n * assert.deepStrictEqual(Option.all({ a: Option.some(1), b: Option.some(\"hello\") }), Option.some({ a: 1, b: \"hello\" }))\n * assert.deepStrictEqual(Option.all({ a: Option.some(1), b: Option.none() }), Option.none())\n *\n * @category combining\n * @since 2.0.0\n */\n// @ts-expect-error\nexport const all: <const I extends Iterable<Option<any>> | Record<string, Option<any>>>(\n  input: I\n) => [I] extends [ReadonlyArray<Option<any>>] ? Option<\n    { -readonly [K in keyof I]: [I[K]] extends [Option<infer A>] ? A : never }\n  >\n  : [I] extends [Iterable<Option<infer A>>] ? Option<Array<A>>\n  : Option<{ -readonly [K in keyof I]: [I[K]] extends [Option<infer A>] ? A : never }> = (\n    input: Iterable<Option<any>> | Record<string, Option<any>>\n  ): Option<any> => {\n    if (Symbol.iterator in input) {\n      const out: Array<Option<any>> = []\n      for (const o of (input as Iterable<Option<any>>)) {\n        if (isNone(o)) {\n          return none()\n        }\n        out.push(o.value)\n      }\n      return some(out)\n    }\n\n    const out: Record<string, any> = {}\n    for (const key of Object.keys(input)) {\n      const o = input[key]\n      if (isNone(o)) {\n        return none()\n      }\n      out[key] = o.value\n    }\n    return some(out)\n  }\n\n/**\n * Zips two `Option` values together using a provided function, returning a new `Option` of the result.\n *\n * @param self - The left-hand side of the zip operation\n * @param that - The right-hand side of the zip operation\n * @param f - The function used to combine the values of the two `Option`s\n *\n * @example\n * import { Option } from \"effect\"\n *\n * type Complex = [real: number, imaginary: number]\n *\n * const complex = (real: number, imaginary: number): Complex => [real, imaginary]\n *\n * assert.deepStrictEqual(Option.zipWith(Option.none(), Option.none(), complex), Option.none())\n * assert.deepStrictEqual(Option.zipWith(Option.some(1), Option.none(), complex), Option.none())\n * assert.deepStrictEqual(Option.zipWith(Option.none(), Option.some(1), complex), Option.none())\n * assert.deepStrictEqual(Option.zipWith(Option.some(1), Option.some(2), complex), Option.some([1, 2]))\n *\n * assert.deepStrictEqual(Option.zipWith(Option.some(1), complex)(Option.some(2)), Option.some([2, 1]))\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zipWith: {\n  /**\n   * Zips two `Option` values together using a provided function, returning a new `Option` of the result.\n   *\n   * @param self - The left-hand side of the zip operation\n   * @param that - The right-hand side of the zip operation\n   * @param f - The function used to combine the values of the two `Option`s\n   *\n   * @example\n   * import { Option } from \"effect\"\n   *\n   * type Complex = [real: number, imaginary: number]\n   *\n   * const complex = (real: number, imaginary: number): Complex => [real, imaginary]\n   *\n   * assert.deepStrictEqual(Option.zipWith(Option.none(), Option.none(), complex), Option.none())\n   * assert.deepStrictEqual(Option.zipWith(Option.some(1), Option.none(), complex), Option.none())\n   * assert.deepStrictEqual(Option.zipWith(Option.none(), Option.some(1), complex), Option.none())\n   * assert.deepStrictEqual(Option.zipWith(Option.some(1), Option.some(2), complex), Option.some([1, 2]))\n   *\n   * assert.deepStrictEqual(Option.zipWith(Option.some(1), complex)(Option.some(2)), Option.some([2, 1]))\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <B, A, C>(that: Option<B>, f: (a: A, b: B) => C): (self: Option<A>) => Option<C>\n  /**\n   * Zips two `Option` values together using a provided function, returning a new `Option` of the result.\n   *\n   * @param self - The left-hand side of the zip operation\n   * @param that - The right-hand side of the zip operation\n   * @param f - The function used to combine the values of the two `Option`s\n   *\n   * @example\n   * import { Option } from \"effect\"\n   *\n   * type Complex = [real: number, imaginary: number]\n   *\n   * const complex = (real: number, imaginary: number): Complex => [real, imaginary]\n   *\n   * assert.deepStrictEqual(Option.zipWith(Option.none(), Option.none(), complex), Option.none())\n   * assert.deepStrictEqual(Option.zipWith(Option.some(1), Option.none(), complex), Option.none())\n   * assert.deepStrictEqual(Option.zipWith(Option.none(), Option.some(1), complex), Option.none())\n   * assert.deepStrictEqual(Option.zipWith(Option.some(1), Option.some(2), complex), Option.some([1, 2]))\n   *\n   * assert.deepStrictEqual(Option.zipWith(Option.some(1), complex)(Option.some(2)), Option.some([2, 1]))\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <A, B, C>(self: Option<A>, that: Option<B>, f: (a: A, b: B) => C): Option<C>\n} = dual(\n  3,\n  <A, B, C>(self: Option<A>, that: Option<B>, f: (a: A, b: B) => C): Option<C> =>\n    map(product(self, that), ([a, b]) => f(a, b))\n)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const ap: {\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A>(that: Option<A>): <B>(self: Option<(a: A) => B>) => Option<B>\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<(a: A) => B>, that: Option<A>): Option<B>\n} = dual(2, <A, B>(self: Option<(a: A) => B>, that: Option<A>): Option<B> => zipWith(self, that, (f, a) => f(a)))\n\n/**\n * Reduces an `Iterable` of `Option<A>` to a single value of type `B`, elements that are `None` are ignored.\n *\n * @param self - The Iterable of `Option<A>` to be reduced.\n * @param b - The initial value of the accumulator.\n * @param f - The reducing function that takes the current accumulator value and the unwrapped value of an `Option<A>`.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * const iterable = [Option.some(1), Option.none(), Option.some(2), Option.none()]\n * assert.deepStrictEqual(pipe(iterable, Option.reduceCompact(0, (b, a) => b + a)), 3)\n *\n * @category folding\n * @since 2.0.0\n */\nexport const reduceCompact: {\n  /**\n   * Reduces an `Iterable` of `Option<A>` to a single value of type `B`, elements that are `None` are ignored.\n   *\n   * @param self - The Iterable of `Option<A>` to be reduced.\n   * @param b - The initial value of the accumulator.\n   * @param f - The reducing function that takes the current accumulator value and the unwrapped value of an `Option<A>`.\n   *\n   * @example\n   * import { pipe, Option } from \"effect\"\n   *\n   * const iterable = [Option.some(1), Option.none(), Option.some(2), Option.none()]\n   * assert.deepStrictEqual(pipe(iterable, Option.reduceCompact(0, (b, a) => b + a)), 3)\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <B, A>(b: B, f: (b: B, a: A) => B): (self: Iterable<Option<A>>) => B\n  /**\n   * Reduces an `Iterable` of `Option<A>` to a single value of type `B`, elements that are `None` are ignored.\n   *\n   * @param self - The Iterable of `Option<A>` to be reduced.\n   * @param b - The initial value of the accumulator.\n   * @param f - The reducing function that takes the current accumulator value and the unwrapped value of an `Option<A>`.\n   *\n   * @example\n   * import { pipe, Option } from \"effect\"\n   *\n   * const iterable = [Option.some(1), Option.none(), Option.some(2), Option.none()]\n   * assert.deepStrictEqual(pipe(iterable, Option.reduceCompact(0, (b, a) => b + a)), 3)\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<Option<A>>, b: B, f: (b: B, a: A) => B): B\n} = dual(\n  3,\n  <A, B>(self: Iterable<Option<A>>, b: B, f: (b: B, a: A) => B): B => {\n    let out: B = b\n    for (const oa of self) {\n      if (isSome(oa)) {\n        out = f(out, oa.value)\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Transforms an `Option` into an `Array`.\n * If the input is `None`, an empty array is returned.\n * If the input is `Some`, the value is wrapped in an array.\n *\n * @param self - The `Option` to convert to an array.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.toArray(Option.some(1)), [1])\n * assert.deepStrictEqual(Option.toArray(Option.none()), [])\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const toArray = <A>(self: Option<A>): Array<A> => isNone(self) ? [] : [self.value]\n\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport const partitionMap: {\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B, C>(f: (a: A) => Either<C, B>): (self: Option<A>) => [left: Option<B>, right: Option<C>]\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B, C>(self: Option<A>, f: (a: A) => Either<C, B>): [left: Option<B>, right: Option<C>]\n} = dual(2, <A, B, C>(\n  self: Option<A>,\n  f: (a: A) => Either<C, B>\n): [excluded: Option<B>, satisfying: Option<C>] => {\n  if (isNone(self)) {\n    return [none(), none()]\n  }\n  const e = f(self.value)\n  return either.isLeft(e) ? [some(e.left), none()] : [none(), some(e.right)]\n})\n\n/**\n * Maps over the value of an `Option` and filters out `None`s.\n *\n * Useful when in addition to filtering you also want to change the type of the `Option`.\n *\n * @param self - The `Option` to map over.\n * @param f - A function to apply to the value of the `Option`.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const evenNumber = (n: number) => n % 2 === 0 ? Option.some(n) : Option.none()\n *\n * assert.deepStrictEqual(Option.filterMap(Option.none(), evenNumber), Option.none())\n * assert.deepStrictEqual(Option.filterMap(Option.some(3), evenNumber), Option.none())\n * assert.deepStrictEqual(Option.filterMap(Option.some(2), evenNumber), Option.some(2))\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filterMap: {\n  /**\n   * Maps over the value of an `Option` and filters out `None`s.\n   *\n   * Useful when in addition to filtering you also want to change the type of the `Option`.\n   *\n   * @param self - The `Option` to map over.\n   * @param f - A function to apply to the value of the `Option`.\n   *\n   * @example\n   * import { Option } from \"effect\"\n   *\n   * const evenNumber = (n: number) => n % 2 === 0 ? Option.some(n) : Option.none()\n   *\n   * assert.deepStrictEqual(Option.filterMap(Option.none(), evenNumber), Option.none())\n   * assert.deepStrictEqual(Option.filterMap(Option.some(3), evenNumber), Option.none())\n   * assert.deepStrictEqual(Option.filterMap(Option.some(2), evenNumber), Option.some(2))\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => Option<B>): (self: Option<A>) => Option<B>\n  /**\n   * Maps over the value of an `Option` and filters out `None`s.\n   *\n   * Useful when in addition to filtering you also want to change the type of the `Option`.\n   *\n   * @param self - The `Option` to map over.\n   * @param f - A function to apply to the value of the `Option`.\n   *\n   * @example\n   * import { Option } from \"effect\"\n   *\n   * const evenNumber = (n: number) => n % 2 === 0 ? Option.some(n) : Option.none()\n   *\n   * assert.deepStrictEqual(Option.filterMap(Option.none(), evenNumber), Option.none())\n   * assert.deepStrictEqual(Option.filterMap(Option.some(3), evenNumber), Option.none())\n   * assert.deepStrictEqual(Option.filterMap(Option.some(2), evenNumber), Option.some(2))\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, f: (a: A) => Option<B>): Option<B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, f: (a: A) => Option<B>): Option<B> => isNone(self) ? none() : f(self.value)\n)\n\n/**\n * Filters an `Option` using a predicate. If the predicate is not satisfied or the `Option` is `None` returns `None`.\n *\n * If you need to change the type of the `Option` in addition to filtering, see `filterMap`.\n *\n * @param predicate - A predicate function to apply to the `Option` value.\n * @param fb - The `Option` to filter.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * // predicate\n * const isEven = (n: number) => n % 2 === 0\n *\n * assert.deepStrictEqual(Option.filter(Option.none(), isEven), Option.none())\n * assert.deepStrictEqual(Option.filter(Option.some(3), isEven), Option.none())\n * assert.deepStrictEqual(Option.filter(Option.some(2), isEven), Option.some(2))\n *\n * // refinement\n * const isNumber = (v: unknown): v is number => typeof v === \"number\"\n *\n * assert.deepStrictEqual(Option.filter(Option.none(), isNumber), Option.none())\n * assert.deepStrictEqual(Option.filter(Option.some('hello'), isNumber), Option.none())\n * assert.deepStrictEqual(Option.filter(Option.some(2), isNumber), Option.some(2))\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filter: {\n  /**\n   * Filters an `Option` using a predicate. If the predicate is not satisfied or the `Option` is `None` returns `None`.\n   *\n   * If you need to change the type of the `Option` in addition to filtering, see `filterMap`.\n   *\n   * @param predicate - A predicate function to apply to the `Option` value.\n   * @param fb - The `Option` to filter.\n   *\n   * @example\n   * import { Option } from \"effect\"\n   *\n   * // predicate\n   * const isEven = (n: number) => n % 2 === 0\n   *\n   * assert.deepStrictEqual(Option.filter(Option.none(), isEven), Option.none())\n   * assert.deepStrictEqual(Option.filter(Option.some(3), isEven), Option.none())\n   * assert.deepStrictEqual(Option.filter(Option.some(2), isEven), Option.some(2))\n   *\n   * // refinement\n   * const isNumber = (v: unknown): v is number => typeof v === \"number\"\n   *\n   * assert.deepStrictEqual(Option.filter(Option.none(), isNumber), Option.none())\n   * assert.deepStrictEqual(Option.filter(Option.some('hello'), isNumber), Option.none())\n   * assert.deepStrictEqual(Option.filter(Option.some(2), isNumber), Option.some(2))\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Option<A>) => Option<B>\n  /**\n   * Filters an `Option` using a predicate. If the predicate is not satisfied or the `Option` is `None` returns `None`.\n   *\n   * If you need to change the type of the `Option` in addition to filtering, see `filterMap`.\n   *\n   * @param predicate - A predicate function to apply to the `Option` value.\n   * @param fb - The `Option` to filter.\n   *\n   * @example\n   * import { Option } from \"effect\"\n   *\n   * // predicate\n   * const isEven = (n: number) => n % 2 === 0\n   *\n   * assert.deepStrictEqual(Option.filter(Option.none(), isEven), Option.none())\n   * assert.deepStrictEqual(Option.filter(Option.some(3), isEven), Option.none())\n   * assert.deepStrictEqual(Option.filter(Option.some(2), isEven), Option.some(2))\n   *\n   * // refinement\n   * const isNumber = (v: unknown): v is number => typeof v === \"number\"\n   *\n   * assert.deepStrictEqual(Option.filter(Option.none(), isNumber), Option.none())\n   * assert.deepStrictEqual(Option.filter(Option.some('hello'), isNumber), Option.none())\n   * assert.deepStrictEqual(Option.filter(Option.some(2), isNumber), Option.some(2))\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Option<A>) => Option<A>\n  /**\n   * Filters an `Option` using a predicate. If the predicate is not satisfied or the `Option` is `None` returns `None`.\n   *\n   * If you need to change the type of the `Option` in addition to filtering, see `filterMap`.\n   *\n   * @param predicate - A predicate function to apply to the `Option` value.\n   * @param fb - The `Option` to filter.\n   *\n   * @example\n   * import { Option } from \"effect\"\n   *\n   * // predicate\n   * const isEven = (n: number) => n % 2 === 0\n   *\n   * assert.deepStrictEqual(Option.filter(Option.none(), isEven), Option.none())\n   * assert.deepStrictEqual(Option.filter(Option.some(3), isEven), Option.none())\n   * assert.deepStrictEqual(Option.filter(Option.some(2), isEven), Option.some(2))\n   *\n   * // refinement\n   * const isNumber = (v: unknown): v is number => typeof v === \"number\"\n   *\n   * assert.deepStrictEqual(Option.filter(Option.none(), isNumber), Option.none())\n   * assert.deepStrictEqual(Option.filter(Option.some('hello'), isNumber), Option.none())\n   * assert.deepStrictEqual(Option.filter(Option.some(2), isNumber), Option.some(2))\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Option<A>, refinement: Refinement<A, B>): Option<B>\n  /**\n   * Filters an `Option` using a predicate. If the predicate is not satisfied or the `Option` is `None` returns `None`.\n   *\n   * If you need to change the type of the `Option` in addition to filtering, see `filterMap`.\n   *\n   * @param predicate - A predicate function to apply to the `Option` value.\n   * @param fb - The `Option` to filter.\n   *\n   * @example\n   * import { Option } from \"effect\"\n   *\n   * // predicate\n   * const isEven = (n: number) => n % 2 === 0\n   *\n   * assert.deepStrictEqual(Option.filter(Option.none(), isEven), Option.none())\n   * assert.deepStrictEqual(Option.filter(Option.some(3), isEven), Option.none())\n   * assert.deepStrictEqual(Option.filter(Option.some(2), isEven), Option.some(2))\n   *\n   * // refinement\n   * const isNumber = (v: unknown): v is number => typeof v === \"number\"\n   *\n   * assert.deepStrictEqual(Option.filter(Option.none(), isNumber), Option.none())\n   * assert.deepStrictEqual(Option.filter(Option.some('hello'), isNumber), Option.none())\n   * assert.deepStrictEqual(Option.filter(Option.some(2), isNumber), Option.some(2))\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A>(self: Option<A>, predicate: Predicate<A>): Option<A>\n} = dual(\n  2,\n  <A>(self: Option<A>, predicate: Predicate<A>): Option<A> =>\n    filterMap(self, (b) => (predicate(b) ? option.some(b) : option.none))\n)\n\n/**\n * @example\n * import { Option, Number } from \"effect\"\n *\n * const isEquivalent = Option.getEquivalence(Number.Equivalence)\n * assert.deepStrictEqual(isEquivalent(Option.none(), Option.none()), true)\n * assert.deepStrictEqual(isEquivalent(Option.none(), Option.some(1)), false)\n * assert.deepStrictEqual(isEquivalent(Option.some(1), Option.none()), false)\n * assert.deepStrictEqual(isEquivalent(Option.some(1), Option.some(2)), false)\n * assert.deepStrictEqual(isEquivalent(Option.some(1), Option.some(1)), true)\n *\n * @category equivalence\n * @since 2.0.0\n */\nexport const getEquivalence = <A>(isEquivalent: Equivalence.Equivalence<A>): Equivalence.Equivalence<Option<A>> =>\n  Equivalence.make((x, y) => isNone(x) ? isNone(y) : isNone(y) ? false : isEquivalent(x.value, y.value))\n\n/**\n * The `Order` instance allows `Option` values to be compared with\n * `compare`, whenever there is an `Order` instance for\n * the type the `Option` contains.\n *\n * `None` is considered to be less than any `Some` value.\n *\n * @example\n * import { pipe, Option, Number } from \"effect\"\n *\n * const O = Option.getOrder(Number.Order)\n * assert.deepStrictEqual(O(Option.none(), Option.none()), 0)\n * assert.deepStrictEqual(O(Option.none(), Option.some(1)), -1)\n * assert.deepStrictEqual(O(Option.some(1), Option.none()), 1)\n * assert.deepStrictEqual(O(Option.some(1), Option.some(2)), -1)\n * assert.deepStrictEqual(O(Option.some(1), Option.some(1)), 0)\n *\n * @category sorting\n * @since 2.0.0\n */\nexport const getOrder = <A>(O: Order<A>): Order<Option<A>> =>\n  order.make((self, that) => isSome(self) ? (isSome(that) ? O(self.value, that.value) : 1) : -1)\n\n/**\n * Lifts a binary function into `Option`.\n *\n * @param f - The function to lift.\n *\n * @category lifting\n * @since 2.0.0\n */\nexport const lift2 = <A, B, C>(f: (a: A, b: B) => C): {\n  (that: Option<B>): (self: Option<A>) => Option<C>\n  (self: Option<A>, that: Option<B>): Option<C>\n} => dual(2, (self: Option<A>, that: Option<B>): Option<C> => zipWith(self, that, f))\n\n/**\n * Transforms a `Predicate` function into a `Some` of the input value if the predicate returns `true` or `None`\n * if the predicate returns `false`.\n *\n * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const getOption = Option.liftPredicate((n: number) => n >= 0)\n *\n * assert.deepStrictEqual(getOption(-1), Option.none())\n * assert.deepStrictEqual(getOption(1), Option.some(1))\n *\n * @category lifting\n * @since 2.0.0\n */\nexport const liftPredicate: { // Note: I intentionally avoid using the NoInfer pattern here.\n  <A, B extends A>(refinement: Refinement<A, B>): (a: A) => Option<B>\n  /**\n   * Transforms a `Predicate` function into a `Some` of the input value if the predicate returns `true` or `None`\n   * if the predicate returns `false`.\n   *\n   * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n   *\n   * @example\n   * import { Option } from \"effect\"\n   *\n   * const getOption = Option.liftPredicate((n: number) => n >= 0)\n   *\n   * assert.deepStrictEqual(getOption(-1), Option.none())\n   * assert.deepStrictEqual(getOption(1), Option.some(1))\n   *\n   * @category lifting\n   * @since 2.0.0\n   */\n  <B extends A, A = B>(predicate: Predicate<A>): (b: B) => Option<B>\n  /**\n   * Transforms a `Predicate` function into a `Some` of the input value if the predicate returns `true` or `None`\n   * if the predicate returns `false`.\n   *\n   * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n   *\n   * @example\n   * import { Option } from \"effect\"\n   *\n   * const getOption = Option.liftPredicate((n: number) => n >= 0)\n   *\n   * assert.deepStrictEqual(getOption(-1), Option.none())\n   * assert.deepStrictEqual(getOption(1), Option.some(1))\n   *\n   * @category lifting\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: A, refinement: Refinement<A, B>): Option<B>\n  /**\n   * Transforms a `Predicate` function into a `Some` of the input value if the predicate returns `true` or `None`\n   * if the predicate returns `false`.\n   *\n   * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n   *\n   * @example\n   * import { Option } from \"effect\"\n   *\n   * const getOption = Option.liftPredicate((n: number) => n >= 0)\n   *\n   * assert.deepStrictEqual(getOption(-1), Option.none())\n   * assert.deepStrictEqual(getOption(1), Option.some(1))\n   *\n   * @category lifting\n   * @since 2.0.0\n   */\n  <B extends A, A = B>(self: B, predicate: Predicate<A>): Option<B>\n} = dual(\n  2,\n  <B extends A, A = B>(b: B, predicate: Predicate<A>): Option<B> => predicate(b) ? some(b) : none()\n)\n\n/**\n * Returns a function that checks if a `Option` contains a given value using a provided `isEquivalent` function.\n *\n * @param equivalent - An `Equivalence` instance to compare values of the `Option`.\n * @param self - The `Option` to apply the comparison to.\n * @param a - The value to compare against the `Option`.\n *\n * @example\n * import { pipe, Option, Number } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(Option.some(2), Option.containsWith(Number.Equivalence)(2)), true)\n * assert.deepStrictEqual(pipe(Option.some(1), Option.containsWith(Number.Equivalence)(2)), false)\n * assert.deepStrictEqual(pipe(Option.none(), Option.containsWith(Number.Equivalence)(2)), false)\n *\n * @category elements\n * @since 2.0.0\n */\nexport const containsWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (a: A): (self: Option<A>) => boolean\n  (self: Option<A>, a: A): boolean\n} => dual(2, (self: Option<A>, a: A): boolean => isNone(self) ? false : isEquivalent(self.value, a))\n\nconst _equivalence = Equal.equivalence()\n\n/**\n * Returns a function that checks if an `Option` contains a given value using the default `Equivalence`.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const contains: {\n  /**\n   * Returns a function that checks if an `Option` contains a given value using the default `Equivalence`.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(a: A): (self: Option<A>) => boolean\n  /**\n   * Returns a function that checks if an `Option` contains a given value using the default `Equivalence`.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Option<A>, a: A): boolean\n} = containsWith(_equivalence)\n\n/**\n * Check if a value in an `Option` type meets a certain predicate.\n *\n * @param self - The `Option` to check.\n * @param predicate - The condition to check.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * const isEven = (n: number) => n % 2 === 0\n *\n * assert.deepStrictEqual(pipe(Option.some(2), Option.exists(isEven)), true)\n * assert.deepStrictEqual(pipe(Option.some(1), Option.exists(isEven)), false)\n * assert.deepStrictEqual(pipe(Option.none(), Option.exists(isEven)), false)\n *\n * @since 2.0.0\n */\nexport const exists: {\n  /**\n   * Check if a value in an `Option` type meets a certain predicate.\n   *\n   * @param self - The `Option` to check.\n   * @param predicate - The condition to check.\n   *\n   * @example\n   * import { pipe, Option } from \"effect\"\n   *\n   * const isEven = (n: number) => n % 2 === 0\n   *\n   * assert.deepStrictEqual(pipe(Option.some(2), Option.exists(isEven)), true)\n   * assert.deepStrictEqual(pipe(Option.some(1), Option.exists(isEven)), false)\n   * assert.deepStrictEqual(pipe(Option.none(), Option.exists(isEven)), false)\n   *\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Option<A>) => self is Option<B>\n  /**\n   * Check if a value in an `Option` type meets a certain predicate.\n   *\n   * @param self - The `Option` to check.\n   * @param predicate - The condition to check.\n   *\n   * @example\n   * import { pipe, Option } from \"effect\"\n   *\n   * const isEven = (n: number) => n % 2 === 0\n   *\n   * assert.deepStrictEqual(pipe(Option.some(2), Option.exists(isEven)), true)\n   * assert.deepStrictEqual(pipe(Option.some(1), Option.exists(isEven)), false)\n   * assert.deepStrictEqual(pipe(Option.none(), Option.exists(isEven)), false)\n   *\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Option<A>) => boolean\n  /**\n   * Check if a value in an `Option` type meets a certain predicate.\n   *\n   * @param self - The `Option` to check.\n   * @param predicate - The condition to check.\n   *\n   * @example\n   * import { pipe, Option } from \"effect\"\n   *\n   * const isEven = (n: number) => n % 2 === 0\n   *\n   * assert.deepStrictEqual(pipe(Option.some(2), Option.exists(isEven)), true)\n   * assert.deepStrictEqual(pipe(Option.some(1), Option.exists(isEven)), false)\n   * assert.deepStrictEqual(pipe(Option.none(), Option.exists(isEven)), false)\n   *\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Option<A>, refinement: Refinement<A, B>): self is Option<B>\n  /**\n   * Check if a value in an `Option` type meets a certain predicate.\n   *\n   * @param self - The `Option` to check.\n   * @param predicate - The condition to check.\n   *\n   * @example\n   * import { pipe, Option } from \"effect\"\n   *\n   * const isEven = (n: number) => n % 2 === 0\n   *\n   * assert.deepStrictEqual(pipe(Option.some(2), Option.exists(isEven)), true)\n   * assert.deepStrictEqual(pipe(Option.some(1), Option.exists(isEven)), false)\n   * assert.deepStrictEqual(pipe(Option.none(), Option.exists(isEven)), false)\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Option<A>, predicate: Predicate<A>): boolean\n} = dual(\n  2,\n  <A, B extends A>(self: Option<A>, refinement: Refinement<A, B>): self is Option<B> =>\n    isNone(self) ? false : refinement(self.value)\n)\n\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link Do}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bindTo: {\n  // -------------------------------------------------------------------------------------\n  // do notation\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link let_ let}\n   *\n   * @example\n   * import { Option, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Option.Do,\n   *   Option.bind(\"x\", () => Option.some(2)),\n   *   Option.bind(\"y\", () => Option.some(3)),\n   *   Option.let(\"sum\", ({ x, y }) => x + y),\n   *   Option.filter(({ x, y }) => x * y > 5)\n   * )\n   * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  <N extends string>(name: N): <A>(self: Option<A>) => Option<{ [K in N]: A }>\n  // -------------------------------------------------------------------------------------\n  // do notation\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link let_ let}\n   *\n   * @example\n   * import { Option, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Option.Do,\n   *   Option.bind(\"x\", () => Option.some(2)),\n   *   Option.bind(\"y\", () => Option.some(3)),\n   *   Option.let(\"sum\", ({ x, y }) => x + y),\n   *   Option.filter(({ x, y }) => x * y > 5)\n   * )\n   * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  <A, N extends string>(self: Option<A>, name: N): Option<{ [K in N]: A }>\n} = doNotation.bindTo<OptionTypeLambda>(map)\n\nconst let_: {\n  <N extends string, A extends object, B>(\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): (self: Option<A>) => Option<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n  <A extends object, N extends string, B>(\n    self: Option<A>,\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): Option<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n} = doNotation.let_<OptionTypeLambda>(map)\n\nexport {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link bindTo}\n   *\n   * @example\n   * import { Option, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Option.Do,\n   *   Option.bind(\"x\", () => Option.some(2)),\n   *   Option.bind(\"y\", () => Option.some(3)),\n   *   Option.let(\"sum\", ({ x, y }) => x + y),\n   *   Option.filter(({ x, y }) => x * y > 5)\n   * )\n   * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  let_ as let\n}\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link Do}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @example\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bind: {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link let_ let}\n   *\n   * @example\n   * import { Option, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Option.Do,\n   *   Option.bind(\"x\", () => Option.some(2)),\n   *   Option.bind(\"y\", () => Option.some(3)),\n   *   Option.let(\"sum\", ({ x, y }) => x + y),\n   *   Option.filter(({ x, y }) => x * y > 5)\n   * )\n   * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  <N extends string, A extends object, B>(\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => Option<B>\n  ): (self: Option<A>) => Option<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link let_ let}\n   *\n   * @example\n   * import { Option, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Option.Do,\n   *   Option.bind(\"x\", () => Option.some(2)),\n   *   Option.bind(\"y\", () => Option.some(3)),\n   *   Option.let(\"sum\", ({ x, y }) => x + y),\n   *   Option.filter(({ x, y }) => x * y > 5)\n   * )\n   * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  <A extends object, N extends string, B>(\n    self: Option<A>,\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => Option<B>\n  ): Option<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n} = doNotation.bind<OptionTypeLambda>(map, flatMap)\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link bindTo}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const Do: Option<{}> = some({})\n\nconst adapter = Gen.adapter<OptionTypeLambda>()\n\n/**\n * @category generators\n * @since 2.0.0\n */\nexport const gen: Gen.Gen<OptionTypeLambda, Gen.Adapter<OptionTypeLambda>> = (...args) => {\n  let f: any\n  if (args.length === 1) {\n    f = args[0]\n  } else {\n    f = args[1].bind(args[0])\n  }\n  const iterator = f(adapter)\n  let state: IteratorYieldResult<any> | IteratorReturnResult<any> = iterator.next()\n  if (state.done) {\n    return some(state.value)\n  } else {\n    let current = state.value\n    if (Gen.isGenKind(current)) {\n      current = current.value\n    } else {\n      current = Gen.yieldWrapGet(current)\n    }\n    if (isNone(current)) {\n      return current\n    }\n    while (!state.done) {\n      state = iterator.next(current.value as never)\n      if (!state.done) {\n        current = state.value\n        if (Gen.isGenKind(current)) {\n          current = current.value\n        } else {\n          current = Gen.yieldWrapGet(current)\n        }\n        if (isNone(current)) {\n          return current\n        }\n      }\n    }\n    return some(state.value)\n  }\n}\n"],"names":["Equal","Equivalence","constNull","constUndefined","dual","identity","isFunction","doNotation","either","option","order","Gen","TypeId","Symbol","for","none","some","isOption","isNone","isSome","match","self","onNone","onSome","value","toRefinement","f","a","fromIterable","collection","getRight","getLeft","getOrElse","orElse","that","orElseSome","orElseEither","map","right","left","firstSomeOf","out","fromNullable","nullableValue","liftNullable","getOrNull","getOrUndefined","liftThrowable","e","getOrThrowWith","getOrThrow","Error","as","b","asVoid","undefined","void_","void","flatMap","andThen","flatMapNullable","flatten","zipRight","composeK","afb","bfc","zipLeft","tap","product","productMany","o","push","all","input","iterator","key","Object","keys","zipWith","ap","reduceCompact","oa","toArray","partitionMap","isLeft","filterMap","filter","predicate","getEquivalence","isEquivalent","make","x","y","getOrder","O","lift2","liftPredicate","containsWith","_equivalence","equivalence","contains","exists","refinement","bindTo","let_","let","bind","Do","adapter","gen","args","length","state","next","done","current","isGenKind","yieldWrapGet"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA,OAAO,KAAKS,MAAM,MAAM,sBAAsB;AAL9C,SAASP,SAAS,EAAEC,cAAc,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,eAAe;AAIrF,OAAO,KAAKE,MAAM,MAAM,sBAAsB;AAN9C,OAAO,KAAKP,WAAW,MAAM,kBAAkB;AAS/C,OAAO,KAAKS,KAAK,MAAM,YAAY;AAVnC,OAAO,KAAKV,KAAK,MAAM,YAAY;AAMnC,OAAO,KAAKO,UAAU,MAAM,0BAA0B;AAStD,OAAO,KAAKI,GAAG,MAAM,YAAY;;;;;;;;;AAY1B,MAAMC,MAAM,GAAA,WAAA,GAAkBC,MAAM,CAACC,GAAG,CAAC,eAAe,CAAC;AA8EzD,MAAMC,IAAI,GAAGA,CAAA,GAA4BN,MAAM,4MAACM,IAAI;AAUpD,MAAMC,IAAI,GAA+BP,MAAM,4MAACO,IAAI;AAiBpD,MAAMC,QAAQ,GAAiDR,MAAM,4MAACQ,QAAQ;AAgB9E,MAAMC,MAAM,GAA4CT,MAAM,4MAACS,MAAM;AAgBrE,MAAMC,MAAM,GAA4CV,MAAM,4MAACU,MAAM;AA0BrE,MAAMC,KAAK,GAAA,WAAA,+MA8DdhB,OAAI,AAAJA,EACF,CAAC,EACD,CAAciB,IAAe,EAAE,EAAEC,MAAM,EAAEC,MAAAA,EAGxC,GAAYL,MAAM,CAACG,IAAI,CAAC,GAAGC,MAAM,EAAE,GAAGC,MAAM,CAACF,IAAI,CAACG,KAAK,CAAC,CAC1D;AAoBM,MAAMC,YAAY,IAAoBC,CAAsB,IAAwBC,CAAI,GAAaR,MAAM,CAACO,CAAC,CAACC,CAAC,CAAC,CAAC;AAiBjH,MAAMC,YAAY,IAAOC,UAAuB,IAAe;IACpE,KAAK,MAAMF,CAAC,IAAIE,UAAU,CAAE;QAC1B,OAAOb,IAAI,CAACW,CAAC,CAAC;IAChB;IACA,OAAOZ,IAAI,EAAE;AACf,CAAC;AAcM,MAAMe,QAAQ,GAA4CtB,MAAM,4MAACsB,QAAQ;AAczE,MAAMC,OAAO,GAA4CvB,MAAM,4MAACuB,OAAO;AAiBvE,MAAMC,SAAS,GAAA,WAAA,+MAiClB5B,OAAAA,AAAI,EACN,CAAC,EACD,CAAOiB,IAAe,EAAEC,MAAkB,GAAYJ,MAAM,CAACG,IAAI,CAAC,GAAGC,MAAM,EAAE,GAAGD,IAAI,CAACG,KAAK,CAC3F;AA2CM,MAAMS,MAAM,GAAA,WAAA,+MAqFf7B,OAAAA,AAAI,EACN,CAAC,EACD,CAAOiB,IAAe,EAAEa,IAAwB,GAAoBhB,MAAM,CAACG,IAAI,CAAC,GAAGa,IAAI,EAAE,GAAGb,IAAI,CACjG;AA6BM,MAAMc,UAAU,GAAA,WAAA,+MAyDnB/B,OAAAA,AAAI,EACN,CAAC,EACD,CAAOiB,IAAe,EAAEC,MAAkB,GAAoBJ,MAAM,CAACG,IAAI,CAAC,GAAGL,IAAI,CAACM,MAAM,EAAE,CAAC,GAAGD,IAAI,CACnG;AAcM,MAAMe,YAAY,GAAA,WAAA,GA2BrBhC,mNAAAA,AAAI,EACN,CAAC,EACD,CAAOiB,IAAe,EAAEa,IAAwB,GAC9ChB,MAAM,CAACG,IAAI,CAAC,GAAGgB,GAAG,CAACH,IAAI,EAAE,EAAE1B,MAAM,4MAAC8B,KAAK,CAAC,GAAGD,GAAG,CAAChB,IAAI,EAAEb,MAAM,4MAAC+B,IAAI,CAAC,CACpE;AAeM,MAAMC,WAAW,IACtBX,UAAa,IACkD;IAC/D,IAAIY,GAAG,GAAoB1B,IAAI,EAAE;IACjC,KAAK0B,GAAG,IAAIZ,UAAU,CAAE;QACtB,IAAIV,MAAM,CAACsB,GAAG,CAAC,EAAE;YACf,OAAOA,GAAU;QACnB;IACF;IACA,OAAOA,GAAU;AACnB,CAAC;AAkBM,MAAMC,YAAY,GACvBC,aAAgB,IAGZA,aAAa,IAAI,IAAI,GAAG5B,IAAI,EAAE,GAAGC,IAAI,CAAC2B,aAA+B,CAAE;AAqBtE,MAAMC,YAAY,IACvBlB,CAAoC,GAEtC,CAAC,GAAGC,CAAC,GAAKe,YAAY,CAAChB,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC;AAgBxB,MAAMkB,SAAS,GAAA,WAAA,GAAqCb,SAAS,CAAC9B,oNAAS,CAAC;AAgBxE,MAAM4C,cAAc,GAAA,WAAA,GAA0Cd,SAAS,yMAAC7B,iBAAc,CAAC;AAqBvF,MAAM4C,aAAa,IACxBrB,CAAiB,GAEnB,CAAC,GAAGC,CAAC,KAAI;QACP,IAAI;YACF,OAAOX,IAAI,CAACU,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC;QACtB,CAAC,CAAC,OAAOqB,CAAC,EAAE;YACV,OAAOjC,IAAI,EAAE;QACf;IACF,CAAC;AAsBM,MAAMkC,cAAc,GAAA,WAAA,+MA2CvB7C,OAAAA,AAAI,EAAC,CAAC,EAAE,CAAIiB,IAAe,EAAEC,MAAqB,KAAO;IAC3D,IAAIH,MAAM,CAACE,IAAI,CAAC,EAAE;QAChB,OAAOA,IAAI,CAACG,KAAK;IACnB;IACA,MAAMF,MAAM,EAAE;AAChB,CAAC,CAAC;AAmBK,MAAM4B,UAAU,GAAA,WAAA,GAA8BD,cAAc,CAAC,IAAM,IAAIE,KAAK,CAAC,6BAA6B,CAAC,CAAC;AAW5G,MAAMd,GAAG,GAAA,WAAA,+MAqBZjC,OAAAA,AAAI,EACN,CAAC,EACD,CAAOiB,IAAe,EAAEK,CAAc,GAAgBR,MAAM,CAACG,IAAI,CAAC,GAAGN,IAAI,EAAE,GAAGC,IAAI,CAACU,CAAC,CAACL,IAAI,CAACG,KAAK,CAAC,CAAC,CAClG;AAQM,MAAM4B,EAAE,GAAA,WAAA,+MAQXhD,OAAAA,AAAI,EAAC,CAAC,EAAE,CAAOiB,IAAe,EAAEgC,CAAI,GAAgBhB,GAAG,CAAChB,IAAI,EAAE,IAAMgC,CAAC,CAAC,CAAC;AAUpE,MAAMC,MAAM,GAAA,WAAA,GAAyCF,EAAE,CAACG,SAAS,CAAC;AAEzE,MAAMC,KAAK,GAAA,WAAA,GAAiBxC,IAAI,CAACuC,SAAS,CAAC;;AAcpC,MAAMG,OAAO,GAAA,WAAA,+MAehBtD,OAAAA,AAAI,EACN,CAAC,EACD,CAAOiB,IAAe,EAAEK,CAAsB,GAAgBR,MAAM,CAACG,IAAI,CAAC,GAAGN,IAAI,EAAE,GAAGW,CAAC,CAACL,IAAI,CAACG,KAAK,CAAC,CACpG;AAQM,MAAMmC,OAAO,GAAA,WAAA,+MAyDhBvD,OAAAA,AAAI,EACN,CAAC,EACD,CAAOiB,IAAe,EAAEK,CAAkC,GACxDgC,OAAO,CAACrC,IAAI,GAAGM,CAAC,IAAI;QAClB,MAAM0B,CAAC,+MAAG/C,aAAAA,AAAU,EAACoB,CAAC,CAAC,GAAGA,CAAC,CAACC,CAAC,CAAC,GAAGD,CAAC;QAClC,OAAOT,QAAQ,CAACoC,CAAC,CAAC,GAAGA,CAAC,GAAGrC,IAAI,CAACqC,CAAC,CAAC;IAClC,CAAC,CAAC,CACL;AAyCM,MAAMO,eAAe,GAAA,WAAA,+MAiFxBxD,OAAAA,AAAI,EACN,CAAC,EACD,CAAOiB,IAAe,EAAEK,CAAiC,GACvDR,MAAM,CAACG,IAAI,CAAC,GAAGN,IAAI,EAAE,GAAG2B,YAAY,CAAChB,CAAC,CAACL,IAAI,CAACG,KAAK,CAAC,CAAC,CACtD;AAMM,MAAMqC,OAAO,GAAA,WAAA,GAA8CH,OAAO,yMAACrD,WAAQ,CAAC;AAM5E,MAAMyD,QAAQ,GAAA,WAAA,+MAWjB1D,OAAAA,AAAI,EAAC,CAAC,EAAE,CAAOiB,IAAe,EAAEa,IAAe,GAAgBwB,OAAO,CAACrC,IAAI,EAAE,IAAMa,IAAI,CAAC,CAAC;AAMtF,MAAM6B,QAAQ,GAAA,WAAA,+MAWjB3D,OAAAA,AAAI,EAAC,CAAC,EAAE,CAAU4D,GAAwB,EAAEC,GAAwB,IAAMtC,CAAI,GAAgB+B,OAAO,CAACM,GAAG,CAACrC,CAAC,CAAC,EAAEsC,GAAG,CAAC,CAAC;AAahH,MAAMC,OAAO,GAAA,WAAA,+MAyBhB9D,OAAAA,AAAI,EAAC,CAAC,EAAE,CAAOiB,IAAe,EAAEa,IAAe,GAAgBiC,GAAG,CAAC9C,IAAI,EAAE,IAAMa,IAAI,CAAC,CAAC;AAuBlF,MAAMiC,GAAG,GAAA,WAAA,+MA6CZ/D,OAAAA,AAAI,EAAC,CAAC,EAAE,CAAOiB,IAAe,EAAEK,CAAsB,GAAgBgC,OAAO,CAACrC,IAAI,GAAGM,CAAC,GAAKU,GAAG,CAACX,CAAC,CAACC,CAAC,CAAC,EAAE,IAAMA,CAAC,CAAC,CAAC,CAAC;AAM5G,MAAMyC,OAAO,GAAGA,CAAO/C,IAAe,EAAEa,IAAe,GAC5Df,MAAM,CAACE,IAAI,CAAC,IAAIF,MAAM,CAACe,IAAI,CAAC,GAAGlB,IAAI,CAAC;QAACK,IAAI,CAACG,KAAK;QAAEU,IAAI,CAACV,KAAK;KAAC,CAAC,GAAGT,IAAI,EAAE;AAMjE,MAAMsD,WAAW,GAAGA,CACzBhD,IAAe,EACfQ,UAA+B,KACH;IAC5B,IAAIX,MAAM,CAACG,IAAI,CAAC,EAAE;QAChB,OAAON,IAAI,EAAE;IACf;IACA,MAAM0B,GAAG,GAAqB;QAACpB,IAAI,CAACG,KAAK;KAAC;IAC1C,KAAK,MAAM8C,CAAC,IAAIzC,UAAU,CAAE;QAC1B,IAAIX,MAAM,CAACoD,CAAC,CAAC,EAAE;YACb,OAAOvD,IAAI,EAAE;QACf;QACA0B,GAAG,CAAC8B,IAAI,CAACD,CAAC,CAAC9C,KAAK,CAAC;IACnB;IACA,OAAOR,IAAI,CAACyB,GAAG,CAAC;AAClB,CAAC;AAsBM,MAAM+B,GAAG,IAOZC,KAA0D,IAC3C;IACf,IAAI5D,MAAM,CAAC6D,QAAQ,IAAID,KAAK,EAAE;QAC5B,MAAMhC,GAAG,GAAuB,EAAE;QAClC,KAAK,MAAM6B,CAAC,IAAKG,KAA+B,CAAE;YAChD,IAAIvD,MAAM,CAACoD,CAAC,CAAC,EAAE;gBACb,OAAOvD,IAAI,EAAE;YACf;YACA0B,GAAG,CAAC8B,IAAI,CAACD,CAAC,CAAC9C,KAAK,CAAC;QACnB;QACA,OAAOR,IAAI,CAACyB,GAAG,CAAC;IAClB;IAEA,MAAMA,GAAG,GAAwB,CAAA,CAAE;IACnC,KAAK,MAAMkC,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACJ,KAAK,CAAC,CAAE;QACpC,MAAMH,CAAC,GAAGG,KAAK,CAACE,GAAG,CAAC;QACpB,IAAIzD,MAAM,CAACoD,CAAC,CAAC,EAAE;YACb,OAAOvD,IAAI,EAAE;QACf;QACA0B,GAAG,CAACkC,GAAG,CAAC,GAAGL,CAAC,CAAC9C,KAAK;IACpB;IACA,OAAOR,IAAI,CAACyB,GAAG,CAAC;AAClB,CAAC;AA0BI,MAAMqC,OAAO,GAAA,WAAA,IAmDhB1E,kNAAI,AAAJA,EACF,CAAC,EACD,CAAUiB,IAAe,EAAEa,IAAe,EAAER,CAAoB,GAC9DW,GAAG,CAAC+B,OAAO,CAAC/C,IAAI,EAAEa,IAAI,CAAC,EAAE,CAAC,CAACP,CAAC,EAAE0B,CAAC,CAAC,GAAK3B,CAAC,CAACC,CAAC,EAAE0B,CAAC,CAAC,CAAC,CAChD;AAMM,MAAM0B,EAAE,GAAA,WAAA,+MAWX3E,OAAAA,AAAI,EAAC,CAAC,EAAE,CAAOiB,IAAyB,EAAEa,IAAe,GAAgB4C,OAAO,CAACzD,IAAI,EAAEa,IAAI,EAAE,CAACR,CAAC,EAAEC,CAAC,GAAKD,CAAC,CAACC,CAAC,CAAC,CAAC,CAAC;AAkB1G,MAAMqD,aAAa,GAAA,WAAA,8MAmCtB5E,QAAI,AAAJA,EACF,CAAC,EACD,CAAOiB,IAAyB,EAAEgC,CAAI,EAAE3B,CAAoB,KAAO;IACjE,IAAIe,GAAG,GAAMY,CAAC;IACd,KAAK,MAAM4B,EAAE,IAAI5D,IAAI,CAAE;QACrB,IAAIF,MAAM,CAAC8D,EAAE,CAAC,EAAE;YACdxC,GAAG,GAAGf,CAAC,CAACe,GAAG,EAAEwC,EAAE,CAACzD,KAAK,CAAC;QACxB;IACF;IACA,OAAOiB,GAAG;AACZ,CAAC,CACF;AAkBM,MAAMyC,OAAO,IAAO7D,IAAe,GAAeH,MAAM,CAACG,IAAI,CAAC,GAAG,EAAE,GAAG;QAACA,IAAI,CAACG,KAAK;KAAC;AAMlF,MAAM2D,YAAY,GAAA,WAAA,+MAWrB/E,OAAAA,AAAI,EAAC,CAAC,EAAE,CACViB,IAAe,EACfK,CAAyB,KACuB;IAChD,IAAIR,MAAM,CAACG,IAAI,CAAC,EAAE;QAChB,OAAO;YAACN,IAAI,EAAE;YAAEA,IAAI,EAAE;SAAC;IACzB;IACA,MAAMiC,CAAC,GAAGtB,CAAC,CAACL,IAAI,CAACG,KAAK,CAAC;IACvB,OAAOhB,MAAM,4MAAC4E,MAAM,CAACpC,CAAC,CAAC,GAAG;QAAChC,IAAI,CAACgC,CAAC,CAACT,IAAI,CAAC;QAAExB,IAAI,EAAE;KAAC,GAAG;QAACA,IAAI,EAAE;QAAEC,IAAI,CAACgC,CAAC,CAACV,KAAK,CAAC;KAAC;AAC5E,CAAC,CAAC;AAsBK,MAAM+C,SAAS,GAAA,WAAA,+MA2ClBjF,OAAAA,AAAI,EACN,CAAC,EACD,CAAOiB,IAAe,EAAEK,CAAsB,GAAgBR,MAAM,CAACG,IAAI,CAAC,GAAGN,IAAI,EAAE,GAAGW,CAAC,CAACL,IAAI,CAACG,KAAK,CAAC,CACpG;AA8BM,MAAM8D,MAAM,GAAA,WAAA,+MAqHflF,OAAAA,AAAI,EACN,CAAC,EACD,CAAIiB,IAAe,EAAEkE,SAAuB,GAC1CF,SAAS,CAAChE,IAAI,EAAGgC,CAAC,IAAMkC,SAAS,CAAClC,CAAC,CAAC,GAAG5C,MAAM,4MAACO,IAAI,CAACqC,CAAC,CAAC,GAAG5C,MAAM,4MAACM,IAAK,CAAC,CACxE;AAgBM,MAAMyE,cAAc,IAAOC,YAAwC,GACxExF,WAAW,gMAACyF,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,GAAK1E,MAAM,CAACyE,CAAC,CAAC,GAAGzE,MAAM,CAAC0E,CAAC,CAAC,GAAG1E,MAAM,CAAC0E,CAAC,CAAC,GAAG,KAAK,GAAGH,YAAY,CAACE,CAAC,CAACnE,KAAK,EAAEoE,CAAC,CAACpE,KAAK,CAAC,CAAC;AAsBjG,MAAMqE,QAAQ,IAAOC,CAAW,GACrCpF,KAAK,gMAACgF,IAAI,CAAC,CAACrE,IAAI,EAAEa,IAAI,GAAKf,MAAM,CAACE,IAAI,CAAC,GAAIF,MAAM,CAACe,IAAI,CAAC,GAAG4D,CAAC,CAACzE,IAAI,CAACG,KAAK,EAAEU,IAAI,CAACV,KAAK,CAAC,GAAG,CAAC,GAAI,CAAC,CAAC,CAAC;AAUzF,MAAMuE,KAAK,IAAarE,CAAoB,+MAG9CtB,OAAAA,AAAI,EAAC,CAAC,EAAE,CAACiB,IAAe,EAAEa,IAAe,GAAgB4C,OAAO,CAACzD,IAAI,EAAEa,IAAI,EAAER,CAAC,CAAC,CAAC;AAmB9E,MAAMsE,aAAa,GAAA,WAAA,+MAwDtB5F,OAAAA,AAAI,EACN,CAAC,EACD,CAAqBiD,CAAI,EAAEkC,SAAuB,GAAgBA,SAAS,CAAClC,CAAC,CAAC,GAAGrC,IAAI,CAACqC,CAAC,CAAC,GAAGtC,IAAI,EAAE,CAClG;AAmBM,MAAMkF,YAAY,IAAOR,YAA2C,+MAGtErF,OAAI,AAAJA,EAAK,CAAC,EAAE,CAACiB,IAAe,EAAEM,CAAI,GAAcT,MAAM,CAACG,IAAI,CAAC,GAAG,KAAK,GAAGoE,YAAY,CAACpE,IAAI,CAACG,KAAK,EAAEG,CAAC,CAAC,CAAC;AAEpG,MAAMuE,YAAY,GAAA,WAAA,GAAGlG,KAAK,gMAACmG,WAAW,EAAE;AAQjC,MAAMC,QAAQ,GAAA,WAAA,GAejBH,YAAY,CAACC,YAAY,CAAC;AAmBvB,MAAMG,MAAM,GAAA,WAAA,+MAyEfjG,OAAAA,AAAI,EACN,CAAC,EACD,CAAiBiB,IAAe,EAAEiF,UAA4B,GAC5DpF,MAAM,CAACG,IAAI,CAAC,GAAG,KAAK,GAAGiF,UAAU,CAACjF,IAAI,CAACG,KAAK,CAAC,CAChD;AAoCM,MAAM+E,MAAM,GAAA,WAAA,GAuEfhG,UAAU,4MAACgG,MAAM,CAAmBlE,GAAG,CAAC;AAE5C,MAAMmE,IAAI,GAAA,WAAA,GAUNjG,UAAU,4MAACiG,IAAI,CAAmBnE,GAAG,CAAC;;AAkEnC,MAAMqE,IAAI,GAAA,WAAA,GAsEbnG,UAAU,4MAACmG,IAAI,CAAmBrE,GAAG,EAAEqB,OAAO,CAAC;AAgC5C,MAAMiD,EAAE,GAAA,WAAA,GAAe3F,IAAI,CAAC,CAAA,CAAE,CAAC;AAEtC,MAAM4F,OAAO,GAAA,WAAA,GAAGjG,GAAG,kMAACiG,OAAO,EAAoB;AAMxC,MAAMC,GAAG,GAA6DA,CAAC,GAAGC,IAAI,KAAI;IACvF,IAAIpF,CAAM;IACV,IAAIoF,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;QACrBrF,CAAC,GAAGoF,IAAI,CAAC,CAAC,CAAC;IACb,CAAC,MAAM;QACLpF,CAAC,GAAGoF,IAAI,CAAC,CAAC,CAAC,CAACJ,IAAI,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;IAC3B;IACA,MAAMpC,QAAQ,GAAGhD,CAAC,CAACkF,OAAO,CAAC;IAC3B,IAAII,KAAK,GAAyDtC,QAAQ,CAACuC,IAAI,EAAE;IACjF,IAAID,KAAK,CAACE,IAAI,EAAE;QACd,OAAOlG,IAAI,CAACgG,KAAK,CAACxF,KAAK,CAAC;IAC1B,CAAC,MAAM;QACL,IAAI2F,OAAO,GAAGH,KAAK,CAACxF,KAAK;QACzB,IAAIb,GAAG,kMAACyG,SAAS,CAACD,OAAO,CAAC,EAAE;YAC1BA,OAAO,GAAGA,OAAO,CAAC3F,KAAK;QACzB,CAAC,MAAM;YACL2F,OAAO,GAAGxG,GAAG,kMAAC0G,YAAY,CAACF,OAAO,CAAC;QACrC;QACA,IAAIjG,MAAM,CAACiG,OAAO,CAAC,EAAE;YACnB,OAAOA,OAAO;QAChB;QACA,MAAO,CAACH,KAAK,CAACE,IAAI,CAAE;YAClBF,KAAK,GAAGtC,QAAQ,CAACuC,IAAI,CAACE,OAAO,CAAC3F,KAAc,CAAC;YAC7C,IAAI,CAACwF,KAAK,CAACE,IAAI,EAAE;gBACfC,OAAO,GAAGH,KAAK,CAACxF,KAAK;gBACrB,IAAIb,GAAG,kMAACyG,SAAS,CAACD,OAAO,CAAC,EAAE;oBAC1BA,OAAO,GAAGA,OAAO,CAAC3F,KAAK;gBACzB,CAAC,MAAM;oBACL2F,OAAO,GAAGxG,GAAG,kMAAC0G,YAAY,CAACF,OAAO,CAAC;gBACrC;gBACA,IAAIjG,MAAM,CAACiG,OAAO,CAAC,EAAE;oBACnB,OAAOA,OAAO;gBAChB;YACF;QACF;QACA,OAAOnG,IAAI,CAACgG,KAAK,CAACxF,KAAK,CAAC;IAC1B;AACF,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1703, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1709, "column": 0}, "map": {"version":3,"file":"Context.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Context.ts"],"sourcesContent":["/**\n * This module provides a data structure called `Context` that can be used for dependency injection in effectful\n * programs. It is essentially a table mapping `Tag`s to their implementations (called `Service`s), and can be used to\n * manage dependencies in a type-safe way. The `Context` data structure is essentially a way of providing access to a set\n * of related services that can be passed around as a single unit. This module provides functions to create, modify, and\n * query the contents of a `Context`, as well as a number of utility types for working with tags and services.\n *\n * @since 2.0.0\n */\nimport type { Equal } from \"./Equal.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as internal from \"./internal/context.js\"\nimport type { Option } from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type * as Types from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\n\nconst TagTypeId: unique symbol = internal.TagTypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TagTypeId = typeof TagTypeId\n\n/**\n * @since 3.5.9\n * @category models\n */\nexport interface Tag<in out Id, in out Value> extends Pipeable, Inspectable {\n  readonly _op: \"Tag\"\n  readonly Service: Value\n  readonly Identifier: Id\n  readonly [TagTypeId]: {\n    readonly _Service: Types.Invariant<Value>\n    readonly _Identifier: Types.Invariant<Id>\n  }\n  of(self: Value): Value\n  context(self: Value): Context<Id>\n  readonly stack?: string | undefined\n  readonly key: string\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: TagUnify<this>\n  [Unify.ignoreSymbol]?: TagUnifyIgnore\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface TagClassShape<Id, Shape> {\n  readonly [TagTypeId]: TagTypeId\n  readonly Type: Shape\n  readonly Id: Id\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface TagClass<Self, Id, Type> extends Tag<Self, Type> {\n  new(_: never): TagClassShape<Id, Type>\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface TagUnify<A extends { [Unify.typeSymbol]?: any }> {\n  Tag?: () => A[Unify.typeSymbol] extends Tag<infer I0, infer S0> | infer _ ? Tag<I0, S0> : never\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface TagUnifyIgnore {}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Tag {\n  /**\n   * @since 2.0.0\n   */\n  export type Service<T extends Tag<any, any> | TagClassShape<any, any>> = T extends Tag<any, any> ? T[\"Service\"]\n    : T extends TagClassShape<any, infer A> ? A\n    : never\n  /**\n   * @since 2.0.0\n   */\n  export type Identifier<T extends Tag<any, any> | TagClassShape<any, any>> = T extends Tag<any, any> ? T[\"Identifier\"]\n    : T extends TagClassShape<any, any> ? T\n    : never\n}\n\n/**\n * Creates a new `Tag` instance with an optional key parameter.\n *\n * @param key - A key that will be used to compare tags.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.GenericTag(\"PORT\").key === Context.GenericTag(\"PORT\").key, true)\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const GenericTag: <Identifier, Service = Identifier>(key: string) => Tag<Identifier, Service> =\n  internal.makeGenericTag\n\nconst TypeId: unique symbol = internal.TypeId as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type ValidTagsById<R> = R extends infer S ? Tag<S, any> : never\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Context<in Services> extends Equal, Pipeable, Inspectable {\n  readonly [TypeId]: {\n    readonly _Services: Types.Contravariant<Services>\n  }\n  readonly unsafeMap: Map<string, any>\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const unsafeMake: <Services>(unsafeMap: Map<string, any>) => Context<Services> = internal.makeContext\n\n/**\n * Checks if the provided argument is a `Context`.\n *\n * @param input - The value to be checked if it is a `Context`.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.isContext(Context.empty()), true)\n *\n * @since 2.0.0\n * @category guards\n */\nexport const isContext: (input: unknown) => input is Context<never> = internal.isContext\n\n/**\n * Checks if the provided argument is a `Tag`.\n *\n * @param input - The value to be checked if it is a `Tag`.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.isTag(Context.GenericTag(\"Tag\")), true)\n *\n * @since 2.0.0\n * @category guards\n */\nexport const isTag: (input: unknown) => input is Tag<any, any> = internal.isTag\n\n/**\n * Returns an empty `Context`.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.isContext(Context.empty()), true)\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: () => Context<never> = internal.empty\n\n/**\n * Creates a new `Context` with a single service associated to the tag.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n *\n * const Services = Context.make(Port, { PORT: 8080 })\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <T extends Tag<any, any>>(tag: T, service: Tag.Service<T>) => Context<Tag.Identifier<T>> =\n  internal.make\n\n/**\n * Adds a service to a given `Context`.\n *\n * @example\n * import { Context, pipe } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const someContext = Context.make(Port, { PORT: 8080 })\n *\n * const Services = pipe(\n *   someContext,\n *   Context.add(Timeout, { TIMEOUT: 5000 })\n * )\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n *\n * @since 2.0.0\n */\nexport const add: {\n  /**\n   * Adds a service to a given `Context`.\n   *\n   * @example\n   * import { Context, pipe } from \"effect\"\n   *\n   * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n   * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n   *\n   * const someContext = Context.make(Port, { PORT: 8080 })\n   *\n   * const Services = pipe(\n   *   someContext,\n   *   Context.add(Timeout, { TIMEOUT: 5000 })\n   * )\n   *\n   * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n   * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n   *\n   * @since 2.0.0\n   */\n  <T extends Tag<any, any>>(\n    tag: T,\n    service: Tag.Service<T>\n  ): <Services>(self: Context<Services>) => Context<Services | Tag.Identifier<T>>\n  /**\n   * Adds a service to a given `Context`.\n   *\n   * @example\n   * import { Context, pipe } from \"effect\"\n   *\n   * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n   * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n   *\n   * const someContext = Context.make(Port, { PORT: 8080 })\n   *\n   * const Services = pipe(\n   *   someContext,\n   *   Context.add(Timeout, { TIMEOUT: 5000 })\n   * )\n   *\n   * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n   * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n   *\n   * @since 2.0.0\n   */\n  <Services, T extends Tag<any, any>>(\n    self: Context<Services>,\n    tag: T,\n    service: Tag.Service<T>\n  ): Context<Services | Tag.Identifier<T>>\n} = internal.add\n\n/**\n * Get a service from the context that corresponds to the given tag.\n *\n * @param self - The `Context` to search for the service.\n * @param tag - The `Tag` of the service to retrieve.\n *\n * @example\n * import { pipe, Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const Services = pipe(\n *   Context.make(Port, { PORT: 8080 }),\n *   Context.add(Timeout, { TIMEOUT: 5000 })\n * )\n *\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n *\n * @since 2.0.0\n * @category getters\n */\nexport const get: {\n  /**\n   * Get a service from the context that corresponds to the given tag.\n   *\n   * @param self - The `Context` to search for the service.\n   * @param tag - The `Tag` of the service to retrieve.\n   *\n   * @example\n   * import { pipe, Context } from \"effect\"\n   *\n   * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n   * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n   *\n   * const Services = pipe(\n   *   Context.make(Port, { PORT: 8080 }),\n   *   Context.add(Timeout, { TIMEOUT: 5000 })\n   * )\n   *\n   * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  <Services, T extends ValidTagsById<Services>>(tag: T): (self: Context<Services>) => Tag.Service<T>\n  /**\n   * Get a service from the context that corresponds to the given tag.\n   *\n   * @param self - The `Context` to search for the service.\n   * @param tag - The `Tag` of the service to retrieve.\n   *\n   * @example\n   * import { pipe, Context } from \"effect\"\n   *\n   * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n   * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n   *\n   * const Services = pipe(\n   *   Context.make(Port, { PORT: 8080 }),\n   *   Context.add(Timeout, { TIMEOUT: 5000 })\n   * )\n   *\n   * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  <Services, T extends ValidTagsById<Services>>(self: Context<Services>, tag: T): Tag.Service<T>\n} = internal.get\n\n/**\n * Get a service from the context that corresponds to the given tag, or\n * use the fallback value.\n *\n * @since 3.7.0\n * @category getters\n */\nexport const getOrElse: {\n  /**\n   * Get a service from the context that corresponds to the given tag, or\n   * use the fallback value.\n   *\n   * @since 3.7.0\n   * @category getters\n   */\n  <S, I, B>(tag: Tag<I, S>, orElse: LazyArg<B>): <Services>(self: Context<Services>) => S | B\n  /**\n   * Get a service from the context that corresponds to the given tag, or\n   * use the fallback value.\n   *\n   * @since 3.7.0\n   * @category getters\n   */\n  <Services, S, I, B>(self: Context<Services>, tag: Tag<I, S>, orElse: LazyArg<B>): S | B\n} = internal.getOrElse\n\n/**\n * Get a service from the context that corresponds to the given tag.\n * This function is unsafe because if the tag is not present in the context, a runtime error will be thrown.\n *\n * For a safer version see {@link getOption}.\n *\n * @param self - The `Context` to search for the service.\n * @param tag - The `Tag` of the service to retrieve.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const Services = Context.make(Port, { PORT: 8080 })\n *\n * assert.deepStrictEqual(Context.unsafeGet(Services, Port), { PORT: 8080 })\n * assert.throws(() => Context.unsafeGet(Services, Timeout))\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeGet: {\n  /**\n   * Get a service from the context that corresponds to the given tag.\n   * This function is unsafe because if the tag is not present in the context, a runtime error will be thrown.\n   *\n   * For a safer version see {@link getOption}.\n   *\n   * @param self - The `Context` to search for the service.\n   * @param tag - The `Tag` of the service to retrieve.\n   *\n   * @example\n   * import { Context } from \"effect\"\n   *\n   * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n   * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n   *\n   * const Services = Context.make(Port, { PORT: 8080 })\n   *\n   * assert.deepStrictEqual(Context.unsafeGet(Services, Port), { PORT: 8080 })\n   * assert.throws(() => Context.unsafeGet(Services, Timeout))\n   *\n   * @since 2.0.0\n   * @category unsafe\n   */\n  <S, I>(tag: Tag<I, S>): <Services>(self: Context<Services>) => S\n  /**\n   * Get a service from the context that corresponds to the given tag.\n   * This function is unsafe because if the tag is not present in the context, a runtime error will be thrown.\n   *\n   * For a safer version see {@link getOption}.\n   *\n   * @param self - The `Context` to search for the service.\n   * @param tag - The `Tag` of the service to retrieve.\n   *\n   * @example\n   * import { Context } from \"effect\"\n   *\n   * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n   * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n   *\n   * const Services = Context.make(Port, { PORT: 8080 })\n   *\n   * assert.deepStrictEqual(Context.unsafeGet(Services, Port), { PORT: 8080 })\n   * assert.throws(() => Context.unsafeGet(Services, Timeout))\n   *\n   * @since 2.0.0\n   * @category unsafe\n   */\n  <Services, S, I>(self: Context<Services>, tag: Tag<I, S>): S\n} = internal.unsafeGet\n\n/**\n * Get the value associated with the specified tag from the context wrapped in an `Option` object. If the tag is not\n * found, the `Option` object will be `None`.\n *\n * @param self - The `Context` to search for the service.\n * @param tag - The `Tag` of the service to retrieve.\n *\n * @example\n * import { Context, Option } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const Services = Context.make(Port, { PORT: 8080 })\n *\n * assert.deepStrictEqual(Context.getOption(Services, Port), Option.some({ PORT: 8080 }))\n * assert.deepStrictEqual(Context.getOption(Services, Timeout), Option.none())\n *\n * @since 2.0.0\n * @category getters\n */\nexport const getOption: {\n  /**\n   * Get the value associated with the specified tag from the context wrapped in an `Option` object. If the tag is not\n   * found, the `Option` object will be `None`.\n   *\n   * @param self - The `Context` to search for the service.\n   * @param tag - The `Tag` of the service to retrieve.\n   *\n   * @example\n   * import { Context, Option } from \"effect\"\n   *\n   * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n   * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n   *\n   * const Services = Context.make(Port, { PORT: 8080 })\n   *\n   * assert.deepStrictEqual(Context.getOption(Services, Port), Option.some({ PORT: 8080 }))\n   * assert.deepStrictEqual(Context.getOption(Services, Timeout), Option.none())\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  <S, I>(tag: Tag<I, S>): <Services>(self: Context<Services>) => Option<S>\n  /**\n   * Get the value associated with the specified tag from the context wrapped in an `Option` object. If the tag is not\n   * found, the `Option` object will be `None`.\n   *\n   * @param self - The `Context` to search for the service.\n   * @param tag - The `Tag` of the service to retrieve.\n   *\n   * @example\n   * import { Context, Option } from \"effect\"\n   *\n   * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n   * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n   *\n   * const Services = Context.make(Port, { PORT: 8080 })\n   *\n   * assert.deepStrictEqual(Context.getOption(Services, Port), Option.some({ PORT: 8080 }))\n   * assert.deepStrictEqual(Context.getOption(Services, Timeout), Option.none())\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  <Services, S, I>(self: Context<Services>, tag: Tag<I, S>): Option<S>\n} = internal.getOption\n\n/**\n * Merges two `Context`s, returning a new `Context` containing the services of both.\n *\n * @param self - The first `Context` to merge.\n * @param that - The second `Context` to merge.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const firstContext = Context.make(Port, { PORT: 8080 })\n * const secondContext = Context.make(Timeout, { TIMEOUT: 5000 })\n *\n * const Services = Context.merge(firstContext, secondContext)\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n *\n * @since 2.0.0\n */\nexport const merge: {\n  /**\n   * Merges two `Context`s, returning a new `Context` containing the services of both.\n   *\n   * @param self - The first `Context` to merge.\n   * @param that - The second `Context` to merge.\n   *\n   * @example\n   * import { Context } from \"effect\"\n   *\n   * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n   * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n   *\n   * const firstContext = Context.make(Port, { PORT: 8080 })\n   * const secondContext = Context.make(Timeout, { TIMEOUT: 5000 })\n   *\n   * const Services = Context.merge(firstContext, secondContext)\n   *\n   * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n   * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n   *\n   * @since 2.0.0\n   */\n  <R1>(that: Context<R1>): <Services>(self: Context<Services>) => Context<R1 | Services>\n  /**\n   * Merges two `Context`s, returning a new `Context` containing the services of both.\n   *\n   * @param self - The first `Context` to merge.\n   * @param that - The second `Context` to merge.\n   *\n   * @example\n   * import { Context } from \"effect\"\n   *\n   * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n   * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n   *\n   * const firstContext = Context.make(Port, { PORT: 8080 })\n   * const secondContext = Context.make(Timeout, { TIMEOUT: 5000 })\n   *\n   * const Services = Context.merge(firstContext, secondContext)\n   *\n   * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n   * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n   *\n   * @since 2.0.0\n   */\n  <Services, R1>(self: Context<Services>, that: Context<R1>): Context<Services | R1>\n} = internal.merge\n\n/**\n * Returns a new `Context` that contains only the specified services.\n *\n * @param self - The `Context` to prune services from.\n * @param tags - The list of `Tag`s to be included in the new `Context`.\n *\n * @example\n * import { pipe, Context, Option } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const someContext = pipe(\n *   Context.make(Port, { PORT: 8080 }),\n *   Context.add(Timeout, { TIMEOUT: 5000 })\n * )\n *\n * const Services = pipe(someContext, Context.pick(Port))\n *\n * assert.deepStrictEqual(Context.getOption(Services, Port), Option.some({ PORT: 8080 }))\n * assert.deepStrictEqual(Context.getOption(Services, Timeout), Option.none())\n *\n * @since 2.0.0\n */\nexport const pick: <Services, S extends Array<ValidTagsById<Services>>>(\n  ...tags: S\n) => (self: Context<Services>) => Context<{ [k in keyof S]: Tag.Identifier<S[k]> }[number]> = internal.pick\n\n/**\n * @since 2.0.0\n */\nexport const omit: <Services, S extends Array<ValidTagsById<Services>>>(\n  ...tags: S\n) => (self: Context<Services>) => Context<Exclude<Services, { [k in keyof S]: Tag.Identifier<S[k]> }[keyof S]>> =\n  internal.omit\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Tag: <const Id extends string>(id: Id) => <Self, Shape>() => TagClass<Self, Id, Shape> = internal.Tag\n"],"names":["internal","TagTypeId","GenericTag","makeGenericTag","TypeId","unsafeMake","makeContext","isContext","isTag","empty","make","add","get","getOrElse","unsafeGet","getOption","merge","pick","omit","Tag"],"mappings":";;;;;;;;;;;;;;;;;AAYA,OAAO,KAAKA,QAAQ,MAAM,uBAAuB;;AAMjD,MAAMC,SAAS,GAAkBD,QAAQ,2MAACC,SAAS;AA4F5C,MAAMC,UAAU,GACrBF,QAAQ,2MAACG,cAAc;AAEzB,MAAMC,MAAM,GAAkBJ,QAAQ,2MAACI,MAAgB;AA6BhD,MAAMC,UAAU,GAAiEL,QAAQ,2MAACM,WAAW;AAerG,MAAMC,SAAS,GAAgDP,QAAQ,2MAACO,SAAS;AAejF,MAAMC,KAAK,GAA+CR,QAAQ,2MAACQ,KAAK;AAaxE,MAAMC,KAAK,GAAyBT,QAAQ,2MAACS,KAAK;AAiBlD,MAAMC,IAAI,GACfV,QAAQ,2MAACU,IAAI;AAuBR,MAAMC,GAAG,GAoDZX,QAAQ,2MAACW,GAAG;AAwBT,MAAMC,GAAG,GA+CZZ,QAAQ,2MAACY,GAAG;AAST,MAAMC,SAAS,GAiBlBb,QAAQ,2MAACa,SAAS;AAyBf,MAAMC,SAAS,GAiDlBd,QAAQ,2MAACc,SAAS;AAuBf,MAAMC,SAAS,GA6ClBf,QAAQ,2MAACe,SAAS;AAwBf,MAAMC,KAAK,GA+CdhB,QAAQ,2MAACgB,KAAK;AA0BX,MAAMC,IAAI,GAE6EjB,QAAQ,2MAACiB,IAAI;AAKpG,MAAMC,IAAI,GAGflB,QAAQ,2MAACkB,IAAI;AAMR,MAAMC,GAAG,GAAsFnB,QAAQ,2MAACmB,GAAG","ignoreList":[0]}},
    {"offset": {"line": 1745, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1751, "column": 0}, "map": {"version":3,"file":"Effectable.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Effectable.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Channel from \"./Channel.js\"\nimport type * as Effect from \"./Effect.js\"\nimport * as internal from \"./internal/effectable.js\"\nimport type * as Sink from \"./Sink.js\"\nimport type * as Stream from \"./Stream.js\"\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport const EffectTypeId: Effect.EffectTypeId = internal.EffectTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport type EffectTypeId = Effect.EffectTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport const StreamTypeId: Stream.StreamTypeId = internal.StreamTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport type StreamTypeId = Stream.StreamTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport const SinkTypeId: Sink.SinkTypeId = internal.SinkTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport type SinkTypeId = Sink.SinkTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport const ChannelTypeId: Channel.ChannelTypeId = internal.ChannelTypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport type ChannelTypeId = Channel.ChannelTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface CommitPrimitive {\n  new<A, E = never, R = never>(): Effect.Effect<A, E, R>\n}\n\n/**\n * @since 2.0.0\n * @category prototypes\n */\nexport const EffectPrototype: Effect.Effect<never> = internal.EffectPrototype\n\n/**\n * @since 2.0.0\n * @category prototypes\n */\nexport const CommitPrototype: Effect.Effect<never> = internal.CommitPrototype\n\n/**\n * @since 2.0.0\n * @category prototypes\n */\nexport const StructuralCommitPrototype: Effect.Effect<never> = internal.StructuralCommitPrototype\n\nconst Base: CommitPrimitive = internal.Base\nconst StructuralBase: CommitPrimitive = internal.StructuralBase\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport abstract class Class<A, E = never, R = never> extends Base<A, E, R> {\n  /**\n   * @since 2.0.0\n   */\n  abstract commit(): Effect.Effect<A, E, R>\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport abstract class StructuralClass<A, E = never, R = never> extends StructuralBase<A, E, R> {\n  /**\n   * @since 2.0.0\n   */\n  abstract commit(): Effect.Effect<A, E, R>\n}\n"],"names":["internal","EffectTypeId","StreamTypeId","SinkTypeId","ChannelTypeId","EffectPrototype","CommitPrototype","StructuralCommitPrototype","Base","StructuralBase","Class","StructuralClass"],"mappings":";;;;;;;;;;;AAKA,OAAO,KAAKA,QAAQ,MAAM,0BAA0B;;AAQ7C,MAAMC,YAAY,GAAwBD,QAAQ,8MAACC,YAAY;AAY/D,MAAMC,YAAY,GAAwBF,QAAQ,8MAACE,YAAY;AAY/D,MAAMC,UAAU,GAAoBH,QAAQ,8MAACG,UAAU;AAYvD,MAAMC,aAAa,GAA0BJ,QAAQ,8MAACI,aAAa;AAoBnE,MAAMC,eAAe,GAAyBL,QAAQ,8MAACK,eAAe;AAMtE,MAAMC,eAAe,GAAyBN,QAAQ,8MAACM,eAAe;AAMtE,MAAMC,yBAAyB,GAAyBP,QAAQ,8MAACO,yBAAyB;AAEjG,MAAMC,IAAI,GAAoBR,QAAQ,8MAACQ,IAAI;AAC3C,MAAMC,cAAc,GAAoBT,QAAQ,8MAACS,cAAc;AAMzD,MAAgBC,KAA+B,SAAQF,IAAa;AAAA;AAWpE,MAAgBG,eAAyC,SAAQF,cAAuB;AAAA","ignoreList":[0]}},
    {"offset": {"line": 1777, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1783, "column": 0}, "map": {"version":3,"file":"Micro.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Micro.ts"],"sourcesContent":["/**\n * A lightweight alternative to the `Effect` data type, with a subset of the functionality.\n *\n * @since 3.4.0\n * @experimental\n */\nimport type { Channel, ChannelTypeId } from \"./Channel.js\"\nimport * as Context from \"./Context.js\"\nimport type { Effect, EffectTypeId, EffectUnify, EffectUnifyIgnore } from \"./Effect.js\"\nimport * as Effectable from \"./Effectable.js\"\nimport * as Either from \"./Either.js\"\nimport { constTrue, constVoid, dual, identity, type LazyArg } from \"./Function.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport { NodeInspectSymbol, toStringUnknown } from \"./Inspectable.js\"\nimport * as doNotation from \"./internal/doNotation.js\"\nimport { StructuralPrototype } from \"./internal/effectable.js\"\nimport { SingleShotGen } from \"./internal/singleShotGen.js\"\nimport * as Option from \"./Option.js\"\nimport { type Pipeable, pipeArguments } from \"./Pipeable.js\"\nimport { hasProperty, isIterable, isTagged, type Predicate, type Refinement } from \"./Predicate.js\"\nimport type { ReadonlyRecord } from \"./Record.js\"\nimport type { Sink, SinkTypeId } from \"./Sink.js\"\nimport type { Stream, StreamTypeId } from \"./Stream.js\"\nimport type { Concurrency, Covariant, Equals, NoInfer, NotFunction, Simplify } from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\nimport { YieldWrap, yieldWrapGet } from \"./Utils.js\"\n\n/**\n * @since 3.4.0\n * @experimental\n * @category type ids\n */\nexport const TypeId: unique symbol = Symbol.for(\"effect/Micro\")\n\n/**\n * @since 3.4.0\n * @experimental\n * @category type ids\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 3.4.0\n * @experimental\n * @category symbols\n */\nexport const runSymbol: unique symbol = Symbol.for(\"effect/Micro/runSymbol\")\n\n/**\n * @since 3.4.0\n * @experimental\n * @category symbols\n */\nexport type runSymbol = typeof runSymbol\n\n/**\n * A lightweight alternative to the `Effect` data type, with a subset of the functionality.\n *\n * @since 3.4.0\n * @experimental\n * @category models\n */\nexport interface Micro<out A, out E = never, out R = never> extends Effect<A, E, R> {\n  readonly [TypeId]: Micro.Variance<A, E, R>\n  [runSymbol](env: Env<any>, onExit: (exit: MicroExit<A, E>) => void): void\n  [Symbol.iterator](): MicroIterator<Micro<A, E, R>>\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: MicroUnify<this>\n  [Unify.ignoreSymbol]?: MicroUnifyIgnore\n}\n\n/**\n * @category models\n * @since 3.4.3\n */\nexport interface MicroUnify<A extends { [Unify.typeSymbol]?: any }> extends EffectUnify<A> {\n  Micro?: () => A[Unify.typeSymbol] extends Micro<infer A0, infer E0, infer R0> | infer _ ? Micro<A0, E0, R0> : never\n}\n\n/**\n * @category models\n * @since 3.4.3\n */\nexport interface MicroUnifyIgnore extends EffectUnifyIgnore {\n  Effect?: true\n}\n/**\n * @category type lambdas\n * @since 3.4.1\n */\nexport interface MicroTypeLambda extends TypeLambda {\n  readonly type: Micro<this[\"Target\"], this[\"Out1\"], this[\"Out2\"]>\n}\n\n/**\n * @since 3.4.0\n * @experimental\n */\nexport declare namespace Micro {\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export interface Variance<A, E, R> {\n    _A: Covariant<A>\n    _E: Covariant<E>\n    _R: Covariant<R>\n  }\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type Success<T> = T extends Micro<infer _A, infer _E, infer _R> ? _A : never\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type Error<T> = T extends Micro<infer _A, infer _E, infer _R> ? _E : never\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type Context<T> = T extends Micro<infer _A, infer _E, infer _R> ? _R : never\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category guards\n */\nexport const isMicro = (u: unknown): u is Micro<any, any, any> => typeof u === \"object\" && u !== null && TypeId in u\n\n/**\n * @since 3.4.0\n * @experimental\n * @category models\n */\nexport interface MicroIterator<T extends Micro<any, any, any>> {\n  next(...args: ReadonlyArray<any>): IteratorResult<YieldWrap<T>, Micro.Success<T>>\n}\n\n/**\n * @since 3.8.4\n * @experimental\n * @category models\n */\nexport interface MicroClass {\n  new<A, E = never, R = never>(): Micro<A, E, R>\n}\n\n// ----------------------------------------------------------------------------\n// Microable\n// ----------------------------------------------------------------------------\n\nconst MicroProto = {\n  ...Effectable.EffectPrototype,\n  _op: \"Micro\",\n  [TypeId]: {\n    _A: identity,\n    _E: identity,\n    _R: identity\n  },\n  [Symbol.iterator]() {\n    return new SingleShotGen(new YieldWrap(this)) as any\n  }\n}\n\nconst MicroBase: MicroClass = (function() {\n  function Base() {}\n  Base.prototype = MicroProto\n  return Base as any\n})()\n\n/**\n * @since 3.8.4\n * @experimental\n * @category constructors\n */\nexport abstract class Class<out A, out E = never, out R = never> extends MicroBase<A, E, R> {\n  /**\n   * @since 3.8.4\n   * @experimental\n   */\n  abstract asMicro(): Micro<A, E, R>\n  /**\n   * @since 3.8.4\n   * @experimental\n   */\n  [runSymbol](env: Env<any>, onExit: (exit: MicroExit<A, E>) => void): void {\n    this.asMicro()[runSymbol](env, onExit)\n  }\n}\n\n// ----------------------------------------------------------------------------\n// MicroCause\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const MicroCauseTypeId = Symbol.for(\"effect/Micro/MicroCause\")\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport type MicroCauseTypeId = typeof MicroCauseTypeId\n\n/**\n * A Micro Cause is a data type that represents the different ways a Micro can fail.\n *\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport type MicroCause<E> = MicroCause.Die | MicroCause.Fail<E> | MicroCause.Interrupt\n\n/**\n * @since 3.6.6\n * @experimental\n * @category guards\n */\nexport const isMicroCause = (self: unknown): self is MicroCause<unknown> => hasProperty(self, MicroCauseTypeId)\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport declare namespace MicroCause {\n  /**\n   * @since 3.4.6\n   * @experimental\n   */\n  export type Error<T> = T extends MicroCause.Fail<infer E> ? E : never\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export interface Proto<Tag extends string, E> extends Pipeable, globalThis.Error {\n    readonly [MicroCauseTypeId]: {\n      _E: Covariant<E>\n    }\n    readonly _tag: Tag\n    readonly traces: ReadonlyArray<string>\n  }\n\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category MicroCause\n   */\n  export interface Die extends Proto<\"Die\", never> {\n    readonly defect: unknown\n  }\n\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category MicroCause\n   */\n  export interface Fail<E> extends Proto<\"Fail\", E> {\n    readonly error: E\n  }\n\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category MicroCause\n   */\n  export interface Interrupt extends Proto<\"Interrupt\", never> {}\n}\n\nconst microCauseVariance = {\n  _E: identity\n}\n\nabstract class MicroCauseImpl<Tag extends string, E> extends globalThis.Error implements MicroCause.Proto<Tag, E> {\n  readonly [MicroCauseTypeId]: {\n    _E: Covariant<E>\n  }\n  constructor(\n    readonly _tag: Tag,\n    originalError: unknown,\n    readonly traces: ReadonlyArray<string>\n  ) {\n    const causeName = `MicroCause.${_tag}`\n    let name: string\n    let message: string\n    let stack: string\n    if (originalError instanceof globalThis.Error) {\n      name = `(${causeName}) ${originalError.name}`\n      message = originalError.message as string\n      const messageLines = message.split(\"\\n\").length\n      stack = originalError.stack\n        ? `(${causeName}) ${originalError.stack.split(\"\\n\").slice(0, messageLines + 3).join(\"\\n\")}`\n        : `${name}: ${message}`\n    } else {\n      name = causeName\n      message = toStringUnknown(originalError, 0)\n      stack = `${name}: ${message}`\n    }\n    if (traces.length > 0) {\n      stack += `\\n    ${traces.join(\"\\n    \")}`\n    }\n    super(message)\n    this[MicroCauseTypeId] = microCauseVariance\n    this.name = name\n    this.stack = stack\n  }\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n  toString() {\n    return this.stack\n  }\n  [NodeInspectSymbol]() {\n    return this.stack\n  }\n}\n\nclass FailImpl<E> extends MicroCauseImpl<\"Fail\", E> implements MicroCause.Fail<E> {\n  constructor(readonly error: E, traces: ReadonlyArray<string> = []) {\n    super(\"Fail\", error, traces)\n  }\n}\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeFail = <E>(error: E, traces: ReadonlyArray<string> = []): MicroCause<E> => new FailImpl(error, traces)\n\nclass DieImpl extends MicroCauseImpl<\"Die\", never> implements MicroCause.Die {\n  constructor(readonly defect: unknown, traces: ReadonlyArray<string> = []) {\n    super(\"Die\", defect, traces)\n  }\n}\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeDie = (defect: unknown, traces: ReadonlyArray<string> = []): MicroCause<never> =>\n  new DieImpl(defect, traces)\n\nclass InterruptImpl extends MicroCauseImpl<\"Interrupt\", never> implements MicroCause.Interrupt {\n  constructor(traces: ReadonlyArray<string> = []) {\n    super(\"Interrupt\", \"interrupted\", traces)\n  }\n}\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeInterrupt = (traces: ReadonlyArray<string> = []): MicroCause<never> => new InterruptImpl(traces)\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeIsFail = <E>(self: MicroCause<E>): self is MicroCause.Fail<E> => self._tag === \"Fail\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeIsDie = <E>(self: MicroCause<E>): self is MicroCause.Die => self._tag === \"Die\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeIsInterrupt = <E>(self: MicroCause<E>): self is MicroCause.Interrupt => self._tag === \"Interrupt\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeSquash = <E>(self: MicroCause<E>): unknown =>\n  self._tag === \"Fail\" ? self.error : self._tag === \"Die\" ? self.defect : self\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeWithTrace: {\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category MicroCause\n   */\n  (trace: string): <E>(self: MicroCause<E>) => MicroCause<E>\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category MicroCause\n   */\n  <E>(self: MicroCause<E>, trace: string): MicroCause<E>\n} = dual(2, <E>(self: MicroCause<E>, trace: string): MicroCause<E> => {\n  const traces = [...self.traces, trace]\n  switch (self._tag) {\n    case \"Die\":\n      return causeDie(self.defect, traces)\n    case \"Interrupt\":\n      return causeInterrupt(traces)\n    case \"Fail\":\n      return causeFail(self.error, traces)\n  }\n})\n\n// ----------------------------------------------------------------------------\n// MicroExit\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport declare namespace MicroExit {\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category MicroExit\n   */\n  export type Success<A, E = never> = Either.Right<MicroCause<E>, A>\n\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category MicroExit\n   */\n  export type Failure<A, E = never> = Either.Left<MicroCause<E>, A>\n}\n\n/**\n * The MicroExit type is a data type that represents the result of a Micro\n * computation.\n *\n * It uses the `Either` data type to represent the success and failure cases.\n *\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport type MicroExit<A, E = never> = MicroExit.Success<A, E> | MicroExit.Failure<A, E>\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitInterrupt: MicroExit<never> = Either.left(causeInterrupt())\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitSucceed: <A>(a: A) => MicroExit<A, never> = Either.right\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitFail = <E>(e: E): MicroExit<never, E> => Either.left(causeFail(e))\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitDie = (defect: unknown): MicroExit<never> => Either.left(causeDie(defect))\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitFailCause: <E>(cause: MicroCause<E>) => MicroExit<never, E> = Either.left\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitIsSuccess: <A, E>(self: MicroExit<A, E>) => self is MicroExit.Success<A, E> = Either.isRight\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitIsFailure: <A, E>(self: MicroExit<A, E>) => self is MicroExit.Failure<A, E> = Either.isLeft\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitIsInterrupt = <A, E>(self: MicroExit<A, E>): self is Either.Left<MicroCause.Interrupt, A> =>\n  exitIsFailure(self) && self.left._tag === \"Interrupt\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitIsFail = <A, E>(self: MicroExit<A, E>): self is Either.Left<MicroCause.Fail<E>, A> =>\n  exitIsFailure(self) && self.left._tag === \"Fail\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitIsDie = <A, E>(self: MicroExit<A, E>): self is Either.Left<MicroCause.Die, A> =>\n  exitIsFailure(self) && self.left._tag === \"Die\"\n\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitVoid: MicroExit<void> = exitSucceed(void 0)\n\n// ----------------------------------------------------------------------------\n// env\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const EnvTypeId = Symbol.for(\"effect/Micro/Env\")\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport type EnvTypeId = typeof EnvTypeId\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport interface Env<R> extends Pipeable {\n  readonly [EnvTypeId]: {\n    _R: Covariant<R>\n  }\n  readonly refs: ReadonlyRecord<string, unknown>\n}\n\nconst EnvProto = {\n  [EnvTypeId]: {\n    _R: identity\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const envMake = <R = never>(\n  refs: Record<string, unknown>\n): Env<R> => {\n  const self = Object.create(EnvProto)\n  self.refs = refs\n  return self\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const envUnsafeMakeEmpty = (): Env<never> => {\n  const controller = new AbortController()\n  const refs = Object.create(null)\n  refs[currentAbortController.key] = controller\n  refs[currentAbortSignal.key] = controller.signal\n  refs[currentScheduler.key] = new MicroSchedulerDefault()\n  return envMake(refs)\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const envGet: {\n  /**\n   * @since 3.4.0\n   * @experimental\n   * @category environment\n   */\n  <A>(ref: EnvRef<A>): <R>(self: Env<R>) => A\n  /**\n   * @since 3.4.0\n   * @experimental\n   * @category environment\n   */\n  <A, R>(self: Env<R>, ref: EnvRef<A>): A\n} = dual(2, <R, A>(self: Env<R>, ref: EnvRef<A>): A => ref.key in self.refs ? (self.refs[ref.key] as A) : ref.initial)\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const envSet: {\n  /**\n   * @since 3.4.0\n   * @experimental\n   * @category environment\n   */\n  <A>(ref: EnvRef<A>, value: A): <R>(self: Env<R>) => Env<R>\n  /**\n   * @since 3.4.0\n   * @experimental\n   * @category environment\n   */\n  <A, R>(self: Env<R>, ref: EnvRef<A>, value: A): Env<R>\n} = dual(3, <R, A>(self: Env<R>, ref: EnvRef<A>, value: A): Env<R> => {\n  const refs = Object.assign(Object.create(null), self.refs)\n  refs[ref.key] = value\n  return envMake(refs)\n})\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const envMutate: {\n  /**\n   * @since 3.4.0\n   * @experimental\n   * @category environment\n   */\n  (f: (map: Record<string, unknown>) => void): <R>(self: Env<R>) => Env<R>\n  /**\n   * @since 3.4.0\n   * @experimental\n   * @category environment\n   */\n  <R>(self: Env<R>, f: (map: Record<string, unknown>) => void): Env<R>\n} = dual(\n  2,\n  <R>(self: Env<R>, f: (map: Record<string, unknown>) => ReadonlyRecord<string, unknown>): Env<R> =>\n    envMake(f(Object.assign(Object.create(null), self.refs)))\n)\n\n/**\n * Access the given `Context.Tag` from the environment.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const service = <I, S>(tag: Context.Tag<I, S>): Micro<S, never, I> =>\n  make(function(env, onExit) {\n    onExit(exitSucceed(Context.get(envGet(env, currentContext) as Context.Context<I>, tag as any) as S))\n  })\n\n/**\n * Access the given `Context.Tag` from the environment, without tracking the\n * dependency at the type level.\n *\n * It will return an `Option` of the service, depending on whether it is\n * available in the environment or not.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const serviceOption = <I, S>(tag: Context.Tag<I, S>): Micro<Option.Option<S>> =>\n  make(function(env, onExit) {\n    onExit(exitSucceed(Context.getOption(envGet(env, currentContext) as Context.Context<I>, tag)))\n  })\n\n/**\n * Retrieve the current value of the given `EnvRef`.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const getEnvRef = <A>(envRef: EnvRef<A>): Micro<A> =>\n  make((env, onExit) => onExit(Either.right(envGet(env, envRef))))\n\n/**\n * Set the value of the given `EnvRef` for the duration of the effect.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const locally: {\n  /**\n   * Set the value of the given `EnvRef` for the duration of the effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category environment\n   */\n  <A>(fiberRef: EnvRef<A>, value: A): <XA, E, R>(self: Micro<XA, E, R>) => Micro<XA, E, R>\n  /**\n   * Set the value of the given `EnvRef` for the duration of the effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category environment\n   */\n  <XA, E, R, A>(self: Micro<XA, E, R>, fiberRef: EnvRef<A>, value: A): Micro<XA, E, R>\n} = dual(\n  3,\n  <XA, E, R, A>(self: Micro<XA, E, R>, fiberRef: EnvRef<A>, value: A): Micro<XA, E, R> =>\n    make((env, onExit) => self[runSymbol](envSet(env, fiberRef, value), onExit))\n)\n\n/**\n * Access the current `Context` from the environment.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const context = <R>(): Micro<Context.Context<R>> => getEnvRef(currentContext) as any\n\n/**\n * Merge the given `Context` with the current context.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const provideContext: {\n  /**\n   * Merge the given `Context` with the current context.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category environment\n   */\n  <XR>(context: Context.Context<XR>): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E, Exclude<R, XR>>\n  /**\n   * Merge the given `Context` with the current context.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category environment\n   */\n  <A, E, R, XR>(self: Micro<A, E, R>, context: Context.Context<XR>): Micro<A, E, Exclude<R, XR>>\n} = dual(\n  2,\n  <A, E, R, XR>(self: Micro<A, E, R>, provided: Context.Context<XR>): Micro<A, E, Exclude<R, XR>> =>\n    make(function(env, onExit) {\n      const context = envGet(env, currentContext)\n      const nextEnv = envSet(env, currentContext, Context.merge(context, provided))\n      self[runSymbol](nextEnv, onExit)\n    })\n)\n\n/**\n * Add the provided service to the current context.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const provideService: {\n  /**\n   * Add the provided service to the current context.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category environment\n   */\n  <I, S>(tag: Context.Tag<I, S>, service: S): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E, Exclude<R, I>>\n  /**\n   * Add the provided service to the current context.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category environment\n   */\n  <A, E, R, I, S>(self: Micro<A, E, R>, tag: Context.Tag<I, S>, service: S): Micro<A, E, Exclude<R, I>>\n} = dual(\n  3,\n  <A, E, R, I, S>(self: Micro<A, E, R>, tag: Context.Tag<I, S>, service: S): Micro<A, E, Exclude<R, I>> =>\n    make(function(env, onExit) {\n      const context = envGet(env, currentContext)\n      const nextEnv = envSet(env, currentContext, Context.add(context, tag, service))\n      self[runSymbol](nextEnv, onExit)\n    })\n)\n\n/**\n * Create a service using the provided `Micro` effect, and add it to the\n * current context.\n *\n * @since 3.4.6\n * @experimental\n * @category environment\n */\nexport const provideServiceEffect: {\n  /**\n   * Create a service using the provided `Micro` effect, and add it to the\n   * current context.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category environment\n   */\n  <I, S, E2, R2>(\n    tag: Context.Tag<I, S>,\n    acquire: Micro<S, E2, R2>\n  ): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E | E2, Exclude<R, I> | R2>\n  /**\n   * Create a service using the provided `Micro` effect, and add it to the\n   * current context.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category environment\n   */\n  <A, E, R, I, S, E2, R2>(\n    self: Micro<A, E, R>,\n    tag: Context.Tag<I, S>,\n    acquire: Micro<S, E2, R2>\n  ): Micro<A, E | E2, Exclude<R, I> | R2>\n} = dual(\n  3,\n  <A, E, R, I, S, E2, R2>(\n    self: Micro<A, E, R>,\n    tag: Context.Tag<I, S>,\n    acquire: Micro<S, E2, R2>\n  ): Micro<A, E | E2, Exclude<R, I> | R2> => flatMap(acquire, (service) => provideService(self, tag, service))\n)\n\n// ----------------------------------------------------------------------------\n// scheduler\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.5.9\n * @experimental\n * @category scheduler\n */\nexport interface MicroScheduler {\n  readonly scheduleTask: (task: () => void, priority: number) => void\n  readonly shouldYield: (env: Env<unknown>) => boolean\n  readonly flush: () => void\n}\n\nconst setImmediate = \"setImmediate\" in globalThis ? globalThis.setImmediate : (f: () => void) => setTimeout(f, 0)\n\n/**\n * @since 3.5.9\n * @experimental\n * @category scheduler\n */\nexport class MicroSchedulerDefault implements MicroScheduler {\n  private tasks: Array<() => void> = []\n  private running = false\n\n  /**\n   * @since 3.5.9\n   */\n  scheduleTask(task: () => void, _priority: number) {\n    this.tasks.push(task)\n    if (!this.running) {\n      this.running = true\n      setImmediate(this.afterScheduled)\n    }\n  }\n\n  /**\n   * @since 3.5.9\n   */\n  afterScheduled = () => {\n    this.running = false\n    this.runTasks()\n  }\n\n  /**\n   * @since 3.5.9\n   */\n  runTasks() {\n    const tasks = this.tasks\n    this.tasks = []\n    for (let i = 0, len = tasks.length; i < len; i++) {\n      tasks[i]()\n    }\n  }\n\n  /**\n   * @since 3.5.9\n   */\n  shouldYield(_env: Env<unknown>) {\n    return false\n  }\n\n  /**\n   * @since 3.5.9\n   */\n  flush() {\n    while (this.tasks.length > 0) {\n      this.runTasks()\n    }\n  }\n}\n\n// ========================================================================\n// Env refs\n// ========================================================================\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const EnvRefTypeId: unique symbol = Symbol.for(\"effect/Micro/EnvRef\")\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport type EnvRefTypeId = typeof EnvRefTypeId\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport interface EnvRef<A> extends Micro<A> {\n  readonly [EnvRefTypeId]: EnvRefTypeId\n  readonly key: string\n  readonly initial: A\n\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: EnvRefUnify<this>\n  [Unify.ignoreSymbol]?: EnvRefUnifyIgnore\n}\n\n/**\n * @category models\n * @since 3.8.4\n * @experimental\n */\nexport interface EnvRefUnify<A extends { [Unify.typeSymbol]?: any }> extends MicroUnify<A> {\n  EnvRef?: () => A[Unify.typeSymbol] extends EnvRef<infer A0> | infer _ ? EnvRef<A0> : never\n}\n\n/**\n * @category models\n * @since 3.8.4\n * @experimental\n */\nexport interface EnvRefUnifyIgnore extends MicroUnifyIgnore {\n  Micro?: true\n}\n\nconst EnvRefProto: ThisType<EnvRef<any>> = {\n  ...MicroProto,\n  [EnvRefTypeId]: EnvRefTypeId,\n  [runSymbol](env: Env<any>, onExit: (exit: MicroExit<any, any>) => void) {\n    getEnvRef(this)[runSymbol](env, onExit)\n  }\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const envRefMake = <A>(key: string, initial: LazyArg<A>): EnvRef<A> =>\n  globalValue(key, () => {\n    const self = Object.create(EnvRefProto)\n    self.key = key\n    self.initial = initial()\n    return self\n  })\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const currentAbortController: EnvRef<AbortController> = envRefMake(\n  \"effect/Micro/currentAbortController\",\n  () => undefined as any\n)\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const currentAbortSignal: EnvRef<AbortSignal> = envRefMake(\n  \"effect/Micro/currentAbortSignal\",\n  () => undefined as any\n)\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const currentContext: EnvRef<Context.Context<never>> = envRefMake(\n  \"effect/Micro/currentContext\",\n  () => Context.empty()\n)\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const currentConcurrency: EnvRef<\"unbounded\" | number> = envRefMake(\n  \"effect/Micro/currentConcurrency\",\n  () => \"unbounded\"\n)\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const currentMaxDepthBeforeYield: EnvRef<number> = envRefMake(\n  \"effect/Micro/currentMaxDepthBeforeYield\",\n  () => 2048\n)\n\nconst currentInterruptible: EnvRef<boolean> = envRefMake(\n  \"effect/Micro/currentInterruptible\",\n  () => true\n)\n\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const currentScheduler: EnvRef<MicroScheduler> = envRefMake(\n  \"effect/Micro/currentScheduler\",\n  () => new MicroSchedulerDefault()\n)\n\n/**\n * If you have a `Micro` that uses `concurrency: \"inherit\"`, you can use this\n * api to control the concurrency of that `Micro` when it is run.\n *\n * @since 3.4.0\n * @experimental\n * @category environment refs\n * @example\n * import * as Micro from \"effect/Micro\"\n *\n * Micro.forEach([1, 2, 3], (n) => Micro.succeed(n), {\n *   concurrency: \"inherit\"\n * }).pipe(\n *   Micro.withConcurrency(2) // use a concurrency of 2\n * )\n */\nexport const withConcurrency: {\n  /**\n   * If you have a `Micro` that uses `concurrency: \"inherit\"`, you can use this\n   * api to control the concurrency of that `Micro` when it is run.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category environment refs\n   * @example\n   * import * as Micro from \"effect/Micro\"\n   *\n   * Micro.forEach([1, 2, 3], (n) => Micro.succeed(n), {\n   *   concurrency: \"inherit\"\n   * }).pipe(\n   *   Micro.withConcurrency(2) // use a concurrency of 2\n   * )\n   */\n  (concurrency: \"unbounded\" | number): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E, R>\n  /**\n   * If you have a `Micro` that uses `concurrency: \"inherit\"`, you can use this\n   * api to control the concurrency of that `Micro` when it is run.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category environment refs\n   * @example\n   * import * as Micro from \"effect/Micro\"\n   *\n   * Micro.forEach([1, 2, 3], (n) => Micro.succeed(n), {\n   *   concurrency: \"inherit\"\n   * }).pipe(\n   *   Micro.withConcurrency(2) // use a concurrency of 2\n   * )\n   */\n  <A, E, R>(self: Micro<A, E, R>, concurrency: \"unbounded\" | number): Micro<A, E, R>\n} = dual(\n  2,\n  <A, E, R>(self: Micro<A, E, R>, concurrency: \"unbounded\" | number): Micro<A, E, R> =>\n    locally(self, currentConcurrency, concurrency)\n)\n\n// ----------------------------------------------------------------------------\n// constructors\n// ----------------------------------------------------------------------------\n\nconst microDepthState = globalValue(\"effect/Micro/microDepthState\", () => ({\n  depth: 0,\n  maxDepthBeforeYield: currentMaxDepthBeforeYield.initial\n}))\n\nconst unsafeMake = <R, A, E>(\n  run: (env: Env<R>, onExit: (exit: MicroExit<A, E>) => void) => void\n): Micro<A, E, R> => {\n  const self = Object.create(MicroProto)\n  self[runSymbol] = run\n  return self\n}\n\nconst unsafeMakeOptions = <R, A, E>(\n  run: (env: Env<R>, onExit: (exit: MicroExit<A, E>) => void) => void,\n  checkAbort: boolean\n): Micro<A, E, R> =>\n  unsafeMake(function execute(env, onExit) {\n    if (\n      checkAbort && env.refs[currentInterruptible.key] !== false &&\n      (env.refs[currentAbortSignal.key] as AbortSignal).aborted\n    ) {\n      return onExit(exitInterrupt)\n    }\n    microDepthState.depth++\n    if (microDepthState.depth === 1) {\n      microDepthState.maxDepthBeforeYield = envGet(env, currentMaxDepthBeforeYield)\n    }\n    const scheduler = env.refs[currentScheduler.key] as MicroScheduler\n    if (microDepthState.depth >= microDepthState.maxDepthBeforeYield || scheduler.shouldYield(env)) {\n      scheduler.scheduleTask(() => execute(env, onExit), 0)\n    } else {\n      try {\n        run(env, onExit)\n      } catch (err) {\n        onExit(exitDie(err))\n      }\n    }\n    microDepthState.depth--\n  })\n\n/**\n * A low-level constructor for creating a `Micro` effect. It takes a function\n * that receives an environment and a callback which should be called with the\n * result of the effect.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const make = <R, A, E>(\n  run: (env: Env<R>, onExit: (exit: MicroExit<A, E>) => void) => void\n): Micro<A, E, R> => unsafeMakeOptions(run, true)\n\n/**\n * Converts a `MicroExit` into a `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category constructors\n */\nexport const fromExit = <A, E>(self: MicroExit<A, E>): Micro<A, E> =>\n  make(function(_env, onExit) {\n    onExit(self)\n  })\n\n/**\n * Converts a lazy `MicroExit` into a `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category constructors\n */\nexport const fromExitSync = <A, E>(self: LazyArg<MicroExit<A, E>>): Micro<A, E> =>\n  make(function(_env, onExit) {\n    onExit(self())\n  })\n\n/**\n * Creates a `Micro` effect that will succeed with the specified constant value.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const succeed = <A>(a: A): Micro<A> => fromExit(exitSucceed(a))\n\n/**\n * Creates a `Micro` effect that will succeed with `Option.Some` of the value.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const succeedSome = <A>(a: A): Micro<Option.Option<A>> => succeed(Option.some(a))\n\n/**\n * Creates a `Micro` effect that will succeed with `Option.None`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const succeedNone: Micro<Option.Option<never>> = succeed(Option.none())\n\n/**\n * Creates a `Micro` effect that will fail with the specified error.\n *\n * This will result in a `CauseFail`, where the error is tracked at the\n * type level.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const fail = <E>(e: E): Micro<never, E> => fromExit(exitFail(e))\n\n/**\n * Creates a `Micro` effect that will fail with the lazily evaluated error.\n *\n * This will result in a `CauseFail`, where the error is tracked at the\n * type level.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const failSync = <E>(e: LazyArg<E>): Micro<never, E> =>\n  make(function(_env, onExit) {\n    onExit(exitFail(e()))\n  })\n\n/**\n * Creates a `Micro` effect that will die with the specified error.\n *\n * This will result in a `CauseDie`, where the error is not tracked at\n * the type level.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const die = (defect: unknown): Micro<never> => fromExit(exitDie(defect))\n\n/**\n * Creates a `Micro` effect that will fail with the specified `MicroCause`.\n *\n * @since 3.4.6\n * @experimental\n * @category constructors\n */\nexport const failCause = <E>(cause: MicroCause<E>): Micro<never, E> => fromExit(exitFailCause(cause))\n\n/**\n * Creates a `Micro` effect that will fail with the lazily evaluated `MicroCause`.\n *\n * @since 3.4.6\n * @experimental\n * @category constructors\n */\nexport const failCauseSync = <E>(cause: LazyArg<MicroCause<E>>): Micro<never, E> =>\n  fromExitSync(() => exitFailCause(cause()))\n\n/**\n * Creates a `Micro` effect that will succeed with the lazily evaluated value.\n *\n * If the evaluation of the value throws an error, the effect will fail with\n * `CauseDie`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const sync = <A>(evaluate: LazyArg<A>): Micro<A> =>\n  make(function(_env, onExit) {\n    onExit(exitSucceed(evaluate()))\n  })\n\n/**\n * Converts an `Option` into a `Micro` effect, that will fail with\n * `NoSuchElementException` if the option is `None`. Otherwise, it will succeed with the\n * value of the option.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const fromOption = <A>(option: Option.Option<A>): Micro<A, NoSuchElementException> =>\n  make(function(_env, onExit) {\n    onExit(option._tag === \"Some\" ? exitSucceed(option.value) : exitFail(new NoSuchElementException({})))\n  })\n\n/**\n * Converts an `Either` into a `Micro` effect, that will fail with the left side\n * of the either if it is a `Left`. Otherwise, it will succeed with the right\n * side of the either.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const fromEither = <R, L>(either: Either.Either<R, L>): Micro<R, L> =>\n  make(function(_env, onExit) {\n    onExit(either._tag === \"Right\" ? either as MicroExit<R, never> : exitFail(either.left))\n  })\n\n/**\n * Lazily creates a `Micro` effect from the given side-effect.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const suspend = <A, E, R>(evaluate: LazyArg<Micro<A, E, R>>): Micro<A, E, R> =>\n  make(function(env, onExit) {\n    evaluate()[runSymbol](env, onExit)\n  })\n\nconst void_: Micro<void> = succeed(void 0)\nexport {\n  /**\n   * A `Micro` effect that will succeed with `void` (`undefined`).\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category constructors\n   */\n  void_ as void\n}\n\n/**\n * Create a `Micro` effect from an asynchronous computation.\n *\n * You can return a cleanup effect that will be run when the effect is aborted.\n * It is also passed an `AbortSignal` that is triggered when the effect is\n * aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const async = <A, E = never, R = never>(\n  register: (resume: (effect: Micro<A, E, R>) => void, signal: AbortSignal) => void | Micro<void, never, R>\n): Micro<A, E, R> =>\n  make(function(env, onExit) {\n    let resumed = false\n    const controller = register.length > 1 ? new AbortController() : undefined\n    const signal = envGet(env, currentAbortSignal)\n    let cleanup: Micro<void, never, R> | void = undefined\n    function onAbort() {\n      if (cleanup) {\n        resume(uninterruptible(andThen(cleanup, fromExit(exitInterrupt))))\n      } else {\n        resume(fromExit(exitInterrupt))\n      }\n      if (controller !== undefined) {\n        controller.abort()\n      }\n    }\n    function resume(effect: Micro<A, E, R>) {\n      if (resumed) {\n        return\n      }\n      resumed = true\n      signal.removeEventListener(\"abort\", onAbort)\n      effect[runSymbol](env, onExit)\n    }\n    cleanup = controller === undefined\n      ? (register as any)(resume)\n      : register(resume, controller.signal)\n    if (resumed) return\n    signal.addEventListener(\"abort\", onAbort)\n  })\n\nconst try_ = <A, E>(options: {\n  try: LazyArg<A>\n  catch: (error: unknown) => E\n}): Micro<A, E> =>\n  make(function(_env, onExit) {\n    try {\n      onExit(exitSucceed(options.try()))\n    } catch (err) {\n      onExit(exitFail(options.catch(err)))\n    }\n  })\nexport {\n  /**\n   * The `Micro` equivalent of a try / catch block, which allows you to map\n   * thrown errors to a specific error type.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category constructors\n   * @example\n   * import { Micro } from \"effect\"\n   *\n   * Micro.try({\n   *   try: () => throw new Error(\"boom\"),\n   *   catch: (cause) => new Error(\"caught\", { cause })\n   * })\n   */\n  try_ as try\n}\n\n/**\n * Wrap a `Promise` into a `Micro` effect. Any errors will result in a\n * `CauseDie`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const promise = <A>(evaluate: (signal: AbortSignal) => PromiseLike<A>): Micro<A> =>\n  async<A>(function(resume, signal) {\n    evaluate(signal).then(\n      (a) => resume(succeed(a)),\n      (e) => resume(die(e))\n    )\n  })\n\n/**\n * Wrap a `Promise` into a `Micro` effect. Any errors will be caught and\n * converted into a specific error type.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n * @example\n * import { Micro } from \"effect\"\n *\n * Micro.tryPromise({\n *   try: () => Promise.resolve(\"success\"),\n *   catch: (cause) => new Error(\"caught\", { cause })\n * })\n */\nexport const tryPromise = <A, E>(options: {\n  readonly try: (signal: AbortSignal) => PromiseLike<A>\n  readonly catch: (error: unknown) => E\n}): Micro<A, E> =>\n  async<A, E>(function(resume, signal) {\n    try {\n      options.try(signal).then(\n        (a) => resume(succeed(a)),\n        (e) => resume(fail(options.catch(e)))\n      )\n    } catch (err) {\n      resume(fail(options.catch(err)))\n    }\n  })\n\n/**\n * Pause the execution of the current `Micro` effect, and resume it on the next\n * iteration of the event loop.\n *\n * You can specify a priority for the task, which will determine when it is\n * executed relative to other tasks.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const yieldWithPriority = (priority: number): Micro<void> =>\n  make(function(env, onExit) {\n    envGet(env, currentScheduler).scheduleTask(() => onExit(exitVoid), priority)\n  })\n\n/**\n * Pause the execution of the current `Micro` effect, and resume it on the next\n * iteration of the event loop.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const yieldNow: Micro<void> = yieldWithPriority(0)\n\n/**\n * Flush any yielded effects that are waiting to be executed.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const yieldFlush: Micro<void> = make(function(env, onExit) {\n  envGet(env, currentScheduler).flush()\n  onExit(exitVoid)\n})\n\n/**\n * A `Micro` that will never succeed or fail. It wraps `setInterval` to prevent\n * the Javascript runtime from exiting.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const never: Micro<never> = async<never>(function() {\n  const interval = setInterval(constVoid, 2147483646)\n  return sync(() => clearInterval(interval))\n})\n\n/**\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const gen = <Self, Eff extends YieldWrap<Micro<any, any, any>>, AEff>(\n  ...args:\n    | [self: Self, body: (this: Self) => Generator<Eff, AEff, never>]\n    | [body: () => Generator<Eff, AEff, never>]\n): Micro<\n  AEff,\n  [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Micro<infer _A, infer E, infer _R>>] ? E : never,\n  [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Micro<infer _A, infer _E, infer R>>] ? R : never\n> =>\n  make(function(env, onExit) {\n    const iterator: Generator<Eff, AEff, any> = args.length === 1 ? args[0]() : args[1].call(args[0])\n    let running = false\n    let value: any = undefined\n    function run() {\n      running = true\n      try {\n        let shouldContinue = true\n        while (shouldContinue) {\n          const result = iterator.next(value)\n          if (result.done) {\n            return onExit(exitSucceed(result.value))\n          }\n          shouldContinue = false\n          yieldWrapGet(result.value)[runSymbol](env, function(exit) {\n            if (exit._tag === \"Left\") {\n              onExit(exit)\n            } else {\n              shouldContinue = true\n              value = exit.right\n              if (!running) run()\n            }\n          })\n        }\n      } catch (err) {\n        onExit(exitDie(err))\n      }\n      running = false\n    }\n    run()\n  })\n\n// ----------------------------------------------------------------------------\n// mapping & sequencing\n// ----------------------------------------------------------------------------\n\n/**\n * Flattens any nested `Micro` effects, merging the error and requirement types.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const flatten = <A, E, R, E2, R2>(self: Micro<Micro<A, E, R>, E2, R2>): Micro<A, E | E2, R | R2> =>\n  make(function(env, onExit) {\n    self[runSymbol](\n      env,\n      (exit) => exit._tag === \"Left\" ? onExit(exit as MicroExit<never, E2>) : exit.right[runSymbol](env, onExit)\n    )\n  })\n\n/**\n * Transforms the success value of the `Micro` effect with the specified\n * function.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const map: {\n  /**\n   * Transforms the success value of the `Micro` effect with the specified\n   * function.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <A, B>(f: (a: A) => B): <E, R>(self: Micro<A, E, R>) => Micro<B, E, R>\n  /**\n   * Transforms the success value of the `Micro` effect with the specified\n   * function.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <A, E, R, B>(self: Micro<A, E, R>, f: (a: A) => B): Micro<B, E, R>\n} = dual(2, <A, E, R, B>(self: Micro<A, E, R>, f: (a: A) => B): Micro<B, E, R> =>\n  make(function(env, onExit) {\n    self[runSymbol](env, function(exit) {\n      onExit(exit._tag === \"Left\" ? exit as MicroExit<never, E> : exitSucceed(f(exit.right)))\n    })\n  }))\n\n/**\n * Create a `Micro` effect that will replace the success value of the given\n * effect.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const as: {\n  /**\n   * Create a `Micro` effect that will replace the success value of the given\n   * effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <A, B>(value: B): <E, R>(self: Micro<A, E, R>) => Micro<B, E, R>\n  /**\n   * Create a `Micro` effect that will replace the success value of the given\n   * effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <A, E, R, B>(self: Micro<A, E, R>, value: B): Micro<B, E, R>\n} = dual(2, <A, E, R, B>(self: Micro<A, E, R>, value: B): Micro<B, E, R> => map(self, (_) => value))\n\n/**\n * Wrap the success value of this `Micro` effect in an `Option.Some`.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const asSome = <A, E, R>(self: Micro<A, E, R>): Micro<Option.Option<A>, E, R> => map(self, Option.some)\n\n/**\n * Map the success value of this `Micro` effect to another `Micro` effect, then\n * flatten the result.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const flatMap: {\n  /**\n   * Map the success value of this `Micro` effect to another `Micro` effect, then\n   * flatten the result.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <A, B, E2, R2>(f: (a: A) => Micro<B, E2, R2>): <E, R>(self: Micro<A, E, R>) => Micro<B, E | E2, R | R2>\n  /**\n   * Map the success value of this `Micro` effect to another `Micro` effect, then\n   * flatten the result.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (a: A) => Micro<B, E2, R2>): Micro<B, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (a: A) => Micro<B, E2, R2>): Micro<B, E | E2, R | R2> =>\n    make(function(env, onExit) {\n      self[runSymbol](env, function(exit) {\n        if (exit._tag === \"Left\") {\n          return onExit(exit as MicroExit<never, E>)\n        }\n        f(exit.right)[runSymbol](env, onExit)\n      })\n    })\n)\n\n/**\n * Swap the error and success types of the `Micro` effect.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const flip = <A, E, R>(self: Micro<A, E, R>): Micro<E, A, R> =>\n  matchEffect(self, {\n    onFailure: succeed,\n    onSuccess: fail\n  })\n\n/**\n * A more flexible version of `flatMap`, that combines `map` and `flatMap` into\n * a single api.\n *\n * It also allows you to pass in a `Micro` effect directly, which will be\n * executed after the current effect.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const andThen: {\n  /**\n   * A more flexible version of `flatMap`, that combines `map` and `flatMap` into\n   * a single api.\n   *\n   * It also allows you to pass in a `Micro` effect directly, which will be\n   * executed after the current effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <A, X>(f: (a: A) => X): <E, R>(\n    self: Micro<A, E, R>\n  ) => [X] extends [Micro<infer A1, infer E1, infer R1>] ? Micro<A1, E | E1, R | R1>\n    : Micro<X, E, R>\n  /**\n   * A more flexible version of `flatMap`, that combines `map` and `flatMap` into\n   * a single api.\n   *\n   * It also allows you to pass in a `Micro` effect directly, which will be\n   * executed after the current effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <X>(f: NotFunction<X>): <A, E, R>(\n    self: Micro<A, E, R>\n  ) => [X] extends [Micro<infer A1, infer E1, infer R1>] ? Micro<A1, E | E1, R | R1>\n    : Micro<X, E, R>\n  /**\n   * A more flexible version of `flatMap`, that combines `map` and `flatMap` into\n   * a single api.\n   *\n   * It also allows you to pass in a `Micro` effect directly, which will be\n   * executed after the current effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <A, E, R, X>(\n    self: Micro<A, E, R>,\n    f: (a: A) => X\n  ): [X] extends [Micro<infer A1, infer E1, infer R1>] ? Micro<A1, E | E1, R | R1>\n    : Micro<X, E, R>\n  /**\n   * A more flexible version of `flatMap`, that combines `map` and `flatMap` into\n   * a single api.\n   *\n   * It also allows you to pass in a `Micro` effect directly, which will be\n   * executed after the current effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <A, E, R, X>(\n    self: Micro<A, E, R>,\n    f: NotFunction<X>\n  ): [X] extends [Micro<infer A1, infer E1, infer R1>] ? Micro<A1, E | E1, R | R1>\n    : Micro<X, E, R>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: any): Micro<B, E | E2, R | R2> =>\n    make(function(env, onExit) {\n      self[runSymbol](env, function(exit) {\n        if (exit._tag === \"Left\") {\n          return onExit(exit as MicroExit<never, E>)\n        } else if (envGet(env, currentAbortSignal).aborted) {\n          return onExit(exitInterrupt)\n        }\n        const value = isMicro(f) ? f : typeof f === \"function\" ? f(exit.right) : f\n        if (isMicro(value)) {\n          value[runSymbol](env, onExit)\n        } else {\n          onExit(exitSucceed(value))\n        }\n      })\n    })\n)\n\n/**\n * Execute a side effect from the success value of the `Micro` effect.\n *\n * It is similar to the `andThen` api, but the success value is ignored.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const tap: {\n  /**\n   * Execute a side effect from the success value of the `Micro` effect.\n   *\n   * It is similar to the `andThen` api, but the success value is ignored.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <A, X>(f: (a: NoInfer<A>) => X): <E, R>(\n    self: Micro<A, E, R>\n  ) => [X] extends [Micro<infer _A1, infer E1, infer R1>] ? Micro<A, E | E1, R | R1>\n    : Micro<A, E, R>\n  /**\n   * Execute a side effect from the success value of the `Micro` effect.\n   *\n   * It is similar to the `andThen` api, but the success value is ignored.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <X>(f: NotFunction<X>): <A, E, R>(\n    self: Micro<A, E, R>\n  ) => [X] extends [Micro<infer _A1, infer E1, infer R1>] ? Micro<A, E | E1, R | R1>\n    : Micro<A, E, R>\n  /**\n   * Execute a side effect from the success value of the `Micro` effect.\n   *\n   * It is similar to the `andThen` api, but the success value is ignored.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <A, E, R, X>(\n    self: Micro<A, E, R>,\n    f: (a: NoInfer<A>) => X\n  ): [X] extends [Micro<infer _A1, infer E1, infer R1>] ? Micro<A, E | E1, R | R1>\n    : Micro<A, E, R>\n  /**\n   * Execute a side effect from the success value of the `Micro` effect.\n   *\n   * It is similar to the `andThen` api, but the success value is ignored.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category mapping & sequencing\n   */\n  <A, E, R, X>(\n    self: Micro<A, E, R>,\n    f: NotFunction<X>\n  ): [X] extends [Micro<infer _A1, infer E1, infer R1>] ? Micro<A, E | E1, R | R1>\n    : Micro<A, E, R>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (a: A) => Micro<B, E2, R2>): Micro<A, E | E2, R | R2> =>\n    make(function(env, onExit) {\n      self[runSymbol](env, function(selfExit) {\n        if (selfExit._tag === \"Left\") {\n          return onExit(selfExit as MicroExit<never, E>)\n        } else if (envGet(env, currentAbortSignal).aborted) {\n          return onExit(exitInterrupt)\n        }\n        const value = isMicro(f) ? f : typeof f === \"function\" ? f(selfExit.right) : f\n        if (isMicro(value)) {\n          value[runSymbol](env, function(tapExit) {\n            if (tapExit._tag === \"Left\") {\n              return onExit(tapExit)\n            }\n            onExit(selfExit)\n          })\n        } else {\n          onExit(selfExit)\n        }\n      })\n    })\n)\n\n/**\n * Replace the success value of the `Micro` effect with `void`.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const asVoid = <A, E, R>(self: Micro<A, E, R>): Micro<void, E, R> => map(self, (_) => void 0)\n\n/**\n * Access the `MicroExit` of the given `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category mapping & sequencing\n */\nexport const exit = <A, E, R>(self: Micro<A, E, R>): Micro<MicroExit<A, E>, never, R> =>\n  make(function(env, onExit) {\n    self[runSymbol](env, function(exit) {\n      onExit(exitSucceed(exit))\n    })\n  })\n\n/**\n * Replace the error type of the given `Micro` with the full `MicroCause` object.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const sandbox = <A, E, R>(self: Micro<A, E, R>): Micro<A, MicroCause<E>, R> =>\n  catchAllCause(self, (cause) => fail(cause))\n\nfunction forkSignal(env: Env<any>) {\n  const controller = new AbortController()\n  const parentSignal = envGet(env, currentAbortSignal)\n  function onAbort() {\n    controller.abort()\n    parentSignal.removeEventListener(\"abort\", onAbort)\n  }\n  parentSignal.addEventListener(\"abort\", onAbort)\n  const envWithSignal = envMutate(env, function(refs) {\n    refs[currentAbortController.key] = controller\n    refs[currentAbortSignal.key] = controller.signal\n    return refs\n  })\n  return [envWithSignal, onAbort] as const\n}\n\n/**\n * Returns an effect that races all the specified effects,\n * yielding the value of the first effect to succeed with a value. Losers of\n * the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nexport const raceAll = <Eff extends Micro<any, any, any>>(\n  all: Iterable<Eff>\n): Micro<Micro.Success<Eff>, Micro.Error<Eff>, Micro.Context<Eff>> =>\n  make(function(env, onExit) {\n    const [envWithSignal, onAbort] = forkSignal(env)\n\n    const effects = Array.from(all)\n    let len = effects.length\n    let index = 0\n    let done = 0\n    let exit: MicroExit<any, any> | undefined = undefined\n    const causes: Array<MicroCause<any>> = []\n    function onDone(exit_: MicroExit<any, any>) {\n      done++\n      if (exit_._tag === \"Right\" && exit === undefined) {\n        len = index\n        exit = exit_\n        onAbort()\n      } else if (exit_._tag === \"Left\") {\n        causes.push(exit_.left)\n      }\n      if (done >= len) {\n        onExit(exit ?? Either.left(causes[0]))\n      }\n    }\n\n    for (; index < len; index++) {\n      effects[index][runSymbol](envWithSignal, onDone)\n    }\n  })\n\n/**\n * Returns an effect that races all the specified effects,\n * yielding the value of the first effect to succeed or fail. Losers of\n * the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nexport const raceAllFirst = <Eff extends Micro<any, any, any>>(\n  all: Iterable<Eff>\n): Micro<Micro.Success<Eff>, Micro.Error<Eff>, Micro.Context<Eff>> =>\n  make(function(env, onExit) {\n    const [envWithSignal, onAbort] = forkSignal(env)\n\n    const effects = Array.from(all)\n    let len = effects.length\n    let index = 0\n    let done = 0\n    let exit: MicroExit<any, any> | undefined = undefined\n    const causes: Array<MicroCause<any>> = []\n    function onDone(exit_: MicroExit<any, any>) {\n      done++\n      if (exit === undefined) {\n        len = index\n        exit = exit_\n        onAbort()\n      }\n      if (done >= len) {\n        onExit(exit ?? Either.left(causes[0]))\n      }\n    }\n\n    for (; index < len; index++) {\n      effects[index][runSymbol](envWithSignal, onDone)\n    }\n  })\n\n/**\n * Returns an effect that races two effects, yielding the value of the first\n * effect to succeed. Losers of the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nexport const race: {\n  /**\n   * Returns an effect that races two effects, yielding the value of the first\n   * effect to succeed. Losers of the race will be interrupted immediately\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category sequencing\n   */\n  <A2, E2, R2>(that: Micro<A2, E2, R2>): <A, E, R>(self: Micro<A, E, R>) => Micro<A | A2, E | E2, R | R2>\n  /**\n   * Returns an effect that races two effects, yielding the value of the first\n   * effect to succeed. Losers of the race will be interrupted immediately\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category sequencing\n   */\n  <A, E, R, A2, E2, R2>(self: Micro<A, E, R>, that: Micro<A2, E2, R2>): Micro<A | A2, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2>(self: Micro<A, E, R>, that: Micro<A2, E2, R2>): Micro<A | A2, E | E2, R | R2> =>\n    raceAll([self, that])\n)\n\n/**\n * Returns an effect that races two effects, yielding the value of the first\n * effect to succeed *or* fail. Losers of the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nexport const raceFirst: {\n  /**\n   * Returns an effect that races two effects, yielding the value of the first\n   * effect to succeed *or* fail. Losers of the race will be interrupted immediately\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category sequencing\n   */\n  <A2, E2, R2>(that: Micro<A2, E2, R2>): <A, E, R>(self: Micro<A, E, R>) => Micro<A | A2, E | E2, R | R2>\n  /**\n   * Returns an effect that races two effects, yielding the value of the first\n   * effect to succeed *or* fail. Losers of the race will be interrupted immediately\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category sequencing\n   */\n  <A, E, R, A2, E2, R2>(self: Micro<A, E, R>, that: Micro<A2, E2, R2>): Micro<A | A2, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2>(self: Micro<A, E, R>, that: Micro<A2, E2, R2>): Micro<A | A2, E | E2, R | R2> =>\n    raceAllFirst([self, that])\n)\n\n// ----------------------------------------------------------------------------\n// zipping\n// ----------------------------------------------------------------------------\n\n/**\n * Combine two `Micro` effects into a single effect that produces a tuple of\n * their results.\n *\n * @since 3.4.0\n * @experimental\n * @category zipping\n */\nexport const zip: {\n  // ----------------------------------------------------------------------------\n  // zipping\n  // ----------------------------------------------------------------------------\n\n  /**\n   * Combine two `Micro` effects into a single effect that produces a tuple of\n   * their results.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category zipping\n   */\n  <A2, E2, R2>(\n    that: Micro<A2, E2, R2>,\n    options?:\n      | { readonly concurrent?: boolean | undefined }\n      | undefined\n  ): <A, E, R>(self: Micro<A, E, R>) => Micro<[A, A2], E2 | E, R2 | R>\n  // ----------------------------------------------------------------------------\n  // zipping\n  // ----------------------------------------------------------------------------\n\n  /**\n   * Combine two `Micro` effects into a single effect that produces a tuple of\n   * their results.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category zipping\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Micro<A, E, R>,\n    that: Micro<A2, E2, R2>,\n    options?: { readonly concurrent?: boolean | undefined }\n  ): Micro<[A, A2], E | E2, R | R2>\n} = dual((args) => isMicro(args[1]), <A, E, R, A2, E2, R2>(\n  self: Micro<A, E, R>,\n  that: Micro<A2, E2, R2>,\n  options?: { readonly concurrent?: boolean | undefined }\n): Micro<[A, A2], E | E2, R | R2> => zipWith(self, that, (a, a2) => [a, a2], options))\n\n/**\n * The `Micro.zipWith` function combines two `Micro` effects and allows you to\n * apply a function to the results of the combined effects, transforming them\n * into a single value.\n *\n * @since 3.4.3\n * @experimental\n * @category zipping\n */\nexport const zipWith: {\n  /**\n   * The `Micro.zipWith` function combines two `Micro` effects and allows you to\n   * apply a function to the results of the combined effects, transforming them\n   * into a single value.\n   *\n   * @since 3.4.3\n   * @experimental\n   * @category zipping\n   */\n  <A2, E2, R2, A, B>(\n    that: Micro<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: { readonly concurrent?: boolean | undefined }\n  ): <E, R>(self: Micro<A, E, R>) => Micro<B, E2 | E, R2 | R>\n  /**\n   * The `Micro.zipWith` function combines two `Micro` effects and allows you to\n   * apply a function to the results of the combined effects, transforming them\n   * into a single value.\n   *\n   * @since 3.4.3\n   * @experimental\n   * @category zipping\n   */\n  <A, E, R, A2, E2, R2, B>(\n    self: Micro<A, E, R>,\n    that: Micro<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: { readonly concurrent?: boolean | undefined }\n  ): Micro<B, E2 | E, R2 | R>\n} = dual((args) => isMicro(args[1]), <A, E, R, A2, E2, R2, B>(\n  self: Micro<A, E, R>,\n  that: Micro<A2, E2, R2>,\n  f: (a: A, b: A2) => B,\n  options?: { readonly concurrent?: boolean | undefined }\n): Micro<B, E2 | E, R2 | R> => {\n  if (options?.concurrent) {\n    // Use `all` exclusively for concurrent cases, as it introduces additional overhead due to the management of concurrency\n    return map(all([self, that], { concurrency: \"unbounded\" }), ([a, a2]) => f(a, a2))\n  }\n  return flatMap(self, (a) => map(that, (a2) => f(a, a2)))\n})\n\n// ----------------------------------------------------------------------------\n// filtering & conditionals\n// ----------------------------------------------------------------------------\n\n/**\n * Filter the specified effect with the provided function, failing with specified\n * `MicroCause` if the predicate fails.\n *\n * In addition to the filtering capabilities discussed earlier, you have the option to further\n * refine and narrow down the type of the success channel by providing a\n *\n * @since 3.4.0\n * @experimental\n * @category filtering & conditionals\n */\nexport const filterOrFailCause: {\n  // ----------------------------------------------------------------------------\n  // filtering & conditionals\n  // ----------------------------------------------------------------------------\n\n  /**\n   * Filter the specified effect with the provided function, failing with specified\n   * `MicroCause` if the predicate fails.\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the option to further\n   * refine and narrow down the type of the success channel by providing a\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category filtering & conditionals\n   */\n  <A, B extends A, E2>(\n    refinement: Refinement<A, B>,\n    orFailWith: (a: NoInfer<A>) => MicroCause<E2>\n  ): <E, R>(self: Micro<A, E, R>) => Micro<B, E2 | E, R>\n  // ----------------------------------------------------------------------------\n  // filtering & conditionals\n  // ----------------------------------------------------------------------------\n\n  /**\n   * Filter the specified effect with the provided function, failing with specified\n   * `MicroCause` if the predicate fails.\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the option to further\n   * refine and narrow down the type of the success channel by providing a\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category filtering & conditionals\n   */\n  <A, E2>(\n    predicate: Predicate<NoInfer<A>>,\n    orFailWith: (a: NoInfer<A>) => MicroCause<E2>\n  ): <E, R>(self: Micro<A, E, R>) => Micro<A, E2 | E, R>\n  // ----------------------------------------------------------------------------\n  // filtering & conditionals\n  // ----------------------------------------------------------------------------\n\n  /**\n   * Filter the specified effect with the provided function, failing with specified\n   * `MicroCause` if the predicate fails.\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the option to further\n   * refine and narrow down the type of the success channel by providing a\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category filtering & conditionals\n   */\n  <A, E, R, B extends A, E2>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<A, B>,\n    orFailWith: (a: A) => MicroCause<E2>\n  ): Micro<B, E | E2, R>\n  // ----------------------------------------------------------------------------\n  // filtering & conditionals\n  // ----------------------------------------------------------------------------\n\n  /**\n   * Filter the specified effect with the provided function, failing with specified\n   * `MicroCause` if the predicate fails.\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the option to further\n   * refine and narrow down the type of the success channel by providing a\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category filtering & conditionals\n   */\n  <A, E, R, E2>(\n    self: Micro<A, E, R>,\n    predicate: Predicate<A>,\n    orFailWith: (a: A) => MicroCause<E2>\n  ): Micro<A, E | E2, R>\n} = dual((args) => isMicro(args[0]), <A, E, R, B extends A, E2>(\n  self: Micro<A, E, R>,\n  refinement: Refinement<A, B>,\n  orFailWith: (a: A) => MicroCause<E2>\n): Micro<B, E | E2, R> => flatMap(self, (a) => refinement(a) ? succeed(a) : failCause(orFailWith(a))))\n\n/**\n * Filter the specified effect with the provided function, failing with specified\n * error if the predicate fails.\n *\n * In addition to the filtering capabilities discussed earlier, you have the option to further\n * refine and narrow down the type of the success channel by providing a\n *\n * @since 3.4.0\n * @experimental\n * @category filtering & conditionals\n */\nexport const filterOrFail: {\n  /**\n   * Filter the specified effect with the provided function, failing with specified\n   * error if the predicate fails.\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the option to further\n   * refine and narrow down the type of the success channel by providing a\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category filtering & conditionals\n   */\n  <A, B extends A, E2>(\n    refinement: Refinement<A, B>,\n    orFailWith: (a: NoInfer<A>) => E2\n  ): <E, R>(self: Micro<A, E, R>) => Micro<B, E2 | E, R>\n  /**\n   * Filter the specified effect with the provided function, failing with specified\n   * error if the predicate fails.\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the option to further\n   * refine and narrow down the type of the success channel by providing a\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category filtering & conditionals\n   */\n  <A, E2>(\n    predicate: Predicate<NoInfer<A>>,\n    orFailWith: (a: NoInfer<A>) => E2\n  ): <E, R>(self: Micro<A, E, R>) => Micro<A, E2 | E, R>\n  /**\n   * Filter the specified effect with the provided function, failing with specified\n   * error if the predicate fails.\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the option to further\n   * refine and narrow down the type of the success channel by providing a\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category filtering & conditionals\n   */\n  <A, E, R, B extends A, E2>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<A, B>,\n    orFailWith: (a: A) => E2\n  ): Micro<B, E | E2, R>\n  /**\n   * Filter the specified effect with the provided function, failing with specified\n   * error if the predicate fails.\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the option to further\n   * refine and narrow down the type of the success channel by providing a\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category filtering & conditionals\n   */\n  <A, E, R, E2>(self: Micro<A, E, R>, predicate: Predicate<A>, orFailWith: (a: A) => E2): Micro<A, E | E2, R>\n} = dual((args) => isMicro(args[0]), <A, E, R, B extends A, E2>(\n  self: Micro<A, E, R>,\n  refinement: Refinement<A, B>,\n  orFailWith: (a: A) => E2\n): Micro<B, E | E2, R> => flatMap(self, (a) => refinement(a) ? succeed(a) : fail(orFailWith(a))))\n\n/**\n * The moral equivalent of `if (p) exp`.\n *\n * @since 3.4.0\n * @experimental\n * @category filtering & conditionals\n */\nexport const when: {\n  /**\n   * The moral equivalent of `if (p) exp`.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category filtering & conditionals\n   */\n  <E2 = never, R2 = never>(\n    condition: LazyArg<boolean> | Micro<boolean, E2, R2>\n  ): <A, E, R>(self: Micro<A, E, R>) => Micro<Option.Option<A>, E | E2, R | R2>\n  /**\n   * The moral equivalent of `if (p) exp`.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category filtering & conditionals\n   */\n  <A, E, R, E2 = never, R2 = never>(\n    self: Micro<A, E, R>,\n    condition: LazyArg<boolean> | Micro<boolean, E2, R2>\n  ): Micro<Option.Option<A>, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, E2 = never, R2 = never>(\n    self: Micro<A, E, R>,\n    condition: LazyArg<boolean> | Micro<boolean, E2, R2>\n  ): Micro<Option.Option<A>, E | E2, R | R2> =>\n    flatMap(isMicro(condition) ? condition : sync(condition), (pass) => pass ? asSome(self) : succeed(Option.none()))\n)\n\n// ----------------------------------------------------------------------------\n// repetition\n// ----------------------------------------------------------------------------\n\n/**\n * Repeat the given `Micro` using the provided options.\n *\n * The `while` predicate will be checked after each iteration, and can use the\n * fall `MicroExit` of the effect to determine if the repetition should continue.\n *\n * @since 3.4.6\n * @experimental\n * @category repetition\n */\nexport const repeatExit: {\n  // ----------------------------------------------------------------------------\n  // repetition\n  // ----------------------------------------------------------------------------\n\n  /**\n   * Repeat the given `Micro` using the provided options.\n   *\n   * The `while` predicate will be checked after each iteration, and can use the\n   * fall `MicroExit` of the effect to determine if the repetition should continue.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category repetition\n   */\n  <A, E>(\n    options: {\n      while: Predicate<MicroExit<A, E>>\n      times?: number | undefined\n      schedule?: MicroSchedule | undefined\n    }\n  ): <R>(self: Micro<A, E, R>) => Micro<A, E, R>\n  // ----------------------------------------------------------------------------\n  // repetition\n  // ----------------------------------------------------------------------------\n\n  /**\n   * Repeat the given `Micro` using the provided options.\n   *\n   * The `while` predicate will be checked after each iteration, and can use the\n   * fall `MicroExit` of the effect to determine if the repetition should continue.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category repetition\n   */\n  <A, E, R>(\n    self: Micro<A, E, R>,\n    options: {\n      while: Predicate<MicroExit<A, E>>\n      times?: number | undefined\n      schedule?: MicroSchedule | undefined\n    }\n  ): Micro<A, E, R>\n} = dual(2, <A, E, R>(self: Micro<A, E, R>, options: {\n  while: Predicate<MicroExit<A, E>>\n  times?: number | undefined\n  schedule?: MicroSchedule | undefined\n}): Micro<A, E, R> =>\n  make(function(env, onExit) {\n    const startedAt = options.schedule ? Date.now() : 0\n    let attempt = 0\n    self[runSymbol](env, function loop(exit) {\n      if (options.while !== undefined && !options.while(exit)) {\n        return onExit(exit)\n      } else if (options.times !== undefined && attempt >= options.times) {\n        return onExit(exit)\n      }\n      attempt++\n      let delayEffect = yieldNow\n      if (options.schedule !== undefined) {\n        const elapsed = Date.now() - startedAt\n        const duration = options.schedule(attempt, elapsed)\n        if (Option.isNone(duration)) {\n          return onExit(exit)\n        }\n        delayEffect = sleep(duration.value)\n      }\n      delayEffect[runSymbol](env, function(exit) {\n        if (exit._tag === \"Left\") {\n          return onExit(exit as MicroExit<never, never>)\n        }\n        self[runSymbol](env, loop)\n      })\n    })\n  }))\n\n/**\n * Repeat the given `Micro` effect using the provided options. Only successful\n * results will be repeated.\n *\n * @since 3.4.0\n * @experimental\n * @category repetition\n */\nexport const repeat: {\n  /**\n   * Repeat the given `Micro` effect using the provided options. Only successful\n   * results will be repeated.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category repetition\n   */\n  <A, E>(\n    options?: {\n      while?: Predicate<A> | undefined\n      times?: number | undefined\n      schedule?: MicroSchedule | undefined\n    } | undefined\n  ): <R>(self: Micro<A, E, R>) => Micro<A, E, R>\n  /**\n   * Repeat the given `Micro` effect using the provided options. Only successful\n   * results will be repeated.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category repetition\n   */\n  <A, E, R>(\n    self: Micro<A, E, R>,\n    options?: {\n      while?: Predicate<A> | undefined\n      times?: number | undefined\n      schedule?: MicroSchedule | undefined\n    } | undefined\n  ): Micro<A, E, R>\n} = dual((args) => isMicro(args[0]), <A, E, R>(\n  self: Micro<A, E, R>,\n  options?: {\n    while?: Predicate<A> | undefined\n    times?: number | undefined\n    schedule?: MicroSchedule | undefined\n  } | undefined\n): Micro<A, E, R> =>\n  repeatExit(self, {\n    ...options,\n    while: (exit) => exit._tag === \"Right\" && (options?.while === undefined || options.while(exit.right))\n  }))\n\n/**\n * Repeat the given `Micro` effect forever, only stopping if the effect fails.\n *\n * @since 3.4.0\n * @experimental\n * @category repetition\n */\nexport const forever = <A, E, R>(self: Micro<A, E, R>): Micro<never, E, R> => repeat(self) as any\n\n// ----------------------------------------------------------------------------\n// scheduling\n// ----------------------------------------------------------------------------\n\n/**\n * The `MicroSchedule` type represents a function that can be used to calculate\n * the delay between repeats.\n *\n * The function takes the current attempt number and the elapsed time since the\n * first attempt, and returns the delay for the next attempt. If the function\n * returns `None`, the repetition will stop.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport type MicroSchedule = (attempt: number, elapsed: number) => Option.Option<number>\n\n/**\n * Create a `MicroSchedule` that will stop repeating after the specified number\n * of attempts.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleRecurs = (n: number): MicroSchedule => (attempt) => attempt <= n ? Option.some(0) : Option.none()\n\n/**\n * Create a `MicroSchedule` that will generate a constant delay.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleSpaced = (millis: number): MicroSchedule => () => Option.some(millis)\n\n/**\n * Create a `MicroSchedule` that will generate a delay with an exponential backoff.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleExponential = (baseMillis: number, factor = 2): MicroSchedule => (attempt) =>\n  Option.some(Math.pow(factor, attempt) * baseMillis)\n\n/**\n * Returns a new `MicroSchedule` with an added calculated delay to each delay\n * returned by this schedule.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleAddDelay: {\n  /**\n   * Returns a new `MicroSchedule` with an added calculated delay to each delay\n   * returned by this schedule.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category scheduling\n   */\n  (f: () => number): (self: MicroSchedule) => MicroSchedule\n  /**\n   * Returns a new `MicroSchedule` with an added calculated delay to each delay\n   * returned by this schedule.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category scheduling\n   */\n  (self: MicroSchedule, f: () => number): MicroSchedule\n} = dual(\n  2,\n  (self: MicroSchedule, f: () => number): MicroSchedule => (attempt, elapsed) =>\n    Option.map(self(attempt, elapsed), (duration) => duration + f())\n)\n\n/**\n * Transform a `MicroSchedule` to one that will have a delay that will never exceed\n * the specified maximum.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleWithMaxDelay: {\n  /**\n   * Transform a `MicroSchedule` to one that will have a delay that will never exceed\n   * the specified maximum.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category scheduling\n   */\n  (max: number): (self: MicroSchedule) => MicroSchedule\n  /**\n   * Transform a `MicroSchedule` to one that will have a delay that will never exceed\n   * the specified maximum.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category scheduling\n   */\n  (self: MicroSchedule, max: number): MicroSchedule\n} = dual(\n  2,\n  (self: MicroSchedule, max: number): MicroSchedule => (attempt, elapsed) =>\n    Option.map(self(attempt, elapsed), (duration) => Math.min(duration, max))\n)\n\n/**\n * Transform a `MicroSchedule` to one that will stop repeating after the specified\n * amount of time.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleWithMaxElapsed: {\n  /**\n   * Transform a `MicroSchedule` to one that will stop repeating after the specified\n   * amount of time.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category scheduling\n   */\n  (max: number): (self: MicroSchedule) => MicroSchedule\n  /**\n   * Transform a `MicroSchedule` to one that will stop repeating after the specified\n   * amount of time.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category scheduling\n   */\n  (self: MicroSchedule, max: number): MicroSchedule\n} = dual(\n  2,\n  (self: MicroSchedule, max: number): MicroSchedule => (attempt, elapsed) =>\n    elapsed < max ? self(attempt, elapsed) : Option.none()\n)\n\n/**\n * Combines two `MicroSchedule`s, by recurring if either schedule wants to\n * recur, using the minimum of the two durations between recurrences.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleUnion: {\n  /**\n   * Combines two `MicroSchedule`s, by recurring if either schedule wants to\n   * recur, using the minimum of the two durations between recurrences.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category scheduling\n   */\n  (that: MicroSchedule): (self: MicroSchedule) => MicroSchedule\n  /**\n   * Combines two `MicroSchedule`s, by recurring if either schedule wants to\n   * recur, using the minimum of the two durations between recurrences.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category scheduling\n   */\n  (self: MicroSchedule, that: MicroSchedule): MicroSchedule\n} = dual(\n  2,\n  (self: MicroSchedule, that: MicroSchedule): MicroSchedule => (attempt, elapsed) =>\n    Option.zipWith(self(attempt, elapsed), that(attempt, elapsed), (d1, d2) => Math.min(d1, d2))\n)\n\n/**\n * Combines two `MicroSchedule`s, by recurring only if both schedules want to\n * recur, using the maximum of the two durations between recurrences.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleIntersect: {\n  /**\n   * Combines two `MicroSchedule`s, by recurring only if both schedules want to\n   * recur, using the maximum of the two durations between recurrences.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category scheduling\n   */\n  (that: MicroSchedule): (self: MicroSchedule) => MicroSchedule\n  /**\n   * Combines two `MicroSchedule`s, by recurring only if both schedules want to\n   * recur, using the maximum of the two durations between recurrences.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category scheduling\n   */\n  (self: MicroSchedule, that: MicroSchedule): MicroSchedule\n} = dual(\n  2,\n  (self: MicroSchedule, that: MicroSchedule): MicroSchedule => (attempt, elapsed) =>\n    Option.zipWith(self(attempt, elapsed), that(attempt, elapsed), (d1, d2) => Math.max(d1, d2))\n)\n\n// ----------------------------------------------------------------------------\n// error handling\n// ----------------------------------------------------------------------------\n\n/**\n * Catch the full `MicroCause` object of the given `Micro` effect, allowing you to\n * recover from any kind of cause.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const catchAllCause: {\n  // ----------------------------------------------------------------------------\n  // error handling\n  // ----------------------------------------------------------------------------\n\n  /**\n   * Catch the full `MicroCause` object of the given `Micro` effect, allowing you to\n   * recover from any kind of cause.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <E, B, E2, R2>(\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A | B, E2, R | R2>\n  // ----------------------------------------------------------------------------\n  // error handling\n  // ----------------------------------------------------------------------------\n\n  /**\n   * Catch the full `MicroCause` object of the given `Micro` effect, allowing you to\n   * recover from any kind of cause.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): Micro<A | B, E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): Micro<A | B, E2, R | R2> => catchCauseIf(self, constTrue, f) as Micro<A | B, E2, R | R2>\n)\n\n/**\n * Selectively catch a `MicroCause` object of the given `Micro` effect,\n * using the provided predicate to determine if the failure should be caught.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const catchCauseIf: {\n  /**\n   * Selectively catch a `MicroCause` object of the given `Micro` effect,\n   * using the provided predicate to determine if the failure should be caught.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <E, B, E2, R2, EB extends MicroCause<E>>(\n    refinement: Refinement<MicroCause<E>, EB>,\n    f: (cause: EB) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A | B, Exclude<E, MicroCause.Error<EB>> | E2, R | R2>\n  /**\n   * Selectively catch a `MicroCause` object of the given `Micro` effect,\n   * using the provided predicate to determine if the failure should be caught.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <E, B, E2, R2>(\n    predicate: Predicate<MicroCause<NoInfer<E>>>,\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A | B, E | E2, R | R2>\n  /**\n   * Selectively catch a `MicroCause` object of the given `Micro` effect,\n   * using the provided predicate to determine if the failure should be caught.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, B, E2, R2, EB extends MicroCause<E>>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<MicroCause<E>, EB>,\n    f: (cause: EB) => Micro<B, E2, R2>\n  ): Micro<A | B, Exclude<E, MicroCause.Error<EB>> | E2, R | R2>\n  /**\n   * Selectively catch a `MicroCause` object of the given `Micro` effect,\n   * using the provided predicate to determine if the failure should be caught.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    predicate: Predicate<MicroCause<NoInfer<E>>>,\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): Micro<A | B, E | E2, R | R2>\n} = dual(3, <A, E, R, B, E2, R2>(\n  self: Micro<A, E, R>,\n  predicate: Predicate<MicroCause<E>>,\n  f: (cause: MicroCause<E>) => Micro<B, E2, R2>\n): Micro<A | B, E | E2, R | R2> =>\n  make(function(env, onExit) {\n    self[runSymbol](env, function(exit) {\n      if (exit._tag === \"Right\" || !predicate(exit.left)) {\n        onExit(exit)\n      } else {\n        f(exit.left)[runSymbol](env, onExit)\n      }\n    })\n  }))\n\n/**\n * Catch the error of the given `Micro` effect, allowing you to recover from it.\n *\n * It only catches expected (`MicroCause.Fail`) errors.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const catchAll: {\n  /**\n   * Catch the error of the given `Micro` effect, allowing you to recover from it.\n   *\n   * It only catches expected (`MicroCause.Fail`) errors.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <E, B, E2, R2>(f: (e: NoInfer<E>) => Micro<B, E2, R2>): <A, R>(self: Micro<A, E, R>) => Micro<A | B, E2, R | R2>\n  /**\n   * Catch the error of the given `Micro` effect, allowing you to recover from it.\n   *\n   * It only catches expected (`MicroCause.Fail`) errors.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (e: NoInfer<E>) => Micro<B, E2, R2>): Micro<A | B, E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    f: (a: NoInfer<E>) => Micro<B, E2, R2>\n  ): Micro<A | B, E2, R | R2> => catchAllCause(self, (cause) => causeIsFail(cause) ? f(cause.error) : failCause(cause))\n)\n\n/**\n * Catch any unexpected errors of the given `Micro` effect, allowing you to recover from them.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const catchAllDefect: {\n  /**\n   * Catch any unexpected errors of the given `Micro` effect, allowing you to recover from them.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <E, B, E2, R2>(f: (defect: unknown) => Micro<B, E2, R2>): <A, R>(self: Micro<A, E, R>) => Micro<A | B, E | E2, R | R2>\n  /**\n   * Catch any unexpected errors of the given `Micro` effect, allowing you to recover from them.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (defect: unknown) => Micro<B, E2, R2>): Micro<A | B, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (defect: unknown) => Micro<B, E2, R2>): Micro<A | B, E | E2, R | R2> =>\n    catchCauseIf(self, causeIsDie, (die) => f(die.defect))\n)\n\n/**\n * Perform a side effect using the full `MicroCause` object of the given `Micro`.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const tapErrorCause: {\n  /**\n   * Perform a side effect using the full `MicroCause` object of the given `Micro`.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <E, B, E2, R2>(\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A, E | E2, R | R2>\n  /**\n   * Perform a side effect using the full `MicroCause` object of the given `Micro`.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): Micro<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    f: (cause: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): Micro<A, E | E2, R | R2> => tapErrorCauseIf(self, constTrue, f)\n)\n\n/**\n * Perform a side effect using if a `MicroCause` object matches the specified\n * predicate.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const tapErrorCauseIf: {\n  /**\n   * Perform a side effect using if a `MicroCause` object matches the specified\n   * predicate.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <E, B, E2, R2, EB extends MicroCause<E>>(\n    refinement: Refinement<MicroCause<E>, EB>,\n    f: (a: EB) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A, E | E2, R | R2>\n  /**\n   * Perform a side effect using if a `MicroCause` object matches the specified\n   * predicate.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <E, B, E2, R2>(\n    predicate: (cause: NoInfer<MicroCause<E>>) => boolean,\n    f: (a: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A, E | E2, R | R2>\n  /**\n   * Perform a side effect using if a `MicroCause` object matches the specified\n   * predicate.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, B, E2, R2, EB extends MicroCause<E>>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<MicroCause<E>, EB>,\n    f: (a: EB) => Micro<B, E2, R2>\n  ): Micro<A, E | E2, R | R2>\n  /**\n   * Perform a side effect using if a `MicroCause` object matches the specified\n   * predicate.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, B, E2, R2>(\n    self: Micro<A, E, R>,\n    predicate: (cause: NoInfer<MicroCause<E>>) => boolean,\n    f: (a: NoInfer<MicroCause<E>>) => Micro<B, E2, R2>\n  ): Micro<A, E | E2, R | R2>\n} = dual(\n  3,\n  <A, E, R, B, E2, R2, EB extends MicroCause<E>>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<MicroCause<E>, EB>,\n    f: (a: EB) => Micro<B, E2, R2>\n  ): Micro<A, E | E2, R | R2> => catchCauseIf(self, refinement, (cause) => andThen(f(cause), failCause(cause)))\n)\n\n/**\n * Perform a side effect from expected errors of the given `Micro`.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const tapError: {\n  /**\n   * Perform a side effect from expected errors of the given `Micro`.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <E, B, E2, R2>(f: (e: NoInfer<E>) => Micro<B, E2, R2>): <A, R>(self: Micro<A, E, R>) => Micro<A, E | E2, R | R2>\n  /**\n   * Perform a side effect from expected errors of the given `Micro`.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (e: NoInfer<E>) => Micro<B, E2, R2>): Micro<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (e: NoInfer<E>) => Micro<B, E2, R2>): Micro<A, E | E2, R | R2> =>\n    tapErrorCauseIf(self, causeIsFail, (fail) => f(fail.error))\n)\n\n/**\n * Perform a side effect from unexpected errors of the given `Micro`.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const tapDefect: {\n  /**\n   * Perform a side effect from unexpected errors of the given `Micro`.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <E, B, E2, R2>(f: (defect: unknown) => Micro<B, E2, R2>): <A, R>(self: Micro<A, E, R>) => Micro<A, E | E2, R | R2>\n  /**\n   * Perform a side effect from unexpected errors of the given `Micro`.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (defect: unknown) => Micro<B, E2, R2>): Micro<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, B, E2, R2>(self: Micro<A, E, R>, f: (defect: unknown) => Micro<B, E2, R2>): Micro<A, E | E2, R | R2> =>\n    tapErrorCauseIf(self, causeIsDie, (die) => f(die.defect))\n)\n\n/**\n * Catch any expected errors that match the specified predicate.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const catchIf: {\n  /**\n   * Catch any expected errors that match the specified predicate.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <E, EB extends E, A2, E2, R2>(\n    refinement: Refinement<NoInfer<E>, EB>,\n    f: (e: EB) => Micro<A2, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A2 | A, E2 | Exclude<E, EB>, R2 | R>\n  /**\n   * Catch any expected errors that match the specified predicate.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <E, A2, E2, R2>(\n    predicate: Predicate<NoInfer<E>>,\n    f: (e: NoInfer<E>) => Micro<A2, E2, R2>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A2 | A, E | E2, R2 | R>\n  /**\n   * Catch any expected errors that match the specified predicate.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, EB extends E, A2, E2, R2>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<E, EB>,\n    f: (e: EB) => Micro<A2, E2, R2>\n  ): Micro<A | A2, E2 | Exclude<E, EB>, R | R2>\n  /**\n   * Catch any expected errors that match the specified predicate.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Micro<A, E, R>,\n    predicate: Predicate<E>,\n    f: (e: E) => Micro<A2, E2, R2>\n  ): Micro<A | A2, E | E2, R | R2>\n} = dual(\n  3,\n  <A, E, R, A2, E2, R2>(\n    self: Micro<A, E, R>,\n    predicate: Predicate<E>,\n    f: (e: E) => Micro<A2, E2, R2>\n  ): Micro<A | A2, E | E2, R | R2> =>\n    catchCauseIf(\n      self,\n      (f): f is MicroCause.Fail<E> => causeIsFail(f) && predicate(f.error),\n      (fail) => f(fail.error)\n    )\n)\n\n/**\n * Recovers from the specified tagged error.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const catchTag: {\n  /**\n   * Recovers from the specified tagged error.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <K extends E extends { _tag: string } ? E[\"_tag\"] : never, E, A1, E1, R1>(\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Micro<A1, E1, R1>\n  ): <A, R>(self: Micro<A, E, R>) => Micro<A1 | A, E1 | Exclude<E, { _tag: K }>, R1 | R>\n  /**\n   * Recovers from the specified tagged error.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, K extends E extends { _tag: string } ? E[\"_tag\"] : never, R1, E1, A1>(\n    self: Micro<A, E, R>,\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Micro<A1, E1, R1>\n  ): Micro<A | A1, E1 | Exclude<E, { _tag: K }>, R | R1>\n} = dual(3, <A, E, R, K extends E extends { _tag: string } ? E[\"_tag\"] : never, R1, E1, A1>(\n  self: Micro<A, E, R>,\n  k: K,\n  f: (e: Extract<E, { _tag: K }>) => Micro<A1, E1, R1>\n): Micro<A | A1, E1 | Exclude<E, { _tag: K }>, R | R1> =>\n  catchIf(self, isTagged(k) as Refinement<E, Extract<E, { _tag: K }>>, f) as any)\n\n/**\n * Transform the full `MicroCause` object of the given `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const mapErrorCause: {\n  /**\n   * Transform the full `MicroCause` object of the given `Micro` effect.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <E, E2>(f: (e: MicroCause<E>) => MicroCause<E2>): <A, R>(self: Micro<A, E, R>) => Micro<A, E2, R>\n  /**\n   * Transform the full `MicroCause` object of the given `Micro` effect.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, E2>(self: Micro<A, E, R>, f: (e: MicroCause<E>) => MicroCause<E2>): Micro<A, E2, R>\n} = dual(\n  2,\n  <A, E, R, E2>(self: Micro<A, E, R>, f: (e: MicroCause<E>) => MicroCause<E2>): Micro<A, E2, R> =>\n    catchAllCause(self, (cause) => failCause(f(cause)))\n)\n\n/**\n * Transform any expected errors of the given `Micro` effect.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const mapError: {\n  /**\n   * Transform any expected errors of the given `Micro` effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <E, E2>(f: (e: E) => E2): <A, R>(self: Micro<A, E, R>) => Micro<A, E2, R>\n  /**\n   * Transform any expected errors of the given `Micro` effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, E2>(self: Micro<A, E, R>, f: (e: E) => E2): Micro<A, E2, R>\n} = dual(\n  2,\n  <A, E, R, E2>(self: Micro<A, E, R>, f: (e: E) => E2): Micro<A, E2, R> => catchAll(self, (error) => fail(f(error)))\n)\n\n/**\n * Elevate any expected errors of the given `Micro` effect to unexpected errors,\n * resulting in an error type of `never`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const orDie = <A, E, R>(self: Micro<A, E, R>): Micro<A, never, R> => catchAll(self, die)\n\n/**\n * Recover from all errors by succeeding with the given value.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const orElseSucceed: {\n  /**\n   * Recover from all errors by succeeding with the given value.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <B>(f: LazyArg<B>): <A, E, R>(self: Micro<A, E, R>) => Micro<A | B, never, R>\n  /**\n   * Recover from all errors by succeeding with the given value.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R, B>(self: Micro<A, E, R>, f: LazyArg<B>): Micro<A | B, never, R>\n} = dual(\n  2,\n  <A, E, R, B>(self: Micro<A, E, R>, f: LazyArg<B>): Micro<A | B, never, R> => catchAll(self, (_) => sync(f))\n)\n\n/**\n * Ignore any expected errors of the given `Micro` effect, returning `void`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const ignore = <A, E, R>(self: Micro<A, E, R>): Micro<void, never, R> =>\n  matchEffect(self, { onFailure: (_) => void_, onSuccess: (_) => void_ })\n\n/**\n * Ignore any expected errors of the given `Micro` effect, returning `void`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const ignoreLogged = <A, E, R>(self: Micro<A, E, R>): Micro<void, never, R> =>\n  matchEffect(self, {\n    // eslint-disable-next-line no-console\n    onFailure: (error) => sync(() => console.error(error)),\n    onSuccess: (_) => void_\n  })\n\n/**\n * Replace the success value of the given `Micro` effect with an `Option`,\n * wrapping the success value in `Some` and returning `None` if the effect fails\n * with an expected error.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const option = <A, E, R>(self: Micro<A, E, R>): Micro<Option.Option<A>, never, R> =>\n  match(self, { onFailure: (_) => Option.none(), onSuccess: Option.some })\n\n/**\n * Replace the success value of the given `Micro` effect with an `Either`,\n * wrapping the success value in `Right` and wrapping any expected errors with\n * a `Left`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const either = <A, E, R>(self: Micro<A, E, R>): Micro<Either.Either<A, E>, never, R> =>\n  match(self, { onFailure: Either.left, onSuccess: Either.right })\n\n/**\n * Retry the given `Micro` effect using the provided options.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const retry: {\n  /**\n   * Retry the given `Micro` effect using the provided options.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <A, E>(\n    options?: {\n      while?: Predicate<E> | undefined\n      times?: number | undefined\n      schedule?: MicroSchedule | undefined\n    } | undefined\n  ): <R>(self: Micro<A, E, R>) => Micro<A, E, R>\n  /**\n   * Retry the given `Micro` effect using the provided options.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R>(\n    self: Micro<A, E, R>,\n    options?: {\n      while?: Predicate<E> | undefined\n      times?: number | undefined\n      schedule?: MicroSchedule | undefined\n    } | undefined\n  ): Micro<A, E, R>\n} = dual((args) => isMicro(args[0]), <A, E, R>(\n  self: Micro<A, E, R>,\n  options?: {\n    while?: Predicate<E> | undefined\n    times?: number | undefined\n    schedule?: MicroSchedule | undefined\n  } | undefined\n): Micro<A, E, R> =>\n  repeatExit(self, {\n    ...options,\n    while: (exit) =>\n      exit._tag === \"Left\" && exit.left._tag === \"Fail\" &&\n      (options?.while === undefined || options.while(exit.left.error))\n  }))\n\n/**\n * Add a stack trace to any failures that occur in the effect. The trace will be\n * added to the `traces` field of the `MicroCause` object.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const withTrace: {\n  /**\n   * Add a stack trace to any failures that occur in the effect. The trace will be\n   * added to the `traces` field of the `MicroCause` object.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  (name: string): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E, R>\n  /**\n   * Add a stack trace to any failures that occur in the effect. The trace will be\n   * added to the `traces` field of the `MicroCause` object.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category error handling\n   */\n  <A, E, R>(self: Micro<A, E, R>, name: string): Micro<A, E, R>\n} = function() {\n  const prevLimit = globalThis.Error.stackTraceLimit\n  globalThis.Error.stackTraceLimit = 2\n  const error = new globalThis.Error()\n  globalThis.Error.stackTraceLimit = prevLimit\n  function generate(name: string, cause: MicroCause<any>) {\n    const stack = error.stack\n    if (!stack) {\n      return cause\n    }\n    const line = stack.split(\"\\n\")[2]?.trim().replace(/^at /, \"\")\n    if (!line) {\n      return cause\n    }\n    const lineMatch = line.match(/\\((.*)\\)$/)\n    return causeWithTrace(cause, `at ${name} (${lineMatch ? lineMatch[1] : line})`)\n  }\n  const f = (name: string) => (self: Micro<any, any, any>) =>\n    unsafeMakeOptions(function(env, onExit) {\n      self[runSymbol](env, function(exit) {\n        onExit(exit._tag === \"Left\" ? Either.left(generate(name, exit.left)) : exit)\n      })\n    }, false)\n  if (arguments.length === 2) {\n    return f(arguments[1])(arguments[0])\n  }\n  return f(arguments[0])\n} as any\n\n// ----------------------------------------------------------------------------\n// pattern matching\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.4.6\n * @experimental\n * @category pattern matching\n */\nexport const matchCauseEffect: {\n  // ----------------------------------------------------------------------------\n  // pattern matching\n  // ----------------------------------------------------------------------------\n\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category pattern matching\n   */\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (cause: MicroCause<E>) => Micro<A2, E2, R2>\n      readonly onSuccess: (a: A) => Micro<A3, E3, R3>\n    }\n  ): <R>(self: Micro<A, E, R>) => Micro<A2 | A3, E2 | E3, R2 | R3 | R>\n  // ----------------------------------------------------------------------------\n  // pattern matching\n  // ----------------------------------------------------------------------------\n\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category pattern matching\n   */\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (cause: MicroCause<E>) => Micro<A2, E2, R2>\n      readonly onSuccess: (a: A) => Micro<A3, E3, R3>\n    }\n  ): Micro<A2 | A3, E2 | E3, R2 | R3 | R>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (cause: MicroCause<E>) => Micro<A2, E2, R2>\n      readonly onSuccess: (a: A) => Micro<A3, E3, R3>\n    }\n  ): Micro<A2 | A3, E2 | E3, R2 | R3 | R> =>\n    make(function(env, onExit) {\n      self[runSymbol](env, function(exit) {\n        try {\n          const next = exit._tag === \"Left\" ? options.onFailure(exit.left) : options.onSuccess(exit.right)\n          next[runSymbol](env, onExit)\n        } catch (err) {\n          onExit(exitDie(err))\n        }\n      })\n    })\n)\n\n/**\n * @since 3.4.6\n * @experimental\n * @category pattern matching\n */\nexport const matchCause: {\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category pattern matching\n   */\n  <E, A2, A, A3>(\n    options: {\n      readonly onFailure: (cause: MicroCause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): <R>(self: Micro<A, E, R>) => Micro<A2 | A3, never, R>\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category pattern matching\n   */\n  <A, E, R, A2, A3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (cause: MicroCause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): Micro<A2 | A3, never, R>\n} = dual(\n  2,\n  <A, E, R, A2, A3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (cause: MicroCause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): Micro<A2 | A3, never, R> =>\n    matchCauseEffect(self, {\n      onFailure: (cause) => sync(() => options.onFailure(cause)),\n      onSuccess: (value) => sync(() => options.onSuccess(value))\n    })\n)\n\n/**\n * @since 3.4.6\n * @experimental\n * @category pattern matching\n */\nexport const matchEffect: {\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category pattern matching\n   */\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (e: E) => Micro<A2, E2, R2>\n      readonly onSuccess: (a: A) => Micro<A3, E3, R3>\n    }\n  ): <R>(self: Micro<A, E, R>) => Micro<A2 | A3, E2 | E3, R2 | R3 | R>\n  /**\n   * @since 3.4.6\n   * @experimental\n   * @category pattern matching\n   */\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => Micro<A2, E2, R2>\n      readonly onSuccess: (a: A) => Micro<A3, E3, R3>\n    }\n  ): Micro<A2 | A3, E2 | E3, R2 | R3 | R>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => Micro<A2, E2, R2>\n      readonly onSuccess: (a: A) => Micro<A3, E3, R3>\n    }\n  ): Micro<A2 | A3, E2 | E3, R2 | R3 | R> =>\n    matchCauseEffect(self, {\n      onFailure: (cause) => cause._tag === \"Fail\" ? options.onFailure(cause.error) : failCause(cause),\n      onSuccess: options.onSuccess\n    })\n)\n\n/**\n * @since 3.4.0\n * @experimental\n * @category pattern matching\n */\nexport const match: {\n  /**\n   * @since 3.4.0\n   * @experimental\n   * @category pattern matching\n   */\n  <E, A2, A, A3>(\n    options: {\n      readonly onFailure: (error: E) => A2\n      readonly onSuccess: (value: A) => A3\n    }\n  ): <R>(self: Micro<A, E, R>) => Micro<A2 | A3, never, R>\n  /**\n   * @since 3.4.0\n   * @experimental\n   * @category pattern matching\n   */\n  <A, E, R, A2, A3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (error: E) => A2\n      readonly onSuccess: (value: A) => A3\n    }\n  ): Micro<A2 | A3, never, R>\n} = dual(\n  2,\n  <A, E, R, A2, A3>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly onFailure: (error: E) => A2\n      readonly onSuccess: (value: A) => A3\n    }\n  ): Micro<A2 | A3, never, R> =>\n    matchEffect(self, {\n      onFailure: (error) => sync(() => options.onFailure(error)),\n      onSuccess: (value) => sync(() => options.onSuccess(value))\n    })\n)\n\n// ----------------------------------------------------------------------------\n// delays & timeouts\n// ----------------------------------------------------------------------------\n\n/**\n * Create a `Micro` effect that will sleep for the specified duration.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nexport const sleep = (millis: number): Micro<void> =>\n  async(function(resume) {\n    const timeout = setTimeout(function() {\n      resume(void_)\n    }, millis)\n    return sync(() => {\n      return clearTimeout(timeout)\n    })\n  })\n\n/**\n * Returns an effect that will delay the execution of this effect by the\n * specified duration.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nexport const delay: {\n  /**\n   * Returns an effect that will delay the execution of this effect by the\n   * specified duration.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category delays & timeouts\n   */\n  (millis: number): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E, R>\n  /**\n   * Returns an effect that will delay the execution of this effect by the\n   * specified duration.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category delays & timeouts\n   */\n  <A, E, R>(self: Micro<A, E, R>, millis: number): Micro<A, E, R>\n} = dual(\n  2,\n  <A, E, R>(self: Micro<A, E, R>, millis: number): Micro<A, E, R> => andThen(sleep(millis), self)\n)\n\n/**\n * Returns an effect that will timeout this effect, that will execute the\n * fallback effect if the timeout elapses before the effect has produced a value.\n *\n * If the timeout elapses, the running effect will be safely interrupted.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nexport const timeoutOrElse: {\n  /**\n   * Returns an effect that will timeout this effect, that will execute the\n   * fallback effect if the timeout elapses before the effect has produced a value.\n   *\n   * If the timeout elapses, the running effect will be safely interrupted.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category delays & timeouts\n   */\n  <A2, E2, R2>(\n    options: {\n      readonly duration: number\n      readonly onTimeout: LazyArg<Micro<A2, E2, R2>>\n    }\n  ): <A, E, R>(self: Micro<A, E, R>) => Micro<A | A2, E | E2, R | R2>\n  /**\n   * Returns an effect that will timeout this effect, that will execute the\n   * fallback effect if the timeout elapses before the effect has produced a value.\n   *\n   * If the timeout elapses, the running effect will be safely interrupted.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category delays & timeouts\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Micro<A, E, R>,\n    options: {\n      readonly duration: number\n      readonly onTimeout: LazyArg<Micro<A2, E2, R2>>\n    }\n  ): Micro<A | A2, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, A2, E2, R2>(self: Micro<A, E, R>, options: {\n    readonly duration: number\n    readonly onTimeout: LazyArg<Micro<A2, E2, R2>>\n  }): Micro<A | A2, E | E2, R | R2> =>\n    raceFirst(self, andThen(interruptible(sleep(options.duration)), options.onTimeout))\n)\n\n/**\n * Returns an effect that will timeout this effect, that will fail with a\n * `TimeoutException` if the timeout elapses before the effect has produced a\n * value.\n *\n * If the timeout elapses, the running effect will be safely interrupted.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nexport const timeout: {\n  /**\n   * Returns an effect that will timeout this effect, that will fail with a\n   * `TimeoutException` if the timeout elapses before the effect has produced a\n   * value.\n   *\n   * If the timeout elapses, the running effect will be safely interrupted.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category delays & timeouts\n   */\n  (millis: number): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E | TimeoutException, R>\n  /**\n   * Returns an effect that will timeout this effect, that will fail with a\n   * `TimeoutException` if the timeout elapses before the effect has produced a\n   * value.\n   *\n   * If the timeout elapses, the running effect will be safely interrupted.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category delays & timeouts\n   */\n  <A, E, R>(self: Micro<A, E, R>, millis: number): Micro<A, E | TimeoutException, R>\n} = dual(\n  2,\n  <A, E, R>(self: Micro<A, E, R>, millis: number): Micro<A, E | TimeoutException, R> =>\n    timeoutOrElse(self, { duration: millis, onTimeout: () => fail(new TimeoutException()) })\n)\n\n/**\n * Returns an effect that will timeout this effect, succeeding with a `None`\n * if the timeout elapses before the effect has produced a value; and `Some` of\n * the produced value otherwise.\n *\n * If the timeout elapses, the running effect will be safely interrupted.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nexport const timeoutOption: {\n  /**\n   * Returns an effect that will timeout this effect, succeeding with a `None`\n   * if the timeout elapses before the effect has produced a value; and `Some` of\n   * the produced value otherwise.\n   *\n   * If the timeout elapses, the running effect will be safely interrupted.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category delays & timeouts\n   */\n  (millis: number): <A, E, R>(self: Micro<A, E, R>) => Micro<Option.Option<A>, E, R>\n  /**\n   * Returns an effect that will timeout this effect, succeeding with a `None`\n   * if the timeout elapses before the effect has produced a value; and `Some` of\n   * the produced value otherwise.\n   *\n   * If the timeout elapses, the running effect will be safely interrupted.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category delays & timeouts\n   */\n  <A, E, R>(self: Micro<A, E, R>, millis: number): Micro<Option.Option<A>, E, R>\n} = dual(\n  2,\n  <A, E, R>(self: Micro<A, E, R>, millis: number): Micro<Option.Option<A>, E, R> =>\n    raceFirst(\n      asSome(self),\n      as(interruptible(sleep(millis)), Option.none())\n    )\n)\n\n// ----------------------------------------------------------------------------\n// resources & finalization\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const MicroScopeTypeId: unique symbol = Symbol.for(\"effect/Micro/MicroScope\")\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport type MicroScopeTypeId = typeof MicroScopeTypeId\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport interface MicroScope {\n  readonly [MicroScopeTypeId]: MicroScopeTypeId\n  readonly addFinalizer: (finalizer: (exit: MicroExit<unknown, unknown>) => Micro<void>) => Micro<void>\n  readonly fork: Micro<MicroScope.Closeable>\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport declare namespace MicroScope {\n  /**\n   * @since 3.4.0\n   * @experimental\n   * @category resources & finalization\n   */\n  export interface Closeable extends MicroScope {\n    readonly close: (exit: MicroExit<any, any>) => Micro<void>\n  }\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const MicroScope: Context.Tag<MicroScope, MicroScope> = Context.GenericTag<MicroScope>(\"effect/Micro/MicroScope\")\n\nclass MicroScopeImpl implements MicroScope.Closeable {\n  readonly [MicroScopeTypeId]: MicroScopeTypeId\n  state: {\n    readonly _tag: \"Open\"\n    readonly finalizers: Set<(exit: MicroExit<any, any>) => Micro<void>>\n  } | {\n    readonly _tag: \"Closed\"\n    readonly exit: MicroExit<any, any>\n  } = { _tag: \"Open\", finalizers: new Set() }\n\n  constructor() {\n    this[MicroScopeTypeId] = MicroScopeTypeId\n  }\n\n  unsafeAddFinalizer(finalizer: (exit: MicroExit<any, any>) => Micro<void>): void {\n    if (this.state._tag === \"Open\") {\n      this.state.finalizers.add(finalizer)\n    }\n  }\n  addFinalizer(finalizer: (exit: MicroExit<any, any>) => Micro<void>): Micro<void> {\n    return suspend(() => {\n      if (this.state._tag === \"Open\") {\n        this.state.finalizers.add(finalizer)\n        return void_\n      }\n      return finalizer(this.state.exit)\n    })\n  }\n  unsafeRemoveFinalizer(finalizer: (exit: MicroExit<any, any>) => Micro<void>): void {\n    if (this.state._tag === \"Open\") {\n      this.state.finalizers.delete(finalizer)\n    }\n  }\n  close(microExit: MicroExit<any, any>): Micro<void> {\n    return suspend(() => {\n      if (this.state._tag === \"Open\") {\n        const finalizers = Array.from(this.state.finalizers).reverse()\n        this.state = { _tag: \"Closed\", exit: microExit }\n        return flatMap(\n          forEach(finalizers, (finalizer) => exit(finalizer(microExit))),\n          (exits) => asVoid(fromExit(Either.all(exits)))\n        )\n      }\n      return void_\n    })\n  }\n  get fork() {\n    return sync(() => {\n      const newScope = new MicroScopeImpl()\n      if (this.state._tag === \"Closed\") {\n        newScope.state = this.state\n        return newScope\n      }\n      function fin(exit: MicroExit<any, any>) {\n        return newScope.close(exit)\n      }\n      this.state.finalizers.add(fin)\n      newScope.unsafeAddFinalizer((_) => sync(() => this.unsafeRemoveFinalizer(fin)))\n      return newScope\n    })\n  }\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const scopeMake: Micro<MicroScope.Closeable> = sync(() => new MicroScopeImpl())\n\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const scopeUnsafeMake = (): MicroScope.Closeable => new MicroScopeImpl()\n\n/**\n * Access the current `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const scope: Micro<MicroScope, never, MicroScope> = service(MicroScope)\n\n/**\n * Provide a `MicroScope` to an effect.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const provideScope: {\n  /**\n   * Provide a `MicroScope` to an effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category resources & finalization\n   */\n  (scope: MicroScope): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E, Exclude<R, MicroScope>>\n  /**\n   * Provide a `MicroScope` to an effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category resources & finalization\n   */\n  <A, E, R>(self: Micro<A, E, R>, scope: MicroScope): Micro<A, E, Exclude<R, MicroScope>>\n} = dual(\n  2,\n  <A, E, R>(self: Micro<A, E, R>, scope: MicroScope): Micro<A, E, Exclude<R, MicroScope>> =>\n    provideService(self, MicroScope, scope)\n)\n\n/**\n * Provide a `MicroScope` to the given effect, closing it after the effect has\n * finished executing.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const scoped = <A, E, R>(self: Micro<A, E, R>): Micro<A, E, Exclude<R, MicroScope>> =>\n  suspend(function() {\n    const scope = new MicroScopeImpl()\n    return onExit(provideService(self, MicroScope, scope), (exit) => scope.close(exit))\n  })\n\n/**\n * Create a resource with a cleanup `Micro` effect, ensuring the cleanup is\n * executed when the `MicroScope` is closed.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const acquireRelease = <A, E, R>(\n  acquire: Micro<A, E, R>,\n  release: (a: A, exit: MicroExit<unknown, unknown>) => Micro<void>\n): Micro<A, E, R | MicroScope> =>\n  uninterruptible(flatMap(\n    scope,\n    (scope) => tap(acquire, (a) => scope.addFinalizer((exit) => release(a, exit)))\n  ))\n\n/**\n * Add a finalizer to the current `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const addFinalizer = (\n  finalizer: (exit: MicroExit<unknown, unknown>) => Micro<void>\n): Micro<void, never, MicroScope> => flatMap(scope, (scope) => scope.addFinalizer(finalizer))\n\n/**\n * When the `Micro` effect is completed, run the given finalizer effect with the\n * `MicroExit` of the executed effect.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */\nexport const onExit: {\n  /**\n   * When the `Micro` effect is completed, run the given finalizer effect with the\n   * `MicroExit` of the executed effect.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category resources & finalization\n   */\n  <A, E, XE, XR>(\n    f: (exit: MicroExit<A, E>) => Micro<void, XE, XR>\n  ): <R>(self: Micro<A, E, R>) => Micro<A, E | XE, R | XR>\n  /**\n   * When the `Micro` effect is completed, run the given finalizer effect with the\n   * `MicroExit` of the executed effect.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category resources & finalization\n   */\n  <A, E, R, XE, XR>(self: Micro<A, E, R>, f: (exit: MicroExit<A, E>) => Micro<void, XE, XR>): Micro<A, E | XE, R | XR>\n} = dual(\n  2,\n  <A, E, R, XE, XR>(\n    self: Micro<A, E, R>,\n    f: (exit: MicroExit<A, E>) => Micro<void, XE, XR>\n  ): Micro<A, E | XE, R | XR> => onExitIf(self, constTrue, f)\n)\n\n/**\n * When the `Micro` effect is completed, run the given finalizer effect if it\n * matches the specified predicate.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */\nexport const onExitIf: {\n  /**\n   * When the `Micro` effect is completed, run the given finalizer effect if it\n   * matches the specified predicate.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category resources & finalization\n   */\n  <A, E, XE, XR, B extends MicroExit<A, E>>(\n    refinement: Refinement<MicroExit<A, E>, B>,\n    f: (exit: B) => Micro<void, XE, XR>\n  ): <R>(self: Micro<A, E, R>) => Micro<A, E | XE, R | XR>\n  /**\n   * When the `Micro` effect is completed, run the given finalizer effect if it\n   * matches the specified predicate.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category resources & finalization\n   */\n  <A, E, XE, XR>(\n    predicate: Predicate<MicroExit<NoInfer<A>, NoInfer<E>>>,\n    f: (exit: MicroExit<NoInfer<A>, NoInfer<E>>) => Micro<void, XE, XR>\n  ): <R>(self: Micro<A, E, R>) => Micro<A, E | XE, R | XR>\n  /**\n   * When the `Micro` effect is completed, run the given finalizer effect if it\n   * matches the specified predicate.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category resources & finalization\n   */\n  <A, E, R, XE, XR, B extends MicroExit<A, E>>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<MicroExit<A, E>, B>,\n    f: (exit: B) => Micro<void, XE, XR>\n  ): Micro<A, E | XE, R | XR>\n  /**\n   * When the `Micro` effect is completed, run the given finalizer effect if it\n   * matches the specified predicate.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category resources & finalization\n   */\n  <A, E, R, XE, XR>(\n    self: Micro<A, E, R>,\n    predicate: Predicate<MicroExit<NoInfer<A>, NoInfer<E>>>,\n    f: (exit: MicroExit<NoInfer<A>, NoInfer<E>>) => Micro<void, XE, XR>\n  ): Micro<A, E | XE, R | XR>\n} = dual(\n  3,\n  <A, E, R, XE, XR, B extends MicroExit<A, E>>(\n    self: Micro<A, E, R>,\n    refinement: Refinement<MicroExit<A, E>, B>,\n    f: (exit: B) => Micro<void, XE, XR>\n  ): Micro<A, E | XE, R | XR> =>\n    uninterruptibleMask((restore) =>\n      make(function(env, onExit) {\n        restore(self)[runSymbol](env, function(exit) {\n          if (!refinement(exit)) {\n            return onExit(exit)\n          }\n          f(exit)[runSymbol](env, function(finalizerExit) {\n            if (finalizerExit._tag === \"Left\") {\n              return onExit(finalizerExit as MicroExit<never, XE>)\n            }\n            onExit(exit)\n          })\n        })\n      })\n    )\n)\n\n/**\n * Regardless of the result of the this `Micro` effect, run the finalizer effect.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const ensuring: {\n  /**\n   * Regardless of the result of the this `Micro` effect, run the finalizer effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category resources & finalization\n   */\n  <XE, XR>(finalizer: Micro<void, XE, XR>): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E | XE, R | XR>\n  /**\n   * Regardless of the result of the this `Micro` effect, run the finalizer effect.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category resources & finalization\n   */\n  <A, E, R, XE, XR>(self: Micro<A, E, R>, finalizer: Micro<void, XE, XR>): Micro<A, E | XE, R | XR>\n} = dual(\n  2,\n  <A, E, R, XE, XR>(self: Micro<A, E, R>, finalizer: Micro<void, XE, XR>): Micro<A, E | XE, R | XR> =>\n    onExit(self, (_) => finalizer)\n)\n\n/**\n * When the `Micro` effect fails, run the given finalizer effect with the\n * `MicroCause` of the executed effect.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */\nexport const onError: {\n  /**\n   * When the `Micro` effect fails, run the given finalizer effect with the\n   * `MicroCause` of the executed effect.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category resources & finalization\n   */\n  <A, E, XE, XR>(\n    f: (cause: MicroCause<NoInfer<E>>) => Micro<void, XE, XR>\n  ): <R>(self: Micro<A, E, R>) => Micro<A, E | XE, R | XR>\n  /**\n   * When the `Micro` effect fails, run the given finalizer effect with the\n   * `MicroCause` of the executed effect.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category resources & finalization\n   */\n  <A, E, R, XE, XR>(\n    self: Micro<A, E, R>,\n    f: (cause: MicroCause<NoInfer<E>>) => Micro<void, XE, XR>\n  ): Micro<A, E | XE, R | XR>\n} = dual(\n  2,\n  <A, E, R, XE, XR>(\n    self: Micro<A, E, R>,\n    f: (cause: MicroCause<NoInfer<E>>) => Micro<void, XE, XR>\n  ): Micro<A, E | XE, R | XR> => onExitIf(self, exitIsFailure, (exit) => f(exit.left))\n)\n\n/**\n * If this `Micro` effect is aborted, run the finalizer effect.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */\nexport const onInterrupt: {\n  /**\n   * If this `Micro` effect is aborted, run the finalizer effect.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category resources & finalization\n   */\n  <XE, XR>(finalizer: Micro<void, XE, XR>): <A, E, R>(self: Micro<A, E, R>) => Micro<A, E | XE, R | XR>\n  /**\n   * If this `Micro` effect is aborted, run the finalizer effect.\n   *\n   * @since 3.4.6\n   * @experimental\n   * @category resources & finalization\n   */\n  <A, E, R, XE, XR>(self: Micro<A, E, R>, finalizer: Micro<void, XE, XR>): Micro<A, E | XE, R | XR>\n} = dual(\n  2,\n  <A, E, R, XE, XR>(self: Micro<A, E, R>, finalizer: Micro<void, XE, XR>): Micro<A, E | XE, R | XR> =>\n    onExitIf(self, exitIsInterrupt, (_) => finalizer)\n)\n\n/**\n * Acquire a resource, use it, and then release the resource when the `use`\n * effect has completed.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const acquireUseRelease = <Resource, E, R, A, E2, R2, E3, R3>(\n  acquire: Micro<Resource, E, R>,\n  use: (a: Resource) => Micro<A, E2, R2>,\n  release: (a: Resource, exit: MicroExit<A, E2>) => Micro<void, E3, R3>\n): Micro<A, E | E2 | E3, R | R2 | R3> =>\n  uninterruptibleMask((restore) =>\n    flatMap(\n      acquire,\n      (a) =>\n        flatMap(\n          exit(restore(use(a))),\n          (exit) => andThen(release(a, exit), fromExit(exit))\n        )\n    )\n  )\n\n// ----------------------------------------------------------------------------\n// interruption\n// ----------------------------------------------------------------------------\n\n/**\n * Abort the current `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category interruption\n */\nexport const interrupt: Micro<never> = make(function(env, onExit) {\n  const controller = envGet(env, currentAbortController)\n  controller.abort()\n  onExit(exitInterrupt)\n})\n\n/**\n * Wrap the given `Micro` effect in an uninterruptible region, preventing the\n * effect from being aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category interruption\n */\nexport const uninterruptible = <A, E, R>(self: Micro<A, E, R>): Micro<A, E, R> =>\n  unsafeMakeOptions(function(env, onExit) {\n    const nextEnv = envMutate(env, function(env) {\n      env[currentInterruptible.key] = false\n      env[currentAbortSignal.key] = new AbortController().signal\n      return env\n    })\n    self[runSymbol](nextEnv, onExit)\n  }, false)\n\n/**\n * Wrap the given `Micro` effect in an uninterruptible region, preventing the\n * effect from being aborted.\n *\n * You can use the `restore` function to restore a `Micro` effect to the\n * interruptibility state before the `uninterruptibleMask` was applied.\n *\n * @since 3.4.0\n * @experimental\n * @category interruption\n * @example\n * import * as Micro from \"effect/Micro\"\n *\n * Micro.uninterruptibleMask((restore) =>\n *   Micro.sleep(1000).pipe( // uninterruptible\n *     Micro.andThen(restore(Micro.sleep(1000))) // interruptible\n *   )\n * )\n */\nexport const uninterruptibleMask = <A, E, R>(\n  f: (restore: <A, E, R>(effect: Micro<A, E, R>) => Micro<A, E, R>) => Micro<A, E, R>\n): Micro<A, E, R> =>\n  unsafeMakeOptions((env, onExit) => {\n    const isInterruptible = envGet(env, currentInterruptible)\n    const effect = isInterruptible ? f(interruptible) : f(identity)\n    const nextEnv = isInterruptible ?\n      envMutate(env, function(env) {\n        env[currentInterruptible.key] = false\n        env[currentAbortSignal.key] = new AbortController().signal\n        return env\n      }) :\n      env\n    effect[runSymbol](nextEnv, onExit)\n  }, false)\n\n/**\n * Wrap the given `Micro` effect in an interruptible region, allowing the effect\n * to be aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category interruption\n */\nexport const interruptible = <A, E, R>(self: Micro<A, E, R>): Micro<A, E, R> =>\n  make((env, onExit) => {\n    const isInterruptible = envGet(env, currentInterruptible)\n    let newEnv = env\n    if (!isInterruptible) {\n      const controller = envGet(env, currentAbortController)\n      newEnv = envMutate(env, function(env) {\n        env[currentInterruptible.key] = true\n        env[currentAbortSignal.key] = controller.signal\n        return env\n      })\n    }\n    self[runSymbol](newEnv, onExit)\n  })\n\n// ========================================================================\n// collecting & elements\n// ========================================================================\n\n/**\n * @since 3.4.0\n * @experimental\n */\nexport declare namespace All {\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type MicroAny = Micro<any, any, any>\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type ReturnIterable<T extends Iterable<MicroAny>, Discard extends boolean> = [T] extends\n    [Iterable<Micro<infer A, infer E, infer R>>] ? Micro<\n      Discard extends true ? void : Array<A>,\n      E,\n      R\n    >\n    : never\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type ReturnTuple<T extends ReadonlyArray<unknown>, Discard extends boolean> = Micro<\n    Discard extends true ? void\n      : T[number] extends never ? []\n      : { -readonly [K in keyof T]: T[K] extends Micro<infer _A, infer _E, infer _R> ? _A : never },\n    T[number] extends never ? never\n      : T[number] extends Micro<infer _A, infer _E, infer _R> ? _E\n      : never,\n    T[number] extends never ? never\n      : T[number] extends Micro<infer _A, infer _E, infer _R> ? _R\n      : never\n  > extends infer X ? X : never\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type ReturnObject<T, Discard extends boolean> = [T] extends [{ [K: string]: MicroAny }] ? Micro<\n      Discard extends true ? void :\n        { -readonly [K in keyof T]: [T[K]] extends [Micro<infer _A, infer _E, infer _R>] ? _A : never },\n      keyof T extends never ? never\n        : T[keyof T] extends Micro<infer _A, infer _E, infer _R> ? _E\n        : never,\n      keyof T extends never ? never\n        : T[keyof T] extends Micro<infer _A, infer _E, infer _R> ? _R\n        : never\n    >\n    : never\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type IsDiscard<A> = [Extract<A, { readonly discard: true }>] extends [never] ? false : true\n\n  /**\n   * @since 3.4.0\n   * @experimental\n   */\n  export type Return<\n    Arg extends Iterable<MicroAny> | Record<string, MicroAny>,\n    O extends {\n      readonly concurrency?: Concurrency | undefined\n      readonly discard?: boolean | undefined\n    }\n  > = [Arg] extends [ReadonlyArray<MicroAny>] ? ReturnTuple<Arg, IsDiscard<O>>\n    : [Arg] extends [Iterable<MicroAny>] ? ReturnIterable<Arg, IsDiscard<O>>\n    : [Arg] extends [Record<string, MicroAny>] ? ReturnObject<Arg, IsDiscard<O>>\n    : never\n}\n\n/**\n * Runs all the provided effects in sequence respecting the structure provided in input.\n *\n * Supports multiple arguments, a single argument tuple / array or record / struct.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nexport const all = <\n  const Arg extends Iterable<Micro<any, any, any>> | Record<string, Micro<any, any, any>>,\n  O extends {\n    readonly concurrency?: Concurrency | undefined\n    readonly discard?: boolean | undefined\n  }\n>(arg: Arg, options?: O): All.Return<Arg, O> => {\n  if (Array.isArray(arg) || isIterable(arg)) {\n    return (forEach as any)(arg, identity, options)\n  } else if (options?.discard) {\n    return (forEach as any)(Object.values(arg), identity, options)\n  }\n  return suspend(() => {\n    const out: Record<string, unknown> = {}\n    return as(\n      forEach(Object.entries(arg), ([key, effect]) =>\n        map(effect, (value) => {\n          out[key] = value\n        }), {\n        discard: true,\n        concurrency: options?.concurrency\n      }),\n      out\n    )\n  }) as any\n}\n\n/**\n * For each element of the provided iterable, run the effect and collect the results.\n *\n * If the `discard` option is set to `true`, the results will be discarded and\n * the effect will return `void`.\n *\n * The `concurrency` option can be set to control how many effects are run in\n * parallel. By default, the effects are run sequentially.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nexport const forEach: {\n  /**\n   * For each element of the provided iterable, run the effect and collect the results.\n   *\n   * If the `discard` option is set to `true`, the results will be discarded and\n   * the effect will return `void`.\n   *\n   * The `concurrency` option can be set to control how many effects are run in\n   * parallel. By default, the effects are run sequentially.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category collecting & elements\n   */\n  <A, B, E, R>(\n    iterable: Iterable<A>,\n    f: (a: A, index: number) => Micro<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly discard?: false | undefined\n    }\n  ): Micro<Array<B>, E, R>\n  /**\n   * For each element of the provided iterable, run the effect and collect the results.\n   *\n   * If the `discard` option is set to `true`, the results will be discarded and\n   * the effect will return `void`.\n   *\n   * The `concurrency` option can be set to control how many effects are run in\n   * parallel. By default, the effects are run sequentially.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category collecting & elements\n   */\n  <A, B, E, R>(\n    iterable: Iterable<A>,\n    f: (a: A, index: number) => Micro<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly discard: true\n    }\n  ): Micro<void, E, R>\n} = <\n  A,\n  B,\n  E,\n  R\n>(iterable: Iterable<A>, f: (a: A, index: number) => Micro<B, E, R>, options?: {\n  readonly concurrency?: Concurrency | undefined\n  readonly discard?: boolean | undefined\n}): Micro<any, E, R> =>\n  make(function(env, onExit) {\n    const concurrencyOption = options?.concurrency === \"inherit\"\n      ? envGet(env, currentConcurrency)\n      : options?.concurrency ?? 1\n    const concurrency = concurrencyOption === \"unbounded\"\n      ? Number.POSITIVE_INFINITY\n      : Math.max(1, concurrencyOption)\n\n    // abort\n    const [envWithSignal, onAbort] = forkSignal(env)\n\n    // iterate\n    let result: MicroExit<any, any> | undefined = undefined\n    const items = Array.from(iterable)\n    let length = items.length\n    if (length === 0) {\n      return onExit(Either.right(options?.discard ? undefined : []))\n    }\n    const out: Array<B> | undefined = options?.discard ? undefined : new Array(length)\n    let index = 0\n    let inProgress = 0\n    let doneCount = 0\n    let pumping = false\n    function pump() {\n      pumping = true\n      while (inProgress < concurrency && index < length) {\n        const currentIndex = index\n        const item = items[currentIndex]\n        index++\n        inProgress++\n        try {\n          f(item, currentIndex)[runSymbol](envWithSignal, function(exit) {\n            if (exit._tag === \"Left\") {\n              if (result === undefined) {\n                result = exit\n                length = index\n                onAbort()\n              }\n            } else if (out !== undefined) {\n              out[currentIndex] = exit.right\n            }\n            doneCount++\n            inProgress--\n            if (doneCount === length) {\n              onExit(result ?? Either.right(out))\n            } else if (!pumping && inProgress < concurrency) {\n              pump()\n            }\n          })\n        } catch (err) {\n          result = exitDie(err)\n          length = index\n          onAbort()\n        }\n      }\n      pumping = false\n    }\n    pump()\n  })\n\n/**\n * Effectfully filter the elements of the provided iterable.\n *\n * Use the `concurrency` option to control how many elements are processed in parallel.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nexport const filter = <A, E, R>(iterable: Iterable<A>, f: (a: NoInfer<A>) => Micro<boolean, E, R>, options?: {\n  readonly concurrency?: Concurrency | undefined\n  readonly negate?: boolean | undefined\n}): Micro<Array<A>, E, R> =>\n  filterMap(iterable, (a) =>\n    map(f(a), (pass) => {\n      pass = options?.negate ? !pass : pass\n      return pass ? Option.some(a) : Option.none()\n    }), options)\n\n/**\n * Effectfully filter the elements of the provided iterable.\n *\n * Use the `concurrency` option to control how many elements are processed in parallel.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nexport const filterMap = <A, B, E, R>(\n  iterable: Iterable<A>,\n  f: (a: NoInfer<A>) => Micro<Option.Option<B>, E, R>,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n  }\n): Micro<Array<B>, E, R> =>\n  suspend(() => {\n    const out: Array<B> = []\n    return as(\n      forEach(iterable, (a) =>\n        map(f(a), (o) => {\n          if (o._tag === \"Some\") {\n            out.push(o.value)\n          }\n        }), {\n        discard: true,\n        concurrency: options?.concurrency\n      }),\n      out\n    )\n  })\n\n// ----------------------------------------------------------------------------\n// do notation\n// ----------------------------------------------------------------------------\n\n/**\n * Start a do notation block.\n *\n * @since 3.4.0\n * @experimental\n * @category do notation\n */\nexport const Do: Micro<{}> = succeed({})\n\n/**\n * Bind the success value of this `Micro` effect to the provided name.\n *\n * @since 3.4.0\n * @experimental\n * @category do notation\n */\nexport const bindTo: {\n  /**\n   * Bind the success value of this `Micro` effect to the provided name.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category do notation\n   */\n  <N extends string>(name: N): <A, E, R>(self: Micro<A, E, R>) => Micro<{ [K in N]: A }, E, R>\n  /**\n   * Bind the success value of this `Micro` effect to the provided name.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category do notation\n   */\n  <A, E, R, N extends string>(self: Micro<A, E, R>, name: N): Micro<{ [K in N]: A }, E, R>\n} = doNotation.bindTo<MicroTypeLambda>(map)\n\n/**\n * Bind the success value of this `Micro` effect to the provided name.\n *\n * @since 3.4.0\n * @experimental\n * @category do notation\n */\nexport const bind: {\n  /**\n   * Bind the success value of this `Micro` effect to the provided name.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category do notation\n   */\n  <N extends string, A extends Record<string, any>, B, E2, R2>(\n    name: N,\n    f: (a: NoInfer<A>) => Micro<B, E2, R2>\n  ): <E, R>(self: Micro<A, E, R>) => Micro<Simplify<Omit<A, N> & { [K in N]: B }>, E | E2, R | R2>\n  /**\n   * Bind the success value of this `Micro` effect to the provided name.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category do notation\n   */\n  <A extends Record<string, any>, E, R, B, E2, R2, N extends string>(\n    self: Micro<A, E, R>,\n    name: N,\n    f: (a: NoInfer<A>) => Micro<B, E2, R2>\n  ): Micro<Simplify<Omit<A, N> & { [K in N]: B }>, E | E2, R | R2>\n} = doNotation.bind<MicroTypeLambda>(map, flatMap)\n\nconst let_: {\n  <N extends string, A extends Record<string, any>, B>(\n    name: N,\n    f: (a: NoInfer<A>) => B\n  ): <E, R>(self: Micro<A, E, R>) => Micro<Simplify<Omit<A, N> & { [K in N]: B }>, E, R>\n  <A extends Record<string, any>, E, R, B, N extends string>(\n    self: Micro<A, E, R>,\n    name: N,\n    f: (a: NoInfer<A>) => B\n  ): Micro<Simplify<Omit<A, N> & { [K in N]: B }>, E, R>\n} = doNotation.let_<MicroTypeLambda>(map)\n\nexport {\n  /**\n   * Bind the result of a synchronous computation to the given name.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category do notation\n   */\n  let_ as let\n}\n\n// ----------------------------------------------------------------------------\n// handle & forking\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport const HandleTypeId: unique symbol = Symbol.for(\"effect/Micro/Handle\")\n\n/**\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport type HandleTypeId = typeof HandleTypeId\n\n/**\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport interface Handle<A, E = never> extends Micro<A, E> {\n  readonly [HandleTypeId]: HandleTypeId\n  readonly await: Micro<MicroExit<A, E>>\n  readonly join: Micro<A, E>\n  readonly interrupt: Micro<MicroExit<A, E>>\n  readonly unsafeInterrupt: () => void\n  readonly addObserver: (observer: (exit: MicroExit<A, E>) => void) => void\n  readonly removeObserver: (observer: (exit: MicroExit<A, E>) => void) => void\n  readonly unsafePoll: () => MicroExit<A, E> | null\n\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: HandleUnify<this>\n  [Unify.ignoreSymbol]?: HandleUnifyIgnore\n}\n\n/**\n * @category models\n * @since 3.8.4\n * @experimental\n */\nexport interface HandleUnify<A extends { [Unify.typeSymbol]?: any }> extends MicroUnify<A> {\n  Handle?: () => A[Unify.typeSymbol] extends Handle<infer A0, infer E0> | infer _ ? Handle<A0, E0> : never\n}\n\n/**\n * @category models\n * @since 3.8.4\n * @experimental\n */\nexport interface HandleUnifyIgnore extends MicroUnifyIgnore {\n  Micro?: true\n}\n\n/**\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport const isHandle = (u: unknown): u is Handle<unknown, unknown> =>\n  typeof u === \"object\" && u !== null && HandleTypeId in u\n\nclass HandleImpl<A, E> extends Class<A, E> implements Handle<A, E> {\n  readonly [HandleTypeId]: HandleTypeId\n\n  readonly observers: Set<(exit: MicroExit<A, E>) => void> = new Set()\n  private _exit: MicroExit<A, E> | undefined = undefined\n  _controller: AbortController\n  readonly isRoot: boolean\n\n  constructor(readonly parentSignal: AbortSignal, controller?: AbortController) {\n    super()\n    this[HandleTypeId] = HandleTypeId\n    this.isRoot = controller !== undefined\n    this._controller = controller ?? new AbortController()\n    if (!this.isRoot) {\n      parentSignal.addEventListener(\"abort\", this.unsafeInterrupt)\n    }\n  }\n\n  unsafePoll(): MicroExit<A, E> | null {\n    return this._exit ?? null\n  }\n\n  unsafeInterrupt = () => {\n    this._controller.abort()\n  }\n\n  emit(exit: MicroExit<A, E>): void {\n    if (this._exit) {\n      return\n    }\n    this._exit = exit\n    if (!this.isRoot) {\n      this.parentSignal.removeEventListener(\"abort\", this.unsafeInterrupt)\n    }\n    this.observers.forEach((observer) => observer(exit))\n    this.observers.clear()\n  }\n\n  addObserver(observer: (exit: MicroExit<A, E>) => void): void {\n    if (this._exit) {\n      return observer(this._exit)\n    }\n    this.observers.add(observer)\n  }\n\n  removeObserver(observer: (exit: MicroExit<A, E>) => void): void {\n    this.observers.delete(observer)\n  }\n\n  get await(): Micro<MicroExit<A, E>> {\n    return suspend(() => {\n      if (this._exit) {\n        return succeed(this._exit)\n      }\n      return async((resume) => {\n        function observer(exit: MicroExit<A, E>) {\n          resume(succeed(exit))\n        }\n        this.addObserver(observer)\n        return sync(() => {\n          this.removeObserver(observer)\n        })\n      })\n    })\n  }\n\n  get join(): Micro<A, E> {\n    return flatMap(this.await, fromExit)\n  }\n\n  get interrupt(): Micro<MicroExit<A, E>> {\n    return suspend(() => {\n      this.unsafeInterrupt()\n      return this.await\n    })\n  }\n\n  asMicro(): Micro<A, E> {\n    return this.join\n  }\n}\n\n/**\n * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n * aborted.\n *\n * When the parent `Micro` finishes, this `Micro` will be aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport const fork = <A, E, R>(self: Micro<A, E, R>): Micro<Handle<A, E>, never, R> =>\n  make(function(env, onExit) {\n    const signal = envGet(env, currentAbortSignal)\n    const handle = new HandleImpl<A, E>(signal)\n    const nextEnv = envMutate(env, (map) => {\n      map[currentAbortController.key] = handle._controller\n      map[currentAbortSignal.key] = handle._controller.signal\n      return map\n    })\n    envGet(env, currentScheduler).scheduleTask(() => {\n      self[runSymbol](nextEnv, (exit) => {\n        handle.emit(exit)\n      })\n    }, 0)\n    onExit(Either.right(handle))\n  })\n\n/**\n * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n * aborted.\n *\n * It will not be aborted when the parent `Micro` finishes.\n *\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport const forkDaemon = <A, E, R>(self: Micro<A, E, R>): Micro<Handle<A, E>, never, R> =>\n  make(function(env, onExit) {\n    const controller = new AbortController()\n    const handle = new HandleImpl<A, E>(controller.signal, controller)\n    const nextEnv = envMutate(env, (map) => {\n      map[currentAbortController.key] = controller\n      map[currentAbortSignal.key] = controller.signal\n      return map\n    })\n    envGet(env, currentScheduler).scheduleTask(() => {\n      self[runSymbol](nextEnv, (exit) => {\n        handle.emit(exit)\n      })\n    }, 0)\n    onExit(Either.right(handle))\n  })\n\n/**\n * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n * aborted.\n *\n * The lifetime of the handle will be attached to the provided `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport const forkIn: {\n  /**\n   * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n   * aborted.\n   *\n   * The lifetime of the handle will be attached to the provided `MicroScope`.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category handle & forking\n   */\n  (scope: MicroScope): <A, E, R>(self: Micro<A, E, R>) => Micro<Handle<A, E>, never, R>\n  /**\n   * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n   * aborted.\n   *\n   * The lifetime of the handle will be attached to the provided `MicroScope`.\n   *\n   * @since 3.4.0\n   * @experimental\n   * @category handle & forking\n   */\n  <A, E, R>(self: Micro<A, E, R>, scope: MicroScope): Micro<Handle<A, E>, never, R>\n} = dual(\n  2,\n  <A, E, R>(self: Micro<A, E, R>, scope: MicroScope): Micro<Handle<A, E>, never, R> =>\n    uninterruptibleMask((restore) =>\n      flatMap(scope.fork, (scope) =>\n        tap(\n          restore(forkDaemon(onExit(self, (exit) => scope.close(exit)))),\n          (fiber) => scope.addFinalizer((_) => asVoid(fiber.interrupt))\n        ))\n    )\n)\n\n/**\n * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n * aborted.\n *\n * The lifetime of the handle will be attached to the current `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport const forkScoped = <A, E, R>(self: Micro<A, E, R>): Micro<Handle<A, E>, never, R | MicroScope> =>\n  flatMap(scope, (scope) => forkIn(self, scope))\n\n// ----------------------------------------------------------------------------\n// execution\n// ----------------------------------------------------------------------------\n\n/**\n * Execute the `Micro` effect and return a `Handle` that can be awaited, joined,\n * or aborted.\n *\n * You can listen for the result by adding an observer using the handle's\n * `addObserver` method.\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n * @example\n * import * as Micro from \"effect/Micro\"\n *\n * const handle = Micro.succeed(42).pipe(\n *   Micro.delay(1000),\n *   Micro.runFork\n * )\n *\n * handle.addObserver((exit) => {\n *   console.log(exit)\n * })\n */\nexport const runFork = <A, E>(\n  effect: Micro<A, E>,\n  options?: {\n    readonly signal?: AbortSignal | undefined\n    readonly scheduler?: MicroScheduler | undefined\n  } | undefined\n): Handle<A, E> => {\n  const controller = new AbortController()\n  const refs = Object.create(null)\n  refs[currentAbortController.key] = controller\n  refs[currentAbortSignal.key] = controller.signal\n  refs[currentScheduler.key] = options?.scheduler ?? new MicroSchedulerDefault()\n  const env = envMake(refs)\n  const handle = new HandleImpl<A, E>(controller.signal, controller)\n  effect[runSymbol](envSet(env, currentAbortSignal, handle._controller.signal), (exit) => {\n    handle.emit(exit)\n    if (options?.signal) {\n      options.signal.removeEventListener(\"abort\", handle.unsafeInterrupt)\n    }\n  })\n  if (options?.signal) {\n    if (options.signal.aborted) {\n      handle.unsafeInterrupt()\n    } else {\n      options.signal.addEventListener(\"abort\", handle.unsafeInterrupt, { once: true })\n    }\n  }\n  return handle\n}\n\n/**\n * Execute the `Micro` effect and return a `Promise` that resolves with the\n * `MicroExit` of the computation.\n *\n * @since 3.4.6\n * @experimental\n * @category execution\n */\nexport const runPromiseExit = <A, E>(\n  effect: Micro<A, E>,\n  options?: {\n    readonly signal?: AbortSignal | undefined\n    readonly scheduler?: MicroScheduler | undefined\n  } | undefined\n): Promise<MicroExit<A, E>> =>\n  new Promise((resolve, _reject) => {\n    const handle = runFork(effect, options)\n    handle.addObserver(resolve)\n  })\n\n/**\n * Execute the `Micro` effect and return a `Promise` that resolves with the\n * successful value of the computation.\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n */\nexport const runPromise = <A, E>(\n  effect: Micro<A, E>,\n  options?: {\n    readonly signal?: AbortSignal | undefined\n    readonly scheduler?: MicroScheduler | undefined\n  } | undefined\n): Promise<A> =>\n  runPromiseExit(effect, options).then((exit) => {\n    if (exit._tag === \"Left\") {\n      throw exit.left\n    }\n    return exit.right\n  })\n\n/**\n * Attempt to execute the `Micro` effect synchronously and return the `MicroExit`.\n *\n * If any asynchronous effects are encountered, the function will return a\n * `CauseDie` containing the `Handle`.\n *\n * @since 3.4.6\n * @experimental\n * @category execution\n */\nexport const runSyncExit = <A, E>(effect: Micro<A, E>): MicroExit<A, E> => {\n  const scheduler = new MicroSchedulerDefault()\n  const handle = runFork(effect, { scheduler })\n  scheduler.flush()\n  const exit = handle.unsafePoll()\n  if (exit === null) {\n    return exitDie(handle)\n  }\n  return exit\n}\n\n/**\n * Attempt to execute the `Micro` effect synchronously and return the success\n * value.\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n */\nexport const runSync = <A, E>(effect: Micro<A, E>): A => {\n  const exit = runSyncExit(effect)\n  if (exit._tag === \"Left\") {\n    throw exit.left\n  }\n  return exit.right\n}\n\n// ----------------------------------------------------------------------------\n// Errors\n// ----------------------------------------------------------------------------\n\n/**\n * @since 3.4.0\n * @experimental\n * @category errors\n */\nexport interface YieldableError extends Pipeable, Inspectable, Readonly<Error> {\n  readonly [EffectTypeId]: Effect.VarianceStruct<never, this, never>\n  readonly [StreamTypeId]: Stream.VarianceStruct<never, this, never>\n  readonly [SinkTypeId]: Sink.VarianceStruct<never, unknown, never, this, never>\n  readonly [ChannelTypeId]: Channel.VarianceStruct<never, unknown, this, unknown, never, unknown, never>\n  readonly [TypeId]: Micro.Variance<never, this, never>\n  readonly [runSymbol]: (env: Env<any>, onExit: (exit: MicroExit<never, this>) => void) => void\n  [Symbol.iterator](): MicroIterator<Micro<never, this, never>>\n}\n\nconst YieldableError: new(message?: string) => YieldableError = (function() {\n  class YieldableError extends globalThis.Error {\n    [runSymbol](_env: any, onExit: any) {\n      onExit(exitFail(this))\n    }\n    toString() {\n      return this.message ? `${this.name}: ${this.message}` : this.name\n    }\n    toJSON() {\n      return { ...this }\n    }\n    [NodeInspectSymbol](): string {\n      const stack = this.stack\n      if (stack) {\n        return `${this.toString()}\\n${stack.split(\"\\n\").slice(1).join(\"\\n\")}`\n      }\n      return this.toString()\n    }\n  }\n  Object.assign(YieldableError.prototype, MicroProto, StructuralPrototype)\n  return YieldableError as any\n})()\n\n/**\n * @since 3.4.0\n * @experimental\n * @category errors\n */\nexport const Error: new<A extends Record<string, any> = {}>(\n  args: Equals<A, {}> extends true ? void\n    : { readonly [P in keyof A]: A[P] }\n) => YieldableError & Readonly<A> = (function() {\n  return class extends YieldableError {\n    constructor(args: any) {\n      super()\n      if (args) {\n        Object.assign(this, args)\n      }\n    }\n  } as any\n})()\n\n/**\n * @since 3.4.0\n * @experimental\n * @category errors\n */\nexport const TaggedError = <Tag extends string>(tag: Tag): new<A extends Record<string, any> = {}>(\n  args: Equals<A, {}> extends true ? void\n    : { readonly [P in keyof A as P extends \"_tag\" ? never : P]: A[P] }\n) => YieldableError & { readonly _tag: Tag } & Readonly<A> => {\n  class Base extends Error<{}> {\n    readonly _tag = tag\n  }\n  ;(Base.prototype as any).name = tag\n  return Base as any\n}\n\n/**\n * Represents a checked exception which occurs when an expected element was\n * unable to be found.\n *\n * @since 3.4.4\n * @experimental\n * @category errors\n */\nexport class NoSuchElementException extends TaggedError(\"NoSuchElementException\")<{ message?: string | undefined }> {}\n\n/**\n * Represents a checked exception which occurs when a timeout occurs.\n *\n * @since 3.4.4\n * @experimental\n * @category errors\n */\nexport class TimeoutException extends TaggedError(\"TimeoutException\") {}\n"],"names":["Context","Effectable","Either","constTrue","constVoid","dual","identity","globalValue","NodeInspectSymbol","toStringUnknown","doNotation","StructuralPrototype","SingleShotGen","Option","pipeArguments","hasProperty","isIterable","isTagged","YieldWrap","yieldWrapGet","TypeId","Symbol","for","runSymbol","isMicro","u","MicroProto","EffectPrototype","_op","_A","_E","_R","iterator","MicroBase","Base","prototype","Class","env","onExit","asMicro","MicroCauseTypeId","isMicroCause","self","microCauseVariance","MicroCauseImpl","globalThis","Error","_tag","traces","constructor","originalError","causeName","name","message","stack","messageLines","split","length","slice","join","pipe","arguments","toString","FailImpl","error","causeFail","DieImpl","defect","causeDie","InterruptImpl","causeInterrupt","causeIsFail","causeIsDie","causeIsInterrupt","causeSquash","causeWithTrace","trace","exitInterrupt","left","exitSucceed","right","exitFail","e","exitDie","exitFailCause","exitIsSuccess","isRight","exitIsFailure","isLeft","exitIsInterrupt","exitIsFail","exitIsDie","exitVoid","EnvTypeId","EnvProto","envMake","refs","Object","create","envUnsafeMakeEmpty","controller","AbortController","currentAbortController","key","currentAbortSignal","signal","currentScheduler","MicroSchedulerDefault","envGet","ref","initial","envSet","value","assign","envMutate","f","service","tag","make","get","currentContext","serviceOption","getOption","getEnvRef","envRef","locally","fiberRef","context","provideContext","provided","nextEnv","merge","provideService","add","provideServiceEffect","acquire","flatMap","setImmediate","setTimeout","tasks","running","scheduleTask","task","_priority","push","afterScheduled","runTasks","i","len","shouldYield","_env","flush","EnvRefTypeId","EnvRefProto","envRefMake","undefined","empty","currentConcurrency","currentMaxDepthBeforeYield","currentInterruptible","withConcurrency","concurrency","microDepthState","depth","maxDepthBeforeYield","unsafeMake","run","unsafeMakeOptions","checkAbort","execute","aborted","scheduler","err","fromExit","fromExitSync","succeed","a","succeedSome","some","succeedNone","none","fail","failSync","die","failCause","cause","failCauseSync","sync","evaluate","fromOption","option","NoSuchElementException","fromEither","either","suspend","void_","void","async","register","resumed","cleanup","onAbort","resume","uninterruptible","andThen","abort","effect","removeEventListener","addEventListener","try_","options","try","catch","promise","then","tryPromise","yieldWithPriority","priority","yieldNow","yieldFlush","never","interval","setInterval","clearInterval","gen","args","call","shouldContinue","result","next","done","exit","flatten","map","as","_","asSome","flip","matchEffect","onFailure","onSuccess","tap","selfExit","tapExit","asVoid","sandbox","catchAllCause","forkSignal","parentSignal","envWithSignal","raceAll","all","effects","Array","from","index","causes","onDone","exit_","raceAllFirst","race","that","raceFirst","zip","zipWith","a2","concurrent","filterOrFailCause","refinement","orFailWith","filterOrFail","when","condition","pass","repeatExit","startedAt","schedule","Date","now","attempt","loop","while","times","delayEffect","elapsed","duration","isNone","sleep","repeat","forever","scheduleRecurs","n","scheduleSpaced","millis","scheduleExponential","baseMillis","factor","Math","pow","scheduleAddDelay","scheduleWithMaxDelay","max","min","scheduleWithMaxElapsed","scheduleUnion","d1","d2","scheduleIntersect","catchCauseIf","predicate","catchAll","catchAllDefect","tapErrorCause","tapErrorCauseIf","tapError","tapDefect","catchIf","catchTag","k","mapErrorCause","mapError","orDie","orElseSucceed","ignore","ignoreLogged","console","match","retry","withTrace","prevLimit","stackTraceLimit","generate","line","trim","replace","lineMatch","matchCauseEffect","matchCause","timeout","clearTimeout","delay","timeoutOrElse","interruptible","onTimeout","TimeoutException","timeoutOption","MicroScopeTypeId","MicroScope","GenericTag","MicroScopeImpl","state","finalizers","Set","unsafeAddFinalizer","finalizer","addFinalizer","unsafeRemoveFinalizer","delete","close","microExit","reverse","forEach","exits","fork","newScope","fin","scopeMake","scopeUnsafeMake","scope","provideScope","scoped","acquireRelease","release","onExitIf","uninterruptibleMask","restore","finalizerExit","ensuring","onError","onInterrupt","acquireUseRelease","use","interrupt","isInterruptible","newEnv","arg","isArray","discard","values","out","entries","iterable","concurrencyOption","Number","POSITIVE_INFINITY","items","inProgress","doneCount","pumping","pump","currentIndex","item","filter","filterMap","negate","o","Do","bindTo","bind","let_","let","HandleTypeId","isHandle","HandleImpl","observers","_exit","_controller","isRoot","unsafeInterrupt","unsafePoll","emit","observer","clear","addObserver","removeObserver","await","handle","forkDaemon","forkIn","fiber","forkScoped","runFork","once","runPromiseExit","Promise","resolve","_reject","runPromise","runSyncExit","runSync","YieldableError","toJSON","TaggedError"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3098, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3104, "column": 0}, "map": {"version":3,"file":"Redacted.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Redacted.ts"],"sourcesContent":["/**\n * The Redacted module provides functionality for handling sensitive information\n * securely within your application. By using the `Redacted` data type, you can\n * ensure that sensitive values are not accidentally exposed in logs or error\n * messages.\n *\n * @since 3.3.0\n */\nimport type * as Equal from \"./Equal.js\"\nimport * as Equivalence from \"./Equivalence.js\"\nimport * as redacted_ from \"./internal/redacted.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Covariant } from \"./Types.js\"\n\n/**\n * @since 3.3.0\n * @category symbols\n */\nexport const RedactedTypeId: unique symbol = redacted_.RedactedTypeId\n\n/**\n * @since 3.3.0\n * @category symbols\n */\nexport type RedactedTypeId = typeof RedactedTypeId\n\n/**\n * @since 3.3.0\n * @category models\n */\nexport interface Redacted<out A = string> extends Redacted.Variance<A>, Equal.Equal, Pipeable {\n}\n\n/**\n * @since 3.3.0\n */\nexport declare namespace Redacted {\n  /**\n   * @since 3.3.0\n   * @category models\n   */\n  export interface Variance<out A> {\n    readonly [RedactedTypeId]: {\n      readonly _A: Covariant<A>\n    }\n  }\n\n  /**\n   * @since 3.3.0\n   * @category type-level\n   */\n  export type Value<T extends Redacted<any>> = [T] extends [Redacted<infer _A>] ? _A : never\n}\n\n/**\n * @since 3.3.0\n * @category refinements\n */\nexport const isRedacted: (u: unknown) => u is Redacted<unknown> = redacted_.isRedacted\n\n/**\n * This function creates a `Redacted<A>` instance from a given value `A`,\n * securely hiding its content.\n *\n * @example\n * import { Redacted } from \"effect\"\n *\n * const API_KEY = Redacted.make(\"1234567890\")\n *\n * @since 3.3.0\n * @category constructors\n */\nexport const make: <A>(value: A) => Redacted<A> = redacted_.make\n\n/**\n * Retrieves the original value from a `Redacted` instance. Use this function\n * with caution, as it exposes the sensitive data.\n *\n * @example\n * import { Redacted } from \"effect\"\n *\n * const API_KEY = Redacted.make(\"1234567890\")\n *\n * assert.equal(Redacted.value(API_KEY), \"1234567890\")\n *\n * @since 3.3.0\n * @category getters\n */\nexport const value: <A>(self: Redacted<A>) => A = redacted_.value\n\n/**\n * Erases the underlying value of a `Redacted` instance, rendering it unusable.\n * This function is intended to ensure that sensitive data does not remain in\n * memory longer than necessary.\n *\n * @example\n * import { Redacted } from \"effect\"\n *\n * const API_KEY = Redacted.make(\"1234567890\")\n *\n * assert.equal(Redacted.value(API_KEY), \"1234567890\")\n *\n * Redacted.unsafeWipe(API_KEY)\n *\n * assert.throws(() => Redacted.value(API_KEY), new Error(\"Unable to get redacted value\"))\n *\n * @since 3.3.0\n * @category unsafe\n */\nexport const unsafeWipe: <A>(self: Redacted<A>) => boolean = redacted_.unsafeWipe\n\n/**\n * Generates an equivalence relation for `Redacted<A>` values based on an\n * equivalence relation for the underlying values `A`. This function is useful\n * for comparing `Redacted` instances without exposing their contents.\n *\n * @example\n * import { Redacted, Equivalence } from \"effect\"\n *\n * const API_KEY1 = Redacted.make(\"1234567890\")\n * const API_KEY2 = Redacted.make(\"1-34567890\")\n * const API_KEY3 = Redacted.make(\"1234567890\")\n *\n * const equivalence = Redacted.getEquivalence(Equivalence.string)\n *\n * assert.equal(equivalence(API_KEY1, API_KEY2), false)\n * assert.equal(equivalence(API_KEY1, API_KEY3), true)\n *\n * @category equivalence\n * @since 3.3.0\n */\nexport const getEquivalence = <A>(isEquivalent: Equivalence.Equivalence<A>): Equivalence.Equivalence<Redacted<A>> =>\n  Equivalence.make((x, y) => isEquivalent(value(x), value(y)))\n"],"names":["Equivalence","redacted_","RedactedTypeId","isRedacted","make","value","unsafeWipe","getEquivalence","isEquivalent","x","y"],"mappings":";;;;;;;;AAUA,OAAO,KAAKC,SAAS,MAAM,wBAAwB;AADnD,OAAO,KAAKD,WAAW,MAAM,kBAAkB;;;AASxC,MAAME,cAAc,GAAkBD,SAAS,2MAACC,cAAc;AAwC9D,MAAMC,UAAU,GAA2CF,SAAS,2MAACE,UAAU;AAc/E,MAAMC,IAAI,GAAiCH,SAAS,2MAACG,IAAI;AAgBzD,MAAMC,KAAK,GAAgCJ,SAAS,2MAACI,KAAK;AAqB1D,MAAMC,UAAU,GAAsCL,SAAS,2MAACK,UAAU;AAsB1E,MAAMC,cAAc,IAAOC,YAAwC,GACxER,WAAW,gMAACI,IAAI,CAAC,CAACK,CAAC,EAAEC,CAAC,GAAKF,YAAY,CAACH,KAAK,CAACI,CAAC,CAAC,EAAEJ,KAAK,CAACK,CAAC,CAAC,CAAC,CAAC","ignoreList":[0]}},
    {"offset": {"line": 3122, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3128, "column": 0}, "map": {"version":3,"file":"Encoding.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Encoding.ts"],"sourcesContent":["/**\n * This module provides encoding & decoding functionality for:\n *\n * - base64 (RFC4648)\n * - base64 (URL)\n * - hex\n *\n * @since 2.0.0\n */\nimport * as Either from \"./Either.js\"\nimport * as Base64 from \"./internal/encoding/base64.js\"\nimport * as Base64Url from \"./internal/encoding/base64Url.js\"\nimport * as Common from \"./internal/encoding/common.js\"\nimport * as Hex from \"./internal/encoding/hex.js\"\n\n/**\n * Encodes the given value into a base64 (RFC4648) `string`.\n *\n * @category encoding\n * @since 2.0.0\n */\nexport const encodeBase64: (input: Uint8Array | string) => string = (input) =>\n  typeof input === \"string\" ? Base64.encode(Common.encoder.encode(input)) : Base64.encode(input)\n\n/**\n * Decodes a base64 (RFC4648) encoded `string` into a `Uint8Array`.\n *\n * @category decoding\n * @since 2.0.0\n */\nexport const decodeBase64 = (str: string): Either.Either<Uint8Array, DecodeException> => Base64.decode(str)\n\n/**\n * Decodes a base64 (RFC4648) encoded `string` into a UTF-8 `string`.\n *\n * @category decoding\n * @since 2.0.0\n */\nexport const decodeBase64String = (str: string) => Either.map(decodeBase64(str), (_) => Common.decoder.decode(_))\n\n/**\n * Encodes the given value into a base64 (URL) `string`.\n *\n * @category encoding\n * @since 2.0.0\n */\nexport const encodeBase64Url: (input: Uint8Array | string) => string = (input) =>\n  typeof input === \"string\" ? Base64Url.encode(Common.encoder.encode(input)) : Base64Url.encode(input)\n\n/**\n * Decodes a base64 (URL) encoded `string` into a `Uint8Array`.\n *\n * @category decoding\n * @since 2.0.0\n */\nexport const decodeBase64Url = (str: string): Either.Either<Uint8Array, DecodeException> => Base64Url.decode(str)\n\n/**\n * Decodes a base64 (URL) encoded `string` into a UTF-8 `string`.\n *\n * @category decoding\n * @since 2.0.0\n */\nexport const decodeBase64UrlString = (str: string) => Either.map(decodeBase64Url(str), (_) => Common.decoder.decode(_))\n\n/**\n * Encodes the given value into a hex `string`.\n *\n * @category encoding\n * @since 2.0.0\n */\nexport const encodeHex: (input: Uint8Array | string) => string = (input) =>\n  typeof input === \"string\" ? Hex.encode(Common.encoder.encode(input)) : Hex.encode(input)\n\n/**\n * Decodes a hex encoded `string` into a `Uint8Array`.\n *\n * @category decoding\n * @since 2.0.0\n */\nexport const decodeHex = (str: string): Either.Either<Uint8Array, DecodeException> => Hex.decode(str)\n\n/**\n * Decodes a hex encoded `string` into a UTF-8 `string`.\n *\n * @category decoding\n * @since 2.0.0\n */\nexport const decodeHexString = (str: string) => Either.map(decodeHex(str), (_) => Common.decoder.decode(_))\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const DecodeExceptionTypeId: unique symbol = Common.DecodeExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type DecodeExceptionTypeId = typeof DecodeExceptionTypeId\n\n/**\n * Represents a checked exception which occurs when decoding fails.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface DecodeException {\n  readonly _tag: \"DecodeException\"\n  readonly [DecodeExceptionTypeId]: DecodeExceptionTypeId\n  readonly input: string\n  readonly message?: string\n}\n\n/**\n * Creates a checked exception which occurs when decoding fails.\n *\n * @since 2.0.0\n * @category errors\n */\nexport const DecodeException: (input: string, message?: string) => DecodeException = Common.DecodeException\n\n/**\n * Returns `true` if the specified value is an `DecodeException`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isDecodeException: (u: unknown) => u is DecodeException = Common.isDecodeException\n"],"names":["Either","Base64","Base64Url","Common","Hex","encodeBase64","input","encode","encoder","decodeBase64","str","decode","decodeBase64String","map","_","decoder","encodeBase64Url","decodeBase64Url","decodeBase64UrlString","encodeHex","decodeHex","decodeHexString","DecodeExceptionTypeId","DecodeException","isDecodeException"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;AAUA,OAAO,KAAKC,MAAM,MAAM,+BAA+B;AAEvD,OAAO,KAAKE,MAAM,MAAM,+BAA+B;AAHvD,OAAO,KAAKH,MAAM,MAAM,aAAa;AAErC,OAAO,KAAKE,SAAS,MAAM,kCAAkC;AAE7D,OAAO,KAAKE,GAAG,MAAM,4BAA4B;;;;;;AAQ1C,MAAMC,YAAY,IAA4CC,KAAK,GACxE,OAAOA,KAAK,KAAK,QAAQ,GAAGL,MAAM,wNAACM,MAAM,CAACJ,MAAM,wNAACK,OAAO,CAACD,MAAM,CAACD,KAAK,CAAC,CAAC,GAAGL,MAAM,wNAACM,MAAM,CAACD,KAAK,CAAC;AAQzF,MAAMG,YAAY,IAAIC,GAAW,GAAiDT,MAAM,wNAACU,MAAM,CAACD,GAAG,CAAC;AAQpG,MAAME,kBAAkB,IAAIF,GAAW,GAAKV,MAAM,gMAACa,GAAG,CAACJ,YAAY,CAACC,GAAG,CAAC,EAAGI,CAAC,IAAKX,MAAM,wNAACY,OAAO,CAACJ,MAAM,CAACG,CAAC,CAAC,CAAC;AAQ1G,MAAME,eAAe,IAA4CV,KAAK,GAC3E,OAAOA,KAAK,KAAK,QAAQ,GAAGJ,SAAS,wNAACK,MAAM,CAACJ,MAAM,wNAACK,OAAO,CAACD,MAAM,CAACD,KAAK,CAAC,CAAC,GAAGJ,SAAS,wNAACK,MAAM,CAACD,KAAK,CAAC;AAQ/F,MAAMW,eAAe,IAAIP,GAAW,GAAiDR,SAAS,wNAACS,MAAM,CAACD,GAAG,CAAC;AAQ1G,MAAMQ,qBAAqB,IAAIR,GAAW,GAAKV,MAAM,gMAACa,GAAG,CAACI,eAAe,CAACP,GAAG,CAAC,GAAGI,CAAC,GAAKX,MAAM,wNAACY,OAAO,CAACJ,MAAM,CAACG,CAAC,CAAC,CAAC;AAQhH,MAAMK,SAAS,IAA4Cb,KAAK,GACrE,OAAOA,KAAK,KAAK,QAAQ,GAAGF,GAAG,wNAACG,MAAM,CAACJ,MAAM,wNAACK,OAAO,CAACD,MAAM,CAACD,KAAK,CAAC,CAAC,GAAGF,GAAG,wNAACG,MAAM,CAACD,KAAK,CAAC;AAQnF,MAAMc,SAAS,IAAIV,GAAW,GAAiDN,GAAG,wNAACO,MAAM,CAACD,GAAG,CAAC;AAQ9F,MAAMW,eAAe,IAAIX,GAAW,GAAKV,MAAM,gMAACa,GAAG,CAACO,SAAS,CAACV,GAAG,CAAC,GAAGI,CAAC,GAAKX,MAAM,wNAACY,OAAO,CAACJ,MAAM,CAACG,CAAC,CAAC,CAAC;AAMpG,MAAMQ,qBAAqB,GAAkBnB,MAAM,wNAACmB,qBAAqB;AA2BzE,MAAMC,eAAe,GAAyDpB,MAAM,wNAACoB,eAAe;AAQpG,MAAMC,iBAAiB,GAAyCrB,MAAM,wNAACqB,iBAAiB","ignoreList":[0]}},
    {"offset": {"line": 3172, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3178, "column": 0}, "map": {"version":3,"file":"Record.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Record.ts"],"sourcesContent":["/**\n * This module provides utility functions for working with records in TypeScript.\n *\n * @since 2.0.0\n */\n\nimport type { Either } from \"./Either.js\"\nimport * as E from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport type { Equivalence } from \"./Equivalence.js\"\nimport { dual, identity } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport * as Option from \"./Option.js\"\nimport type { NoInfer } from \"./Types.js\"\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport type ReadonlyRecord<in out K extends string | symbol, out A> = {\n  readonly [P in K]: A\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace ReadonlyRecord {\n  type IsFiniteString<T extends string> = T extends \"\" ? true :\n    [T] extends [`${infer Head}${infer Rest}`]\n      ? string extends Head ? false : `${number}` extends Head ? false : Rest extends \"\" ? true : IsFiniteString<Rest>\n    : false\n\n  /**\n   * @since 2.0.0\n   */\n  export type NonLiteralKey<K extends string | symbol> = K extends string ? IsFiniteString<K> extends true ? string : K\n    : symbol\n\n  /**\n   * @since 2.0.0\n   */\n  export type IntersectKeys<K1 extends string, K2 extends string> = [string] extends [K1 | K2] ?\n    NonLiteralKey<K1> & NonLiteralKey<K2>\n    : K1 & K2\n}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface ReadonlyRecordTypeLambda<K extends string = string> extends TypeLambda {\n  readonly type: ReadonlyRecord<K, this[\"Target\"]>\n}\n\n/**\n * Creates a new, empty record.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const empty = <K extends string | symbol = never, V = never>(): Record<\n  ReadonlyRecord.NonLiteralKey<K>,\n  V\n> => ({} as any)\n\n/**\n * Determine if a record is empty.\n *\n * @param self - record to test for emptiness.\n *\n * @example\n * import { isEmptyRecord } from \"effect/Record\"\n *\n * assert.deepStrictEqual(isEmptyRecord({}), true);\n * assert.deepStrictEqual(isEmptyRecord({ a: 3 }), false);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEmptyRecord = <K extends string, A>(self: Record<K, A>): self is Record<K, never> =>\n  keys(self).length === 0\n\n/**\n * Determine if a record is empty.\n *\n * @param self - record to test for emptiness.\n *\n * @example\n * import { isEmptyReadonlyRecord } from \"effect/Record\"\n *\n * assert.deepStrictEqual(isEmptyReadonlyRecord({}), true);\n * assert.deepStrictEqual(isEmptyReadonlyRecord({ a: 3 }), false);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEmptyReadonlyRecord: <K extends string, A>(\n  self: ReadonlyRecord<K, A>\n) => self is ReadonlyRecord<K, never> = isEmptyRecord\n\n/**\n * Takes an iterable and a projection function and returns a record.\n * The projection function maps each value of the iterable to a tuple of a key and a value, which is then added to the resulting record.\n *\n * @param self - An iterable of values to be mapped to a record.\n * @param f - A projection function that maps values of the iterable to a tuple of a key and a value.\n *\n * @example\n * import { fromIterableWith } from \"effect/Record\"\n *\n * const input = [1, 2, 3, 4]\n *\n * assert.deepStrictEqual(\n *   fromIterableWith(input, a => [String(a), a * 2]),\n *   { '1': 2, '2': 4, '3': 6, '4': 8 }\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromIterableWith: {\n  /**\n   * Takes an iterable and a projection function and returns a record.\n   * The projection function maps each value of the iterable to a tuple of a key and a value, which is then added to the resulting record.\n   *\n   * @param self - An iterable of values to be mapped to a record.\n   * @param f - A projection function that maps values of the iterable to a tuple of a key and a value.\n   *\n   * @example\n   * import { fromIterableWith } from \"effect/Record\"\n   *\n   * const input = [1, 2, 3, 4]\n   *\n   * assert.deepStrictEqual(\n   *   fromIterableWith(input, a => [String(a), a * 2]),\n   *   { '1': 2, '2': 4, '3': 6, '4': 8 }\n   * )\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A, K extends string | symbol, B>(\n    f: (a: A) => readonly [K, B]\n  ): (self: Iterable<A>) => Record<ReadonlyRecord.NonLiteralKey<K>, B>\n  /**\n   * Takes an iterable and a projection function and returns a record.\n   * The projection function maps each value of the iterable to a tuple of a key and a value, which is then added to the resulting record.\n   *\n   * @param self - An iterable of values to be mapped to a record.\n   * @param f - A projection function that maps values of the iterable to a tuple of a key and a value.\n   *\n   * @example\n   * import { fromIterableWith } from \"effect/Record\"\n   *\n   * const input = [1, 2, 3, 4]\n   *\n   * assert.deepStrictEqual(\n   *   fromIterableWith(input, a => [String(a), a * 2]),\n   *   { '1': 2, '2': 4, '3': 6, '4': 8 }\n   * )\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A, K extends string | symbol, B>(\n    self: Iterable<A>,\n    f: (a: A) => readonly [K, B]\n  ): Record<ReadonlyRecord.NonLiteralKey<K>, B>\n} = dual(\n  2,\n  <A, K extends string, B>(\n    self: Iterable<A>,\n    f: (a: A) => readonly [K, B]\n  ): Record<ReadonlyRecord.NonLiteralKey<K>, B> => {\n    const out: Record<string, B> = empty()\n    for (const a of self) {\n      const [k, b] = f(a)\n      out[k] = b\n    }\n    return out\n  }\n)\n\n/**\n * Creates a new record from an iterable, utilizing the provided function to determine the key for each element.\n *\n * @param items - An iterable containing elements.\n * @param f - A function that extracts the key for each element.\n *\n * @example\n * import { fromIterableBy } from \"effect/Record\"\n *\n * const users = [\n *   { id: \"2\", name: \"name2\" },\n *   { id: \"1\", name: \"name1\" }\n * ]\n *\n * assert.deepStrictEqual(\n *   fromIterableBy(users, user => user.id),\n *   {\n *     \"2\": { id: \"2\", name: \"name2\" },\n *     \"1\": { id: \"1\", name: \"name1\" }\n *   }\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromIterableBy = <A, K extends string | symbol>(\n  items: Iterable<A>,\n  f: (a: A) => K\n): Record<ReadonlyRecord.NonLiteralKey<K>, A> => fromIterableWith(items, (a) => [f(a), a])\n\n/**\n * Builds a record from an iterable of key-value pairs.\n *\n * If there are conflicting keys when using `fromEntries`, the last occurrence of the key/value pair will overwrite the\n * previous ones. So the resulting record will only have the value of the last occurrence of each key.\n *\n * @param self - The iterable of key-value pairs.\n *\n * @example\n * import { fromEntries } from \"effect/Record\"\n *\n * const input: Array<[string, number]> = [[\"a\", 1], [\"b\", 2]]\n *\n * assert.deepStrictEqual(fromEntries(input), { a: 1, b: 2 })\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromEntries: <Entry extends readonly [string | symbol, any]>(\n  entries: Iterable<Entry>\n) => Record<ReadonlyRecord.NonLiteralKey<Entry[0]>, Entry[1]> = Object.fromEntries\n\n/**\n * Transforms the values of a record into an `Array` with a custom mapping function.\n *\n * @param self - The record to transform.\n * @param f - The custom mapping function to apply to each key/value of the record.\n *\n * @example\n * import { collect } from \"effect/Record\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * assert.deepStrictEqual(collect(x, (key, n) => [key, n]), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const collect: {\n  /**\n   * Transforms the values of a record into an `Array` with a custom mapping function.\n   *\n   * @param self - The record to transform.\n   * @param f - The custom mapping function to apply to each key/value of the record.\n   *\n   * @example\n   * import { collect } from \"effect/Record\"\n   *\n   * const x = { a: 1, b: 2, c: 3 }\n   * assert.deepStrictEqual(collect(x, (key, n) => [key, n]), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n   *\n   * @category conversions\n   * @since 2.0.0\n   */\n  <K extends string, A, B>(f: (key: K, a: A) => B): (self: ReadonlyRecord<K, A>) => Array<B>\n  /**\n   * Transforms the values of a record into an `Array` with a custom mapping function.\n   *\n   * @param self - The record to transform.\n   * @param f - The custom mapping function to apply to each key/value of the record.\n   *\n   * @example\n   * import { collect } from \"effect/Record\"\n   *\n   * const x = { a: 1, b: 2, c: 3 }\n   * assert.deepStrictEqual(collect(x, (key, n) => [key, n]), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n   *\n   * @category conversions\n   * @since 2.0.0\n   */\n  <K extends string, A, B>(self: ReadonlyRecord<K, A>, f: (key: K, a: A) => B): Array<B>\n} = dual(\n  2,\n  <K extends string, A, B>(self: ReadonlyRecord<K, A>, f: (key: K, a: A) => B): Array<B> => {\n    const out: Array<B> = []\n    for (const key of keys(self)) {\n      out.push(f(key, self[key]))\n    }\n    return out\n  }\n)\n\n/**\n * Takes a record and returns an array of tuples containing its keys and values.\n *\n * @param self - The record to transform.\n *\n * @example\n * import { toEntries } from \"effect/Record\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * assert.deepStrictEqual(toEntries(x), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const toEntries: <K extends string, A>(self: ReadonlyRecord<K, A>) => Array<[K, A]> = collect((\n  key,\n  value\n) => [key, value])\n\n/**\n * Returns the number of key/value pairs in a record.\n *\n * @param self - A record to calculate the number of key/value pairs in.\n *\n * @example\n * import { size } from \"effect/Record\";\n *\n * assert.deepStrictEqual(size({ a: \"a\", b: 1, c: true }), 3);\n *\n * @since 2.0.0\n */\nexport const size = <K extends string, A>(self: ReadonlyRecord<K, A>): number => keys(self).length\n\n/**\n * Check if a given `key` exists in a record.\n *\n * @param self - the record to look in.\n * @param key - the key to look for in the record.\n *\n * @example\n * import { empty, has } from \"effect/Record\"\n *\n * assert.deepStrictEqual(has({ a: 1, b: 2 }, \"a\"), true);\n * assert.deepStrictEqual(has(empty<string>(), \"c\"), false);\n *\n * @since 2.0.0\n */\nexport const has: {\n  /**\n   * Check if a given `key` exists in a record.\n   *\n   * @param self - the record to look in.\n   * @param key - the key to look for in the record.\n   *\n   * @example\n   * import { empty, has } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(has({ a: 1, b: 2 }, \"a\"), true);\n   * assert.deepStrictEqual(has(empty<string>(), \"c\"), false);\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol>(key: NoInfer<K>): <A>(self: ReadonlyRecord<K, A>) => boolean\n  /**\n   * Check if a given `key` exists in a record.\n   *\n   * @param self - the record to look in.\n   * @param key - the key to look for in the record.\n   *\n   * @example\n   * import { empty, has } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(has({ a: 1, b: 2 }, \"a\"), true);\n   * assert.deepStrictEqual(has(empty<string>(), \"c\"), false);\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A>(self: ReadonlyRecord<K, A>, key: NoInfer<K>): boolean\n} = dual(\n  2,\n  <K extends string | symbol, A>(\n    self: ReadonlyRecord<K, A>,\n    key: NoInfer<K>\n  ): boolean => Object.prototype.hasOwnProperty.call(self, key)\n)\n\n/**\n * Retrieve a value at a particular key from a record, returning it wrapped in an `Option`.\n *\n * @param self - The record to retrieve value from.\n * @param key - Key to retrieve from record.\n *\n * @example\n * import { Record as R, Option } from \"effect\"\n *\n * const person: Record<string, unknown> = { name: \"John Doe\", age: 35 }\n *\n * assert.deepStrictEqual(R.get(person, \"name\"), Option.some(\"John Doe\"))\n * assert.deepStrictEqual(R.get(person, \"email\"), Option.none())\n *\n * @since 2.0.0\n */\nexport const get: {\n  /**\n   * Retrieve a value at a particular key from a record, returning it wrapped in an `Option`.\n   *\n   * @param self - The record to retrieve value from.\n   * @param key - Key to retrieve from record.\n   *\n   * @example\n   * import { Record as R, Option } from \"effect\"\n   *\n   * const person: Record<string, unknown> = { name: \"John Doe\", age: 35 }\n   *\n   * assert.deepStrictEqual(R.get(person, \"name\"), Option.some(\"John Doe\"))\n   * assert.deepStrictEqual(R.get(person, \"email\"), Option.none())\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol>(key: NoInfer<K>): <A>(self: ReadonlyRecord<K, A>) => Option.Option<A>\n  /**\n   * Retrieve a value at a particular key from a record, returning it wrapped in an `Option`.\n   *\n   * @param self - The record to retrieve value from.\n   * @param key - Key to retrieve from record.\n   *\n   * @example\n   * import { Record as R, Option } from \"effect\"\n   *\n   * const person: Record<string, unknown> = { name: \"John Doe\", age: 35 }\n   *\n   * assert.deepStrictEqual(R.get(person, \"name\"), Option.some(\"John Doe\"))\n   * assert.deepStrictEqual(R.get(person, \"email\"), Option.none())\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A>(self: ReadonlyRecord<K, A>, key: NoInfer<K>): Option.Option<A>\n} = dual(\n  2,\n  <K extends string | symbol, A>(self: ReadonlyRecord<K, A>, key: NoInfer<K>): Option.Option<A> =>\n    has(self, key) ? Option.some(self[key]) : Option.none()\n)\n\n/**\n * Apply a function to the element at the specified key, creating a new record.\n * If the key does not exist, the record is returned unchanged.\n *\n * @param self - The record to be updated.\n * @param key - The key of the element to modify.\n * @param f - The function to apply to the element.\n *\n * @example\n * import { Record as R } from \"effect\"\n *\n * const f = (x: number) => x * 2\n *\n * assert.deepStrictEqual(\n *  R.modify({ a: 3 }, 'a', f),\n *  { a: 6 }\n * )\n * assert.deepStrictEqual(\n *  R.modify({ a: 3 } as Record<string, number>, 'b', f),\n *  { a: 3 }\n * )\n *\n * @since 2.0.0\n */\nexport const modify: {\n  /**\n   * Apply a function to the element at the specified key, creating a new record.\n   * If the key does not exist, the record is returned unchanged.\n   *\n   * @param self - The record to be updated.\n   * @param key - The key of the element to modify.\n   * @param f - The function to apply to the element.\n   *\n   * @example\n   * import { Record as R } from \"effect\"\n   *\n   * const f = (x: number) => x * 2\n   *\n   * assert.deepStrictEqual(\n   *  R.modify({ a: 3 }, 'a', f),\n   *  { a: 6 }\n   * )\n   * assert.deepStrictEqual(\n   *  R.modify({ a: 3 } as Record<string, number>, 'b', f),\n   *  { a: 3 }\n   * )\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, B>(key: NoInfer<K>, f: (a: A) => B): (self: ReadonlyRecord<K, A>) => Record<K, A | B>\n  /**\n   * Apply a function to the element at the specified key, creating a new record.\n   * If the key does not exist, the record is returned unchanged.\n   *\n   * @param self - The record to be updated.\n   * @param key - The key of the element to modify.\n   * @param f - The function to apply to the element.\n   *\n   * @example\n   * import { Record as R } from \"effect\"\n   *\n   * const f = (x: number) => x * 2\n   *\n   * assert.deepStrictEqual(\n   *  R.modify({ a: 3 }, 'a', f),\n   *  { a: 6 }\n   * )\n   * assert.deepStrictEqual(\n   *  R.modify({ a: 3 } as Record<string, number>, 'b', f),\n   *  { a: 3 }\n   * )\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, B>(self: ReadonlyRecord<K, A>, key: NoInfer<K>, f: (a: A) => B): Record<K, A | B>\n} = dual(\n  3,\n  <K extends string | symbol, A, B>(self: ReadonlyRecord<K, A>, key: NoInfer<K>, f: (a: A) => B): Record<K, A | B> => {\n    if (!has(self, key)) {\n      return { ...self }\n    }\n    return { ...self, [key]: f(self[key]) }\n  }\n)\n\n/**\n * Apply a function to the element at the specified key, creating a new record,\n * or return `None` if the key doesn't exist.\n *\n * @param self - The record to be updated.\n * @param key - The key of the element to modify.\n * @param f - The function to apply to the element.\n *\n * @example\n * import { Record as R, Option } from \"effect\"\n *\n * const f = (x: number) => x * 2\n *\n * assert.deepStrictEqual(\n *  R.modifyOption({ a: 3 }, 'a', f),\n *  Option.some({ a: 6 })\n * )\n * assert.deepStrictEqual(\n *  R.modifyOption({ a: 3 } as Record<string, number>, 'b', f),\n *  Option.none()\n * )\n *\n * @since 2.0.0\n */\nexport const modifyOption: {\n  /**\n   * Apply a function to the element at the specified key, creating a new record,\n   * or return `None` if the key doesn't exist.\n   *\n   * @param self - The record to be updated.\n   * @param key - The key of the element to modify.\n   * @param f - The function to apply to the element.\n   *\n   * @example\n   * import { Record as R, Option } from \"effect\"\n   *\n   * const f = (x: number) => x * 2\n   *\n   * assert.deepStrictEqual(\n   *  R.modifyOption({ a: 3 }, 'a', f),\n   *  Option.some({ a: 6 })\n   * )\n   * assert.deepStrictEqual(\n   *  R.modifyOption({ a: 3 } as Record<string, number>, 'b', f),\n   *  Option.none()\n   * )\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, B>(\n    key: NoInfer<K>,\n    f: (a: A) => B\n  ): (self: ReadonlyRecord<K, A>) => Option.Option<Record<K, A | B>>\n  /**\n   * Apply a function to the element at the specified key, creating a new record,\n   * or return `None` if the key doesn't exist.\n   *\n   * @param self - The record to be updated.\n   * @param key - The key of the element to modify.\n   * @param f - The function to apply to the element.\n   *\n   * @example\n   * import { Record as R, Option } from \"effect\"\n   *\n   * const f = (x: number) => x * 2\n   *\n   * assert.deepStrictEqual(\n   *  R.modifyOption({ a: 3 }, 'a', f),\n   *  Option.some({ a: 6 })\n   * )\n   * assert.deepStrictEqual(\n   *  R.modifyOption({ a: 3 } as Record<string, number>, 'b', f),\n   *  Option.none()\n   * )\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, B>(\n    self: ReadonlyRecord<K, A>,\n    key: NoInfer<K>,\n    f: (a: A) => B\n  ): Option.Option<Record<K, A | B>>\n} = dual(\n  3,\n  <K extends string | symbol, A, B>(\n    self: ReadonlyRecord<K, A>,\n    key: NoInfer<K>,\n    f: (a: A) => B\n  ): Option.Option<Record<K, A | B>> => {\n    if (!has(self, key)) {\n      return Option.none()\n    }\n    return Option.some({ ...self, [key]: f(self[key]) })\n  }\n)\n\n/**\n * Replaces a value in the record with the new value passed as parameter.\n *\n * @param self - The record to be updated.\n * @param key - The key to search for in the record.\n * @param b - The new value to replace the existing value with.\n *\n * @example\n * import { Record, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.replaceOption({ a: 1, b: 2, c: 3 }, 'a', 10),\n *   Option.some({ a: 10, b: 2, c: 3 })\n * )\n * assert.deepStrictEqual(Record.replaceOption(Record.empty<string>(), 'a', 10), Option.none())\n *\n * @since 2.0.0\n */\nexport const replaceOption: {\n  /**\n   * Replaces a value in the record with the new value passed as parameter.\n   *\n   * @param self - The record to be updated.\n   * @param key - The key to search for in the record.\n   * @param b - The new value to replace the existing value with.\n   *\n   * @example\n   * import { Record, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Record.replaceOption({ a: 1, b: 2, c: 3 }, 'a', 10),\n   *   Option.some({ a: 10, b: 2, c: 3 })\n   * )\n   * assert.deepStrictEqual(Record.replaceOption(Record.empty<string>(), 'a', 10), Option.none())\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, B>(\n    key: NoInfer<K>,\n    b: B\n  ): <A>(self: ReadonlyRecord<K, A>) => Option.Option<Record<K, A | B>>\n  /**\n   * Replaces a value in the record with the new value passed as parameter.\n   *\n   * @param self - The record to be updated.\n   * @param key - The key to search for in the record.\n   * @param b - The new value to replace the existing value with.\n   *\n   * @example\n   * import { Record, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Record.replaceOption({ a: 1, b: 2, c: 3 }, 'a', 10),\n   *   Option.some({ a: 10, b: 2, c: 3 })\n   * )\n   * assert.deepStrictEqual(Record.replaceOption(Record.empty<string>(), 'a', 10), Option.none())\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, B>(self: ReadonlyRecord<K, A>, key: NoInfer<K>, b: B): Option.Option<Record<K, A | B>>\n} = dual(\n  3,\n  <K extends string | symbol, A, B>(\n    self: ReadonlyRecord<K, A>,\n    key: NoInfer<K>,\n    b: B\n  ): Option.Option<Record<K, A | B>> => modifyOption(self, key, () => b)\n)\n\n/**\n * If the given key exists in the record, returns a new record with the key removed,\n * otherwise returns a copy of the original record.\n *\n * @param self - the record to remove the key from.\n * @param key - the key to remove from the record.\n *\n * @example\n * import { remove } from \"effect/Record\"\n *\n * assert.deepStrictEqual(remove({ a: 1, b: 2 }, \"a\"), { b: 2 })\n *\n * @since 2.0.0\n */\nexport const remove: {\n  /**\n   * If the given key exists in the record, returns a new record with the key removed,\n   * otherwise returns a copy of the original record.\n   *\n   * @param self - the record to remove the key from.\n   * @param key - the key to remove from the record.\n   *\n   * @example\n   * import { remove } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(remove({ a: 1, b: 2 }, \"a\"), { b: 2 })\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, X extends K>(key: X): <A>(self: ReadonlyRecord<K, A>) => Record<Exclude<K, X>, A>\n  /**\n   * If the given key exists in the record, returns a new record with the key removed,\n   * otherwise returns a copy of the original record.\n   *\n   * @param self - the record to remove the key from.\n   * @param key - the key to remove from the record.\n   *\n   * @example\n   * import { remove } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(remove({ a: 1, b: 2 }, \"a\"), { b: 2 })\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, X extends K>(self: ReadonlyRecord<K, A>, key: X): Record<Exclude<K, X>, A>\n} = dual(\n  2,\n  <K extends string | symbol, A, X extends K>(self: ReadonlyRecord<K, A>, key: X): Record<Exclude<K, X>, A> => {\n    if (!has(self, key)) {\n      return { ...self }\n    }\n    const out = { ...self }\n    delete out[key]\n    return out\n  }\n)\n\n/**\n * Retrieves the value of the property with the given `key` from a record and returns an `Option`\n * of a tuple with the value and the record with the removed property.\n * If the key is not present, returns `O.none`.\n *\n * @param self - The input record.\n * @param key - The key of the property to retrieve.\n *\n * @example\n * import { Record as R, Option } from \"effect\"\n *\n * assert.deepStrictEqual(R.pop({ a: 1, b: 2 }, \"a\"), Option.some([1, { b: 2 }]))\n * assert.deepStrictEqual(R.pop({ a: 1, b: 2 } as Record<string, number>, \"c\"), Option.none())\n *\n * @category record\n * @since 2.0.0\n */\nexport const pop: {\n  /**\n   * Retrieves the value of the property with the given `key` from a record and returns an `Option`\n   * of a tuple with the value and the record with the removed property.\n   * If the key is not present, returns `O.none`.\n   *\n   * @param self - The input record.\n   * @param key - The key of the property to retrieve.\n   *\n   * @example\n   * import { Record as R, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(R.pop({ a: 1, b: 2 }, \"a\"), Option.some([1, { b: 2 }]))\n   * assert.deepStrictEqual(R.pop({ a: 1, b: 2 } as Record<string, number>, \"c\"), Option.none())\n   *\n   * @category record\n   * @since 2.0.0\n   */\n  <K extends string | symbol, X extends K>(\n    key: X\n  ): <A>(self: ReadonlyRecord<K, A>) => Option.Option<[A, Record<Exclude<K, X>, A>]>\n  /**\n   * Retrieves the value of the property with the given `key` from a record and returns an `Option`\n   * of a tuple with the value and the record with the removed property.\n   * If the key is not present, returns `O.none`.\n   *\n   * @param self - The input record.\n   * @param key - The key of the property to retrieve.\n   *\n   * @example\n   * import { Record as R, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(R.pop({ a: 1, b: 2 }, \"a\"), Option.some([1, { b: 2 }]))\n   * assert.deepStrictEqual(R.pop({ a: 1, b: 2 } as Record<string, number>, \"c\"), Option.none())\n   *\n   * @category record\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, X extends K>(\n    self: ReadonlyRecord<K, A>,\n    key: X\n  ): Option.Option<[A, Record<Exclude<K, X>, A>]>\n} = dual(2, <K extends string | symbol, A, X extends K>(\n  self: ReadonlyRecord<K, A>,\n  key: X\n): Option.Option<[A, Record<Exclude<K, X>, A>]> =>\n  has(self, key) ? Option.some([self[key], remove(self, key)]) : Option.none())\n\n/**\n * Maps a record into another record by applying a transformation function to each of its values.\n *\n * @param self - The record to be mapped.\n * @param f - A transformation function that will be applied to each of the values in the record.\n *\n * @example\n * import { map } from \"effect/Record\"\n *\n * const f = (n: number) => `-${n}`\n *\n * assert.deepStrictEqual(map({ a: 3, b: 5 }, f), { a: \"-3\", b: \"-5\" })\n *\n * const g = (n: number, key: string) => `${key.toUpperCase()}-${n}`\n *\n * assert.deepStrictEqual(map({ a: 3, b: 5 }, g), { a: \"A-3\", b: \"B-5\" })\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const map: {\n  /**\n   * Maps a record into another record by applying a transformation function to each of its values.\n   *\n   * @param self - The record to be mapped.\n   * @param f - A transformation function that will be applied to each of the values in the record.\n   *\n   * @example\n   * import { map } from \"effect/Record\"\n   *\n   * const f = (n: number) => `-${n}`\n   *\n   * assert.deepStrictEqual(map({ a: 3, b: 5 }, f), { a: \"-3\", b: \"-5\" })\n   *\n   * const g = (n: number, key: string) => `${key.toUpperCase()}-${n}`\n   *\n   * assert.deepStrictEqual(map({ a: 3, b: 5 }, g), { a: \"A-3\", b: \"B-5\" })\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <K extends string, A, B>(f: (a: A, key: NoInfer<K>) => B): (self: ReadonlyRecord<K, A>) => Record<K, B>\n  /**\n   * Maps a record into another record by applying a transformation function to each of its values.\n   *\n   * @param self - The record to be mapped.\n   * @param f - A transformation function that will be applied to each of the values in the record.\n   *\n   * @example\n   * import { map } from \"effect/Record\"\n   *\n   * const f = (n: number) => `-${n}`\n   *\n   * assert.deepStrictEqual(map({ a: 3, b: 5 }, f), { a: \"-3\", b: \"-5\" })\n   *\n   * const g = (n: number, key: string) => `${key.toUpperCase()}-${n}`\n   *\n   * assert.deepStrictEqual(map({ a: 3, b: 5 }, g), { a: \"A-3\", b: \"B-5\" })\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <K extends string, A, B>(self: ReadonlyRecord<K, A>, f: (a: A, key: NoInfer<K>) => B): Record<K, B>\n} = dual(\n  2,\n  <K extends string, A, B>(self: ReadonlyRecord<K, A>, f: (a: A, key: NoInfer<K>) => B): Record<K, B> => {\n    const out: Record<K, B> = { ...self } as any\n    for (const key of keys(self)) {\n      out[key] = f(self[key], key)\n    }\n    return out\n  }\n)\n\n/**\n * Maps the keys of a `ReadonlyRecord` while preserving the corresponding values.\n *\n * @example\n * import { mapKeys } from \"effect/Record\"\n *\n * assert.deepStrictEqual(mapKeys({ a: 3, b: 5 }, (key) => key.toUpperCase()), { A: 3, B: 5 })\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapKeys: {\n  /**\n   * Maps the keys of a `ReadonlyRecord` while preserving the corresponding values.\n   *\n   * @example\n   * import { mapKeys } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(mapKeys({ a: 3, b: 5 }, (key) => key.toUpperCase()), { A: 3, B: 5 })\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <K extends string, A, K2 extends string>(f: (key: K, a: A) => K2): (self: ReadonlyRecord<K, A>) => Record<K2, A>\n  /**\n   * Maps the keys of a `ReadonlyRecord` while preserving the corresponding values.\n   *\n   * @example\n   * import { mapKeys } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(mapKeys({ a: 3, b: 5 }, (key) => key.toUpperCase()), { A: 3, B: 5 })\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <K extends string, A, K2 extends string>(self: ReadonlyRecord<K, A>, f: (key: K, a: A) => K2): Record<K2, A>\n} = dual(\n  2,\n  <K extends string, A, K2 extends string>(\n    self: ReadonlyRecord<K, A>,\n    f: (key: K, a: A) => K2\n  ): Record<K2, A> => {\n    const out: Record<K2, A> = {} as any\n    for (const key of keys(self)) {\n      const a = self[key]\n      out[f(key, a)] = a\n    }\n    return out\n  }\n)\n\n/**\n * Maps entries of a `ReadonlyRecord` using the provided function, allowing modification of both keys and corresponding values.\n *\n * @example\n * import { mapEntries } from \"effect/Record\"\n *\n * assert.deepStrictEqual(mapEntries({ a: 3, b: 5 }, (a, key) => [key.toUpperCase(), a + 1]), { A: 4, B: 6 })\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapEntries: {\n  /**\n   * Maps entries of a `ReadonlyRecord` using the provided function, allowing modification of both keys and corresponding values.\n   *\n   * @example\n   * import { mapEntries } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(mapEntries({ a: 3, b: 5 }, (a, key) => [key.toUpperCase(), a + 1]), { A: 4, B: 6 })\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <K extends string, A, K2 extends string, B>(\n    f: (a: A, key: K) => readonly [K2, B]\n  ): (self: ReadonlyRecord<K, A>) => Record<K2, B>\n  /**\n   * Maps entries of a `ReadonlyRecord` using the provided function, allowing modification of both keys and corresponding values.\n   *\n   * @example\n   * import { mapEntries } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(mapEntries({ a: 3, b: 5 }, (a, key) => [key.toUpperCase(), a + 1]), { A: 4, B: 6 })\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <K extends string, A, K2 extends string, B>(self: ReadonlyRecord<K, A>, f: (a: A, key: K) => [K2, B]): Record<K2, B>\n} = dual(\n  2,\n  <K extends string, A, K2 extends string, B>(\n    self: ReadonlyRecord<K, A>,\n    f: (a: A, key: K) => [K2, B]\n  ): Record<K2, B> => {\n    const out = <Record<K2, B>> {}\n    for (const key of keys(self)) {\n      const [k, b] = f(self[key], key)\n      out[k] = b\n    }\n    return out\n  }\n)\n\n/**\n * Transforms a record into a record by applying the function `f` to each key and value in the original record.\n * If the function returns `Some`, the key-value pair is included in the output record.\n *\n * @param self - The input record.\n * @param f - The transformation function.\n *\n * @example\n * import { Record, Option } from \"effect\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * const f = (a: number, key: string) => a > 2 ? Option.some(a * 2) : Option.none()\n * assert.deepStrictEqual(Record.filterMap(x, f), { c: 6 })\n *\n * @since 2.0.0\n */\nexport const filterMap: {\n  /**\n   * Transforms a record into a record by applying the function `f` to each key and value in the original record.\n   * If the function returns `Some`, the key-value pair is included in the output record.\n   *\n   * @param self - The input record.\n   * @param f - The transformation function.\n   *\n   * @example\n   * import { Record, Option } from \"effect\"\n   *\n   * const x = { a: 1, b: 2, c: 3 }\n   * const f = (a: number, key: string) => a > 2 ? Option.some(a * 2) : Option.none()\n   * assert.deepStrictEqual(Record.filterMap(x, f), { c: 6 })\n   *\n   * @since 2.0.0\n   */\n  <K extends string, A, B>(\n    f: (a: A, key: K) => Option.Option<B>\n  ): (self: ReadonlyRecord<K, A>) => Record<ReadonlyRecord.NonLiteralKey<K>, B>\n  /**\n   * Transforms a record into a record by applying the function `f` to each key and value in the original record.\n   * If the function returns `Some`, the key-value pair is included in the output record.\n   *\n   * @param self - The input record.\n   * @param f - The transformation function.\n   *\n   * @example\n   * import { Record, Option } from \"effect\"\n   *\n   * const x = { a: 1, b: 2, c: 3 }\n   * const f = (a: number, key: string) => a > 2 ? Option.some(a * 2) : Option.none()\n   * assert.deepStrictEqual(Record.filterMap(x, f), { c: 6 })\n   *\n   * @since 2.0.0\n   */\n  <K extends string, A, B>(\n    self: ReadonlyRecord<K, A>,\n    f: (a: A, key: K) => Option.Option<B>\n  ): Record<ReadonlyRecord.NonLiteralKey<K>, B>\n} = dual(\n  2,\n  <K extends string, A, B>(\n    self: ReadonlyRecord<K, A>,\n    f: (a: A, key: K) => Option.Option<B>\n  ): Record<ReadonlyRecord.NonLiteralKey<K>, B> => {\n    const out: Record<string, B> = empty()\n    for (const key of keys(self)) {\n      const o = f(self[key], key)\n      if (Option.isSome(o)) {\n        out[key] = o.value\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Selects properties from a record whose values match the given predicate.\n *\n * @param self - The record to filter.\n * @param predicate - A function that returns a `boolean` value to determine if the entry should be included in the new record.\n *\n * @example\n * import { filter } from \"effect/Record\"\n *\n * const x = { a: 1, b: 2, c: 3, d: 4 }\n * assert.deepStrictEqual(filter(x, (n) => n > 2), { c: 3, d: 4 })\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filter: {\n  /**\n   * Selects properties from a record whose values match the given predicate.\n   *\n   * @param self - The record to filter.\n   * @param predicate - A function that returns a `boolean` value to determine if the entry should be included in the new record.\n   *\n   * @example\n   * import { filter } from \"effect/Record\"\n   *\n   * const x = { a: 1, b: 2, c: 3, d: 4 }\n   * assert.deepStrictEqual(filter(x, (n) => n > 2), { c: 3, d: 4 })\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A, B extends A>(\n    refinement: (a: NoInfer<A>, key: K) => a is B\n  ): (self: ReadonlyRecord<K, A>) => Record<ReadonlyRecord.NonLiteralKey<K>, B>\n  /**\n   * Selects properties from a record whose values match the given predicate.\n   *\n   * @param self - The record to filter.\n   * @param predicate - A function that returns a `boolean` value to determine if the entry should be included in the new record.\n   *\n   * @example\n   * import { filter } from \"effect/Record\"\n   *\n   * const x = { a: 1, b: 2, c: 3, d: 4 }\n   * assert.deepStrictEqual(filter(x, (n) => n > 2), { c: 3, d: 4 })\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A>(\n    predicate: (A: NoInfer<A>, key: K) => boolean\n  ): (self: ReadonlyRecord<K, A>) => Record<ReadonlyRecord.NonLiteralKey<K>, A>\n  /**\n   * Selects properties from a record whose values match the given predicate.\n   *\n   * @param self - The record to filter.\n   * @param predicate - A function that returns a `boolean` value to determine if the entry should be included in the new record.\n   *\n   * @example\n   * import { filter } from \"effect/Record\"\n   *\n   * const x = { a: 1, b: 2, c: 3, d: 4 }\n   * assert.deepStrictEqual(filter(x, (n) => n > 2), { c: 3, d: 4 })\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A, B extends A>(\n    self: ReadonlyRecord<K, A>,\n    refinement: (a: A, key: K) => a is B\n  ): Record<ReadonlyRecord.NonLiteralKey<K>, B>\n  /**\n   * Selects properties from a record whose values match the given predicate.\n   *\n   * @param self - The record to filter.\n   * @param predicate - A function that returns a `boolean` value to determine if the entry should be included in the new record.\n   *\n   * @example\n   * import { filter } from \"effect/Record\"\n   *\n   * const x = { a: 1, b: 2, c: 3, d: 4 }\n   * assert.deepStrictEqual(filter(x, (n) => n > 2), { c: 3, d: 4 })\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A>(\n    self: ReadonlyRecord<K, A>,\n    predicate: (a: A, key: K) => boolean\n  ): Record<ReadonlyRecord.NonLiteralKey<K>, A>\n} = dual(\n  2,\n  <K extends string, A>(\n    self: ReadonlyRecord<K, A>,\n    predicate: (a: A, key: K) => boolean\n  ): Record<ReadonlyRecord.NonLiteralKey<K>, A> => {\n    const out: Record<string, A> = empty()\n    for (const key of keys(self)) {\n      if (predicate(self[key], key)) {\n        out[key] = self[key]\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Given a record with `Option` values, returns a new record containing only the `Some` values, preserving the original keys.\n *\n * @param self - A record with `Option` values.\n *\n * @example\n * import { Record, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.getSomes({ a: Option.some(1), b: Option.none(), c: Option.some(2) }),\n *   { a: 1, c: 2 }\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getSomes: <K extends string, A>(\n  self: ReadonlyRecord<K, Option.Option<A>>\n) => Record<ReadonlyRecord.NonLiteralKey<K>, A> = filterMap(\n  identity\n)\n\n/**\n * Given a record with `Either` values, returns a new record containing only the `Left` values, preserving the original keys.\n *\n * @example\n * import { Record, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.getLefts({ a: Either.right(1), b: Either.left(\"err\"), c: Either.right(2) }),\n *   { b: \"err\" }\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getLefts = <K extends string, R, L>(\n  self: ReadonlyRecord<K, Either<R, L>>\n): Record<ReadonlyRecord.NonLiteralKey<K>, L> => {\n  const out: Record<string, L> = empty()\n  for (const key of keys(self)) {\n    const value = self[key]\n    if (E.isLeft(value)) {\n      out[key] = value.left\n    }\n  }\n\n  return out\n}\n\n/**\n * Given a record with `Either` values, returns a new record containing only the `Right` values, preserving the original keys.\n *\n * @example\n * import { Record, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.getRights({ a: Either.right(1), b: Either.left(\"err\"), c: Either.right(2) }),\n *   { a: 1, c: 2 }\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getRights = <K extends string, R, L>(\n  self: ReadonlyRecord<K, Either<R, L>>\n): Record<string, R> => {\n  const out: Record<string, R> = empty()\n  for (const key of keys(self)) {\n    const value = self[key]\n    if (E.isRight(value)) {\n      out[key] = value.right\n    }\n  }\n\n  return out\n}\n\n/**\n * Partitions the elements of a record into two groups: those that match a predicate, and those that don't.\n *\n * @param self - The record to partition.\n * @param f - The predicate function to apply to each element.\n *\n * @example\n * import { Record, Either } from \"effect\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * const f = (n: number) => (n % 2 === 0 ? Either.right(n) : Either.left(n))\n * assert.deepStrictEqual(Record.partitionMap(x, f), [{ a: 1, c: 3 }, { b: 2}])\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partitionMap: {\n  /**\n   * Partitions the elements of a record into two groups: those that match a predicate, and those that don't.\n   *\n   * @param self - The record to partition.\n   * @param f - The predicate function to apply to each element.\n   *\n   * @example\n   * import { Record, Either } from \"effect\"\n   *\n   * const x = { a: 1, b: 2, c: 3 }\n   * const f = (n: number) => (n % 2 === 0 ? Either.right(n) : Either.left(n))\n   * assert.deepStrictEqual(Record.partitionMap(x, f), [{ a: 1, c: 3 }, { b: 2}])\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A, B, C>(f: (a: A, key: K) => Either<C, B>): (\n    self: ReadonlyRecord<K, A>\n  ) => [left: Record<ReadonlyRecord.NonLiteralKey<K>, B>, right: Record<ReadonlyRecord.NonLiteralKey<K>, C>]\n  /**\n   * Partitions the elements of a record into two groups: those that match a predicate, and those that don't.\n   *\n   * @param self - The record to partition.\n   * @param f - The predicate function to apply to each element.\n   *\n   * @example\n   * import { Record, Either } from \"effect\"\n   *\n   * const x = { a: 1, b: 2, c: 3 }\n   * const f = (n: number) => (n % 2 === 0 ? Either.right(n) : Either.left(n))\n   * assert.deepStrictEqual(Record.partitionMap(x, f), [{ a: 1, c: 3 }, { b: 2}])\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A, B, C>(\n    self: ReadonlyRecord<K, A>,\n    f: (a: A, key: K) => Either<C, B>\n  ): [left: Record<ReadonlyRecord.NonLiteralKey<K>, B>, right: Record<ReadonlyRecord.NonLiteralKey<K>, C>]\n} = dual(\n  2,\n  <K extends string, A, B, C>(\n    self: ReadonlyRecord<K, A>,\n    f: (a: A, key: K) => Either<C, B>\n  ): [left: Record<ReadonlyRecord.NonLiteralKey<K>, B>, right: Record<ReadonlyRecord.NonLiteralKey<K>, C>] => {\n    const left: Record<string, B> = empty()\n    const right: Record<string, C> = empty()\n    for (const key of keys(self)) {\n      const e = f(self[key], key)\n      if (E.isLeft(e)) {\n        left[key] = e.left\n      } else {\n        right[key] = e.right\n      }\n    }\n    return [left, right]\n  }\n)\n\n/**\n * Partitions a record of `Either` values into two separate records,\n * one with the `Left` values and one with the `Right` values.\n *\n * @param self - the record to partition.\n *\n * @example\n * import { Record, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.separate({ a: Either.left(\"e\"), b: Either.right(1) }),\n *   [{ a: \"e\" }, { b: 1 }]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const separate: <K extends string, A, B>(\n  self: ReadonlyRecord<K, Either<B, A>>\n) => [Record<ReadonlyRecord.NonLiteralKey<K>, A>, Record<ReadonlyRecord.NonLiteralKey<K>, B>] = partitionMap(identity)\n\n/**\n * Partitions a record into two separate records based on the result of a predicate function.\n *\n * @param self - The input record to partition.\n * @param predicate - The partitioning function to determine the partitioning of each value of the record.\n *\n * @example\n * import { partition } from \"effect/Record\"\n *\n * assert.deepStrictEqual(\n *   partition({ a: 1, b: 3 }, (n) => n > 2),\n *   [{ a: 1 }, { b: 3 }]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partition: {\n  /**\n   * Partitions a record into two separate records based on the result of a predicate function.\n   *\n   * @param self - The input record to partition.\n   * @param predicate - The partitioning function to determine the partitioning of each value of the record.\n   *\n   * @example\n   * import { partition } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(\n   *   partition({ a: 1, b: 3 }, (n) => n > 2),\n   *   [{ a: 1 }, { b: 3 }]\n   * )\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A, B extends A>(refinement: (a: NoInfer<A>, key: K) => a is B): (\n    self: ReadonlyRecord<K, A>\n  ) => [\n    excluded: Record<ReadonlyRecord.NonLiteralKey<K>, Exclude<A, B>>,\n    satisfying: Record<ReadonlyRecord.NonLiteralKey<K>, B>\n  ]\n  /**\n   * Partitions a record into two separate records based on the result of a predicate function.\n   *\n   * @param self - The input record to partition.\n   * @param predicate - The partitioning function to determine the partitioning of each value of the record.\n   *\n   * @example\n   * import { partition } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(\n   *   partition({ a: 1, b: 3 }, (n) => n > 2),\n   *   [{ a: 1 }, { b: 3 }]\n   * )\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A>(predicate: (a: NoInfer<A>, key: K) => boolean): (\n    self: ReadonlyRecord<K, A>\n  ) => [excluded: Record<ReadonlyRecord.NonLiteralKey<K>, A>, satisfying: Record<ReadonlyRecord.NonLiteralKey<K>, A>]\n  /**\n   * Partitions a record into two separate records based on the result of a predicate function.\n   *\n   * @param self - The input record to partition.\n   * @param predicate - The partitioning function to determine the partitioning of each value of the record.\n   *\n   * @example\n   * import { partition } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(\n   *   partition({ a: 1, b: 3 }, (n) => n > 2),\n   *   [{ a: 1 }, { b: 3 }]\n   * )\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A, B extends A>(self: ReadonlyRecord<K, A>, refinement: (a: A, key: K) => a is B): [\n    excluded: Record<ReadonlyRecord.NonLiteralKey<K>, Exclude<A, B>>,\n    satisfying: Record<ReadonlyRecord.NonLiteralKey<K>, B>\n  ]\n  /**\n   * Partitions a record into two separate records based on the result of a predicate function.\n   *\n   * @param self - The input record to partition.\n   * @param predicate - The partitioning function to determine the partitioning of each value of the record.\n   *\n   * @example\n   * import { partition } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(\n   *   partition({ a: 1, b: 3 }, (n) => n > 2),\n   *   [{ a: 1 }, { b: 3 }]\n   * )\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A>(\n    self: ReadonlyRecord<K, A>,\n    predicate: (a: A, key: K) => boolean\n  ): [excluded: Record<ReadonlyRecord.NonLiteralKey<K>, A>, satisfying: Record<ReadonlyRecord.NonLiteralKey<K>, A>]\n} = dual(\n  2,\n  <K extends string, A>(\n    self: ReadonlyRecord<K, A>,\n    predicate: (a: A, key: K) => boolean\n  ): [excluded: Record<ReadonlyRecord.NonLiteralKey<K>, A>, satisfying: Record<ReadonlyRecord.NonLiteralKey<K>, A>] => {\n    const left: Record<string, A> = empty()\n    const right: Record<string, A> = empty()\n    for (const key of keys(self)) {\n      if (predicate(self[key], key)) {\n        right[key] = self[key]\n      } else {\n        left[key] = self[key]\n      }\n    }\n    return [left, right]\n  }\n)\n\n/**\n * Retrieve the keys of a given record as an array.\n *\n * @param self - The object for which you want to get the keys.\n *\n * @since 2.0.0\n */\nexport const keys = <K extends string | symbol, A>(self: ReadonlyRecord<K, A>): Array<K & string> =>\n  Object.keys(self) as Array<K & string>\n\n/**\n * Retrieve the values of a given record as an array.\n *\n * @param self - The object for which you want to get the values.\n *\n * @since 2.0.0\n */\nexport const values = <K extends string, A>(self: ReadonlyRecord<K, A>): Array<A> => collect(self, (_, a) => a)\n\n/**\n * Add a new key-value pair or update an existing key's value in a record.\n *\n * @param self - The record to which you want to add or update a key-value pair.\n * @param key - The key you want to add or update.\n * @param values - The value you want to associate with the key.\n *\n * @example\n * import { set } from \"effect/Record\"\n *\n * assert.deepStrictEqual(set(\"a\", 5)({ a: 1, b: 2 }), { a: 5, b: 2 });\n * assert.deepStrictEqual(set(\"c\", 5)({ a: 1, b: 2 }), { a: 1, b: 2, c: 5 });\n *\n * @since 2.0.0\n */\nexport const set: {\n  /**\n   * Add a new key-value pair or update an existing key's value in a record.\n   *\n   * @param self - The record to which you want to add or update a key-value pair.\n   * @param key - The key you want to add or update.\n   * @param values - The value you want to associate with the key.\n   *\n   * @example\n   * import { set } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(set(\"a\", 5)({ a: 1, b: 2 }), { a: 5, b: 2 });\n   * assert.deepStrictEqual(set(\"c\", 5)({ a: 1, b: 2 }), { a: 1, b: 2, c: 5 });\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, K1 extends K | ((string | symbol) & {}), B>(\n    key: K1,\n    value: B\n  ): <A>(self: ReadonlyRecord<K, A>) => Record<K | K1, A | B>\n  /**\n   * Add a new key-value pair or update an existing key's value in a record.\n   *\n   * @param self - The record to which you want to add or update a key-value pair.\n   * @param key - The key you want to add or update.\n   * @param values - The value you want to associate with the key.\n   *\n   * @example\n   * import { set } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(set(\"a\", 5)({ a: 1, b: 2 }), { a: 5, b: 2 });\n   * assert.deepStrictEqual(set(\"c\", 5)({ a: 1, b: 2 }), { a: 1, b: 2, c: 5 });\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, K1 extends K | ((string | symbol) & {}), B>(\n    self: ReadonlyRecord<K, A>,\n    key: K1,\n    value: B\n  ): Record<K | K1, A | B>\n} = dual(\n  3,\n  <K extends string | symbol, A, K1 extends K | ((string | symbol) & {}), B>(\n    self: ReadonlyRecord<K, A>,\n    key: K1,\n    value: B\n  ): Record<K | K1, A | B> => {\n    return { ...self, [key]: value } as any\n  }\n)\n\n/**\n * Replace a key's value in a record and return the updated record.\n * If the key does not exist in the record, a copy of the original record is returned.\n *\n * @param self - The original record.\n * @param key - The key to replace.\n * @param value - The new value to associate with the key.\n *\n * @example\n * import { Record } from \"effect\"\n *\n * assert.deepStrictEqual(Record.replace(\"a\", 3)({ a: 1, b: 2 }), { a: 3, b: 2 });\n * assert.deepStrictEqual(Record.replace(\"c\", 3)({ a: 1, b: 2 }), { a: 1, b: 2 });\n *\n * @since 2.0.0\n */\nexport const replace: {\n  /**\n   * Replace a key's value in a record and return the updated record.\n   * If the key does not exist in the record, a copy of the original record is returned.\n   *\n   * @param self - The original record.\n   * @param key - The key to replace.\n   * @param value - The new value to associate with the key.\n   *\n   * @example\n   * import { Record } from \"effect\"\n   *\n   * assert.deepStrictEqual(Record.replace(\"a\", 3)({ a: 1, b: 2 }), { a: 3, b: 2 });\n   * assert.deepStrictEqual(Record.replace(\"c\", 3)({ a: 1, b: 2 }), { a: 1, b: 2 });\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, B>(key: NoInfer<K>, value: B): <A>(self: ReadonlyRecord<K, A>) => Record<K, A | B>\n  /**\n   * Replace a key's value in a record and return the updated record.\n   * If the key does not exist in the record, a copy of the original record is returned.\n   *\n   * @param self - The original record.\n   * @param key - The key to replace.\n   * @param value - The new value to associate with the key.\n   *\n   * @example\n   * import { Record } from \"effect\"\n   *\n   * assert.deepStrictEqual(Record.replace(\"a\", 3)({ a: 1, b: 2 }), { a: 3, b: 2 });\n   * assert.deepStrictEqual(Record.replace(\"c\", 3)({ a: 1, b: 2 }), { a: 1, b: 2 });\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, B>(self: ReadonlyRecord<K, A>, key: NoInfer<K>, value: B): Record<K, A | B>\n} = dual(\n  3,\n  <K extends string | symbol, A, B>(self: ReadonlyRecord<K, A>, key: NoInfer<K>, value: B): Record<K, A | B> => {\n    if (has(self, key)) {\n      return { ...self, [key]: value }\n    }\n    return { ...self }\n  }\n)\n\n/**\n * Check if all the keys and values in one record are also found in another record.\n *\n * @param self - The first record to check.\n * @param that - The second record to compare against.\n * @param equivalence - A function to compare values.\n *\n * @since 2.0.0\n */\nexport const isSubrecordBy = <A>(equivalence: Equivalence<A>): {\n  <K extends string>(that: ReadonlyRecord<K, A>): (self: ReadonlyRecord<K, A>) => boolean\n  <K extends string>(self: ReadonlyRecord<K, A>, that: ReadonlyRecord<K, A>): boolean\n} =>\n  dual(2, <K extends string>(self: ReadonlyRecord<K, A>, that: ReadonlyRecord<K, A>): boolean => {\n    for (const key of keys(self)) {\n      if (!has(that, key) || !equivalence(self[key], that[key])) {\n        return false\n      }\n    }\n    return true\n  })\n\n/**\n * Check if one record is a subrecord of another, meaning it contains all the keys and values found in the second record.\n * This comparison uses default equality checks (`Equal.equivalence()`).\n *\n * @param self - The first record to check.\n * @param that - The second record to compare against.\n *\n * @since 2.0.0\n */\nexport const isSubrecord: {\n  /**\n   * Check if one record is a subrecord of another, meaning it contains all the keys and values found in the second record.\n   * This comparison uses default equality checks (`Equal.equivalence()`).\n   *\n   * @param self - The first record to check.\n   * @param that - The second record to compare against.\n   *\n   * @since 2.0.0\n   */\n  <K extends string, A>(that: ReadonlyRecord<K, A>): (self: ReadonlyRecord<K, A>) => boolean\n  /**\n   * Check if one record is a subrecord of another, meaning it contains all the keys and values found in the second record.\n   * This comparison uses default equality checks (`Equal.equivalence()`).\n   *\n   * @param self - The first record to check.\n   * @param that - The second record to compare against.\n   *\n   * @since 2.0.0\n   */\n  <K extends string, A>(self: ReadonlyRecord<K, A>, that: ReadonlyRecord<K, A>): boolean\n} = isSubrecordBy(Equal.equivalence())\n\n/**\n * Reduce a record to a single value by combining its entries with a specified function.\n *\n * @param self - The record to reduce.\n * @param zero - The initial value of the accumulator.\n * @param f - The function to combine entries (accumulator, value, key).\n *\n * @category folding\n * @since 2.0.0\n */\nexport const reduce: {\n  /**\n   * Reduce a record to a single value by combining its entries with a specified function.\n   *\n   * @param self - The record to reduce.\n   * @param zero - The initial value of the accumulator.\n   * @param f - The function to combine entries (accumulator, value, key).\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <Z, V, K extends string>(zero: Z, f: (accumulator: Z, value: V, key: K) => Z): (self: ReadonlyRecord<K, V>) => Z\n  /**\n   * Reduce a record to a single value by combining its entries with a specified function.\n   *\n   * @param self - The record to reduce.\n   * @param zero - The initial value of the accumulator.\n   * @param f - The function to combine entries (accumulator, value, key).\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <K extends string, V, Z>(\n    self: ReadonlyRecord<K, V>,\n    zero: Z,\n    f: (accumulator: Z, value: V, key: K) => Z\n  ): Z\n} = dual(\n  3,\n  <K extends string, V, Z>(\n    self: ReadonlyRecord<K, V>,\n    zero: Z,\n    f: (accumulator: Z, value: V, key: K) => Z\n  ): Z => {\n    let out: Z = zero\n    for (const key of keys(self)) {\n      out = f(out, self[key], key)\n    }\n    return out\n  }\n)\n\n/**\n * Check if all entries in a record meet a specific condition.\n *\n * @param self - The record to check.\n * @param predicate - The condition to test entries (value, key).\n *\n * @since 2.0.0\n */\nexport const every: {\n  /**\n   * Check if all entries in a record meet a specific condition.\n   *\n   * @param self - The record to check.\n   * @param predicate - The condition to test entries (value, key).\n   *\n   * @since 2.0.0\n   */\n  <A, K extends string, B extends A>(\n    refinement: (value: A, key: K) => value is B\n  ): (self: ReadonlyRecord<K, A>) => self is ReadonlyRecord<K, B>\n  /**\n   * Check if all entries in a record meet a specific condition.\n   *\n   * @param self - The record to check.\n   * @param predicate - The condition to test entries (value, key).\n   *\n   * @since 2.0.0\n   */\n  <A, K extends string>(predicate: (value: A, key: K) => boolean): (self: ReadonlyRecord<K, A>) => boolean\n  /**\n   * Check if all entries in a record meet a specific condition.\n   *\n   * @param self - The record to check.\n   * @param predicate - The condition to test entries (value, key).\n   *\n   * @since 2.0.0\n   */\n  <A, K extends string, B extends A>(\n    self: ReadonlyRecord<K, A>,\n    refinement: (value: A, key: K) => value is B\n  ): self is ReadonlyRecord<K, B>\n  /**\n   * Check if all entries in a record meet a specific condition.\n   *\n   * @param self - The record to check.\n   * @param predicate - The condition to test entries (value, key).\n   *\n   * @since 2.0.0\n   */\n  <K extends string, A>(self: ReadonlyRecord<K, A>, predicate: (value: A, key: K) => boolean): boolean\n} = dual(\n  2,\n  <A, K extends string, B extends A>(\n    self: ReadonlyRecord<K, A>,\n    refinement: (value: A, key: K) => value is B\n  ): self is ReadonlyRecord<K, B> => {\n    for (const key of keys(self)) {\n      if (!refinement(self[key], key)) {\n        return false\n      }\n    }\n    return true\n  }\n)\n\n/**\n * Check if any entry in a record meets a specific condition.\n *\n * @param self - The record to check.\n * @param predicate - The condition to test entries (value, key).\n *\n * @since 2.0.0\n */\nexport const some: {\n  /**\n   * Check if any entry in a record meets a specific condition.\n   *\n   * @param self - The record to check.\n   * @param predicate - The condition to test entries (value, key).\n   *\n   * @since 2.0.0\n   */\n  <A, K extends string>(predicate: (value: A, key: K) => boolean): (self: ReadonlyRecord<K, A>) => boolean\n  /**\n   * Check if any entry in a record meets a specific condition.\n   *\n   * @param self - The record to check.\n   * @param predicate - The condition to test entries (value, key).\n   *\n   * @since 2.0.0\n   */\n  <K extends string, A>(self: ReadonlyRecord<K, A>, predicate: (value: A, key: K) => boolean): boolean\n} = dual(\n  2,\n  <K extends string, A>(self: ReadonlyRecord<K, A>, predicate: (value: A, key: K) => boolean): boolean => {\n    for (const key of keys(self)) {\n      if (predicate(self[key], key)) {\n        return true\n      }\n    }\n    return false\n  }\n)\n\n/**\n * Merge two records, preserving entries that exist in either of the records.\n *\n * @param self - The first record.\n * @param that - The second record to combine with the first.\n * @param combine - A function to specify how to merge entries with the same key.\n *\n * @since 2.0.0\n */\nexport const union: {\n  /**\n   * Merge two records, preserving entries that exist in either of the records.\n   *\n   * @param self - The first record.\n   * @param that - The second record to combine with the first.\n   * @param combine - A function to specify how to merge entries with the same key.\n   *\n   * @since 2.0.0\n   */\n  <K1 extends string, A, B, C>(\n    that: ReadonlyRecord<K1, B>,\n    combine: (selfValue: A, thatValue: B) => C\n  ): <K0 extends string>(self: ReadonlyRecord<K0, A>) => Record<K0 | K1, A | B | C>\n  /**\n   * Merge two records, preserving entries that exist in either of the records.\n   *\n   * @param self - The first record.\n   * @param that - The second record to combine with the first.\n   * @param combine - A function to specify how to merge entries with the same key.\n   *\n   * @since 2.0.0\n   */\n  <K0 extends string, A, K1 extends string, B, C>(\n    self: ReadonlyRecord<K0, A>,\n    that: ReadonlyRecord<K1, B>,\n    combine: (selfValue: A, thatValue: B) => C\n  ): Record<K0 | K1, A | B | C>\n} = dual(\n  3,\n  <K0 extends string, A, K1 extends string, B, C>(\n    self: ReadonlyRecord<K0, A>,\n    that: ReadonlyRecord<K1, B>,\n    combine: (selfValue: A, thatValue: B) => C\n  ): Record<K0 | K1, A | B | C> => {\n    if (isEmptyRecord(self)) {\n      return { ...that } as any\n    }\n    if (isEmptyRecord(that)) {\n      return { ...self } as any\n    }\n    const out: Record<string, A | B | C> = empty()\n    for (const key of keys(self)) {\n      if (has(that, key as any)) {\n        out[key] = combine(self[key], that[key as unknown as K1])\n      } else {\n        out[key] = self[key]\n      }\n    }\n    for (const key of keys(that)) {\n      if (!has(out, key)) {\n        out[key] = that[key]\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Merge two records, retaining only the entries that exist in both records.\n *\n * @param self - The first record.\n * @param that - The second record to merge with the first.\n * @param combine - A function to specify how to merge entries with the same key.\n *\n * @since 2.0.0\n */\nexport const intersection: {\n  /**\n   * Merge two records, retaining only the entries that exist in both records.\n   *\n   * @param self - The first record.\n   * @param that - The second record to merge with the first.\n   * @param combine - A function to specify how to merge entries with the same key.\n   *\n   * @since 2.0.0\n   */\n  <K1 extends string, A, B, C>(\n    that: ReadonlyRecord<K1, B>,\n    combine: (selfValue: A, thatValue: B) => C\n  ): <K0 extends string>(self: ReadonlyRecord<K0, A>) => Record<ReadonlyRecord.IntersectKeys<K0, K1>, C>\n  /**\n   * Merge two records, retaining only the entries that exist in both records.\n   *\n   * @param self - The first record.\n   * @param that - The second record to merge with the first.\n   * @param combine - A function to specify how to merge entries with the same key.\n   *\n   * @since 2.0.0\n   */\n  <K0 extends string, A, K1 extends string, B, C>(\n    self: ReadonlyRecord<K0, A>,\n    that: ReadonlyRecord<K1, B>,\n    combine: (selfValue: A, thatValue: B) => C\n  ): Record<ReadonlyRecord.IntersectKeys<K0, K1>, C>\n} = dual(\n  3,\n  <K0 extends string, A, K1 extends string, B, C>(\n    self: ReadonlyRecord<K0, A>,\n    that: ReadonlyRecord<K1, B>,\n    combine: (selfValue: A, thatValue: B) => C\n  ): Record<ReadonlyRecord.IntersectKeys<K0, K1>, C> => {\n    const out: Record<string, C> = empty()\n    if (isEmptyRecord(self) || isEmptyRecord(that)) {\n      return out\n    }\n    for (const key of keys(self)) {\n      if (has(that, key as any)) {\n        out[key] = combine(self[key], that[key as unknown as K1])\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Merge two records, preserving only the entries that are unique to each record.\n *\n * @param self - The first record.\n * @param that - The second record to compare with the first.\n *\n * @since 2.0.0\n */\nexport const difference: {\n  /**\n   * Merge two records, preserving only the entries that are unique to each record.\n   *\n   * @param self - The first record.\n   * @param that - The second record to compare with the first.\n   *\n   * @since 2.0.0\n   */\n  <K1 extends string, B>(\n    that: ReadonlyRecord<K1, B>\n  ): <K0 extends string, A>(self: ReadonlyRecord<K0, A>) => Record<K0 | K1, A | B>\n  /**\n   * Merge two records, preserving only the entries that are unique to each record.\n   *\n   * @param self - The first record.\n   * @param that - The second record to compare with the first.\n   *\n   * @since 2.0.0\n   */\n  <K0 extends string, A, K1 extends string, B>(\n    self: ReadonlyRecord<K0, A>,\n    that: ReadonlyRecord<K1, B>\n  ): Record<K0 | K1, A | B>\n} = dual(2, <K0 extends string, A, K1 extends string, B>(\n  self: ReadonlyRecord<K0, A>,\n  that: ReadonlyRecord<K1, B>\n): Record<K0 | K1, A | B> => {\n  if (isEmptyRecord(self)) {\n    return { ...that } as any\n  }\n  if (isEmptyRecord(that)) {\n    return { ...self } as any\n  }\n  const out = <Record<K0 | K1, A | B>> {}\n  for (const key of keys(self)) {\n    if (!has(that, key as any)) {\n      out[key] = self[key]\n    }\n  }\n  for (const key of keys(that)) {\n    if (!has(self, key as any)) {\n      out[key] = that[key]\n    }\n  }\n  return out\n})\n\n/**\n * Create an `Equivalence` for records using the provided `Equivalence` for values.\n *\n * @param equivalence - An `Equivalence` for the values contained in the records.\n *\n * @category instances\n * @since 2.0.0\n */\nexport const getEquivalence = <K extends string, A>(\n  equivalence: Equivalence<A>\n): Equivalence<ReadonlyRecord<K, A>> => {\n  const is = isSubrecordBy(equivalence)\n  return (self, that) => is(self, that) && is(that, self)\n}\n\n/**\n * Create a non-empty record from a single element.\n *\n * @param key - The key for the element.\n * @param value - The value associated with the key.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const singleton = <K extends string | symbol, A>(key: K, value: A): Record<K, A> => ({\n  [key]: value\n} as any)\n"],"names":["E","Equal","dual","identity","Option","empty","isEmptyRecord","self","keys","length","isEmptyReadonlyRecord","fromIterableWith","f","out","a","k","b","fromIterableBy","items","fromEntries","Object","collect","key","push","toEntries","value","size","has","prototype","hasOwnProperty","call","get","some","none","modify","modifyOption","replaceOption","remove","pop","map","mapKeys","mapEntries","filterMap","o","isSome","filter","predicate","getSomes","getLefts","isLeft","left","getRights","isRight","right","partitionMap","e","separate","partition","values","_","set","replace","isSubrecordBy","equivalence","that","isSubrecord","reduce","zero","every","refinement","union","combine","intersection","difference","getEquivalence","is","singleton"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3517, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3523, "column": 0}, "map": {"version":3,"file":"Tuple.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Tuple.ts"],"sourcesContent":["/**\n * This module provides utility functions for working with tuples in TypeScript.\n *\n * @since 2.0.0\n */\nimport * as Equivalence from \"./Equivalence.js\"\nimport { dual } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport * as order from \"./Order.js\"\nimport type { TupleOf } from \"./Types.js\"\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface TupleTypeLambda extends TypeLambda {\n  readonly type: [this[\"Out1\"], this[\"Target\"]]\n}\n\n/**\n * Constructs a new tuple from the provided values.\n *\n * @param elements - The list of elements to create the tuple from.\n *\n * @example\n * import { make } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(make(1, 'hello', true), [1, 'hello', true])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <A extends ReadonlyArray<any>>(...elements: A): A => elements\n\n/**\n * Return the first element of a tuple.\n *\n * @param self - A tuple of length `2`.\n *\n * @example\n * import { getFirst } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(getFirst([\"hello\", 42]), \"hello\")\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getFirst = <L, R>(self: readonly [L, R]): L => self[0]\n\n/**\n * Return the second element of a tuple.\n *\n * @param self - A tuple of length `2`.\n *\n * @example\n * import { getSecond } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(getSecond([\"hello\", 42]), 42)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getSecond = <L, R>(self: readonly [L, R]): R => self[1]\n\n/**\n * Transforms each element of tuple using the given function, treating tuple homomorphically\n *\n * @param self - A tuple.\n * @param f - The function to transform elements of the tuple.\n *\n * @example\n * import { pipe, Tuple } from \"effect\"\n *\n * const result = pipe(\n *   [\"a\", 1, false] as const,\n *   Tuple.map((el) => el.toString().toUpperCase())\n * )\n * assert.deepStrictEqual(result, ['A', '1', 'FALSE'])\n *\n * @category mapping\n * @since 3.9.0\n */\nexport const map: {\n  /**\n   * Transforms each element of tuple using the given function, treating tuple homomorphically\n   *\n   * @param self - A tuple.\n   * @param f - The function to transform elements of the tuple.\n   *\n   * @example\n   * import { pipe, Tuple } from \"effect\"\n   *\n   * const result = pipe(\n   *   [\"a\", 1, false] as const,\n   *   Tuple.map((el) => el.toString().toUpperCase())\n   * )\n   * assert.deepStrictEqual(result, ['A', '1', 'FALSE'])\n   *\n   * @category mapping\n   * @since 3.9.0\n   */\n  <T extends ReadonlyArray<any> | [], B>(fn: (element: T[number]) => B): (self: T) => TupleOf<T[\"length\"], B>\n  /**\n   * Transforms each element of tuple using the given function, treating tuple homomorphically\n   *\n   * @param self - A tuple.\n   * @param f - The function to transform elements of the tuple.\n   *\n   * @example\n   * import { pipe, Tuple } from \"effect\"\n   *\n   * const result = pipe(\n   *   [\"a\", 1, false] as const,\n   *   Tuple.map((el) => el.toString().toUpperCase())\n   * )\n   * assert.deepStrictEqual(result, ['A', '1', 'FALSE'])\n   *\n   * @category mapping\n   * @since 3.9.0\n   */\n  <B, T extends ReadonlyArray<any> | []>(self: T, fn: (element: T[number]) => B): TupleOf<T[\"length\"], B>\n} = dual(\n  2,\n  <N extends number, A, B>(\n    self: TupleOf<N, A>,\n    fn: (element: A) => B\n  ): TupleOf<N, B> => self.map((element) => fn(element)) as TupleOf<N, B>\n)\n\n/**\n * Transforms both elements of a tuple using the given functions.\n *\n * @param self - A tuple of length `2`.\n * @param f - The function to transform the first element of the tuple.\n * @param g - The function to transform the second element of the tuple.\n *\n * @example\n * import { mapBoth } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(\n *   mapBoth([\"hello\", 42], { onFirst: s => s.toUpperCase(), onSecond: n => n.toString() }),\n *   [\"HELLO\", \"42\"]\n * )\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapBoth: {\n  /**\n   * Transforms both elements of a tuple using the given functions.\n   *\n   * @param self - A tuple of length `2`.\n   * @param f - The function to transform the first element of the tuple.\n   * @param g - The function to transform the second element of the tuple.\n   *\n   * @example\n   * import { mapBoth } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(\n   *   mapBoth([\"hello\", 42], { onFirst: s => s.toUpperCase(), onSecond: n => n.toString() }),\n   *   [\"HELLO\", \"42\"]\n   * )\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <L1, L2, R1, R2>(\n    options: {\n      readonly onFirst: (e: L1) => L2\n      readonly onSecond: (a: R1) => R2\n    }\n  ): (self: readonly [L1, R1]) => [L2, R2]\n  /**\n   * Transforms both elements of a tuple using the given functions.\n   *\n   * @param self - A tuple of length `2`.\n   * @param f - The function to transform the first element of the tuple.\n   * @param g - The function to transform the second element of the tuple.\n   *\n   * @example\n   * import { mapBoth } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(\n   *   mapBoth([\"hello\", 42], { onFirst: s => s.toUpperCase(), onSecond: n => n.toString() }),\n   *   [\"HELLO\", \"42\"]\n   * )\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <L1, R1, L2, R2>(\n    self: readonly [L1, R1],\n    options: {\n      readonly onFirst: (e: L1) => L2\n      readonly onSecond: (a: R1) => R2\n    }\n  ): [L2, R2]\n} = dual(\n  2,\n  <L1, R1, L2, R2>(\n    self: readonly [L1, R1],\n    { onFirst, onSecond }: {\n      readonly onFirst: (e: L1) => L2\n      readonly onSecond: (a: R1) => R2\n    }\n  ): [L2, R2] => [onFirst(self[0]), onSecond(self[1])]\n)\n\n/**\n * Transforms the first component of a tuple using a given function.\n *\n * @param self - A tuple of length `2`.\n * @param f - The function to transform the first element of the tuple.\n *\n * @example\n * import { mapFirst } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(\n *   mapFirst([\"hello\", 42], s => s.toUpperCase()),\n *   [\"HELLO\", 42]\n * )\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapFirst: {\n  /**\n   * Transforms the first component of a tuple using a given function.\n   *\n   * @param self - A tuple of length `2`.\n   * @param f - The function to transform the first element of the tuple.\n   *\n   * @example\n   * import { mapFirst } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(\n   *   mapFirst([\"hello\", 42], s => s.toUpperCase()),\n   *   [\"HELLO\", 42]\n   * )\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <L1, L2>(f: (left: L1) => L2): <R>(self: readonly [L1, R]) => [L2, R]\n  /**\n   * Transforms the first component of a tuple using a given function.\n   *\n   * @param self - A tuple of length `2`.\n   * @param f - The function to transform the first element of the tuple.\n   *\n   * @example\n   * import { mapFirst } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(\n   *   mapFirst([\"hello\", 42], s => s.toUpperCase()),\n   *   [\"HELLO\", 42]\n   * )\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <L1, R, L2>(self: readonly [L1, R], f: (left: L1) => L2): [L2, R]\n} = dual(2, <L1, R, L2>(self: readonly [L1, R], f: (left: L1) => L2): [L2, R] => [f(self[0]), self[1]])\n\n/**\n * Transforms the second component of a tuple using a given function.\n *\n * @param self - A tuple of length `2`.\n * @param f - The function to transform the second element of the tuple.\n *\n * @example\n * import { mapSecond } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(\n *   mapSecond([\"hello\", 42], n => n.toString()),\n *   [\"hello\", \"42\"]\n * )\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapSecond: {\n  /**\n   * Transforms the second component of a tuple using a given function.\n   *\n   * @param self - A tuple of length `2`.\n   * @param f - The function to transform the second element of the tuple.\n   *\n   * @example\n   * import { mapSecond } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(\n   *   mapSecond([\"hello\", 42], n => n.toString()),\n   *   [\"hello\", \"42\"]\n   * )\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <R1, R2>(f: (right: R1) => R2): <L>(self: readonly [L, R1]) => [L, R2]\n  /**\n   * Transforms the second component of a tuple using a given function.\n   *\n   * @param self - A tuple of length `2`.\n   * @param f - The function to transform the second element of the tuple.\n   *\n   * @example\n   * import { mapSecond } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(\n   *   mapSecond([\"hello\", 42], n => n.toString()),\n   *   [\"hello\", \"42\"]\n   * )\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <L, R1, R2>(self: readonly [L, R1], f: (right: R1) => R2): [L, R2]\n} = dual(2, <L, R1, R2>(self: readonly [L, R1], f: (right: R1) => R2): [L, R2] => [self[0], f(self[1])])\n\n/**\n * Swaps the two elements of a tuple.\n *\n * @param self - A tuple of length `2`.\n *\n * @example\n * import { swap } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(swap([\"hello\", 42]), [42, \"hello\"])\n *\n * @since 2.0.0\n */\nexport const swap = <L, R>(self: readonly [L, R]): [R, L] => [self[1], self[0]]\n\n/**\n * Given a tuple of `Equivalence`s returns a new `Equivalence` that compares values of a tuple\n * by applying each `Equivalence` to the corresponding element of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const getEquivalence: <T extends ReadonlyArray<Equivalence.Equivalence<any>>>(\n  ...isEquivalents: T\n) => Equivalence.Equivalence<\n  Readonly<{ [I in keyof T]: [T[I]] extends [Equivalence.Equivalence<infer A>] ? A : never }>\n> = Equivalence.tuple\n\n/**\n * This function creates and returns a new `Order` for a tuple of values based on the given `Order`s for each element in the tuple.\n * The returned `Order` compares two tuples of the same type by applying the corresponding `Order` to each element in the tuple.\n * It is useful when you need to compare two tuples of the same type and you have a specific way of comparing each element\n * of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const getOrder: <T extends ReadonlyArray<order.Order<any>>>(\n  ...elements: T\n) => order.Order<{ [I in keyof T]: [T[I]] extends [order.Order<infer A>] ? A : never }> = order.tuple\n\n/**\n * Appends an element to the end of a tuple.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const appendElement: {\n  /**\n   * Appends an element to the end of a tuple.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <B>(that: B): <A extends ReadonlyArray<unknown>>(self: A) => [...A, B]\n  /**\n   * Appends an element to the end of a tuple.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A extends ReadonlyArray<unknown>, B>(self: A, that: B): [...A, B]\n} = dual(2, <A extends ReadonlyArray<unknown>, B>(self: A, that: B): [...A, B] => [...self, that])\n\n/**\n * Retrieves the element at a specified index from a tuple.\n *\n * @param self - A tuple from which to retrieve the element.\n * @param index - The index of the element to retrieve.\n *\n * @example\n * import { Tuple } from \"effect\"\n *\n * assert.deepStrictEqual(Tuple.at([1, 'hello', true], 1), 'hello')\n *\n * @category getters\n * @since 3.4.0\n */\nexport const at: {\n  /**\n   * Retrieves the element at a specified index from a tuple.\n   *\n   * @param self - A tuple from which to retrieve the element.\n   * @param index - The index of the element to retrieve.\n   *\n   * @example\n   * import { Tuple } from \"effect\"\n   *\n   * assert.deepStrictEqual(Tuple.at([1, 'hello', true], 1), 'hello')\n   *\n   * @category getters\n   * @since 3.4.0\n   */\n  <N extends number>(index: N): <A extends ReadonlyArray<unknown>>(self: A) => A[N]\n  /**\n   * Retrieves the element at a specified index from a tuple.\n   *\n   * @param self - A tuple from which to retrieve the element.\n   * @param index - The index of the element to retrieve.\n   *\n   * @example\n   * import { Tuple } from \"effect\"\n   *\n   * assert.deepStrictEqual(Tuple.at([1, 'hello', true], 1), 'hello')\n   *\n   * @category getters\n   * @since 3.4.0\n   */\n  <A extends ReadonlyArray<unknown>, N extends number>(self: A, index: N): A[N]\n} = dual(2, <A extends ReadonlyArray<unknown>, N extends number>(self: A, index: N): A[N] => self[index])\n\nexport {\n  /**\n   * Determine if an `Array` is a tuple with exactly `N` elements, narrowing down the type to `TupleOf`.\n   *\n   * An `Array` is considered to be a `TupleOf` if its length is exactly `N`.\n   *\n   * @param self - The `Array` to check.\n   * @param n - The exact number of elements that the `Array` should have to be considered a `TupleOf`.\n   *\n   * @example\n   * import { isTupleOf } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(isTupleOf([1, 2, 3], 3), true);\n   * assert.deepStrictEqual(isTupleOf([1, 2, 3], 2), false);\n   * assert.deepStrictEqual(isTupleOf([1, 2, 3], 4), false);\n   *\n   * const arr: number[] = [1, 2, 3];\n   * if (isTupleOf(arr, 3)) {\n   *   console.log(arr);\n   *   // ^? [number, number, number]\n   * }\n   *\n   * @category guards\n   * @since 3.3.0\n   */\n  isTupleOf,\n  /**\n   * Determine if an `Array` is a tuple with at least `N` elements, narrowing down the type to `TupleOfAtLeast`.\n   *\n   * An `Array` is considered to be a `TupleOfAtLeast` if its length is at least `N`.\n   *\n   * @param self - The `Array` to check.\n   * @param n - The minimum number of elements that the `Array` should have to be considered a `TupleOfAtLeast`.\n   *\n   * @example\n   * import { isTupleOfAtLeast } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 3), true);\n   * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 2), true);\n   * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 4), false);\n   *\n   * const arr: number[] = [1, 2, 3, 4];\n   * if (isTupleOfAtLeast(arr, 3)) {\n   *   console.log(arr);\n   *   // ^? [number, number, number, ...number[]]\n   * }\n   *\n   * @category guards\n   * @since 3.3.0\n   */\n  isTupleOfAtLeast\n} from \"./Predicate.js\"\n"],"names":["Equivalence","dual","order","make","elements","getFirst","self","getSecond","map","fn","element","mapBoth","onFirst","onSecond","mapFirst","f","mapSecond","swap","getEquivalence","tuple","getOrder","appendElement","that","at","index","isTupleOf","isTupleOfAtLeast"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAMA,SAASC,IAAI,QAAQ,eAAe;AADpC,OAAO,KAAKD,WAAW,MAAM,kBAAkB;AAG/C,OAAO,KAAKE,KAAK,MAAM,YAAY;;;;AAwB5B,MAAMC,IAAI,GAAGA,CAA+B,GAAGC,QAAW,GAAQA,QAAQ;AAe1E,MAAMC,QAAQ,IAAUC,IAAqB,GAAQA,IAAI,CAAC,CAAC,CAAC;AAe5D,MAAMC,SAAS,IAAUD,IAAqB,GAAQA,IAAI,CAAC,CAAC,CAAC;AAoB7D,MAAME,GAAG,GAAA,WAAA,+MAuCZP,OAAAA,AAAI,EACN,CAAC,EACD,CACEK,IAAmB,EACnBG,EAAqB,GACHH,IAAI,CAACE,GAAG,EAAEE,OAAO,GAAKD,EAAE,CAACC,OAAO,CAAC,CAAkB,CACxE;AAoBM,MAAMC,OAAO,GAAA,WAAA,IAkDhBV,kNAAAA,AAAI,EACN,CAAC,EACD,CACEK,IAAuB,EACvB,EAAEM,OAAO,EAAEC,QAAAA,EAGV,GACY;QAACD,OAAO,CAACN,IAAI,CAAC,CAAC,CAAC,CAAC;QAAEO,QAAQ,CAACP,IAAI,CAAC,CAAC,CAAC,CAAC;KAAC,CACrD;AAmBM,MAAMQ,QAAQ,GAAA,WAAA,+MAqCjBb,OAAAA,AAAI,EAAC,CAAC,EAAE,CAAYK,IAAsB,EAAES,CAAmB,GAAc;QAACA,CAAC,CAACT,IAAI,CAAC,CAAC,CAAC,CAAC;QAAEA,IAAI,CAAC,CAAC,CAAC;KAAC,CAAC;AAmBhG,MAAMU,SAAS,GAAA,WAAA,+MAqClBf,OAAAA,AAAI,EAAC,CAAC,EAAE,CAAYK,IAAsB,EAAES,CAAoB,GAAc;QAACT,IAAI,CAAC,CAAC,CAAC;QAAES,CAAC,CAACT,IAAI,CAAC,CAAC,CAAC,CAAC;KAAC,CAAC;AAcjG,MAAMW,IAAI,GAAUX,IAAqB,IAAa;QAACA,IAAI,CAAC,CAAC,CAAC;QAAEA,IAAI,CAAC,CAAC,CAAC;KAAC;AASxE,MAAMY,cAAc,GAIvBlB,WAAW,gMAACmB,KAAK;AAWd,MAAMC,QAAQ,GAEqElB,KAAK,gMAACiB,KAAK;AAQ9F,MAAME,aAAa,GAAA,WAAA,+MAetBpB,OAAAA,AAAI,EAAC,CAAC,EAAE,CAAsCK,IAAO,EAAEgB,IAAO,GAAgB,CAAC;WAAGhB,IAAI;QAAEgB,IAAI;KAAC,CAAC;AAgB3F,MAAMC,EAAE,GAAA,WAAA,+MA+BXtB,OAAAA,AAAI,EAAC,CAAC,EAAE,CAAqDK,IAAO,EAAEkB,KAAQ,GAAWlB,IAAI,CAACkB,KAAK,CAAC,CAAC","ignoreList":[0]}},
    {"offset": {"line": 3576, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3638, "column": 0}, "map": {"version":3,"file":"Iterable.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Iterable.ts"],"sourcesContent":["/**\n * This module provides utility functions for working with Iterables in TypeScript.\n *\n * @since 2.0.0\n */\n\nimport type { NonEmptyArray } from \"./Array.js\"\nimport type { Either } from \"./Either.js\"\nimport * as E from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport { dual, identity } from \"./Function.js\"\nimport type { Option } from \"./Option.js\"\nimport * as O from \"./Option.js\"\nimport { isBoolean } from \"./Predicate.js\"\nimport type * as Record from \"./Record.js\"\nimport * as Tuple from \"./Tuple.js\"\nimport type { NoInfer } from \"./Types.js\"\n\n/**\n * Return a `Iterable` with element `i` initialized with `f(i)`.\n *\n * If the `length` is not specified, the `Iterable` will be infinite.\n *\n * **Note**. `length` is normalized to an integer >= 1.\n *\n * @example\n * import { makeBy } from \"effect/Iterable\"\n *\n * assert.deepStrictEqual(Array.from(makeBy(n => n * 2, { length: 5 })), [0, 2, 4, 6, 8])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const makeBy = <A>(f: (i: number) => A, options?: {\n  readonly length?: number\n}): Iterable<A> => {\n  const max = options?.length !== undefined ? Math.max(1, Math.floor(options.length)) : Infinity\n  return {\n    [Symbol.iterator]() {\n      let i = 0\n      return {\n        next(): IteratorResult<A> {\n          if (i < max) {\n            return { value: f(i++), done: false }\n          }\n          return { done: true, value: undefined }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Return a `Iterable` containing a range of integers, including both endpoints.\n *\n * If `end` is omitted, the range will not have an upper bound.\n *\n * @example\n * import { range } from \"effect/Iterable\"\n *\n * assert.deepStrictEqual(Array.from(range(1, 3)), [1, 2, 3])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const range = (start: number, end?: number): Iterable<number> => {\n  if (end === undefined) {\n    return makeBy((i) => start + i)\n  }\n  return makeBy((i) => start + i, {\n    length: start <= end ? end - start + 1 : 1\n  })\n}\n\n/**\n * Return a `Iterable` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to an integer >= 1.\n *\n * @example\n * import { replicate } from \"effect/Iterable\"\n *\n * assert.deepStrictEqual(Array.from(replicate(\"a\", 3)), [\"a\", \"a\", \"a\"])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const replicate: {\n  /**\n   * Return a `Iterable` containing a value repeated the specified number of times.\n   *\n   * **Note**. `n` is normalized to an integer >= 1.\n   *\n   * @example\n   * import { replicate } from \"effect/Iterable\"\n   *\n   * assert.deepStrictEqual(Array.from(replicate(\"a\", 3)), [\"a\", \"a\", \"a\"])\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  (n: number): <A>(a: A) => Iterable<A>\n  /**\n   * Return a `Iterable` containing a value repeated the specified number of times.\n   *\n   * **Note**. `n` is normalized to an integer >= 1.\n   *\n   * @example\n   * import { replicate } from \"effect/Iterable\"\n   *\n   * assert.deepStrictEqual(Array.from(replicate(\"a\", 3)), [\"a\", \"a\", \"a\"])\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A>(a: A, n: number): Iterable<A>\n} = dual(2, <A>(a: A, n: number): Iterable<A> => makeBy(() => a, { length: n }))\n\n/**\n * Takes a record and returns an Iterable of tuples containing its keys and values.\n *\n * @param self - The record to transform.\n *\n * @example\n * import { fromRecord } from \"effect/Iterable\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * assert.deepStrictEqual(Array.from(fromRecord(x)), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const fromRecord = <K extends string, A>(self: Readonly<Record<K, A>>): Iterable<[K, A]> => ({\n  *[Symbol.iterator]() {\n    for (const key in self) {\n      if (Object.prototype.hasOwnProperty.call(self, key)) {\n        yield [key, self[key]]\n      }\n    }\n  }\n})\n\n/**\n * Prepend an element to the front of an `Iterable`, creating a new `Iterable`.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prepend: {\n  /**\n   * Prepend an element to the front of an `Iterable`, creating a new `Iterable`.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <B>(head: B): <A>(self: Iterable<A>) => Iterable<A | B>\n  /**\n   * Prepend an element to the front of an `Iterable`, creating a new `Iterable`.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, head: B): Iterable<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, head: B): Iterable<A | B> => prependAll(self, [head]))\n\n/**\n * Prepends the specified prefix iterable to the beginning of the specified iterable.\n *\n * @example\n * import { Iterable } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.from(Iterable.prependAll([1, 2], [\"a\", \"b\"])),\n *   [\"a\", \"b\", 1, 2]\n * )\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prependAll: {\n  /**\n   * Prepends the specified prefix iterable to the beginning of the specified iterable.\n   *\n   * @example\n   * import { Iterable } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Array.from(Iterable.prependAll([1, 2], [\"a\", \"b\"])),\n   *   [\"a\", \"b\", 1, 2]\n   * )\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <B>(that: Iterable<B>): <A>(self: Iterable<A>) => Iterable<A | B>\n  /**\n   * Prepends the specified prefix iterable to the beginning of the specified iterable.\n   *\n   * @example\n   * import { Iterable } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Array.from(Iterable.prependAll([1, 2], [\"a\", \"b\"])),\n   *   [\"a\", \"b\", 1, 2]\n   * )\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Iterable<A | B>\n} = dual(\n  2,\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Iterable<A | B> => appendAll(that, self)\n)\n\n/**\n * Append an element to the end of an `Iterable`, creating a new `Iterable`.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const append: {\n  /**\n   * Append an element to the end of an `Iterable`, creating a new `Iterable`.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <B>(last: B): <A>(self: Iterable<A>) => Iterable<A | B>\n  /**\n   * Append an element to the end of an `Iterable`, creating a new `Iterable`.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, last: B): Iterable<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, last: B): Iterable<A | B> => appendAll(self, [last]))\n\n/**\n * Concatenates two iterables, combining their elements.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const appendAll: {\n  /**\n   * Concatenates two iterables, combining their elements.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <B>(that: Iterable<B>): <A>(self: Iterable<A>) => Iterable<A | B>\n  /**\n   * Concatenates two iterables, combining their elements.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Iterable<A | B>\n} = dual(\n  2,\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Iterable<A | B> => ({\n    [Symbol.iterator]() {\n      const iterA = self[Symbol.iterator]()\n      let doneA = false\n      let iterB: Iterator<B>\n      return {\n        next() {\n          if (!doneA) {\n            const r = iterA.next()\n            if (r.done) {\n              doneA = true\n              iterB = that[Symbol.iterator]()\n              return iterB.next()\n            }\n            return r\n          }\n          return iterB.next()\n        }\n      }\n    }\n  })\n)\n\n/**\n * Reduce an `Iterable` from the left, keeping all intermediate results instead of only the final result.\n *\n * @category folding\n * @since 2.0.0\n */\nexport const scan: {\n  /**\n   * Reduce an `Iterable` from the left, keeping all intermediate results instead of only the final result.\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <B, A>(b: B, f: (b: B, a: A) => B): (self: Iterable<A>) => Iterable<B>\n  /**\n   * Reduce an `Iterable` from the left, keeping all intermediate results instead of only the final result.\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A) => B): Iterable<B>\n} = dual(3, <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A) => B): Iterable<B> => ({\n  [Symbol.iterator]() {\n    let acc = b\n    let iterator: Iterator<A> | undefined\n    function next() {\n      if (iterator === undefined) {\n        iterator = self[Symbol.iterator]()\n        return { done: false, value: acc }\n      }\n      const result = iterator.next()\n      if (result.done) {\n        return result\n      }\n      acc = f(acc, result.value)\n      return { done: false, value: acc }\n    }\n    return { next }\n  }\n}))\n\n/**\n * Determine if an `Iterable` is empty\n *\n * @example\n * import { isEmpty } from \"effect/Iterable\"\n *\n * assert.deepStrictEqual(isEmpty([]), true);\n * assert.deepStrictEqual(isEmpty([1, 2, 3]), false);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEmpty = <A>(self: Iterable<A>): self is Iterable<never> => {\n  const iterator = self[Symbol.iterator]()\n  return iterator.next().done === true\n}\n\n/**\n * Return the number of elements in a `Iterable`.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const size = <A>(self: Iterable<A>): number => {\n  const iterator = self[Symbol.iterator]()\n  let count = 0\n  while (!iterator.next().done) {\n    count++\n  }\n  return count\n}\n\n/**\n * Get the first element of a `Iterable`, or `None` if the `Iterable` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const head = <A>(self: Iterable<A>): Option<A> => {\n  const iterator = self[Symbol.iterator]()\n  const result = iterator.next()\n  return result.done ? O.none() : O.some(result.value)\n}\n\n/**\n * Get the first element of a `Iterable`, or throw an error if the `Iterable` is empty.\n *\n * @category getters\n * @since 3.3.0\n */\nexport const unsafeHead = <A>(self: Iterable<A>): A => {\n  const iterator = self[Symbol.iterator]()\n  const result = iterator.next()\n  if (result.done) throw new Error(\"unsafeHead: empty iterable\")\n  return result.value\n}\n\n/**\n * Keep only a max number of elements from the start of an `Iterable`, creating a new `Iterable`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const take: {\n  /**\n   * Keep only a max number of elements from the start of an `Iterable`, creating a new `Iterable`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Iterable<A>) => Iterable<A>\n  /**\n   * Keep only a max number of elements from the start of an `Iterable`, creating a new `Iterable`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): Iterable<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Iterable<A> => ({\n  [Symbol.iterator]() {\n    let i = 0\n    const iterator = self[Symbol.iterator]()\n    return {\n      next() {\n        if (i < n) {\n          i++\n          return iterator.next()\n        }\n        return { done: true, value: undefined }\n      }\n    }\n  }\n}))\n\n/**\n * Calculate the longest initial Iterable for which all element satisfy the specified predicate, creating a new `Iterable`.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const takeWhile: {\n  /**\n   * Calculate the longest initial Iterable for which all element satisfy the specified predicate, creating a new `Iterable`.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Iterable<B>\n  /**\n   * Calculate the longest initial Iterable for which all element satisfy the specified predicate, creating a new `Iterable`.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Iterable<A>\n  /**\n   * Calculate the longest initial Iterable for which all element satisfy the specified predicate, creating a new `Iterable`.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Iterable<B>\n  /**\n   * Calculate the longest initial Iterable for which all element satisfy the specified predicate, creating a new `Iterable`.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Iterable<A>\n} = dual(2, <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Iterable<A> => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]()\n    let i = 0\n    return {\n      next() {\n        const result = iterator.next()\n        if (result.done || !predicate(result.value, i++)) {\n          return { done: true, value: undefined }\n        }\n        return result\n      }\n    }\n  }\n}))\n\n/**\n * Drop a max number of elements from the start of an `Iterable`\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const drop: {\n  /**\n   * Drop a max number of elements from the start of an `Iterable`\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Iterable<A>) => Iterable<A>\n  /**\n   * Drop a max number of elements from the start of an `Iterable`\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): Iterable<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Iterable<A> => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]()\n    let i = 0\n    return {\n      next() {\n        while (i < n) {\n          const result = iterator.next()\n          if (result.done) {\n            return { done: true, value: undefined }\n          }\n          i++\n        }\n        return iterator.next()\n      }\n    }\n  }\n}))\n\n/**\n * Returns the first element that satisfies the specified\n * predicate, or `None` if no such element exists.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirst: {\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: NoInfer<A>, i: number) => Option<B>): (self: Iterable<A>) => Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option<A>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>): Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option<A>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, f: ((a: A, i: number) => boolean) | ((a: A, i: number) => Option<A>)): Option<A> => {\n    let i = 0\n    for (const a of self) {\n      const o = f(a, i)\n      if (isBoolean(o)) {\n        if (o) {\n          return O.some(a)\n        }\n      } else {\n        if (O.isSome(o)) {\n          return o\n        }\n      }\n      i++\n    }\n    return O.none()\n  }\n)\n\n/**\n * Find the last element for which a predicate holds.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findLast: {\n  /**\n   * Find the last element for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: NoInfer<A>, i: number) => Option<B>): (self: Iterable<A>) => Option<B>\n  /**\n   * Find the last element for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Option<B>\n  /**\n   * Find the last element for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option<A>\n  /**\n   * Find the last element for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>): Option<B>\n  /**\n   * Find the last element for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Option<B>\n  /**\n   * Find the last element for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option<A>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, f: ((a: A, i: number) => boolean) | ((a: A, i: number) => Option<A>)): Option<A> => {\n    let i = 0\n    let last: Option<A> = O.none()\n    for (const a of self) {\n      const o = f(a, i)\n      if (isBoolean(o)) {\n        if (o) {\n          last = O.some(a)\n        }\n      } else {\n        if (O.isSome(o)) {\n          last = o\n        }\n      }\n      i++\n    }\n    return last\n  }\n)\n\n/**\n * Takes two `Iterable`s and returns an `Iterable` of corresponding pairs.\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zip: {\n  /**\n   * Takes two `Iterable`s and returns an `Iterable` of corresponding pairs.\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <B>(that: Iterable<B>): <A>(self: Iterable<A>) => Iterable<[A, B]>\n  /**\n   * Takes two `Iterable`s and returns an `Iterable` of corresponding pairs.\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Iterable<[A, B]>\n} = dual(\n  2,\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Iterable<[A, B]> => zipWith(self, that, Tuple.make)\n)\n\n/**\n * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results. If one\n * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zipWith: {\n  /**\n   * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results. If one\n   * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <B, A, C>(that: Iterable<B>, f: (a: A, b: B) => C): (self: Iterable<A>) => Iterable<C>\n  /**\n   * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results. If one\n   * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <A, B, C>(self: Iterable<A>, that: Iterable<B>, f: (a: A, b: B) => C): Iterable<C>\n} = dual(3, <B, A, C>(self: Iterable<A>, that: Iterable<B>, f: (a: A, b: B) => C): Iterable<C> => ({\n  [Symbol.iterator]() {\n    const selfIterator = self[Symbol.iterator]()\n    const thatIterator = that[Symbol.iterator]()\n    return {\n      next() {\n        const selfResult = selfIterator.next()\n        const thatResult = thatIterator.next()\n        if (selfResult.done || thatResult.done) {\n          return { done: true, value: undefined }\n        }\n        return { done: false, value: f(selfResult.value, thatResult.value) }\n      }\n    }\n  }\n}))\n\n/**\n * Places an element in between members of an `Iterable`.\n * If the input is a non-empty array, the result is also a non-empty array.\n *\n * @since 2.0.0\n */\nexport const intersperse: {\n  /**\n   * Places an element in between members of an `Iterable`.\n   * If the input is a non-empty array, the result is also a non-empty array.\n   *\n   * @since 2.0.0\n   */\n  <B>(middle: B): <A>(self: Iterable<A>) => Iterable<A | B>\n  /**\n   * Places an element in between members of an `Iterable`.\n   * If the input is a non-empty array, the result is also a non-empty array.\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, middle: B): Iterable<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, middle: B): Iterable<A | B> => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]()\n    let next = iterator.next()\n    let emitted = false\n    return {\n      next() {\n        if (next.done) {\n          return next\n        } else if (emitted) {\n          emitted = false\n          return { done: false, value: middle }\n        }\n        emitted = true\n        const result = next\n        next = iterator.next()\n        return result\n      }\n    }\n  }\n}))\n\n/**\n * Returns a function that checks if an `Iterable` contains a given value using a provided `isEquivalent` function.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const containsWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (a: A): (self: Iterable<A>) => boolean\n  (self: Iterable<A>, a: A): boolean\n} =>\n  dual(2, (self: Iterable<A>, a: A): boolean => {\n    for (const i of self) {\n      if (isEquivalent(a, i)) {\n        return true\n      }\n    }\n    return false\n  })\n\nconst _equivalence = Equal.equivalence()\n\n/**\n * Returns a function that checks if a `Iterable` contains a given value using the default `Equivalence`.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const contains: {\n  /**\n   * Returns a function that checks if a `Iterable` contains a given value using the default `Equivalence`.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(a: A): (self: Iterable<A>) => boolean\n  /**\n   * Returns a function that checks if a `Iterable` contains a given value using the default `Equivalence`.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, a: A): boolean\n} = containsWith(_equivalence)\n\n/**\n * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the `Iterable`.\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const chunksOf: {\n  /**\n   * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n   * the `Iterable`.\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Iterable<A>) => Iterable<Array<A>>\n  /**\n   * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n   * the `Iterable`.\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): Iterable<Array<A>>\n} = dual(2, <A>(self: Iterable<A>, n: number): Iterable<Array<A>> => {\n  const safeN = Math.max(1, Math.floor(n))\n  return ({\n    [Symbol.iterator]() {\n      let iterator: Iterator<A> | undefined = self[Symbol.iterator]()\n      return {\n        next() {\n          if (iterator === undefined) {\n            return { done: true, value: undefined }\n          }\n\n          const chunk: Array<A> = []\n          for (let i = 0; i < safeN; i++) {\n            const result = iterator.next()\n            if (result.done) {\n              iterator = undefined\n              return chunk.length === 0 ? { done: true, value: undefined } : { done: false, value: chunk }\n            }\n            chunk.push(result.value)\n          }\n\n          return { done: false, value: chunk }\n        }\n      }\n    }\n  })\n})\n\n/**\n * Group equal, consecutive elements of an `Iterable` into `NonEmptyArray`s using the provided `isEquivalent` function.\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const groupWith: {\n  /**\n   * Group equal, consecutive elements of an `Iterable` into `NonEmptyArray`s using the provided `isEquivalent` function.\n   *\n   * @category grouping\n   * @since 2.0.0\n   */\n  <A>(isEquivalent: (self: A, that: A) => boolean): (self: Iterable<A>) => Iterable<NonEmptyArray<A>>\n  /**\n   * Group equal, consecutive elements of an `Iterable` into `NonEmptyArray`s using the provided `isEquivalent` function.\n   *\n   * @category grouping\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Iterable<NonEmptyArray<A>>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Iterable<NonEmptyArray<A>> => ({\n    [Symbol.iterator]() {\n      const iterator = self[Symbol.iterator]()\n      let nextResult: IteratorResult<A> | undefined\n      return {\n        next() {\n          let result: IteratorResult<A>\n          if (nextResult !== undefined) {\n            if (nextResult.done) {\n              return { done: true, value: undefined }\n            }\n            result = nextResult\n            nextResult = undefined\n          } else {\n            result = iterator.next()\n            if (result.done) {\n              return { done: true, value: undefined }\n            }\n          }\n          const chunk: NonEmptyArray<A> = [result.value]\n\n          while (true) {\n            const next = iterator.next()\n            if (next.done || !isEquivalent(result.value, next.value)) {\n              nextResult = next\n              return { done: false, value: chunk }\n            }\n            chunk.push(next.value)\n          }\n        }\n      }\n    }\n  })\n)\n\n/**\n * Group equal, consecutive elements of an `Iterable` into `NonEmptyArray`s.\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const group: <A>(self: Iterable<A>) => Iterable<NonEmptyArray<A>> = groupWith(\n  Equal.equivalence()\n)\n\n/**\n * Splits an `Iterable` into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n * function on each element, and grouping the results according to values returned\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const groupBy: {\n  /**\n   * Splits an `Iterable` into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n   * function on each element, and grouping the results according to values returned\n   *\n   * @category grouping\n   * @since 2.0.0\n   */\n  <A, K extends string | symbol>(\n    f: (a: A) => K\n  ): (self: Iterable<A>) => Record<Record.ReadonlyRecord.NonLiteralKey<K>, NonEmptyArray<A>>\n  /**\n   * Splits an `Iterable` into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n   * function on each element, and grouping the results according to values returned\n   *\n   * @category grouping\n   * @since 2.0.0\n   */\n  <A, K extends string | symbol>(\n    self: Iterable<A>,\n    f: (a: A) => K\n  ): Record<Record.ReadonlyRecord.NonLiteralKey<K>, NonEmptyArray<A>>\n} = dual(2, <A, K extends string | symbol>(\n  self: Iterable<A>,\n  f: (a: A) => K\n): Record<Record.ReadonlyRecord.NonLiteralKey<K>, NonEmptyArray<A>> => {\n  const out: Record<string | symbol, NonEmptyArray<A>> = {}\n  for (const a of self) {\n    const k = f(a)\n    if (Object.prototype.hasOwnProperty.call(out, k)) {\n      out[k].push(a)\n    } else {\n      out[k] = [a]\n    }\n  }\n  return out\n})\n\nconst constEmpty: Iterable<never> = {\n  [Symbol.iterator]() {\n    return constEmptyIterator\n  }\n}\nconst constEmptyIterator: Iterator<never> = {\n  next() {\n    return { done: true, value: undefined }\n  }\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const empty = <A = never>(): Iterable<A> => constEmpty\n\n/**\n * Constructs a new `Iterable<A>` from the specified value.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const of = <A>(a: A): Iterable<A> => [a]\n\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const map: {\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: NoInfer<A>, i: number) => B): (self: Iterable<A>) => Iterable<B>\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: NoInfer<A>, i: number) => B): Iterable<B>\n} = dual(2, <A, B>(self: Iterable<A>, f: (a: A, i: number) => B): Iterable<B> => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]()\n    let i = 0\n    return {\n      next() {\n        const result = iterator.next()\n        if (result.done) {\n          return { done: true, value: undefined }\n        }\n        return { done: false, value: f(result.value, i++) }\n      }\n    }\n  }\n}))\n\n/**\n * Applies a function to each element in an Iterable and returns a new Iterable containing the concatenated mapped elements.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMap: {\n  /**\n   * Applies a function to each element in an Iterable and returns a new Iterable containing the concatenated mapped elements.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: NoInfer<A>, i: number) => Iterable<B>): (self: Iterable<A>) => Iterable<B>\n  /**\n   * Applies a function to each element in an Iterable and returns a new Iterable containing the concatenated mapped elements.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: NoInfer<A>, i: number) => Iterable<B>): Iterable<B>\n} = dual(\n  2,\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Iterable<B>): Iterable<B> => flatten(map(self, f))\n)\n\n/**\n * Flattens an Iterable of Iterables into a single Iterable\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatten = <A>(self: Iterable<Iterable<A>>): Iterable<A> => ({\n  [Symbol.iterator]() {\n    const outerIterator = self[Symbol.iterator]()\n    let innerIterator: Iterator<A> | undefined\n    function next() {\n      if (innerIterator === undefined) {\n        const next = outerIterator.next()\n        if (next.done) {\n          return next\n        }\n        innerIterator = next.value[Symbol.iterator]()\n      }\n      const result = innerIterator.next()\n      if (result.done) {\n        innerIterator = undefined\n        return next()\n      }\n      return result\n    }\n    return { next }\n  }\n})\n\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport const filterMap: {\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A, i: number) => Option<B>): (self: Iterable<A>) => Iterable<B>\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>): Iterable<B>\n} = dual(\n  2,\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>): Iterable<B> => ({\n    [Symbol.iterator]() {\n      const iterator = self[Symbol.iterator]()\n      let i = 0\n      return {\n        next() {\n          let result = iterator.next()\n          while (!result.done) {\n            const b = f(result.value, i++)\n            if (O.isSome(b)) {\n              return { done: false, value: b.value }\n            }\n            result = iterator.next()\n          }\n          return { done: true, value: undefined }\n        }\n      }\n    }\n  })\n)\n\n/**\n * Transforms all elements of the `Iterable` for as long as the specified function returns some value\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filterMapWhile: {\n  /**\n   * Transforms all elements of the `Iterable` for as long as the specified function returns some value\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A, i: number) => Option<B>): (self: Iterable<A>) => Iterable<B>\n  /**\n   * Transforms all elements of the `Iterable` for as long as the specified function returns some value\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>): Iterable<B>\n} = dual(2, <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>) => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]()\n    let i = 0\n    return {\n      next() {\n        const result = iterator.next()\n        if (result.done) {\n          return { done: true, value: undefined }\n        }\n        const b = f(result.value, i++)\n        if (O.isSome(b)) {\n          return { done: false, value: b.value }\n        }\n        return { done: true, value: undefined }\n      }\n    }\n  }\n}))\n\n/**\n * Retrieves the `Some` values from an `Iterable` of `Option`s.\n *\n * @example\n * import { Iterable, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.from(Iterable.getSomes([Option.some(1), Option.none(), Option.some(2)])),\n *   [1, 2]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getSomes: <A>(self: Iterable<Option<A>>) => Iterable<A> = filterMap(identity)\n\n/**\n * Retrieves the `Left` values from an `Iterable` of `Either`s.\n *\n * @example\n * import { Iterable, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.from(Iterable.getLefts([Either.right(1), Either.left(\"err\"), Either.right(2)])),\n *   [\"err\"]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getLefts = <R, L>(self: Iterable<Either<R, L>>): Iterable<L> => filterMap(self, E.getLeft)\n\n/**\n * Retrieves the `Right` values from an `Iterable` of `Either`s.\n *\n * @example\n * import { Iterable, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.from(Iterable.getRights([Either.right(1), Either.left(\"err\"), Either.right(2)])),\n *   [1, 2]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getRights = <R, L>(self: Iterable<Either<R, L>>): Iterable<R> => filterMap(self, E.getRight)\n\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport const filter: {\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Iterable<B>\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Iterable<A>\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Iterable<B>\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Iterable<A>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Iterable<A> => ({\n    [Symbol.iterator]() {\n      const iterator = self[Symbol.iterator]()\n      let i = 0\n      return {\n        next() {\n          let result = iterator.next()\n          while (!result.done) {\n            if (predicate(result.value, i++)) {\n              return { done: false, value: result.value }\n            }\n            result = iterator.next()\n          }\n          return { done: true, value: undefined }\n        }\n      }\n    }\n  })\n)\n\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMapNullable: {\n  /**\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => B | null | undefined): (self: Iterable<A>) => Iterable<NonNullable<B>>\n  /**\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: A) => B | null | undefined): Iterable<NonNullable<B>>\n} = dual(\n  2,\n  <A, B>(self: Iterable<A>, f: (a: A) => B | null | undefined): Iterable<NonNullable<B>> =>\n    filterMap(self, (a) => {\n      const b = f(a)\n      return b == null ? O.none() : O.some(b)\n    })\n)\n\n/**\n * Check if a predicate holds true for some `Iterable` element.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const some: {\n  /**\n   * Check if a predicate holds true for some `Iterable` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: A, i: number) => boolean): (self: Iterable<A>) => boolean\n  /**\n   * Check if a predicate holds true for some `Iterable` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): boolean\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): boolean => {\n    let i = 0\n    for (const a of self) {\n      if (predicate(a, i++)) {\n        return true\n      }\n    }\n    return false\n  }\n)\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const unfold = <B, A>(b: B, f: (b: B) => Option<readonly [A, B]>): Iterable<A> => ({\n  [Symbol.iterator]() {\n    let next = b\n    return {\n      next() {\n        const o = f(next)\n        if (O.isNone(o)) {\n          return { done: true, value: undefined }\n        }\n        const [a, b] = o.value\n        next = b\n        return { done: false, value: a }\n      }\n    }\n  }\n})\n\n/**\n * Iterate over the `Iterable` applying `f`.\n *\n * @since 2.0.0\n */\nexport const forEach: {\n  /**\n   * Iterate over the `Iterable` applying `f`.\n   *\n   * @since 2.0.0\n   */\n  <A>(f: (a: A, i: number) => void): (self: Iterable<A>) => void\n  /**\n   * Iterate over the `Iterable` applying `f`.\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, f: (a: A, i: number) => void): void\n} = dual(2, <A>(self: Iterable<A>, f: (a: A, i: number) => void): void => {\n  let i = 0\n  for (const a of self) {\n    f(a, i++)\n  }\n})\n\n/**\n * @category folding\n * @since 2.0.0\n */\nexport const reduce: {\n  /**\n   * @category folding\n   * @since 2.0.0\n   */\n  <B, A>(b: B, f: (b: B, a: A, i: number) => B): (self: Iterable<A>) => B\n  /**\n   * @category folding\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A, i: number) => B): B\n} = dual(3, <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A, i: number) => B): B => {\n  if (Array.isArray(self)) {\n    return self.reduce(f, b)\n  }\n  let i = 0\n  let result = b\n  for (const n of self) {\n    result = f(result, n, i++)\n  }\n  return result\n})\n\n/**\n * Deduplicates adjacent elements that are identical using the provided `isEquivalent` function.\n *\n * @since 2.0.0\n */\nexport const dedupeAdjacentWith: {\n  /**\n   * Deduplicates adjacent elements that are identical using the provided `isEquivalent` function.\n   *\n   * @since 2.0.0\n   */\n  <A>(isEquivalent: (self: A, that: A) => boolean): (self: Iterable<A>) => Iterable<A>\n  /**\n   * Deduplicates adjacent elements that are identical using the provided `isEquivalent` function.\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Iterable<A>\n} = dual(2, <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Iterable<A> => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]()\n    let first = true\n    let last: A\n    function next(): IteratorResult<A> {\n      const result = iterator.next()\n      if (result.done) {\n        return { done: true, value: undefined }\n      }\n      if (first) {\n        first = false\n        last = result.value\n        return result\n      }\n      const current = result.value\n      if (isEquivalent(last, current)) {\n        return next()\n      }\n      last = current\n      return result\n    }\n    return { next }\n  }\n}))\n\n/**\n * Deduplicates adjacent elements that are identical.\n *\n * @since 2.0.0\n */\nexport const dedupeAdjacent: <A>(self: Iterable<A>) => Iterable<A> = dedupeAdjacentWith(Equal.equivalence())\n\n/**\n * Zips this Iterable crosswise with the specified Iterable using the specified combiner.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const cartesianWith: {\n  /**\n   * Zips this Iterable crosswise with the specified Iterable using the specified combiner.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B, C>(that: Iterable<B>, f: (a: A, b: B) => C): (self: Iterable<A>) => Iterable<C>\n  /**\n   * Zips this Iterable crosswise with the specified Iterable using the specified combiner.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B, C>(self: Iterable<A>, that: Iterable<B>, f: (a: A, b: B) => C): Iterable<C>\n} = dual(\n  3,\n  <A, B, C>(self: Iterable<A>, that: Iterable<B>, f: (a: A, b: B) => C): Iterable<C> =>\n    flatMap(self, (a) => map(that, (b) => f(a, b)))\n)\n\n/**\n * Zips this Iterable crosswise with the specified Iterable.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const cartesian: {\n  /**\n   * Zips this Iterable crosswise with the specified Iterable.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <B>(that: Iterable<B>): <A>(self: Iterable<A>) => Iterable<[A, B]>\n  /**\n   * Zips this Iterable crosswise with the specified Iterable.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Iterable<[A, B]>\n} = dual(\n  2,\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Iterable<[A, B]> => cartesianWith(self, that, (a, b) => [a, b])\n)\n"],"names":["E","Equal","dual","identity","O","isBoolean","Tuple","makeBy","f","options","max","length","undefined","Math","floor","Infinity","Symbol","iterator","i","next","value","done","range","start","end","replicate","a","n","fromRecord","self","key","Object","prototype","hasOwnProperty","call","prepend","head","prependAll","that","appendAll","append","last","iterA","doneA","iterB","r","scan","b","acc","result","isEmpty","size","count","none","some","unsafeHead","Error","take","takeWhile","predicate","drop","findFirst","o","isSome","findLast","zip","zipWith","make","selfIterator","thatIterator","selfResult","thatResult","intersperse","middle","emitted","containsWith","isEquivalent","_equivalence","equivalence","contains","chunksOf","safeN","chunk","push","groupWith","nextResult","group","groupBy","out","k","constEmpty","constEmptyIterator","empty","of","map","flatMap","flatten","outerIterator","innerIterator","filterMap","filterMapWhile","getSomes","getLefts","getLeft","getRights","getRight","filter","flatMapNullable","unfold","isNone","forEach","reduce","Array","isArray","dedupeAdjacentWith","first","current","dedupeAdjacent","cartesianWith","cartesian"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,SAASE,IAAI,EAAEC,QAAQ,QAAQ,eAAe;AAE9C,OAAO,KAAKC,CAAC,MAAM,aAAa;AAChC,SAASC,SAAS,QAAQ,gBAAgB;AAE1C,OAAO,KAAKC,KAAK,MAAM,YAAY;AANnC,OAAO,KAAKL,KAAK,MAAM,YAAY;AADnC,OAAO,KAAKD,CAAC,MAAM,aAAa;;;;;;;AAyBzB,MAAMO,MAAM,GAAGA,CAAIC,CAAmB,EAAEC,OAE9C,KAAiB;IAChB,MAAMC,GAAG,GAAGD,OAAO,EAAEE,MAAM,KAAKC,SAAS,GAAGC,IAAI,CAACH,GAAG,CAAC,CAAC,EAAEG,IAAI,CAACC,KAAK,CAACL,OAAO,CAACE,MAAM,CAAC,CAAC,GAAGI,QAAQ;IAC9F,OAAO;QACL,CAACC,MAAM,CAACC,QAAQ,CAAA,GAAC;YACf,IAAIC,CAAC,GAAG,CAAC;YACT,OAAO;gBACLC,IAAIA,CAAA;oBACF,IAAID,CAAC,GAAGR,GAAG,EAAE;wBACX,OAAO;4BAAEU,KAAK,EAAEZ,CAAC,CAACU,CAAC,EAAE,CAAC;4BAAEG,IAAI,EAAE;wBAAK,CAAE;oBACvC;oBACA,OAAO;wBAAEA,IAAI,EAAE,IAAI;wBAAED,KAAK,EAAER;oBAAS,CAAE;gBACzC;aACD;QACH;KACD;AACH,CAAC;AAeM,MAAMU,KAAK,GAAGA,CAACC,KAAa,EAAEC,GAAY,KAAsB;IACrE,IAAIA,GAAG,KAAKZ,SAAS,EAAE;QACrB,OAAOL,MAAM,EAAEW,CAAC,GAAKK,KAAK,GAAGL,CAAC,CAAC;IACjC;IACA,OAAOX,MAAM,EAAEW,CAAC,GAAKK,KAAK,GAAGL,CAAC,EAAE;QAC9BP,MAAM,EAAEY,KAAK,IAAIC,GAAG,GAAGA,GAAG,GAAGD,KAAK,GAAG,CAAC,GAAG;KAC1C,CAAC;AACJ,CAAC;AAeM,MAAME,SAAS,GAAA,WAAA,GA6BlBvB,mNAAAA,AAAI,EAAC,CAAC,EAAE,CAAIwB,CAAI,EAAEC,CAAS,GAAkBpB,MAAM,CAAC,IAAMmB,CAAC,EAAE;QAAEf,MAAM,EAAEgB;IAAC,CAAE,CAAC,CAAC;AAgBzE,MAAMC,UAAU,IAAyBC,IAA4B,GAAA,CAAwB;QAClG,CAAA,CAAEb,MAAM,CAACC,QAAQ,CAAA,GAAC;YAChB,IAAK,MAAMa,GAAG,IAAID,IAAI,CAAE;gBACtB,IAAIE,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACL,IAAI,EAAEC,GAAG,CAAC,EAAE;oBACnD,MAAM;wBAACA,GAAG;wBAAED,IAAI,CAACC,GAAG,CAAC;qBAAC;gBACxB;YACF;QACF;KACD,CAAC;AAQK,MAAMK,OAAO,GAAA,WAAA,+MAehBjC,OAAAA,AAAI,EAAC,CAAC,EAAE,CAAO2B,IAAiB,EAAEO,IAAO,GAAsBC,UAAU,CAACR,IAAI,EAAE;QAACO,IAAI;KAAC,CAAC,CAAC;AAgBrF,MAAMC,UAAU,GAAA,WAAA,GA+BnBnC,mNAAAA,AAAI,EACN,CAAC,EACD,CAAO2B,IAAiB,EAAES,IAAiB,GAAsBC,SAAS,CAACD,IAAI,EAAET,IAAI,CAAC,CACvF;AAQM,MAAMW,MAAM,GAAA,WAAA,+MAeftC,OAAI,AAAJA,EAAK,CAAC,EAAE,CAAO2B,IAAiB,EAAEY,IAAO,GAAsBF,SAAS,CAACV,IAAI,EAAE;QAACY,IAAI;KAAC,CAAC,CAAC;AAQpF,MAAMF,SAAS,GAAA,WAAA,OAelBrC,+MAAAA,AAAI,EACN,CAAC,EACD,CAAO2B,IAAiB,EAAES,IAAiB,GAAA,CAAuB;QAChE,CAACtB,MAAM,CAACC,QAAQ,CAAA,GAAC;YACf,MAAMyB,KAAK,GAAGb,IAAI,CAACb,MAAM,CAACC,QAAQ,CAAC,EAAE;YACrC,IAAI0B,KAAK,GAAG,KAAK;YACjB,IAAIC,KAAkB;YACtB,OAAO;gBACLzB,IAAIA,CAAA;oBACF,IAAI,CAACwB,KAAK,EAAE;wBACV,MAAME,CAAC,GAAGH,KAAK,CAACvB,IAAI,EAAE;wBACtB,IAAI0B,CAAC,CAACxB,IAAI,EAAE;4BACVsB,KAAK,GAAG,IAAI;4BACZC,KAAK,GAAGN,IAAI,CAACtB,MAAM,CAACC,QAAQ,CAAC,EAAE;4BAC/B,OAAO2B,KAAK,CAACzB,IAAI,EAAE;wBACrB;wBACA,OAAO0B,CAAC;oBACV;oBACA,OAAOD,KAAK,CAACzB,IAAI,EAAE;gBACrB;aACD;QACH;KACD,CAAC,CACH;AAQM,MAAM2B,IAAI,GAAA,WAAA,GAeb5C,mNAAAA,AAAI,EAAC,CAAC,EAAE,CAAO2B,IAAiB,EAAEkB,CAAI,EAAEvC,CAAoB,GAAA,CAAmB;QACjF,CAACQ,MAAM,CAACC,QAAQ,CAAA,GAAC;YACf,IAAI+B,GAAG,GAAGD,CAAC;YACX,IAAI9B,QAAiC;YACrC,SAASE,IAAIA,CAAA;gBACX,IAAIF,QAAQ,KAAKL,SAAS,EAAE;oBAC1BK,QAAQ,GAAGY,IAAI,CAACb,MAAM,CAACC,QAAQ,CAAC,EAAE;oBAClC,OAAO;wBAAEI,IAAI,EAAE,KAAK;wBAAED,KAAK,EAAE4B;oBAAG,CAAE;gBACpC;gBACA,MAAMC,MAAM,GAAGhC,QAAQ,CAACE,IAAI,EAAE;gBAC9B,IAAI8B,MAAM,CAAC5B,IAAI,EAAE;oBACf,OAAO4B,MAAM;gBACf;gBACAD,GAAG,GAAGxC,CAAC,CAACwC,GAAG,EAAEC,MAAM,CAAC7B,KAAK,CAAC;gBAC1B,OAAO;oBAAEC,IAAI,EAAE,KAAK;oBAAED,KAAK,EAAE4B;gBAAG,CAAE;YACpC;YACA,OAAO;gBAAE7B;YAAI,CAAE;QACjB;KACD,CAAC,CAAC;AAcI,MAAM+B,OAAO,IAAOrB,IAAiB,IAA6B;IACvE,MAAMZ,QAAQ,GAAGY,IAAI,CAACb,MAAM,CAACC,QAAQ,CAAC,EAAE;IACxC,OAAOA,QAAQ,CAACE,IAAI,EAAE,CAACE,IAAI,KAAK,IAAI;AACtC,CAAC;AAQM,MAAM8B,IAAI,IAAOtB,IAAiB,IAAY;IACnD,MAAMZ,QAAQ,GAAGY,IAAI,CAACb,MAAM,CAACC,QAAQ,CAAC,EAAE;IACxC,IAAImC,KAAK,GAAG,CAAC;IACb,MAAO,CAACnC,QAAQ,CAACE,IAAI,EAAE,CAACE,IAAI,CAAE;QAC5B+B,KAAK,EAAE;IACT;IACA,OAAOA,KAAK;AACd,CAAC;AAQM,MAAMhB,IAAI,GAAOP,IAAiB,IAAe;IACtD,MAAMZ,QAAQ,GAAGY,IAAI,CAACb,MAAM,CAACC,QAAQ,CAAC,EAAE;IACxC,MAAMgC,MAAM,GAAGhC,QAAQ,CAACE,IAAI,EAAE;IAC9B,OAAO8B,MAAM,CAAC5B,IAAI,GAAGjB,CAAC,qMAACiD,IAAI,EAAE,GAAGjD,CAAC,qMAACkD,IAAI,CAACL,MAAM,CAAC7B,KAAK,CAAC;AACtD,CAAC;AAQM,MAAMmC,UAAU,IAAO1B,IAAiB,IAAO;IACpD,MAAMZ,QAAQ,GAAGY,IAAI,CAACb,MAAM,CAACC,QAAQ,CAAC,EAAE;IACxC,MAAMgC,MAAM,GAAGhC,QAAQ,CAACE,IAAI,EAAE;IAC9B,IAAI8B,MAAM,CAAC5B,IAAI,EAAE,MAAM,IAAImC,KAAK,CAAC,4BAA4B,CAAC;IAC9D,OAAOP,MAAM,CAAC7B,KAAK;AACrB,CAAC;AAUM,MAAMqC,IAAI,GAAA,WAAA,8MAmBbvD,QAAAA,AAAI,EAAC,CAAC,EAAE,CAAI2B,IAAiB,EAAEF,CAAS,GAAA,CAAmB;QAC7D,CAACX,MAAM,CAACC,QAAQ,CAAA,GAAC;YACf,IAAIC,CAAC,GAAG,CAAC;YACT,MAAMD,QAAQ,GAAGY,IAAI,CAACb,MAAM,CAACC,QAAQ,CAAC,EAAE;YACxC,OAAO;gBACLE,IAAIA,CAAA;oBACF,IAAID,CAAC,GAAGS,CAAC,EAAE;wBACTT,CAAC,EAAE;wBACH,OAAOD,QAAQ,CAACE,IAAI,EAAE;oBACxB;oBACA,OAAO;wBAAEE,IAAI,EAAE,IAAI;wBAAED,KAAK,EAAER;oBAAS,CAAE;gBACzC;aACD;QACH;KACD,CAAC,CAAC;AAQI,MAAM8C,SAAS,GAAA,WAAA,+MA6BlBxD,OAAAA,AAAI,EAAC,CAAC,EAAE,CAAI2B,IAAiB,EAAE8B,SAAuC,GAAA,CAAmB;QAC3F,CAAC3C,MAAM,CAACC,QAAQ,CAAA,GAAC;YACf,MAAMA,QAAQ,GAAGY,IAAI,CAACb,MAAM,CAACC,QAAQ,CAAC,EAAE;YACxC,IAAIC,CAAC,GAAG,CAAC;YACT,OAAO;gBACLC,IAAIA,CAAA;oBACF,MAAM8B,MAAM,GAAGhC,QAAQ,CAACE,IAAI,EAAE;oBAC9B,IAAI8B,MAAM,CAAC5B,IAAI,IAAI,CAACsC,SAAS,CAACV,MAAM,CAAC7B,KAAK,EAAEF,CAAC,EAAE,CAAC,EAAE;wBAChD,OAAO;4BAAEG,IAAI,EAAE,IAAI;4BAAED,KAAK,EAAER;wBAAS,CAAE;oBACzC;oBACA,OAAOqC,MAAM;gBACf;aACD;QACH;KACD,CAAC,CAAC;AAUI,MAAMW,IAAI,GAAA,WAAA,IAmBb1D,kNAAAA,AAAI,EAAC,CAAC,EAAE,CAAI2B,IAAiB,EAAEF,CAAS,GAAA,CAAmB;QAC7D,CAACX,MAAM,CAACC,QAAQ,CAAA,GAAC;YACf,MAAMA,QAAQ,GAAGY,IAAI,CAACb,MAAM,CAACC,QAAQ,CAAC,EAAE;YACxC,IAAIC,CAAC,GAAG,CAAC;YACT,OAAO;gBACLC,IAAIA,CAAA;oBACF,MAAOD,CAAC,GAAGS,CAAC,CAAE;wBACZ,MAAMsB,MAAM,GAAGhC,QAAQ,CAACE,IAAI,EAAE;wBAC9B,IAAI8B,MAAM,CAAC5B,IAAI,EAAE;4BACf,OAAO;gCAAEA,IAAI,EAAE,IAAI;gCAAED,KAAK,EAAER;4BAAS,CAAE;wBACzC;wBACAM,CAAC,EAAE;oBACL;oBACA,OAAOD,QAAQ,CAACE,IAAI,EAAE;gBACxB;aACD;QACH;KACD,CAAC,CAAC;AASI,MAAM0C,SAAS,GAAA,WAAA,+MAiDlB3D,OAAI,AAAJA,EACF,CAAC,EACD,CAAI2B,IAAiB,EAAErB,CAAoE,KAAe;IACxG,IAAIU,CAAC,GAAG,CAAC;IACT,KAAK,MAAMQ,CAAC,IAAIG,IAAI,CAAE;QACpB,MAAMiC,CAAC,GAAGtD,CAAC,CAACkB,CAAC,EAAER,CAAC,CAAC;QACjB,IAAIb,yNAAAA,AAAS,EAACyD,CAAC,CAAC,EAAE;YAChB,IAAIA,CAAC,EAAE;gBACL,OAAO1D,CAAC,qMAACkD,IAAI,CAAC5B,CAAC,CAAC;YAClB;QACF,CAAC,MAAM;YACL,IAAItB,CAAC,qMAAC2D,MAAM,CAACD,CAAC,CAAC,EAAE;gBACf,OAAOA,CAAC;YACV;QACF;QACA5C,CAAC,EAAE;IACL;IACA,OAAOd,CAAC,qMAACiD,IAAI,EAAE;AACjB,CAAC,CACF;AAQM,MAAMW,QAAQ,GAAA,WAAA,+MA2CjB9D,OAAAA,AAAI,EACN,CAAC,EACD,CAAI2B,IAAiB,EAAErB,CAAoE,KAAe;IACxG,IAAIU,CAAC,GAAG,CAAC;IACT,IAAIuB,IAAI,GAAcrC,CAAC,qMAACiD,IAAI,EAAE;IAC9B,KAAK,MAAM3B,CAAC,IAAIG,IAAI,CAAE;QACpB,MAAMiC,CAAC,GAAGtD,CAAC,CAACkB,CAAC,EAAER,CAAC,CAAC;QACjB,iNAAIb,YAAAA,AAAS,EAACyD,CAAC,CAAC,EAAE;YAChB,IAAIA,CAAC,EAAE;gBACLrB,IAAI,GAAGrC,CAAC,qMAACkD,IAAI,CAAC5B,CAAC,CAAC;YAClB;QACF,CAAC,MAAM;YACL,IAAItB,CAAC,qMAAC2D,MAAM,CAACD,CAAC,CAAC,EAAE;gBACfrB,IAAI,GAAGqB,CAAC;YACV;QACF;QACA5C,CAAC,EAAE;IACL;IACA,OAAOuB,IAAI;AACb,CAAC,CACF;AAQM,MAAMwB,GAAG,GAAA,WAAA,+MAeZ/D,OAAAA,AAAI,EACN,CAAC,EACD,CAAO2B,IAAiB,EAAES,IAAiB,GAAuB4B,OAAO,CAACrC,IAAI,EAAES,IAAI,EAAEhC,KAAK,gMAAC6D,IAAI,CAAC,CAClG;AASM,MAAMD,OAAO,GAAA,WAAA,+MAiBhBhE,OAAAA,AAAI,EAAC,CAAC,EAAE,CAAU2B,IAAiB,EAAES,IAAiB,EAAE9B,CAAoB,GAAA,CAAmB;QACjG,CAACQ,MAAM,CAACC,QAAQ,CAAA,GAAC;YACf,MAAMmD,YAAY,GAAGvC,IAAI,CAACb,MAAM,CAACC,QAAQ,CAAC,EAAE;YAC5C,MAAMoD,YAAY,GAAG/B,IAAI,CAACtB,MAAM,CAACC,QAAQ,CAAC,EAAE;YAC5C,OAAO;gBACLE,IAAIA,CAAA;oBACF,MAAMmD,UAAU,GAAGF,YAAY,CAACjD,IAAI,EAAE;oBACtC,MAAMoD,UAAU,GAAGF,YAAY,CAAClD,IAAI,EAAE;oBACtC,IAAImD,UAAU,CAACjD,IAAI,IAAIkD,UAAU,CAAClD,IAAI,EAAE;wBACtC,OAAO;4BAAEA,IAAI,EAAE,IAAI;4BAAED,KAAK,EAAER;wBAAS,CAAE;oBACzC;oBACA,OAAO;wBAAES,IAAI,EAAE,KAAK;wBAAED,KAAK,EAAEZ,CAAC,CAAC8D,UAAU,CAAClD,KAAK,EAAEmD,UAAU,CAACnD,KAAK;oBAAC,CAAE;gBACtE;aACD;QACH;KACD,CAAC,CAAC;AAQI,MAAMoD,WAAW,GAAA,WAAA,+MAepBtE,OAAAA,AAAI,EAAC,CAAC,EAAE,CAAO2B,IAAiB,EAAE4C,MAAS,GAAA,CAAuB;QACpE,CAACzD,MAAM,CAACC,QAAQ,CAAA,GAAC;YACf,MAAMA,QAAQ,GAAGY,IAAI,CAACb,MAAM,CAACC,QAAQ,CAAC,EAAE;YACxC,IAAIE,IAAI,GAAGF,QAAQ,CAACE,IAAI,EAAE;YAC1B,IAAIuD,OAAO,GAAG,KAAK;YACnB,OAAO;gBACLvD,IAAIA,CAAA;oBACF,IAAIA,IAAI,CAACE,IAAI,EAAE;wBACb,OAAOF,IAAI;oBACb,CAAC,MAAM,IAAIuD,OAAO,EAAE;wBAClBA,OAAO,GAAG,KAAK;wBACf,OAAO;4BAAErD,IAAI,EAAE,KAAK;4BAAED,KAAK,EAAEqD;wBAAM,CAAE;oBACvC;oBACAC,OAAO,GAAG,IAAI;oBACd,MAAMzB,MAAM,GAAG9B,IAAI;oBACnBA,IAAI,GAAGF,QAAQ,CAACE,IAAI,EAAE;oBACtB,OAAO8B,MAAM;gBACf;aACD;QACH;KACD,CAAC,CAAC;AAQI,MAAM0B,YAAY,IAAOC,YAA2C,+MAIzE1E,OAAAA,AAAI,EAAC,CAAC,EAAE,CAAC2B,IAAiB,EAAEH,CAAI,KAAa;QAC3C,KAAK,MAAMR,CAAC,IAAIW,IAAI,CAAE;YACpB,IAAI+C,YAAY,CAAClD,CAAC,EAAER,CAAC,CAAC,EAAE;gBACtB,OAAO,IAAI;YACb;QACF;QACA,OAAO,KAAK;IACd,CAAC,CAAC;AAEJ,MAAM2D,YAAY,GAAA,WAAA,GAAG5E,KAAK,gMAAC6E,WAAW,EAAE;AAQjC,MAAMC,QAAQ,GAAA,WAAA,GAejBJ,YAAY,CAACE,YAAY,CAAC;AASvB,MAAMG,QAAQ,GAAA,WAAA,+MAiBjB9E,OAAAA,AAAI,EAAC,CAAC,EAAE,CAAI2B,IAAiB,EAAEF,CAAS,KAAwB;IAClE,MAAMsD,KAAK,GAAGpE,IAAI,CAACH,GAAG,CAAC,CAAC,EAAEG,IAAI,CAACC,KAAK,CAACa,CAAC,CAAC,CAAC;IACxC,OAAQ;QACN,CAACX,MAAM,CAACC,QAAQ,CAAA,GAAC;YACf,IAAIA,QAAQ,GAA4BY,IAAI,CAACb,MAAM,CAACC,QAAQ,CAAC,EAAE;YAC/D,OAAO;gBACLE,IAAIA,CAAA;oBACF,IAAIF,QAAQ,KAAKL,SAAS,EAAE;wBAC1B,OAAO;4BAAES,IAAI,EAAE,IAAI;4BAAED,KAAK,EAAER;wBAAS,CAAE;oBACzC;oBAEA,MAAMsE,KAAK,GAAa,EAAE;oBAC1B,IAAK,IAAIhE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+D,KAAK,EAAE/D,CAAC,EAAE,CAAE;wBAC9B,MAAM+B,MAAM,GAAGhC,QAAQ,CAACE,IAAI,EAAE;wBAC9B,IAAI8B,MAAM,CAAC5B,IAAI,EAAE;4BACfJ,QAAQ,GAAGL,SAAS;4BACpB,OAAOsE,KAAK,CAACvE,MAAM,KAAK,CAAC,GAAG;gCAAEU,IAAI,EAAE,IAAI;gCAAED,KAAK,EAAER;4BAAS,CAAE,GAAG;gCAAES,IAAI,EAAE,KAAK;gCAAED,KAAK,EAAE8D;4BAAK,CAAE;wBAC9F;wBACAA,KAAK,CAACC,IAAI,CAAClC,MAAM,CAAC7B,KAAK,CAAC;oBAC1B;oBAEA,OAAO;wBAAEC,IAAI,EAAE,KAAK;wBAAED,KAAK,EAAE8D;oBAAK,CAAE;gBACtC;aACD;QACH;KACD;AACH,CAAC,CAAC;AAQK,MAAME,SAAS,GAAA,WAAA,+MAelBlF,OAAAA,AAAI,EACN,CAAC,EACD,CAAI2B,IAAiB,EAAE+C,YAA2C,GAAA,CAAkC;QAClG,CAAC5D,MAAM,CAACC,QAAQ,CAAA,GAAC;YACf,MAAMA,QAAQ,GAAGY,IAAI,CAACb,MAAM,CAACC,QAAQ,CAAC,EAAE;YACxC,IAAIoE,UAAyC;YAC7C,OAAO;gBACLlE,IAAIA,CAAA;oBACF,IAAI8B,MAAyB;oBAC7B,IAAIoC,UAAU,KAAKzE,SAAS,EAAE;wBAC5B,IAAIyE,UAAU,CAAChE,IAAI,EAAE;4BACnB,OAAO;gCAAEA,IAAI,EAAE,IAAI;gCAAED,KAAK,EAAER;4BAAS,CAAE;wBACzC;wBACAqC,MAAM,GAAGoC,UAAU;wBACnBA,UAAU,GAAGzE,SAAS;oBACxB,CAAC,MAAM;wBACLqC,MAAM,GAAGhC,QAAQ,CAACE,IAAI,EAAE;wBACxB,IAAI8B,MAAM,CAAC5B,IAAI,EAAE;4BACf,OAAO;gCAAEA,IAAI,EAAE,IAAI;gCAAED,KAAK,EAAER;4BAAS,CAAE;wBACzC;oBACF;oBACA,MAAMsE,KAAK,GAAqB;wBAACjC,MAAM,CAAC7B,KAAK;qBAAC;oBAE9C,MAAO,IAAI,CAAE;wBACX,MAAMD,IAAI,GAAGF,QAAQ,CAACE,IAAI,EAAE;wBAC5B,IAAIA,IAAI,CAACE,IAAI,IAAI,CAACuD,YAAY,CAAC3B,MAAM,CAAC7B,KAAK,EAAED,IAAI,CAACC,KAAK,CAAC,EAAE;4BACxDiE,UAAU,GAAGlE,IAAI;4BACjB,OAAO;gCAAEE,IAAI,EAAE,KAAK;gCAAED,KAAK,EAAE8D;4BAAK,CAAE;wBACtC;wBACAA,KAAK,CAACC,IAAI,CAAChE,IAAI,CAACC,KAAK,CAAC;oBACxB;gBACF;aACD;QACH;KACD,CAAC,CACH;AAQM,MAAMkE,KAAK,GAAA,WAAA,GAAyDF,SAAS,CAAA,WAAA,GAClFnF,KAAK,gMAAC6E,WAAW,EAAE,CACpB;AASM,MAAMS,OAAO,GAAA,WAAA,OAsBhBrF,+MAAI,AAAJA,EAAK,CAAC,EAAE,CACV2B,IAAiB,EACjBrB,CAAc,KACsD;IACpE,MAAMgF,GAAG,GAA8C,CAAA,CAAE;IACzD,KAAK,MAAM9D,CAAC,IAAIG,IAAI,CAAE;QACpB,MAAM4D,CAAC,GAAGjF,CAAC,CAACkB,CAAC,CAAC;QACd,IAAIK,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACsD,GAAG,EAAEC,CAAC,CAAC,EAAE;YAChDD,GAAG,CAACC,CAAC,CAAC,CAACN,IAAI,CAACzD,CAAC,CAAC;QAChB,CAAC,MAAM;YACL8D,GAAG,CAACC,CAAC,CAAC,GAAG;gBAAC/D,CAAC;aAAC;QACd;IACF;IACA,OAAO8D,GAAG;AACZ,CAAC,CAAC;AAEF,MAAME,UAAU,GAAoB;IAClC,CAAC1E,MAAM,CAACC,QAAQ,CAAA,GAAC;QACf,OAAO0E,kBAAkB;IAC3B;CACD;AACD,MAAMA,kBAAkB,GAAoB;IAC1CxE,IAAIA,CAAA;QACF,OAAO;YAAEE,IAAI,EAAE,IAAI;YAAED,KAAK,EAAER;QAAS,CAAE;IACzC;CACD;AAMM,MAAMgF,KAAK,GAAGA,CAAA,GAA8BF,UAAU;AAQtD,MAAMG,EAAE,IAAOnE,CAAI,GAAkB;QAACA,CAAC;KAAC;AAMxC,MAAMoE,GAAG,GAAA,WAAA,+MAWZ5F,OAAAA,AAAI,EAAC,CAAC,EAAE,CAAO2B,IAAiB,EAAErB,CAAyB,GAAA,CAAmB;QAChF,CAACQ,MAAM,CAACC,QAAQ,CAAA,GAAC;YACf,MAAMA,QAAQ,GAAGY,IAAI,CAACb,MAAM,CAACC,QAAQ,CAAC,EAAE;YACxC,IAAIC,CAAC,GAAG,CAAC;YACT,OAAO;gBACLC,IAAIA,CAAA;oBACF,MAAM8B,MAAM,GAAGhC,QAAQ,CAACE,IAAI,EAAE;oBAC9B,IAAI8B,MAAM,CAAC5B,IAAI,EAAE;wBACf,OAAO;4BAAEA,IAAI,EAAE,IAAI;4BAAED,KAAK,EAAER;wBAAS,CAAE;oBACzC;oBACA,OAAO;wBAAES,IAAI,EAAE,KAAK;wBAAED,KAAK,EAAEZ,CAAC,CAACyC,MAAM,CAAC7B,KAAK,EAAEF,CAAC,EAAE;oBAAC,CAAE;gBACrD;aACD;QACH;KACD,CAAC,CAAC;AAQI,MAAM6E,OAAO,GAAA,WAAA,+MAehB7F,OAAAA,AAAI,EACN,CAAC,EACD,CAAO2B,IAAiB,EAAErB,CAAmC,GAAkBwF,OAAO,CAACF,GAAG,CAACjE,IAAI,EAAErB,CAAC,CAAC,CAAC,CACrG;AAQM,MAAMwF,OAAO,IAAOnE,IAA2B,GAAA,CAAmB;QACvE,CAACb,MAAM,CAACC,QAAQ,CAAA,GAAC;YACf,MAAMgF,aAAa,GAAGpE,IAAI,CAACb,MAAM,CAACC,QAAQ,CAAC,EAAE;YAC7C,IAAIiF,aAAsC;YAC1C,SAAS/E,IAAIA,CAAA;gBACX,IAAI+E,aAAa,KAAKtF,SAAS,EAAE;oBAC/B,MAAMO,IAAI,GAAG8E,aAAa,CAAC9E,IAAI,EAAE;oBACjC,IAAIA,IAAI,CAACE,IAAI,EAAE;wBACb,OAAOF,IAAI;oBACb;oBACA+E,aAAa,GAAG/E,IAAI,CAACC,KAAK,CAACJ,MAAM,CAACC,QAAQ,CAAC,EAAE;gBAC/C;gBACA,MAAMgC,MAAM,GAAGiD,aAAa,CAAC/E,IAAI,EAAE;gBACnC,IAAI8B,MAAM,CAAC5B,IAAI,EAAE;oBACf6E,aAAa,GAAGtF,SAAS;oBACzB,OAAOO,IAAI,EAAE;gBACf;gBACA,OAAO8B,MAAM;YACf;YACA,OAAO;gBAAE9B;YAAI,CAAE;QACjB;KACD,CAAC;AAMK,MAAMgF,SAAS,GAAA,WAAA,+MAWlBjG,OAAAA,AAAI,EACN,CAAC,EACD,CAAO2B,IAAiB,EAAErB,CAAiC,GAAA,CAAmB;QAC5E,CAACQ,MAAM,CAACC,QAAQ,CAAA,GAAC;YACf,MAAMA,QAAQ,GAAGY,IAAI,CAACb,MAAM,CAACC,QAAQ,CAAC,EAAE;YACxC,IAAIC,CAAC,GAAG,CAAC;YACT,OAAO;gBACLC,IAAIA,CAAA;oBACF,IAAI8B,MAAM,GAAGhC,QAAQ,CAACE,IAAI,EAAE;oBAC5B,MAAO,CAAC8B,MAAM,CAAC5B,IAAI,CAAE;wBACnB,MAAM0B,CAAC,GAAGvC,CAAC,CAACyC,MAAM,CAAC7B,KAAK,EAAEF,CAAC,EAAE,CAAC;wBAC9B,IAAId,CAAC,qMAAC2D,MAAM,CAAChB,CAAC,CAAC,EAAE;4BACf,OAAO;gCAAE1B,IAAI,EAAE,KAAK;gCAAED,KAAK,EAAE2B,CAAC,CAAC3B,KAAAA;4BAAK,CAAE;wBACxC;wBACA6B,MAAM,GAAGhC,QAAQ,CAACE,IAAI,EAAE;oBAC1B;oBACA,OAAO;wBAAEE,IAAI,EAAE,IAAI;wBAAED,KAAK,EAAER;oBAAS,CAAE;gBACzC;aACD;QACH;KACD,CAAC,CACH;AAQM,MAAMwF,cAAc,GAAA,WAAA,OAevBlG,+MAAAA,AAAI,EAAC,CAAC,EAAE,CAAO2B,IAAiB,EAAErB,CAAiC,GAAA,CAAM;QAC3E,CAACQ,MAAM,CAACC,QAAQ,CAAA,GAAC;YACf,MAAMA,QAAQ,GAAGY,IAAI,CAACb,MAAM,CAACC,QAAQ,CAAC,EAAE;YACxC,IAAIC,CAAC,GAAG,CAAC;YACT,OAAO;gBACLC,IAAIA,CAAA;oBACF,MAAM8B,MAAM,GAAGhC,QAAQ,CAACE,IAAI,EAAE;oBAC9B,IAAI8B,MAAM,CAAC5B,IAAI,EAAE;wBACf,OAAO;4BAAEA,IAAI,EAAE,IAAI;4BAAED,KAAK,EAAER;wBAAS,CAAE;oBACzC;oBACA,MAAMmC,CAAC,GAAGvC,CAAC,CAACyC,MAAM,CAAC7B,KAAK,EAAEF,CAAC,EAAE,CAAC;oBAC9B,IAAId,CAAC,qMAAC2D,MAAM,CAAChB,CAAC,CAAC,EAAE;wBACf,OAAO;4BAAE1B,IAAI,EAAE,KAAK;4BAAED,KAAK,EAAE2B,CAAC,CAAC3B,KAAAA;wBAAK,CAAE;oBACxC;oBACA,OAAO;wBAAEC,IAAI,EAAE,IAAI;wBAAED,KAAK,EAAER;oBAAS,CAAE;gBACzC;aACD;QACH;KACD,CAAC,CAAC;AAgBI,MAAMyF,QAAQ,GAAA,WAAA,GAAkDF,SAAS,CAAChG,mNAAQ,CAAC;AAgBnF,MAAMmG,QAAQ,IAAUzE,IAA4B,GAAkBsE,SAAS,CAACtE,IAAI,EAAE7B,CAAC,qMAACuG,OAAO,CAAC;AAgBhG,MAAMC,SAAS,IAAU3E,IAA4B,GAAkBsE,SAAS,CAACtE,IAAI,EAAE7B,CAAC,qMAACyG,QAAQ,CAAC;AAMlG,MAAMC,MAAM,GAAA,WAAA,+MAqBfxG,OAAAA,AAAI,EACN,CAAC,EACD,CAAI2B,IAAiB,EAAE8B,SAAuC,GAAA,CAAmB;QAC/E,CAAC3C,MAAM,CAACC,QAAQ,CAAA,GAAC;YACf,MAAMA,QAAQ,GAAGY,IAAI,CAACb,MAAM,CAACC,QAAQ,CAAC,EAAE;YACxC,IAAIC,CAAC,GAAG,CAAC;YACT,OAAO;gBACLC,IAAIA,CAAA;oBACF,IAAI8B,MAAM,GAAGhC,QAAQ,CAACE,IAAI,EAAE;oBAC5B,MAAO,CAAC8B,MAAM,CAAC5B,IAAI,CAAE;wBACnB,IAAIsC,SAAS,CAACV,MAAM,CAAC7B,KAAK,EAAEF,CAAC,EAAE,CAAC,EAAE;4BAChC,OAAO;gCAAEG,IAAI,EAAE,KAAK;gCAAED,KAAK,EAAE6B,MAAM,CAAC7B,KAAAA;4BAAK,CAAE;wBAC7C;wBACA6B,MAAM,GAAGhC,QAAQ,CAACE,IAAI,EAAE;oBAC1B;oBACA,OAAO;wBAAEE,IAAI,EAAE,IAAI;wBAAED,KAAK,EAAER;oBAAS,CAAE;gBACzC;aACD;QACH;KACD,CAAC,CACH;AAMM,MAAM+F,eAAe,GAAA,WAAA,+MAWxBzG,OAAAA,AAAI,EACN,CAAC,EACD,CAAO2B,IAAiB,EAAErB,CAAiC,GACzD2F,SAAS,CAACtE,IAAI,EAAGH,CAAC,IAAI;QACpB,MAAMqB,CAAC,GAAGvC,CAAC,CAACkB,CAAC,CAAC;QACd,OAAOqB,CAAC,IAAI,IAAI,GAAG3C,CAAC,qMAACiD,IAAI,EAAE,GAAGjD,CAAC,qMAACkD,IAAI,CAACP,CAAC,CAAC;IACzC,CAAC,CAAC,CACL;AAQM,MAAMO,IAAI,GAAA,WAAA,+MAebpD,OAAAA,AAAI,EACN,CAAC,EACD,CAAI2B,IAAiB,EAAE8B,SAAuC,KAAa;IACzE,IAAIzC,CAAC,GAAG,CAAC;IACT,KAAK,MAAMQ,CAAC,IAAIG,IAAI,CAAE;QACpB,IAAI8B,SAAS,CAACjC,CAAC,EAAER,CAAC,EAAE,CAAC,EAAE;YACrB,OAAO,IAAI;QACb;IACF;IACA,OAAO,KAAK;AACd,CAAC,CACF;AAMM,MAAM0F,MAAM,GAAGA,CAAO7D,CAAI,EAAEvC,CAAoC,GAAA,CAAmB;QACxF,CAACQ,MAAM,CAACC,QAAQ,CAAA,GAAC;YACf,IAAIE,IAAI,GAAG4B,CAAC;YACZ,OAAO;gBACL5B,IAAIA,CAAA;oBACF,MAAM2C,CAAC,GAAGtD,CAAC,CAACW,IAAI,CAAC;oBACjB,IAAIf,CAAC,qMAACyG,MAAM,CAAC/C,CAAC,CAAC,EAAE;wBACf,OAAO;4BAAEzC,IAAI,EAAE,IAAI;4BAAED,KAAK,EAAER;wBAAS,CAAE;oBACzC;oBACA,MAAM,CAACc,CAAC,EAAEqB,CAAC,CAAC,GAAGe,CAAC,CAAC1C,KAAK;oBACtBD,IAAI,GAAG4B,CAAC;oBACR,OAAO;wBAAE1B,IAAI,EAAE,KAAK;wBAAED,KAAK,EAAEM;oBAAC,CAAE;gBAClC;aACD;QACH;KACD,CAAC;AAOK,MAAMoF,OAAO,GAAA,WAAA,+MAahB5G,OAAAA,AAAI,EAAC,CAAC,EAAE,CAAI2B,IAAiB,EAAErB,CAA4B,KAAU;IACvE,IAAIU,CAAC,GAAG,CAAC;IACT,KAAK,MAAMQ,CAAC,IAAIG,IAAI,CAAE;QACpBrB,CAAC,CAACkB,CAAC,EAAER,CAAC,EAAE,CAAC;IACX;AACF,CAAC,CAAC;AAMK,MAAM6F,MAAM,GAAA,WAAA,+MAWf7G,OAAAA,AAAI,EAAC,CAAC,EAAE,CAAO2B,IAAiB,EAAEkB,CAAI,EAAEvC,CAA+B,KAAO;IAChF,IAAIwG,KAAK,CAACC,OAAO,CAACpF,IAAI,CAAC,EAAE;QACvB,OAAOA,IAAI,CAACkF,MAAM,CAACvG,CAAC,EAAEuC,CAAC,CAAC;IAC1B;IACA,IAAI7B,CAAC,GAAG,CAAC;IACT,IAAI+B,MAAM,GAAGF,CAAC;IACd,KAAK,MAAMpB,CAAC,IAAIE,IAAI,CAAE;QACpBoB,MAAM,GAAGzC,CAAC,CAACyC,MAAM,EAAEtB,CAAC,EAAET,CAAC,EAAE,CAAC;IAC5B;IACA,OAAO+B,MAAM;AACf,CAAC,CAAC;AAOK,MAAMiE,kBAAkB,GAAA,WAAA,+MAa3BhH,OAAAA,AAAI,EAAC,CAAC,EAAE,CAAI2B,IAAiB,EAAE+C,YAA2C,GAAA,CAAmB;QAC/F,CAAC5D,MAAM,CAACC,QAAQ,CAAA,GAAC;YACf,MAAMA,QAAQ,GAAGY,IAAI,CAACb,MAAM,CAACC,QAAQ,CAAC,EAAE;YACxC,IAAIkG,KAAK,GAAG,IAAI;YAChB,IAAI1E,IAAO;YACX,SAAStB,IAAIA,CAAA;gBACX,MAAM8B,MAAM,GAAGhC,QAAQ,CAACE,IAAI,EAAE;gBAC9B,IAAI8B,MAAM,CAAC5B,IAAI,EAAE;oBACf,OAAO;wBAAEA,IAAI,EAAE,IAAI;wBAAED,KAAK,EAAER;oBAAS,CAAE;gBACzC;gBACA,IAAIuG,KAAK,EAAE;oBACTA,KAAK,GAAG,KAAK;oBACb1E,IAAI,GAAGQ,MAAM,CAAC7B,KAAK;oBACnB,OAAO6B,MAAM;gBACf;gBACA,MAAMmE,OAAO,GAAGnE,MAAM,CAAC7B,KAAK;gBAC5B,IAAIwD,YAAY,CAACnC,IAAI,EAAE2E,OAAO,CAAC,EAAE;oBAC/B,OAAOjG,IAAI,EAAE;gBACf;gBACAsB,IAAI,GAAG2E,OAAO;gBACd,OAAOnE,MAAM;YACf;YACA,OAAO;gBAAE9B;YAAI,CAAE;QACjB;KACD,CAAC,CAAC;AAOI,MAAMkG,cAAc,GAAA,WAAA,GAA0CH,kBAAkB,CAAA,WAAA,GAACjH,KAAK,gMAAC6E,WAAW,EAAE,CAAC;AAQrG,MAAMwC,aAAa,GAAA,WAAA,+MAetBpH,OAAAA,AAAI,EACN,CAAC,EACD,CAAU2B,IAAiB,EAAES,IAAiB,EAAE9B,CAAoB,GAClEuF,OAAO,CAAClE,IAAI,GAAGH,CAAC,GAAKoE,GAAG,CAACxD,IAAI,GAAGS,CAAC,GAAKvC,CAAC,CAACkB,CAAC,EAAEqB,CAAC,CAAC,CAAC,CAAC,CAClD;AAQM,MAAMwE,SAAS,GAAA,WAAA,+MAelBrH,OAAAA,AAAI,EACN,CAAC,EACD,CAAO2B,IAAiB,EAAES,IAAiB,GAAuBgF,aAAa,CAACzF,IAAI,EAAES,IAAI,EAAE,CAACZ,CAAC,EAAEqB,CAAC,GAAK;YAACrB,CAAC;YAAEqB,CAAC;SAAC,CAAC,CAC9G","ignoreList":[0]}},
    {"offset": {"line": 4301, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4307, "column": 0}, "map": {"version":3,"file":"Array.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Array.ts"],"sourcesContent":["/**\n * This module provides utility functions for working with arrays in TypeScript.\n *\n * @since 2.0.0\n */\n\nimport type { Either as array_ } from \"./Either.js\"\nimport * as E from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport * as Equivalence from \"./Equivalence.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { dual, identity } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport * as readonlyArray from \"./internal/array.js\"\nimport * as doNotation from \"./internal/doNotation.js\"\nimport * as EffectIterable from \"./Iterable.js\"\nimport type { Option } from \"./Option.js\"\nimport * as O from \"./Option.js\"\nimport * as Order from \"./Order.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport { isBoolean } from \"./Predicate.js\"\nimport * as Record from \"./Record.js\"\nimport * as Tuple from \"./Tuple.js\"\nimport type { NoInfer } from \"./Types.js\"\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface ReadonlyArrayTypeLambda extends TypeLambda {\n  readonly type: ReadonlyArray<this[\"Target\"]>\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport type NonEmptyReadonlyArray<A> = readonly [A, ...Array<A>]\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport type NonEmptyArray<A> = [A, ...Array<A>]\n\n/**\n * Builds a `NonEmptyArray` from an non-empty collection of elements.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.make(1, 2, 3)\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <Elements extends NonEmptyArray<any>>(\n  ...elements: Elements\n): NonEmptyArray<Elements[number]> => elements\n\n/**\n * Creates a new `Array` of the specified length.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.allocate<number>(3)\n * assert.deepStrictEqual(result.length, 3)\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const allocate = <A = never>(n: number): Array<A | undefined> => new Array(n)\n\n/**\n * Return a `NonEmptyArray` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to an integer >= 1.\n *\n * @example\n * import { makeBy } from \"effect/Array\"\n *\n * assert.deepStrictEqual(makeBy(5, n => n * 2), [0, 2, 4, 6, 8])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const makeBy = <A>(n: number, f: (i: number) => A): NonEmptyArray<A> => {\n  const max = Math.max(1, Math.floor(n))\n  const out = new Array(max)\n  for (let i = 0; i < max; i++) {\n    out[i] = f(i)\n  }\n  return out as NonEmptyArray<A>\n}\n\n/**\n * Return a `NonEmptyArray` containing a range of integers, including both endpoints.\n *\n * @example\n * import { range } from \"effect/Array\"\n *\n * assert.deepStrictEqual(range(1, 3), [1, 2, 3])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const range = (start: number, end: number): NonEmptyArray<number> =>\n  start <= end ? makeBy(end - start + 1, (i) => start + i) : [start]\n\n/**\n * Return a `NonEmptyArray` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to an integer >= 1.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * assert.deepStrictEqual(Array.replicate(\"a\", 3), [\"a\", \"a\", \"a\"])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const replicate: {\n  /**\n   * Return a `NonEmptyArray` containing a value repeated the specified number of times.\n   *\n   * **Note**. `n` is normalized to an integer >= 1.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * assert.deepStrictEqual(Array.replicate(\"a\", 3), [\"a\", \"a\", \"a\"])\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  (n: number): <A>(a: A) => NonEmptyArray<A>\n  /**\n   * Return a `NonEmptyArray` containing a value repeated the specified number of times.\n   *\n   * **Note**. `n` is normalized to an integer >= 1.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * assert.deepStrictEqual(Array.replicate(\"a\", 3), [\"a\", \"a\", \"a\"])\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A>(a: A, n: number): NonEmptyArray<A>\n} = dual(2, <A>(a: A, n: number): NonEmptyArray<A> => makeBy(n, () => a))\n\n/**\n * Creates a new `Array` from an iterable collection of values.\n * If the input is already an array, it returns the input as-is.\n * Otherwise, it converts the iterable collection to an array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const set = new Set([1, 2, 3])\n * const result = Array.fromIterable(set)\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromIterable = <A>(collection: Iterable<A>): Array<A> =>\n  Array.isArray(collection) ? collection : Array.from(collection)\n\n/**\n * Creates a new `Array` from a value that might not be an iterable.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * assert.deepStrictEqual(Array.ensure(\"a\"), [\"a\"])\n * assert.deepStrictEqual(Array.ensure([\"a\"]), [\"a\"])\n * assert.deepStrictEqual(Array.ensure([\"a\", \"b\", \"c\"]), [\"a\", \"b\", \"c\"])\n *\n * @category constructors\n * @since 3.3.0\n */\nexport const ensure = <A>(self: ReadonlyArray<A> | A): Array<A> => Array.isArray(self) ? self : [self as A]\n\n/**\n * Takes a record and returns an array of tuples containing its keys and values.\n *\n * @param self - The record to transform.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * assert.deepStrictEqual(Array.fromRecord(x), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const fromRecord: <K extends string, A>(self: Readonly<Record<K, A>>) => Array<[K, A]> = Record.toEntries\n\n/**\n * Converts an `Option` to an array.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Array.fromOption(Option.some(1)), [1])\n * assert.deepStrictEqual(Array.fromOption(Option.none()), [])\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const fromOption: <A>(self: Option<A>) => Array<A> = O.toArray\n\n/**\n * Matches the elements of an array, applying functions to cases of empty and non-empty arrays.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const match = Array.match({\n *   onEmpty: () => \"empty\",\n *   onNonEmpty: ([head, ...tail]) => `head: ${head}, tail: ${tail.length}`\n * })\n * assert.deepStrictEqual(match([]), \"empty\")\n * assert.deepStrictEqual(match([1, 2, 3]), \"head: 1, tail: 2\")\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const match: {\n  /**\n   * Matches the elements of an array, applying functions to cases of empty and non-empty arrays.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const match = Array.match({\n   *   onEmpty: () => \"empty\",\n   *   onNonEmpty: ([head, ...tail]) => `head: ${head}, tail: ${tail.length}`\n   * })\n   * assert.deepStrictEqual(match([]), \"empty\")\n   * assert.deepStrictEqual(match([1, 2, 3]), \"head: 1, tail: 2\")\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <B, A, C = B>(\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (self: NonEmptyReadonlyArray<A>) => C\n    }\n  ): (self: ReadonlyArray<A>) => B | C\n  /**\n   * Matches the elements of an array, applying functions to cases of empty and non-empty arrays.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const match = Array.match({\n   *   onEmpty: () => \"empty\",\n   *   onNonEmpty: ([head, ...tail]) => `head: ${head}, tail: ${tail.length}`\n   * })\n   * assert.deepStrictEqual(match([]), \"empty\")\n   * assert.deepStrictEqual(match([1, 2, 3]), \"head: 1, tail: 2\")\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <A, B, C = B>(\n    self: ReadonlyArray<A>,\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (self: NonEmptyReadonlyArray<A>) => C\n    }\n  ): B | C\n} = dual(2, <A, B, C = B>(\n  self: ReadonlyArray<A>,\n  { onEmpty, onNonEmpty }: {\n    readonly onEmpty: LazyArg<B>\n    readonly onNonEmpty: (self: NonEmptyReadonlyArray<A>) => C\n  }\n): B | C => isNonEmptyReadonlyArray(self) ? onNonEmpty(self) : onEmpty())\n\n/**\n * Matches the elements of an array from the left, applying functions to cases of empty and non-empty arrays.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const matchLeft = Array.matchLeft({\n *   onEmpty: () => \"empty\",\n *   onNonEmpty: (head, tail) => `head: ${head}, tail: ${tail.length}`\n * })\n * assert.deepStrictEqual(matchLeft([]), \"empty\")\n * assert.deepStrictEqual(matchLeft([1, 2, 3]), \"head: 1, tail: 2\")\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const matchLeft: {\n  /**\n   * Matches the elements of an array from the left, applying functions to cases of empty and non-empty arrays.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const matchLeft = Array.matchLeft({\n   *   onEmpty: () => \"empty\",\n   *   onNonEmpty: (head, tail) => `head: ${head}, tail: ${tail.length}`\n   * })\n   * assert.deepStrictEqual(matchLeft([]), \"empty\")\n   * assert.deepStrictEqual(matchLeft([1, 2, 3]), \"head: 1, tail: 2\")\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <B, A, C = B>(\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (head: A, tail: Array<A>) => C\n    }\n  ): (self: ReadonlyArray<A>) => B | C\n  /**\n   * Matches the elements of an array from the left, applying functions to cases of empty and non-empty arrays.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const matchLeft = Array.matchLeft({\n   *   onEmpty: () => \"empty\",\n   *   onNonEmpty: (head, tail) => `head: ${head}, tail: ${tail.length}`\n   * })\n   * assert.deepStrictEqual(matchLeft([]), \"empty\")\n   * assert.deepStrictEqual(matchLeft([1, 2, 3]), \"head: 1, tail: 2\")\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <A, B, C = B>(\n    self: ReadonlyArray<A>,\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (head: A, tail: Array<A>) => C\n    }\n  ): B | C\n} = dual(2, <A, B, C = B>(\n  self: ReadonlyArray<A>,\n  { onEmpty, onNonEmpty }: {\n    readonly onEmpty: LazyArg<B>\n    readonly onNonEmpty: (head: A, tail: Array<A>) => C\n  }\n): B | C => isNonEmptyReadonlyArray(self) ? onNonEmpty(headNonEmpty(self), tailNonEmpty(self)) : onEmpty())\n\n/**\n * Matches the elements of an array from the right, applying functions to cases of empty and non-empty arrays.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const matchRight = Array.matchRight({\n *   onEmpty: () => \"empty\",\n *   onNonEmpty: (init, last) => `init: ${init.length}, last: ${last}`\n * })\n * assert.deepStrictEqual(matchRight([]), \"empty\")\n * assert.deepStrictEqual(matchRight([1, 2, 3]), \"init: 2, last: 3\")\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const matchRight: {\n  /**\n   * Matches the elements of an array from the right, applying functions to cases of empty and non-empty arrays.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const matchRight = Array.matchRight({\n   *   onEmpty: () => \"empty\",\n   *   onNonEmpty: (init, last) => `init: ${init.length}, last: ${last}`\n   * })\n   * assert.deepStrictEqual(matchRight([]), \"empty\")\n   * assert.deepStrictEqual(matchRight([1, 2, 3]), \"init: 2, last: 3\")\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <B, A, C = B>(\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (init: Array<A>, last: A) => C\n    }\n  ): (self: ReadonlyArray<A>) => B | C\n  /**\n   * Matches the elements of an array from the right, applying functions to cases of empty and non-empty arrays.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const matchRight = Array.matchRight({\n   *   onEmpty: () => \"empty\",\n   *   onNonEmpty: (init, last) => `init: ${init.length}, last: ${last}`\n   * })\n   * assert.deepStrictEqual(matchRight([]), \"empty\")\n   * assert.deepStrictEqual(matchRight([1, 2, 3]), \"init: 2, last: 3\")\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <A, B, C = B>(\n    self: ReadonlyArray<A>,\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (init: Array<A>, last: A) => C\n    }\n  ): B | C\n} = dual(2, <A, B, C = B>(\n  self: ReadonlyArray<A>,\n  { onEmpty, onNonEmpty }: {\n    readonly onEmpty: LazyArg<B>\n    readonly onNonEmpty: (init: Array<A>, last: A) => C\n  }\n): B | C =>\n  isNonEmptyReadonlyArray(self) ?\n    onNonEmpty(initNonEmpty(self), lastNonEmpty(self)) :\n    onEmpty())\n\n/**\n * Prepend an element to the front of an `Iterable`, creating a new `NonEmptyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const original = [2, 3, 4];\n * const result = Array.prepend(original, 1);\n * assert.deepStrictEqual(result, [1, 2, 3, 4]);\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prepend: {\n  /**\n   * Prepend an element to the front of an `Iterable`, creating a new `NonEmptyArray`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const original = [2, 3, 4];\n   * const result = Array.prepend(original, 1);\n   * assert.deepStrictEqual(result, [1, 2, 3, 4]);\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <B>(head: B): <A>(self: Iterable<A>) => NonEmptyArray<A | B>\n  /**\n   * Prepend an element to the front of an `Iterable`, creating a new `NonEmptyArray`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const original = [2, 3, 4];\n   * const result = Array.prepend(original, 1);\n   * assert.deepStrictEqual(result, [1, 2, 3, 4]);\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, head: B): NonEmptyArray<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, head: B): NonEmptyArray<A | B> => [head, ...self])\n\n/**\n * Prepends the specified prefix array (or iterable) to the beginning of the specified array (or iterable).\n * If either array is non-empty, the result is also a non-empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const prefix = [0, 1];\n * const array = [2, 3];\n * const result = Array.prependAll(array, prefix);\n * assert.deepStrictEqual(result, [0, 1, 2, 3]);\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prependAll: {\n  /**\n   * Prepends the specified prefix array (or iterable) to the beginning of the specified array (or iterable).\n   * If either array is non-empty, the result is also a non-empty array.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const prefix = [0, 1];\n   * const array = [2, 3];\n   * const result = Array.prependAll(array, prefix);\n   * assert.deepStrictEqual(result, [0, 1, 2, 3]);\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <S extends Iterable<any>, T extends Iterable<any>>(\n    that: T\n  ): (self: S) => ReadonlyArray.OrNonEmpty<S, T, ReadonlyArray.Infer<S> | ReadonlyArray.Infer<T>>\n  /**\n   * Prepends the specified prefix array (or iterable) to the beginning of the specified array (or iterable).\n   * If either array is non-empty, the result is also a non-empty array.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const prefix = [0, 1];\n   * const array = [2, 3];\n   * const result = Array.prependAll(array, prefix);\n   * assert.deepStrictEqual(result, [0, 1, 2, 3]);\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: NonEmptyReadonlyArray<B>): NonEmptyArray<A | B>\n  /**\n   * Prepends the specified prefix array (or iterable) to the beginning of the specified array (or iterable).\n   * If either array is non-empty, the result is also a non-empty array.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const prefix = [0, 1];\n   * const array = [2, 3];\n   * const result = Array.prependAll(array, prefix);\n   * assert.deepStrictEqual(result, [0, 1, 2, 3]);\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, that: Iterable<B>): NonEmptyArray<A | B>\n  /**\n   * Prepends the specified prefix array (or iterable) to the beginning of the specified array (or iterable).\n   * If either array is non-empty, the result is also a non-empty array.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const prefix = [0, 1];\n   * const array = [2, 3];\n   * const result = Array.prependAll(array, prefix);\n   * assert.deepStrictEqual(result, [0, 1, 2, 3]);\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<A | B>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, that: Iterable<A>): Array<A> => fromIterable(that).concat(fromIterable(self))\n)\n\n/**\n * Append an element to the end of an `Iterable`, creating a new `NonEmptyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const original = [1, 2, 3];\n * const result = Array.append(original, 4);\n * assert.deepStrictEqual(result, [1, 2, 3, 4]);\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const append: {\n  /**\n   * Append an element to the end of an `Iterable`, creating a new `NonEmptyArray`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const original = [1, 2, 3];\n   * const result = Array.append(original, 4);\n   * assert.deepStrictEqual(result, [1, 2, 3, 4]);\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <B>(last: B): <A>(self: Iterable<A>) => NonEmptyArray<A | B>\n  /**\n   * Append an element to the end of an `Iterable`, creating a new `NonEmptyArray`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const original = [1, 2, 3];\n   * const result = Array.append(original, 4);\n   * assert.deepStrictEqual(result, [1, 2, 3, 4]);\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, last: B): NonEmptyArray<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, last: B): Array<A | B> => [...self, last])\n\n/**\n * Concatenates two arrays (or iterables), combining their elements.\n * If either array is non-empty, the result is also a non-empty array.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const appendAll: {\n  /**\n   * Concatenates two arrays (or iterables), combining their elements.\n   * If either array is non-empty, the result is also a non-empty array.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <S extends Iterable<any>, T extends Iterable<any>>(\n    that: T\n  ): (self: S) => ReadonlyArray.OrNonEmpty<S, T, ReadonlyArray.Infer<S> | ReadonlyArray.Infer<T>>\n  /**\n   * Concatenates two arrays (or iterables), combining their elements.\n   * If either array is non-empty, the result is also a non-empty array.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: NonEmptyReadonlyArray<B>): NonEmptyArray<A | B>\n  /**\n   * Concatenates two arrays (or iterables), combining their elements.\n   * If either array is non-empty, the result is also a non-empty array.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, that: Iterable<B>): NonEmptyArray<A | B>\n  /**\n   * Concatenates two arrays (or iterables), combining their elements.\n   * If either array is non-empty, the result is also a non-empty array.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<A | B>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, that: Iterable<A>): Array<A> => fromIterable(self).concat(fromIterable(that))\n)\n\n/**\n * Accumulates values from an `Iterable` starting from the left, storing\n * each intermediate result in an array. Useful for tracking the progression of\n * a value through a series of transformations.\n *\n * @example\n * import { Array } from \"effect\";\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.scan(numbers, 0, (acc, value) => acc + value)\n * assert.deepStrictEqual(result, [0, 1, 3, 6, 10])\n *\n * // Explanation:\n * // This function starts with the initial value (0 in this case)\n * // and adds each element of the array to this accumulator one by one,\n * // keeping track of the cumulative sum after each addition.\n * // Each of these sums is captured in the resulting array.\n *\n * @category folding\n * @since 2.0.0\n */\nexport const scan: {\n  /**\n   * Accumulates values from an `Iterable` starting from the left, storing\n   * each intermediate result in an array. Useful for tracking the progression of\n   * a value through a series of transformations.\n   *\n   * @example\n   * import { Array } from \"effect\";\n   *\n   * const numbers = [1, 2, 3, 4]\n   * const result = Array.scan(numbers, 0, (acc, value) => acc + value)\n   * assert.deepStrictEqual(result, [0, 1, 3, 6, 10])\n   *\n   * // Explanation:\n   * // This function starts with the initial value (0 in this case)\n   * // and adds each element of the array to this accumulator one by one,\n   * // keeping track of the cumulative sum after each addition.\n   * // Each of these sums is captured in the resulting array.\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <B, A>(b: B, f: (b: B, a: A) => B): (self: Iterable<A>) => NonEmptyArray<B>\n  /**\n   * Accumulates values from an `Iterable` starting from the left, storing\n   * each intermediate result in an array. Useful for tracking the progression of\n   * a value through a series of transformations.\n   *\n   * @example\n   * import { Array } from \"effect\";\n   *\n   * const numbers = [1, 2, 3, 4]\n   * const result = Array.scan(numbers, 0, (acc, value) => acc + value)\n   * assert.deepStrictEqual(result, [0, 1, 3, 6, 10])\n   *\n   * // Explanation:\n   * // This function starts with the initial value (0 in this case)\n   * // and adds each element of the array to this accumulator one by one,\n   * // keeping track of the cumulative sum after each addition.\n   * // Each of these sums is captured in the resulting array.\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A) => B): NonEmptyArray<B>\n} = dual(3, <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A) => B): NonEmptyArray<B> => {\n  const out: NonEmptyArray<B> = [b]\n  let i = 0\n  for (const a of self) {\n    out[i + 1] = f(out[i], a)\n    i++\n  }\n  return out\n})\n\n/**\n * Accumulates values from an `Iterable` starting from the right, storing\n * each intermediate result in an array. Useful for tracking the progression of\n * a value through a series of transformations.\n *\n * @example\n * import { Array } from \"effect\";\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.scanRight(numbers, 0, (acc, value) => acc + value)\n * assert.deepStrictEqual(result, [10, 9, 7, 4, 0])\n *\n * @category folding\n * @since 2.0.0\n */\nexport const scanRight: {\n  /**\n   * Accumulates values from an `Iterable` starting from the right, storing\n   * each intermediate result in an array. Useful for tracking the progression of\n   * a value through a series of transformations.\n   *\n   * @example\n   * import { Array } from \"effect\";\n   *\n   * const numbers = [1, 2, 3, 4]\n   * const result = Array.scanRight(numbers, 0, (acc, value) => acc + value)\n   * assert.deepStrictEqual(result, [10, 9, 7, 4, 0])\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <B, A>(b: B, f: (b: B, a: A) => B): (self: Iterable<A>) => NonEmptyArray<B>\n  /**\n   * Accumulates values from an `Iterable` starting from the right, storing\n   * each intermediate result in an array. Useful for tracking the progression of\n   * a value through a series of transformations.\n   *\n   * @example\n   * import { Array } from \"effect\";\n   *\n   * const numbers = [1, 2, 3, 4]\n   * const result = Array.scanRight(numbers, 0, (acc, value) => acc + value)\n   * assert.deepStrictEqual(result, [10, 9, 7, 4, 0])\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A) => B): NonEmptyArray<B>\n} = dual(3, <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A) => B): NonEmptyArray<B> => {\n  const input = fromIterable(self)\n  const out: NonEmptyArray<B> = new Array(input.length + 1) as any\n  out[input.length] = b\n  for (let i = input.length - 1; i >= 0; i--) {\n    out[i] = f(out[i + 1], input[i])\n  }\n  return out\n})\n\n/**\n * Determine if `unknown` is an Array.\n *\n * @param self - The value to check.\n *\n * @example\n * import { isArray } from \"effect/Array\"\n *\n * assert.deepStrictEqual(isArray(null), false);\n * assert.deepStrictEqual(isArray([1, 2, 3]), true);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isArray: {\n  /**\n   * Determine if `unknown` is an Array.\n   *\n   * @param self - The value to check.\n   *\n   * @example\n   * import { isArray } from \"effect/Array\"\n   *\n   * assert.deepStrictEqual(isArray(null), false);\n   * assert.deepStrictEqual(isArray([1, 2, 3]), true);\n   *\n   * @category guards\n   * @since 2.0.0\n   */\n  (self: unknown): self is Array<unknown>\n  /**\n   * Determine if `unknown` is an Array.\n   *\n   * @param self - The value to check.\n   *\n   * @example\n   * import { isArray } from \"effect/Array\"\n   *\n   * assert.deepStrictEqual(isArray(null), false);\n   * assert.deepStrictEqual(isArray([1, 2, 3]), true);\n   *\n   * @category guards\n   * @since 2.0.0\n   */\n  <T>(self: T): self is Extract<T, ReadonlyArray<any>>\n} = Array.isArray\n\n/**\n * Determine if an `Array` is empty narrowing down the type to `[]`.\n *\n * @param self - The `Array` to check.\n *\n * @example\n * import { isEmptyArray } from \"effect/Array\"\n *\n * assert.deepStrictEqual(isEmptyArray([]), true);\n * assert.deepStrictEqual(isEmptyArray([1, 2, 3]), false);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEmptyArray = <A>(self: Array<A>): self is [] => self.length === 0\n\n/**\n * Determine if a `ReadonlyArray` is empty narrowing down the type to `readonly []`.\n *\n * @param self - The `ReadonlyArray` to check.\n *\n * @example\n * import { isEmptyReadonlyArray } from \"effect/Array\"\n *\n * assert.deepStrictEqual(isEmptyReadonlyArray([]), true);\n * assert.deepStrictEqual(isEmptyReadonlyArray([1, 2, 3]), false);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEmptyReadonlyArray: <A>(self: ReadonlyArray<A>) => self is readonly [] = isEmptyArray as any\n\n/**\n * Determine if an `Array` is non empty narrowing down the type to `NonEmptyArray`.\n *\n * An `Array` is considered to be a `NonEmptyArray` if it contains at least one element.\n *\n * @param self - The `Array` to check.\n *\n * @example\n * import { isNonEmptyArray } from \"effect/Array\"\n *\n * assert.deepStrictEqual(isNonEmptyArray([]), false);\n * assert.deepStrictEqual(isNonEmptyArray([1, 2, 3]), true);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNonEmptyArray: <A>(self: Array<A>) => self is NonEmptyArray<A> = readonlyArray.isNonEmptyArray\n\n/**\n * Determine if a `ReadonlyArray` is non empty narrowing down the type to `NonEmptyReadonlyArray`.\n *\n * A `ReadonlyArray` is considered to be a `NonEmptyReadonlyArray` if it contains at least one element.\n *\n * @param self - The `ReadonlyArray` to check.\n *\n * @example\n * import { isNonEmptyReadonlyArray } from \"effect/Array\"\n *\n * assert.deepStrictEqual(isNonEmptyReadonlyArray([]), false);\n * assert.deepStrictEqual(isNonEmptyReadonlyArray([1, 2, 3]), true);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNonEmptyReadonlyArray: <A>(self: ReadonlyArray<A>) => self is NonEmptyReadonlyArray<A> =\n  readonlyArray.isNonEmptyArray\n\n/**\n * Return the number of elements in a `ReadonlyArray`.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const length = <A>(self: ReadonlyArray<A>): number => self.length\n\nconst isOutOfBound = <A>(i: number, as: ReadonlyArray<A>): boolean => i < 0 || i >= as.length\n\nconst clamp = <A>(i: number, as: ReadonlyArray<A>): number => Math.floor(Math.min(Math.max(0, i), as.length))\n\n/**\n * This function provides a safe way to read a value at a particular index from a `ReadonlyArray`.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const get: {\n  /**\n   * This function provides a safe way to read a value at a particular index from a `ReadonlyArray`.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  (index: number): <A>(self: ReadonlyArray<A>) => Option<A>\n  /**\n   * This function provides a safe way to read a value at a particular index from a `ReadonlyArray`.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: ReadonlyArray<A>, index: number): Option<A>\n} = dual(2, <A>(self: ReadonlyArray<A>, index: number): Option<A> => {\n  const i = Math.floor(index)\n  return isOutOfBound(i, self) ? O.none() : O.some(self[i])\n})\n\n/**\n * Gets an element unsafely, will throw on out of bounds.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeGet: {\n  /**\n   * Gets an element unsafely, will throw on out of bounds.\n   *\n   * @since 2.0.0\n   * @category unsafe\n   */\n  (index: number): <A>(self: ReadonlyArray<A>) => A\n  /**\n   * Gets an element unsafely, will throw on out of bounds.\n   *\n   * @since 2.0.0\n   * @category unsafe\n   */\n  <A>(self: ReadonlyArray<A>, index: number): A\n} = dual(2, <A>(self: ReadonlyArray<A>, index: number): A => {\n  const i = Math.floor(index)\n  if (isOutOfBound(i, self)) {\n    throw new Error(`Index ${i} out of bounds`)\n  }\n  return self[i]\n})\n\n/**\n * Return a tuple containing the first element, and a new `Array` of the remaining elements, if any.\n *\n * @example\n * import { Array } from \"effect\";\n *\n * const result = Array.unprepend([1, 2, 3, 4])\n * assert.deepStrictEqual(result, [1, [2, 3, 4]])\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const unprepend = <A>(\n  self: NonEmptyReadonlyArray<A>\n): [firstElement: A, remainingElements: Array<A>] => [headNonEmpty(self), tailNonEmpty(self)]\n\n/**\n * Return a tuple containing a copy of the `NonEmptyReadonlyArray` without its last element, and that last element.\n *\n * @example\n * import { Array } from \"effect\";\n *\n * const result = Array.unappend([1, 2, 3, 4])\n * assert.deepStrictEqual(result, [[1, 2, 3], 4])\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const unappend = <A>(\n  self: NonEmptyReadonlyArray<A>\n): [arrayWithoutLastElement: Array<A>, lastElement: A] => [initNonEmpty(self), lastNonEmpty(self)]\n\n/**\n * Get the first element of a `ReadonlyArray`, or `None` if the `ReadonlyArray` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const head: <A>(self: ReadonlyArray<A>) => Option<A> = get(0)\n\n/**\n * Get the first element of a non empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.headNonEmpty([1, 2, 3, 4])\n * assert.deepStrictEqual(result, 1)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const headNonEmpty: <A>(self: NonEmptyReadonlyArray<A>) => A = unsafeGet(0)\n\n/**\n * Get the last element in a `ReadonlyArray`, or `None` if the `ReadonlyArray` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const last = <A>(self: ReadonlyArray<A>): Option<A> =>\n  isNonEmptyReadonlyArray(self) ? O.some(lastNonEmpty(self)) : O.none()\n\n/**\n * Get the last element of a non empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.lastNonEmpty([1, 2, 3, 4])\n * assert.deepStrictEqual(result, 4)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const lastNonEmpty = <A>(self: NonEmptyReadonlyArray<A>): A => self[self.length - 1]\n\n/**\n * Get all but the first element of an `Iterable`, creating a new `Array`, or `None` if the `Iterable` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const tail = <A>(self: Iterable<A>): Option<Array<A>> => {\n  const input = fromIterable(self)\n  return isNonEmptyReadonlyArray(input) ? O.some(tailNonEmpty(input)) : O.none()\n}\n\n/**\n * Get all but the first element of a `NonEmptyReadonlyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.tailNonEmpty([1, 2, 3, 4])\n * assert.deepStrictEqual(result, [2, 3, 4])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const tailNonEmpty = <A>(self: NonEmptyReadonlyArray<A>): Array<A> => self.slice(1)\n\n/**\n * Get all but the last element of an `Iterable`, creating a new `Array`, or `None` if the `Iterable` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const init = <A>(self: Iterable<A>): Option<Array<A>> => {\n  const input = fromIterable(self)\n  return isNonEmptyReadonlyArray(input) ? O.some(initNonEmpty(input)) : O.none()\n}\n\n/**\n * Get all but the last element of a non empty array, creating a new array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.initNonEmpty([1, 2, 3, 4])\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const initNonEmpty = <A>(self: NonEmptyReadonlyArray<A>): Array<A> => self.slice(0, -1)\n\n/**\n * Keep only a max number of elements from the start of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.take(numbers, 3)\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const take: {\n  /**\n   * Keep only a max number of elements from the start of an `Iterable`, creating a new `Array`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.take(numbers, 3)\n   * assert.deepStrictEqual(result, [1, 2, 3])\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Iterable<A>) => Array<A>\n  /**\n   * Keep only a max number of elements from the start of an `Iterable`, creating a new `Array`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.take(numbers, 3)\n   * assert.deepStrictEqual(result, [1, 2, 3])\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<A> => {\n  const input = fromIterable(self)\n  return input.slice(0, clamp(n, input))\n})\n\n/**\n * Keep only a max number of elements from the end of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.takeRight(numbers, 3)\n * assert.deepStrictEqual(result, [3, 4, 5])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const takeRight: {\n  /**\n   * Keep only a max number of elements from the end of an `Iterable`, creating a new `Array`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.takeRight(numbers, 3)\n   * assert.deepStrictEqual(result, [3, 4, 5])\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Iterable<A>) => Array<A>\n  /**\n   * Keep only a max number of elements from the end of an `Iterable`, creating a new `Array`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.takeRight(numbers, 3)\n   * assert.deepStrictEqual(result, [3, 4, 5])\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<A> => {\n  const input = fromIterable(self)\n  const i = clamp(n, input)\n  return i === 0 ? [] : input.slice(-i)\n})\n\n/**\n * Calculate the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 3, 2, 4, 1, 2]\n * const result = Array.takeWhile(numbers, x => x < 4)\n * assert.deepStrictEqual(result, [1, 3, 2])\n *\n * // Explanation:\n * // - The function starts with the first element (`1`), which is less than `4`, so it adds `1` to the result.\n * // - The next element (`3`) is also less than `4`, so it adds `3`.\n * // - The next element (`2`) is again less than `4`, so it adds `2`.\n * // - The function then encounters `4`, which is not less than `4`. At this point, it stops checking further elements and finalizes the result.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const takeWhile: {\n  /**\n   * Calculate the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 3, 2, 4, 1, 2]\n   * const result = Array.takeWhile(numbers, x => x < 4)\n   * assert.deepStrictEqual(result, [1, 3, 2])\n   *\n   * // Explanation:\n   * // - The function starts with the first element (`1`), which is less than `4`, so it adds `1` to the result.\n   * // - The next element (`3`) is also less than `4`, so it adds `3`.\n   * // - The next element (`2`) is again less than `4`, so it adds `2`.\n   * // - The function then encounters `4`, which is not less than `4`. At this point, it stops checking further elements and finalizes the result.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Array<B>\n  /**\n   * Calculate the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 3, 2, 4, 1, 2]\n   * const result = Array.takeWhile(numbers, x => x < 4)\n   * assert.deepStrictEqual(result, [1, 3, 2])\n   *\n   * // Explanation:\n   * // - The function starts with the first element (`1`), which is less than `4`, so it adds `1` to the result.\n   * // - The next element (`3`) is also less than `4`, so it adds `3`.\n   * // - The next element (`2`) is again less than `4`, so it adds `2`.\n   * // - The function then encounters `4`, which is not less than `4`. At this point, it stops checking further elements and finalizes the result.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Array<A>\n  /**\n   * Calculate the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 3, 2, 4, 1, 2]\n   * const result = Array.takeWhile(numbers, x => x < 4)\n   * assert.deepStrictEqual(result, [1, 3, 2])\n   *\n   * // Explanation:\n   * // - The function starts with the first element (`1`), which is less than `4`, so it adds `1` to the result.\n   * // - The next element (`3`) is also less than `4`, so it adds `3`.\n   * // - The next element (`2`) is again less than `4`, so it adds `2`.\n   * // - The function then encounters `4`, which is not less than `4`. At this point, it stops checking further elements and finalizes the result.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Array<B>\n  /**\n   * Calculate the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 3, 2, 4, 1, 2]\n   * const result = Array.takeWhile(numbers, x => x < 4)\n   * assert.deepStrictEqual(result, [1, 3, 2])\n   *\n   * // Explanation:\n   * // - The function starts with the first element (`1`), which is less than `4`, so it adds `1` to the result.\n   * // - The next element (`3`) is also less than `4`, so it adds `3`.\n   * // - The next element (`2`) is again less than `4`, so it adds `2`.\n   * // - The function then encounters `4`, which is not less than `4`. At this point, it stops checking further elements and finalizes the result.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A>\n} = dual(2, <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A> => {\n  let i = 0\n  const out: Array<A> = []\n  for (const a of self) {\n    if (!predicate(a, i)) {\n      break\n    }\n    out.push(a)\n    i++\n  }\n  return out\n})\n\nconst spanIndex = <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): number => {\n  let i = 0\n  for (const a of self) {\n    if (!predicate(a, i)) {\n      break\n    }\n    i++\n  }\n  return i\n}\n\n/**\n * Split an `Iterable` into two parts:\n *\n * 1. the longest initial subarray for which all elements satisfy the specified predicate\n * 2. the remaining elements\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const span: {\n  /**\n   * Split an `Iterable` into two parts:\n   *\n   * 1. the longest initial subarray for which all elements satisfy the specified predicate\n   * 2. the remaining elements\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A, B extends A>(\n    refinement: (a: NoInfer<A>, i: number) => a is B\n  ): (self: Iterable<A>) => [init: Array<B>, rest: Array<Exclude<A, B>>]\n  /**\n   * Split an `Iterable` into two parts:\n   *\n   * 1. the longest initial subarray for which all elements satisfy the specified predicate\n   * 2. the remaining elements\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => [init: Array<A>, rest: Array<A>]\n  /**\n   * Split an `Iterable` into two parts:\n   *\n   * 1. the longest initial subarray for which all elements satisfy the specified predicate\n   * 2. the remaining elements\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A, B extends A>(\n    self: Iterable<A>,\n    refinement: (a: A, i: number) => a is B\n  ): [init: Array<B>, rest: Array<Exclude<A, B>>]\n  /**\n   * Split an `Iterable` into two parts:\n   *\n   * 1. the longest initial subarray for which all elements satisfy the specified predicate\n   * 2. the remaining elements\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [init: Array<A>, rest: Array<A>]\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [init: Array<A>, rest: Array<A>] =>\n    splitAt(self, spanIndex(self, predicate))\n)\n\n/**\n * Drop a max number of elements from the start of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.drop(numbers, 2)\n * assert.deepStrictEqual(result, [3, 4, 5])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const drop: {\n  /**\n   * Drop a max number of elements from the start of an `Iterable`, creating a new `Array`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.drop(numbers, 2)\n   * assert.deepStrictEqual(result, [3, 4, 5])\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Iterable<A>) => Array<A>\n  /**\n   * Drop a max number of elements from the start of an `Iterable`, creating a new `Array`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.drop(numbers, 2)\n   * assert.deepStrictEqual(result, [3, 4, 5])\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<A> => {\n  const input = fromIterable(self)\n  return input.slice(clamp(n, input), input.length)\n})\n\n/**\n * Drop a max number of elements from the end of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.dropRight(numbers, 2)\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const dropRight: {\n  /**\n   * Drop a max number of elements from the end of an `Iterable`, creating a new `Array`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.dropRight(numbers, 2)\n   * assert.deepStrictEqual(result, [1, 2, 3])\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Iterable<A>) => Array<A>\n  /**\n   * Drop a max number of elements from the end of an `Iterable`, creating a new `Array`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.dropRight(numbers, 2)\n   * assert.deepStrictEqual(result, [1, 2, 3])\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<A> => {\n  const input = fromIterable(self)\n  return input.slice(0, input.length - clamp(n, input))\n})\n\n/**\n * Remove the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.dropWhile(numbers, x => x < 4)\n * assert.deepStrictEqual(result, [4, 5])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const dropWhile: {\n  /**\n   * Remove the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.dropWhile(numbers, x => x < 4)\n   * assert.deepStrictEqual(result, [4, 5])\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Array<A>\n  /**\n   * Remove the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.dropWhile(numbers, x => x < 4)\n   * assert.deepStrictEqual(result, [4, 5])\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A> =>\n    fromIterable(self).slice(spanIndex(self, predicate))\n)\n\n/**\n * Return the first index for which a predicate holds.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [5, 3, 8, 9]\n * const result = Array.findFirstIndex(numbers, x => x > 5)\n * assert.deepStrictEqual(result, Option.some(2))\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirstIndex: {\n  /**\n   * Return the first index for which a predicate holds.\n   *\n   * @example\n   * import { Array, Option } from \"effect\"\n   *\n   * const numbers = [5, 3, 8, 9]\n   * const result = Array.findFirstIndex(numbers, x => x > 5)\n   * assert.deepStrictEqual(result, Option.some(2))\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option<number>\n  /**\n   * Return the first index for which a predicate holds.\n   *\n   * @example\n   * import { Array, Option } from \"effect\"\n   *\n   * const numbers = [5, 3, 8, 9]\n   * const result = Array.findFirstIndex(numbers, x => x > 5)\n   * assert.deepStrictEqual(result, Option.some(2))\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option<number>\n} = dual(2, <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option<number> => {\n  let i = 0\n  for (const a of self) {\n    if (predicate(a, i)) {\n      return O.some(i)\n    }\n    i++\n  }\n  return O.none()\n})\n\n/**\n * Return the last index for which a predicate holds.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 3, 8, 9]\n * const result = Array.findLastIndex(numbers, x => x < 5)\n * assert.deepStrictEqual(result, Option.some(1))\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findLastIndex: {\n  /**\n   * Return the last index for which a predicate holds.\n   *\n   * @example\n   * import { Array, Option } from \"effect\"\n   *\n   * const numbers = [1, 3, 8, 9]\n   * const result = Array.findLastIndex(numbers, x => x < 5)\n   * assert.deepStrictEqual(result, Option.some(1))\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option<number>\n  /**\n   * Return the last index for which a predicate holds.\n   *\n   * @example\n   * import { Array, Option } from \"effect\"\n   *\n   * const numbers = [1, 3, 8, 9]\n   * const result = Array.findLastIndex(numbers, x => x < 5)\n   * assert.deepStrictEqual(result, Option.some(1))\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option<number>\n} = dual(2, <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option<number> => {\n  const input = fromIterable(self)\n  for (let i = input.length - 1; i >= 0; i--) {\n    if (predicate(input[i], i)) {\n      return O.some(i)\n    }\n  }\n  return O.none()\n})\n\n/**\n * Returns the first element that satisfies the specified\n * predicate, or `None` if no such element exists.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.findFirst(numbers, x => x > 3)\n * assert.deepStrictEqual(result, Option.some(4))\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirst: {\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @example\n   * import { Array, Option } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.findFirst(numbers, x => x > 3)\n   * assert.deepStrictEqual(result, Option.some(4))\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: NoInfer<A>, i: number) => Option<B>): (self: Iterable<A>) => Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @example\n   * import { Array, Option } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.findFirst(numbers, x => x > 3)\n   * assert.deepStrictEqual(result, Option.some(4))\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @example\n   * import { Array, Option } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.findFirst(numbers, x => x > 3)\n   * assert.deepStrictEqual(result, Option.some(4))\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option<A>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @example\n   * import { Array, Option } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.findFirst(numbers, x => x > 3)\n   * assert.deepStrictEqual(result, Option.some(4))\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>): Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @example\n   * import { Array, Option } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.findFirst(numbers, x => x > 3)\n   * assert.deepStrictEqual(result, Option.some(4))\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @example\n   * import { Array, Option } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.findFirst(numbers, x => x > 3)\n   * assert.deepStrictEqual(result, Option.some(4))\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option<A>\n} = EffectIterable.findFirst\n\n/**\n * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.findLast(numbers, n => n % 2 === 0)\n * assert.deepStrictEqual(result, Option.some(4))\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findLast: {\n  /**\n   * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n   * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n   *\n   * @example\n   * import { Array, Option } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.findLast(numbers, n => n % 2 === 0)\n   * assert.deepStrictEqual(result, Option.some(4))\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: NoInfer<A>, i: number) => Option<B>): (self: Iterable<A>) => Option<B>\n  /**\n   * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n   * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n   *\n   * @example\n   * import { Array, Option } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.findLast(numbers, n => n % 2 === 0)\n   * assert.deepStrictEqual(result, Option.some(4))\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Option<B>\n  /**\n   * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n   * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n   *\n   * @example\n   * import { Array, Option } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.findLast(numbers, n => n % 2 === 0)\n   * assert.deepStrictEqual(result, Option.some(4))\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option<A>\n  /**\n   * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n   * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n   *\n   * @example\n   * import { Array, Option } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.findLast(numbers, n => n % 2 === 0)\n   * assert.deepStrictEqual(result, Option.some(4))\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>): Option<B>\n  /**\n   * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n   * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n   *\n   * @example\n   * import { Array, Option } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.findLast(numbers, n => n % 2 === 0)\n   * assert.deepStrictEqual(result, Option.some(4))\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Option<B>\n  /**\n   * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n   * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n   *\n   * @example\n   * import { Array, Option } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.findLast(numbers, n => n % 2 === 0)\n   * assert.deepStrictEqual(result, Option.some(4))\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option<A>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, f: ((a: A, i: number) => boolean) | ((a: A, i: number) => Option<A>)): Option<A> => {\n    const input = fromIterable(self)\n    for (let i = input.length - 1; i >= 0; i--) {\n      const a = input[i]\n      const o = f(a, i)\n      if (isBoolean(o)) {\n        if (o) {\n          return O.some(a)\n        }\n      } else {\n        if (O.isSome(o)) {\n          return o\n        }\n      }\n    }\n    return O.none()\n  }\n)\n\n/**\n * Insert an element at the specified index, creating a new `NonEmptyArray`,\n * or return `None` if the index is out of bounds.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const letters = ['a', 'b', 'c', 'e']\n * const result = Array.insertAt(letters, 3, 'd')\n * assert.deepStrictEqual(result, Option.some(['a', 'b', 'c', 'd', 'e']))\n *\n * @since 2.0.0\n */\nexport const insertAt: {\n  /**\n   * Insert an element at the specified index, creating a new `NonEmptyArray`,\n   * or return `None` if the index is out of bounds.\n   *\n   * @example\n   * import { Array, Option } from \"effect\"\n   *\n   * const letters = ['a', 'b', 'c', 'e']\n   * const result = Array.insertAt(letters, 3, 'd')\n   * assert.deepStrictEqual(result, Option.some(['a', 'b', 'c', 'd', 'e']))\n   *\n   * @since 2.0.0\n   */\n  <B>(i: number, b: B): <A>(self: Iterable<A>) => Option<NonEmptyArray<A | B>>\n  /**\n   * Insert an element at the specified index, creating a new `NonEmptyArray`,\n   * or return `None` if the index is out of bounds.\n   *\n   * @example\n   * import { Array, Option } from \"effect\"\n   *\n   * const letters = ['a', 'b', 'c', 'e']\n   * const result = Array.insertAt(letters, 3, 'd')\n   * assert.deepStrictEqual(result, Option.some(['a', 'b', 'c', 'd', 'e']))\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, i: number, b: B): Option<NonEmptyArray<A | B>>\n} = dual(3, <A, B>(self: Iterable<A>, i: number, b: B): Option<NonEmptyArray<A | B>> => {\n  const out: Array<A | B> = Array.from(self)\n  //             v--- `= self.length` is ok, it means inserting in last position\n  if (i < 0 || i > out.length) {\n    return O.none()\n  }\n  out.splice(i, 0, b)\n  return O.some(out) as any\n})\n\n/**\n * Change the element at the specified index, creating a new `Array`,\n * or return a copy of the input if the index is out of bounds.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const letters = ['a', 'b', 'c', 'd']\n * const result = Array.replace(letters, 1, 'z')\n * assert.deepStrictEqual(result, ['a', 'z', 'c', 'd'])\n *\n * @since 2.0.0\n */\nexport const replace: {\n  /**\n   * Change the element at the specified index, creating a new `Array`,\n   * or return a copy of the input if the index is out of bounds.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const letters = ['a', 'b', 'c', 'd']\n   * const result = Array.replace(letters, 1, 'z')\n   * assert.deepStrictEqual(result, ['a', 'z', 'c', 'd'])\n   *\n   * @since 2.0.0\n   */\n  <B>(i: number, b: B): <A, S extends Iterable<A> = Iterable<A>>(\n    self: S\n  ) => ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>\n  /**\n   * Change the element at the specified index, creating a new `Array`,\n   * or return a copy of the input if the index is out of bounds.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const letters = ['a', 'b', 'c', 'd']\n   * const result = Array.replace(letters, 1, 'z')\n   * assert.deepStrictEqual(result, ['a', 'z', 'c', 'd'])\n   *\n   * @since 2.0.0\n   */\n  <A, B, S extends Iterable<A> = Iterable<A>>(\n    self: S,\n    i: number,\n    b: B\n  ): ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>\n} = dual(3, <A, B>(self: Iterable<A>, i: number, b: B): Array<A | B> => modify(self, i, () => b))\n\n/**\n * Replaces an element in an array with the given value, returning an option of the updated array.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.replaceOption(numbers, 1, 4)\n * assert.deepStrictEqual(result, Option.some([1, 4, 3]))\n *\n * @since 2.0.0\n */\nexport const replaceOption: {\n  /**\n   * Replaces an element in an array with the given value, returning an option of the updated array.\n   *\n   * @example\n   * import { Array, Option } from \"effect\"\n   *\n   * const numbers = [1, 2, 3]\n   * const result = Array.replaceOption(numbers, 1, 4)\n   * assert.deepStrictEqual(result, Option.some([1, 4, 3]))\n   *\n   * @since 2.0.0\n   */\n  <B>(\n    i: number,\n    b: B\n  ): <A, S extends Iterable<A> = Iterable<A>>(self: S) => Option<ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>>\n  /**\n   * Replaces an element in an array with the given value, returning an option of the updated array.\n   *\n   * @example\n   * import { Array, Option } from \"effect\"\n   *\n   * const numbers = [1, 2, 3]\n   * const result = Array.replaceOption(numbers, 1, 4)\n   * assert.deepStrictEqual(result, Option.some([1, 4, 3]))\n   *\n   * @since 2.0.0\n   */\n  <A, B, S extends Iterable<A> = Iterable<A>>(\n    self: S,\n    i: number,\n    b: B\n  ): Option<ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>>\n} = dual(\n  3,\n  <A, B>(self: Iterable<A>, i: number, b: B): Option<Array<A | B>> => modifyOption(self, i, () => b)\n)\n\n/**\n * Apply a function to the element at the specified index, creating a new `Array`,\n * or return a copy of the input if the index is out of bounds.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.modify(numbers, 2, (n) => n * 2)\n * assert.deepStrictEqual(result, [1, 2, 6, 4])\n *\n * @since 2.0.0\n */\nexport const modify: {\n  /**\n   * Apply a function to the element at the specified index, creating a new `Array`,\n   * or return a copy of the input if the index is out of bounds.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4]\n   * const result = Array.modify(numbers, 2, (n) => n * 2)\n   * assert.deepStrictEqual(result, [1, 2, 6, 4])\n   *\n   * @since 2.0.0\n   */\n  <A, B, S extends Iterable<A> = Iterable<A>>(\n    i: number,\n    f: (a: ReadonlyArray.Infer<S>) => B\n  ): (self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>\n  /**\n   * Apply a function to the element at the specified index, creating a new `Array`,\n   * or return a copy of the input if the index is out of bounds.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4]\n   * const result = Array.modify(numbers, 2, (n) => n * 2)\n   * assert.deepStrictEqual(result, [1, 2, 6, 4])\n   *\n   * @since 2.0.0\n   */\n  <A, B, S extends Iterable<A> = Iterable<A>>(\n    self: S,\n    i: number,\n    f: (a: ReadonlyArray.Infer<S>) => B\n  ): ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>\n} = dual(\n  3,\n  <A, B>(self: Iterable<A>, i: number, f: (a: A) => B): Array<A | B> =>\n    O.getOrElse(modifyOption(self, i, f), () => Array.from(self))\n)\n\n/**\n * Apply a function to the element at the specified index, creating a new `Array`,\n * or return `None` if the index is out of bounds.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.modifyOption(numbers, 2, (n) => n * 2)\n * assert.deepStrictEqual(result, Option.some([1, 2, 6, 4]))\n *\n * const outOfBoundsResult = Array.modifyOption(numbers, 5, (n) => n * 2)\n * assert.deepStrictEqual(outOfBoundsResult, Option.none())\n *\n * @since 2.0.0\n */\nexport const modifyOption: {\n  /**\n   * Apply a function to the element at the specified index, creating a new `Array`,\n   * or return `None` if the index is out of bounds.\n   *\n   * @example\n   * import { Array, Option } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4]\n   * const result = Array.modifyOption(numbers, 2, (n) => n * 2)\n   * assert.deepStrictEqual(result, Option.some([1, 2, 6, 4]))\n   *\n   * const outOfBoundsResult = Array.modifyOption(numbers, 5, (n) => n * 2)\n   * assert.deepStrictEqual(outOfBoundsResult, Option.none())\n   *\n   * @since 2.0.0\n   */\n  <A, B, S extends Iterable<A> = Iterable<A>>(\n    i: number,\n    f: (a: ReadonlyArray.Infer<S>) => B\n  ): (self: S) => Option<ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>>\n  /**\n   * Apply a function to the element at the specified index, creating a new `Array`,\n   * or return `None` if the index is out of bounds.\n   *\n   * @example\n   * import { Array, Option } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4]\n   * const result = Array.modifyOption(numbers, 2, (n) => n * 2)\n   * assert.deepStrictEqual(result, Option.some([1, 2, 6, 4]))\n   *\n   * const outOfBoundsResult = Array.modifyOption(numbers, 5, (n) => n * 2)\n   * assert.deepStrictEqual(outOfBoundsResult, Option.none())\n   *\n   * @since 2.0.0\n   */\n  <A, B, S extends Iterable<A> = Iterable<A>>(\n    self: S,\n    i: number,\n    f: (a: ReadonlyArray.Infer<S>) => B\n  ): Option<ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>>\n} = dual(3, <A, B>(self: Iterable<A>, i: number, f: (a: A) => B): Option<Array<A | B>> => {\n  const out = Array.from(self)\n  if (isOutOfBound(i, out)) {\n    return O.none()\n  }\n  const next = f(out[i])\n  // @ts-expect-error\n  out[i] = next\n  return O.some(out)\n})\n\n/**\n * Delete the element at the specified index, creating a new `Array`,\n * or return a copy of the input if the index is out of bounds.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.remove(numbers, 2)\n * assert.deepStrictEqual(result, [1, 2, 4])\n *\n * const outOfBoundsResult = Array.remove(numbers, 5)\n * assert.deepStrictEqual(outOfBoundsResult, [1, 2, 3, 4])\n *\n * @since 2.0.0\n */\nexport const remove: {\n  /**\n   * Delete the element at the specified index, creating a new `Array`,\n   * or return a copy of the input if the index is out of bounds.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4]\n   * const result = Array.remove(numbers, 2)\n   * assert.deepStrictEqual(result, [1, 2, 4])\n   *\n   * const outOfBoundsResult = Array.remove(numbers, 5)\n   * assert.deepStrictEqual(outOfBoundsResult, [1, 2, 3, 4])\n   *\n   * @since 2.0.0\n   */\n  (i: number): <A>(self: Iterable<A>) => Array<A>\n  /**\n   * Delete the element at the specified index, creating a new `Array`,\n   * or return a copy of the input if the index is out of bounds.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4]\n   * const result = Array.remove(numbers, 2)\n   * assert.deepStrictEqual(result, [1, 2, 4])\n   *\n   * const outOfBoundsResult = Array.remove(numbers, 5)\n   * assert.deepStrictEqual(outOfBoundsResult, [1, 2, 3, 4])\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, i: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, i: number): Array<A> => {\n  const out = Array.from(self)\n  if (isOutOfBound(i, out)) {\n    return out\n  }\n  out.splice(i, 1)\n  return out\n})\n\n/**\n * Reverse an `Iterable`, creating a new `Array`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.reverse(numbers)\n * assert.deepStrictEqual(result, [4, 3, 2, 1])\n *\n * @category elements\n * @since 2.0.0\n */\nexport const reverse = <S extends Iterable<any> | NonEmptyReadonlyArray<any>>(\n  self: S\n): S extends NonEmptyReadonlyArray<infer A> ? NonEmptyArray<A> : S extends Iterable<infer A> ? Array<A> : never =>\n  Array.from(self).reverse() as any\n\n/**\n * Create a new array with elements sorted in increasing order based on the specified comparator.\n * If the input is a `NonEmptyReadonlyArray`, the output will also be a `NonEmptyReadonlyArray`.\n *\n * @category sorting\n * @since 2.0.0\n */\nexport const sort: {\n  /**\n   * Create a new array with elements sorted in increasing order based on the specified comparator.\n   * If the input is a `NonEmptyReadonlyArray`, the output will also be a `NonEmptyReadonlyArray`.\n   *\n   * @category sorting\n   * @since 2.0.0\n   */\n  <B>(\n    O: Order.Order<B>\n  ): <A extends B, S extends ReadonlyArray<A> | Iterable<A>>(self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S>>\n  /**\n   * Create a new array with elements sorted in increasing order based on the specified comparator.\n   * If the input is a `NonEmptyReadonlyArray`, the output will also be a `NonEmptyReadonlyArray`.\n   *\n   * @category sorting\n   * @since 2.0.0\n   */\n  <A extends B, B>(self: NonEmptyReadonlyArray<A>, O: Order.Order<B>): NonEmptyArray<A>\n  /**\n   * Create a new array with elements sorted in increasing order based on the specified comparator.\n   * If the input is a `NonEmptyReadonlyArray`, the output will also be a `NonEmptyReadonlyArray`.\n   *\n   * @category sorting\n   * @since 2.0.0\n   */\n  <A extends B, B>(self: Iterable<A>, O: Order.Order<B>): Array<A>\n} = dual(2, <A extends B, B>(self: Iterable<A>, O: Order.Order<B>): Array<A> => {\n  const out = Array.from(self)\n  out.sort(O)\n  return out\n})\n\n/**\n * Sorts an array based on a provided mapping function and order. The mapping\n * function transforms the elements into a value that can be compared, and the\n * order defines how those values should be sorted.\n *\n * @example\n * import { Array, Order } from \"effect\"\n *\n * const strings = [\"aaa\", \"b\", \"cc\"]\n * const result = Array.sortWith(strings, (s) => s.length, Order.number)\n * assert.deepStrictEqual(result, [\"b\", \"cc\", \"aaa\"])\n *\n * // Explanation:\n * // The array of strings is sorted based on their lengths. The mapping function `(s) => s.length`\n * // converts each string into its length, and the `Order.number` specifies that the lengths should\n * // be sorted in ascending order.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const sortWith: {\n  /**\n   * Sorts an array based on a provided mapping function and order. The mapping\n   * function transforms the elements into a value that can be compared, and the\n   * order defines how those values should be sorted.\n   *\n   * @example\n   * import { Array, Order } from \"effect\"\n   *\n   * const strings = [\"aaa\", \"b\", \"cc\"]\n   * const result = Array.sortWith(strings, (s) => s.length, Order.number)\n   * assert.deepStrictEqual(result, [\"b\", \"cc\", \"aaa\"])\n   *\n   * // Explanation:\n   * // The array of strings is sorted based on their lengths. The mapping function `(s) => s.length`\n   * // converts each string into its length, and the `Order.number` specifies that the lengths should\n   * // be sorted in ascending order.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <S extends Iterable<any> | NonEmptyReadonlyArray<any>, B>(\n    f: (a: ReadonlyArray.Infer<S>) => B,\n    order: Order.Order<B>\n  ): (self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S>>\n  /**\n   * Sorts an array based on a provided mapping function and order. The mapping\n   * function transforms the elements into a value that can be compared, and the\n   * order defines how those values should be sorted.\n   *\n   * @example\n   * import { Array, Order } from \"effect\"\n   *\n   * const strings = [\"aaa\", \"b\", \"cc\"]\n   * const result = Array.sortWith(strings, (s) => s.length, Order.number)\n   * assert.deepStrictEqual(result, [\"b\", \"cc\", \"aaa\"])\n   *\n   * // Explanation:\n   * // The array of strings is sorted based on their lengths. The mapping function `(s) => s.length`\n   * // converts each string into its length, and the `Order.number` specifies that the lengths should\n   * // be sorted in ascending order.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, f: (a: A) => B, O: Order.Order<B>): NonEmptyArray<A>\n  /**\n   * Sorts an array based on a provided mapping function and order. The mapping\n   * function transforms the elements into a value that can be compared, and the\n   * order defines how those values should be sorted.\n   *\n   * @example\n   * import { Array, Order } from \"effect\"\n   *\n   * const strings = [\"aaa\", \"b\", \"cc\"]\n   * const result = Array.sortWith(strings, (s) => s.length, Order.number)\n   * assert.deepStrictEqual(result, [\"b\", \"cc\", \"aaa\"])\n   *\n   * // Explanation:\n   * // The array of strings is sorted based on their lengths. The mapping function `(s) => s.length`\n   * // converts each string into its length, and the `Order.number` specifies that the lengths should\n   * // be sorted in ascending order.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B>(self: Iterable<A>, f: (a: A) => B, order: Order.Order<B>): Array<A>\n} = dual(\n  3,\n  <A, B>(self: Iterable<A>, f: (a: A) => B, order: Order.Order<B>): Array<A> =>\n    Array.from(self).map((a) => [a, f(a)] as const).sort((a, b) => order(a[1], b[1])).map((x) => x[0])\n)\n\n/**\n * Sorts the elements of an `Iterable` in increasing order based on the provided\n * orders. The elements are compared using the first order in `orders`, then the\n * second order if the first comparison is equal, and so on.\n *\n * @example\n * import { Array, Order } from \"effect\"\n *\n * const users = [\n *   { name: \"Alice\", age: 30 },\n *   { name: \"Bob\", age: 25 },\n *   { name: \"Charlie\", age: 30 }\n * ]\n *\n * const result = Array.sortBy(\n *   Order.mapInput(Order.number, (user: (typeof users)[number]) => user.age),\n *   Order.mapInput(Order.string, (user: (typeof users)[number]) => user.name)\n * )(users)\n *\n * assert.deepStrictEqual(result, [\n *   { name: \"Bob\", age: 25 },\n *   { name: \"Alice\", age: 30 },\n *   { name: \"Charlie\", age: 30 }\n * ])\n *\n * // Explanation:\n * // The array of users is sorted first by age in ascending order. When ages are equal,\n * // the users are further sorted by name in ascending order.\n *\n * @category sorting\n * @since 2.0.0\n */\nexport const sortBy = <S extends Iterable<any> | NonEmptyReadonlyArray<any>>(\n  ...orders: ReadonlyArray<Order.Order<ReadonlyArray.Infer<S>>>\n) => {\n  const sortByAll = sort(Order.combineAll(orders))\n  return (\n    self: S\n  ): S extends NonEmptyReadonlyArray<infer A> ? NonEmptyArray<A> : S extends Iterable<infer A> ? Array<A> : never => {\n    const input = fromIterable(self)\n    if (isNonEmptyReadonlyArray(input)) {\n      return sortByAll(input) as any\n    }\n    return [] as any\n  }\n}\n\n/**\n * Takes two `Iterable`s and returns an `Array` of corresponding pairs.\n * If one input `Iterable` is short, excess elements of the\n * longer `Iterable` are discarded.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = ['a', 'b']\n * const result = Array.zip(array1, array2)\n * assert.deepStrictEqual(result, [[1, 'a'], [2, 'b']])\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zip: {\n  /**\n   * Takes two `Iterable`s and returns an `Array` of corresponding pairs.\n   * If one input `Iterable` is short, excess elements of the\n   * longer `Iterable` are discarded.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const array1 = [1, 2, 3]\n   * const array2 = ['a', 'b']\n   * const result = Array.zip(array1, array2)\n   * assert.deepStrictEqual(result, [[1, 'a'], [2, 'b']])\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <B>(that: NonEmptyReadonlyArray<B>): <A>(self: NonEmptyReadonlyArray<A>) => NonEmptyArray<[A, B]>\n  /**\n   * Takes two `Iterable`s and returns an `Array` of corresponding pairs.\n   * If one input `Iterable` is short, excess elements of the\n   * longer `Iterable` are discarded.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const array1 = [1, 2, 3]\n   * const array2 = ['a', 'b']\n   * const result = Array.zip(array1, array2)\n   * assert.deepStrictEqual(result, [[1, 'a'], [2, 'b']])\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <B>(that: Iterable<B>): <A>(self: Iterable<A>) => Array<[A, B]>\n  /**\n   * Takes two `Iterable`s and returns an `Array` of corresponding pairs.\n   * If one input `Iterable` is short, excess elements of the\n   * longer `Iterable` are discarded.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const array1 = [1, 2, 3]\n   * const array2 = ['a', 'b']\n   * const result = Array.zip(array1, array2)\n   * assert.deepStrictEqual(result, [[1, 'a'], [2, 'b']])\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, that: NonEmptyReadonlyArray<B>): NonEmptyArray<[A, B]>\n  /**\n   * Takes two `Iterable`s and returns an `Array` of corresponding pairs.\n   * If one input `Iterable` is short, excess elements of the\n   * longer `Iterable` are discarded.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const array1 = [1, 2, 3]\n   * const array2 = ['a', 'b']\n   * const result = Array.zip(array1, array2)\n   * assert.deepStrictEqual(result, [[1, 'a'], [2, 'b']])\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<[A, B]>\n} = dual(\n  2,\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<[A, B]> => zipWith(self, that, Tuple.make)\n)\n\n/**\n * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results in a new `Array`. If one\n * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = [4, 5, 6]\n * const result = Array.zipWith(array1, array2, (a, b) => a + b)\n * assert.deepStrictEqual(result, [5, 7, 9])\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zipWith: {\n  /**\n   * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results in a new `Array`. If one\n   * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const array1 = [1, 2, 3]\n   * const array2 = [4, 5, 6]\n   * const result = Array.zipWith(array1, array2, (a, b) => a + b)\n   * assert.deepStrictEqual(result, [5, 7, 9])\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <B, A, C>(that: NonEmptyReadonlyArray<B>, f: (a: A, b: B) => C): (self: NonEmptyReadonlyArray<A>) => NonEmptyArray<C>\n  /**\n   * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results in a new `Array`. If one\n   * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const array1 = [1, 2, 3]\n   * const array2 = [4, 5, 6]\n   * const result = Array.zipWith(array1, array2, (a, b) => a + b)\n   * assert.deepStrictEqual(result, [5, 7, 9])\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <B, A, C>(that: Iterable<B>, f: (a: A, b: B) => C): (self: Iterable<A>) => Array<C>\n  /**\n   * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results in a new `Array`. If one\n   * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const array1 = [1, 2, 3]\n   * const array2 = [4, 5, 6]\n   * const result = Array.zipWith(array1, array2, (a, b) => a + b)\n   * assert.deepStrictEqual(result, [5, 7, 9])\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <A, B, C>(\n    self: NonEmptyReadonlyArray<A>,\n    that: NonEmptyReadonlyArray<B>,\n    f: (a: A, b: B) => C\n  ): NonEmptyArray<C>\n  /**\n   * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results in a new `Array`. If one\n   * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const array1 = [1, 2, 3]\n   * const array2 = [4, 5, 6]\n   * const result = Array.zipWith(array1, array2, (a, b) => a + b)\n   * assert.deepStrictEqual(result, [5, 7, 9])\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <B, A, C>(self: Iterable<A>, that: Iterable<B>, f: (a: A, b: B) => C): Array<C>\n} = dual(3, <B, A, C>(self: Iterable<A>, that: Iterable<B>, f: (a: A, b: B) => C): Array<C> => {\n  const as = fromIterable(self)\n  const bs = fromIterable(that)\n  if (isNonEmptyReadonlyArray(as) && isNonEmptyReadonlyArray(bs)) {\n    const out: NonEmptyArray<C> = [f(headNonEmpty(as), headNonEmpty(bs))]\n    const len = Math.min(as.length, bs.length)\n    for (let i = 1; i < len; i++) {\n      out[i] = f(as[i], bs[i])\n    }\n    return out\n  }\n  return []\n})\n\n/**\n * This function is the inverse of `zip`. Takes an `Iterable` of pairs and return two corresponding `Array`s.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.unzip([[1, \"a\"], [2, \"b\"], [3, \"c\"]])\n * assert.deepStrictEqual(result, [[1, 2, 3], ['a', 'b', 'c']])\n *\n * @since 2.0.0\n */\nexport const unzip: <S extends Iterable<readonly [any, any]> | NonEmptyReadonlyArray<readonly [any, any]>>(\n  self: S\n) => S extends NonEmptyReadonlyArray<readonly [infer A, infer B]> ? [NonEmptyArray<A>, NonEmptyArray<B>]\n  : S extends Iterable<readonly [infer A, infer B]> ? [Array<A>, Array<B>]\n  : never = (<A, B>(self: Iterable<readonly [A, B]>): [Array<A>, Array<B>] => {\n    const input = fromIterable(self)\n    if (isNonEmptyReadonlyArray(input)) {\n      const fa: NonEmptyArray<A> = [input[0][0]]\n      const fb: NonEmptyArray<B> = [input[0][1]]\n      for (let i = 1; i < input.length; i++) {\n        fa[i] = input[i][0]\n        fb[i] = input[i][1]\n      }\n      return [fa, fb]\n    }\n    return [[], []]\n  }) as any\n\n/**\n * Places an element in between members of an `Iterable`.\n * If the input is a non-empty array, the result is also a non-empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.intersperse(numbers, 0)\n * assert.deepStrictEqual(result, [1, 0, 2, 0, 3])\n *\n * @since 2.0.0\n */\nexport const intersperse: {\n  /**\n   * Places an element in between members of an `Iterable`.\n   * If the input is a non-empty array, the result is also a non-empty array.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3]\n   * const result = Array.intersperse(numbers, 0)\n   * assert.deepStrictEqual(result, [1, 0, 2, 0, 3])\n   *\n   * @since 2.0.0\n   */\n  <B>(middle: B): <S extends Iterable<any>>(self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>\n  /**\n   * Places an element in between members of an `Iterable`.\n   * If the input is a non-empty array, the result is also a non-empty array.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3]\n   * const result = Array.intersperse(numbers, 0)\n   * assert.deepStrictEqual(result, [1, 0, 2, 0, 3])\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, middle: B): NonEmptyArray<A | B>\n  /**\n   * Places an element in between members of an `Iterable`.\n   * If the input is a non-empty array, the result is also a non-empty array.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3]\n   * const result = Array.intersperse(numbers, 0)\n   * assert.deepStrictEqual(result, [1, 0, 2, 0, 3])\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, middle: B): Array<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, middle: B): Array<A | B> => {\n  const input = fromIterable(self)\n  if (isNonEmptyReadonlyArray(input)) {\n    const out: NonEmptyArray<A | B> = [headNonEmpty(input)]\n    const tail = tailNonEmpty(input)\n    for (let i = 0; i < tail.length; i++) {\n      if (i < tail.length) {\n        out.push(middle)\n      }\n      out.push(tail[i])\n    }\n    return out\n  }\n  return []\n})\n\n/**\n * Apply a function to the head, creating a new `NonEmptyReadonlyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.modifyNonEmptyHead([1, 2, 3], n => n * 10)\n * assert.deepStrictEqual(result, [10, 2, 3])\n *\n * @since 2.0.0\n */\nexport const modifyNonEmptyHead: {\n  /**\n   * Apply a function to the head, creating a new `NonEmptyReadonlyArray`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.modifyNonEmptyHead([1, 2, 3], n => n * 10)\n   * assert.deepStrictEqual(result, [10, 2, 3])\n   *\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => B): (self: NonEmptyReadonlyArray<A>) => NonEmptyArray<A | B>\n  /**\n   * Apply a function to the head, creating a new `NonEmptyReadonlyArray`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.modifyNonEmptyHead([1, 2, 3], n => n * 10)\n   * assert.deepStrictEqual(result, [10, 2, 3])\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, f: (a: A) => B): NonEmptyArray<A | B>\n} = dual(\n  2,\n  <A, B>(\n    self: NonEmptyReadonlyArray<A>,\n    f: (a: A) => B\n  ): NonEmptyArray<A | B> => [f(headNonEmpty(self)), ...tailNonEmpty(self)]\n)\n\n/**\n * Change the head, creating a new `NonEmptyReadonlyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.setNonEmptyHead([1, 2, 3], 10)\n * assert.deepStrictEqual(result, [10, 2, 3])\n *\n * @since 2.0.0\n */\nexport const setNonEmptyHead: {\n  /**\n   * Change the head, creating a new `NonEmptyReadonlyArray`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.setNonEmptyHead([1, 2, 3], 10)\n   * assert.deepStrictEqual(result, [10, 2, 3])\n   *\n   * @since 2.0.0\n   */\n  <B>(b: B): <A>(self: NonEmptyReadonlyArray<A>) => NonEmptyArray<A | B>\n  /**\n   * Change the head, creating a new `NonEmptyReadonlyArray`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.setNonEmptyHead([1, 2, 3], 10)\n   * assert.deepStrictEqual(result, [10, 2, 3])\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, b: B): NonEmptyArray<A | B>\n} = dual(\n  2,\n  <A, B>(self: NonEmptyReadonlyArray<A>, b: B): NonEmptyArray<A | B> => modifyNonEmptyHead(self, () => b)\n)\n\n/**\n * Apply a function to the last element, creating a new `NonEmptyReadonlyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.modifyNonEmptyLast([1, 2, 3], n => n * 2)\n * assert.deepStrictEqual(result, [1, 2, 6])\n *\n * @since 2.0.0\n */\nexport const modifyNonEmptyLast: {\n  /**\n   * Apply a function to the last element, creating a new `NonEmptyReadonlyArray`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.modifyNonEmptyLast([1, 2, 3], n => n * 2)\n   * assert.deepStrictEqual(result, [1, 2, 6])\n   *\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => B): (self: NonEmptyReadonlyArray<A>) => NonEmptyArray<A | B>\n  /**\n   * Apply a function to the last element, creating a new `NonEmptyReadonlyArray`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.modifyNonEmptyLast([1, 2, 3], n => n * 2)\n   * assert.deepStrictEqual(result, [1, 2, 6])\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, f: (a: A) => B): NonEmptyArray<A | B>\n} = dual(\n  2,\n  <A, B>(self: NonEmptyReadonlyArray<A>, f: (a: A) => B): NonEmptyArray<A | B> =>\n    append(initNonEmpty(self), f(lastNonEmpty(self)))\n)\n\n/**\n * Change the last element, creating a new `NonEmptyReadonlyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.setNonEmptyLast([1, 2, 3], 4)\n * assert.deepStrictEqual(result, [1, 2, 4])\n *\n * @since 2.0.0\n */\nexport const setNonEmptyLast: {\n  /**\n   * Change the last element, creating a new `NonEmptyReadonlyArray`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.setNonEmptyLast([1, 2, 3], 4)\n   * assert.deepStrictEqual(result, [1, 2, 4])\n   *\n   * @since 2.0.0\n   */\n  <B>(b: B): <A>(self: NonEmptyReadonlyArray<A>) => NonEmptyArray<A | B>\n  /**\n   * Change the last element, creating a new `NonEmptyReadonlyArray`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.setNonEmptyLast([1, 2, 3], 4)\n   * assert.deepStrictEqual(result, [1, 2, 4])\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, b: B): NonEmptyArray<A | B>\n} = dual(\n  2,\n  <A, B>(self: NonEmptyReadonlyArray<A>, b: B): NonEmptyArray<A | B> => modifyNonEmptyLast(self, () => b)\n)\n\n/**\n * Rotate an `Iterable` by `n` steps.\n * If the input is a non-empty array, the result is also a non-empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const letters = ['a', 'b', 'c', 'd']\n * const result = Array.rotate(letters, 2)\n * assert.deepStrictEqual(result, ['c', 'd', 'a', 'b'])\n *\n * @since 2.0.0\n */\nexport const rotate: {\n  /**\n   * Rotate an `Iterable` by `n` steps.\n   * If the input is a non-empty array, the result is also a non-empty array.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const letters = ['a', 'b', 'c', 'd']\n   * const result = Array.rotate(letters, 2)\n   * assert.deepStrictEqual(result, ['c', 'd', 'a', 'b'])\n   *\n   * @since 2.0.0\n   */\n  (n: number): <S extends Iterable<any>>(self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S>>\n  /**\n   * Rotate an `Iterable` by `n` steps.\n   * If the input is a non-empty array, the result is also a non-empty array.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const letters = ['a', 'b', 'c', 'd']\n   * const result = Array.rotate(letters, 2)\n   * assert.deepStrictEqual(result, ['c', 'd', 'a', 'b'])\n   *\n   * @since 2.0.0\n   */\n  <A>(self: NonEmptyReadonlyArray<A>, n: number): NonEmptyArray<A>\n  /**\n   * Rotate an `Iterable` by `n` steps.\n   * If the input is a non-empty array, the result is also a non-empty array.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const letters = ['a', 'b', 'c', 'd']\n   * const result = Array.rotate(letters, 2)\n   * assert.deepStrictEqual(result, ['c', 'd', 'a', 'b'])\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<A> => {\n  const input = fromIterable(self)\n  if (isNonEmptyReadonlyArray(input)) {\n    const len = input.length\n    const m = Math.round(n) % len\n    if (isOutOfBound(Math.abs(m), input) || m === 0) {\n      return copy(input)\n    }\n    if (m < 0) {\n      const [f, s] = splitNonEmptyAt(input, -m)\n      return appendAll(s, f)\n    } else {\n      return rotate(self, m - len)\n    }\n  }\n  return []\n})\n\n/**\n * Returns a function that checks if a `ReadonlyArray` contains a given value using a provided `isEquivalent` function.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const isEquivalent = (a: number, b: number) => a === b\n * const containsNumber = Array.containsWith(isEquivalent)\n * const result = containsNumber(3)(numbers)\n * assert.deepStrictEqual(result, true)\n *\n * @category elements\n * @since 2.0.0\n */\nexport const containsWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (a: A): (self: Iterable<A>) => boolean\n  (self: Iterable<A>, a: A): boolean\n} =>\n  dual(2, (self: Iterable<A>, a: A): boolean => {\n    for (const i of self) {\n      if (isEquivalent(a, i)) {\n        return true\n      }\n    }\n    return false\n  })\n\nconst _equivalence = Equal.equivalence()\n\n/**\n * Returns a function that checks if a `ReadonlyArray` contains a given value using the default `Equivalence`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const letters = ['a', 'b', 'c', 'd']\n * const result = Array.contains('c')(letters)\n * assert.deepStrictEqual(result, true)\n *\n * @category elements\n * @since 2.0.0\n */\nexport const contains: {\n  /**\n   * Returns a function that checks if a `ReadonlyArray` contains a given value using the default `Equivalence`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const letters = ['a', 'b', 'c', 'd']\n   * const result = Array.contains('c')(letters)\n   * assert.deepStrictEqual(result, true)\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(a: A): (self: Iterable<A>) => boolean\n  /**\n   * Returns a function that checks if a `ReadonlyArray` contains a given value using the default `Equivalence`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const letters = ['a', 'b', 'c', 'd']\n   * const result = Array.contains('c')(letters)\n   * assert.deepStrictEqual(result, true)\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, a: A): boolean\n} = containsWith(_equivalence)\n\n/**\n * A useful recursion pattern for processing an `Iterable` to produce a new `Array`, often used for \"chopping\" up the input\n * `Iterable`. Typically chop is called with some function that will consume an initial prefix of the `Iterable` and produce a\n * value and the rest of the `Array`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.chop(numbers, (as): [number, Array<number>] => [as[0] * 2, as.slice(1)])\n * assert.deepStrictEqual(result, [2, 4, 6, 8, 10])\n *\n * // Explanation:\n * // The `chopFunction` takes the first element of the array, doubles it, and then returns it along with the rest of the array.\n * // The `chop` function applies this `chopFunction` recursively to the input array `[1, 2, 3, 4, 5]`,\n * // resulting in a new array `[2, 4, 6, 8, 10]`.\n *\n * @since 2.0.0\n */\nexport const chop: {\n  /**\n   * A useful recursion pattern for processing an `Iterable` to produce a new `Array`, often used for \"chopping\" up the input\n   * `Iterable`. Typically chop is called with some function that will consume an initial prefix of the `Iterable` and produce a\n   * value and the rest of the `Array`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.chop(numbers, (as): [number, Array<number>] => [as[0] * 2, as.slice(1)])\n   * assert.deepStrictEqual(result, [2, 4, 6, 8, 10])\n   *\n   * // Explanation:\n   * // The `chopFunction` takes the first element of the array, doubles it, and then returns it along with the rest of the array.\n   * // The `chop` function applies this `chopFunction` recursively to the input array `[1, 2, 3, 4, 5]`,\n   * // resulting in a new array `[2, 4, 6, 8, 10]`.\n   *\n   * @since 2.0.0\n   */\n  <S extends Iterable<any>, B>(\n    f: (as: NonEmptyReadonlyArray<ReadonlyArray.Infer<S>>) => readonly [B, ReadonlyArray<ReadonlyArray.Infer<S>>]\n  ): (self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S>>\n  /**\n   * A useful recursion pattern for processing an `Iterable` to produce a new `Array`, often used for \"chopping\" up the input\n   * `Iterable`. Typically chop is called with some function that will consume an initial prefix of the `Iterable` and produce a\n   * value and the rest of the `Array`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.chop(numbers, (as): [number, Array<number>] => [as[0] * 2, as.slice(1)])\n   * assert.deepStrictEqual(result, [2, 4, 6, 8, 10])\n   *\n   * // Explanation:\n   * // The `chopFunction` takes the first element of the array, doubles it, and then returns it along with the rest of the array.\n   * // The `chop` function applies this `chopFunction` recursively to the input array `[1, 2, 3, 4, 5]`,\n   * // resulting in a new array `[2, 4, 6, 8, 10]`.\n   *\n   * @since 2.0.0\n   */\n  <A, B>(\n    self: NonEmptyReadonlyArray<A>,\n    f: (as: NonEmptyReadonlyArray<A>) => readonly [B, ReadonlyArray<A>]\n  ): NonEmptyArray<B>\n  /**\n   * A useful recursion pattern for processing an `Iterable` to produce a new `Array`, often used for \"chopping\" up the input\n   * `Iterable`. Typically chop is called with some function that will consume an initial prefix of the `Iterable` and produce a\n   * value and the rest of the `Array`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.chop(numbers, (as): [number, Array<number>] => [as[0] * 2, as.slice(1)])\n   * assert.deepStrictEqual(result, [2, 4, 6, 8, 10])\n   *\n   * // Explanation:\n   * // The `chopFunction` takes the first element of the array, doubles it, and then returns it along with the rest of the array.\n   * // The `chop` function applies this `chopFunction` recursively to the input array `[1, 2, 3, 4, 5]`,\n   * // resulting in a new array `[2, 4, 6, 8, 10]`.\n   *\n   * @since 2.0.0\n   */\n  <A, B>(\n    self: Iterable<A>,\n    f: (as: NonEmptyReadonlyArray<A>) => readonly [B, ReadonlyArray<A>]\n  ): Array<B>\n} = dual(2, <A, B>(\n  self: Iterable<A>,\n  f: (as: NonEmptyReadonlyArray<A>) => readonly [B, ReadonlyArray<A>]\n): Array<B> => {\n  const input = fromIterable(self)\n  if (isNonEmptyReadonlyArray(input)) {\n    const [b, rest] = f(input)\n    const out: NonEmptyArray<B> = [b]\n    let next: ReadonlyArray<A> = rest\n    while (readonlyArray.isNonEmptyArray(next)) {\n      const [b, rest] = f(next)\n      out.push(b)\n      next = rest\n    }\n    return out\n  }\n  return []\n})\n\n/**\n * Splits an `Iterable` into two segments, with the first segment containing a maximum of `n` elements.\n * The value of `n` can be `0`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.splitAt(numbers, 3)\n * assert.deepStrictEqual(result, [[1, 2, 3], [4, 5]])\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitAt: {\n  /**\n   * Splits an `Iterable` into two segments, with the first segment containing a maximum of `n` elements.\n   * The value of `n` can be `0`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.splitAt(numbers, 3)\n   * assert.deepStrictEqual(result, [[1, 2, 3], [4, 5]])\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Iterable<A>) => [beforeIndex: Array<A>, fromIndex: Array<A>]\n  /**\n   * Splits an `Iterable` into two segments, with the first segment containing a maximum of `n` elements.\n   * The value of `n` can be `0`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.splitAt(numbers, 3)\n   * assert.deepStrictEqual(result, [[1, 2, 3], [4, 5]])\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): [beforeIndex: Array<A>, fromIndex: Array<A>]\n} = dual(2, <A>(self: Iterable<A>, n: number): [Array<A>, Array<A>] => {\n  const input = Array.from(self)\n  const _n = Math.floor(n)\n  if (isNonEmptyReadonlyArray(input)) {\n    if (_n >= 1) {\n      return splitNonEmptyAt(input, _n)\n    }\n    return [[], input]\n  }\n  return [input, []]\n})\n\n/**\n * Splits a `NonEmptyReadonlyArray` into two segments, with the first segment containing a maximum of `n` elements.\n * The value of `n` must be `>= 1`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.splitNonEmptyAt([\"a\", \"b\", \"c\", \"d\", \"e\"], 3)\n * assert.deepStrictEqual(result, [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]])\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitNonEmptyAt: {\n  /**\n   * Splits a `NonEmptyReadonlyArray` into two segments, with the first segment containing a maximum of `n` elements.\n   * The value of `n` must be `>= 1`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.splitNonEmptyAt([\"a\", \"b\", \"c\", \"d\", \"e\"], 3)\n   * assert.deepStrictEqual(result, [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]])\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: NonEmptyReadonlyArray<A>) => [beforeIndex: NonEmptyArray<A>, fromIndex: Array<A>]\n  /**\n   * Splits a `NonEmptyReadonlyArray` into two segments, with the first segment containing a maximum of `n` elements.\n   * The value of `n` must be `>= 1`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.splitNonEmptyAt([\"a\", \"b\", \"c\", \"d\", \"e\"], 3)\n   * assert.deepStrictEqual(result, [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]])\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(self: NonEmptyReadonlyArray<A>, n: number): [beforeIndex: NonEmptyArray<A>, fromIndex: Array<A>]\n} = dual(2, <A>(self: NonEmptyReadonlyArray<A>, n: number): [NonEmptyArray<A>, Array<A>] => {\n  const _n = Math.max(1, Math.floor(n))\n  return _n >= self.length ?\n    [copy(self), []] :\n    [prepend(self.slice(1, _n), headNonEmpty(self)), self.slice(_n)]\n})\n\n/**\n * Splits this iterable into `n` equally sized arrays.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n * const result = Array.split(numbers, 3)\n * assert.deepStrictEqual(result, [[1, 2, 3], [4, 5, 6], [7, 8]])\n *\n * @since 2.0.0\n * @category splitting\n */\nexport const split: {\n  /**\n   * Splits this iterable into `n` equally sized arrays.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n   * const result = Array.split(numbers, 3)\n   * assert.deepStrictEqual(result, [[1, 2, 3], [4, 5, 6], [7, 8]])\n   *\n   * @since 2.0.0\n   * @category splitting\n   */\n  (n: number): <A>(self: Iterable<A>) => Array<Array<A>>\n  /**\n   * Splits this iterable into `n` equally sized arrays.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n   * const result = Array.split(numbers, 3)\n   * assert.deepStrictEqual(result, [[1, 2, 3], [4, 5, 6], [7, 8]])\n   *\n   * @since 2.0.0\n   * @category splitting\n   */\n  <A>(self: Iterable<A>, n: number): Array<Array<A>>\n} = dual(2, <A>(self: Iterable<A>, n: number) => {\n  const input = fromIterable(self)\n  return chunksOf(input, Math.ceil(input.length / Math.floor(n)))\n})\n\n/**\n * Splits this iterable on the first element that matches this predicate.\n * Returns a tuple containing two arrays: the first one is before the match, and the second one is from the match onward.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.splitWhere(numbers, n => n > 3)\n * assert.deepStrictEqual(result, [[1, 2, 3], [4, 5]])\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitWhere: {\n  /**\n   * Splits this iterable on the first element that matches this predicate.\n   * Returns a tuple containing two arrays: the first one is before the match, and the second one is from the match onward.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.splitWhere(numbers, n => n > 3)\n   * assert.deepStrictEqual(result, [[1, 2, 3], [4, 5]])\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(\n    predicate: (a: NoInfer<A>, i: number) => boolean\n  ): (self: Iterable<A>) => [beforeMatch: Array<A>, fromMatch: Array<A>]\n  /**\n   * Splits this iterable on the first element that matches this predicate.\n   * Returns a tuple containing two arrays: the first one is before the match, and the second one is from the match onward.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.splitWhere(numbers, n => n > 3)\n   * assert.deepStrictEqual(result, [[1, 2, 3], [4, 5]])\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [beforeMatch: Array<A>, fromMatch: Array<A>]\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [beforeMatch: Array<A>, fromMatch: Array<A>] =>\n    span(self, (a: A, i: number) => !predicate(a, i))\n)\n\n/**\n * Copies an array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const copy = Array.copy(numbers)\n * assert.deepStrictEqual(copy, [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport const copy: {\n  /**\n   * Copies an array.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3]\n   * const copy = Array.copy(numbers)\n   * assert.deepStrictEqual(copy, [1, 2, 3])\n   *\n   * @since 2.0.0\n   */\n  <A>(self: NonEmptyReadonlyArray<A>): NonEmptyArray<A>\n  /**\n   * Copies an array.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3]\n   * const copy = Array.copy(numbers)\n   * assert.deepStrictEqual(copy, [1, 2, 3])\n   *\n   * @since 2.0.0\n   */\n  <A>(self: ReadonlyArray<A>): Array<A>\n} = (<A>(self: ReadonlyArray<A>): Array<A> => self.slice()) as any\n\n/**\n * Pads an array.\n * Returns a new array of length `n` with the elements of `array` followed by `fill` elements if `array` is shorter than `n`.\n * If `array` is longer than `n`, the returned array will be a slice of `array` containing the `n` first elements of `array`.\n * If `n` is less than or equal to 0, the returned array will be an empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const arr = [1, 2, 3]\n * const result = Array.pad(arr, 6, 0)\n * assert.deepStrictEqual(result, [1, 2, 3, 0, 0, 0])\n *\n * @since 3.8.4\n */\nexport const pad: {\n  /**\n   * Pads an array.\n   * Returns a new array of length `n` with the elements of `array` followed by `fill` elements if `array` is shorter than `n`.\n   * If `array` is longer than `n`, the returned array will be a slice of `array` containing the `n` first elements of `array`.\n   * If `n` is less than or equal to 0, the returned array will be an empty array.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const arr = [1, 2, 3]\n   * const result = Array.pad(arr, 6, 0)\n   * assert.deepStrictEqual(result, [1, 2, 3, 0, 0, 0])\n   *\n   * @since 3.8.4\n   */\n  <A, T>(n: number, fill: T): (\n    self: Array<A>\n  ) => Array<A | T>\n  /**\n   * Pads an array.\n   * Returns a new array of length `n` with the elements of `array` followed by `fill` elements if `array` is shorter than `n`.\n   * If `array` is longer than `n`, the returned array will be a slice of `array` containing the `n` first elements of `array`.\n   * If `n` is less than or equal to 0, the returned array will be an empty array.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const arr = [1, 2, 3]\n   * const result = Array.pad(arr, 6, 0)\n   * assert.deepStrictEqual(result, [1, 2, 3, 0, 0, 0])\n   *\n   * @since 3.8.4\n   */\n  <A, T>(self: Array<A>, n: number, fill: T): Array<A | T>\n} = dual(3, <A, T>(self: Array<A>, n: number, fill: T): Array<A | T> => {\n  if (self.length >= n) {\n    return take(self, n)\n  }\n  return appendAll(\n    self,\n    makeBy(n - self.length, () => fill)\n  )\n})\n\n/**\n * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the `Iterable`. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n * definition of `chunksOf`; it satisfies the property that\n *\n * ```ts\n * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n * ```\n *\n * whenever `n` evenly divides the length of `self`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.chunksOf(numbers, 2)\n * assert.deepStrictEqual(result, [[1, 2], [3, 4], [5]])\n *\n * // Explanation:\n * // The `chunksOf` function takes an array of numbers `[1, 2, 3, 4, 5]` and a number `2`.\n * // It splits the array into chunks of length 2. Since the array length is not evenly divisible by 2,\n * // the last chunk contains the remaining elements.\n * // The result is `[[1, 2], [3, 4], [5]]`.\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const chunksOf: {\n  /**\n   * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n   * the `Iterable`. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n   * definition of `chunksOf`; it satisfies the property that\n   *\n   * ```ts\n   * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n   * ```\n   *\n   * whenever `n` evenly divides the length of `self`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.chunksOf(numbers, 2)\n   * assert.deepStrictEqual(result, [[1, 2], [3, 4], [5]])\n   *\n   * // Explanation:\n   * // The `chunksOf` function takes an array of numbers `[1, 2, 3, 4, 5]` and a number `2`.\n   * // It splits the array into chunks of length 2. Since the array length is not evenly divisible by 2,\n   * // the last chunk contains the remaining elements.\n   * // The result is `[[1, 2], [3, 4], [5]]`.\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  (n: number): <S extends Iterable<any>>(\n    self: S\n  ) => ReadonlyArray.With<S, NonEmptyArray<ReadonlyArray.Infer<S>>>\n  /**\n   * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n   * the `Iterable`. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n   * definition of `chunksOf`; it satisfies the property that\n   *\n   * ```ts\n   * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n   * ```\n   *\n   * whenever `n` evenly divides the length of `self`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.chunksOf(numbers, 2)\n   * assert.deepStrictEqual(result, [[1, 2], [3, 4], [5]])\n   *\n   * // Explanation:\n   * // The `chunksOf` function takes an array of numbers `[1, 2, 3, 4, 5]` and a number `2`.\n   * // It splits the array into chunks of length 2. Since the array length is not evenly divisible by 2,\n   * // the last chunk contains the remaining elements.\n   * // The result is `[[1, 2], [3, 4], [5]]`.\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(self: NonEmptyReadonlyArray<A>, n: number): NonEmptyArray<NonEmptyArray<A>>\n  /**\n   * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n   * the `Iterable`. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n   * definition of `chunksOf`; it satisfies the property that\n   *\n   * ```ts\n   * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n   * ```\n   *\n   * whenever `n` evenly divides the length of `self`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * const result = Array.chunksOf(numbers, 2)\n   * assert.deepStrictEqual(result, [[1, 2], [3, 4], [5]])\n   *\n   * // Explanation:\n   * // The `chunksOf` function takes an array of numbers `[1, 2, 3, 4, 5]` and a number `2`.\n   * // It splits the array into chunks of length 2. Since the array length is not evenly divisible by 2,\n   * // the last chunk contains the remaining elements.\n   * // The result is `[[1, 2], [3, 4], [5]]`.\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): Array<NonEmptyArray<A>>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<NonEmptyArray<A>> => {\n  const input = fromIterable(self)\n  if (isNonEmptyReadonlyArray(input)) {\n    return chop(input, splitNonEmptyAt(n))\n  }\n  return []\n})\n\n/**\n * Group equal, consecutive elements of a `NonEmptyReadonlyArray` into `NonEmptyArray`s using the provided `isEquivalent` function.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.groupWith([\"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"a\"], (x, y) => x === y)\n * assert.deepStrictEqual(result, [[\"a\", \"a\"], [\"b\", \"b\", \"b\"], [\"c\"], [\"a\"]])\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const groupWith: {\n  /**\n   * Group equal, consecutive elements of a `NonEmptyReadonlyArray` into `NonEmptyArray`s using the provided `isEquivalent` function.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.groupWith([\"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"a\"], (x, y) => x === y)\n   * assert.deepStrictEqual(result, [[\"a\", \"a\"], [\"b\", \"b\", \"b\"], [\"c\"], [\"a\"]])\n   *\n   * @category grouping\n   * @since 2.0.0\n   */\n  <A>(isEquivalent: (self: A, that: A) => boolean): (self: NonEmptyReadonlyArray<A>) => NonEmptyArray<NonEmptyArray<A>>\n  /**\n   * Group equal, consecutive elements of a `NonEmptyReadonlyArray` into `NonEmptyArray`s using the provided `isEquivalent` function.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.groupWith([\"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"a\"], (x, y) => x === y)\n   * assert.deepStrictEqual(result, [[\"a\", \"a\"], [\"b\", \"b\", \"b\"], [\"c\"], [\"a\"]])\n   *\n   * @category grouping\n   * @since 2.0.0\n   */\n  <A>(\n    self: NonEmptyReadonlyArray<A>,\n    isEquivalent: (self: A, that: A) => boolean\n  ): NonEmptyArray<NonEmptyArray<A>>\n} = dual(\n  2,\n  <A>(self: NonEmptyReadonlyArray<A>, isEquivalent: (self: A, that: A) => boolean): NonEmptyArray<NonEmptyArray<A>> =>\n    chop(self, (as) => {\n      const h = headNonEmpty(as)\n      const out: NonEmptyArray<A> = [h]\n      let i = 1\n      for (; i < as.length; i++) {\n        const a = as[i]\n        if (isEquivalent(a, h)) {\n          out.push(a)\n        } else {\n          break\n        }\n      }\n      return [out, as.slice(i)]\n    })\n)\n\n/**\n * Group equal, consecutive elements of a `NonEmptyReadonlyArray` into `NonEmptyArray`s.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.group([1, 1, 2, 2, 2, 3, 1])\n * assert.deepStrictEqual(result, [[1, 1], [2, 2, 2], [3], [1]])\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const group: <A>(self: NonEmptyReadonlyArray<A>) => NonEmptyArray<NonEmptyArray<A>> = groupWith(\n  Equal.equivalence()\n)\n\n/**\n * Splits an `Iterable` into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n * function on each element, and grouping the results according to values returned\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const people = [\n *   { name: \"Alice\", group: \"A\" },\n *   { name: \"Bob\", group: \"B\" },\n *   { name: \"Charlie\", group: \"A\" }\n * ]\n * const result = Array.groupBy(people, person => person.group)\n * assert.deepStrictEqual(result, {\n *   A: [{ name: \"Alice\", group: \"A\" }, { name: \"Charlie\", group: \"A\" }],\n *   B: [{ name: \"Bob\", group: \"B\" }]\n * })\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const groupBy: {\n  /**\n   * Splits an `Iterable` into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n   * function on each element, and grouping the results according to values returned\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const people = [\n   *   { name: \"Alice\", group: \"A\" },\n   *   { name: \"Bob\", group: \"B\" },\n   *   { name: \"Charlie\", group: \"A\" }\n   * ]\n   * const result = Array.groupBy(people, person => person.group)\n   * assert.deepStrictEqual(result, {\n   *   A: [{ name: \"Alice\", group: \"A\" }, { name: \"Charlie\", group: \"A\" }],\n   *   B: [{ name: \"Bob\", group: \"B\" }]\n   * })\n   *\n   * @category grouping\n   * @since 2.0.0\n   */\n  <A, K extends string | symbol>(\n    f: (a: A) => K\n  ): (self: Iterable<A>) => Record<Record.ReadonlyRecord.NonLiteralKey<K>, NonEmptyArray<A>>\n  /**\n   * Splits an `Iterable` into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n   * function on each element, and grouping the results according to values returned\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const people = [\n   *   { name: \"Alice\", group: \"A\" },\n   *   { name: \"Bob\", group: \"B\" },\n   *   { name: \"Charlie\", group: \"A\" }\n   * ]\n   * const result = Array.groupBy(people, person => person.group)\n   * assert.deepStrictEqual(result, {\n   *   A: [{ name: \"Alice\", group: \"A\" }, { name: \"Charlie\", group: \"A\" }],\n   *   B: [{ name: \"Bob\", group: \"B\" }]\n   * })\n   *\n   * @category grouping\n   * @since 2.0.0\n   */\n  <A, K extends string | symbol>(\n    self: Iterable<A>,\n    f: (a: A) => K\n  ): Record<Record.ReadonlyRecord.NonLiteralKey<K>, NonEmptyArray<A>>\n} = dual(2, <A, K extends string | symbol>(\n  self: Iterable<A>,\n  f: (a: A) => K\n): Record<Record.ReadonlyRecord.NonLiteralKey<K>, NonEmptyArray<A>> => {\n  const out: Record<string | symbol, NonEmptyArray<A>> = {}\n  for (const a of self) {\n    const k = f(a)\n    if (Object.prototype.hasOwnProperty.call(out, k)) {\n      out[k].push(a)\n    } else {\n      out[k] = [a]\n    }\n  }\n  return out\n})\n\n/**\n * Calculates the union of two arrays using the provided equivalence relation.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2]\n * const array2 = [2, 3]\n * const union = Array.unionWith(array1, array2, (a, b) => a === b)\n * assert.deepStrictEqual(union, [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport const unionWith: {\n  /**\n   * Calculates the union of two arrays using the provided equivalence relation.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const array1 = [1, 2]\n   * const array2 = [2, 3]\n   * const union = Array.unionWith(array1, array2, (a, b) => a === b)\n   * assert.deepStrictEqual(union, [1, 2, 3])\n   *\n   * @since 2.0.0\n   */\n  <S extends Iterable<any>, T extends Iterable<any>>(\n    that: T,\n    isEquivalent: (self: ReadonlyArray.Infer<S>, that: ReadonlyArray.Infer<T>) => boolean\n  ): (self: S) => ReadonlyArray.OrNonEmpty<S, T, ReadonlyArray.Infer<S> | ReadonlyArray.Infer<T>>\n  /**\n   * Calculates the union of two arrays using the provided equivalence relation.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const array1 = [1, 2]\n   * const array2 = [2, 3]\n   * const union = Array.unionWith(array1, array2, (a, b) => a === b)\n   * assert.deepStrictEqual(union, [1, 2, 3])\n   *\n   * @since 2.0.0\n   */\n  <A, B>(\n    self: NonEmptyReadonlyArray<A>,\n    that: Iterable<B>,\n    isEquivalent: (self: A, that: B) => boolean\n  ): NonEmptyArray<A | B>\n  /**\n   * Calculates the union of two arrays using the provided equivalence relation.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const array1 = [1, 2]\n   * const array2 = [2, 3]\n   * const union = Array.unionWith(array1, array2, (a, b) => a === b)\n   * assert.deepStrictEqual(union, [1, 2, 3])\n   *\n   * @since 2.0.0\n   */\n  <A, B>(\n    self: Iterable<A>,\n    that: NonEmptyReadonlyArray<B>,\n    isEquivalent: (self: A, that: B) => boolean\n  ): NonEmptyArray<A | B>\n  /**\n   * Calculates the union of two arrays using the provided equivalence relation.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const array1 = [1, 2]\n   * const array2 = [2, 3]\n   * const union = Array.unionWith(array1, array2, (a, b) => a === b)\n   * assert.deepStrictEqual(union, [1, 2, 3])\n   *\n   * @since 2.0.0\n   */\n  <A, B>(\n    self: Iterable<A>,\n    that: Iterable<B>,\n    isEquivalent: (self: A, that: B) => boolean\n  ): Array<A | B>\n} = dual(3, <A>(self: Iterable<A>, that: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Array<A> => {\n  const a = fromIterable(self)\n  const b = fromIterable(that)\n  if (isNonEmptyReadonlyArray(a)) {\n    if (isNonEmptyReadonlyArray(b)) {\n      const dedupe = dedupeWith(isEquivalent)\n      return dedupe(appendAll(a, b))\n    }\n    return a\n  }\n  return b\n})\n\n/**\n * Creates a union of two arrays, removing duplicates.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2]\n * const array2 = [2, 3]\n * const result = Array.union(array1, array2)\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport const union: {\n  /**\n   * Creates a union of two arrays, removing duplicates.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const array1 = [1, 2]\n   * const array2 = [2, 3]\n   * const result = Array.union(array1, array2)\n   * assert.deepStrictEqual(result, [1, 2, 3])\n   *\n   * @since 2.0.0\n   */\n  <T extends Iterable<any>>(that: T): <S extends Iterable<any>>(\n    self: S\n  ) => ReadonlyArray.OrNonEmpty<S, T, ReadonlyArray.Infer<S> | ReadonlyArray.Infer<T>>\n  /**\n   * Creates a union of two arrays, removing duplicates.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const array1 = [1, 2]\n   * const array2 = [2, 3]\n   * const result = Array.union(array1, array2)\n   * assert.deepStrictEqual(result, [1, 2, 3])\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, that: ReadonlyArray<B>): NonEmptyArray<A | B>\n  /**\n   * Creates a union of two arrays, removing duplicates.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const array1 = [1, 2]\n   * const array2 = [2, 3]\n   * const result = Array.union(array1, array2)\n   * assert.deepStrictEqual(result, [1, 2, 3])\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: ReadonlyArray<A>, that: NonEmptyReadonlyArray<B>): NonEmptyArray<A | B>\n  /**\n   * Creates a union of two arrays, removing duplicates.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const array1 = [1, 2]\n   * const array2 = [2, 3]\n   * const result = Array.union(array1, array2)\n   * assert.deepStrictEqual(result, [1, 2, 3])\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, that: Iterable<B>): Array<A | B> => unionWith(self, that, _equivalence))\n\n/**\n * Creates an `Array` of unique values that are included in all given `Iterable`s using the provided `isEquivalent` function.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [{ id: 1 }, { id: 2 }, { id: 3 }]\n * const array2 = [{ id: 3 }, { id: 4 }, { id: 1 }]\n * const isEquivalent = (a: { id: number }, b: { id: number }) => a.id === b.id\n * const result = Array.intersectionWith(isEquivalent)(array2)(array1)\n * assert.deepStrictEqual(result, [{ id: 1 }, { id: 3 }])\n *\n * @since 2.0.0\n */\nexport const intersectionWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (that: Iterable<A>): (self: Iterable<A>) => Array<A>\n  (self: Iterable<A>, that: Iterable<A>): Array<A>\n} => {\n  const has = containsWith(isEquivalent)\n  return dual(\n    2,\n    (self: Iterable<A>, that: Iterable<A>): Array<A> => fromIterable(self).filter((a) => has(that, a))\n  )\n}\n\n/**\n * Creates an `Array` of unique values that are included in all given `Iterable`s.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = [3, 4, 1]\n * const result = Array.intersection(array1, array2)\n * assert.deepStrictEqual(result, [1, 3])\n *\n * @since 2.0.0\n */\nexport const intersection: {\n  /**\n   * Creates an `Array` of unique values that are included in all given `Iterable`s.\n   * The order and references of result values are determined by the first `Iterable`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const array1 = [1, 2, 3]\n   * const array2 = [3, 4, 1]\n   * const result = Array.intersection(array1, array2)\n   * assert.deepStrictEqual(result, [1, 3])\n   *\n   * @since 2.0.0\n   */\n  <B>(that: Iterable<B>): <A>(self: Iterable<A>) => Array<A & B>\n  /**\n   * Creates an `Array` of unique values that are included in all given `Iterable`s.\n   * The order and references of result values are determined by the first `Iterable`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const array1 = [1, 2, 3]\n   * const array2 = [3, 4, 1]\n   * const result = Array.intersection(array1, array2)\n   * assert.deepStrictEqual(result, [1, 3])\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<A & B>\n} = intersectionWith(_equivalence)\n\n/**\n * Creates a `Array` of values not included in the other given `Iterable` using the provided `isEquivalent` function.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = [2, 3, 4]\n * const difference = Array.differenceWith<number>((a, b) => a === b)(array1, array2)\n * assert.deepStrictEqual(difference, [1])\n *\n * @since 2.0.0\n */\nexport const differenceWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (that: Iterable<A>): (self: Iterable<A>) => Array<A>\n  (self: Iterable<A>, that: Iterable<A>): Array<A>\n} => {\n  const has = containsWith(isEquivalent)\n  return dual(\n    2,\n    (self: Iterable<A>, that: Iterable<A>): Array<A> => fromIterable(self).filter((a) => !has(that, a))\n  )\n}\n\n/**\n * Creates a `Array` of values not included in the other given `Iterable`.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = [2, 3, 4]\n * const difference = Array.difference(array1, array2)\n * assert.deepStrictEqual(difference, [1])\n *\n * @since 2.0.0\n */\nexport const difference: {\n  /**\n   * Creates a `Array` of values not included in the other given `Iterable`.\n   * The order and references of result values are determined by the first `Iterable`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const array1 = [1, 2, 3]\n   * const array2 = [2, 3, 4]\n   * const difference = Array.difference(array1, array2)\n   * assert.deepStrictEqual(difference, [1])\n   *\n   * @since 2.0.0\n   */\n  <A>(that: Iterable<A>): (self: Iterable<A>) => Array<A>\n  /**\n   * Creates a `Array` of values not included in the other given `Iterable`.\n   * The order and references of result values are determined by the first `Iterable`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const array1 = [1, 2, 3]\n   * const array2 = [2, 3, 4]\n   * const difference = Array.difference(array1, array2)\n   * assert.deepStrictEqual(difference, [1])\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, that: Iterable<A>): Array<A>\n} = differenceWith(_equivalence)\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const empty: <A = never>() => Array<A> = () => []\n\n/**\n * Constructs a new `NonEmptyArray<A>` from the specified value.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const of = <A>(a: A): NonEmptyArray<A> => [a]\n\n/**\n * @since 2.0.0\n */\nexport declare namespace ReadonlyArray {\n  /**\n   * @since 2.0.0\n   */\n  export type Infer<S extends Iterable<any>> = S extends ReadonlyArray<infer A> ? A\n    : S extends Iterable<infer A> ? A\n    : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type With<S extends Iterable<any>, A> = S extends NonEmptyReadonlyArray<any> ? NonEmptyArray<A>\n    : Array<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type OrNonEmpty<\n    S extends Iterable<any>,\n    T extends Iterable<any>,\n    A\n  > = S extends NonEmptyReadonlyArray<any> ? NonEmptyArray<A>\n    : T extends NonEmptyReadonlyArray<any> ? NonEmptyArray<A>\n    : Array<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type AndNonEmpty<\n    S extends Iterable<any>,\n    T extends Iterable<any>,\n    A\n  > = S extends NonEmptyReadonlyArray<any> ? T extends NonEmptyReadonlyArray<any> ? NonEmptyArray<A>\n    : Array<A>\n    : Array<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type Flatten<T extends ReadonlyArray<ReadonlyArray<any>>> = T extends\n    NonEmptyReadonlyArray<NonEmptyReadonlyArray<infer A>> ? NonEmptyArray<A>\n    : T extends ReadonlyArray<ReadonlyArray<infer A>> ? Array<A>\n    : never\n}\n\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const map: {\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <S extends ReadonlyArray<any>, B>(\n    f: (a: ReadonlyArray.Infer<S>, i: number) => B\n  ): (self: S) => ReadonlyArray.With<S, B>\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <S extends ReadonlyArray<any>, B>(self: S, f: (a: ReadonlyArray.Infer<S>, i: number) => B): ReadonlyArray.With<S, B>\n} = dual(2, <A, B>(self: ReadonlyArray<A>, f: (a: A, i: number) => B): Array<B> => self.map(f))\n\n/**\n * Applies a function to each element in an array and returns a new array containing the concatenated mapped elements.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMap: {\n  /**\n   * Applies a function to each element in an array and returns a new array containing the concatenated mapped elements.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <S extends ReadonlyArray<any>, T extends ReadonlyArray<any>>(\n    f: (a: ReadonlyArray.Infer<S>, i: number) => T\n  ): (self: S) => ReadonlyArray.AndNonEmpty<S, T, ReadonlyArray.Infer<T>>\n  /**\n   * Applies a function to each element in an array and returns a new array containing the concatenated mapped elements.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(\n    self: NonEmptyReadonlyArray<A>,\n    f: (a: A, i: number) => NonEmptyReadonlyArray<B>\n  ): NonEmptyArray<B>\n  /**\n   * Applies a function to each element in an array and returns a new array containing the concatenated mapped elements.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: ReadonlyArray<A>, f: (a: A, i: number) => ReadonlyArray<B>): Array<B>\n} = dual(\n  2,\n  <A, B>(self: ReadonlyArray<A>, f: (a: A, i: number) => ReadonlyArray<B>): Array<B> => {\n    if (isEmptyReadonlyArray(self)) {\n      return []\n    }\n    const out: Array<B> = []\n    for (let i = 0; i < self.length; i++) {\n      const inner = f(self[i], i)\n      for (let j = 0; j < inner.length; j++) {\n        out.push(inner[j])\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Combines multiple arrays into a single array by concatenating all elements\n * from each nested array. This function ensures that the structure of nested\n * arrays is collapsed into a single, flat array.\n *\n * @example\n * import { Array } from \"effect\";\n *\n * const nestedArrays = [[1, 2], [], [3, 4], [], [5, 6]]\n * const result = Array.flatten(nestedArrays)\n *\n * assert.deepStrictEqual(result, [1, 2, 3, 4, 5, 6]);\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatten: <S extends ReadonlyArray<ReadonlyArray<any>>>(self: S) => ReadonlyArray.Flatten<S> = flatMap(\n  identity\n) as any\n\n/**\n * Applies a function to each element of the `Iterable` and filters based on the result, keeping the transformed values where the function returns `Some`.\n * This method combines filtering and mapping functionalities, allowing transformations and filtering of elements based on a single function pass.\n *\n * @example\n * import { Array, Option } from \"effect\";\n *\n * const data = [1, 2, 3, 4, 5];\n * const evenSquares = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none();\n * const result = Array.filterMap(data, evenSquares);\n *\n * assert.deepStrictEqual(result, [4, 16]);\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filterMap: {\n  /**\n   * Applies a function to each element of the `Iterable` and filters based on the result, keeping the transformed values where the function returns `Some`.\n   * This method combines filtering and mapping functionalities, allowing transformations and filtering of elements based on a single function pass.\n   *\n   * @example\n   * import { Array, Option } from \"effect\";\n   *\n   * const data = [1, 2, 3, 4, 5];\n   * const evenSquares = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none();\n   * const result = Array.filterMap(data, evenSquares);\n   *\n   * assert.deepStrictEqual(result, [4, 16]);\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A, i: number) => Option<B>): (self: Iterable<A>) => Array<B>\n  /**\n   * Applies a function to each element of the `Iterable` and filters based on the result, keeping the transformed values where the function returns `Some`.\n   * This method combines filtering and mapping functionalities, allowing transformations and filtering of elements based on a single function pass.\n   *\n   * @example\n   * import { Array, Option } from \"effect\";\n   *\n   * const data = [1, 2, 3, 4, 5];\n   * const evenSquares = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none();\n   * const result = Array.filterMap(data, evenSquares);\n   *\n   * assert.deepStrictEqual(result, [4, 16]);\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>): Array<B>\n} = dual(\n  2,\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>): Array<B> => {\n    const as = fromIterable(self)\n    const out: Array<B> = []\n    for (let i = 0; i < as.length; i++) {\n      const o = f(as[i], i)\n      if (O.isSome(o)) {\n        out.push(o.value)\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Applies a function to each element of the array and filters based on the result, stopping when a condition is not met.\n * This method combines filtering and mapping in a single pass, and short-circuits, i.e., stops processing, as soon as the function returns `None`.\n * This is useful when you need to transform an array but only up to the point where a certain condition holds true.\n *\n * @example\n * import { Array, Option } from \"effect\";\n *\n * const data = [2, 4, 5];\n * const toSquareTillOdd = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none();\n * const result = Array.filterMapWhile(data, toSquareTillOdd);\n *\n * assert.deepStrictEqual(result, [4, 16]);\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filterMapWhile: {\n  /**\n   * Applies a function to each element of the array and filters based on the result, stopping when a condition is not met.\n   * This method combines filtering and mapping in a single pass, and short-circuits, i.e., stops processing, as soon as the function returns `None`.\n   * This is useful when you need to transform an array but only up to the point where a certain condition holds true.\n   *\n   * @example\n   * import { Array, Option } from \"effect\";\n   *\n   * const data = [2, 4, 5];\n   * const toSquareTillOdd = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none();\n   * const result = Array.filterMapWhile(data, toSquareTillOdd);\n   *\n   * assert.deepStrictEqual(result, [4, 16]);\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A, i: number) => Option<B>): (self: Iterable<A>) => Array<B>\n  /**\n   * Applies a function to each element of the array and filters based on the result, stopping when a condition is not met.\n   * This method combines filtering and mapping in a single pass, and short-circuits, i.e., stops processing, as soon as the function returns `None`.\n   * This is useful when you need to transform an array but only up to the point where a certain condition holds true.\n   *\n   * @example\n   * import { Array, Option } from \"effect\";\n   *\n   * const data = [2, 4, 5];\n   * const toSquareTillOdd = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none();\n   * const result = Array.filterMapWhile(data, toSquareTillOdd);\n   *\n   * assert.deepStrictEqual(result, [4, 16]);\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>): Array<B>\n} = dual(2, <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>) => {\n  let i = 0\n  const out: Array<B> = []\n  for (const a of self) {\n    const b = f(a, i)\n    if (O.isSome(b)) {\n      out.push(b.value)\n    } else {\n      break\n    }\n    i++\n  }\n  return out\n})\n\n/**\n * Applies a function to each element of the `Iterable`, categorizing the results into two separate arrays.\n * This function is particularly useful for operations where each element can result in two possible types,\n * and you want to separate these types into different collections. For instance, separating validation results\n * into successes and failures.\n *\n * @example\n * import { Array, Either } from \"effect\";\n *\n * const data = [1, 2, 3, 4, 5]\n * const isEven = (x: number) => x % 2 === 0\n * const partitioned = Array.partitionMap(data, x =>\n *   isEven(x) ? Either.right(x) : Either.left(x)\n * )\n *\n * assert.deepStrictEqual(partitioned, [\n *   [1, 3, 5],\n *   [2, 4]\n * ])\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partitionMap: {\n  /**\n   * Applies a function to each element of the `Iterable`, categorizing the results into two separate arrays.\n   * This function is particularly useful for operations where each element can result in two possible types,\n   * and you want to separate these types into different collections. For instance, separating validation results\n   * into successes and failures.\n   *\n   * @example\n   * import { Array, Either } from \"effect\";\n   *\n   * const data = [1, 2, 3, 4, 5]\n   * const isEven = (x: number) => x % 2 === 0\n   * const partitioned = Array.partitionMap(data, x =>\n   *   isEven(x) ? Either.right(x) : Either.left(x)\n   * )\n   *\n   * assert.deepStrictEqual(partitioned, [\n   *   [1, 3, 5],\n   *   [2, 4]\n   * ])\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B, C>(f: (a: A, i: number) => array_<C, B>): (self: Iterable<A>) => [left: Array<B>, right: Array<C>]\n  /**\n   * Applies a function to each element of the `Iterable`, categorizing the results into two separate arrays.\n   * This function is particularly useful for operations where each element can result in two possible types,\n   * and you want to separate these types into different collections. For instance, separating validation results\n   * into successes and failures.\n   *\n   * @example\n   * import { Array, Either } from \"effect\";\n   *\n   * const data = [1, 2, 3, 4, 5]\n   * const isEven = (x: number) => x % 2 === 0\n   * const partitioned = Array.partitionMap(data, x =>\n   *   isEven(x) ? Either.right(x) : Either.left(x)\n   * )\n   *\n   * assert.deepStrictEqual(partitioned, [\n   *   [1, 3, 5],\n   *   [2, 4]\n   * ])\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B, C>(self: Iterable<A>, f: (a: A, i: number) => array_<C, B>): [left: Array<B>, right: Array<C>]\n} = dual(\n  2,\n  <A, B, C>(self: Iterable<A>, f: (a: A, i: number) => array_<C, B>): [left: Array<B>, right: Array<C>] => {\n    const left: Array<B> = []\n    const right: Array<C> = []\n    const as = fromIterable(self)\n    for (let i = 0; i < as.length; i++) {\n      const e = f(as[i], i)\n      if (E.isLeft(e)) {\n        left.push(e.left)\n      } else {\n        right.push(e.right)\n      }\n    }\n    return [left, right]\n  }\n)\n\n/**\n * Retrieves the `Some` values from an `Iterable` of `Option`s, collecting them into an array.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.getSomes([Option.some(1), Option.none(), Option.some(2)]),\n *   [1, 2]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\n\nexport const getSomes: <T extends Iterable<Option<X>>, X = any>(\n  self: T\n) => Array<Option.Value<ReadonlyArray.Infer<T>>> = filterMap(identity as any)\n\n/**\n * Retrieves the `Left` values from an `Iterable` of `Either`s, collecting them into an array.\n *\n * @example\n * import { Array, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.getLefts([Either.right(1), Either.left(\"err\"), Either.right(2)]),\n *   [\"err\"]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getLefts = <T extends Iterable<array_<any, any>>>(self: T): Array<array_.Left<ReadonlyArray.Infer<T>>> => {\n  const out: Array<any> = []\n  for (const a of self) {\n    if (E.isLeft(a)) {\n      out.push(a.left)\n    }\n  }\n\n  return out\n}\n\n/**\n * Retrieves the `Right` values from an `Iterable` of `Either`s, collecting them into an array.\n *\n * @example\n * import { Array, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.getRights([Either.right(1), Either.left(\"err\"), Either.right(2)]),\n *   [1, 2]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getRights = <T extends Iterable<array_<any, any>>>(\n  self: T\n): Array<array_.Right<ReadonlyArray.Infer<T>>> => {\n  const out: Array<any> = []\n  for (const a of self) {\n    if (E.isRight(a)) {\n      out.push(a.right)\n    }\n  }\n\n  return out\n}\n\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport const filter: {\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Array<B>\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Array<A>\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Array<B>\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A> => {\n    const as = fromIterable(self)\n    const out: Array<A> = []\n    for (let i = 0; i < as.length; i++) {\n      if (predicate(as[i], i)) {\n        out.push(as[i])\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Separate elements based on a predicate that also exposes the index of the element.\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partition: {\n  /**\n   * Separate elements based on a predicate that also exposes the index of the element.\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (\n    self: Iterable<A>\n  ) => [excluded: Array<Exclude<A, B>>, satisfying: Array<B>]\n  /**\n   * Separate elements based on a predicate that also exposes the index of the element.\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A>(\n    predicate: (a: NoInfer<A>, i: number) => boolean\n  ): (self: Iterable<A>) => [excluded: Array<A>, satisfying: Array<A>]\n  /**\n   * Separate elements based on a predicate that also exposes the index of the element.\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(\n    self: Iterable<A>,\n    refinement: (a: A, i: number) => a is B\n  ): [excluded: Array<Exclude<A, B>>, satisfying: Array<B>]\n  /**\n   * Separate elements based on a predicate that also exposes the index of the element.\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [excluded: Array<A>, satisfying: Array<A>]\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [excluded: Array<A>, satisfying: Array<A>] => {\n    const left: Array<A> = []\n    const right: Array<A> = []\n    const as = fromIterable(self)\n    for (let i = 0; i < as.length; i++) {\n      if (predicate(as[i], i)) {\n        right.push(as[i])\n      } else {\n        left.push(as[i])\n      }\n    }\n    return [left, right]\n  }\n)\n\n/**\n * Separates an `Iterable` into two arrays based on a predicate.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.partition(numbers, n => n % 2 === 0)\n * assert.deepStrictEqual(result, [[1, 3], [2, 4]])\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const separate: <T extends Iterable<array_<any, any>>>(\n  self: T\n) => [Array<array_.Left<ReadonlyArray.Infer<T>>>, Array<array_.Right<ReadonlyArray.Infer<T>>>] = partitionMap(\n  identity\n)\n\n/**\n * Reduces an array from the left.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.reduce(numbers, 0, (acc, n) => acc + n)\n * assert.deepStrictEqual(result, 6)\n *\n * @category folding\n * @since 2.0.0\n */\nexport const reduce: {\n  /**\n   * Reduces an array from the left.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3]\n   * const result = Array.reduce(numbers, 0, (acc, n) => acc + n)\n   * assert.deepStrictEqual(result, 6)\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <B, A>(b: B, f: (b: B, a: A, i: number) => B): (self: Iterable<A>) => B\n  /**\n   * Reduces an array from the left.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3]\n   * const result = Array.reduce(numbers, 0, (acc, n) => acc + n)\n   * assert.deepStrictEqual(result, 6)\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A, i: number) => B): B\n} = dual(\n  3,\n  <B, A>(self: Iterable<A>, b: B, f: (b: B, a: A, i: number) => B): B =>\n    fromIterable(self).reduce((b, a, i) => f(b, a, i), b)\n)\n\n/**\n * Reduces an array from the right.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.reduceRight(numbers, 0, (acc, n) => acc + n)\n * assert.deepStrictEqual(result, 6)\n *\n * @category folding\n * @since 2.0.0\n */\nexport const reduceRight: {\n  /**\n   * Reduces an array from the right.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3]\n   * const result = Array.reduceRight(numbers, 0, (acc, n) => acc + n)\n   * assert.deepStrictEqual(result, 6)\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <B, A>(b: B, f: (b: B, a: A, i: number) => B): (self: Iterable<A>) => B\n  /**\n   * Reduces an array from the right.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3]\n   * const result = Array.reduceRight(numbers, 0, (acc, n) => acc + n)\n   * assert.deepStrictEqual(result, 6)\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A, i: number) => B): B\n} = dual(\n  3,\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A, i: number) => B): B =>\n    fromIterable(self).reduceRight((b, a, i) => f(b, a, i), b)\n)\n\n/**\n * Lifts a predicate into an array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const isEven = (n: number) => n % 2 === 0\n * const to = Array.liftPredicate(isEven)\n * assert.deepStrictEqual(to(1), [])\n * assert.deepStrictEqual(to(2), [2])\n *\n * @category lifting\n * @since 2.0.0\n */\nexport const liftPredicate: { // Note: I intentionally avoid using the NoInfer pattern here.\n  <A, B extends A>(refinement: Refinement<A, B>): (a: A) => Array<B>\n  /**\n   * Lifts a predicate into an array.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const isEven = (n: number) => n % 2 === 0\n   * const to = Array.liftPredicate(isEven)\n   * assert.deepStrictEqual(to(1), [])\n   * assert.deepStrictEqual(to(2), [2])\n   *\n   * @category lifting\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate<A>): <B extends A>(b: B) => Array<B>\n} = <A>(predicate: Predicate<A>) => <B extends A>(b: B): Array<B> => predicate(b) ? [b] : []\n\n/**\n * @category lifting\n * @since 2.0.0\n */\nexport const liftOption = <A extends Array<unknown>, B>(\n  f: (...a: A) => Option<B>\n) =>\n(...a: A): Array<B> => fromOption(f(...a))\n\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport const fromNullable = <A>(a: A): Array<NonNullable<A>> => a == null ? empty() : [a as NonNullable<A>]\n\n/**\n * @category lifting\n * @since 2.0.0\n */\nexport const liftNullable = <A extends Array<unknown>, B>(\n  f: (...a: A) => B | null | undefined\n): (...a: A) => Array<NonNullable<B>> =>\n(...a) => fromNullable(f(...a))\n\n/**\n * Maps over an array and flattens the result, removing null and undefined values.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.flatMapNullable(numbers, n => (n % 2 === 0 ? null : n))\n * assert.deepStrictEqual(result, [1, 3])\n *\n * // Explanation:\n * // The array of numbers [1, 2, 3] is mapped with a function that returns null for even numbers\n * // and the number itself for odd numbers. The resulting array [1, null, 3] is then flattened\n * // to remove null values, resulting in [1, 3].\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMapNullable: {\n  /**\n   * Maps over an array and flattens the result, removing null and undefined values.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3]\n   * const result = Array.flatMapNullable(numbers, n => (n % 2 === 0 ? null : n))\n   * assert.deepStrictEqual(result, [1, 3])\n   *\n   * // Explanation:\n   * // The array of numbers [1, 2, 3] is mapped with a function that returns null for even numbers\n   * // and the number itself for odd numbers. The resulting array [1, null, 3] is then flattened\n   * // to remove null values, resulting in [1, 3].\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => B | null | undefined): (self: ReadonlyArray<A>) => Array<NonNullable<B>>\n  /**\n   * Maps over an array and flattens the result, removing null and undefined values.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3]\n   * const result = Array.flatMapNullable(numbers, n => (n % 2 === 0 ? null : n))\n   * assert.deepStrictEqual(result, [1, 3])\n   *\n   * // Explanation:\n   * // The array of numbers [1, 2, 3] is mapped with a function that returns null for even numbers\n   * // and the number itself for odd numbers. The resulting array [1, null, 3] is then flattened\n   * // to remove null values, resulting in [1, 3].\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: ReadonlyArray<A>, f: (a: A) => B | null | undefined): Array<NonNullable<B>>\n} = dual(\n  2,\n  <A, B>(self: ReadonlyArray<A>, f: (a: A) => B | null | undefined): Array<NonNullable<B>> =>\n    flatMap(self, (a) => fromNullable(f(a)))\n)\n\n/**\n * Lifts a function that returns an `Either` into a function that returns an array.\n * If the `Either` is a left, it returns an empty array.\n * If the `Either` is a right, it returns an array with the right value.\n *\n * @example\n * import { Array, Either } from \"effect\"\n *\n * const parseNumber = (s: string): Either.Either<number, Error> =>\n *   isNaN(Number(s)) ? Either.left(new Error(\"Not a number\")) : Either.right(Number(s))\n *\n * const liftedParseNumber = Array.liftEither(parseNumber)\n *\n * const result1 = liftedParseNumber(\"42\")\n * assert.deepStrictEqual(result1, [42])\n *\n * const result2 = liftedParseNumber(\"not a number\")\n * assert.deepStrictEqual(result2, [])\n *\n * // Explanation:\n * // The function parseNumber is lifted to return an array.\n * // When parsing \"42\", it returns an Either.left with the number 42, resulting in [42].\n * // When parsing \"not a number\", it returns an Either.right with an error, resulting in an empty array [].\n *\n * @category lifting\n * @since 2.0.0\n */\nexport const liftEither = <A extends Array<unknown>, E, B>(\n  f: (...a: A) => array_<B, E>\n) =>\n(...a: A): Array<B> => {\n  const e = f(...a)\n  return E.isLeft(e) ? [] : [e.right]\n}\n\n/**\n * Check if a predicate holds true for every `ReadonlyArray` element.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const every: {\n  /**\n   * Check if a predicate holds true for every `ReadonlyArray` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(\n    refinement: (a: NoInfer<A>, i: number) => a is B\n  ): (self: ReadonlyArray<A>) => self is ReadonlyArray<B>\n  /**\n   * Check if a predicate holds true for every `ReadonlyArray` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: ReadonlyArray<A>) => boolean\n  /**\n   * Check if a predicate holds true for every `ReadonlyArray` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: ReadonlyArray<A>, refinement: (a: A, i: number) => a is B): self is ReadonlyArray<B>\n  /**\n   * Check if a predicate holds true for every `ReadonlyArray` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: ReadonlyArray<A>, predicate: (a: A, i: number) => boolean): boolean\n} = dual(\n  2,\n  <A, B extends A>(self: ReadonlyArray<A>, refinement: (a: A, i: number) => a is B): self is ReadonlyArray<B> =>\n    self.every(refinement)\n)\n\n/**\n * Check if a predicate holds true for some `ReadonlyArray` element.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const some: {\n  /**\n   * Check if a predicate holds true for some `ReadonlyArray` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: ReadonlyArray<A>) => self is NonEmptyReadonlyArray<A>\n  /**\n   * Check if a predicate holds true for some `ReadonlyArray` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: ReadonlyArray<A>, predicate: (a: A, i: number) => boolean): self is NonEmptyReadonlyArray<A>\n} = dual(\n  2,\n  <A>(self: ReadonlyArray<A>, predicate: (a: A, i: number) => boolean): self is NonEmptyReadonlyArray<A> =>\n    self.some(predicate)\n)\n\n/**\n * Extends an array with a function that maps each subarray to a value.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.extend(numbers, as => as.length)\n * assert.deepStrictEqual(result, [3, 2, 1])\n *\n * // Explanation:\n * // The function maps each subarray starting from each element to its length.\n * // The subarrays are: [1, 2, 3], [2, 3], [3].\n * // The lengths are: 3, 2, 1.\n * // Therefore, the result is [3, 2, 1].\n *\n * @since 2.0.0\n */\nexport const extend: {\n  /**\n   * Extends an array with a function that maps each subarray to a value.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3]\n   * const result = Array.extend(numbers, as => as.length)\n   * assert.deepStrictEqual(result, [3, 2, 1])\n   *\n   * // Explanation:\n   * // The function maps each subarray starting from each element to its length.\n   * // The subarrays are: [1, 2, 3], [2, 3], [3].\n   * // The lengths are: 3, 2, 1.\n   * // Therefore, the result is [3, 2, 1].\n   *\n   * @since 2.0.0\n   */\n  <A, B>(f: (as: ReadonlyArray<A>) => B): (self: ReadonlyArray<A>) => Array<B>\n  /**\n   * Extends an array with a function that maps each subarray to a value.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3]\n   * const result = Array.extend(numbers, as => as.length)\n   * assert.deepStrictEqual(result, [3, 2, 1])\n   *\n   * // Explanation:\n   * // The function maps each subarray starting from each element to its length.\n   * // The subarrays are: [1, 2, 3], [2, 3], [3].\n   * // The lengths are: 3, 2, 1.\n   * // Therefore, the result is [3, 2, 1].\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: ReadonlyArray<A>, f: (as: ReadonlyArray<A>) => B): Array<B>\n} = dual(\n  2,\n  <A, B>(self: ReadonlyArray<A>, f: (as: ReadonlyArray<A>) => B): Array<B> => self.map((_, i, as) => f(as.slice(i)))\n)\n\n/**\n * Finds the minimum element in an array based on a comparator.\n *\n * @example\n * import { Array, Order } from \"effect\"\n *\n * const min = Array.min([3, 1, 2], Order.number)\n * assert.deepStrictEqual(min, 1)\n *\n * @since 2.0.0\n */\nexport const min: {\n  /**\n   * Finds the minimum element in an array based on a comparator.\n   *\n   * @example\n   * import { Array, Order } from \"effect\"\n   *\n   * const min = Array.min([3, 1, 2], Order.number)\n   * assert.deepStrictEqual(min, 1)\n   *\n   * @since 2.0.0\n   */\n  <A>(O: Order.Order<A>): (self: NonEmptyReadonlyArray<A>) => A\n  /**\n   * Finds the minimum element in an array based on a comparator.\n   *\n   * @example\n   * import { Array, Order } from \"effect\"\n   *\n   * const min = Array.min([3, 1, 2], Order.number)\n   * assert.deepStrictEqual(min, 1)\n   *\n   * @since 2.0.0\n   */\n  <A>(self: NonEmptyReadonlyArray<A>, O: Order.Order<A>): A\n} = dual(2, <A>(self: NonEmptyReadonlyArray<A>, O: Order.Order<A>): A => self.reduce(Order.min(O)))\n\n/**\n * Finds the maximum element in an array based on a comparator.\n *\n * @example\n * import { Array, Order } from \"effect\"\n *\n * const max = Array.max([3, 1, 2], Order.number)\n * assert.deepStrictEqual(max, 3)\n *\n * @since 2.0.0\n */\nexport const max: {\n  /**\n   * Finds the maximum element in an array based on a comparator.\n   *\n   * @example\n   * import { Array, Order } from \"effect\"\n   *\n   * const max = Array.max([3, 1, 2], Order.number)\n   * assert.deepStrictEqual(max, 3)\n   *\n   * @since 2.0.0\n   */\n  <A>(O: Order.Order<A>): (self: NonEmptyReadonlyArray<A>) => A\n  /**\n   * Finds the maximum element in an array based on a comparator.\n   *\n   * @example\n   * import { Array, Order } from \"effect\"\n   *\n   * const max = Array.max([3, 1, 2], Order.number)\n   * assert.deepStrictEqual(max, 3)\n   *\n   * @since 2.0.0\n   */\n  <A>(self: NonEmptyReadonlyArray<A>, O: Order.Order<A>): A\n} = dual(2, <A>(self: NonEmptyReadonlyArray<A>, O: Order.Order<A>): A => self.reduce(Order.max(O)))\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const unfold = <B, A>(b: B, f: (b: B) => Option<readonly [A, B]>): Array<A> => {\n  const out: Array<A> = []\n  let next: B = b\n  let o: Option<readonly [A, B]>\n  while (O.isSome(o = f(next))) {\n    const [a, b] = o.value\n    out.push(a)\n    next = b\n  }\n  return out\n}\n\n/**\n * This function creates and returns a new `Order` for an array of values based on a given `Order` for the elements of the array.\n * The returned `Order` compares two arrays by applying the given `Order` to each element in the arrays.\n * If all elements are equal, the arrays are then compared based on their length.\n * It is useful when you need to compare two arrays of the same type and you have a specific way of comparing each element of the array.\n *\n * @category instances\n * @since 2.0.0\n */\nexport const getOrder: <A>(O: Order.Order<A>) => Order.Order<ReadonlyArray<A>> = Order.array\n\n/**\n * Creates an equivalence relation for arrays.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers1 = [1, 2, 3]\n * const numbers2 = [1, 2, 3]\n * const eq = Array.getEquivalence<number>((a, b) => a === b)\n * assert.deepStrictEqual(eq(numbers1, numbers2), true)\n *\n * @category instances\n * @since 2.0.0\n */\nexport const getEquivalence: <A>(\n  isEquivalent: Equivalence.Equivalence<A>\n) => Equivalence.Equivalence<ReadonlyArray<A>> = Equivalence.array\n\n/**\n * Performs a side-effect for each element of the `Iterable`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * Array.forEach(numbers, n => console.log(n)) // 1, 2, 3\n *\n * @since 2.0.0\n */\nexport const forEach: {\n  /**\n   * Performs a side-effect for each element of the `Iterable`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3]\n   * Array.forEach(numbers, n => console.log(n)) // 1, 2, 3\n   *\n   * @since 2.0.0\n   */\n  <A>(f: (a: A, i: number) => void): (self: Iterable<A>) => void\n  /**\n   * Performs a side-effect for each element of the `Iterable`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3]\n   * Array.forEach(numbers, n => console.log(n)) // 1, 2, 3\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, f: (a: A, i: number) => void): void\n} = dual(2, <A>(self: Iterable<A>, f: (a: A, i: number) => void): void => fromIterable(self).forEach((a, i) => f(a, i)))\n\n/**\n * Remove duplicates from an `Iterable` using the provided `isEquivalent` function,\n * preserving the order of the first occurrence of each element.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 2, 3, 3, 3]\n * const unique = Array.dedupeWith(numbers, (a, b) => a === b)\n * assert.deepStrictEqual(unique, [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport const dedupeWith: {\n  /**\n   * Remove duplicates from an `Iterable` using the provided `isEquivalent` function,\n   * preserving the order of the first occurrence of each element.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 2, 3, 3, 3]\n   * const unique = Array.dedupeWith(numbers, (a, b) => a === b)\n   * assert.deepStrictEqual(unique, [1, 2, 3])\n   *\n   * @since 2.0.0\n   */\n  <S extends Iterable<any>>(\n    isEquivalent: (self: ReadonlyArray.Infer<S>, that: ReadonlyArray.Infer<S>) => boolean\n  ): (self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S>>\n  /**\n   * Remove duplicates from an `Iterable` using the provided `isEquivalent` function,\n   * preserving the order of the first occurrence of each element.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 2, 3, 3, 3]\n   * const unique = Array.dedupeWith(numbers, (a, b) => a === b)\n   * assert.deepStrictEqual(unique, [1, 2, 3])\n   *\n   * @since 2.0.0\n   */\n  <A>(\n    self: NonEmptyReadonlyArray<A>,\n    isEquivalent: (self: A, that: A) => boolean\n  ): NonEmptyArray<A>\n  /**\n   * Remove duplicates from an `Iterable` using the provided `isEquivalent` function,\n   * preserving the order of the first occurrence of each element.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 2, 3, 3, 3]\n   * const unique = Array.dedupeWith(numbers, (a, b) => a === b)\n   * assert.deepStrictEqual(unique, [1, 2, 3])\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Array<A>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Array<A> => {\n    const input = fromIterable(self)\n    if (isNonEmptyReadonlyArray(input)) {\n      const out: NonEmptyArray<A> = [headNonEmpty(input)]\n      const rest = tailNonEmpty(input)\n      for (const r of rest) {\n        if (out.every((a) => !isEquivalent(r, a))) {\n          out.push(r)\n        }\n      }\n      return out\n    }\n    return []\n  }\n)\n\n/**\n * Remove duplicates from an `Iterable`, preserving the order of the first occurrence of each element.\n * The equivalence used to compare elements is provided by `Equal.equivalence()` from the `Equal` module.\n *\n * @since 2.0.0\n */\nexport const dedupe = <S extends Iterable<any> | NonEmptyReadonlyArray<any>>(\n  self: S\n): S extends NonEmptyReadonlyArray<infer A> ? NonEmptyArray<A> : S extends Iterable<infer A> ? Array<A> : never =>\n  dedupeWith(self, Equal.equivalence()) as any\n\n/**\n * Deduplicates adjacent elements that are identical using the provided `isEquivalent` function.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 1, 2, 2, 3, 3]\n * const unique = Array.dedupeAdjacentWith(numbers, (a, b) => a === b)\n * assert.deepStrictEqual(unique, [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport const dedupeAdjacentWith: {\n  /**\n   * Deduplicates adjacent elements that are identical using the provided `isEquivalent` function.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 1, 2, 2, 3, 3]\n   * const unique = Array.dedupeAdjacentWith(numbers, (a, b) => a === b)\n   * assert.deepStrictEqual(unique, [1, 2, 3])\n   *\n   * @since 2.0.0\n   */\n  <A>(isEquivalent: (self: A, that: A) => boolean): (self: Iterable<A>) => Array<A>\n  /**\n   * Deduplicates adjacent elements that are identical using the provided `isEquivalent` function.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 1, 2, 2, 3, 3]\n   * const unique = Array.dedupeAdjacentWith(numbers, (a, b) => a === b)\n   * assert.deepStrictEqual(unique, [1, 2, 3])\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Array<A>\n} = dual(2, <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Array<A> => {\n  const out: Array<A> = []\n  let lastA: O.Option<A> = O.none()\n  for (const a of self) {\n    if (O.isNone(lastA) || !isEquivalent(a, lastA.value)) {\n      out.push(a)\n      lastA = O.some(a)\n    }\n  }\n  return out\n})\n\n/**\n * Deduplicates adjacent elements that are identical.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 1, 2, 2, 3, 3]\n * const unique = Array.dedupeAdjacent(numbers)\n * assert.deepStrictEqual(unique, [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport const dedupeAdjacent: <A>(self: Iterable<A>) => Array<A> = dedupeAdjacentWith(Equal.equivalence())\n\n/**\n * Joins the elements together with \"sep\" in the middle.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const strings = [\"a\", \"b\", \"c\"]\n * const joined = Array.join(strings, \"-\")\n * assert.deepStrictEqual(joined, \"a-b-c\")\n *\n * @since 2.0.0\n * @category folding\n */\nexport const join: {\n  /**\n   * Joins the elements together with \"sep\" in the middle.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const strings = [\"a\", \"b\", \"c\"]\n   * const joined = Array.join(strings, \"-\")\n   * assert.deepStrictEqual(joined, \"a-b-c\")\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  (sep: string): (self: Iterable<string>) => string\n  /**\n   * Joins the elements together with \"sep\" in the middle.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const strings = [\"a\", \"b\", \"c\"]\n   * const joined = Array.join(strings, \"-\")\n   * assert.deepStrictEqual(joined, \"a-b-c\")\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  (self: Iterable<string>, sep: string): string\n} = dual(2, (self: Iterable<string>, sep: string): string => fromIterable(self).join(sep))\n\n/**\n * Statefully maps over the chunk, producing new elements of type `B`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.mapAccum(numbers, 0, (acc, n) => [acc + n, acc + n])\n * assert.deepStrictEqual(result, [6, [1, 3, 6]])\n *\n * @since 2.0.0\n * @category folding\n */\nexport const mapAccum: {\n  /**\n   * Statefully maps over the chunk, producing new elements of type `B`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3]\n   * const result = Array.mapAccum(numbers, 0, (acc, n) => [acc + n, acc + n])\n   * assert.deepStrictEqual(result, [6, [1, 3, 6]])\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <S, A, B, I extends Iterable<A> = Iterable<A>>(\n    s: S,\n    f: (s: S, a: ReadonlyArray.Infer<I>, i: number) => readonly [S, B]\n  ): (self: I) => [state: S, mappedArray: ReadonlyArray.With<I, B>]\n  /**\n   * Statefully maps over the chunk, producing new elements of type `B`.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3]\n   * const result = Array.mapAccum(numbers, 0, (acc, n) => [acc + n, acc + n])\n   * assert.deepStrictEqual(result, [6, [1, 3, 6]])\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <S, A, B, I extends Iterable<A> = Iterable<A>>(\n    self: I,\n    s: S,\n    f: (s: S, a: ReadonlyArray.Infer<I>, i: number) => readonly [S, B]\n  ): [state: S, mappedArray: ReadonlyArray.With<I, B>]\n} = dual(\n  3,\n  <S, A, B>(self: Iterable<A>, s: S, f: (s: S, a: A, i: number) => [S, B]): [state: S, mappedArray: Array<B>] => {\n    let i = 0\n    let s1 = s\n    const out: Array<B> = []\n    for (const a of self) {\n      const r = f(s1, a, i)\n      s1 = r[0]\n      out.push(r[1])\n      i++\n    }\n    return [s1, out]\n  }\n)\n\n/**\n * Zips this chunk crosswise with the specified chunk using the specified combiner.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2]\n * const array2 = [\"a\", \"b\"]\n * const product = Array.cartesianWith(array1, array2, (a, b) => `${a}-${b}`)\n * assert.deepStrictEqual(product, [\"1-a\", \"1-b\", \"2-a\", \"2-b\"])\n *\n * @since 2.0.0\n * @category elements\n */\nexport const cartesianWith: {\n  /**\n   * Zips this chunk crosswise with the specified chunk using the specified combiner.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const array1 = [1, 2]\n   * const array2 = [\"a\", \"b\"]\n   * const product = Array.cartesianWith(array1, array2, (a, b) => `${a}-${b}`)\n   * assert.deepStrictEqual(product, [\"1-a\", \"1-b\", \"2-a\", \"2-b\"])\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B, C>(that: ReadonlyArray<B>, f: (a: A, b: B) => C): (self: ReadonlyArray<A>) => Array<C>\n  /**\n   * Zips this chunk crosswise with the specified chunk using the specified combiner.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const array1 = [1, 2]\n   * const array2 = [\"a\", \"b\"]\n   * const product = Array.cartesianWith(array1, array2, (a, b) => `${a}-${b}`)\n   * assert.deepStrictEqual(product, [\"1-a\", \"1-b\", \"2-a\", \"2-b\"])\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B, C>(self: ReadonlyArray<A>, that: ReadonlyArray<B>, f: (a: A, b: B) => C): Array<C>\n} = dual(\n  3,\n  <A, B, C>(self: ReadonlyArray<A>, that: ReadonlyArray<B>, f: (a: A, b: B) => C): Array<C> =>\n    flatMap(self, (a) => map(that, (b) => f(a, b)))\n)\n\n/**\n * Zips this chunk crosswise with the specified chunk.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2]\n * const array2 = [\"a\", \"b\"]\n * const product = Array.cartesian(array1, array2)\n * assert.deepStrictEqual(product, [[1, \"a\"], [1, \"b\"], [2, \"a\"], [2, \"b\"]])\n *\n * @since 2.0.0\n * @category elements\n */\nexport const cartesian: {\n  /**\n   * Zips this chunk crosswise with the specified chunk.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const array1 = [1, 2]\n   * const array2 = [\"a\", \"b\"]\n   * const product = Array.cartesian(array1, array2)\n   * assert.deepStrictEqual(product, [[1, \"a\"], [1, \"b\"], [2, \"a\"], [2, \"b\"]])\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <B>(that: ReadonlyArray<B>): <A>(self: ReadonlyArray<A>) => Array<[A, B]>\n  /**\n   * Zips this chunk crosswise with the specified chunk.\n   *\n   * @example\n   * import { Array } from \"effect\"\n   *\n   * const array1 = [1, 2]\n   * const array2 = [\"a\", \"b\"]\n   * const product = Array.cartesian(array1, array2)\n   * assert.deepStrictEqual(product, [[1, \"a\"], [1, \"b\"], [2, \"a\"], [2, \"b\"]])\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B>(self: ReadonlyArray<A>, that: ReadonlyArray<B>): Array<[A, B]>\n} = dual(\n  2,\n  <A, B>(self: ReadonlyArray<A>, that: ReadonlyArray<B>): Array<[A, B]> => cartesianWith(self, that, (a, b) => [a, b])\n)\n\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n *\n * It can be used to simulate \"array comprehension\".\n * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link bindTo}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Array as Arr, pipe } from \"effect\"\n * const doResult = pipe(\n *   Arr.Do,\n *   Arr.bind(\"x\", () => [1, 3, 5]),\n *   Arr.bind(\"y\", () => [2, 4, 6]),\n *   Arr.filter(({ x, y }) => x < y), // condition\n *   Arr.map(({ x, y }) => [x, y] as const) // transformation\n * )\n * assert.deepStrictEqual(doResult, [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]])\n *\n * // equivalent\n * const x = [1, 3, 5],\n *       y = [2, 4, 6],\n *       result = [];\n * for(let i = 0; i < x.length; i++) {\n *   for(let j = 0; j < y.length; j++) {\n *     const _x = x[i], _y = y[j];\n *     if(_x < _y) result.push([_x, _y] as const)\n *   }\n * }\n *\n * @category do notation\n * @since 3.2.0\n */\nexport const Do: ReadonlyArray<{}> = of({})\n\n/**\n * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n *\n * It can be used to simulate \"array comprehension\".\n * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link bindTo}\n * @see {@link Do}\n * @see {@link let_ let}\n *\n * @example\n * import { Array as Arr, pipe } from \"effect\"\n * const doResult = pipe(\n *   Arr.Do,\n *   Arr.bind(\"x\", () => [1, 3, 5]),\n *   Arr.bind(\"y\", () => [2, 4, 6]),\n *   Arr.filter(({ x, y }) => x < y), // condition\n *   Arr.map(({ x, y }) => [x, y] as const) // transformation\n * )\n * assert.deepStrictEqual(doResult, [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]])\n *\n * // equivalent\n * const x = [1, 3, 5],\n *       y = [2, 4, 6],\n *       result = [];\n * for(let i = 0; i < x.length; i++) {\n *   for(let j = 0; j < y.length; j++) {\n *     const _x = x[i], _y = y[j];\n *     if(_x < _y) result.push([_x, _y] as const)\n *   }\n * }\n *\n * @category do notation\n * @since 3.2.0\n */\nexport const bind: {\n  /**\n   * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n   *\n   * It can be used to simulate \"array comprehension\".\n   * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * @see {@link bindTo}\n   * @see {@link Do}\n   * @see {@link let_ let}\n   *\n   * @example\n   * import { Array as Arr, pipe } from \"effect\"\n   * const doResult = pipe(\n   *   Arr.Do,\n   *   Arr.bind(\"x\", () => [1, 3, 5]),\n   *   Arr.bind(\"y\", () => [2, 4, 6]),\n   *   Arr.filter(({ x, y }) => x < y), // condition\n   *   Arr.map(({ x, y }) => [x, y] as const) // transformation\n   * )\n   * assert.deepStrictEqual(doResult, [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]])\n   *\n   * // equivalent\n   * const x = [1, 3, 5],\n   *       y = [2, 4, 6],\n   *       result = [];\n   * for(let i = 0; i < x.length; i++) {\n   *   for(let j = 0; j < y.length; j++) {\n   *     const _x = x[i], _y = y[j];\n   *     if(_x < _y) result.push([_x, _y] as const)\n   *   }\n   * }\n   *\n   * @category do notation\n   * @since 3.2.0\n   */\n  <A extends object, N extends string, B>(tag: Exclude<N, keyof A>, f: (a: NoInfer<A>) => ReadonlyArray<B>): (\n    self: ReadonlyArray<A>\n  ) => Array<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n  /**\n   * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n   *\n   * It can be used to simulate \"array comprehension\".\n   * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * @see {@link bindTo}\n   * @see {@link Do}\n   * @see {@link let_ let}\n   *\n   * @example\n   * import { Array as Arr, pipe } from \"effect\"\n   * const doResult = pipe(\n   *   Arr.Do,\n   *   Arr.bind(\"x\", () => [1, 3, 5]),\n   *   Arr.bind(\"y\", () => [2, 4, 6]),\n   *   Arr.filter(({ x, y }) => x < y), // condition\n   *   Arr.map(({ x, y }) => [x, y] as const) // transformation\n   * )\n   * assert.deepStrictEqual(doResult, [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]])\n   *\n   * // equivalent\n   * const x = [1, 3, 5],\n   *       y = [2, 4, 6],\n   *       result = [];\n   * for(let i = 0; i < x.length; i++) {\n   *   for(let j = 0; j < y.length; j++) {\n   *     const _x = x[i], _y = y[j];\n   *     if(_x < _y) result.push([_x, _y] as const)\n   *   }\n   * }\n   *\n   * @category do notation\n   * @since 3.2.0\n   */\n  <A extends object, N extends string, B>(\n    self: ReadonlyArray<A>,\n    tag: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => ReadonlyArray<B>\n  ): Array<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n} = doNotation.bind<ReadonlyArrayTypeLambda>(map, flatMap) as any\n\n/**\n * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n *\n * It can be used to simulate \"array comprehension\".\n * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link bindTo}\n * @see {@link Do}\n * @see {@link let_ let}\n *\n * @example\n * import { Array as Arr, pipe } from \"effect\"\n * const doResult = pipe(\n *   Arr.Do,\n *   Arr.bind(\"x\", () => [1, 3, 5]),\n *   Arr.bind(\"y\", () => [2, 4, 6]),\n *   Arr.filter(({ x, y }) => x < y), // condition\n *   Arr.map(({ x, y }) => [x, y] as const) // transformation\n * )\n * assert.deepStrictEqual(doResult, [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]])\n *\n * // equivalent\n * const x = [1, 3, 5],\n *       y = [2, 4, 6],\n *       result = [];\n * for(let i = 0; i < x.length; i++) {\n *   for(let j = 0; j < y.length; j++) {\n *     const _x = x[i], _y = y[j];\n *     if(_x < _y) result.push([_x, _y] as const)\n *   }\n * }\n *\n * @category do notation\n * @since 3.2.0\n */\nexport const bindTo: {\n  /**\n   * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n   *\n   * It can be used to simulate \"array comprehension\".\n   * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * @see {@link bindTo}\n   * @see {@link Do}\n   * @see {@link let_ let}\n   *\n   * @example\n   * import { Array as Arr, pipe } from \"effect\"\n   * const doResult = pipe(\n   *   Arr.Do,\n   *   Arr.bind(\"x\", () => [1, 3, 5]),\n   *   Arr.bind(\"y\", () => [2, 4, 6]),\n   *   Arr.filter(({ x, y }) => x < y), // condition\n   *   Arr.map(({ x, y }) => [x, y] as const) // transformation\n   * )\n   * assert.deepStrictEqual(doResult, [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]])\n   *\n   * // equivalent\n   * const x = [1, 3, 5],\n   *       y = [2, 4, 6],\n   *       result = [];\n   * for(let i = 0; i < x.length; i++) {\n   *   for(let j = 0; j < y.length; j++) {\n   *     const _x = x[i], _y = y[j];\n   *     if(_x < _y) result.push([_x, _y] as const)\n   *   }\n   * }\n   *\n   * @category do notation\n   * @since 3.2.0\n   */\n  <N extends string>(tag: N): <A>(self: ReadonlyArray<A>) => Array<{ [K in N]: A }>\n  /**\n   * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n   *\n   * It can be used to simulate \"array comprehension\".\n   * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * @see {@link bindTo}\n   * @see {@link Do}\n   * @see {@link let_ let}\n   *\n   * @example\n   * import { Array as Arr, pipe } from \"effect\"\n   * const doResult = pipe(\n   *   Arr.Do,\n   *   Arr.bind(\"x\", () => [1, 3, 5]),\n   *   Arr.bind(\"y\", () => [2, 4, 6]),\n   *   Arr.filter(({ x, y }) => x < y), // condition\n   *   Arr.map(({ x, y }) => [x, y] as const) // transformation\n   * )\n   * assert.deepStrictEqual(doResult, [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]])\n   *\n   * // equivalent\n   * const x = [1, 3, 5],\n   *       y = [2, 4, 6],\n   *       result = [];\n   * for(let i = 0; i < x.length; i++) {\n   *   for(let j = 0; j < y.length; j++) {\n   *     const _x = x[i], _y = y[j];\n   *     if(_x < _y) result.push([_x, _y] as const)\n   *   }\n   * }\n   *\n   * @category do notation\n   * @since 3.2.0\n   */\n  <A, N extends string>(self: ReadonlyArray<A>, tag: N): Array<{ [K in N]: A }>\n} = doNotation.bindTo<ReadonlyArrayTypeLambda>(map) as any\n\nconst let_: {\n  <N extends string, B, A extends object>(\n    tag: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): (self: ReadonlyArray<A>) => Array<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n  <N extends string, A extends object, B>(\n    self: ReadonlyArray<A>,\n    tag: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): Array<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n} = doNotation.let_<ReadonlyArrayTypeLambda>(map) as any\n\nexport {\n  /**\n   * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n   *\n   * It can be used to simulate \"array comprehension\".\n   * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * @see {@link bindTo}\n   * @see {@link bind}\n   * @see {@link Do}\n   *\n   * @example\n   * import { Array as Arr, pipe } from \"effect\"\n   * const doResult = pipe(\n   *   Arr.Do,\n   *   Arr.bind(\"x\", () => [1, 3, 5]),\n   *   Arr.bind(\"y\", () => [2, 4, 6]),\n   *   Arr.filter(({ x, y }) => x < y), // condition\n   *   Arr.map(({ x, y }) => [x, y] as const) // transformation\n   * )\n   * assert.deepStrictEqual(doResult, [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]])\n   *\n   * // equivalent\n   * const x = [1, 3, 5],\n   *       y = [2, 4, 6],\n   *       result = [];\n   * for(let i = 0; i < x.length; i++) {\n   *   for(let j = 0; j < y.length; j++) {\n   *     const _x = x[i], _y = y[j];\n   *     if(_x < _y) result.push([_x, _y] as const)\n   *   }\n   * }\n   *\n   * @category do notation\n   * @since 3.2.0\n   */\n  let_ as let\n}\n"],"names":["E","Equal","Equivalence","dual","identity","readonlyArray","doNotation","EffectIterable","O","Order","isBoolean","Record","Tuple","make","elements","allocate","n","Array","makeBy","f","max","Math","floor","out","i","range","start","end","replicate","a","fromIterable","collection","isArray","from","ensure","self","fromRecord","toEntries","fromOption","toArray","match","onEmpty","onNonEmpty","isNonEmptyReadonlyArray","matchLeft","headNonEmpty","tailNonEmpty","matchRight","initNonEmpty","lastNonEmpty","prepend","head","prependAll","that","concat","append","last","appendAll","scan","b","scanRight","input","length","isEmptyArray","isEmptyReadonlyArray","isNonEmptyArray","isOutOfBound","as","clamp","min","get","index","none","some","unsafeGet","Error","unprepend","unappend","tail","slice","init","take","takeRight","takeWhile","predicate","push","spanIndex","span","splitAt","drop","dropRight","dropWhile","findFirstIndex","findLastIndex","findFirst","findLast","o","isSome","insertAt","splice","replace","modify","replaceOption","modifyOption","getOrElse","next","remove","reverse","sort","sortWith","order","map","x","sortBy","orders","sortByAll","combineAll","zip","zipWith","bs","len","unzip","fa","fb","intersperse","middle","modifyNonEmptyHead","setNonEmptyHead","modifyNonEmptyLast","setNonEmptyLast","rotate","m","round","abs","copy","s","splitNonEmptyAt","containsWith","isEquivalent","_equivalence","equivalence","contains","chop","rest","_n","split","chunksOf","ceil","splitWhere","pad","fill","groupWith","h","group","groupBy","k","Object","prototype","hasOwnProperty","call","unionWith","dedupe","dedupeWith","union","intersectionWith","has","filter","intersection","differenceWith","difference","empty","of","flatMap","inner","j","flatten","filterMap","value","filterMapWhile","partitionMap","left","right","e","isLeft","getSomes","getLefts","getRights","isRight","partition","separate","reduce","reduceRight","liftPredicate","liftOption","fromNullable","liftNullable","flatMapNullable","liftEither","every","refinement","extend","_","unfold","getOrder","array","getEquivalence","forEach","r","dedupeAdjacentWith","lastA","isNone","dedupeAdjacent","join","sep","mapAccum","s1","cartesianWith","cartesian","Do","bind","bindTo","let_","let"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 5096, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5102, "column": 0}, "map": {"version":3,"file":"Chunk.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Chunk.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport * as RA from \"./Array.js\"\nimport type { NonEmptyReadonlyArray } from \"./Array.js\"\nimport type { Either } from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport * as Equivalence from \"./Equivalence.js\"\nimport { dual, identity, pipe } from \"./Function.js\"\nimport * as Hash from \"./Hash.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport { format, type Inspectable, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport type { NonEmptyIterable } from \"./NonEmptyIterable.js\"\nimport type { Option } from \"./Option.js\"\nimport * as O from \"./Option.js\"\nimport * as Order from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\nimport { hasProperty, type Predicate, type Refinement } from \"./Predicate.js\"\nimport type { Covariant, NoInfer } from \"./Types.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/Chunk\") as TypeId\n\n/**\n * @category symbol\n * @since 2.0.0\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Chunk<out A> extends Iterable<A>, Equal.Equal, Pipeable, Inspectable {\n  readonly [TypeId]: {\n    readonly _A: Covariant<A>\n  }\n  readonly length: number\n  /** @internal */\n  right: Chunk<A>\n  /** @internal */\n  left: Chunk<A>\n  /** @internal */\n  backing: Backing<A>\n  /** @internal */\n  depth: number\n}\n\n/**\n * @category model\n * @since 2.0.0\n */\nexport interface NonEmptyChunk<out A> extends Chunk<A>, NonEmptyIterable<A> {}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface ChunkTypeLambda extends TypeLambda {\n  readonly type: Chunk<this[\"Target\"]>\n}\n\ntype Backing<A> =\n  | IArray<A>\n  | IConcat<A>\n  | ISingleton<A>\n  | IEmpty\n  | ISlice<A>\n\ninterface IArray<A> {\n  readonly _tag: \"IArray\"\n  readonly array: ReadonlyArray<A>\n}\n\ninterface IConcat<A> {\n  readonly _tag: \"IConcat\"\n  readonly left: Chunk<A>\n  readonly right: Chunk<A>\n}\n\ninterface ISingleton<A> {\n  readonly _tag: \"ISingleton\"\n  readonly a: A\n}\n\ninterface IEmpty {\n  readonly _tag: \"IEmpty\"\n}\n\ninterface ISlice<A> {\n  readonly _tag: \"ISlice\"\n  readonly chunk: Chunk<A>\n  readonly offset: number\n  readonly length: number\n}\n\nfunction copy<A>(\n  src: ReadonlyArray<A>,\n  srcPos: number,\n  dest: Array<A>,\n  destPos: number,\n  len: number\n) {\n  for (let i = srcPos; i < Math.min(src.length, srcPos + len); i++) {\n    dest[destPos + i - srcPos] = src[i]!\n  }\n  return dest\n}\n\nconst emptyArray: ReadonlyArray<never> = []\n\n/**\n * Compares the two chunks of equal length using the specified function\n *\n * @category equivalence\n * @since 2.0.0\n */\nexport const getEquivalence = <A>(isEquivalent: Equivalence.Equivalence<A>): Equivalence.Equivalence<Chunk<A>> =>\n  Equivalence.make((self, that) =>\n    self.length === that.length && toReadonlyArray(self).every((value, i) => isEquivalent(value, unsafeGet(that, i)))\n  )\n\nconst _equivalence = getEquivalence(Equal.equals)\n\nconst ChunkProto: Omit<Chunk<unknown>, \"backing\" | \"depth\" | \"left\" | \"length\" | \"right\"> = {\n  [TypeId]: {\n    _A: (_: never) => _\n  },\n  toString<A>(this: Chunk<A>) {\n    return format(this.toJSON())\n  },\n  toJSON<A>(this: Chunk<A>) {\n    return {\n      _id: \"Chunk\",\n      values: toReadonlyArray(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]<A>(this: Chunk<A>) {\n    return this.toJSON()\n  },\n  [Equal.symbol]<A>(this: Chunk<A>, that: unknown): boolean {\n    return isChunk(that) && _equivalence(this, that)\n  },\n  [Hash.symbol]<A>(this: Chunk<A>): number {\n    return Hash.cached(this, Hash.array(toReadonlyArray(this)))\n  },\n  [Symbol.iterator]<A>(this: Chunk<A>): Iterator<A> {\n    switch (this.backing._tag) {\n      case \"IArray\": {\n        return this.backing.array[Symbol.iterator]()\n      }\n      case \"IEmpty\": {\n        return emptyArray[Symbol.iterator]()\n      }\n      default: {\n        return toReadonlyArray(this)[Symbol.iterator]()\n      }\n    }\n  },\n  pipe<A>(this: Chunk<A>) {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst makeChunk = <A>(backing: Backing<A>): Chunk<A> => {\n  const chunk = Object.create(ChunkProto)\n  chunk.backing = backing\n  switch (backing._tag) {\n    case \"IEmpty\": {\n      chunk.length = 0\n      chunk.depth = 0\n      chunk.left = chunk\n      chunk.right = chunk\n      break\n    }\n    case \"IConcat\": {\n      chunk.length = backing.left.length + backing.right.length\n      chunk.depth = 1 + Math.max(backing.left.depth, backing.right.depth)\n      chunk.left = backing.left\n      chunk.right = backing.right\n      break\n    }\n    case \"IArray\": {\n      chunk.length = backing.array.length\n      chunk.depth = 0\n      chunk.left = _empty\n      chunk.right = _empty\n      break\n    }\n    case \"ISingleton\": {\n      chunk.length = 1\n      chunk.depth = 0\n      chunk.left = _empty\n      chunk.right = _empty\n      break\n    }\n    case \"ISlice\": {\n      chunk.length = backing.length\n      chunk.depth = backing.chunk.depth + 1\n      chunk.left = _empty\n      chunk.right = _empty\n      break\n    }\n  }\n  return chunk\n}\n\n/**\n * Checks if `u` is a `Chunk<unknown>`\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const isChunk: {\n  /**\n   * Checks if `u` is a `Chunk<unknown>`\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A>(u: Iterable<A>): u is Chunk<A>\n  /**\n   * Checks if `u` is a `Chunk<unknown>`\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  (u: unknown): u is Chunk<unknown>\n} = (u: unknown): u is Chunk<unknown> => hasProperty(u, TypeId)\n\nconst _empty = makeChunk<never>({ _tag: \"IEmpty\" })\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const empty: <A = never>() => Chunk<A> = () => _empty\n\n/**\n * Builds a `NonEmptyChunk` from an non-empty collection of elements.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <As extends readonly [any, ...ReadonlyArray<any>]>(\n  ...as: As\n): NonEmptyChunk<As[number]> => as.length === 1 ? of(as[0]) : unsafeFromNonEmptyArray(as)\n\n/**\n * Builds a `NonEmptyChunk` from a single element.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const of = <A>(a: A): NonEmptyChunk<A> => makeChunk({ _tag: \"ISingleton\", a }) as any\n\n/**\n * Creates a new `Chunk` from an iterable collection of values.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromIterable = <A>(self: Iterable<A>): Chunk<A> =>\n  isChunk(self) ? self : makeChunk({ _tag: \"IArray\", array: RA.fromIterable(self) })\n\nconst copyToArray = <A>(self: Chunk<A>, array: Array<any>, initial: number): void => {\n  switch (self.backing._tag) {\n    case \"IArray\": {\n      copy(self.backing.array, 0, array, initial, self.length)\n      break\n    }\n    case \"IConcat\": {\n      copyToArray(self.left, array, initial)\n      copyToArray(self.right, array, initial + self.left.length)\n      break\n    }\n    case \"ISingleton\": {\n      array[initial] = self.backing.a\n      break\n    }\n    case \"ISlice\": {\n      let i = 0\n      let j = initial\n      while (i < self.length) {\n        array[j] = unsafeGet(self, i)\n        i += 1\n        j += 1\n      }\n      break\n    }\n  }\n}\n\nconst toArray_ = <A>(self: Chunk<A>): Array<A> => toReadonlyArray(self).slice()\n\n/**\n * Converts a `Chunk` into an `Array`. If the provided `Chunk` is non-empty\n * (`NonEmptyChunk`), the function will return a `NonEmptyArray`, ensuring the\n * non-empty property is preserved.\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const toArray: <S extends Chunk<any>>(\n  self: S\n) => S extends NonEmptyChunk<any> ? RA.NonEmptyArray<Chunk.Infer<S>> : Array<Chunk.Infer<S>> = toArray_ as any\n\nconst toReadonlyArray_ = <A>(self: Chunk<A>): ReadonlyArray<A> => {\n  switch (self.backing._tag) {\n    case \"IEmpty\": {\n      return emptyArray\n    }\n    case \"IArray\": {\n      return self.backing.array\n    }\n    default: {\n      const arr = new Array<A>(self.length)\n      copyToArray(self, arr, 0)\n      self.backing = {\n        _tag: \"IArray\",\n        array: arr\n      }\n      self.left = _empty\n      self.right = _empty\n      self.depth = 0\n      return arr\n    }\n  }\n}\n\n/**\n * Converts a `Chunk` into a `ReadonlyArray`. If the provided `Chunk` is\n * non-empty (`NonEmptyChunk`), the function will return a\n * `NonEmptyReadonlyArray`, ensuring the non-empty property is preserved.\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const toReadonlyArray: <S extends Chunk<any>>(\n  self: S\n) => S extends NonEmptyChunk<any> ? RA.NonEmptyReadonlyArray<Chunk.Infer<S>> : ReadonlyArray<Chunk.Infer<S>> =\n  toReadonlyArray_ as any\n\nconst reverseChunk = <A>(self: Chunk<A>): Chunk<A> => {\n  switch (self.backing._tag) {\n    case \"IEmpty\":\n    case \"ISingleton\":\n      return self\n    case \"IArray\": {\n      return makeChunk({ _tag: \"IArray\", array: RA.reverse(self.backing.array) })\n    }\n    case \"IConcat\": {\n      return makeChunk({ _tag: \"IConcat\", left: reverse(self.backing.right), right: reverse(self.backing.left) })\n    }\n    case \"ISlice\":\n      return unsafeFromArray(RA.reverse(toReadonlyArray(self)))\n  }\n}\n\n/**\n * Reverses the order of elements in a `Chunk`.\n * Importantly, if the input chunk is a `NonEmptyChunk`, the reversed chunk will also be a `NonEmptyChunk`.\n *\n * @example\n * import { Chunk } from \"effect\"\n *\n * const numbers = Chunk.make(1, 2, 3)\n * const reversedNumbers = Chunk.reverse(numbers)\n * assert.deepStrictEqual(reversedNumbers, Chunk.make(3, 2, 1))\n *\n * @since 2.0.0\n * @category elements\n */\nexport const reverse: <S extends Chunk<any>>(self: S) => Chunk.With<S, Chunk.Infer<S>> = reverseChunk as any\n\n/**\n * This function provides a safe way to read a value at a particular index from a `Chunk`.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const get: {\n  /**\n   * This function provides a safe way to read a value at a particular index from a `Chunk`.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  (index: number): <A>(self: Chunk<A>) => Option<A>\n  /**\n   * This function provides a safe way to read a value at a particular index from a `Chunk`.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, index: number): Option<A>\n} = dual(\n  2,\n  <A>(self: Chunk<A>, index: number): Option<A> =>\n    index < 0 || index >= self.length ? O.none() : O.some(unsafeGet(self, index))\n)\n\n/**\n * Wraps an array into a chunk without copying, unsafe on mutable arrays\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeFromArray = <A>(self: ReadonlyArray<A>): Chunk<A> => makeChunk({ _tag: \"IArray\", array: self })\n\n/**\n * Wraps an array into a chunk without copying, unsafe on mutable arrays\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeFromNonEmptyArray = <A>(self: NonEmptyReadonlyArray<A>): NonEmptyChunk<A> =>\n  unsafeFromArray(self) as any\n\n/**\n * Gets an element unsafely, will throw on out of bounds\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeGet: {\n  /**\n   * Gets an element unsafely, will throw on out of bounds\n   *\n   * @since 2.0.0\n   * @category unsafe\n   */\n  (index: number): <A>(self: Chunk<A>) => A\n  /**\n   * Gets an element unsafely, will throw on out of bounds\n   *\n   * @since 2.0.0\n   * @category unsafe\n   */\n  <A>(self: Chunk<A>, index: number): A\n} = dual(2, <A>(self: Chunk<A>, index: number): A => {\n  switch (self.backing._tag) {\n    case \"IEmpty\": {\n      throw new Error(`Index out of bounds`)\n    }\n    case \"ISingleton\": {\n      if (index !== 0) {\n        throw new Error(`Index out of bounds`)\n      }\n      return self.backing.a\n    }\n    case \"IArray\": {\n      if (index >= self.length || index < 0) {\n        throw new Error(`Index out of bounds`)\n      }\n      return self.backing.array[index]!\n    }\n    case \"IConcat\": {\n      return index < self.left.length\n        ? unsafeGet(self.left, index)\n        : unsafeGet(self.right, index - self.left.length)\n    }\n    case \"ISlice\": {\n      return unsafeGet(self.backing.chunk, index + self.backing.offset)\n    }\n  }\n})\n\n/**\n * Appends the specified element to the end of the `Chunk`.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const append: {\n  /**\n   * Appends the specified element to the end of the `Chunk`.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A2>(a: A2): <A>(self: Chunk<A>) => NonEmptyChunk<A2 | A>\n  /**\n   * Appends the specified element to the end of the `Chunk`.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, A2>(self: Chunk<A>, a: A2): NonEmptyChunk<A | A2>\n} = dual(2, <A, A2>(self: Chunk<A>, a: A2): NonEmptyChunk<A | A2> => appendAll(self, of(a)))\n\n/**\n * Prepend an element to the front of a `Chunk`, creating a new `NonEmptyChunk`.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prepend: {\n  /**\n   * Prepend an element to the front of a `Chunk`, creating a new `NonEmptyChunk`.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <B>(elem: B): <A>(self: Chunk<A>) => NonEmptyChunk<B | A>\n  /**\n   * Prepend an element to the front of a `Chunk`, creating a new `NonEmptyChunk`.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Chunk<A>, elem: B): NonEmptyChunk<A | B>\n} = dual(2, <A, B>(self: Chunk<A>, elem: B): NonEmptyChunk<A | B> => appendAll(of(elem), self))\n\n/**\n * Takes the first up to `n` elements from the chunk\n *\n * @since 2.0.0\n */\nexport const take: {\n  /**\n   * Takes the first up to `n` elements from the chunk\n   *\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Chunk<A>) => Chunk<A>\n  /**\n   * Takes the first up to `n` elements from the chunk\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, n: number): Chunk<A>\n} = dual(2, <A>(self: Chunk<A>, n: number): Chunk<A> => {\n  if (n <= 0) {\n    return _empty\n  } else if (n >= self.length) {\n    return self\n  } else {\n    switch (self.backing._tag) {\n      case \"ISlice\": {\n        return makeChunk({\n          _tag: \"ISlice\",\n          chunk: self.backing.chunk,\n          length: n,\n          offset: self.backing.offset\n        })\n      }\n      case \"IConcat\": {\n        if (n > self.left.length) {\n          return makeChunk({\n            _tag: \"IConcat\",\n            left: self.left,\n            right: take(self.right, n - self.left.length)\n          })\n        }\n\n        return take(self.left, n)\n      }\n      default: {\n        return makeChunk({\n          _tag: \"ISlice\",\n          chunk: self,\n          offset: 0,\n          length: n\n        })\n      }\n    }\n  }\n})\n\n/**\n * Drops the first up to `n` elements from the chunk\n *\n * @since 2.0.0\n */\nexport const drop: {\n  /**\n   * Drops the first up to `n` elements from the chunk\n   *\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Chunk<A>) => Chunk<A>\n  /**\n   * Drops the first up to `n` elements from the chunk\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, n: number): Chunk<A>\n} = dual(2, <A>(self: Chunk<A>, n: number): Chunk<A> => {\n  if (n <= 0) {\n    return self\n  } else if (n >= self.length) {\n    return _empty\n  } else {\n    switch (self.backing._tag) {\n      case \"ISlice\": {\n        return makeChunk({\n          _tag: \"ISlice\",\n          chunk: self.backing.chunk,\n          offset: self.backing.offset + n,\n          length: self.backing.length - n\n        })\n      }\n      case \"IConcat\": {\n        if (n > self.left.length) {\n          return drop(self.right, n - self.left.length)\n        }\n        return makeChunk({\n          _tag: \"IConcat\",\n          left: drop(self.left, n),\n          right: self.right\n        })\n      }\n      default: {\n        return makeChunk({\n          _tag: \"ISlice\",\n          chunk: self,\n          offset: n,\n          length: self.length - n\n        })\n      }\n    }\n  }\n})\n\n/**\n * Drops the last `n` elements.\n *\n * @since 2.0.0\n */\nexport const dropRight: {\n  /**\n   * Drops the last `n` elements.\n   *\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Chunk<A>) => Chunk<A>\n  /**\n   * Drops the last `n` elements.\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, n: number): Chunk<A>\n} = dual(2, <A>(self: Chunk<A>, n: number): Chunk<A> => take(self, Math.max(0, self.length - n)))\n\n/**\n * Drops all elements so long as the predicate returns true.\n *\n * @since 2.0.0\n */\nexport const dropWhile: {\n  /**\n   * Drops all elements so long as the predicate returns true.\n   *\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => Chunk<A>\n  /**\n   * Drops all elements so long as the predicate returns true.\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Chunk<A>\n} = dual(2, <A>(self: Chunk<A>, predicate: Predicate<A>): Chunk<A> => {\n  const arr = toReadonlyArray(self)\n  const len = arr.length\n  let i = 0\n  while (i < len && predicate(arr[i]!)) {\n    i++\n  }\n  return drop(self, i)\n})\n\n/**\n * Prepends the specified prefix chunk to the beginning of the specified chunk.\n * If either chunk is non-empty, the result is also a non-empty chunk.\n *\n * @example\n * import { Chunk } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Chunk.make(1, 2).pipe(Chunk.prependAll(Chunk.make(\"a\", \"b\")), Chunk.toArray),\n *   [\"a\", \"b\", 1, 2]\n * )\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prependAll: {\n  /**\n   * Prepends the specified prefix chunk to the beginning of the specified chunk.\n   * If either chunk is non-empty, the result is also a non-empty chunk.\n   *\n   * @example\n   * import { Chunk } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Chunk.make(1, 2).pipe(Chunk.prependAll(Chunk.make(\"a\", \"b\")), Chunk.toArray),\n   *   [\"a\", \"b\", 1, 2]\n   * )\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <S extends Chunk<any>, T extends Chunk<any>>(\n    that: T\n  ): (self: S) => Chunk.OrNonEmpty<S, T, Chunk.Infer<S> | Chunk.Infer<T>>\n  /**\n   * Prepends the specified prefix chunk to the beginning of the specified chunk.\n   * If either chunk is non-empty, the result is also a non-empty chunk.\n   *\n   * @example\n   * import { Chunk } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Chunk.make(1, 2).pipe(Chunk.prependAll(Chunk.make(\"a\", \"b\")), Chunk.toArray),\n   *   [\"a\", \"b\", 1, 2]\n   * )\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Chunk<A>, that: NonEmptyChunk<B>): NonEmptyChunk<A | B>\n  /**\n   * Prepends the specified prefix chunk to the beginning of the specified chunk.\n   * If either chunk is non-empty, the result is also a non-empty chunk.\n   *\n   * @example\n   * import { Chunk } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Chunk.make(1, 2).pipe(Chunk.prependAll(Chunk.make(\"a\", \"b\")), Chunk.toArray),\n   *   [\"a\", \"b\", 1, 2]\n   * )\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyChunk<A>, that: Chunk<B>): NonEmptyChunk<A | B>\n  /**\n   * Prepends the specified prefix chunk to the beginning of the specified chunk.\n   * If either chunk is non-empty, the result is also a non-empty chunk.\n   *\n   * @example\n   * import { Chunk } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Chunk.make(1, 2).pipe(Chunk.prependAll(Chunk.make(\"a\", \"b\")), Chunk.toArray),\n   *   [\"a\", \"b\", 1, 2]\n   * )\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<A | B>\n} = dual(2, <A, B>(self: NonEmptyChunk<A>, that: Chunk<B>): Chunk<A | B> => appendAll(that, self))\n\n/**\n * Concatenates two chunks, combining their elements.\n * If either chunk is non-empty, the result is also a non-empty chunk.\n *\n * @example\n * import { Chunk } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Chunk.make(1, 2).pipe(Chunk.appendAll(Chunk.make(\"a\", \"b\")), Chunk.toArray),\n *   [1, 2, \"a\", \"b\"]\n * )\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const appendAll: {\n  /**\n   * Concatenates two chunks, combining their elements.\n   * If either chunk is non-empty, the result is also a non-empty chunk.\n   *\n   * @example\n   * import { Chunk } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Chunk.make(1, 2).pipe(Chunk.appendAll(Chunk.make(\"a\", \"b\")), Chunk.toArray),\n   *   [1, 2, \"a\", \"b\"]\n   * )\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <S extends Chunk<any>, T extends Chunk<any>>(\n    that: T\n  ): (self: S) => Chunk.OrNonEmpty<S, T, Chunk.Infer<S> | Chunk.Infer<T>>\n  /**\n   * Concatenates two chunks, combining their elements.\n   * If either chunk is non-empty, the result is also a non-empty chunk.\n   *\n   * @example\n   * import { Chunk } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Chunk.make(1, 2).pipe(Chunk.appendAll(Chunk.make(\"a\", \"b\")), Chunk.toArray),\n   *   [1, 2, \"a\", \"b\"]\n   * )\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Chunk<A>, that: NonEmptyChunk<B>): NonEmptyChunk<A | B>\n  /**\n   * Concatenates two chunks, combining their elements.\n   * If either chunk is non-empty, the result is also a non-empty chunk.\n   *\n   * @example\n   * import { Chunk } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Chunk.make(1, 2).pipe(Chunk.appendAll(Chunk.make(\"a\", \"b\")), Chunk.toArray),\n   *   [1, 2, \"a\", \"b\"]\n   * )\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyChunk<A>, that: Chunk<B>): NonEmptyChunk<A | B>\n  /**\n   * Concatenates two chunks, combining their elements.\n   * If either chunk is non-empty, the result is also a non-empty chunk.\n   *\n   * @example\n   * import { Chunk } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Chunk.make(1, 2).pipe(Chunk.appendAll(Chunk.make(\"a\", \"b\")), Chunk.toArray),\n   *   [1, 2, \"a\", \"b\"]\n   * )\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<A | B>\n} = dual(2, <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<A | B> => {\n  if (self.backing._tag === \"IEmpty\") {\n    return that\n  }\n  if (that.backing._tag === \"IEmpty\") {\n    return self\n  }\n  const diff = that.depth - self.depth\n  if (Math.abs(diff) <= 1) {\n    return makeChunk<\n      /**\n       * Concatenates two chunks, combining their elements.\n       * If either chunk is non-empty, the result is also a non-empty chunk.\n       *\n       * @example\n       * import { Chunk } from \"effect\"\n       *\n       * assert.deepStrictEqual(\n       *   Chunk.make(1, 2).pipe(Chunk.appendAll(Chunk.make(\"a\", \"b\")), Chunk.toArray),\n       *   [1, 2, \"a\", \"b\"]\n       * )\n       *\n       * @category concatenating\n       * @since 2.0.0\n       */\n      A | B\n    >({ _tag: \"IConcat\", left: self, right: that })\n  } else if (diff < -1) {\n    if (self.left.depth >= self.right.depth) {\n      const nr = appendAll(self.right, that)\n      return makeChunk({ _tag: \"IConcat\", left: self.left, right: nr })\n    } else {\n      const nrr = appendAll(self.right.right, that)\n      if (nrr.depth === self.depth - 3) {\n        const nr = makeChunk({ _tag: \"IConcat\", left: self.right.left, right: nrr })\n        return makeChunk({ _tag: \"IConcat\", left: self.left, right: nr })\n      } else {\n        const nl = makeChunk({ _tag: \"IConcat\", left: self.left, right: self.right.left })\n        return makeChunk({ _tag: \"IConcat\", left: nl, right: nrr })\n      }\n    }\n  } else {\n    if (that.right.depth >= that.left.depth) {\n      const nl = appendAll(self, that.left)\n      return makeChunk({ _tag: \"IConcat\", left: nl, right: that.right })\n    } else {\n      const nll = appendAll(self, that.left.left)\n      if (nll.depth === that.depth - 3) {\n        const nl = makeChunk({ _tag: \"IConcat\", left: nll, right: that.left.right })\n        return makeChunk({ _tag: \"IConcat\", left: nl, right: that.right })\n      } else {\n        const nr = makeChunk({ _tag: \"IConcat\", left: that.left.right, right: that.right })\n        return makeChunk({ _tag: \"IConcat\", left: nll, right: nr })\n      }\n    }\n  }\n})\n\n/**\n * Returns a filtered and mapped subset of the elements.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filterMap: {\n  /**\n   * Returns a filtered and mapped subset of the elements.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A, B>(f: (a: A, i: number) => Option<B>): (self: Chunk<A>) => Chunk<B>\n  /**\n   * Returns a filtered and mapped subset of the elements.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A, B>(self: Chunk<A>, f: (a: A, i: number) => Option<B>): Chunk<B>\n} = dual(\n  2,\n  <A, B>(self: Chunk<A>, f: (a: A, i: number) => Option<B>): Chunk<B> => unsafeFromArray(RA.filterMap(self, f))\n)\n\n/**\n * Returns a filtered and mapped subset of the elements.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filter: {\n  /**\n   * Returns a filtered and mapped subset of the elements.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Chunk<A>) => Chunk<B>\n  /**\n   * Returns a filtered and mapped subset of the elements.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => Chunk<A>\n  /**\n   * Returns a filtered and mapped subset of the elements.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A, B extends A>(self: Chunk<A>, refinement: Refinement<A, B>): Chunk<B>\n  /**\n   * Returns a filtered and mapped subset of the elements.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Chunk<A>\n} = dual(\n  2,\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Chunk<A> => unsafeFromArray(RA.filter(self, predicate))\n)\n\n/**\n * Transforms all elements of the chunk for as long as the specified function returns some value\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filterMapWhile: {\n  /**\n   * Transforms all elements of the chunk for as long as the specified function returns some value\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A, B>(f: (a: A) => Option<B>): (self: Chunk<A>) => Chunk<B>\n  /**\n   * Transforms all elements of the chunk for as long as the specified function returns some value\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A, B>(self: Chunk<A>, f: (a: A) => Option<B>): Chunk<B>\n} = dual(2, <A, B>(self: Chunk<A>, f: (a: A) => Option<B>) => unsafeFromArray(RA.filterMapWhile(self, f)))\n\n/**\n * Filter out optional values\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const compact = <A>(self: Chunk<Option<A>>): Chunk<A> => filterMap(self, identity)\n\n/**\n * Applies a function to each element in a chunk and returns a new chunk containing the concatenated mapped elements.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  /**\n   * Applies a function to each element in a chunk and returns a new chunk containing the concatenated mapped elements.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <S extends Chunk<any>, T extends Chunk<any>>(\n    f: (a: Chunk.Infer<S>, i: number) => T\n  ): (self: S) => Chunk.AndNonEmpty<S, T, Chunk.Infer<T>>\n  /**\n   * Applies a function to each element in a chunk and returns a new chunk containing the concatenated mapped elements.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, B>(self: NonEmptyChunk<A>, f: (a: A, i: number) => NonEmptyChunk<B>): NonEmptyChunk<B>\n  /**\n   * Applies a function to each element in a chunk and returns a new chunk containing the concatenated mapped elements.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, B>(self: Chunk<A>, f: (a: A, i: number) => Chunk<B>): Chunk<B>\n} = dual(2, <A, B>(self: Chunk<A>, f: (a: A, i: number) => Chunk<B>) => {\n  if (self.backing._tag === \"ISingleton\") {\n    return f(self.backing.a, 0)\n  }\n  let out: Chunk<B> = _empty\n  let i = 0\n  for (const k of self) {\n    out = appendAll(out, f(k, i++))\n  }\n  return out\n})\n\n/**\n * Applies the specified function to each element of the `List`.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const forEach: {\n  /**\n   * Applies the specified function to each element of the `List`.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B>(f: (a: A) => B): (self: Chunk<A>) => void\n  /**\n   * Applies the specified function to each element of the `List`.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B>(self: Chunk<A>, f: (a: A) => B): void\n} = dual(2, <A, B>(self: Chunk<A>, f: (a: A) => B): void => toReadonlyArray(self).forEach(f))\n\n/**\n * Flattens a chunk of chunks into a single chunk by concatenating all chunks.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatten: <S extends Chunk<Chunk<any>>>(self: S) => Chunk.Flatten<S> = flatMap(identity) as any\n\n/**\n * Groups elements in chunks of up to `n` elements.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const chunksOf: {\n  /**\n   * Groups elements in chunks of up to `n` elements.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  (n: number): <A>(self: Chunk<A>) => Chunk<Chunk<A>>\n  /**\n   * Groups elements in chunks of up to `n` elements.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: Chunk<A>, n: number): Chunk<Chunk<A>>\n} = dual(2, <A>(self: Chunk<A>, n: number) => {\n  const gr: Array<Chunk<A>> = []\n  let current: Array<A> = []\n  toReadonlyArray(self).forEach((a) => {\n    current.push(a)\n    if (current.length >= n) {\n      gr.push(unsafeFromArray(current))\n      current = []\n    }\n  })\n  if (current.length > 0) {\n    gr.push(unsafeFromArray(current))\n  }\n  return unsafeFromArray(gr)\n})\n\n/**\n * Creates a Chunk of unique values that are included in all given Chunks.\n *\n * The order and references of result values are determined by the Chunk.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const intersection: {\n  /**\n   * Creates a Chunk of unique values that are included in all given Chunks.\n   *\n   * The order and references of result values are determined by the Chunk.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(that: Chunk<A>): <B>(self: Chunk<B>) => Chunk<A & B>\n  /**\n   * Creates a Chunk of unique values that are included in all given Chunks.\n   *\n   * The order and references of result values are determined by the Chunk.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<A & B>\n} = dual(\n  2,\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<A & B> =>\n    unsafeFromArray(RA.intersection(toReadonlyArray(self), toReadonlyArray(that)))\n)\n\n/**\n * Determines if the chunk is empty.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isEmpty = <A>(self: Chunk<A>): boolean => self.length === 0\n\n/**\n * Determines if the chunk is not empty.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isNonEmpty = <A>(self: Chunk<A>): self is NonEmptyChunk<A> => self.length > 0\n\n/**\n * Returns the first element of this chunk if it exists.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const head: <A>(self: Chunk<A>) => Option<A> = get(0)\n\n/**\n * Returns the first element of this chunk.\n *\n * It will throw an error if the chunk is empty.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeHead = <A>(self: Chunk<A>): A => unsafeGet(self, 0)\n\n/**\n * Returns the first element of this non empty chunk.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const headNonEmpty: <A>(self: NonEmptyChunk<A>) => A = unsafeHead\n\n/**\n * Returns the last element of this chunk if it exists.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const last = <A>(self: Chunk<A>): Option<A> => get(self, self.length - 1)\n\n/**\n * Returns the last element of this chunk.\n *\n * It will throw an error if the chunk is empty.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeLast = <A>(self: Chunk<A>): A => unsafeGet(self, self.length - 1)\n\n/**\n * Returns the last element of this non empty chunk.\n *\n * @since 3.4.0\n * @category elements\n */\nexport const lastNonEmpty: <A>(self: NonEmptyChunk<A>) => A = unsafeLast\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Chunk {\n  /**\n   * @since 2.0.0\n   */\n  export type Infer<S extends Chunk<any>> = S extends Chunk<infer A> ? A : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type With<S extends Chunk<any>, A> = S extends NonEmptyChunk<any> ? NonEmptyChunk<A> : Chunk<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type OrNonEmpty<S extends Chunk<any>, T extends Chunk<any>, A> = S extends NonEmptyChunk<any> ?\n    NonEmptyChunk<A>\n    : T extends NonEmptyChunk<any> ? NonEmptyChunk<A>\n    : Chunk<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type AndNonEmpty<S extends Chunk<any>, T extends Chunk<any>, A> = S extends NonEmptyChunk<any> ?\n    T extends NonEmptyChunk<any> ? NonEmptyChunk<A>\n    : Chunk<A> :\n    Chunk<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type Flatten<T extends Chunk<Chunk<any>>> = T extends NonEmptyChunk<NonEmptyChunk<infer A>> ? NonEmptyChunk<A>\n    : T extends Chunk<Chunk<infer A>> ? Chunk<A>\n    : never\n}\n\n/**\n * Transforms the elements of a chunk using the specified mapping function.\n * If the input chunk is non-empty, the resulting chunk will also be non-empty.\n *\n * @example\n * import { Chunk } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Chunk.map(Chunk.make(1, 2), (n) => n + 1),\n *   Chunk.make(2, 3)\n * )\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  /**\n   * Transforms the elements of a chunk using the specified mapping function.\n   * If the input chunk is non-empty, the resulting chunk will also be non-empty.\n   *\n   * @example\n   * import { Chunk } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Chunk.map(Chunk.make(1, 2), (n) => n + 1),\n   *   Chunk.make(2, 3)\n   * )\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <S extends Chunk<any>, B>(f: (a: Chunk.Infer<S>, i: number) => B): (self: S) => Chunk.With<S, B>\n  /**\n   * Transforms the elements of a chunk using the specified mapping function.\n   * If the input chunk is non-empty, the resulting chunk will also be non-empty.\n   *\n   * @example\n   * import { Chunk } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Chunk.map(Chunk.make(1, 2), (n) => n + 1),\n   *   Chunk.make(2, 3)\n   * )\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, B>(self: NonEmptyChunk<A>, f: (a: A, i: number) => B): NonEmptyChunk<B>\n  /**\n   * Transforms the elements of a chunk using the specified mapping function.\n   * If the input chunk is non-empty, the resulting chunk will also be non-empty.\n   *\n   * @example\n   * import { Chunk } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Chunk.map(Chunk.make(1, 2), (n) => n + 1),\n   *   Chunk.make(2, 3)\n   * )\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, B>(self: Chunk<A>, f: (a: A, i: number) => B): Chunk<B>\n} = dual(2, <A, B>(self: Chunk<A>, f: (a: A, i: number) => B): Chunk<B> =>\n  self.backing._tag === \"ISingleton\" ?\n    of(f(self.backing.a, 0)) :\n    unsafeFromArray(pipe(toReadonlyArray(self), RA.map((a, i) => f(a, i)))))\n\n/**\n * Statefully maps over the chunk, producing new elements of type `B`.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const mapAccum: {\n  /**\n   * Statefully maps over the chunk, producing new elements of type `B`.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <S, A, B>(s: S, f: (s: S, a: A) => readonly [S, B]): (self: Chunk<A>) => [S, Chunk<B>]\n  /**\n   * Statefully maps over the chunk, producing new elements of type `B`.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <S, A, B>(self: Chunk<A>, s: S, f: (s: S, a: A) => readonly [S, B]): [S, Chunk<B>]\n} = dual(3, <S, A, B>(self: Chunk<A>, s: S, f: (s: S, a: A) => readonly [S, B]): [S, Chunk<B>] => {\n  const [s1, as] = RA.mapAccum(self, s, f)\n  return [s1, unsafeFromArray(as)]\n})\n\n/**\n * Separate elements based on a predicate that also exposes the index of the element.\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partition: {\n  /**\n   * Separate elements based on a predicate that also exposes the index of the element.\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(\n    refinement: (a: NoInfer<A>, i: number) => a is B\n  ): (self: Chunk<A>) => [excluded: Chunk<Exclude<A, B>>, satisfying: Chunk<B>]\n  /**\n   * Separate elements based on a predicate that also exposes the index of the element.\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Chunk<A>) => [excluded: Chunk<A>, satisfying: Chunk<A>]\n  /**\n   * Separate elements based on a predicate that also exposes the index of the element.\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(\n    self: Chunk<A>,\n    refinement: (a: A, i: number) => a is B\n  ): [excluded: Chunk<Exclude<A, B>>, satisfying: Chunk<B>]\n  /**\n   * Separate elements based on a predicate that also exposes the index of the element.\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, predicate: (a: A, i: number) => boolean): [excluded: Chunk<A>, satisfying: Chunk<A>]\n} = dual(\n  2,\n  <A>(self: Chunk<A>, predicate: (a: A, i: number) => boolean): [excluded: Chunk<A>, satisfying: Chunk<A>] =>\n    pipe(\n      RA.partition(toReadonlyArray(self), predicate),\n      ([l, r]) => [unsafeFromArray(l), unsafeFromArray(r)]\n    )\n)\n\n/**\n * Partitions the elements of this chunk into two chunks using f.\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partitionMap: {\n  /**\n   * Partitions the elements of this chunk into two chunks using f.\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B, C>(f: (a: A) => Either<C, B>): (self: Chunk<A>) => [left: Chunk<B>, right: Chunk<C>]\n  /**\n   * Partitions the elements of this chunk into two chunks using f.\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B, C>(self: Chunk<A>, f: (a: A) => Either<C, B>): [left: Chunk<B>, right: Chunk<C>]\n} = dual(2, <A, B, C>(self: Chunk<A>, f: (a: A) => Either<C, B>): [left: Chunk<B>, right: Chunk<C>] =>\n  pipe(\n    RA.partitionMap(toReadonlyArray(self), f),\n    ([l, r]) => [unsafeFromArray(l), unsafeFromArray(r)]\n  ))\n\n/**\n * Partitions the elements of this chunk into two chunks.\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const separate = <A, B>(self: Chunk<Either<B, A>>): [Chunk<A>, Chunk<B>] =>\n  pipe(\n    RA.separate(toReadonlyArray(self)),\n    ([l, r]) => [unsafeFromArray(l), unsafeFromArray(r)]\n  )\n\n/**\n * Retireves the size of the chunk\n *\n * @since 2.0.0\n * @category elements\n */\nexport const size = <A>(self: Chunk<A>): number => self.length\n\n/**\n * Sort the elements of a Chunk in increasing order, creating a new Chunk.\n *\n * @since 2.0.0\n * @category sorting\n */\nexport const sort: {\n  /**\n   * Sort the elements of a Chunk in increasing order, creating a new Chunk.\n   *\n   * @since 2.0.0\n   * @category sorting\n   */\n  <B>(O: Order.Order<B>): <A extends B>(self: Chunk<A>) => Chunk<A>\n  /**\n   * Sort the elements of a Chunk in increasing order, creating a new Chunk.\n   *\n   * @since 2.0.0\n   * @category sorting\n   */\n  <A extends B, B>(self: Chunk<A>, O: Order.Order<B>): Chunk<A>\n} = dual(\n  2,\n  <A extends B, B>(self: Chunk<A>, O: Order.Order<B>): Chunk<A> => unsafeFromArray(RA.sort(toReadonlyArray(self), O))\n)\n\n/**\n * @since 2.0.0\n * @category sorting\n */\nexport const sortWith: {\n  /**\n   * @since 2.0.0\n   * @category sorting\n   */\n  <A, B>(f: (a: A) => B, order: Order.Order<B>): (self: Chunk<A>) => Chunk<A>\n  /**\n   * @since 2.0.0\n   * @category sorting\n   */\n  <A, B>(self: Chunk<A>, f: (a: A) => B, order: Order.Order<B>): Chunk<A>\n} = dual(\n  3,\n  <A, B>(self: Chunk<A>, f: (a: A) => B, order: Order.Order<B>): Chunk<A> => sort(self, Order.mapInput(order, f))\n)\n\n/**\n *  Returns two splits of this chunk at the specified index.\n *\n * @since 2.0.0\n * @category splitting\n */\nexport const splitAt: {\n  /**\n   *  Returns two splits of this chunk at the specified index.\n   *\n   * @since 2.0.0\n   * @category splitting\n   */\n  (n: number): <A>(self: Chunk<A>) => [beforeIndex: Chunk<A>, fromIndex: Chunk<A>]\n  /**\n   *  Returns two splits of this chunk at the specified index.\n   *\n   * @since 2.0.0\n   * @category splitting\n   */\n  <A>(self: Chunk<A>, n: number): [beforeIndex: Chunk<A>, fromIndex: Chunk<A>]\n} = dual(2, <A>(self: Chunk<A>, n: number): [Chunk<A>, Chunk<A>] => [take(self, n), drop(self, n)])\n\n/**\n * Splits a `NonEmptyChunk` into two segments, with the first segment containing a maximum of `n` elements.\n * The value of `n` must be `>= 1`.\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitNonEmptyAt: {\n  /**\n   * Splits a `NonEmptyChunk` into two segments, with the first segment containing a maximum of `n` elements.\n   * The value of `n` must be `>= 1`.\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: NonEmptyChunk<A>) => [beforeIndex: NonEmptyChunk<A>, fromIndex: Chunk<A>]\n  /**\n   * Splits a `NonEmptyChunk` into two segments, with the first segment containing a maximum of `n` elements.\n   * The value of `n` must be `>= 1`.\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(self: NonEmptyChunk<A>, n: number): [beforeIndex: NonEmptyChunk<A>, fromIndex: Chunk<A>]\n} = dual(2, <A>(self: NonEmptyChunk<A>, n: number): [Chunk<A>, Chunk<A>] => {\n  const _n = Math.max(1, Math.floor(n))\n  return _n >= self.length ?\n    [self, empty()] :\n    [take(self, _n), drop(self, _n)]\n})\n\n/**\n * Splits this chunk into `n` equally sized chunks.\n *\n * @since 2.0.0\n * @category splitting\n */\nexport const split: {\n  /**\n   * Splits this chunk into `n` equally sized chunks.\n   *\n   * @since 2.0.0\n   * @category splitting\n   */\n  (n: number): <A>(self: Chunk<A>) => Chunk<Chunk<A>>\n  /**\n   * Splits this chunk into `n` equally sized chunks.\n   *\n   * @since 2.0.0\n   * @category splitting\n   */\n  <A>(self: Chunk<A>, n: number): Chunk<Chunk<A>>\n} = dual(2, <A>(self: Chunk<A>, n: number) => chunksOf(self, Math.ceil(self.length / Math.floor(n))))\n\n/**\n * Splits this chunk on the first element that matches this predicate.\n * Returns a tuple containing two chunks: the first one is before the match, and the second one is from the match onward.\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitWhere: {\n  /**\n   * Splits this chunk on the first element that matches this predicate.\n   * Returns a tuple containing two chunks: the first one is before the match, and the second one is from the match onward.\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => [beforeMatch: Chunk<A>, fromMatch: Chunk<A>]\n  /**\n   * Splits this chunk on the first element that matches this predicate.\n   * Returns a tuple containing two chunks: the first one is before the match, and the second one is from the match onward.\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, predicate: Predicate<A>): [beforeMatch: Chunk<A>, fromMatch: Chunk<A>]\n} = dual(2, <A>(self: Chunk<A>, predicate: Predicate<A>): [beforeMatch: Chunk<A>, fromMatch: Chunk<A>] => {\n  let i = 0\n  for (const a of toReadonlyArray(self)) {\n    if (predicate(a)) {\n      break\n    } else {\n      i++\n    }\n  }\n  return splitAt(self, i)\n})\n\n/**\n * Returns every elements after the first.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const tail = <A>(self: Chunk<A>): Option<Chunk<A>> => self.length > 0 ? O.some(drop(self, 1)) : O.none()\n\n/**\n * Returns every elements after the first.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const tailNonEmpty = <A>(self: NonEmptyChunk<A>): Chunk<A> => drop(self, 1)\n\n/**\n * Takes the last `n` elements.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const takeRight: {\n  /**\n   * Takes the last `n` elements.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  (n: number): <A>(self: Chunk<A>) => Chunk<A>\n  /**\n   * Takes the last `n` elements.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: Chunk<A>, n: number): Chunk<A>\n} = dual(2, <A>(self: Chunk<A>, n: number): Chunk<A> => drop(self, self.length - n))\n\n/**\n * Takes all elements so long as the predicate returns true.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const takeWhile: {\n  /**\n   * Takes all elements so long as the predicate returns true.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Chunk<A>) => Chunk<B>\n  /**\n   * Takes all elements so long as the predicate returns true.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => Chunk<A>\n  /**\n   * Takes all elements so long as the predicate returns true.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B extends A>(self: Chunk<A>, refinement: Refinement<A, B>): Chunk<B>\n  /**\n   * Takes all elements so long as the predicate returns true.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Chunk<A>\n} = dual(2, <A>(self: Chunk<A>, predicate: Predicate<A>): Chunk<A> => {\n  const out: Array<A> = []\n  for (const a of toReadonlyArray(self)) {\n    if (predicate(a)) {\n      out.push(a)\n    } else {\n      break\n    }\n  }\n  return unsafeFromArray(out)\n})\n\n/**\n * Creates a Chunks of unique values, in order, from all given Chunks.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const union: {\n  /**\n   * Creates a Chunks of unique values, in order, from all given Chunks.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(that: Chunk<A>): <B>(self: Chunk<B>) => Chunk<A | B>\n  /**\n   * Creates a Chunks of unique values, in order, from all given Chunks.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<A | B>\n} = dual(\n  2,\n  <A, B>(self: Chunk<A>, that: Chunk<B>) => unsafeFromArray(RA.union(toReadonlyArray(self), toReadonlyArray(that)))\n)\n\n/**\n * Remove duplicates from an array, keeping the first occurrence of an element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const dedupe = <A>(self: Chunk<A>): Chunk<A> => unsafeFromArray(RA.dedupe(toReadonlyArray(self)))\n\n/**\n * Deduplicates adjacent elements that are identical.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const dedupeAdjacent = <A>(self: Chunk<A>): Chunk<A> => unsafeFromArray(RA.dedupeAdjacent(self))\n\n/**\n * Takes a `Chunk` of pairs and return two corresponding `Chunk`s.\n *\n * Note: The function is reverse of `zip`.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const unzip = <A, B>(self: Chunk<readonly [A, B]>): [Chunk<A>, Chunk<B>] => {\n  const [left, right] = RA.unzip(self)\n  return [unsafeFromArray(left), unsafeFromArray(right)]\n}\n\n/**\n * Zips this chunk pointwise with the specified chunk using the specified combiner.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWith: {\n  /**\n   * Zips this chunk pointwise with the specified chunk using the specified combiner.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, B, C>(that: Chunk<B>, f: (a: A, b: B) => C): (self: Chunk<A>) => Chunk<C>\n  /**\n   * Zips this chunk pointwise with the specified chunk using the specified combiner.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, B, C>(self: Chunk<A>, that: Chunk<B>, f: (a: A, b: B) => C): Chunk<C>\n} = dual(\n  3,\n  <A, B, C>(self: Chunk<A>, that: Chunk<B>, f: (a: A, b: B) => C): Chunk<C> =>\n    unsafeFromArray(RA.zipWith(self, that, f))\n)\n\n/**\n * Zips this chunk pointwise with the specified chunk.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zip: {\n  /**\n   * Zips this chunk pointwise with the specified chunk.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <B>(that: Chunk<B>): <A>(self: Chunk<A>) => Chunk<[A, B]>\n  /**\n   * Zips this chunk pointwise with the specified chunk.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<[A, B]>\n} = dual(\n  2,\n  <A, B>(self: Chunk<A>, that: Chunk<B>): Chunk<[A, B]> => zipWith(self, that, (a, b) => [a, b])\n)\n\n/**\n * Delete the element at the specified index, creating a new `Chunk`,\n * or returning the input if the index is out of bounds.\n *\n * @since 2.0.0\n */\nexport const remove: {\n  /**\n   * Delete the element at the specified index, creating a new `Chunk`,\n   * or returning the input if the index is out of bounds.\n   *\n   * @since 2.0.0\n   */\n  (i: number): <A>(self: Chunk<A>) => Chunk<A>\n  /**\n   * Delete the element at the specified index, creating a new `Chunk`,\n   * or returning the input if the index is out of bounds.\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, i: number): Chunk<A>\n} = dual(\n  2,\n  <A>(self: Chunk<A>, i: number): Chunk<A> => unsafeFromArray(RA.remove(toReadonlyArray(self), i))\n)\n\n/**\n * @since 2.0.0\n */\nexport const modifyOption: {\n  /**\n   * @since 2.0.0\n   */\n  <A, B>(i: number, f: (a: A) => B): (self: Chunk<A>) => Option<Chunk<A | B>>\n  /**\n   * @since 2.0.0\n   */\n  <A, B>(self: Chunk<A>, i: number, f: (a: A) => B): Option<Chunk<A | B>>\n} = dual(\n  3,\n  <A, B>(self: Chunk<A>, i: number, f: (a: A) => B): Option<Chunk<A | B>> =>\n    O.map(RA.modifyOption(toReadonlyArray(self), i, f), unsafeFromArray)\n)\n\n/**\n * Apply a function to the element at the specified index, creating a new `Chunk`,\n * or returning the input if the index is out of bounds.\n *\n * @since 2.0.0\n */\nexport const modify: {\n  /**\n   * Apply a function to the element at the specified index, creating a new `Chunk`,\n   * or returning the input if the index is out of bounds.\n   *\n   * @since 2.0.0\n   */\n  <A, B>(i: number, f: (a: A) => B): (self: Chunk<A>) => Chunk<A | B>\n  /**\n   * Apply a function to the element at the specified index, creating a new `Chunk`,\n   * or returning the input if the index is out of bounds.\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: Chunk<A>, i: number, f: (a: A) => B): Chunk<A | B>\n} = dual(\n  3,\n  <A, B>(self: Chunk<A>, i: number, f: (a: A) => B): Chunk<A | B> => O.getOrElse(modifyOption(self, i, f), () => self)\n)\n\n/**\n * Change the element at the specified index, creating a new `Chunk`,\n * or returning the input if the index is out of bounds.\n *\n * @since 2.0.0\n */\nexport const replace: {\n  /**\n   * Change the element at the specified index, creating a new `Chunk`,\n   * or returning the input if the index is out of bounds.\n   *\n   * @since 2.0.0\n   */\n  <B>(i: number, b: B): <A>(self: Chunk<A>) => Chunk<B | A>\n  /**\n   * Change the element at the specified index, creating a new `Chunk`,\n   * or returning the input if the index is out of bounds.\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: Chunk<A>, i: number, b: B): Chunk<B | A>\n} = dual(3, <A, B>(self: Chunk<A>, i: number, b: B): Chunk<B | A> => modify(self, i, () => b))\n\n/**\n * @since 2.0.0\n */\nexport const replaceOption: {\n  /**\n   * @since 2.0.0\n   */\n  <B>(i: number, b: B): <A>(self: Chunk<A>) => Option<Chunk<B | A>>\n  /**\n   * @since 2.0.0\n   */\n  <A, B>(self: Chunk<A>, i: number, b: B): Option<Chunk<B | A>>\n} = dual(3, <A, B>(self: Chunk<A>, i: number, b: B): Option<Chunk<B | A>> => modifyOption(self, i, () => b))\n\n/**\n * Return a Chunk of length n with element i initialized with f(i).\n *\n * **Note**. `n` is normalized to an integer >= 1.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const makeBy: {\n  /**\n   * Return a Chunk of length n with element i initialized with f(i).\n   *\n   * **Note**. `n` is normalized to an integer >= 1.\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A>(f: (i: number) => A): (n: number) => NonEmptyChunk<A>\n  /**\n   * Return a Chunk of length n with element i initialized with f(i).\n   *\n   * **Note**. `n` is normalized to an integer >= 1.\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A>(n: number, f: (i: number) => A): NonEmptyChunk<A>\n} = dual(2, (n, f) => fromIterable(RA.makeBy(n, f)))\n\n/**\n * Create a non empty `Chunk` containing a range of integers, including both endpoints.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const range = (start: number, end: number): NonEmptyChunk<number> =>\n  start <= end ? makeBy(end - start + 1, (i) => start + i) : of(start)\n\n// -------------------------------------------------------------------------------------\n// re-exports from ReadonlyArray\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns a function that checks if a `Chunk` contains a given value using the default `Equivalence`.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const contains: {\n  // -------------------------------------------------------------------------------------\n  // re-exports from ReadonlyArray\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * Returns a function that checks if a `Chunk` contains a given value using the default `Equivalence`.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(a: A): (self: Chunk<A>) => boolean\n  // -------------------------------------------------------------------------------------\n  // re-exports from ReadonlyArray\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * Returns a function that checks if a `Chunk` contains a given value using the default `Equivalence`.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, a: A): boolean\n} = RA.contains\n\n/**\n * Returns a function that checks if a `Chunk` contains a given value using a provided `isEquivalent` function.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const containsWith: <A>(\n  isEquivalent: (self: A, that: A) => boolean\n) => {\n  (a: A): (self: Chunk<A>) => boolean\n  (self: Chunk<A>, a: A): boolean\n} = RA.containsWith\n\n/**\n * Returns the first element that satisfies the specified\n * predicate, or `None` if no such element exists.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirst: {\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Chunk<A>) => Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => Option<A>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Chunk<A>, refinement: Refinement<A, B>): Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Option<A>\n} = RA.findFirst\n\n/**\n * Return the first index for which a predicate holds.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirstIndex: {\n  /**\n   * Return the first index for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate<A>): (self: Chunk<A>) => Option<number>\n  /**\n   * Return the first index for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Option<number>\n} = RA.findFirstIndex\n\n/**\n * Find the last element for which a predicate holds.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findLast: {\n  /**\n   * Find the last element for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Chunk<A>) => Option<B>\n  /**\n   * Find the last element for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => Option<A>\n  /**\n   * Find the last element for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Chunk<A>, refinement: Refinement<A, B>): Option<B>\n  /**\n   * Find the last element for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Option<A>\n} = RA.findLast\n\n/**\n * Return the last index for which a predicate holds.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findLastIndex: {\n  /**\n   * Return the last index for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate<A>): (self: Chunk<A>) => Option<number>\n  /**\n   * Return the last index for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, predicate: Predicate<A>): Option<number>\n} = RA.findLastIndex\n\n/**\n * Check if a predicate holds true for every `Chunk` element.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const every: {\n  /**\n   * Check if a predicate holds true for every `Chunk` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Chunk<A>) => self is Chunk<B>\n  /**\n   * Check if a predicate holds true for every `Chunk` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate<A>): (self: Chunk<A>) => boolean\n  /**\n   * Check if a predicate holds true for every `Chunk` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Chunk<A>, refinement: Refinement<A, B>): self is Chunk<B>\n  /**\n   * Check if a predicate holds true for every `Chunk` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, predicate: Predicate<A>): boolean\n} = dual(\n  2,\n  <A, B extends A>(self: Chunk<A>, refinement: Refinement<A, B>): self is Chunk<B> =>\n    RA.fromIterable(self).every(refinement)\n)\n\n/**\n * Check if a predicate holds true for some `Chunk` element.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const some: {\n  /**\n   * Check if a predicate holds true for some `Chunk` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Chunk<A>) => self is NonEmptyChunk<A>\n  /**\n   * Check if a predicate holds true for some `Chunk` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Chunk<A>, predicate: Predicate<A>): self is NonEmptyChunk<A>\n} = dual(\n  2,\n  <A>(self: Chunk<A>, predicate: Predicate<A>): self is NonEmptyChunk<A> => RA.fromIterable(self).some(predicate)\n)\n\n/**\n * Joins the elements together with \"sep\" in the middle.\n *\n * @category folding\n * @since 2.0.0\n */\nexport const join: {\n  /**\n   * Joins the elements together with \"sep\" in the middle.\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  (sep: string): (self: Chunk<string>) => string\n  /**\n   * Joins the elements together with \"sep\" in the middle.\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  (self: Chunk<string>, sep: string): string\n} = RA.join\n\n/**\n * @category folding\n * @since 2.0.0\n */\nexport const reduce: {\n  /**\n   * @category folding\n   * @since 2.0.0\n   */\n  <B, A>(b: B, f: (b: B, a: A, i: number) => B): (self: Chunk<A>) => B\n  /**\n   * @category folding\n   * @since 2.0.0\n   */\n  <A, B>(self: Chunk<A>, b: B, f: (b: B, a: A, i: number) => B): B\n} = RA.reduce\n\n/**\n * @category folding\n * @since 2.0.0\n */\nexport const reduceRight: {\n  /**\n   * @category folding\n   * @since 2.0.0\n   */\n  <B, A>(b: B, f: (b: B, a: A, i: number) => B): (self: Chunk<A>) => B\n  /**\n   * @category folding\n   * @since 2.0.0\n   */\n  <A, B>(self: Chunk<A>, b: B, f: (b: B, a: A, i: number) => B): B\n} = RA.reduceRight\n\n/**\n * Creates a `Chunk` of values not included in the other given `Chunk` using the provided `isEquivalent` function.\n * The order and references of result values are determined by the first `Chunk`.\n *\n * @since 3.2.0\n */\nexport const differenceWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (that: Chunk<A>): (self: Chunk<A>) => Chunk<A>\n  (self: Chunk<A>, that: Chunk<A>): Chunk<A>\n} => {\n  return dual(\n    2,\n    (self: Chunk<A>, that: Chunk<A>): Chunk<A> => unsafeFromArray(RA.differenceWith(isEquivalent)(that, self))\n  )\n}\n\n/**\n * Creates a `Chunk` of values not included in the other given `Chunk`.\n * The order and references of result values are determined by the first `Chunk`.\n *\n * @since 3.2.0\n */\nexport const difference: {\n  /**\n   * Creates a `Chunk` of values not included in the other given `Chunk`.\n   * The order and references of result values are determined by the first `Chunk`.\n   *\n   * @since 3.2.0\n   */\n  <A>(that: Chunk<A>): (self: Chunk<A>) => Chunk<A>\n  /**\n   * Creates a `Chunk` of values not included in the other given `Chunk`.\n   * The order and references of result values are determined by the first `Chunk`.\n   *\n   * @since 3.2.0\n   */\n  <A>(self: Chunk<A>, that: Chunk<A>): Chunk<A>\n} = dual(\n  2,\n  <A>(self: Chunk<A>, that: Chunk<A>): Chunk<A> => unsafeFromArray(RA.difference(that, self))\n)\n"],"names":["RA","Equal","Equivalence","dual","identity","pipe","Hash","format","NodeInspectSymbol","toJSON","O","Order","pipeArguments","hasProperty","TypeId","Symbol","for","copy","src","srcPos","dest","destPos","len","i","Math","min","length","emptyArray","getEquivalence","isEquivalent","make","self","that","toReadonlyArray","every","value","unsafeGet","_equivalence","equals","ChunkProto","_A","_","toString","_id","values","map","symbol","isChunk","cached","array","iterator","backing","_tag","arguments","makeChunk","chunk","Object","create","depth","left","right","max","_empty","u","empty","as","of","unsafeFromNonEmptyArray","a","fromIterable","copyToArray","initial","j","toArray_","slice","toArray","toReadonlyArray_","arr","Array","reverseChunk","reverse","unsafeFromArray","get","index","none","some","Error","offset","append","appendAll","prepend","elem","take","n","drop","dropRight","dropWhile","predicate","prependAll","diff","abs","nr","nrr","nl","nll","filterMap","f","filter","filterMapWhile","compact","flatMap","out","k","forEach","flatten","chunksOf","gr","current","push","intersection","isEmpty","isNonEmpty","head","unsafeHead","headNonEmpty","last","unsafeLast","lastNonEmpty","mapAccum","s","s1","partition","l","r","partitionMap","separate","size","sort","sortWith","order","mapInput","splitAt","splitNonEmptyAt","_n","floor","split","ceil","splitWhere","tail","tailNonEmpty","takeRight","takeWhile","union","dedupe","dedupeAdjacent","unzip","zipWith","zip","b","remove","modifyOption","modify","getOrElse","replace","replaceOption","makeBy","range","start","end","contains","containsWith","findFirst","findFirstIndex","findLast","findLastIndex","refinement","join","reduce","reduceRight","differenceWith","difference"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 5755, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5761, "column": 0}, "map": {"version":3,"file":"HashSet.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/HashSet.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\n\nimport type { Equal } from \"./Equal.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as HS from \"./internal/hashSet.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport type { NoInfer } from \"./Types.js\"\n\nconst TypeId: unique symbol = HS.HashSetTypeId as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface HashSet<out A> extends Iterable<A>, Equal, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n}\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isHashSet: {\n  /**\n   * @since 2.0.0\n   * @category refinements\n   */\n  <A>(u: Iterable<A>): u is HashSet<A>\n  /**\n   * @since 2.0.0\n   * @category refinements\n   */\n  (u: unknown): u is HashSet<unknown>\n} = HS.isHashSet\n\n/**\n * Creates an empty `HashSet`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: <A = never>() => HashSet<A> = HS.empty\n\n/**\n * Creates a new `HashSet` from an iterable collection of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable: <A>(elements: Iterable<A>) => HashSet<A> = HS.fromIterable\n\n/**\n * Construct a new `HashSet` from a variable number of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <As extends ReadonlyArray<any>>(...elements: As) => HashSet<As[number]> = HS.make\n\n/**\n * Checks if the specified value exists in the `HashSet`.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const has: {\n  /**\n   * Checks if the specified value exists in the `HashSet`.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(value: A): (self: HashSet<A>) => boolean\n  /**\n   * Checks if the specified value exists in the `HashSet`.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: HashSet<A>, value: A): boolean\n} = HS.has\n\n/**\n * Check if a predicate holds true for some `HashSet` element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const some: {\n  /**\n   * Check if a predicate holds true for some `HashSet` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(f: Predicate<A>): (self: HashSet<A>) => boolean\n  /**\n   * Check if a predicate holds true for some `HashSet` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: HashSet<A>, f: Predicate<A>): boolean\n} = HS.some\n\n/**\n * Check if a predicate holds true for every `HashSet` element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const every: {\n  /**\n   * Check if a predicate holds true for every `HashSet` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: HashSet<A>) => self is HashSet<B>\n  /**\n   * Check if a predicate holds true for every `HashSet` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(predicate: Predicate<A>): (self: HashSet<A>) => boolean\n  /**\n   * Check if a predicate holds true for every `HashSet` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B extends A>(self: HashSet<A>, refinement: Refinement<A, B>): self is HashSet<B>\n  /**\n   * Check if a predicate holds true for every `HashSet` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: HashSet<A>, predicate: Predicate<A>): boolean\n} = HS.every\n\n/**\n * Returns `true` if and only if every element in the this `HashSet` is an\n * element of the second set,\n *\n * **NOTE**: the hash and equal of both sets must be the same.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isSubset: {\n  /**\n   * Returns `true` if and only if every element in the this `HashSet` is an\n   * element of the second set,\n   *\n   * **NOTE**: the hash and equal of both sets must be the same.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(that: HashSet<A>): (self: HashSet<A>) => boolean\n  /**\n   * Returns `true` if and only if every element in the this `HashSet` is an\n   * element of the second set,\n   *\n   * **NOTE**: the hash and equal of both sets must be the same.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: HashSet<A>, that: HashSet<A>): boolean\n} = HS.isSubset\n\n/**\n * Returns an `IterableIterator` of the values in the `HashSet`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const values: <A>(self: HashSet<A>) => IterableIterator<A> = HS.values\n\n/**\n * Calculates the number of values in the `HashSet`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const size: <A>(self: HashSet<A>) => number = HS.size\n\n/**\n * Marks the `HashSet` as mutable.\n *\n * @since 2.0.0\n */\nexport const beginMutation: <A>(self: HashSet<A>) => HashSet<A> = HS.beginMutation\n\n/**\n * Marks the `HashSet` as immutable.\n *\n * @since 2.0.0\n */\nexport const endMutation: <A>(self: HashSet<A>) => HashSet<A> = HS.endMutation\n\n/**\n * Mutates the `HashSet` within the context of the provided function.\n *\n * @since 2.0.0\n */\nexport const mutate: {\n  /**\n   * Mutates the `HashSet` within the context of the provided function.\n   *\n   * @since 2.0.0\n   */\n  <A>(f: (set: HashSet<A>) => void): (self: HashSet<A>) => HashSet<A>\n  /**\n   * Mutates the `HashSet` within the context of the provided function.\n   *\n   * @since 2.0.0\n   */\n  <A>(self: HashSet<A>, f: (set: HashSet<A>) => void): HashSet<A>\n} = HS.mutate\n\n/**\n * Adds a value to the `HashSet`.\n *\n * @since 2.0.0\n */\nexport const add: {\n  /**\n   * Adds a value to the `HashSet`.\n   *\n   * @since 2.0.0\n   */\n  <A>(value: A): (self: HashSet<A>) => HashSet<A>\n  /**\n   * Adds a value to the `HashSet`.\n   *\n   * @since 2.0.0\n   */\n  <A>(self: HashSet<A>, value: A): HashSet<A>\n} = HS.add\n\n/**\n * Removes a value from the `HashSet`.\n *\n * @since 2.0.0\n */\nexport const remove: {\n  /**\n   * Removes a value from the `HashSet`.\n   *\n   * @since 2.0.0\n   */\n  <A>(value: A): (self: HashSet<A>) => HashSet<A>\n  /**\n   * Removes a value from the `HashSet`.\n   *\n   * @since 2.0.0\n   */\n  <A>(self: HashSet<A>, value: A): HashSet<A>\n} = HS.remove\n\n/**\n * Computes the set difference between this `HashSet` and the specified\n * `Iterable<A>`.\n *\n * **NOTE**: the hash and equal of the values in both the set and the iterable\n * must be the same.\n *\n * @since 2.0.0\n */\nexport const difference: {\n  /**\n   * Computes the set difference between this `HashSet` and the specified\n   * `Iterable<A>`.\n   *\n   * **NOTE**: the hash and equal of the values in both the set and the iterable\n   * must be the same.\n   *\n   * @since 2.0.0\n   */\n  <A>(that: Iterable<A>): (self: HashSet<A>) => HashSet<A>\n  /**\n   * Computes the set difference between this `HashSet` and the specified\n   * `Iterable<A>`.\n   *\n   * **NOTE**: the hash and equal of the values in both the set and the iterable\n   * must be the same.\n   *\n   * @since 2.0.0\n   */\n  <A>(self: HashSet<A>, that: Iterable<A>): HashSet<A>\n} = HS.difference\n\n/**\n * Returns a `HashSet` of values which are present in both this set and that\n * `Iterable<A>`.\n *\n * **NOTE**: the hash and equal of the values in both the set and the iterable\n * must be the same.\n *\n * @since 2.0.0\n */\nexport const intersection: {\n  /**\n   * Returns a `HashSet` of values which are present in both this set and that\n   * `Iterable<A>`.\n   *\n   * **NOTE**: the hash and equal of the values in both the set and the iterable\n   * must be the same.\n   *\n   * @since 2.0.0\n   */\n  <A>(that: Iterable<A>): (self: HashSet<A>) => HashSet<A>\n  /**\n   * Returns a `HashSet` of values which are present in both this set and that\n   * `Iterable<A>`.\n   *\n   * **NOTE**: the hash and equal of the values in both the set and the iterable\n   * must be the same.\n   *\n   * @since 2.0.0\n   */\n  <A>(self: HashSet<A>, that: Iterable<A>): HashSet<A>\n} = HS.intersection\n\n/**\n * Computes the set union `(`self` + `that`)` between this `HashSet` and the\n * specified `Iterable<A>`.\n *\n * **NOTE**: the hash and equal of the values in both the set and the iterable\n * must be the same.\n *\n * @since 2.0.0\n */\nexport const union: {\n  /**\n   * Computes the set union `(`self` + `that`)` between this `HashSet` and the\n   * specified `Iterable<A>`.\n   *\n   * **NOTE**: the hash and equal of the values in both the set and the iterable\n   * must be the same.\n   *\n   * @since 2.0.0\n   */\n  <A>(that: Iterable<A>): (self: HashSet<A>) => HashSet<A>\n  /**\n   * Computes the set union `(`self` + `that`)` between this `HashSet` and the\n   * specified `Iterable<A>`.\n   *\n   * **NOTE**: the hash and equal of the values in both the set and the iterable\n   * must be the same.\n   *\n   * @since 2.0.0\n   */\n  <A>(self: HashSet<A>, that: Iterable<A>): HashSet<A>\n} = HS.union\n\n/**\n * Checks if a value is present in the `HashSet`. If it is present, the value\n * will be removed from the `HashSet`, otherwise the value will be added to the\n * `HashSet`.\n *\n * @since 2.0.0\n */\nexport const toggle: {\n  /**\n   * Checks if a value is present in the `HashSet`. If it is present, the value\n   * will be removed from the `HashSet`, otherwise the value will be added to the\n   * `HashSet`.\n   *\n   * @since 2.0.0\n   */\n  <A>(value: A): (self: HashSet<A>) => HashSet<A>\n  /**\n   * Checks if a value is present in the `HashSet`. If it is present, the value\n   * will be removed from the `HashSet`, otherwise the value will be added to the\n   * `HashSet`.\n   *\n   * @since 2.0.0\n   */\n  <A>(self: HashSet<A>, value: A): HashSet<A>\n} = HS.toggle\n\n/**\n * Maps over the values of the `HashSet` using the specified function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  /**\n   * Maps over the values of the `HashSet` using the specified function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, B>(f: (a: A) => B): (self: HashSet<A>) => HashSet<B>\n  /**\n   * Maps over the values of the `HashSet` using the specified function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, B>(self: HashSet<A>, f: (a: A) => B): HashSet<B>\n} = HS.map\n\n/**\n * Chains over the values of the `HashSet` using the specified function.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  /**\n   * Chains over the values of the `HashSet` using the specified function.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, B>(f: (a: A) => Iterable<B>): (self: HashSet<A>) => HashSet<B>\n  /**\n   * Chains over the values of the `HashSet` using the specified function.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, B>(self: HashSet<A>, f: (a: A) => Iterable<B>): HashSet<B>\n} = HS.flatMap\n\n/**\n * Applies the specified function to the values of the `HashSet`.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEach: {\n  /**\n   * Applies the specified function to the values of the `HashSet`.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <A>(f: (value: A) => void): (self: HashSet<A>) => void\n  /**\n   * Applies the specified function to the values of the `HashSet`.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <A>(self: HashSet<A>, f: (value: A) => void): void\n} = HS.forEach\n\n/**\n * Reduces the specified state over the values of the `HashSet`.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduce: {\n  /**\n   * Reduces the specified state over the values of the `HashSet`.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <A, Z>(zero: Z, f: (accumulator: Z, value: A) => Z): (self: HashSet<A>) => Z\n  /**\n   * Reduces the specified state over the values of the `HashSet`.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <A, Z>(self: HashSet<A>, zero: Z, f: (accumulator: Z, value: A) => Z): Z\n} = HS.reduce\n\n/**\n * Filters values out of a `HashSet` using the specified predicate.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filter: {\n  /**\n   * Filters values out of a `HashSet` using the specified predicate.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: HashSet<A>) => HashSet<B>\n  /**\n   * Filters values out of a `HashSet` using the specified predicate.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: HashSet<A>) => HashSet<A>\n  /**\n   * Filters values out of a `HashSet` using the specified predicate.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A, B extends A>(self: HashSet<A>, refinement: Refinement<A, B>): HashSet<B>\n  /**\n   * Filters values out of a `HashSet` using the specified predicate.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A>(self: HashSet<A>, predicate: Predicate<A>): HashSet<A>\n} = HS.filter\n\n/**\n * Partition the values of a `HashSet` using the specified predicate.\n *\n * If a value matches the predicate, it will be placed into the `HashSet` on the\n * right side of the resulting `Tuple`, otherwise the value will be placed into\n * the left side.\n *\n * @since 2.0.0\n * @category partitioning\n */\nexport const partition: {\n  /**\n   * Partition the values of a `HashSet` using the specified predicate.\n   *\n   * If a value matches the predicate, it will be placed into the `HashSet` on the\n   * right side of the resulting `Tuple`, otherwise the value will be placed into\n   * the left side.\n   *\n   * @since 2.0.0\n   * @category partitioning\n   */\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): (self: HashSet<A>) => [excluded: HashSet<Exclude<A, B>>, satisfying: HashSet<B>]\n  /**\n   * Partition the values of a `HashSet` using the specified predicate.\n   *\n   * If a value matches the predicate, it will be placed into the `HashSet` on the\n   * right side of the resulting `Tuple`, otherwise the value will be placed into\n   * the left side.\n   *\n   * @since 2.0.0\n   * @category partitioning\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: HashSet<A>) => [excluded: HashSet<A>, satisfying: HashSet<A>]\n  /**\n   * Partition the values of a `HashSet` using the specified predicate.\n   *\n   * If a value matches the predicate, it will be placed into the `HashSet` on the\n   * right side of the resulting `Tuple`, otherwise the value will be placed into\n   * the left side.\n   *\n   * @since 2.0.0\n   * @category partitioning\n   */\n  <A, B extends A>(\n    self: HashSet<A>,\n    refinement: Refinement<A, B>\n  ): [excluded: HashSet<Exclude<A, B>>, satisfying: HashSet<B>]\n  /**\n   * Partition the values of a `HashSet` using the specified predicate.\n   *\n   * If a value matches the predicate, it will be placed into the `HashSet` on the\n   * right side of the resulting `Tuple`, otherwise the value will be placed into\n   * the left side.\n   *\n   * @since 2.0.0\n   * @category partitioning\n   */\n  <A>(self: HashSet<A>, predicate: Predicate<A>): [excluded: HashSet<A>, satisfying: HashSet<A>]\n} = HS.partition\n"],"names":["HS","TypeId","HashSetTypeId","isHashSet","empty","fromIterable","make","has","some","every","isSubset","values","size","beginMutation","endMutation","mutate","add","remove","difference","intersection","union","toggle","map","flatMap","forEach","reduce","filter","partition"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,OAAO,KAAKA,EAAE,MAAM,uBAAuB;;AAK3C,MAAMC,MAAM,GAAkBD,EAAE,iNAACE,aAAuB;AAoBjD,MAAMC,SAAS,GAWlBH,EAAE,iNAACG,SAAS;AAQT,MAAMC,KAAK,GAAgCJ,EAAE,iNAACI,KAAK;AAQnD,MAAMC,YAAY,GAA6CL,EAAE,iNAACK,YAAY;AAQ9E,MAAMC,IAAI,GAA4EN,EAAE,iNAACM,IAAI;AAQ7F,MAAMC,GAAG,GAeZP,EAAE,iNAACO,GAAG;AAQH,MAAMC,IAAI,GAebR,EAAE,iNAACQ,IAAI;AAQJ,MAAMC,KAAK,GA6BdT,EAAE,iNAACS,KAAK;AAWL,MAAMC,QAAQ,GAqBjBV,EAAE,iNAACU,QAAQ;AAQR,MAAMC,MAAM,GAAiDX,EAAE,iNAACW,MAAM;AAQtE,MAAMC,IAAI,GAAoCZ,EAAE,iNAACY,IAAI;AAOrD,MAAMC,aAAa,GAAwCb,EAAE,iNAACa,aAAa;AAO3E,MAAMC,WAAW,GAAwCd,EAAE,iNAACc,WAAW;AAOvE,MAAMC,MAAM,GAaff,EAAE,iNAACe,MAAM;AAON,MAAMC,GAAG,GAaZhB,EAAE,iNAACgB,GAAG;AAOH,MAAMC,MAAM,GAafjB,EAAE,iNAACiB,MAAM;AAWN,MAAMC,UAAU,GAqBnBlB,EAAE,iNAACkB,UAAU;AAWV,MAAMC,YAAY,GAqBrBnB,EAAE,iNAACmB,YAAY;AAWZ,MAAMC,KAAK,GAqBdpB,EAAE,iNAACoB,KAAK;AASL,MAAMC,MAAM,GAiBfrB,EAAE,iNAACqB,MAAM;AAQN,MAAMC,GAAG,GAeZtB,EAAE,iNAACsB,GAAG;AAQH,MAAMC,OAAO,GAehBvB,EAAE,iNAACuB,OAAO;AAQP,MAAMC,OAAO,GAehBxB,EAAE,iNAACwB,OAAO;AAQP,MAAMC,MAAM,GAefzB,EAAE,iNAACyB,MAAM;AAQN,MAAMC,MAAM,GA6Bf1B,EAAE,iNAAC0B,MAAM;AAYN,MAAMC,SAAS,GAkDlB3B,EAAE,iNAAC2B,SAAS","ignoreList":[0]}},
    {"offset": {"line": 5818, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5824, "column": 0}, "map": {"version":3,"file":"MutableRef.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/MutableRef.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport * as Equal from \"./Equal.js\"\nimport * as Dual from \"./Function.js\"\nimport { format, type Inspectable, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/MutableRef\") as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface MutableRef<out T> extends Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n\n  /** @internal */\n  current: T\n}\n\nconst MutableRefProto: Omit<MutableRef<unknown>, \"current\"> = {\n  [TypeId]: TypeId,\n  toString<A>(this: MutableRef<A>): string {\n    return format(this.toJSON())\n  },\n  toJSON<A>(this: MutableRef<A>) {\n    return {\n      _id: \"MutableRef\",\n      current: toJSON(this.current)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make = <T>(value: T): MutableRef<T> => {\n  const ref = Object.create(MutableRefProto)\n  ref.current = value\n  return ref\n}\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const compareAndSet: {\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(oldValue: T, newValue: T): (self: MutableRef<T>) => boolean\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(self: MutableRef<T>, oldValue: T, newValue: T): boolean\n} = Dual.dual<\n  <T>(oldValue: T, newValue: T) => (self: MutableRef<T>) => boolean,\n  <T>(self: MutableRef<T>, oldValue: T, newValue: T) => boolean\n>(3, (self, oldValue, newValue) => {\n  if (Equal.equals(oldValue, self.current)) {\n    self.current = newValue\n    return true\n  }\n  return false\n})\n\n/**\n * @since 2.0.0\n * @category numeric\n */\nexport const decrement = (self: MutableRef<number>): MutableRef<number> => update(self, (n) => n - 1)\n\n/**\n * @since 2.0.0\n * @category numeric\n */\nexport const decrementAndGet = (self: MutableRef<number>): number => updateAndGet(self, (n) => n - 1)\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const get = <T>(self: MutableRef<T>): T => self.current\n\n/**\n * @since 2.0.0\n * @category numeric\n */\nexport const getAndDecrement = (self: MutableRef<number>): number => getAndUpdate(self, (n) => n - 1)\n\n/**\n * @since 2.0.0\n * @category numeric\n */\nexport const getAndIncrement = (self: MutableRef<number>): number => getAndUpdate(self, (n) => n + 1)\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const getAndSet: {\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(value: T): (self: MutableRef<T>) => T\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(self: MutableRef<T>, value: T): T\n} = Dual.dual<\n  <T>(value: T) => (self: MutableRef<T>) => T,\n  <T>(self: MutableRef<T>, value: T) => T\n>(2, (self, value) => {\n  const ret = self.current\n  self.current = value\n  return ret\n})\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const getAndUpdate: {\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(f: (value: T) => T): (self: MutableRef<T>) => T\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(self: MutableRef<T>, f: (value: T) => T): T\n} = Dual.dual<\n  <T>(f: (value: T) => T) => (self: MutableRef<T>) => T,\n  <T>(self: MutableRef<T>, f: (value: T) => T) => T\n>(2, (self, f) => getAndSet(self, f(get(self))))\n\n/**\n * @since 2.0.0\n * @category numeric\n */\nexport const increment = (self: MutableRef<number>): MutableRef<number> => update(self, (n) => n + 1)\n\n/**\n * @since 2.0.0\n * @category numeric\n */\nexport const incrementAndGet = (self: MutableRef<number>): number => updateAndGet(self, (n) => n + 1)\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const set: {\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(value: T): (self: MutableRef<T>) => MutableRef<T>\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(self: MutableRef<T>, value: T): MutableRef<T>\n} = Dual.dual<\n  <T>(value: T) => (self: MutableRef<T>) => MutableRef<T>,\n  <T>(self: MutableRef<T>, value: T) => MutableRef<T>\n>(2, (self, value) => {\n  self.current = value\n  return self\n})\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const setAndGet: {\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(value: T): (self: MutableRef<T>) => T\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(self: MutableRef<T>, value: T): T\n} = Dual.dual<\n  <T>(value: T) => (self: MutableRef<T>) => T,\n  <T>(self: MutableRef<T>, value: T) => T\n>(2, (self, value) => {\n  self.current = value\n  return self.current\n})\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const update: {\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(f: (value: T) => T): (self: MutableRef<T>) => MutableRef<T>\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(self: MutableRef<T>, f: (value: T) => T): MutableRef<T>\n} = Dual.dual<\n  <T>(f: (value: T) => T) => (self: MutableRef<T>) => MutableRef<T>,\n  <T>(self: MutableRef<T>, f: (value: T) => T) => MutableRef<T>\n>(2, (self, f) => set(self, f(get(self))))\n\n/**\n * @since 2.0.0\n * @category general\n */\nexport const updateAndGet: {\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(f: (value: T) => T): (self: MutableRef<T>) => T\n  /**\n   * @since 2.0.0\n   * @category general\n   */\n  <T>(self: MutableRef<T>, f: (value: T) => T): T\n} = Dual.dual<\n  <T>(f: (value: T) => T) => (self: MutableRef<T>) => T,\n  <T>(self: MutableRef<T>, f: (value: T) => T) => T\n>(2, (self, f) => setAndGet(self, f(get(self))))\n\n/**\n * @since 2.0.0\n * @category boolean\n */\nexport const toggle = (self: MutableRef<boolean>): MutableRef<boolean> => update(self, (_) => !_)\n"],"names":["Equal","Dual","format","NodeInspectSymbol","toJSON","pipeArguments","TypeId","Symbol","for","MutableRefProto","toString","_id","current","pipe","arguments","make","value","ref","Object","create","compareAndSet","dual","self","oldValue","newValue","equals","decrement","update","n","decrementAndGet","updateAndGet","get","getAndDecrement","getAndUpdate","getAndIncrement","getAndSet","ret","f","increment","incrementAndGet","set","setAndGet","toggle","_"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 5907, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5913, "column": 0}, "map": {"version":3,"file":"FiberId.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/FiberId.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Equal from \"./Equal.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as internal from \"./internal/fiberId.js\"\nimport type * as Option from \"./Option.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const FiberIdTypeId: unique symbol = internal.FiberIdTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type FiberIdTypeId = typeof FiberIdTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type Single = None | Runtime\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type FiberId = Single | Composite\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface None extends Equal.Equal, Inspectable {\n  readonly [FiberIdTypeId]: FiberIdTypeId\n  readonly _tag: \"None\"\n  readonly id: -1\n  readonly startTimeMillis: -1\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Runtime extends Equal.Equal, Inspectable {\n  readonly [FiberIdTypeId]: FiberIdTypeId\n  readonly _tag: \"Runtime\"\n  readonly id: number\n  readonly startTimeMillis: number\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Composite extends Equal.Equal, Inspectable {\n  readonly [FiberIdTypeId]: FiberIdTypeId\n  readonly _tag: \"Composite\"\n  readonly left: FiberId\n  readonly right: FiberId\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const none: None = internal.none\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const runtime: (id: number, startTimeMillis: number) => Runtime = internal.runtime\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const composite: (left: FiberId, right: FiberId) => Composite = internal.composite\n\n/**\n * Returns `true` if the specified unknown value is a `FiberId`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isFiberId: (self: unknown) => self is FiberId = internal.isFiberId\n\n/**\n * Returns `true` if the `FiberId` is a `None`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isNone: (self: FiberId) => self is None = internal.isNone\n\n/**\n * Returns `true` if the `FiberId` is a `Runtime`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isRuntime: (self: FiberId) => self is Runtime = internal.isRuntime\n\n/**\n * Returns `true` if the `FiberId` is a `Composite`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isComposite: (self: FiberId) => self is Composite = internal.isComposite\n\n/**\n * Combine two `FiberId`s.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const combine: {\n  /**\n   * Combine two `FiberId`s.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  (that: FiberId): (self: FiberId) => FiberId\n  /**\n   * Combine two `FiberId`s.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  (self: FiberId, that: FiberId): FiberId\n} = internal.combine\n\n/**\n * Combines a set of `FiberId`s into a single `FiberId`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const combineAll: (fiberIds: HashSet.HashSet<FiberId>) => FiberId = internal.combineAll\n\n/**\n * Returns this `FiberId` if it is not `None`, otherwise returns that `FiberId`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const getOrElse: {\n  /**\n   * Returns this `FiberId` if it is not `None`, otherwise returns that `FiberId`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (that: FiberId): (self: FiberId) => FiberId\n  /**\n   * Returns this `FiberId` if it is not `None`, otherwise returns that `FiberId`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: FiberId, that: FiberId): FiberId\n} = internal.getOrElse\n\n/**\n * Get the set of identifiers for this `FiberId`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const ids: (self: FiberId) => HashSet.HashSet<number> = internal.ids\n\n/**\n * Creates a new `FiberId`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (id: number, startTimeSeconds: number) => FiberId = internal.make\n\n/**\n * Creates a string representing the name of the current thread of execution\n * represented by the specified `FiberId`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const threadName: (self: FiberId) => string = internal.threadName\n\n/**\n * Convert a `FiberId` into an `Option<FiberId>`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const toOption: (self: FiberId) => Option.Option<FiberId> = internal.toOption\n\n/**\n * Convert a `FiberId` into a `HashSet<FiberId>`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const toSet: (self: FiberId) => HashSet.HashSet<Runtime> = internal.toSet\n\n/**\n * Unsafely creates a new `FiberId`.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeMake: (_: void) => Runtime = internal.unsafeMake\n"],"names":["internal","FiberIdTypeId","none","runtime","composite","isFiberId","isNone","isRuntime","isComposite","combine","combineAll","getOrElse","ids","make","threadName","toOption","toSet","unsafeMake"],"mappings":";;;;;;;;;;;;;;;;;;;AAMA,OAAO,KAAKA,QAAQ,MAAM,uBAAuB;;AAO1C,MAAMC,aAAa,GAAkBD,QAAQ,2MAACC,aAAa;AAyD3D,MAAMC,IAAI,GAASF,QAAQ,2MAACE,IAAI;AAMhC,MAAMC,OAAO,GAAqDH,QAAQ,2MAACG,OAAO;AAMlF,MAAMC,SAAS,GAAiDJ,QAAQ,2MAACI,SAAS;AASlF,MAAMC,SAAS,GAAuCL,QAAQ,2MAACK,SAAS;AAQxE,MAAMC,MAAM,GAAoCN,QAAQ,2MAACM,MAAM;AAQ/D,MAAMC,SAAS,GAAuCP,QAAQ,2MAACO,SAAS;AAQxE,MAAMC,WAAW,GAAyCR,QAAQ,2MAACQ,WAAW;AAQ9E,MAAMC,OAAO,GAehBT,QAAQ,2MAACS,OAAO;AAQb,MAAMC,UAAU,GAAoDV,QAAQ,2MAACU,UAAU;AAQvF,MAAMC,SAAS,GAelBX,QAAQ,2MAACW,SAAS;AAQf,MAAMC,GAAG,GAA+CZ,QAAQ,2MAACY,GAAG;AAQpE,MAAMC,IAAI,GAAsDb,QAAQ,2MAACa,IAAI;AAS7E,MAAMC,UAAU,GAA8Bd,QAAQ,2MAACc,UAAU;AAQjE,MAAMC,QAAQ,GAA8Cf,QAAQ,2MAACe,QAAQ;AAQ7E,MAAMC,KAAK,GAAgDhB,QAAQ,2MAACgB,KAAK;AAQzE,MAAMC,UAAU,GAAyBjB,QAAQ,2MAACiB,UAAU","ignoreList":[0]}},
    {"offset": {"line": 5951, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5957, "column": 0}, "map": {"version":3,"file":"HashMap.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/HashMap.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\n\nimport type { Equal } from \"./Equal.js\"\nimport type { HashSet } from \"./HashSet.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as HM from \"./internal/hashMap.js\"\nimport * as _keySet from \"./internal/hashMap/keySet.js\"\nimport type { Option } from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { NoInfer } from \"./Types.js\"\n\nconst TypeId: unique symbol = HM.HashMapTypeId as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface HashMap<out Key, out Value> extends Iterable<[Key, Value]>, Equal, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace HashMap {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export type UpdateFn<V> = (option: Option<V>) => Option<V>\n  /**\n   * This type-level utility extracts the key type `K` from a `HashMap<K, V>` type.\n   *\n   * @example\n   * import { HashMap } from \"effect\"\n   *\n   * declare const hm: HashMap.HashMap<string, number>\n   *\n   * // $ExpectType string\n   * type K = HashMap.HashMap.Key<typeof hm>\n   *\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Key<T extends HashMap<any, any>> = [T] extends [HashMap<infer _K, infer _V>] ? _K : never\n  /**\n   * This type-level utility extracts the value type `V` from a `HashMap<K, V>` type.\n   *\n   * @example\n   * import { HashMap } from \"effect\"\n   *\n   * declare const hm: HashMap.HashMap<string, number>\n   *\n   * // $ExpectType number\n   * type V = HashMap.HashMap.Value<typeof hm>\n   *\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Value<T extends HashMap<any, any>> = [T] extends [HashMap<infer _K, infer _V>] ? _V : never\n\n  /**\n   * This type-level utility extracts the entry type `[K, V]` from a `HashMap<K, V>` type.\n   *\n   * @example\n   * import { HashMap } from \"effect\"\n   *\n   * declare const hm: HashMap.HashMap<string, number>\n   *\n   * // $ExpectType [string, number]\n   * type V = HashMap.HashMap.Entry<typeof hm>\n   *\n   * @since 3.9.0\n   * @category type-level\n   */\n  export type Entry<T extends HashMap<any, any>> = [Key<T>, Value<T>]\n}\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isHashMap: {\n  /**\n   * @since 2.0.0\n   * @category refinements\n   */\n  <K, V>(u: Iterable<readonly [K, V]>): u is HashMap<K, V>\n  /**\n   * @since 2.0.0\n   * @category refinements\n   */\n  (u: unknown): u is HashMap<unknown, unknown>\n} = HM.isHashMap\n\n/**\n * Creates a new `HashMap`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: <K = never, V = never>() => HashMap<K, V> = HM.empty\n\n/**\n * Constructs a new `HashMap` from an array of key/value pairs.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <Entries extends ReadonlyArray<readonly [any, any]>>(\n  ...entries: Entries\n) => HashMap<\n  Entries[number] extends readonly [infer K, any] ? K : never,\n  Entries[number] extends readonly [any, infer V] ? V : never\n> = HM.make\n\n/**\n * Creates a new `HashMap` from an iterable collection of key/value pairs.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable: <K, V>(entries: Iterable<readonly [K, V]>) => HashMap<K, V> = HM.fromIterable\n\n/**\n * Checks if the `HashMap` contains any entries.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isEmpty: <K, V>(self: HashMap<K, V>) => boolean = HM.isEmpty\n\n/**\n * Safely lookup the value for the specified key in the `HashMap` using the\n * internal hashing function.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const get: {\n  /**\n   * Safely lookup the value for the specified key in the `HashMap` using the\n   * internal hashing function.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K1>(key: K1): <K, V>(self: HashMap<K, V>) => Option<V>\n  /**\n   * Safely lookup the value for the specified key in the `HashMap` using the\n   * internal hashing function.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K, V, K1>(self: HashMap<K, V>, key: K1): Option<V>\n} = HM.get\n\n/**\n * Lookup the value for the specified key in the `HashMap` using a custom hash.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const getHash: {\n  /**\n   * Lookup the value for the specified key in the `HashMap` using a custom hash.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K1>(key: K1, hash: number): <K, V>(self: HashMap<K, V>) => Option<V>\n  /**\n   * Lookup the value for the specified key in the `HashMap` using a custom hash.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K, V, K1>(self: HashMap<K, V>, key: K1, hash: number): Option<V>\n} = HM.getHash\n\n/**\n * Unsafely lookup the value for the specified key in the `HashMap` using the\n * internal hashing function.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeGet: {\n  /**\n   * Unsafely lookup the value for the specified key in the `HashMap` using the\n   * internal hashing function.\n   *\n   * @since 2.0.0\n   * @category unsafe\n   */\n  <K1>(key: K1): <K, V>(self: HashMap<K, V>) => V\n  /**\n   * Unsafely lookup the value for the specified key in the `HashMap` using the\n   * internal hashing function.\n   *\n   * @since 2.0.0\n   * @category unsafe\n   */\n  <K, V, K1>(self: HashMap<K, V>, key: K1): V\n} = HM.unsafeGet\n\n/**\n * Checks if the specified key has an entry in the `HashMap`.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const has: {\n  /**\n   * Checks if the specified key has an entry in the `HashMap`.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K1>(key: K1): <K, V>(self: HashMap<K, V>) => boolean\n  /**\n   * Checks if the specified key has an entry in the `HashMap`.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K, V, K1>(self: HashMap<K, V>, key: K1): boolean\n} = HM.has\n\n/**\n * Checks if the specified key has an entry in the `HashMap` using a custom\n * hash.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const hasHash: {\n  /**\n   * Checks if the specified key has an entry in the `HashMap` using a custom\n   * hash.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K1>(key: K1, hash: number): <K, V>(self: HashMap<K, V>) => boolean\n  /**\n   * Checks if the specified key has an entry in the `HashMap` using a custom\n   * hash.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K, V, K1>(self: HashMap<K, V>, key: K1, hash: number): boolean\n} = HM.hasHash\n\n/**\n * Sets the specified key to the specified value using the internal hashing\n * function.\n *\n * @since 2.0.0\n */\nexport const set: {\n  /**\n   * Sets the specified key to the specified value using the internal hashing\n   * function.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(key: K, value: V): (self: HashMap<K, V>) => HashMap<K, V>\n  /**\n   * Sets the specified key to the specified value using the internal hashing\n   * function.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(self: HashMap<K, V>, key: K, value: V): HashMap<K, V>\n} = HM.set\n\n/**\n * Returns an `IterableIterator` of the keys within the `HashMap`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const keys: <K, V>(self: HashMap<K, V>) => IterableIterator<K> = HM.keys\n\n/**\n * Returns a `HashSet` of keys within the `HashMap`.\n *\n * @since 2.0.0\n * @category getter\n */\nexport const keySet: <K, V>(self: HashMap<K, V>) => HashSet<K> = _keySet.keySet\n\n/**\n * Returns an `IterableIterator` of the values within the `HashMap`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const values: <K, V>(self: HashMap<K, V>) => IterableIterator<V> = HM.values\n\n/**\n * Returns an `IterableIterator` of the entries within the `HashMap`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const entries: <K, V>(self: HashMap<K, V>) => IterableIterator<[K, V]> = HM.entries\n\n/**\n * Returns an `Array<[K, V]>` of the entries within the `HashMap`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const toEntries = <K, V>(self: HashMap<K, V>): Array<[K, V]> => Array.from(entries(self))\n\n/**\n * Returns the number of entries within the `HashMap`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const size: <K, V>(self: HashMap<K, V>) => number = HM.size\n\n/**\n * Marks the `HashMap` as mutable.\n *\n * @since 2.0.0\n */\nexport const beginMutation: <K, V>(self: HashMap<K, V>) => HashMap<K, V> = HM.beginMutation\n\n/**\n * Marks the `HashMap` as immutable.\n *\n * @since 2.0.0\n */\nexport const endMutation: <K, V>(self: HashMap<K, V>) => HashMap<K, V> = HM.endMutation\n\n/**\n * Mutates the `HashMap` within the context of the provided function.\n *\n * @since 2.0.0\n */\nexport const mutate: {\n  /**\n   * Mutates the `HashMap` within the context of the provided function.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(f: (self: HashMap<K, V>) => void): (self: HashMap<K, V>) => HashMap<K, V>\n  /**\n   * Mutates the `HashMap` within the context of the provided function.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(self: HashMap<K, V>, f: (self: HashMap<K, V>) => void): HashMap<K, V>\n} = HM.mutate\n\n/**\n * Set or remove the specified key in the `HashMap` using the specified\n * update function. The value of the specified key will be computed using the\n * provided hash.\n *\n * The update function will be invoked with the current value of the key if it\n * exists, or `None` if no such value exists.\n *\n * @since 2.0.0\n */\nexport const modifyAt: {\n  /**\n   * Set or remove the specified key in the `HashMap` using the specified\n   * update function. The value of the specified key will be computed using the\n   * provided hash.\n   *\n   * The update function will be invoked with the current value of the key if it\n   * exists, or `None` if no such value exists.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(key: K, f: HashMap.UpdateFn<V>): (self: HashMap<K, V>) => HashMap<K, V>\n  /**\n   * Set or remove the specified key in the `HashMap` using the specified\n   * update function. The value of the specified key will be computed using the\n   * provided hash.\n   *\n   * The update function will be invoked with the current value of the key if it\n   * exists, or `None` if no such value exists.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(self: HashMap<K, V>, key: K, f: HashMap.UpdateFn<V>): HashMap<K, V>\n} = HM.modifyAt\n\n/**\n * Alter the value of the specified key in the `HashMap` using the specified\n * update function. The value of the specified key will be computed using the\n * provided hash.\n *\n * The update function will be invoked with the current value of the key if it\n * exists, or `None` if no such value exists.\n *\n * This function will always either update or insert a value into the `HashMap`.\n *\n * @since 2.0.0\n */\nexport const modifyHash: {\n  /**\n   * Alter the value of the specified key in the `HashMap` using the specified\n   * update function. The value of the specified key will be computed using the\n   * provided hash.\n   *\n   * The update function will be invoked with the current value of the key if it\n   * exists, or `None` if no such value exists.\n   *\n   * This function will always either update or insert a value into the `HashMap`.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(key: K, hash: number, f: HashMap.UpdateFn<V>): (self: HashMap<K, V>) => HashMap<K, V>\n  /**\n   * Alter the value of the specified key in the `HashMap` using the specified\n   * update function. The value of the specified key will be computed using the\n   * provided hash.\n   *\n   * The update function will be invoked with the current value of the key if it\n   * exists, or `None` if no such value exists.\n   *\n   * This function will always either update or insert a value into the `HashMap`.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(self: HashMap<K, V>, key: K, hash: number, f: HashMap.UpdateFn<V>): HashMap<K, V>\n} = HM.modifyHash\n\n/**\n * Updates the value of the specified key within the `HashMap` if it exists.\n *\n * @since 2.0.0\n */\nexport const modify: {\n  /**\n   * Updates the value of the specified key within the `HashMap` if it exists.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(key: K, f: (v: V) => V): (self: HashMap<K, V>) => HashMap<K, V>\n  /**\n   * Updates the value of the specified key within the `HashMap` if it exists.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(self: HashMap<K, V>, key: K, f: (v: V) => V): HashMap<K, V>\n} = HM.modify\n\n/**\n * Performs a union of this `HashMap` and that `HashMap`.\n *\n * @since 2.0.0\n */\nexport const union: {\n  /**\n   * Performs a union of this `HashMap` and that `HashMap`.\n   *\n   * @since 2.0.0\n   */\n  <K1, V1>(that: HashMap<K1, V1>): <K0, V0>(self: HashMap<K0, V0>) => HashMap<K1 | K0, V1 | V0>\n  /**\n   * Performs a union of this `HashMap` and that `HashMap`.\n   *\n   * @since 2.0.0\n   */\n  <K0, V0, K1, V1>(self: HashMap<K0, V0>, that: HashMap<K1, V1>): HashMap<K0 | K1, V0 | V1>\n} = HM.union\n\n/**\n * Remove the entry for the specified key in the `HashMap` using the internal\n * hashing function.\n *\n * @since 2.0.0\n */\nexport const remove: {\n  /**\n   * Remove the entry for the specified key in the `HashMap` using the internal\n   * hashing function.\n   *\n   * @since 2.0.0\n   */\n  <K>(key: K): <V>(self: HashMap<K, V>) => HashMap<K, V>\n  /**\n   * Remove the entry for the specified key in the `HashMap` using the internal\n   * hashing function.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(self: HashMap<K, V>, key: K): HashMap<K, V>\n} = HM.remove\n\n/**\n * Removes all entries in the `HashMap` which have the specified keys.\n *\n * @since 2.0.0\n */\nexport const removeMany: {\n  /**\n   * Removes all entries in the `HashMap` which have the specified keys.\n   *\n   * @since 2.0.0\n   */\n  <K>(keys: Iterable<K>): <V>(self: HashMap<K, V>) => HashMap<K, V>\n  /**\n   * Removes all entries in the `HashMap` which have the specified keys.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(self: HashMap<K, V>, keys: Iterable<K>): HashMap<K, V>\n} = HM.removeMany\n\n/**\n * Maps over the entries of the `HashMap` using the specified function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  /**\n   * Maps over the entries of the `HashMap` using the specified function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, V, K>(f: (value: V, key: K) => A): (self: HashMap<K, V>) => HashMap<K, A>\n  /**\n   * Maps over the entries of the `HashMap` using the specified function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <K, V, A>(self: HashMap<K, V>, f: (value: V, key: K) => A): HashMap<K, A>\n} = HM.map\n\n/**\n * Chains over the entries of the `HashMap` using the specified function.\n *\n * **NOTE**: the hash and equal of both maps have to be the same.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  /**\n   * Chains over the entries of the `HashMap` using the specified function.\n   *\n   * **NOTE**: the hash and equal of both maps have to be the same.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, K, B>(f: (value: A, key: K) => HashMap<K, B>): (self: HashMap<K, A>) => HashMap<K, B>\n  /**\n   * Chains over the entries of the `HashMap` using the specified function.\n   *\n   * **NOTE**: the hash and equal of both maps have to be the same.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <K, A, B>(self: HashMap<K, A>, f: (value: A, key: K) => HashMap<K, B>): HashMap<K, B>\n} = HM.flatMap\n\n/**\n * Applies the specified function to the entries of the `HashMap`.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEach: {\n  /**\n   * Applies the specified function to the entries of the `HashMap`.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <V, K>(f: (value: V, key: K) => void): (self: HashMap<K, V>) => void\n  /**\n   * Applies the specified function to the entries of the `HashMap`.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <V, K>(self: HashMap<K, V>, f: (value: V, key: K) => void): void\n} = HM.forEach\n\n/**\n * Reduces the specified state over the entries of the `HashMap`.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduce: {\n  /**\n   * Reduces the specified state over the entries of the `HashMap`.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <Z, V, K>(zero: Z, f: (accumulator: Z, value: V, key: K) => Z): (self: HashMap<K, V>) => Z\n  /**\n   * Reduces the specified state over the entries of the `HashMap`.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <K, V, Z>(self: HashMap<K, V>, zero: Z, f: (accumulator: Z, value: V, key: K) => Z): Z\n} = HM.reduce\n\n/**\n * Filters entries out of a `HashMap` using the specified predicate.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filter: {\n  /**\n   * Filters entries out of a `HashMap` using the specified predicate.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <K, A, B extends A>(f: (a: NoInfer<A>, k: K) => a is B): (self: HashMap<K, A>) => HashMap<K, B>\n  /**\n   * Filters entries out of a `HashMap` using the specified predicate.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <K, A>(f: (a: NoInfer<A>, k: K) => boolean): (self: HashMap<K, A>) => HashMap<K, A>\n  /**\n   * Filters entries out of a `HashMap` using the specified predicate.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <K, A, B extends A>(self: HashMap<K, A>, f: (a: A, k: K) => a is B): HashMap<K, B>\n  /**\n   * Filters entries out of a `HashMap` using the specified predicate.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <K, A>(self: HashMap<K, A>, f: (a: A, k: K) => boolean): HashMap<K, A>\n} = HM.filter\n\n/**\n * Filters out `None` values from a `HashMap` of `Options`s.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const compact: <K, A>(self: HashMap<K, Option<A>>) => HashMap<K, A> = HM.compact\n\n/**\n * Maps over the entries of the `HashMap` using the specified partial function\n * and filters out `None` values.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filterMap: {\n  /**\n   * Maps over the entries of the `HashMap` using the specified partial function\n   * and filters out `None` values.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A, K, B>(f: (value: A, key: K) => Option<B>): (self: HashMap<K, A>) => HashMap<K, B>\n  /**\n   * Maps over the entries of the `HashMap` using the specified partial function\n   * and filters out `None` values.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <K, A, B>(self: HashMap<K, A>, f: (value: A, key: K) => Option<B>): HashMap<K, B>\n} = HM.filterMap\n\n/**\n * Returns the first element that satisfies the specified\n * predicate, or `None` if no such element exists.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirst: {\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <K, A, B extends A>(predicate: (a: NoInfer<A>, k: K) => a is B): (self: HashMap<K, A>) => Option<[K, B]>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <K, A>(predicate: (a: NoInfer<A>, k: K) => boolean): (self: HashMap<K, A>) => Option<[K, A]>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <K, A, B extends A>(self: HashMap<K, A>, predicate: (a: A, k: K) => a is B): Option<[K, B]>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <K, A>(self: HashMap<K, A>, predicate: (a: A, k: K) => boolean): Option<[K, A]>\n} = HM.findFirst\n"],"names":["HM","_keySet","TypeId","HashMapTypeId","isHashMap","empty","make","fromIterable","isEmpty","get","getHash","unsafeGet","has","hasHash","set","keys","keySet","values","entries","toEntries","self","Array","from","size","beginMutation","endMutation","mutate","modifyAt","modifyHash","modify","union","remove","removeMany","map","flatMap","forEach","reduce","filter","compact","filterMap","findFirst"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,OAAO,KAAKA,EAAE,MAAM,uBAAuB;AAC3C,OAAO,KAAKC,OAAO,MAAM,8BAA8B;;;AAKvD,MAAMC,MAAM,GAAkBF,EAAE,iNAACG,aAAuB;AA6EjD,MAAMC,SAAS,GAWlBJ,EAAE,iNAACI,SAAS;AAQT,MAAMC,KAAK,GAA8CL,EAAE,iNAACK,KAAK;AAQjE,MAAMC,IAAI,GAKbN,EAAE,iNAACM,IAAI;AAQJ,MAAMC,YAAY,GAAgEP,EAAE,iNAACO,YAAY;AAQjG,MAAMC,OAAO,GAA2CR,EAAE,iNAACQ,OAAO;AASlE,MAAMC,GAAG,GAiBZT,EAAE,iNAACS,GAAG;AAQH,MAAMC,OAAO,GAehBV,EAAE,iNAACU,OAAO;AASP,MAAMC,SAAS,GAiBlBX,EAAE,iNAACW,SAAS;AAQT,MAAMC,GAAG,GAeZZ,EAAE,iNAACY,GAAG;AASH,MAAMC,OAAO,GAiBhBb,EAAE,iNAACa,OAAO;AAQP,MAAMC,GAAG,GAeZd,EAAE,iNAACc,GAAG;AAQH,MAAMC,IAAI,GAAuDf,EAAE,iNAACe,IAAI;AAQxE,MAAMC,MAAM,GAA8Cf,OAAO,sNAACe,MAAM;AAQxE,MAAMC,MAAM,GAAuDjB,EAAE,iNAACiB,MAAM;AAQ5E,MAAMC,OAAO,GAA4DlB,EAAE,iNAACkB,OAAO;AAQnF,MAAMC,SAAS,IAAUC,IAAmB,GAAoBC,KAAK,CAACC,IAAI,CAACJ,OAAO,CAACE,IAAI,CAAC,CAAC;AAQzF,MAAMG,IAAI,GAA0CvB,EAAE,iNAACuB,IAAI;AAO3D,MAAMC,aAAa,GAAiDxB,EAAE,iNAACwB,aAAa;AAOpF,MAAMC,WAAW,GAAiDzB,EAAE,iNAACyB,WAAW;AAOhF,MAAMC,MAAM,GAaf1B,EAAE,iNAAC0B,MAAM;AAYN,MAAMC,QAAQ,GAuBjB3B,EAAE,iNAAC2B,QAAQ;AAcR,MAAMC,UAAU,GA2BnB5B,EAAE,iNAAC4B,UAAU;AAOV,MAAMC,MAAM,GAaf7B,EAAE,iNAAC6B,MAAM;AAON,MAAMC,KAAK,GAad9B,EAAE,iNAAC8B,KAAK;AAQL,MAAMC,MAAM,GAef/B,EAAE,iNAAC+B,MAAM;AAON,MAAMC,UAAU,GAanBhC,EAAE,iNAACgC,UAAU;AAQV,MAAMC,GAAG,GAeZjC,EAAE,iNAACiC,GAAG;AAUH,MAAMC,OAAO,GAmBhBlC,EAAE,iNAACkC,OAAO;AAQP,MAAMC,OAAO,GAehBnC,EAAE,iNAACmC,OAAO;AAQP,MAAMC,MAAM,GAefpC,EAAE,iNAACoC,MAAM;AAQN,MAAMC,MAAM,GA6BfrC,EAAE,iNAACqC,MAAM;AAQN,MAAMC,OAAO,GAAyDtC,EAAE,iNAACsC,OAAO;AAShF,MAAMC,SAAS,GAiBlBvC,EAAE,iNAACuC,SAAS;AAST,MAAMC,SAAS,GAiClBxC,EAAE,iNAACwC,SAAS","ignoreList":[0]}},
    {"offset": {"line": 6034, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6040, "column": 0}, "map": {"version":3,"file":"RuntimeFlagsPatch.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/RuntimeFlagsPatch.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport * as runtimeFlags from \"./internal/runtimeFlags.js\"\nimport * as internal from \"./internal/runtimeFlagsPatch.js\"\nimport type * as RuntimeFlags from \"./RuntimeFlags.js\"\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type RuntimeFlagsPatch = number & {\n  readonly RuntimeFlagsPatch: unique symbol\n}\n\n/**\n * The empty `RuntimeFlagsPatch`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: RuntimeFlagsPatch = internal.empty\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (active: number, enabled: number) => RuntimeFlagsPatch = internal.make\n\n/**\n * Creates a `RuntimeFlagsPatch` describing enabling the provided `RuntimeFlag`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const enable: (flag: RuntimeFlags.RuntimeFlag) => RuntimeFlagsPatch = internal.enable\n\n/**\n * Creates a `RuntimeFlagsPatch` describing disabling the provided `RuntimeFlag`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const disable: (flag: RuntimeFlags.RuntimeFlag) => RuntimeFlagsPatch = internal.disable\n\n/**\n * Returns `true` if the specified `RuntimeFlagsPatch` is empty.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isEmpty: (patch: RuntimeFlagsPatch) => boolean = internal.isEmpty\n\n/**\n * Returns `true` if the `RuntimeFlagsPatch` describes the specified\n * `RuntimeFlag` as active.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isActive: {\n  /**\n   * Returns `true` if the `RuntimeFlagsPatch` describes the specified\n   * `RuntimeFlag` as active.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  (flag: RuntimeFlagsPatch): (self: RuntimeFlagsPatch) => boolean\n  /**\n   * Returns `true` if the `RuntimeFlagsPatch` describes the specified\n   * `RuntimeFlag` as active.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  (self: RuntimeFlagsPatch, flag: RuntimeFlagsPatch): boolean\n} = internal.isActive\n\n/**\n * Returns `true` if the `RuntimeFlagsPatch` describes the specified\n * `RuntimeFlag` as enabled.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isEnabled: {\n  /**\n   * Returns `true` if the `RuntimeFlagsPatch` describes the specified\n   * `RuntimeFlag` as enabled.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  (flag: RuntimeFlags.RuntimeFlag): (self: RuntimeFlagsPatch) => boolean\n  /**\n   * Returns `true` if the `RuntimeFlagsPatch` describes the specified\n   * `RuntimeFlag` as enabled.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  (self: RuntimeFlagsPatch, flag: RuntimeFlags.RuntimeFlag): boolean\n} = internal.isEnabled\n\n/**\n * Returns `true` if the `RuntimeFlagsPatch` describes the specified\n * `RuntimeFlag` as disabled.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const isDisabled: {\n  /**\n   * Returns `true` if the `RuntimeFlagsPatch` describes the specified\n   * `RuntimeFlag` as disabled.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  (flag: RuntimeFlags.RuntimeFlag): (self: RuntimeFlagsPatch) => boolean\n  /**\n   * Returns `true` if the `RuntimeFlagsPatch` describes the specified\n   * `RuntimeFlag` as disabled.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  (self: RuntimeFlagsPatch, flag: RuntimeFlags.RuntimeFlag): boolean\n} = internal.isDisabled\n\n/**\n * Returns `true` if the `RuntimeFlagsPatch` includes the specified\n * `RuntimeFlag`, `false` otherwise.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const includes: {\n  /**\n   * Returns `true` if the `RuntimeFlagsPatch` includes the specified\n   * `RuntimeFlag`, `false` otherwise.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  (flag: RuntimeFlagsPatch): (self: RuntimeFlagsPatch) => boolean\n  /**\n   * Returns `true` if the `RuntimeFlagsPatch` includes the specified\n   * `RuntimeFlag`, `false` otherwise.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  (self: RuntimeFlagsPatch, flag: RuntimeFlagsPatch): boolean\n} = internal.isActive\n\n/**\n * Creates a `RuntimeFlagsPatch` describing the application of the `self` patch,\n * followed by `that` patch.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const andThen: {\n  /**\n   * Creates a `RuntimeFlagsPatch` describing the application of the `self` patch,\n   * followed by `that` patch.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (that: RuntimeFlagsPatch): (self: RuntimeFlagsPatch) => RuntimeFlagsPatch\n  /**\n   * Creates a `RuntimeFlagsPatch` describing the application of the `self` patch,\n   * followed by `that` patch.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: RuntimeFlagsPatch, that: RuntimeFlagsPatch): RuntimeFlagsPatch\n} = internal.andThen\n\n/**\n * Creates a `RuntimeFlagsPatch` describing application of both the `self` patch\n * and `that` patch.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const both: {\n  /**\n   * Creates a `RuntimeFlagsPatch` describing application of both the `self` patch\n   * and `that` patch.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (that: RuntimeFlagsPatch): (self: RuntimeFlagsPatch) => RuntimeFlagsPatch\n  /**\n   * Creates a `RuntimeFlagsPatch` describing application of both the `self` patch\n   * and `that` patch.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: RuntimeFlagsPatch, that: RuntimeFlagsPatch): RuntimeFlagsPatch\n} = internal.both\n\n/**\n * Creates a `RuntimeFlagsPatch` describing application of either the `self`\n * patch or `that` patch.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const either: {\n  /**\n   * Creates a `RuntimeFlagsPatch` describing application of either the `self`\n   * patch or `that` patch.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (that: RuntimeFlagsPatch): (self: RuntimeFlagsPatch) => RuntimeFlagsPatch\n  /**\n   * Creates a `RuntimeFlagsPatch` describing application of either the `self`\n   * patch or `that` patch.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: RuntimeFlagsPatch, that: RuntimeFlagsPatch): RuntimeFlagsPatch\n} = internal.either\n\n/**\n * Creates a `RuntimeFlagsPatch` which describes exclusion of the specified\n * `RuntimeFlag` from the set of `RuntimeFlags`.\n *\n * @category utils\n * @since 2.0.0\n */\nexport const exclude: {\n  /**\n   * Creates a `RuntimeFlagsPatch` which describes exclusion of the specified\n   * `RuntimeFlag` from the set of `RuntimeFlags`.\n   *\n   * @category utils\n   * @since 2.0.0\n   */\n  (flag: RuntimeFlags.RuntimeFlag): (self: RuntimeFlagsPatch) => RuntimeFlagsPatch\n  /**\n   * Creates a `RuntimeFlagsPatch` which describes exclusion of the specified\n   * `RuntimeFlag` from the set of `RuntimeFlags`.\n   *\n   * @category utils\n   * @since 2.0.0\n   */\n  (self: RuntimeFlagsPatch, flag: RuntimeFlags.RuntimeFlag): RuntimeFlagsPatch\n} = internal.exclude\n\n/**\n * Creates a `RuntimeFlagsPatch` which describes the inverse of the patch\n * specified by the provided `RuntimeFlagsPatch`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const inverse: (patch: RuntimeFlagsPatch) => RuntimeFlagsPatch = internal.inverse\n\n/**\n * Returns a `ReadonlySet<number>` containing the `RuntimeFlags` described as\n * enabled by the specified `RuntimeFlagsPatch`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const enabledSet: (self: RuntimeFlagsPatch) => ReadonlySet<RuntimeFlags.RuntimeFlag> = runtimeFlags.enabledSet\n\n/**\n * Returns a `ReadonlySet<number>` containing the `RuntimeFlags` described as\n * disabled by the specified `RuntimeFlagsPatch`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const disabledSet: (self: RuntimeFlagsPatch) => ReadonlySet<RuntimeFlags.RuntimeFlag> = runtimeFlags.disabledSet\n\n/**\n * Renders the provided `RuntimeFlagsPatch` to a string.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const render: (self: RuntimeFlagsPatch) => string = runtimeFlags.renderPatch\n"],"names":["runtimeFlags","internal","empty","make","enable","disable","isEmpty","isActive","isEnabled","isDisabled","includes","andThen","both","either","exclude","inverse","enabledSet","disabledSet","render","renderPatch"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;AAIA,OAAO,KAAKC,QAAQ,MAAM,iCAAiC;AAD3D,OAAO,KAAKD,YAAY,MAAM,4BAA4B;;;AAkBnD,MAAME,KAAK,GAAsBD,QAAQ,qNAACC,KAAK;AAM/C,MAAMC,IAAI,GAA2DF,QAAQ,qNAACE,IAAI;AAQlF,MAAMC,MAAM,GAA0DH,QAAQ,qNAACG,MAAM;AAQrF,MAAMC,OAAO,GAA0DJ,QAAQ,qNAACI,OAAO;AAQvF,MAAMC,OAAO,GAA0CL,QAAQ,qNAACK,OAAO;AASvE,MAAMC,QAAQ,GAiBjBN,QAAQ,qNAACM,QAAQ;AASd,MAAMC,SAAS,GAiBlBP,QAAQ,qNAACO,SAAS;AASf,MAAMC,UAAU,GAiBnBR,QAAQ,qNAACQ,UAAU;AAShB,MAAMC,QAAQ,GAiBjBT,QAAQ,qNAACM,QAAQ;AASd,MAAMI,OAAO,GAiBhBV,QAAQ,qNAACU,OAAO;AASb,MAAMC,IAAI,GAiBbX,QAAQ,qNAACW,IAAI;AASV,MAAMC,MAAM,GAiBfZ,QAAQ,qNAACY,MAAM;AASZ,MAAMC,OAAO,GAiBhBb,QAAQ,qNAACa,OAAO;AASb,MAAMC,OAAO,GAAoDd,QAAQ,qNAACc,OAAO;AASjF,MAAMC,UAAU,GAAuEhB,YAAY,4MAACgB,UAAU;AAS9G,MAAMC,WAAW,GAAuEjB,YAAY,4MAACiB,WAAW;AAQhH,MAAMC,MAAM,GAAwClB,YAAY,4MAACmB,WAAW","ignoreList":[0]}},
    {"offset": {"line": 6082, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6088, "column": 0}, "map": {"version":3,"file":"List.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/List.ts"],"sourcesContent":["/**\n * A data type for immutable linked lists representing ordered collections of elements of type `A`.\n *\n * This data type is optimal for last-in-first-out (LIFO), stack-like access patterns. If you need another access pattern, for example, random access or FIFO, consider using a collection more suited to this than `List`.\n *\n * **Performance**\n *\n * - Time: `List` has `O(1)` prepend and head/tail access. Most other operations are `O(n)` on the number of elements in the list. This includes the index-based lookup of elements, `length`, `append` and `reverse`.\n * - Space: `List` implements structural sharing of the tail list. This means that many operations are either zero- or constant-memory cost.\n *\n * @since 2.0.0\n */\n\n/**\n * This file is ported from\n *\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n */\nimport * as Arr from \"./Array.js\"\nimport * as Chunk from \"./Chunk.js\"\nimport * as Either from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport * as Equivalence from \"./Equivalence.js\"\nimport { dual, identity, unsafeCoerce } from \"./Function.js\"\nimport * as Hash from \"./Hash.js\"\nimport { format, type Inspectable, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport type { nonEmpty, NonEmptyIterable } from \"./NonEmptyIterable.js\"\nimport * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\nimport { hasProperty, type Predicate, type Refinement } from \"./Predicate.js\"\nimport type { NoInfer } from \"./Types.js\"\n\n/**\n * Represents an immutable linked list of elements of type `A`.\n *\n * A `List` is optimal for last-in-first-out (LIFO), stack-like access patterns.\n * If you need another access pattern, for example, random access or FIFO,\n * consider using a collection more suited for that other than `List`.\n *\n * @since 2.0.0\n * @category models\n */\nexport type List<A> = Cons<A> | Nil<A>\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport const TypeId: unique symbol = Symbol.for(\"effect/List\")\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Nil<out A> extends Iterable<A>, Equal.Equal, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n  readonly _tag: \"Nil\"\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Cons<out A> extends NonEmptyIterable<A>, Equal.Equal, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n  readonly _tag: \"Cons\"\n  readonly head: A\n  readonly tail: List<A>\n}\n\n/**\n * Converts the specified `List` to an `Array`.\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const toArray = <A>(self: List<A>): Array<A> => Arr.fromIterable(self)\n\n/**\n * @category equivalence\n * @since 2.0.0\n */\nexport const getEquivalence = <A>(isEquivalent: Equivalence.Equivalence<A>): Equivalence.Equivalence<List<A>> =>\n  Equivalence.mapInput(Arr.getEquivalence(isEquivalent), toArray<A>)\n\nconst _equivalence = getEquivalence(Equal.equals)\n\nconst ConsProto: Omit<Cons<unknown>, \"head\" | \"tail\" | typeof nonEmpty> = {\n  [TypeId]: TypeId,\n  _tag: \"Cons\",\n  toString(this: Cons<unknown>) {\n    return format(this.toJSON())\n  },\n  toJSON(this: Cons<unknown>) {\n    return {\n      _id: \"List\",\n      _tag: \"Cons\",\n      values: toArray(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  [Equal.symbol](this: Cons<unknown>, that: unknown): boolean {\n    return isList(that) &&\n      this._tag === that._tag &&\n      _equivalence(this, that)\n  },\n  [Hash.symbol](this: Cons<unknown>): number {\n    return Hash.cached(this, Hash.array(toArray(this)))\n  },\n  [Symbol.iterator](this: Cons<unknown>): Iterator<unknown> {\n    let done = false\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let self: List<unknown> = this\n    return {\n      next() {\n        if (done) {\n          return this.return!()\n        }\n        if (self._tag === \"Nil\") {\n          done = true\n          return this.return!()\n        }\n        const value: unknown = self.head\n        self = self.tail\n        return { done, value }\n      },\n      return(value?: unknown) {\n        if (!done) {\n          done = true\n        }\n        return { done: true, value }\n      }\n    }\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\ninterface MutableCons<A> extends Cons<A> {\n  head: A\n  tail: List<A>\n}\n\nconst makeCons = <A>(head: A, tail: List<A>): MutableCons<A> => {\n  const cons = Object.create(ConsProto)\n  cons.head = head\n  cons.tail = tail\n  return cons\n}\n\nconst NilHash = Hash.string(\"Nil\")\nconst NilProto: Nil<unknown> = {\n  [TypeId]: TypeId,\n  _tag: \"Nil\",\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"List\",\n      _tag: \"Nil\"\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  [Hash.symbol](): number {\n    return NilHash\n  },\n  [Equal.symbol](that: unknown): boolean {\n    return isList(that) && this._tag === that._tag\n  },\n  [Symbol.iterator](): Iterator<unknown> {\n    return {\n      next() {\n        return { done: true, value: undefined }\n      }\n    }\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n} as const\n\nconst _Nil = Object.create(NilProto) as Nil<never>\n\n/**\n * Returns `true` if the specified value is a `List`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isList: {\n  /**\n   * Returns `true` if the specified value is a `List`, `false` otherwise.\n   *\n   * @since 2.0.0\n   * @category refinements\n   */\n  <A>(u: Iterable<A>): u is List<A>\n  /**\n   * Returns `true` if the specified value is a `List`, `false` otherwise.\n   *\n   * @since 2.0.0\n   * @category refinements\n   */\n  (u: unknown): u is List<unknown>\n} = (u: unknown): u is List<unknown> => hasProperty(u, TypeId)\n\n/**\n * Returns `true` if the specified value is a `List.Nil<A>`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isNil = <A>(self: List<A>): self is Nil<A> => self._tag === \"Nil\"\n\n/**\n * Returns `true` if the specified value is a `List.Cons<A>`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isCons = <A>(self: List<A>): self is Cons<A> => self._tag === \"Cons\"\n\n/**\n * Returns the number of elements contained in the specified `List`\n *\n * @since 2.0.0\n * @category getters\n */\nexport const size = <A>(self: List<A>): number => {\n  let these = self\n  let len = 0\n  while (!isNil(these)) {\n    len += 1\n    these = these.tail\n  }\n  return len\n}\n\n/**\n * Constructs a new empty `List<A>`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const nil = <A = never>(): List<A> => _Nil\n\n/**\n * Constructs a new `List.Cons<A>` from the specified `head` and `tail` values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const cons = <A>(head: A, tail: List<A>): Cons<A> => makeCons(head, tail)\n\n/**\n * Constructs a new empty `List<A>`.\n *\n * Alias of {@link nil}.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty = nil\n\n/**\n * Constructs a new `List<A>` from the specified value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const of = <A>(value: A): Cons<A> => makeCons(value, _Nil)\n\n/**\n * Creates a new `List` from an iterable collection of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable = <A>(prefix: Iterable<A>): List<A> => {\n  const iterator = prefix[Symbol.iterator]()\n  let next: IteratorResult<A>\n  if ((next = iterator.next()) && !next.done) {\n    const result = makeCons(next.value, _Nil)\n    let curr = result\n    while ((next = iterator.next()) && !next.done) {\n      const temp = makeCons(next.value, _Nil)\n      curr.tail = temp\n      curr = temp\n    }\n    return result\n  } else {\n    return _Nil\n  }\n}\n\n/**\n * Constructs a new `List<A>` from the specified values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make = <Elements extends readonly [any, ...Array<any>]>(\n  ...elements: Elements\n): Cons<Elements[number]> => fromIterable(elements) as any\n\n/**\n * Appends the specified element to the end of the `List`, creating a new `Cons`.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const append: {\n  /**\n   * Appends the specified element to the end of the `List`, creating a new `Cons`.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <B>(element: B): <A>(self: List<A>) => Cons<A | B>\n  /**\n   * Appends the specified element to the end of the `List`, creating a new `Cons`.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: List<A>, element: B): Cons<A | B>\n} = dual(2, <A, B>(self: List<A>, element: B): Cons<A | B> => appendAll(self, of(element)))\n\n/**\n * Concatenates two lists, combining their elements.\n * If either list is non-empty, the result is also a non-empty list.\n *\n * @example\n * import { List } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   List.make(1, 2).pipe(List.appendAll(List.make(\"a\", \"b\")), List.toArray),\n *   [1, 2, \"a\", \"b\"]\n * )\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const appendAll: {\n  /**\n   * Concatenates two lists, combining their elements.\n   * If either list is non-empty, the result is also a non-empty list.\n   *\n   * @example\n   * import { List } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   List.make(1, 2).pipe(List.appendAll(List.make(\"a\", \"b\")), List.toArray),\n   *   [1, 2, \"a\", \"b\"]\n   * )\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <S extends List<any>, T extends List<any>>(that: T): (self: S) => List.OrNonEmpty<S, T, List.Infer<S> | List.Infer<T>>\n  /**\n   * Concatenates two lists, combining their elements.\n   * If either list is non-empty, the result is also a non-empty list.\n   *\n   * @example\n   * import { List } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   List.make(1, 2).pipe(List.appendAll(List.make(\"a\", \"b\")), List.toArray),\n   *   [1, 2, \"a\", \"b\"]\n   * )\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: List<A>, that: Cons<B>): Cons<A | B>\n  /**\n   * Concatenates two lists, combining their elements.\n   * If either list is non-empty, the result is also a non-empty list.\n   *\n   * @example\n   * import { List } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   List.make(1, 2).pipe(List.appendAll(List.make(\"a\", \"b\")), List.toArray),\n   *   [1, 2, \"a\", \"b\"]\n   * )\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Cons<A>, that: List<B>): Cons<A | B>\n  /**\n   * Concatenates two lists, combining their elements.\n   * If either list is non-empty, the result is also a non-empty list.\n   *\n   * @example\n   * import { List } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   List.make(1, 2).pipe(List.appendAll(List.make(\"a\", \"b\")), List.toArray),\n   *   [1, 2, \"a\", \"b\"]\n   * )\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: List<A>, that: List<B>): List<A | B>\n} = dual(2, <A, B>(self: List<A>, that: List<B>): List<A | B> => prependAll(that, self))\n\n/**\n * Prepends the specified element to the beginning of the list.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prepend: {\n  /**\n   * Prepends the specified element to the beginning of the list.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <B>(element: B): <A>(self: List<A>) => Cons<A | B>\n  /**\n   * Prepends the specified element to the beginning of the list.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: List<A>, element: B): Cons<A | B>\n} = dual(2, <A, B>(self: List<A>, element: B): Cons<A | B> =>\n  cons<\n    /**\n     * Prepends the specified element to the beginning of the list.\n     *\n     * @category concatenating\n     * @since 2.0.0\n     */\n    A | B\n  >(element, self))\n\n/**\n * Prepends the specified prefix list to the beginning of the specified list.\n * If either list is non-empty, the result is also a non-empty list.\n *\n * @example\n * import { List } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   List.make(1, 2).pipe(List.prependAll(List.make(\"a\", \"b\")), List.toArray),\n *   [\"a\", \"b\", 1, 2]\n * )\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prependAll: {\n  /**\n   * Prepends the specified prefix list to the beginning of the specified list.\n   * If either list is non-empty, the result is also a non-empty list.\n   *\n   * @example\n   * import { List } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   List.make(1, 2).pipe(List.prependAll(List.make(\"a\", \"b\")), List.toArray),\n   *   [\"a\", \"b\", 1, 2]\n   * )\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <S extends List<any>, T extends List<any>>(that: T): (self: S) => List.OrNonEmpty<S, T, List.Infer<S> | List.Infer<T>>\n  /**\n   * Prepends the specified prefix list to the beginning of the specified list.\n   * If either list is non-empty, the result is also a non-empty list.\n   *\n   * @example\n   * import { List } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   List.make(1, 2).pipe(List.prependAll(List.make(\"a\", \"b\")), List.toArray),\n   *   [\"a\", \"b\", 1, 2]\n   * )\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: List<A>, that: Cons<B>): Cons<A | B>\n  /**\n   * Prepends the specified prefix list to the beginning of the specified list.\n   * If either list is non-empty, the result is also a non-empty list.\n   *\n   * @example\n   * import { List } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   List.make(1, 2).pipe(List.prependAll(List.make(\"a\", \"b\")), List.toArray),\n   *   [\"a\", \"b\", 1, 2]\n   * )\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Cons<A>, that: List<B>): Cons<A | B>\n  /**\n   * Prepends the specified prefix list to the beginning of the specified list.\n   * If either list is non-empty, the result is also a non-empty list.\n   *\n   * @example\n   * import { List } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   List.make(1, 2).pipe(List.prependAll(List.make(\"a\", \"b\")), List.toArray),\n   *   [\"a\", \"b\", 1, 2]\n   * )\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: List<A>, that: List<B>): List<A | B>\n} = dual(2, <A, B>(self: List<A>, prefix: List<B>): List<A | B> => {\n  if (isNil(self)) {\n    return prefix\n  } else if (isNil(prefix)) {\n    return self\n  } else {\n    const result = makeCons<\n      /**\n       * Prepends the specified prefix list to the beginning of the specified list.\n       * If either list is non-empty, the result is also a non-empty list.\n       *\n       * @example\n       * import { List } from \"effect\"\n       *\n       * assert.deepStrictEqual(\n       *   List.make(1, 2).pipe(List.prependAll(List.make(\"a\", \"b\")), List.toArray),\n       *   [\"a\", \"b\", 1, 2]\n       * )\n       *\n       * @category concatenating\n       * @since 2.0.0\n       */\n      A | B\n    >(prefix.head, self)\n    let curr = result\n    let that = prefix.tail\n    while (!isNil(that)) {\n      const temp = makeCons<\n        /**\n         * Prepends the specified prefix list to the beginning of the specified list.\n         * If either list is non-empty, the result is also a non-empty list.\n         *\n         * @example\n         * import { List } from \"effect\"\n         *\n         * assert.deepStrictEqual(\n         *   List.make(1, 2).pipe(List.prependAll(List.make(\"a\", \"b\")), List.toArray),\n         *   [\"a\", \"b\", 1, 2]\n         * )\n         *\n         * @category concatenating\n         * @since 2.0.0\n         */\n        A | B\n      >(that.head, self)\n      curr.tail = temp\n      curr = temp\n      that = that.tail\n    }\n    return result\n  }\n})\n\n/**\n * Prepends the specified prefix list (in reverse order) to the beginning of the\n * specified list.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prependAllReversed: {\n  /**\n   * Prepends the specified prefix list (in reverse order) to the beginning of the\n   * specified list.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <B>(prefix: List<B>): <A>(self: List<A>) => List<A | B>\n  /**\n   * Prepends the specified prefix list (in reverse order) to the beginning of the\n   * specified list.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: List<A>, prefix: List<B>): List<A | B>\n} = dual(2, <A, B>(self: List<A>, prefix: List<B>): List<A | B> => {\n  let out: List<A | B> = self\n  let pres = prefix\n  while (isCons(pres)) {\n    out = makeCons(pres.head, out)\n    pres = pres.tail\n  }\n  return out\n})\n\n/**\n * Drops the first `n` elements from the specified list.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const drop: {\n  /**\n   * Drops the first `n` elements from the specified list.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  (n: number): <A>(self: List<A>) => List<A>\n  /**\n   * Drops the first `n` elements from the specified list.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A>(self: List<A>, n: number): List<A>\n} = dual(2, <A>(self: List<A>, n: number): List<A> => {\n  if (n <= 0) {\n    return self\n  }\n  if (n >= size(self)) {\n    return _Nil\n  }\n  let these = self\n  let i = 0\n  while (!isNil(these) && i < n) {\n    these = these.tail\n    i += 1\n  }\n  return these\n})\n\n/**\n * Check if a predicate holds true for every `List` element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const every: {\n  /**\n   * Check if a predicate holds true for every `List` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: List<A>) => self is List<B>\n  /**\n   * Check if a predicate holds true for every `List` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(predicate: Predicate<A>): (self: List<A>) => boolean\n  /**\n   * Check if a predicate holds true for every `List` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B extends A>(self: List<A>, refinement: Refinement<A, B>): self is List<B>\n  /**\n   * Check if a predicate holds true for every `List` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: List<A>, predicate: Predicate<A>): boolean\n} = dual(2, <A, B extends A>(self: List<A>, refinement: Refinement<A, B>): self is List<B> => {\n  for (const a of self) {\n    if (!refinement(a)) {\n      return false\n    }\n  }\n  return true\n})\n\n/**\n * Check if a predicate holds true for some `List` element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const some: {\n  /**\n   * Check if a predicate holds true for some `List` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: List<A>) => self is Cons<A>\n  /**\n   * Check if a predicate holds true for some `List` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: List<A>, predicate: Predicate<A>): self is Cons<A>\n} = dual(2, <A>(self: List<A>, predicate: Predicate<A>): self is Cons<A> => {\n  let these = self\n  while (!isNil(these)) {\n    if (predicate(these.head)) {\n      return true\n    }\n    these = these.tail\n  }\n  return false\n})\n\n/**\n * Filters a list using the specified predicate.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const filter: {\n  /**\n   * Filters a list using the specified predicate.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: List<A>) => List<B>\n  /**\n   * Filters a list using the specified predicate.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: List<A>) => List<A>\n  /**\n   * Filters a list using the specified predicate.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B extends A>(self: List<A>, refinement: Refinement<A, B>): List<B>\n  /**\n   * Filters a list using the specified predicate.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A>(self: List<A>, predicate: Predicate<A>): List<A>\n} = dual(2, <A>(self: List<A>, predicate: Predicate<A>): List<A> => noneIn(self, predicate, false))\n\n// everything seen so far is not included\nconst noneIn = <A>(\n  self: List<A>,\n  predicate: Predicate<A>,\n  isFlipped: boolean\n): List<A> => {\n  while (true) {\n    if (isNil(self)) {\n      return _Nil\n    } else {\n      if (predicate(self.head) !== isFlipped) {\n        return allIn(self, self.tail, predicate, isFlipped)\n      } else {\n        self = self.tail\n      }\n    }\n  }\n}\n\n// everything from 'start' is included, if everything from this point is in we can return the origin\n// start otherwise if we discover an element that is out we must create a new partial list.\nconst allIn = <A>(\n  start: List<A>,\n  remaining: List<A>,\n  predicate: Predicate<A>,\n  isFlipped: boolean\n): List<A> => {\n  while (true) {\n    if (isNil(remaining)) {\n      return start\n    } else {\n      if (predicate(remaining.head) !== isFlipped) {\n        remaining = remaining.tail\n      } else {\n        return partialFill(start, remaining, predicate, isFlipped)\n      }\n    }\n  }\n}\n\n// we have seen elements that should be included then one that should be excluded, start building\nconst partialFill = <A>(\n  origStart: List<A>,\n  firstMiss: List<A>,\n  predicate: Predicate<A>,\n  isFlipped: boolean\n): List<A> => {\n  const newHead = makeCons<A>(unsafeHead(origStart)!, _Nil)\n  let toProcess = unsafeTail(origStart)! as Cons<A>\n  let currentLast = newHead\n\n  // we know that all elements are :: until at least firstMiss.tail\n  while (!(toProcess === firstMiss)) {\n    const newElem = makeCons(unsafeHead(toProcess)!, _Nil)\n    currentLast.tail = newElem\n    currentLast = unsafeCoerce(newElem)\n    toProcess = unsafeCoerce(toProcess.tail)\n  }\n\n  // at this point newHead points to a list which is a duplicate of all the 'in' elements up to the first miss.\n  // currentLast is the last element in that list.\n\n  // now we are going to try and share as much of the tail as we can, only moving elements across when we have to.\n  let next = firstMiss.tail\n  let nextToCopy: Cons<A> = unsafeCoerce(next) // the next element we would need to copy to our list if we cant share.\n  while (!isNil(next)) {\n    // generally recommended is next.isNonEmpty but this incurs an extra method call.\n    const head = unsafeHead(next)!\n    if (predicate(head) !== isFlipped) {\n      next = next.tail\n    } else {\n      // its not a match - do we have outstanding elements?\n      while (!(nextToCopy === next)) {\n        const newElem = makeCons(unsafeHead(nextToCopy)!, _Nil)\n        currentLast.tail = newElem\n        currentLast = newElem\n        nextToCopy = unsafeCoerce(nextToCopy.tail)\n      }\n      nextToCopy = unsafeCoerce(next.tail)\n      next = next.tail\n    }\n  }\n\n  // we have remaining elements - they are unchanged attach them to the end\n  if (!isNil(nextToCopy)) {\n    currentLast.tail = nextToCopy\n  }\n  return newHead\n}\n\n/**\n * Filters and maps a list using the specified partial function. The resulting\n * list may be smaller than the input list due to the possibility of the partial\n * function not being defined for some elements.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const filterMap: {\n  /**\n   * Filters and maps a list using the specified partial function. The resulting\n   * list may be smaller than the input list due to the possibility of the partial\n   * function not being defined for some elements.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B>(f: (a: A) => Option.Option<B>): (self: List<A>) => List<B>\n  /**\n   * Filters and maps a list using the specified partial function. The resulting\n   * list may be smaller than the input list due to the possibility of the partial\n   * function not being defined for some elements.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B>(self: List<A>, f: (a: A) => Option.Option<B>): List<B>\n} = dual(2, <A, B>(self: List<A>, f: (a: A) => Option.Option<B>): List<B> => {\n  const bs: Array<B> = []\n  for (const a of self) {\n    const oa = f(a)\n    if (Option.isSome(oa)) {\n      bs.push(oa.value)\n    }\n  }\n  return fromIterable(bs)\n})\n\n/**\n * Removes all `None` values from the specified list.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const compact = <A>(self: List<Option.Option<A>>): List<A> => filterMap(self, identity)\n\n/**\n * Returns the first element that satisfies the specified\n * predicate, or `None` if no such element exists.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirst: {\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: List<A>) => Option.Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: List<A>) => Option.Option<A>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: List<A>, refinement: Refinement<A, B>): Option.Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: List<A>, predicate: Predicate<A>): Option.Option<A>\n} = dual(2, <A>(self: List<A>, predicate: Predicate<A>): Option.Option<A> => {\n  let these = self\n  while (!isNil(these)) {\n    if (predicate(these.head)) {\n      return Option.some(these.head)\n    }\n    these = these.tail\n  }\n  return Option.none()\n})\n\n/**\n * Applies a function to each element in a list and returns a new list containing the concatenated mapped elements.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  /**\n   * Applies a function to each element in a list and returns a new list containing the concatenated mapped elements.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <S extends List<any>, T extends List<any>>(\n    f: (a: List.Infer<S>, i: number) => T\n  ): (self: S) => List.AndNonEmpty<S, T, List.Infer<T>>\n  /**\n   * Applies a function to each element in a list and returns a new list containing the concatenated mapped elements.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, B>(self: Cons<A>, f: (a: A, i: number) => Cons<B>): Cons<B>\n  /**\n   * Applies a function to each element in a list and returns a new list containing the concatenated mapped elements.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, B>(self: List<A>, f: (a: A, i: number) => List<B>): List<B>\n} = dual(2, <A, B>(self: List<A>, f: (a: A) => List<B>): List<B> => {\n  let rest = self\n  let head: MutableCons<B> | undefined = undefined\n  let tail: MutableCons<B> | undefined = undefined\n  while (!isNil(rest)) {\n    let bs = f(rest.head)\n    while (!isNil(bs)) {\n      const next = makeCons(bs.head, _Nil)\n      if (tail === undefined) {\n        head = next\n      } else {\n        tail.tail = next\n      }\n      tail = next\n      bs = bs.tail\n    }\n    rest = rest.tail\n  }\n  if (head === undefined) {\n    return _Nil\n  }\n  return head\n})\n\n/**\n * Applies the specified function to each element of the `List`.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const forEach: {\n  /**\n   * Applies the specified function to each element of the `List`.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B>(f: (a: A) => B): (self: List<A>) => void\n  /**\n   * Applies the specified function to each element of the `List`.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B>(self: List<A>, f: (a: A) => B): void\n} = dual(2, <A, B>(self: List<A>, f: (a: A) => B): void => {\n  let these = self\n  while (!isNil(these)) {\n    f(these.head)\n    these = these.tail\n  }\n})\n\n/**\n * Returns the first element of the specified list, or `None` if the list is\n * empty.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const head = <A>(self: List<A>): Option.Option<A> => isNil(self) ? Option.none() : Option.some(self.head)\n\n/**\n * Returns the last element of the specified list, or `None` if the list is\n * empty.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const last = <A>(self: List<A>): Option.Option<A> => isNil(self) ? Option.none() : Option.some(unsafeLast(self)!)\n\n/**\n * @since 2.0.0\n */\nexport declare namespace List {\n  /**\n   * @since 2.0.0\n   */\n  export type Infer<S extends List<any>> = S extends List<infer A> ? A : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type With<S extends List<any>, A> = S extends Cons<any> ? Cons<A> : List<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type OrNonEmpty<S extends List<any>, T extends List<any>, A> = S extends Cons<any> ? Cons<A>\n    : T extends Cons<any> ? Cons<A>\n    : List<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type AndNonEmpty<S extends List<any>, T extends List<any>, A> = S extends Cons<any> ?\n    T extends Cons<any> ? Cons<A>\n    : List<A> :\n    List<A>\n}\n\n/**\n * Applies the specified mapping function to each element of the list.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  /**\n   * Applies the specified mapping function to each element of the list.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <S extends List<any>, B>(f: (a: List.Infer<S>, i: number) => B): (self: S) => List.With<S, B>\n  /**\n   * Applies the specified mapping function to each element of the list.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <S extends List<any>, B>(self: S, f: (a: List.Infer<S>, i: number) => B): List.With<S, B>\n} = dual(2, <A, B>(self: List<A>, f: (a: A, i: number) => B): List<B> => {\n  if (isNil(self)) {\n    return self as unknown as List<B>\n  } else {\n    let i = 0\n    const head = makeCons(f(self.head, i++), _Nil)\n    let nextHead = head\n    let rest = self.tail\n    while (!isNil(rest)) {\n      const next = makeCons(f(rest.head, i++), _Nil)\n      nextHead.tail = next\n      nextHead = next\n      rest = rest.tail\n    }\n    return head\n  }\n})\n\n/**\n * Partition a list into two lists, where the first list contains all elements\n * that did not satisfy the specified predicate, and the second list contains\n * all elements that did satisfy the specified predicate.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const partition: {\n  /**\n   * Partition a list into two lists, where the first list contains all elements\n   * that did not satisfy the specified predicate, and the second list contains\n   * all elements that did satisfy the specified predicate.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): (self: List<A>) => [excluded: List<Exclude<A, B>>, satisfying: List<B>]\n  /**\n   * Partition a list into two lists, where the first list contains all elements\n   * that did not satisfy the specified predicate, and the second list contains\n   * all elements that did satisfy the specified predicate.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: List<A>) => [excluded: List<A>, satisfying: List<A>]\n  /**\n   * Partition a list into two lists, where the first list contains all elements\n   * that did not satisfy the specified predicate, and the second list contains\n   * all elements that did satisfy the specified predicate.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B extends A>(self: List<A>, refinement: Refinement<A, B>): [excluded: List<Exclude<A, B>>, satisfying: List<B>]\n  /**\n   * Partition a list into two lists, where the first list contains all elements\n   * that did not satisfy the specified predicate, and the second list contains\n   * all elements that did satisfy the specified predicate.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A>(self: List<A>, predicate: Predicate<A>): [excluded: List<A>, satisfying: List<A>]\n} = dual(2, <A>(self: List<A>, predicate: Predicate<A>): [excluded: List<A>, satisfying: List<A>] => {\n  const left: Array<A> = []\n  const right: Array<A> = []\n  for (const a of self) {\n    if (predicate(a)) {\n      right.push(a)\n    } else {\n      left.push(a)\n    }\n  }\n  return [fromIterable(left), fromIterable(right)]\n})\n\n/**\n * Partition a list into two lists, where the first list contains all elements\n * for which the specified function returned a `Left`, and the second list\n * contains all elements for which the specified function returned a `Right`.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const partitionMap: {\n  /**\n   * Partition a list into two lists, where the first list contains all elements\n   * for which the specified function returned a `Left`, and the second list\n   * contains all elements for which the specified function returned a `Right`.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B, C>(f: (a: A) => Either.Either<C, B>): (self: List<A>) => [left: List<B>, right: List<C>]\n  /**\n   * Partition a list into two lists, where the first list contains all elements\n   * for which the specified function returned a `Left`, and the second list\n   * contains all elements for which the specified function returned a `Right`.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B, C>(self: List<A>, f: (a: A) => Either.Either<C, B>): [left: List<B>, right: List<C>]\n} = dual(2, <A, B, C>(self: List<A>, f: (a: A) => Either.Either<C, B>): [left: List<B>, right: List<C>] => {\n  const left: Array<B> = []\n  const right: Array<C> = []\n  for (const a of self) {\n    const e = f(a)\n    if (Either.isLeft(e)) {\n      left.push(e.left)\n    } else {\n      right.push(e.right)\n    }\n  }\n  return [fromIterable(left), fromIterable(right)]\n})\n\n/**\n * Folds over the elements of the list using the specified function, using the\n * specified initial value.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduce: {\n  /**\n   * Folds over the elements of the list using the specified function, using the\n   * specified initial value.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <Z, A>(zero: Z, f: (b: Z, a: A) => Z): (self: List<A>) => Z\n  /**\n   * Folds over the elements of the list using the specified function, using the\n   * specified initial value.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <A, Z>(self: List<A>, zero: Z, f: (b: Z, a: A) => Z): Z\n} = dual(3, <A, Z>(self: List<A>, zero: Z, f: (b: Z, a: A) => Z): Z => {\n  let acc = zero\n  let these = self\n  while (!isNil(these)) {\n    acc = f(acc, these.head)\n    these = these.tail\n  }\n  return acc\n})\n\n/**\n * Folds over the elements of the list using the specified function, beginning\n * with the last element of the list, using the specified initial value.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduceRight: {\n  /**\n   * Folds over the elements of the list using the specified function, beginning\n   * with the last element of the list, using the specified initial value.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <Z, A>(zero: Z, f: (accumulator: Z, value: A) => Z): (self: List<A>) => Z\n  /**\n   * Folds over the elements of the list using the specified function, beginning\n   * with the last element of the list, using the specified initial value.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <Z, A>(self: List<A>, zero: Z, f: (accumulator: Z, value: A) => Z): Z\n} = dual(3, <Z, A>(self: List<A>, zero: Z, f: (accumulator: Z, value: A) => Z): Z => {\n  let acc = zero\n  let these = reverse(self)\n  while (!isNil(these)) {\n    acc = f(acc, these.head)\n    these = these.tail\n  }\n  return acc\n})\n\n/**\n * Returns a new list with the elements of the specified list in reverse order.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const reverse = <A>(self: List<A>): List<A> => {\n  let result = empty<A>()\n  let these = self\n  while (!isNil(these)) {\n    result = prepend(result, these.head)\n    these = these.tail\n  }\n  return result\n}\n\n/**\n * Splits the specified list into two lists at the specified index.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const splitAt: {\n  /**\n   * Splits the specified list into two lists at the specified index.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  (n: number): <A>(self: List<A>) => [beforeIndex: List<A>, fromIndex: List<A>]\n  /**\n   * Splits the specified list into two lists at the specified index.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A>(self: List<A>, n: number): [beforeIndex: List<A>, fromIndex: List<A>]\n} = dual(2, <A>(self: List<A>, n: number): [List<A>, List<A>] => [take(self, n), drop(self, n)])\n\n/**\n * Returns the tail of the specified list, or `None` if the list is empty.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const tail = <A>(self: List<A>): Option.Option<List<A>> => isNil(self) ? Option.none() : Option.some(self.tail)\n\n/**\n * Takes the specified number of elements from the beginning of the specified\n * list.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const take: {\n  /**\n   * Takes the specified number of elements from the beginning of the specified\n   * list.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  (n: number): <A>(self: List<A>) => List<A>\n  /**\n   * Takes the specified number of elements from the beginning of the specified\n   * list.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A>(self: List<A>, n: number): List<A>\n} = dual(2, <A>(self: List<A>, n: number): List<A> => {\n  if (n <= 0) {\n    return _Nil\n  }\n  if (n >= size(self)) {\n    return self\n  }\n  let these = make(unsafeHead(self))\n  let current = unsafeTail(self)!\n  for (let i = 1; i < n; i++) {\n    these = makeCons(unsafeHead(current), these)\n    current = unsafeTail(current!)\n  }\n  return reverse(these)\n})\n\n/**\n * Converts the specified `List` to a `Chunk`.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const toChunk = <A>(self: List<A>): Chunk.Chunk<A> => Chunk.fromIterable(self)\n\nconst getExpectedListToBeNonEmptyErrorMessage = \"Expected List to be non-empty\"\n\n/**\n * Unsafely returns the first element of the specified `List`.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeHead = <A>(self: List<A>): A => {\n  if (isNil(self)) {\n    throw new Error(getExpectedListToBeNonEmptyErrorMessage)\n  }\n  return self.head\n}\n\n/**\n * Unsafely returns the last element of the specified `List`.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeLast = <A>(self: List<A>): A => {\n  if (isNil(self)) {\n    throw new Error(getExpectedListToBeNonEmptyErrorMessage)\n  }\n  let these = self\n  let scout = self.tail\n  while (!isNil(scout)) {\n    these = scout\n    scout = scout.tail\n  }\n  return these.head\n}\n\n/**\n * Unsafely returns the tail of the specified `List`.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeTail = <A>(self: List<A>): List<A> => {\n  if (isNil(self)) {\n    throw new Error(getExpectedListToBeNonEmptyErrorMessage)\n  }\n  return self.tail\n}\n"],"names":["Arr","Chunk","Either","Equal","Equivalence","dual","identity","unsafeCoerce","Hash","format","NodeInspectSymbol","toJSON","Option","pipeArguments","hasProperty","TypeId","Symbol","for","toArray","self","fromIterable","getEquivalence","isEquivalent","mapInput","_equivalence","equals","ConsProto","_tag","toString","_id","values","map","symbol","that","isList","cached","array","iterator","done","next","return","value","head","tail","pipe","arguments","makeCons","cons","Object","create","NilHash","string","NilProto","undefined","_Nil","u","isNil","isCons","size","these","len","nil","empty","of","prefix","result","curr","temp","make","elements","append","element","appendAll","prependAll","prepend","prependAllReversed","out","pres","drop","n","i","every","refinement","a","some","predicate","filter","noneIn","isFlipped","allIn","start","remaining","partialFill","origStart","firstMiss","newHead","unsafeHead","toProcess","unsafeTail","currentLast","newElem","nextToCopy","filterMap","f","bs","oa","isSome","push","compact","findFirst","none","flatMap","rest","forEach","last","unsafeLast","nextHead","partition","left","right","partitionMap","e","isLeft","reduce","zero","acc","reduceRight","reverse","splitAt","take","current","toChunk","getExpectedListToBeNonEmptyErrorMessage","Error","scout"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 6618, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6624, "column": 0}, "map": {"version":3,"file":"Duration.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Duration.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport * as Equal from \"./Equal.js\"\nimport type * as equivalence from \"./Equivalence.js\"\nimport { dual } from \"./Function.js\"\nimport * as Hash from \"./Hash.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport { NodeInspectSymbol } from \"./Inspectable.js\"\nimport * as Option from \"./Option.js\"\nimport * as order from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\nimport { hasProperty, isBigInt, isNumber, isString } from \"./Predicate.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/Duration\")\n\nconst bigint0 = BigInt(0)\nconst bigint24 = BigInt(24)\nconst bigint60 = BigInt(60)\nconst bigint1e3 = BigInt(1_000)\nconst bigint1e6 = BigInt(1_000_000)\nconst bigint1e9 = BigInt(1_000_000_000)\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Duration extends Equal.Equal, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n  readonly value: DurationValue\n}\n/**\n * @since 2.0.0\n * @category models\n */\nexport type DurationValue =\n  | { _tag: \"Millis\"; millis: number }\n  | { _tag: \"Nanos\"; nanos: bigint }\n  | { _tag: \"Infinity\" }\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type Unit =\n  | \"nano\"\n  | \"nanos\"\n  | \"micro\"\n  | \"micros\"\n  | \"milli\"\n  | \"millis\"\n  | \"second\"\n  | \"seconds\"\n  | \"minute\"\n  | \"minutes\"\n  | \"hour\"\n  | \"hours\"\n  | \"day\"\n  | \"days\"\n  | \"week\"\n  | \"weeks\"\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type DurationInput =\n  | Duration\n  | number // millis\n  | bigint // nanos\n  | [seconds: number, nanos: number]\n  | `${number} ${Unit}`\n\nconst DURATION_REGEX = /^(-?\\d+(?:\\.\\d+)?)\\s+(nanos?|micros?|millis?|seconds?|minutes?|hours?|days?|weeks?)$/\n\n/**\n * @since 2.0.0\n */\nexport const decode = (input: DurationInput): Duration => {\n  if (isDuration(input)) {\n    return input\n  } else if (isNumber(input)) {\n    return millis(input)\n  } else if (isBigInt(input)) {\n    return nanos(input)\n  } else if (Array.isArray(input)) {\n    if (input.length === 2 && isNumber(input[0]) && isNumber(input[1])) {\n      return nanos(BigInt(input[0]) * bigint1e9 + BigInt(input[1]))\n    }\n  } else if (isString(input)) {\n    DURATION_REGEX.lastIndex = 0 // Reset the lastIndex before each use\n    const match = DURATION_REGEX.exec(input)\n    if (match) {\n      const [_, valueStr, unit] = match\n      const value = Number(valueStr)\n      switch (unit) {\n        case \"nano\":\n        case \"nanos\":\n          return nanos(BigInt(valueStr))\n        case \"micro\":\n        case \"micros\":\n          return micros(BigInt(valueStr))\n        case \"milli\":\n        case \"millis\":\n          return millis(value)\n        case \"second\":\n        case \"seconds\":\n          return seconds(value)\n        case \"minute\":\n        case \"minutes\":\n          return minutes(value)\n        case \"hour\":\n        case \"hours\":\n          return hours(value)\n        case \"day\":\n        case \"days\":\n          return days(value)\n        case \"week\":\n        case \"weeks\":\n          return weeks(value)\n      }\n    }\n  }\n  throw new Error(\"Invalid DurationInput\")\n}\n\n/**\n * @since 2.5.0\n */\nexport const decodeUnknown: (u: unknown) => Option.Option<Duration> = Option.liftThrowable(decode) as any\n\nconst zeroValue: DurationValue = { _tag: \"Millis\", millis: 0 }\nconst infinityValue: DurationValue = { _tag: \"Infinity\" }\n\nconst DurationProto: Omit<Duration, \"value\"> = {\n  [TypeId]: TypeId,\n  [Hash.symbol](this: Duration) {\n    return Hash.cached(this, Hash.structure(this.value))\n  },\n  [Equal.symbol](this: Duration, that: unknown): boolean {\n    return isDuration(that) && equals(this, that)\n  },\n  toString(this: Duration) {\n    return `Duration(${format(this)})`\n  },\n  toJSON(this: Duration) {\n    switch (this.value._tag) {\n      case \"Millis\":\n        return { _id: \"Duration\", _tag: \"Millis\", millis: this.value.millis }\n      case \"Nanos\":\n        return { _id: \"Duration\", _tag: \"Nanos\", hrtime: toHrTime(this) }\n      case \"Infinity\":\n        return { _id: \"Duration\", _tag: \"Infinity\" }\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n} as const\n\nconst make = (input: number | bigint): Duration => {\n  const duration = Object.create(DurationProto)\n  if (isNumber(input)) {\n    if (isNaN(input) || input <= 0) {\n      duration.value = zeroValue\n    } else if (!Number.isFinite(input)) {\n      duration.value = infinityValue\n    } else if (!Number.isInteger(input)) {\n      duration.value = { _tag: \"Nanos\", nanos: BigInt(Math.round(input * 1_000_000)) }\n    } else {\n      duration.value = { _tag: \"Millis\", millis: input }\n    }\n  } else if (input <= bigint0) {\n    duration.value = zeroValue\n  } else {\n    duration.value = { _tag: \"Nanos\", nanos: input }\n  }\n  return duration\n}\n\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isDuration = (u: unknown): u is Duration => hasProperty(u, TypeId)\n\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isFinite = (self: Duration): boolean => self.value._tag !== \"Infinity\"\n\n/**\n * @since 3.5.0\n * @category guards\n */\nexport const isZero = (self: Duration): boolean => {\n  switch (self.value._tag) {\n    case \"Millis\": {\n      return self.value.millis === 0\n    }\n    case \"Nanos\": {\n      return self.value.nanos === bigint0\n    }\n    case \"Infinity\": {\n      return false\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const zero: Duration = make(0)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const infinity: Duration = make(Infinity)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const nanos = (nanos: bigint): Duration => make(nanos)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const micros = (micros: bigint): Duration => make(micros * bigint1e3)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const millis = (millis: number): Duration => make(millis)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const seconds = (seconds: number): Duration => make(seconds * 1000)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const minutes = (minutes: number): Duration => make(minutes * 60_000)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const hours = (hours: number): Duration => make(hours * 3_600_000)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const days = (days: number): Duration => make(days * 86_400_000)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const weeks = (weeks: number): Duration => make(weeks * 604_800_000)\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const toMillis = (self: DurationInput): number =>\n  match(self, {\n    onMillis: (millis) => millis,\n    onNanos: (nanos) => Number(nanos) / 1_000_000\n  })\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const toSeconds = (self: DurationInput): number =>\n  match(self, {\n    onMillis: (millis) => millis / 1_000,\n    onNanos: (nanos) => Number(nanos) / 1_000_000_000\n  })\n\n/**\n * @since 3.8.0\n * @category getters\n */\nexport const toMinutes = (self: DurationInput): number =>\n  match(self, {\n    onMillis: (millis) => millis / 60_000,\n    onNanos: (nanos) => Number(nanos) / 60_000_000_000\n  })\n\n/**\n * @since 3.8.0\n * @category getters\n */\nexport const toHours = (self: DurationInput): number =>\n  match(self, {\n    onMillis: (millis) => millis / 3_600_000,\n    onNanos: (nanos) => Number(nanos) / 3_600_000_000_000\n  })\n\n/**\n * @since 3.8.0\n * @category getters\n */\nexport const toDays = (self: DurationInput): number =>\n  match(self, {\n    onMillis: (millis) => millis / 86_400_000,\n    onNanos: (nanos) => Number(nanos) / 86_400_000_000_000\n  })\n\n/**\n * @since 3.8.0\n * @category getters\n */\nexport const toWeeks = (self: DurationInput): number =>\n  match(self, {\n    onMillis: (millis) => millis / 604_800_000,\n    onNanos: (nanos) => Number(nanos) / 604_800_000_000_000\n  })\n\n/**\n * Get the duration in nanoseconds as a bigint.\n *\n * If the duration is infinite, returns `Option.none()`\n *\n * @since 2.0.0\n * @category getters\n */\nexport const toNanos = (self: DurationInput): Option.Option<bigint> => {\n  const _self = decode(self)\n  switch (_self.value._tag) {\n    case \"Infinity\":\n      return Option.none()\n    case \"Nanos\":\n      return Option.some(_self.value.nanos)\n    case \"Millis\":\n      return Option.some(BigInt(Math.round(_self.value.millis * 1_000_000)))\n  }\n}\n\n/**\n * Get the duration in nanoseconds as a bigint.\n *\n * If the duration is infinite, it throws an error.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const unsafeToNanos = (self: DurationInput): bigint => {\n  const _self = decode(self)\n  switch (_self.value._tag) {\n    case \"Infinity\":\n      throw new Error(\"Cannot convert infinite duration to nanos\")\n    case \"Nanos\":\n      return _self.value.nanos\n    case \"Millis\":\n      return BigInt(Math.round(_self.value.millis * 1_000_000))\n  }\n}\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const toHrTime = (self: DurationInput): [seconds: number, nanos: number] => {\n  const _self = decode(self)\n  switch (_self.value._tag) {\n    case \"Infinity\":\n      return [Infinity, 0]\n    case \"Nanos\":\n      return [\n        Number(_self.value.nanos / bigint1e9),\n        Number(_self.value.nanos % bigint1e9)\n      ]\n    case \"Millis\":\n      return [\n        Math.floor(_self.value.millis / 1000),\n        Math.round((_self.value.millis % 1000) * 1_000_000)\n      ]\n  }\n}\n\n/**\n * @since 2.0.0\n * @category pattern matching\n */\nexport const match: {\n  /**\n   * @since 2.0.0\n   * @category pattern matching\n   */\n  <A, B>(\n    options: {\n      readonly onMillis: (millis: number) => A\n      readonly onNanos: (nanos: bigint) => B\n    }\n  ): (self: DurationInput) => A | B\n  /**\n   * @since 2.0.0\n   * @category pattern matching\n   */\n  <A, B>(\n    self: DurationInput,\n    options: {\n      readonly onMillis: (millis: number) => A\n      readonly onNanos: (nanos: bigint) => B\n    }\n  ): A | B\n} = dual(2, <A, B>(\n  self: DurationInput,\n  options: {\n    readonly onMillis: (millis: number) => A\n    readonly onNanos: (nanos: bigint) => B\n  }\n): A | B => {\n  const _self = decode(self)\n  switch (_self.value._tag) {\n    case \"Nanos\":\n      return options.onNanos(_self.value.nanos)\n    case \"Infinity\":\n      return options.onMillis(Infinity)\n    case \"Millis\":\n      return options.onMillis(_self.value.millis)\n  }\n})\n\n/**\n * @since 2.0.0\n * @category pattern matching\n */\nexport const matchWith: {\n  /**\n   * @since 2.0.0\n   * @category pattern matching\n   */\n  <A, B>(\n    that: DurationInput,\n    options: {\n      readonly onMillis: (self: number, that: number) => A\n      readonly onNanos: (self: bigint, that: bigint) => B\n    }\n  ): (self: DurationInput) => A | B\n  /**\n   * @since 2.0.0\n   * @category pattern matching\n   */\n  <A, B>(\n    self: DurationInput,\n    that: DurationInput,\n    options: {\n      readonly onMillis: (self: number, that: number) => A\n      readonly onNanos: (self: bigint, that: bigint) => B\n    }\n  ): A | B\n} = dual(3, <A, B>(\n  self: DurationInput,\n  that: DurationInput,\n  options: {\n    readonly onMillis: (self: number, that: number) => A\n    readonly onNanos: (self: bigint, that: bigint) => B\n  }\n): A | B => {\n  const _self = decode(self)\n  const _that = decode(that)\n  if (_self.value._tag === \"Infinity\" || _that.value._tag === \"Infinity\") {\n    return options.onMillis(\n      toMillis(_self),\n      toMillis(_that)\n    )\n  } else if (_self.value._tag === \"Nanos\" || _that.value._tag === \"Nanos\") {\n    const selfNanos = _self.value._tag === \"Nanos\" ?\n      _self.value.nanos :\n      BigInt(Math.round(_self.value.millis * 1_000_000))\n    const thatNanos = _that.value._tag === \"Nanos\" ?\n      _that.value.nanos :\n      BigInt(Math.round(_that.value.millis * 1_000_000))\n    return options.onNanos(selfNanos, thatNanos)\n  }\n\n  return options.onMillis(\n    _self.value.millis,\n    _that.value.millis\n  )\n})\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Order: order.Order<Duration> = order.make((self, that) =>\n  matchWith(self, that, {\n    onMillis: (self, that) => (self < that ? -1 : self > that ? 1 : 0),\n    onNanos: (self, that) => (self < that ? -1 : self > that ? 1 : 0)\n  })\n)\n\n/**\n * Checks if a `Duration` is between a `minimum` and `maximum` value.\n *\n * @category predicates\n * @since 2.0.0\n */\nexport const between: {\n  /**\n   * Checks if a `Duration` is between a `minimum` and `maximum` value.\n   *\n   * @category predicates\n   * @since 2.0.0\n   */\n  (\n    options: {\n      minimum: DurationInput\n      maximum: DurationInput\n    }\n  ): (self: DurationInput) => boolean\n  /**\n   * Checks if a `Duration` is between a `minimum` and `maximum` value.\n   *\n   * @category predicates\n   * @since 2.0.0\n   */\n  (\n    self: DurationInput,\n    options: {\n      minimum: DurationInput\n      maximum: DurationInput\n    }\n  ): boolean\n} = order.between(order.mapInput(Order, decode))\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Equivalence: equivalence.Equivalence<Duration> = (self, that) =>\n  matchWith(self, that, {\n    onMillis: (self, that) => self === that,\n    onNanos: (self, that) => self === that\n  })\n\nconst _min = order.min(Order)\n\n/**\n * @since 2.0.0\n */\nexport const min: {\n  /**\n   * @since 2.0.0\n   */\n  (that: DurationInput): (self: DurationInput) => Duration\n  /**\n   * @since 2.0.0\n   */\n  (self: DurationInput, that: DurationInput): Duration\n} = dual(2, (self: DurationInput, that: DurationInput): Duration => _min(decode(self), decode(that)))\n\nconst _max = order.max(Order)\n\n/**\n * @since 2.0.0\n * @category order\n */\nexport const max: {\n  /**\n   * @since 2.0.0\n   * @category order\n   */\n  (that: DurationInput): (self: DurationInput) => Duration\n  /**\n   * @since 2.0.0\n   * @category order\n   */\n  (self: DurationInput, that: DurationInput): Duration\n} = dual(2, (self: DurationInput, that: DurationInput): Duration => _max(decode(self), decode(that)))\n\nconst _clamp = order.clamp(Order)\n\n/**\n * @since 2.0.0\n * @category order\n */\nexport const clamp: {\n  /**\n   * @since 2.0.0\n   * @category order\n   */\n  (\n    options: {\n      minimum: DurationInput\n      maximum: DurationInput\n    }\n  ): (self: DurationInput) => Duration\n  /**\n   * @since 2.0.0\n   * @category order\n   */\n  (\n    self: DurationInput,\n    options: {\n      minimum: DurationInput\n      maximum: DurationInput\n    }\n  ): Duration\n} = dual(\n  2,\n  (self: DurationInput, options: {\n    minimum: DurationInput\n    maximum: DurationInput\n  }): Duration =>\n    _clamp(decode(self), {\n      minimum: decode(options.minimum),\n      maximum: decode(options.maximum)\n    })\n)\n\n/**\n * @since 2.4.19\n * @category math\n */\nexport const divide: {\n  /**\n   * @since 2.4.19\n   * @category math\n   */\n  (by: number): (self: DurationInput) => Option.Option<Duration>\n  /**\n   * @since 2.4.19\n   * @category math\n   */\n  (self: DurationInput, by: number): Option.Option<Duration>\n} = dual(\n  2,\n  (self: DurationInput, by: number): Option.Option<Duration> =>\n    match(self, {\n      onMillis: (millis) => {\n        if (by === 0 || isNaN(by) || !Number.isFinite(by)) {\n          return Option.none()\n        }\n        return Option.some(make(millis / by))\n      },\n      onNanos: (nanos) => {\n        if (isNaN(by) || by <= 0 || !Number.isFinite(by)) {\n          return Option.none()\n        }\n        try {\n          return Option.some(make(nanos / BigInt(by)))\n        } catch (e) {\n          return Option.none()\n        }\n      }\n    })\n)\n\n/**\n * @since 2.4.19\n * @category math\n */\nexport const unsafeDivide: {\n  /**\n   * @since 2.4.19\n   * @category math\n   */\n  (by: number): (self: DurationInput) => Duration\n  /**\n   * @since 2.4.19\n   * @category math\n   */\n  (self: DurationInput, by: number): Duration\n} = dual(\n  2,\n  (self: DurationInput, by: number): Duration =>\n    match(self, {\n      onMillis: (millis) => make(millis / by),\n      onNanos: (nanos) => {\n        if (isNaN(by) || by < 0 || Object.is(by, -0)) {\n          return zero\n        } else if (Object.is(by, 0) || !Number.isFinite(by)) {\n          return infinity\n        }\n        return make(nanos / BigInt(by))\n      }\n    })\n)\n\n/**\n * @since 2.0.0\n * @category math\n */\nexport const times: {\n  /**\n   * @since 2.0.0\n   * @category math\n   */\n  (times: number): (self: DurationInput) => Duration\n  /**\n   * @since 2.0.0\n   * @category math\n   */\n  (self: DurationInput, times: number): Duration\n} = dual(\n  2,\n  (self: DurationInput, times: number): Duration =>\n    match(self, {\n      onMillis: (millis) => make(millis * times),\n      onNanos: (nanos) => make(nanos * BigInt(times))\n    })\n)\n\n/**\n * @since 2.0.0\n * @category math\n */\nexport const subtract: {\n  /**\n   * @since 2.0.0\n   * @category math\n   */\n  (that: DurationInput): (self: DurationInput) => Duration\n  /**\n   * @since 2.0.0\n   * @category math\n   */\n  (self: DurationInput, that: DurationInput): Duration\n} = dual(\n  2,\n  (self: DurationInput, that: DurationInput): Duration =>\n    matchWith(self, that, {\n      onMillis: (self, that) => make(self - that),\n      onNanos: (self, that) => make(self - that)\n    })\n)\n\n/**\n * @since 2.0.0\n * @category math\n */\nexport const sum: {\n  /**\n   * @since 2.0.0\n   * @category math\n   */\n  (that: DurationInput): (self: DurationInput) => Duration\n  /**\n   * @since 2.0.0\n   * @category math\n   */\n  (self: DurationInput, that: DurationInput): Duration\n} = dual(\n  2,\n  (self: DurationInput, that: DurationInput): Duration =>\n    matchWith(self, that, {\n      onMillis: (self, that) => make(self + that),\n      onNanos: (self, that) => make(self + that)\n    })\n)\n\n/**\n * @since 2.0.0\n * @category predicates\n */\nexport const lessThan: {\n  /**\n   * @since 2.0.0\n   * @category predicates\n   */\n  (that: DurationInput): (self: DurationInput) => boolean\n  /**\n   * @since 2.0.0\n   * @category predicates\n   */\n  (self: DurationInput, that: DurationInput): boolean\n} = dual(\n  2,\n  (self: DurationInput, that: DurationInput): boolean =>\n    matchWith(self, that, {\n      onMillis: (self, that) => self < that,\n      onNanos: (self, that) => self < that\n    })\n)\n\n/**\n * @since 2.0.0\n * @category predicates\n */\nexport const lessThanOrEqualTo: {\n  /**\n   * @since 2.0.0\n   * @category predicates\n   */\n  (that: DurationInput): (self: DurationInput) => boolean\n  /**\n   * @since 2.0.0\n   * @category predicates\n   */\n  (self: DurationInput, that: DurationInput): boolean\n} = dual(\n  2,\n  (self: DurationInput, that: DurationInput): boolean =>\n    matchWith(self, that, {\n      onMillis: (self, that) => self <= that,\n      onNanos: (self, that) => self <= that\n    })\n)\n\n/**\n * @since 2.0.0\n * @category predicates\n */\nexport const greaterThan: {\n  /**\n   * @since 2.0.0\n   * @category predicates\n   */\n  (that: DurationInput): (self: DurationInput) => boolean\n  /**\n   * @since 2.0.0\n   * @category predicates\n   */\n  (self: DurationInput, that: DurationInput): boolean\n} = dual(\n  2,\n  (self: DurationInput, that: DurationInput): boolean =>\n    matchWith(self, that, {\n      onMillis: (self, that) => self > that,\n      onNanos: (self, that) => self > that\n    })\n)\n\n/**\n * @since 2.0.0\n * @category predicates\n */\nexport const greaterThanOrEqualTo: {\n  /**\n   * @since 2.0.0\n   * @category predicates\n   */\n  (that: DurationInput): (self: DurationInput) => boolean\n  /**\n   * @since 2.0.0\n   * @category predicates\n   */\n  (self: DurationInput, that: DurationInput): boolean\n} = dual(\n  2,\n  (self: DurationInput, that: DurationInput): boolean =>\n    matchWith(self, that, {\n      onMillis: (self, that) => self >= that,\n      onNanos: (self, that) => self >= that\n    })\n)\n\n/**\n * @since 2.0.0\n * @category predicates\n */\nexport const equals: {\n  /**\n   * @since 2.0.0\n   * @category predicates\n   */\n  (that: DurationInput): (self: DurationInput) => boolean\n  /**\n   * @since 2.0.0\n   * @category predicates\n   */\n  (self: DurationInput, that: DurationInput): boolean\n} = dual(2, (self: DurationInput, that: DurationInput): boolean => Equivalence(decode(self), decode(that)))\n\n/**\n * Converts a `Duration` to its parts.\n *\n * @since 3.8.0\n * @category conversions\n */\nexport const parts = (self: DurationInput): {\n  days: number\n  hours: number\n  minutes: number\n  seconds: number\n  millis: number\n  nanos: number\n} => {\n  const duration = decode(self)\n  if (duration.value._tag === \"Infinity\") {\n    return {\n      days: Infinity,\n      hours: Infinity,\n      minutes: Infinity,\n      seconds: Infinity,\n      millis: Infinity,\n      nanos: Infinity\n    }\n  }\n\n  const nanos = unsafeToNanos(duration)\n  const ms = nanos / bigint1e6\n  const sec = ms / bigint1e3\n  const min = sec / bigint60\n  const hr = min / bigint60\n  const days = hr / bigint24\n\n  return {\n    days: Number(days),\n    hours: Number(hr % bigint24),\n    minutes: Number(min % bigint60),\n    seconds: Number(sec % bigint60),\n    millis: Number(ms % bigint1e3),\n    nanos: Number(nanos % bigint1e6)\n  }\n}\n\n/**\n * Converts a `Duration` to a human readable string.\n *\n * @since 2.0.0\n * @category conversions\n * @example\n * import { Duration } from \"effect\"\n *\n * Duration.format(Duration.millis(1000)) // \"1s\"\n * Duration.format(Duration.millis(1001)) // \"1s 1ms\"\n */\nexport const format = (self: DurationInput): string => {\n  const duration = decode(self)\n  if (duration.value._tag === \"Infinity\") {\n    return \"Infinity\"\n  }\n\n  const fragments = parts(duration)\n  const pieces = []\n  if (fragments.days !== 0) {\n    pieces.push(`${fragments.days}d`)\n  }\n\n  if (fragments.hours !== 0) {\n    pieces.push(`${fragments.hours}h`)\n  }\n\n  if (fragments.minutes !== 0) {\n    pieces.push(`${fragments.minutes}m`)\n  }\n\n  if (fragments.seconds !== 0) {\n    pieces.push(`${fragments.seconds}s`)\n  }\n\n  if (fragments.millis !== 0) {\n    pieces.push(`${fragments.millis}ms`)\n  }\n\n  if (fragments.nanos !== 0) {\n    pieces.push(`${fragments.nanos}ns`)\n  }\n\n  return pieces.join(\" \")\n}\n"],"names":["Equal","dual","Hash","NodeInspectSymbol","Option","order","pipeArguments","hasProperty","isBigInt","isNumber","isString","TypeId","Symbol","for","bigint0","BigInt","bigint24","bigint60","bigint1e3","bigint1e6","bigint1e9","DURATION_REGEX","decode","input","isDuration","millis","nanos","Array","isArray","length","lastIndex","match","exec","_","valueStr","unit","value","Number","micros","seconds","minutes","hours","days","weeks","Error","decodeUnknown","liftThrowable","zeroValue","_tag","infinityValue","DurationProto","symbol","cached","structure","that","equals","toString","format","toJSON","_id","hrtime","toHrTime","pipe","arguments","make","duration","Object","create","isNaN","isFinite","isInteger","Math","round","u","self","isZero","zero","infinity","Infinity","toMillis","onMillis","onNanos","toSeconds","toMinutes","toHours","toDays","toWeeks","toNanos","_self","none","some","unsafeToNanos","floor","options","matchWith","_that","selfNanos","thatNanos","Order","between","mapInput","Equivalence","_min","min","_max","max","_clamp","clamp","minimum","maximum","divide","by","e","unsafeDivide","is","times","subtract","sum","lessThan","lessThanOrEqualTo","greaterThan","greaterThanOrEqualTo","parts","ms","sec","hr","fragments","pieces","push","join"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 7065, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7071, "column": 0}, "map": {"version":3,"file":"Scheduler.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Scheduler.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\n\nimport type { Effect } from \"./Effect.js\"\nimport type { RuntimeFiber } from \"./Fiber.js\"\nimport type { FiberRef } from \"./FiberRef.js\"\nimport { dual } from \"./Function.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport * as core from \"./internal/core.js\"\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type Task = () => void\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Scheduler {\n  shouldYield(fiber: RuntimeFiber<unknown, unknown>): number | false\n  scheduleTask(task: Task, priority: number): void\n}\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport class PriorityBuckets<in out T = Task> {\n  /**\n   * @since 2.0.0\n   */\n  public buckets: Array<[number, Array<T>]> = []\n  /**\n   * @since 2.0.0\n   */\n  scheduleTask(task: T, priority: number) {\n    const length = this.buckets.length\n    let bucket: [number, Array<T>] | undefined = undefined\n    let index = 0\n    for (; index < length; index++) {\n      if (this.buckets[index][0] <= priority) {\n        bucket = this.buckets[index]\n      } else {\n        break\n      }\n    }\n    if (bucket && bucket[0] === priority) {\n      bucket[1].push(task)\n    } else if (index === length) {\n      this.buckets.push([priority, [task]])\n    } else {\n      this.buckets.splice(index, 0, [priority, [task]])\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport class MixedScheduler implements Scheduler {\n  /**\n   * @since 2.0.0\n   */\n  running = false\n  /**\n   * @since 2.0.0\n   */\n  tasks = new PriorityBuckets()\n\n  constructor(\n    /**\n     * @since 2.0.0\n     */\n    readonly maxNextTickBeforeTimer: number\n  ) {}\n\n  /**\n   * @since 2.0.0\n   */\n  private starveInternal(depth: number) {\n    const tasks = this.tasks.buckets\n    this.tasks.buckets = []\n    for (const [_, toRun] of tasks) {\n      for (let i = 0; i < toRun.length; i++) {\n        toRun[i]()\n      }\n    }\n    if (this.tasks.buckets.length === 0) {\n      this.running = false\n    } else {\n      this.starve(depth)\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  private starve(depth = 0) {\n    if (depth >= this.maxNextTickBeforeTimer) {\n      setTimeout(() => this.starveInternal(0), 0)\n    } else {\n      Promise.resolve(void 0).then(() => this.starveInternal(depth + 1))\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  shouldYield(fiber: RuntimeFiber<unknown, unknown>): number | false {\n    return fiber.currentOpCount > fiber.getFiberRef(core.currentMaxOpsBeforeYield)\n      ? fiber.getFiberRef(core.currentSchedulingPriority)\n      : false\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  scheduleTask(task: Task, priority: number) {\n    this.tasks.scheduleTask(task, priority)\n    if (!this.running) {\n      this.running = true\n      this.starve()\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category schedulers\n */\nexport const defaultScheduler: Scheduler = globalValue(\n  Symbol.for(\"effect/Scheduler/defaultScheduler\"),\n  () => new MixedScheduler(2048)\n)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport class SyncScheduler implements Scheduler {\n  /**\n   * @since 2.0.0\n   */\n  tasks = new PriorityBuckets()\n\n  /**\n   * @since 2.0.0\n   */\n  deferred = false\n\n  /**\n   * @since 2.0.0\n   */\n  scheduleTask(task: Task, priority: number) {\n    if (this.deferred) {\n      defaultScheduler.scheduleTask(task, priority)\n    } else {\n      this.tasks.scheduleTask(task, priority)\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  shouldYield(fiber: RuntimeFiber<unknown, unknown>): number | false {\n    return fiber.currentOpCount > fiber.getFiberRef(core.currentMaxOpsBeforeYield)\n      ? fiber.getFiberRef(core.currentSchedulingPriority)\n      : false\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  flush() {\n    while (this.tasks.buckets.length > 0) {\n      const tasks = this.tasks.buckets\n      this.tasks.buckets = []\n      for (const [_, toRun] of tasks) {\n        for (let i = 0; i < toRun.length; i++) {\n          toRun[i]()\n        }\n      }\n    }\n    this.deferred = true\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport class ControlledScheduler implements Scheduler {\n  /**\n   * @since 2.0.0\n   */\n  tasks = new PriorityBuckets()\n\n  /**\n   * @since 2.0.0\n   */\n  deferred = false\n\n  /**\n   * @since 2.0.0\n   */\n  scheduleTask(task: Task, priority: number) {\n    if (this.deferred) {\n      defaultScheduler.scheduleTask(task, priority)\n    } else {\n      this.tasks.scheduleTask(task, priority)\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  shouldYield(fiber: RuntimeFiber<unknown, unknown>): number | false {\n    return fiber.currentOpCount > fiber.getFiberRef(core.currentMaxOpsBeforeYield)\n      ? fiber.getFiberRef(core.currentSchedulingPriority)\n      : false\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  step() {\n    const tasks = this.tasks.buckets\n    this.tasks.buckets = []\n    for (const [_, toRun] of tasks) {\n      for (let i = 0; i < toRun.length; i++) {\n        toRun[i]()\n      }\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const makeMatrix = (...record: Array<[number, Scheduler]>): Scheduler => {\n  const index = record.sort(([p0], [p1]) => p0 < p1 ? -1 : p0 > p1 ? 1 : 0)\n  return {\n    shouldYield(fiber) {\n      for (const scheduler of record) {\n        const priority = scheduler[1].shouldYield(fiber)\n        if (priority !== false) {\n          return priority\n        }\n      }\n      return false\n    },\n    scheduleTask(task, priority) {\n      let scheduler: Scheduler | undefined = undefined\n      for (const i of index) {\n        if (priority >= i[0]) {\n          scheduler = i[1]\n        } else {\n          return (scheduler ?? defaultScheduler).scheduleTask(task, priority)\n        }\n      }\n      return (scheduler ?? defaultScheduler).scheduleTask(task, priority)\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category utilities\n */\nexport const defaultShouldYield: Scheduler[\"shouldYield\"] = (fiber) => {\n  return fiber.currentOpCount > fiber.getFiberRef(core.currentMaxOpsBeforeYield)\n    ? fiber.getFiberRef(core.currentSchedulingPriority)\n    : false\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make = (\n  scheduleTask: Scheduler[\"scheduleTask\"],\n  shouldYield: Scheduler[\"shouldYield\"] = defaultShouldYield\n): Scheduler => ({\n  scheduleTask,\n  shouldYield\n})\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const makeBatched = (\n  callback: (runBatch: () => void) => void,\n  shouldYield: Scheduler[\"shouldYield\"] = defaultShouldYield\n) => {\n  let running = false\n  const tasks = new PriorityBuckets()\n  const starveInternal = () => {\n    const tasksToRun = tasks.buckets\n    tasks.buckets = []\n    for (const [_, toRun] of tasksToRun) {\n      for (let i = 0; i < toRun.length; i++) {\n        toRun[i]()\n      }\n    }\n    if (tasks.buckets.length === 0) {\n      running = false\n    } else {\n      starve()\n    }\n  }\n\n  const starve = () => callback(starveInternal)\n\n  return make((task, priority) => {\n    tasks.scheduleTask(task, priority)\n    if (!running) {\n      running = true\n      starve()\n    }\n  }, shouldYield)\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const timer = (ms: number, shouldYield: Scheduler[\"shouldYield\"] = defaultShouldYield) =>\n  make((task) => setTimeout(task, ms), shouldYield)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const timerBatched = (ms: number, shouldYield: Scheduler[\"shouldYield\"] = defaultShouldYield) =>\n  makeBatched((task) => setTimeout(task, ms), shouldYield)\n\n/** @internal */\nexport const currentScheduler: FiberRef<Scheduler> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentScheduler\"),\n  () => core.fiberRefUnsafeMake(defaultScheduler)\n)\n\n/** @internal */\nexport const withScheduler = dual<\n  /** @internal */\n  (scheduler: Scheduler) => <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>,\n  /** @internal */\n  <A, E, R>(self: Effect<A, E, R>, scheduler: Scheduler) => Effect<A, E, R>\n>(2, (self, scheduler) => core.fiberRefLocally(self, currentScheduler, scheduler))\n"],"names":["dual","globalValue","core","PriorityBuckets","buckets","scheduleTask","task","priority","length","bucket","undefined","index","push","splice","MixedScheduler","maxNextTickBeforeTimer","running","tasks","constructor","starveInternal","depth","_","toRun","i","starve","setTimeout","Promise","resolve","then","shouldYield","fiber","currentOpCount","getFiberRef","currentMaxOpsBeforeYield","currentSchedulingPriority","defaultScheduler","Symbol","for","SyncScheduler","deferred","flush","ControlledScheduler","step","makeMatrix","record","sort","p0","p1","scheduler","defaultShouldYield","make","makeBatched","callback","tasksToRun","timer","ms","timerBatched","currentScheduler","fiberRefUnsafeMake","withScheduler","self","fiberRefLocally"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 7315, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7321, "column": 0}, "map": {"version":3,"file":"MutableHashMap.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/MutableHashMap.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type { NonEmptyArray } from \"./Array.js\"\nimport * as Equal from \"./Equal.js\"\nimport { dual } from \"./Function.js\"\nimport * as Hash from \"./Hash.js\"\nimport { format, type Inspectable, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/MutableHashMap\") as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface MutableHashMap<out K, out V> extends Iterable<[K, V]>, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n  /** @internal */\n  readonly referential: Map<K, V>\n  /** @internal */\n  readonly buckets: Map<number, NonEmptyArray<readonly [K & Equal.Equal, V]>>\n  /** @internal */\n  bucketsSize: number\n}\n\nconst MutableHashMapProto: Omit<MutableHashMap<unknown, unknown>, \"referential\" | \"buckets\" | \"bucketsSize\"> = {\n  [TypeId]: TypeId,\n  [Symbol.iterator](this: MutableHashMap<unknown, unknown>): Iterator<[unknown, unknown]> {\n    return new MutableHashMapIterator(this)\n  },\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"MutableHashMap\",\n      values: Array.from(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nclass MutableHashMapIterator<K, V> implements IterableIterator<[K, V]> {\n  readonly referentialIterator: Iterator<[K, V]>\n  bucketIterator: Iterator<[K, V]> | undefined\n\n  constructor(readonly self: MutableHashMap<K, V>) {\n    this.referentialIterator = self.referential[Symbol.iterator]()\n  }\n  next(): IteratorResult<[K, V]> {\n    if (this.bucketIterator !== undefined) {\n      return this.bucketIterator.next()\n    }\n    const result = this.referentialIterator.next()\n    if (result.done) {\n      this.bucketIterator = new BucketIterator(this.self.buckets.values())\n      return this.next()\n    }\n    return result\n  }\n\n  [Symbol.iterator](): IterableIterator<[K, V]> {\n    return new MutableHashMapIterator(this.self)\n  }\n}\n\nclass BucketIterator<K, V> implements Iterator<[K, V]> {\n  constructor(readonly backing: Iterator<NonEmptyArray<readonly [K, V]>>) {}\n  currentBucket: Iterator<readonly [K, V]> | undefined\n  next(): IteratorResult<[K, V]> {\n    if (this.currentBucket === undefined) {\n      const result = this.backing.next()\n      if (result.done) {\n        return result\n      }\n      this.currentBucket = result.value[Symbol.iterator]()\n    }\n    const result = this.currentBucket.next()\n    if (result.done) {\n      this.currentBucket = undefined\n      return this.next()\n    }\n    return result as IteratorResult<[K, V]>\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const empty = <K, V>(): MutableHashMap<K, V> => {\n  const self = Object.create(MutableHashMapProto)\n  self.referential = new Map()\n  self.buckets = new Map()\n  self.bucketsSize = 0\n  return self\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <Entries extends Array<readonly [any, any]>>(\n  ...entries: Entries\n) => MutableHashMap<\n  Entries[number] extends readonly [infer K, any] ? K : never,\n  Entries[number] extends readonly [any, infer V] ? V : never\n> = (...entries) => fromIterable(entries)\n\n/**\n * Creates a new `MutableHashMap` from an iterable collection of key/value pairs.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable = <K, V>(entries: Iterable<readonly [K, V]>): MutableHashMap<K, V> => {\n  const self = empty<K, V>()\n  for (const [key, value] of entries) {\n    set(self, key, value)\n  }\n  return self\n}\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const get: {\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <K>(key: K): <V>(self: MutableHashMap<K, V>) => Option.Option<V>\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <K, V>(self: MutableHashMap<K, V>, key: K): Option.Option<V>\n} = dual<\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <K>(key: K) => <V>(self: MutableHashMap<K, V>) => Option.Option<V>,\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <K, V>(self: MutableHashMap<K, V>, key: K) => Option.Option<V>\n>(2, <K, V>(self: MutableHashMap<K, V>, key: K): Option.Option<V> => {\n  if (Equal.isEqual(key) === false) {\n    return self.referential.has(key) ? Option.some(self.referential.get(key)!) : Option.none()\n  }\n\n  const hash = key[Hash.symbol]()\n  const bucket = self.buckets.get(hash)\n  if (bucket === undefined) {\n    return Option.none()\n  }\n\n  return getFromBucket(self, bucket, key)\n})\n\n/**\n * @since 3.8.0\n * @category elements\n */\nexport const keys = <K, V>(self: MutableHashMap<K, V>): Array<K> => {\n  const keys: Array<K> = []\n  for (const [key] of self) {\n    keys.push(key)\n  }\n  return keys\n}\n\nconst getFromBucket = <K, V>(\n  self: MutableHashMap<K, V>,\n  bucket: NonEmptyArray<readonly [K & Equal.Equal, V]>,\n  key: K & Equal.Equal,\n  remove = false\n): Option.Option<V> => {\n  for (let i = 0, len = bucket.length; i < len; i++) {\n    if (key[Equal.symbol](bucket[i][0])) {\n      const value = bucket[i][1]\n      if (remove) {\n        bucket.splice(i, 1)\n        self.bucketsSize--\n      }\n      return Option.some(value)\n    }\n  }\n\n  return Option.none()\n}\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const has: {\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <K>(key: K): <V>(self: MutableHashMap<K, V>) => boolean\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <K, V>(self: MutableHashMap<K, V>, key: K): boolean\n} = dual<\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <K>(key: K) => <V>(self: MutableHashMap<K, V>) => boolean,\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <K, V>(self: MutableHashMap<K, V>, key: K) => boolean\n>(2, (self, key) => Option.isSome(get(self, key)))\n\n/**\n * @since 2.0.0\n */\nexport const set: {\n  /**\n   * @since 2.0.0\n   */\n  <K, V>(key: K, value: V): (self: MutableHashMap<K, V>) => MutableHashMap<K, V>\n  /**\n   * @since 2.0.0\n   */\n  <K, V>(self: MutableHashMap<K, V>, key: K, value: V): MutableHashMap<K, V>\n} = dual<\n  /**\n   * @since 2.0.0\n   */\n  <K, V>(key: K, value: V) => (self: MutableHashMap<K, V>) => MutableHashMap<K, V>,\n  /**\n   * @since 2.0.0\n   */\n  <K, V>(self: MutableHashMap<K, V>, key: K, value: V) => MutableHashMap<K, V>\n>(3, <K, V>(self: MutableHashMap<K, V>, key: K, value: V) => {\n  if (Equal.isEqual(key) === false) {\n    self.referential.set(key, value)\n    return self\n  }\n\n  const hash = key[Hash.symbol]()\n  const bucket = self.buckets.get(hash)\n  if (bucket === undefined) {\n    self.buckets.set(hash, [[key, value]])\n    self.bucketsSize++\n    return self\n  }\n\n  removeFromBucket(self, bucket, key)\n  bucket.push([key, value])\n  self.bucketsSize++\n  return self\n})\n\nconst removeFromBucket = <K, V>(\n  self: MutableHashMap<K, V>,\n  bucket: NonEmptyArray<readonly [K & Equal.Equal, V]>,\n  key: K & Equal.Equal\n) => {\n  for (let i = 0, len = bucket.length; i < len; i++) {\n    if (key[Equal.symbol](bucket[i][0])) {\n      bucket.splice(i, 1)\n      self.bucketsSize--\n      return\n    }\n  }\n}\n\n/**\n * Updates the value of the specified key within the `MutableHashMap` if it exists.\n *\n * @since 2.0.0\n */\nexport const modify: {\n  /**\n   * Updates the value of the specified key within the `MutableHashMap` if it exists.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(key: K, f: (v: V) => V): (self: MutableHashMap<K, V>) => MutableHashMap<K, V>\n  /**\n   * Updates the value of the specified key within the `MutableHashMap` if it exists.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(self: MutableHashMap<K, V>, key: K, f: (v: V) => V): MutableHashMap<K, V>\n} = dual<\n  /**\n   * Updates the value of the specified key within the `MutableHashMap` if it exists.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(key: K, f: (v: V) => V) => (self: MutableHashMap<K, V>) => MutableHashMap<K, V>,\n  /**\n   * Updates the value of the specified key within the `MutableHashMap` if it exists.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(self: MutableHashMap<K, V>, key: K, f: (v: V) => V) => MutableHashMap<K, V>\n>(3, <K, V>(self: MutableHashMap<K, V>, key: K, f: (v: V) => V) => {\n  if (Equal.isEqual(key) === false) {\n    if (self.referential.has(key)) {\n      self.referential.set(key, f(self.referential.get(key)!))\n    }\n    return self\n  }\n\n  const hash = key[Hash.symbol]()\n  const bucket = self.buckets.get(hash)\n  if (bucket === undefined) {\n    return self\n  }\n\n  const value = getFromBucket(self, bucket, key, true)\n  if (Option.isNone(value)) {\n    return self\n  }\n  bucket.push([key, f(value.value)])\n  self.bucketsSize++\n  return self\n})\n\n/**\n * Set or remove the specified key in the `MutableHashMap` using the specified\n * update function.\n *\n * @since 2.0.0\n */\nexport const modifyAt: {\n  /**\n   * Set or remove the specified key in the `MutableHashMap` using the specified\n   * update function.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(key: K, f: (value: Option.Option<V>) => Option.Option<V>): (self: MutableHashMap<K, V>) => MutableHashMap<K, V>\n  /**\n   * Set or remove the specified key in the `MutableHashMap` using the specified\n   * update function.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(\n    self: MutableHashMap<K, V>,\n    key: K,\n    f: (value: Option.Option<V>) => Option.Option<V>\n  ): MutableHashMap<K, V>\n} = dual<\n  /**\n   * Set or remove the specified key in the `MutableHashMap` using the specified\n   * update function.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(\n    key: K,\n    f: (value: Option.Option<V>) => Option.Option<V>\n  ) => (self: MutableHashMap<K, V>) => MutableHashMap<K, V>,\n  /**\n   * Set or remove the specified key in the `MutableHashMap` using the specified\n   * update function.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(\n    self: MutableHashMap<K, V>,\n    key: K,\n    f: (value: Option.Option<V>) => Option.Option<V>\n  ) => MutableHashMap<K, V>\n>(3, (self, key, f) => {\n  if (Equal.isEqual(key) === false) {\n    const result = f(get(self, key))\n    if (Option.isSome(result)) {\n      set(self, key, result.value)\n    } else {\n      remove(self, key)\n    }\n    return self\n  }\n\n  const hash = key[Hash.symbol]()\n  const bucket = self.buckets.get(hash)\n  if (bucket === undefined) {\n    const result = f(Option.none())\n    return Option.isSome(result) ? set(self, key, result.value) : self\n  }\n\n  const result = f(getFromBucket(self, bucket, key, true))\n  if (Option.isNone(result)) {\n    if (bucket.length === 0) {\n      self.buckets.delete(hash)\n    }\n    return self\n  }\n  bucket.push([key, result.value])\n  self.bucketsSize++\n  return self\n})\n\n/**\n * @since 2.0.0\n */\nexport const remove: {\n  /**\n   * @since 2.0.0\n   */\n  <K>(key: K): <V>(self: MutableHashMap<K, V>) => MutableHashMap<K, V>\n  /**\n   * @since 2.0.0\n   */\n  <K, V>(self: MutableHashMap<K, V>, key: K): MutableHashMap<K, V>\n} = dual<\n  /**\n   * @since 2.0.0\n   */\n  <K>(key: K) => <V>(self: MutableHashMap<K, V>) => MutableHashMap<K, V>,\n  /**\n   * @since 2.0.0\n   */\n  <K, V>(self: MutableHashMap<K, V>, key: K) => MutableHashMap<K, V>\n>(2, <K, V>(self: MutableHashMap<K, V>, key: K) => {\n  if (Equal.isEqual(key) === false) {\n    self.referential.delete(key)\n    return self\n  }\n\n  const hash = key[Hash.symbol]()\n  const bucket = self.buckets.get(hash)\n  if (bucket === undefined) {\n    return self\n  }\n  removeFromBucket(self, bucket, key)\n  if (bucket.length === 0) {\n    self.buckets.delete(hash)\n  }\n  return self\n})\n\n/**\n * @since 2.0.0\n */\nexport const clear = <K, V>(self: MutableHashMap<K, V>) => {\n  self.referential.clear()\n  self.buckets.clear()\n  self.bucketsSize = 0\n  return self\n}\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const size = <K, V>(self: MutableHashMap<K, V>): number => {\n  return self.referential.size + self.bucketsSize\n}\n"],"names":["Equal","dual","Hash","format","NodeInspectSymbol","toJSON","Option","pipeArguments","TypeId","Symbol","for","MutableHashMapProto","iterator","MutableHashMapIterator","toString","_id","values","Array","from","map","pipe","arguments","self","referentialIterator","bucketIterator","constructor","referential","next","undefined","result","done","BucketIterator","buckets","backing","currentBucket","value","empty","Object","create","Map","bucketsSize","make","entries","fromIterable","key","set","get","isEqual","has","some","none","hash","symbol","bucket","getFromBucket","keys","push","remove","i","len","length","splice","isSome","removeFromBucket","modify","f","isNone","modifyAt","delete","clear","size"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 7573, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7579, "column": 0}, "map": {"version":3,"file":"Number.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Number.ts"],"sourcesContent":["/**\n * This module provides utility functions and type class instances for working with the `number` type in TypeScript.\n * It includes functions for basic arithmetic operations, as well as type class instances for\n * `Equivalence` and `Order`.\n *\n * @since 2.0.0\n */\nimport * as equivalence from \"./Equivalence.js\"\nimport { dual } from \"./Function.js\"\nimport * as option from \"./internal/option.js\"\nimport type { Option } from \"./Option.js\"\nimport * as order from \"./Order.js\"\nimport type { Ordering } from \"./Ordering.js\"\nimport * as predicate from \"./Predicate.js\"\n\n/**\n * Tests if a value is a `number`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNumber } from \"effect/Number\"\n *\n * assert.deepStrictEqual(isNumber(2), true)\n * assert.deepStrictEqual(isNumber(\"2\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNumber: (input: unknown) => input is number = predicate.isNumber\n\n/**\n * Provides an addition operation on `number`s.\n *\n * @param self - The first operand.\n * @param that - The second operand.\n *\n * @example\n * import { sum } from \"effect/Number\"\n *\n * assert.deepStrictEqual(sum(2, 3), 5)\n *\n * @category math\n * @since 2.0.0\n */\nexport const sum: {\n  /**\n   * Provides an addition operation on `number`s.\n   *\n   * @param self - The first operand.\n   * @param that - The second operand.\n   *\n   * @example\n   * import { sum } from \"effect/Number\"\n   *\n   * assert.deepStrictEqual(sum(2, 3), 5)\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (that: number): (self: number) => number\n  /**\n   * Provides an addition operation on `number`s.\n   *\n   * @param self - The first operand.\n   * @param that - The second operand.\n   *\n   * @example\n   * import { sum } from \"effect/Number\"\n   *\n   * assert.deepStrictEqual(sum(2, 3), 5)\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (self: number, that: number): number\n} = dual(2, (self: number, that: number): number => self + that)\n\n/**\n * Provides a multiplication operation on `number`s.\n *\n * @param self - The first operand.\n * @param that - The second operand.\n *\n * @example\n * import { multiply } from \"effect/Number\"\n *\n * assert.deepStrictEqual(multiply(2, 3), 6)\n *\n * @category math\n * @since 2.0.0\n */\nexport const multiply: {\n  /**\n   * Provides a multiplication operation on `number`s.\n   *\n   * @param self - The first operand.\n   * @param that - The second operand.\n   *\n   * @example\n   * import { multiply } from \"effect/Number\"\n   *\n   * assert.deepStrictEqual(multiply(2, 3), 6)\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (that: number): (self: number) => number\n  /**\n   * Provides a multiplication operation on `number`s.\n   *\n   * @param self - The first operand.\n   * @param that - The second operand.\n   *\n   * @example\n   * import { multiply } from \"effect/Number\"\n   *\n   * assert.deepStrictEqual(multiply(2, 3), 6)\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (self: number, that: number): number\n} = dual(2, (self: number, that: number): number => self * that)\n\n/**\n * Provides a subtraction operation on `number`s.\n *\n * @param self - The first operand.\n * @param that - The second operand.\n *\n * @example\n * import { subtract } from \"effect/Number\"\n *\n * assert.deepStrictEqual(subtract(2, 3), -1)\n *\n * @category math\n * @since 2.0.0\n */\nexport const subtract: {\n  /**\n   * Provides a subtraction operation on `number`s.\n   *\n   * @param self - The first operand.\n   * @param that - The second operand.\n   *\n   * @example\n   * import { subtract } from \"effect/Number\"\n   *\n   * assert.deepStrictEqual(subtract(2, 3), -1)\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (that: number): (self: number) => number\n  /**\n   * Provides a subtraction operation on `number`s.\n   *\n   * @param self - The first operand.\n   * @param that - The second operand.\n   *\n   * @example\n   * import { subtract } from \"effect/Number\"\n   *\n   * assert.deepStrictEqual(subtract(2, 3), -1)\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (self: number, that: number): number\n} = dual(2, (self: number, that: number): number => self - that)\n\n/**\n * Provides a division operation on `number`s.\n *\n * @param self - The dividend operand.\n * @param that - The divisor operand.\n *\n * @example\n * import { Number, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Number.divide(6, 3), Option.some(2))\n * assert.deepStrictEqual(Number.divide(6, 0), Option.none())\n *\n * @category math\n * @since 2.0.0\n */\nexport const divide: {\n  /**\n   * Provides a division operation on `number`s.\n   *\n   * @param self - The dividend operand.\n   * @param that - The divisor operand.\n   *\n   * @example\n   * import { Number, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(Number.divide(6, 3), Option.some(2))\n   * assert.deepStrictEqual(Number.divide(6, 0), Option.none())\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (that: number): (self: number) => Option<number>\n  /**\n   * Provides a division operation on `number`s.\n   *\n   * @param self - The dividend operand.\n   * @param that - The divisor operand.\n   *\n   * @example\n   * import { Number, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(Number.divide(6, 3), Option.some(2))\n   * assert.deepStrictEqual(Number.divide(6, 0), Option.none())\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (self: number, that: number): Option<number>\n} = dual(\n  2,\n  (self: number, that: number): Option<number> => that === 0 ? option.none : option.some(self / that)\n)\n\n/**\n * Provides a division operation on `number`s.\n *\n * Throws a `RangeError` if the divisor is `0`.\n *\n * @param self - The dividend operand.\n * @param that - The divisor operand.\n *\n * @example\n * import { unsafeDivide } from \"effect/Number\"\n *\n * assert.deepStrictEqual(unsafeDivide(6, 3), 2)\n *\n * @category math\n * @since 2.0.0\n */\nexport const unsafeDivide: {\n  /**\n   * Provides a division operation on `number`s.\n   *\n   * Throws a `RangeError` if the divisor is `0`.\n   *\n   * @param self - The dividend operand.\n   * @param that - The divisor operand.\n   *\n   * @example\n   * import { unsafeDivide } from \"effect/Number\"\n   *\n   * assert.deepStrictEqual(unsafeDivide(6, 3), 2)\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (that: number): (self: number) => number\n  /**\n   * Provides a division operation on `number`s.\n   *\n   * Throws a `RangeError` if the divisor is `0`.\n   *\n   * @param self - The dividend operand.\n   * @param that - The divisor operand.\n   *\n   * @example\n   * import { unsafeDivide } from \"effect/Number\"\n   *\n   * assert.deepStrictEqual(unsafeDivide(6, 3), 2)\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (self: number, that: number): number\n} = dual(2, (self: number, that: number): number => self / that)\n\n/**\n * Returns the result of adding `1` to a given number.\n *\n * @param n - A `number` to be incremented.\n *\n * @example\n * import { increment } from \"effect/Number\"\n *\n * assert.deepStrictEqual(increment(2), 3)\n *\n * @category math\n * @since 2.0.0\n */\nexport const increment = (n: number): number => n + 1\n\n/**\n * Decrements a number by `1`.\n *\n * @param n - A `number` to be decremented.\n *\n * @example\n * import { decrement } from \"effect/Number\"\n *\n * assert.deepStrictEqual(decrement(3), 2)\n *\n * @category math\n * @since 2.0.0\n */\nexport const decrement = (n: number): number => n - 1\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Equivalence: equivalence.Equivalence<number> = equivalence.number\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Order: order.Order<number> = order.number\n\n/**\n * Returns `true` if the first argument is less than the second, otherwise `false`.\n *\n * @param self - The first argument.\n * @param that - The second argument.\n *\n * @example\n * import { lessThan } from \"effect/Number\"\n *\n * assert.deepStrictEqual(lessThan(2, 3), true)\n * assert.deepStrictEqual(lessThan(3, 3), false)\n * assert.deepStrictEqual(lessThan(4, 3), false)\n *\n * @category predicates\n * @since 2.0.0\n */\nexport const lessThan: {\n  /**\n   * Returns `true` if the first argument is less than the second, otherwise `false`.\n   *\n   * @param self - The first argument.\n   * @param that - The second argument.\n   *\n   * @example\n   * import { lessThan } from \"effect/Number\"\n   *\n   * assert.deepStrictEqual(lessThan(2, 3), true)\n   * assert.deepStrictEqual(lessThan(3, 3), false)\n   * assert.deepStrictEqual(lessThan(4, 3), false)\n   *\n   * @category predicates\n   * @since 2.0.0\n   */\n  (that: number): (self: number) => boolean\n  /**\n   * Returns `true` if the first argument is less than the second, otherwise `false`.\n   *\n   * @param self - The first argument.\n   * @param that - The second argument.\n   *\n   * @example\n   * import { lessThan } from \"effect/Number\"\n   *\n   * assert.deepStrictEqual(lessThan(2, 3), true)\n   * assert.deepStrictEqual(lessThan(3, 3), false)\n   * assert.deepStrictEqual(lessThan(4, 3), false)\n   *\n   * @category predicates\n   * @since 2.0.0\n   */\n  (self: number, that: number): boolean\n} = order.lessThan(Order)\n\n/**\n * Returns a function that checks if a given `number` is less than or equal to the provided one.\n *\n * @param self - The first `number` to compare with.\n * @param that - The second `number` to compare with.\n *\n * @example\n * import { lessThanOrEqualTo } from \"effect/Number\"\n *\n * assert.deepStrictEqual(lessThanOrEqualTo(2, 3), true)\n * assert.deepStrictEqual(lessThanOrEqualTo(3, 3), true)\n * assert.deepStrictEqual(lessThanOrEqualTo(4, 3), false)\n *\n * @category predicates\n * @since 2.0.0\n */\nexport const lessThanOrEqualTo: {\n  /**\n   * Returns a function that checks if a given `number` is less than or equal to the provided one.\n   *\n   * @param self - The first `number` to compare with.\n   * @param that - The second `number` to compare with.\n   *\n   * @example\n   * import { lessThanOrEqualTo } from \"effect/Number\"\n   *\n   * assert.deepStrictEqual(lessThanOrEqualTo(2, 3), true)\n   * assert.deepStrictEqual(lessThanOrEqualTo(3, 3), true)\n   * assert.deepStrictEqual(lessThanOrEqualTo(4, 3), false)\n   *\n   * @category predicates\n   * @since 2.0.0\n   */\n  (that: number): (self: number) => boolean\n  /**\n   * Returns a function that checks if a given `number` is less than or equal to the provided one.\n   *\n   * @param self - The first `number` to compare with.\n   * @param that - The second `number` to compare with.\n   *\n   * @example\n   * import { lessThanOrEqualTo } from \"effect/Number\"\n   *\n   * assert.deepStrictEqual(lessThanOrEqualTo(2, 3), true)\n   * assert.deepStrictEqual(lessThanOrEqualTo(3, 3), true)\n   * assert.deepStrictEqual(lessThanOrEqualTo(4, 3), false)\n   *\n   * @category predicates\n   * @since 2.0.0\n   */\n  (self: number, that: number): boolean\n} = order.lessThanOrEqualTo(Order)\n\n/**\n * Returns `true` if the first argument is greater than the second, otherwise `false`.\n *\n * @param self - The first argument.\n * @param that - The second argument.\n *\n * @example\n * import { greaterThan } from \"effect/Number\"\n *\n * assert.deepStrictEqual(greaterThan(2, 3), false)\n * assert.deepStrictEqual(greaterThan(3, 3), false)\n * assert.deepStrictEqual(greaterThan(4, 3), true)\n *\n * @category predicates\n * @since 2.0.0\n */\nexport const greaterThan: {\n  /**\n   * Returns `true` if the first argument is greater than the second, otherwise `false`.\n   *\n   * @param self - The first argument.\n   * @param that - The second argument.\n   *\n   * @example\n   * import { greaterThan } from \"effect/Number\"\n   *\n   * assert.deepStrictEqual(greaterThan(2, 3), false)\n   * assert.deepStrictEqual(greaterThan(3, 3), false)\n   * assert.deepStrictEqual(greaterThan(4, 3), true)\n   *\n   * @category predicates\n   * @since 2.0.0\n   */\n  (that: number): (self: number) => boolean\n  /**\n   * Returns `true` if the first argument is greater than the second, otherwise `false`.\n   *\n   * @param self - The first argument.\n   * @param that - The second argument.\n   *\n   * @example\n   * import { greaterThan } from \"effect/Number\"\n   *\n   * assert.deepStrictEqual(greaterThan(2, 3), false)\n   * assert.deepStrictEqual(greaterThan(3, 3), false)\n   * assert.deepStrictEqual(greaterThan(4, 3), true)\n   *\n   * @category predicates\n   * @since 2.0.0\n   */\n  (self: number, that: number): boolean\n} = order.greaterThan(Order)\n\n/**\n * Returns a function that checks if a given `number` is greater than or equal to the provided one.\n *\n * @param self - The first `number` to compare with.\n * @param that - The second `number` to compare with.\n *\n * @example\n * import { greaterThanOrEqualTo } from \"effect/Number\"\n *\n * assert.deepStrictEqual(greaterThanOrEqualTo(2, 3), false)\n * assert.deepStrictEqual(greaterThanOrEqualTo(3, 3), true)\n * assert.deepStrictEqual(greaterThanOrEqualTo(4, 3), true)\n *\n * @category predicates\n * @since 2.0.0\n */\nexport const greaterThanOrEqualTo: {\n  /**\n   * Returns a function that checks if a given `number` is greater than or equal to the provided one.\n   *\n   * @param self - The first `number` to compare with.\n   * @param that - The second `number` to compare with.\n   *\n   * @example\n   * import { greaterThanOrEqualTo } from \"effect/Number\"\n   *\n   * assert.deepStrictEqual(greaterThanOrEqualTo(2, 3), false)\n   * assert.deepStrictEqual(greaterThanOrEqualTo(3, 3), true)\n   * assert.deepStrictEqual(greaterThanOrEqualTo(4, 3), true)\n   *\n   * @category predicates\n   * @since 2.0.0\n   */\n  (that: number): (self: number) => boolean\n  /**\n   * Returns a function that checks if a given `number` is greater than or equal to the provided one.\n   *\n   * @param self - The first `number` to compare with.\n   * @param that - The second `number` to compare with.\n   *\n   * @example\n   * import { greaterThanOrEqualTo } from \"effect/Number\"\n   *\n   * assert.deepStrictEqual(greaterThanOrEqualTo(2, 3), false)\n   * assert.deepStrictEqual(greaterThanOrEqualTo(3, 3), true)\n   * assert.deepStrictEqual(greaterThanOrEqualTo(4, 3), true)\n   *\n   * @category predicates\n   * @since 2.0.0\n   */\n  (self: number, that: number): boolean\n} = order.greaterThanOrEqualTo(Order)\n\n/**\n * Checks if a `number` is between a `minimum` and `maximum` value (inclusive).\n *\n * @param self - The `number` to check.\n * @param minimum - The `minimum` value to check.\n * @param maximum - The `maximum` value to check.\n *\n * @example\n * import { Number } from \"effect\"\n *\n * const between = Number.between({ minimum: 0, maximum: 5 })\n *\n * assert.deepStrictEqual(between(3), true)\n * assert.deepStrictEqual(between(-1), false)\n * assert.deepStrictEqual(between(6), false)\n *\n * @category predicates\n * @since 2.0.0\n */\nexport const between: {\n  /**\n   * Checks if a `number` is between a `minimum` and `maximum` value (inclusive).\n   *\n   * @param self - The `number` to check.\n   * @param minimum - The `minimum` value to check.\n   * @param maximum - The `maximum` value to check.\n   *\n   * @example\n   * import { Number } from \"effect\"\n   *\n   * const between = Number.between({ minimum: 0, maximum: 5 })\n   *\n   * assert.deepStrictEqual(between(3), true)\n   * assert.deepStrictEqual(between(-1), false)\n   * assert.deepStrictEqual(between(6), false)\n   *\n   * @category predicates\n   * @since 2.0.0\n   */\n  (\n    options: {\n      minimum: number\n      maximum: number\n    }\n  ): (self: number) => boolean\n  /**\n   * Checks if a `number` is between a `minimum` and `maximum` value (inclusive).\n   *\n   * @param self - The `number` to check.\n   * @param minimum - The `minimum` value to check.\n   * @param maximum - The `maximum` value to check.\n   *\n   * @example\n   * import { Number } from \"effect\"\n   *\n   * const between = Number.between({ minimum: 0, maximum: 5 })\n   *\n   * assert.deepStrictEqual(between(3), true)\n   * assert.deepStrictEqual(between(-1), false)\n   * assert.deepStrictEqual(between(6), false)\n   *\n   * @category predicates\n   * @since 2.0.0\n   */\n  (\n    self: number,\n    options: {\n      minimum: number\n      maximum: number\n    }\n  ): boolean\n} = order.between(Order)\n\n/**\n * Restricts the given `number` to be within the range specified by the `minimum` and `maximum` values.\n *\n * - If the `number` is less than the `minimum` value, the function returns the `minimum` value.\n * - If the `number` is greater than the `maximum` value, the function returns the `maximum` value.\n * - Otherwise, it returns the original `number`.\n *\n * @param self - The `number` to be clamped.\n * @param minimum - The lower end of the range.\n * @param maximum - The upper end of the range.\n *\n * @example\n * import { Number } from \"effect\"\n *\n * const clamp = Number.clamp({ minimum: 1, maximum: 5 })\n *\n * assert.equal(clamp(3), 3)\n * assert.equal(clamp(0), 1)\n * assert.equal(clamp(6), 5)\n *\n * @since 2.0.0\n */\nexport const clamp: {\n  /**\n   * Restricts the given `number` to be within the range specified by the `minimum` and `maximum` values.\n   *\n   * - If the `number` is less than the `minimum` value, the function returns the `minimum` value.\n   * - If the `number` is greater than the `maximum` value, the function returns the `maximum` value.\n   * - Otherwise, it returns the original `number`.\n   *\n   * @param self - The `number` to be clamped.\n   * @param minimum - The lower end of the range.\n   * @param maximum - The upper end of the range.\n   *\n   * @example\n   * import { Number } from \"effect\"\n   *\n   * const clamp = Number.clamp({ minimum: 1, maximum: 5 })\n   *\n   * assert.equal(clamp(3), 3)\n   * assert.equal(clamp(0), 1)\n   * assert.equal(clamp(6), 5)\n   *\n   * @since 2.0.0\n   */\n  (\n    options: {\n      minimum: number\n      maximum: number\n    }\n  ): (self: number) => number\n  /**\n   * Restricts the given `number` to be within the range specified by the `minimum` and `maximum` values.\n   *\n   * - If the `number` is less than the `minimum` value, the function returns the `minimum` value.\n   * - If the `number` is greater than the `maximum` value, the function returns the `maximum` value.\n   * - Otherwise, it returns the original `number`.\n   *\n   * @param self - The `number` to be clamped.\n   * @param minimum - The lower end of the range.\n   * @param maximum - The upper end of the range.\n   *\n   * @example\n   * import { Number } from \"effect\"\n   *\n   * const clamp = Number.clamp({ minimum: 1, maximum: 5 })\n   *\n   * assert.equal(clamp(3), 3)\n   * assert.equal(clamp(0), 1)\n   * assert.equal(clamp(6), 5)\n   *\n   * @since 2.0.0\n   */\n  (\n    self: number,\n    options: {\n      minimum: number\n      maximum: number\n    }\n  ): number\n} = order.clamp(Order)\n\n/**\n * Returns the minimum between two `number`s.\n *\n * @param self - The first `number`.\n * @param that - The second `number`.\n *\n * @example\n * import { min } from \"effect/Number\"\n *\n * assert.deepStrictEqual(min(2, 3), 2)\n *\n * @since 2.0.0\n */\nexport const min: {\n  /**\n   * Returns the minimum between two `number`s.\n   *\n   * @param self - The first `number`.\n   * @param that - The second `number`.\n   *\n   * @example\n   * import { min } from \"effect/Number\"\n   *\n   * assert.deepStrictEqual(min(2, 3), 2)\n   *\n   * @since 2.0.0\n   */\n  (that: number): (self: number) => number\n  /**\n   * Returns the minimum between two `number`s.\n   *\n   * @param self - The first `number`.\n   * @param that - The second `number`.\n   *\n   * @example\n   * import { min } from \"effect/Number\"\n   *\n   * assert.deepStrictEqual(min(2, 3), 2)\n   *\n   * @since 2.0.0\n   */\n  (self: number, that: number): number\n} = order.min(Order)\n\n/**\n * Returns the maximum between two `number`s.\n *\n * @param self - The first `number`.\n * @param that - The second `number`.\n *\n * @example\n * import { max } from \"effect/Number\"\n *\n * assert.deepStrictEqual(max(2, 3), 3)\n *\n * @since 2.0.0\n */\nexport const max: {\n  /**\n   * Returns the maximum between two `number`s.\n   *\n   * @param self - The first `number`.\n   * @param that - The second `number`.\n   *\n   * @example\n   * import { max } from \"effect/Number\"\n   *\n   * assert.deepStrictEqual(max(2, 3), 3)\n   *\n   * @since 2.0.0\n   */\n  (that: number): (self: number) => number\n  /**\n   * Returns the maximum between two `number`s.\n   *\n   * @param self - The first `number`.\n   * @param that - The second `number`.\n   *\n   * @example\n   * import { max } from \"effect/Number\"\n   *\n   * assert.deepStrictEqual(max(2, 3), 3)\n   *\n   * @since 2.0.0\n   */\n  (self: number, that: number): number\n} = order.max(Order)\n\n/**\n * Determines the sign of a given `number`.\n *\n * @param n - The `number` to determine the sign of.\n *\n * @example\n * import { sign } from \"effect/Number\"\n *\n * assert.deepStrictEqual(sign(-5), -1)\n * assert.deepStrictEqual(sign(0), 0)\n * assert.deepStrictEqual(sign(5), 1)\n *\n * @category math\n * @since 2.0.0\n */\nexport const sign = (n: number): Ordering => Order(n, 0)\n\n/**\n * Takes an `Iterable` of `number`s and returns their sum as a single `number`.\n *\n * @param collection - The collection of `number`s to sum.\n *\n * @example\n * import { sumAll } from \"effect/Number\"\n *\n * assert.deepStrictEqual(sumAll([2, 3, 4]), 9)\n *\n * @category math\n * @since 2.0.0\n */\nexport const sumAll = (collection: Iterable<number>): number => {\n  let out = 0\n  for (const n of collection) {\n    out += n\n  }\n  return out\n}\n\n/**\n * Takes an `Iterable` of `number`s and returns their multiplication as a single `number`.\n *\n * @param collection - The collection of `number`s to multiply.\n *\n * @example\n * import { multiplyAll } from \"effect/Number\"\n *\n * assert.deepStrictEqual(multiplyAll([2, 3, 4]), 24)\n *\n * @category math\n * @since 2.0.0\n */\nexport const multiplyAll = (collection: Iterable<number>): number => {\n  let out = 1\n  for (const n of collection) {\n    if (n === 0) {\n      return 0\n    }\n    out *= n\n  }\n  return out\n}\n\n/**\n * Returns the remainder left over when one operand is divided by a second operand.\n *\n * It always takes the sign of the dividend.\n *\n * @param self - The dividend.\n * @param divisor - The divisor.\n *\n * @example\n * import { remainder } from \"effect/Number\"\n *\n * assert.deepStrictEqual(remainder(2, 2), 0)\n * assert.deepStrictEqual(remainder(3, 2), 1)\n * assert.deepStrictEqual(remainder(-4, 2), -0)\n *\n * @category math\n * @since 2.0.0\n */\nexport const remainder: {\n  /**\n   * Returns the remainder left over when one operand is divided by a second operand.\n   *\n   * It always takes the sign of the dividend.\n   *\n   * @param self - The dividend.\n   * @param divisor - The divisor.\n   *\n   * @example\n   * import { remainder } from \"effect/Number\"\n   *\n   * assert.deepStrictEqual(remainder(2, 2), 0)\n   * assert.deepStrictEqual(remainder(3, 2), 1)\n   * assert.deepStrictEqual(remainder(-4, 2), -0)\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (divisor: number): (self: number) => number\n  /**\n   * Returns the remainder left over when one operand is divided by a second operand.\n   *\n   * It always takes the sign of the dividend.\n   *\n   * @param self - The dividend.\n   * @param divisor - The divisor.\n   *\n   * @example\n   * import { remainder } from \"effect/Number\"\n   *\n   * assert.deepStrictEqual(remainder(2, 2), 0)\n   * assert.deepStrictEqual(remainder(3, 2), 1)\n   * assert.deepStrictEqual(remainder(-4, 2), -0)\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (self: number, divisor: number): number\n} = dual(2, (self: number, divisor: number): number => {\n  // https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\n  const selfDecCount = (self.toString().split(\".\")[1] || \"\").length\n  const divisorDecCount = (divisor.toString().split(\".\")[1] || \"\").length\n  const decCount = selfDecCount > divisorDecCount ? selfDecCount : divisorDecCount\n  const selfInt = parseInt(self.toFixed(decCount).replace(\".\", \"\"))\n  const divisorInt = parseInt(divisor.toFixed(decCount).replace(\".\", \"\"))\n  return (selfInt % divisorInt) / Math.pow(10, decCount)\n})\n\n/**\n * Returns the next power of 2 from the given number.\n *\n * @param self - The number to find the next power of 2 from.\n *\n * @example\n * import { nextPow2 } from \"effect/Number\"\n *\n * assert.deepStrictEqual(nextPow2(5), 8)\n * assert.deepStrictEqual(nextPow2(17), 32)\n *\n * @category math\n * @since 2.0.0\n */\nexport const nextPow2 = (n: number): number => {\n  const nextPow = Math.ceil(Math.log(n) / Math.log(2))\n  return Math.max(Math.pow(2, nextPow), 2)\n}\n\n/**\n * Tries to parse a `number` from a `string` using the `Number()` function.\n * The following special string values are supported: \"NaN\", \"Infinity\", \"-Infinity\".\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const parse = (s: string): Option<number> => {\n  if (s === \"NaN\") {\n    return option.some(NaN)\n  }\n  if (s === \"Infinity\") {\n    return option.some(Infinity)\n  }\n  if (s === \"-Infinity\") {\n    return option.some(-Infinity)\n  }\n  if (s.trim() === \"\") {\n    return option.none\n  }\n  const n = Number(s)\n  return Number.isNaN(n)\n    ? option.none\n    : option.some(n)\n}\n\n/**\n * Returns the number rounded with the given precision.\n *\n * @param self - The number to round\n * @param precision - The precision\n *\n * @example\n * import { round } from \"effect/Number\"\n *\n * assert.deepStrictEqual(round(1.1234, 2), 1.12)\n * assert.deepStrictEqual(round(1.567, 2), 1.57)\n *\n * @category math\n * @since 3.8.0\n */\nexport const round: {\n  /**\n   * Returns the number rounded with the given precision.\n   *\n   * @param self - The number to round\n   * @param precision - The precision\n   *\n   * @example\n   * import { round } from \"effect/Number\"\n   *\n   * assert.deepStrictEqual(round(1.1234, 2), 1.12)\n   * assert.deepStrictEqual(round(1.567, 2), 1.57)\n   *\n   * @category math\n   * @since 3.8.0\n   */\n  (precision: number): (self: number) => number\n  /**\n   * Returns the number rounded with the given precision.\n   *\n   * @param self - The number to round\n   * @param precision - The precision\n   *\n   * @example\n   * import { round } from \"effect/Number\"\n   *\n   * assert.deepStrictEqual(round(1.1234, 2), 1.12)\n   * assert.deepStrictEqual(round(1.567, 2), 1.57)\n   *\n   * @category math\n   * @since 3.8.0\n   */\n  (self: number, precision: number): number\n} = dual(2, (self: number, precision: number): number => {\n  const factor = Math.pow(10, precision)\n  return Math.round(self * factor) / factor\n})\n"],"names":["equivalence","dual","option","order","predicate","isNumber","sum","self","that","multiply","subtract","divide","none","some","unsafeDivide","increment","n","decrement","Equivalence","number","Order","lessThan","lessThanOrEqualTo","greaterThan","greaterThanOrEqualTo","between","clamp","min","max","sign","sumAll","collection","out","multiplyAll","remainder","divisor","selfDecCount","toString","split","length","divisorDecCount","decCount","selfInt","parseInt","toFixed","replace","divisorInt","Math","pow","nextPow2","nextPow","ceil","log","parse","s","NaN","Infinity","trim","Number","isNaN","round","precision","factor"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 7691, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7697, "column": 0}, "map": {"version":3,"file":"RegExp.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/RegExp.ts"],"sourcesContent":["/**\n * This module provides utility functions for working with RegExp in TypeScript.\n *\n * @since 2.0.0\n */\nimport * as predicate from \"./Predicate.js\"\n\n/**\n * Tests if a value is a `RegExp`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { RegExp } from \"effect\"\n *\n * assert.deepStrictEqual(RegExp.isRegExp(/a/), true)\n * assert.deepStrictEqual(RegExp.isRegExp(\"a\"), false)\n *\n * @category guards\n * @since 3.9.0\n */\nexport const isRegExp: (input: unknown) => input is RegExp = predicate.isRegExp\n\n/**\n * Escapes special characters in a regular expression pattern.\n *\n * @example\n * import { RegExp } from \"effect\"\n *\n * assert.deepStrictEqual(RegExp.escape(\"a*b\"), \"a\\\\*b\")\n *\n * @since 2.0.0\n */\nexport const escape = (string: string): string => string.replace(/[/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\")\n"],"names":["predicate","isRegExp","escape","string","replace"],"mappings":"AAAA;;;;;;;;AAKA,OAAO,KAAKA,SAAS,MAAM,gBAAgB;;AAgBpC,MAAMC,QAAQ,GAAwCD,SAAS,gMAACC,QAAQ;AAYxE,MAAMC,MAAM,IAAIC,MAAc,GAAaA,MAAM,CAACC,OAAO,CAAC,sBAAsB,EAAE,MAAM,CAAC","ignoreList":[0]}},
    {"offset": {"line": 7709, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7715, "column": 0}, "map": {"version":3,"file":"Clock.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Clock.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Context from \"./Context.js\"\nimport type * as Duration from \"./Duration.js\"\nimport type * as Effect from \"./Effect.js\"\nimport * as internal from \"./internal/clock.js\"\nimport * as defaultServices from \"./internal/defaultServices.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const ClockTypeId: unique symbol = internal.ClockTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type ClockTypeId = typeof ClockTypeId\n\n/**\n * Represents a time-based clock which provides functionality related to time\n * and scheduling.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Clock {\n  readonly [ClockTypeId]: ClockTypeId\n  /**\n   * Unsafely returns the current time in milliseconds.\n   */\n  unsafeCurrentTimeMillis(): number\n  /**\n   * Returns the current time in milliseconds.\n   */\n  readonly currentTimeMillis: Effect.Effect<number>\n  /**\n   * Unsafely returns the current time in nanoseconds.\n   */\n  unsafeCurrentTimeNanos(): bigint\n  /**\n   * Returns the current time in nanoseconds.\n   */\n  readonly currentTimeNanos: Effect.Effect<bigint>\n  /**\n   * Asynchronously sleeps for the specified duration.\n   */\n  sleep(duration: Duration.Duration): Effect.Effect<void>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type CancelToken = () => boolean\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type Task = () => void\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface ClockScheduler {\n  /**\n   * Unsafely schedules the specified task for the specified duration.\n   */\n  unsafeSchedule(task: Task, duration: Duration.Duration): CancelToken\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (_: void) => Clock = internal.make\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const sleep: (duration: Duration.DurationInput) => Effect.Effect<void> = defaultServices.sleep\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const currentTimeMillis: Effect.Effect<number> = defaultServices.currentTimeMillis\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const currentTimeNanos: Effect.Effect<bigint> = defaultServices.currentTimeNanos\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const clockWith: <A, E, R>(f: (clock: Clock) => Effect.Effect<A, E, R>) => Effect.Effect<A, E, R> =\n  defaultServices.clockWith\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const Clock: Context.Tag<Clock, Clock> = internal.clockTag\n"],"names":["internal","defaultServices","ClockTypeId","make","sleep","currentTimeMillis","currentTimeNanos","clockWith","Clock","clockTag"],"mappings":";;;;;;;;;AAMA,OAAO,KAAKA,QAAQ,MAAM,qBAAqB;AAC/C,OAAO,KAAKC,eAAe,MAAM,+BAA+B;;;AAMzD,MAAMC,WAAW,GAAkBF,QAAQ,yMAACE,WAAW;AAkEvD,MAAMC,IAAI,GAAuBH,QAAQ,yMAACG,IAAI;AAM9C,MAAMC,KAAK,GAA8DH,eAAe,4MAACG,KAAK;AAM9F,MAAMC,iBAAiB,GAA0BJ,eAAe,4MAACI,iBAAiB;AAMlF,MAAMC,gBAAgB,GAA0BL,eAAe,4MAACK,gBAAgB;AAMhF,MAAMC,SAAS,GACpBN,eAAe,4MAACM,SAAS;AAMpB,MAAMC,KAAK,GAA8BR,QAAQ,yMAACS,QAAQ","ignoreList":[0]}},
    {"offset": {"line": 7735, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7741, "column": 0}, "map": {"version":3,"file":"FiberRefs.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/FiberRefs.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Arr from \"./Array.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport type * as FiberRef from \"./FiberRef.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport * as internal from \"./internal/fiberRefs.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const FiberRefsSym: unique symbol = internal.FiberRefsSym\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type FiberRefsSym = typeof FiberRefsSym\n\n/**\n * `FiberRefs` is a data type that represents a collection of `FiberRef` values.\n *\n * This allows safely propagating `FiberRef` values across fiber boundaries, for\n * example between an asynchronous producer and consumer.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface FiberRefs extends Pipeable {\n  readonly [FiberRefsSym]: FiberRefsSym\n  readonly locals: Map<FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>>\n}\n\nconst delete_: {\n  <A>(fiberRef: FiberRef.FiberRef<A>): (self: FiberRefs) => FiberRefs\n  <A>(self: FiberRefs, fiberRef: FiberRef.FiberRef<A>): FiberRefs\n} = internal.delete_\n\nexport {\n  /**\n   * Deletes the specified `FiberRef` from the `FibterRefs`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  delete_ as delete\n}\n\n/**\n * Returns a set of each `FiberRef` in this collection.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const fiberRefs: (self: FiberRefs) => HashSet.HashSet<FiberRef.FiberRef<any>> = internal.fiberRefs\n\n/**\n * Forks this collection of fiber refs as the specified child fiber id. This\n * will potentially modify the value of the fiber refs, as determined by the\n * individual fiber refs that make up the collection.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const forkAs: {\n  /**\n   * Forks this collection of fiber refs as the specified child fiber id. This\n   * will potentially modify the value of the fiber refs, as determined by the\n   * individual fiber refs that make up the collection.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (childId: FiberId.Single): (self: FiberRefs) => FiberRefs\n  /**\n   * Forks this collection of fiber refs as the specified child fiber id. This\n   * will potentially modify the value of the fiber refs, as determined by the\n   * individual fiber refs that make up the collection.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: FiberRefs, childId: FiberId.Single): FiberRefs\n} = internal.forkAs\n\n/**\n * Gets the value of the specified `FiberRef` in this collection of `FiberRef`\n * values if it exists or `None` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const get: {\n  /**\n   * Gets the value of the specified `FiberRef` in this collection of `FiberRef`\n   * values if it exists or `None` otherwise.\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  <A>(fiberRef: FiberRef.FiberRef<A>): (self: FiberRefs) => Option.Option<A>\n  /**\n   * Gets the value of the specified `FiberRef` in this collection of `FiberRef`\n   * values if it exists or `None` otherwise.\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  <A>(self: FiberRefs, fiberRef: FiberRef.FiberRef<A>): Option.Option<A>\n} = internal.get\n\n/**\n * Gets the value of the specified `FiberRef` in this collection of `FiberRef`\n * values if it exists or the `initial` value of the `FiberRef` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const getOrDefault: {\n  /**\n   * Gets the value of the specified `FiberRef` in this collection of `FiberRef`\n   * values if it exists or the `initial` value of the `FiberRef` otherwise.\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  <A>(fiberRef: FiberRef.FiberRef<A>): (self: FiberRefs) => A\n  /**\n   * Gets the value of the specified `FiberRef` in this collection of `FiberRef`\n   * values if it exists or the `initial` value of the `FiberRef` otherwise.\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  <A>(self: FiberRefs, fiberRef: FiberRef.FiberRef<A>): A\n} = internal.getOrDefault\n\n/**\n * Joins this collection of fiber refs to the specified collection, as the\n * specified fiber id. This will perform diffing and merging to ensure\n * preservation of maximum information from both child and parent refs.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const joinAs: {\n  /**\n   * Joins this collection of fiber refs to the specified collection, as the\n   * specified fiber id. This will perform diffing and merging to ensure\n   * preservation of maximum information from both child and parent refs.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (fiberId: FiberId.Single, that: FiberRefs): (self: FiberRefs) => FiberRefs\n  /**\n   * Joins this collection of fiber refs to the specified collection, as the\n   * specified fiber id. This will perform diffing and merging to ensure\n   * preservation of maximum information from both child and parent refs.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: FiberRefs, fiberId: FiberId.Single, that: FiberRefs): FiberRefs\n} = internal.joinAs\n\n/**\n * Set each ref to either its value or its default.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const setAll: (self: FiberRefs) => Effect.Effect<void> = internal.setAll\n\n/**\n * Updates the value of the specified `FiberRef` using the provided `FiberId`\n *\n * @since 2.0.0\n * @category utils\n */\nexport const updateAs: {\n  /**\n   * Updates the value of the specified `FiberRef` using the provided `FiberId`\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(\n    options: {\n      readonly fiberId: FiberId.Single\n      readonly fiberRef: FiberRef.FiberRef<A>\n      readonly value: A\n    }\n  ): (self: FiberRefs) => FiberRefs\n  /**\n   * Updates the value of the specified `FiberRef` using the provided `FiberId`\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(\n    self: FiberRefs,\n    options: {\n      readonly fiberId: FiberId.Single\n      readonly fiberRef: FiberRef.FiberRef<A>\n      readonly value: A\n    }\n  ): FiberRefs\n} = internal.updateAs\n\n/**\n * Updates the values of the specified `FiberRef` & value pairs using the provided `FiberId`\n *\n * @since 2.0.0\n * @category utils\n */\nexport const updateManyAs: {\n  /**\n   * Updates the values of the specified `FiberRef` & value pairs using the provided `FiberId`\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (\n    options: {\n      readonly forkAs?: FiberId.Single | undefined\n      readonly entries: readonly [\n        readonly [\n          FiberRef.FiberRef<any>,\n          readonly [readonly [FiberId.Single, any], ...Array<readonly [FiberId.Single, any]>]\n        ],\n        ...Array<\n          readonly [\n            FiberRef.FiberRef<any>,\n            readonly [readonly [FiberId.Single, any], ...Array<readonly [FiberId.Single, any]>]\n          ]\n        >\n      ]\n    }\n  ): (self: FiberRefs) => FiberRefs\n  /**\n   * Updates the values of the specified `FiberRef` & value pairs using the provided `FiberId`\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (\n    self: FiberRefs,\n    options: {\n      readonly forkAs?: FiberId.Single | undefined\n      readonly entries: readonly [\n        readonly [\n          FiberRef.FiberRef<any>,\n          readonly [readonly [FiberId.Single, any], ...Array<readonly [FiberId.Single, any]>]\n        ],\n        ...Array<\n          readonly [\n            FiberRef.FiberRef<any>,\n            readonly [readonly [FiberId.Single, any], ...Array<readonly [FiberId.Single, any]>]\n          ]\n        >\n      ]\n    }\n  ): FiberRefs\n} = internal.updateManyAs\n\n/**\n * Note: it will not copy the provided Map, make sure to provide a fresh one.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeMake: (\n  fiberRefLocals: Map<FiberRef.FiberRef<any>, Arr.NonEmptyReadonlyArray<readonly [FiberId.Single, any]>>\n) => FiberRefs = internal.unsafeMake\n\n/**\n * The empty collection of `FiberRef` values.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const empty: () => FiberRefs = internal.empty\n"],"names":["internal","FiberRefsSym","delete_","delete","fiberRefs","forkAs","get","getOrDefault","joinAs","setAll","updateAs","updateManyAs","unsafeMake","empty"],"mappings":";;;;;;;;;;;;;;AAQA,OAAO,KAAKA,QAAQ,MAAM,yBAAyB;;AAQ5C,MAAMC,YAAY,GAAkBD,QAAQ,6MAACC,YAAY;AAsBhE,MAAMC,OAAO,GAGTF,QAAQ,6MAACE,OAAO;;AAkBb,MAAME,SAAS,GAAiEJ,QAAQ,6MAACI,SAAS;AAUlG,MAAMC,MAAM,GAmBfL,QAAQ,6MAACK,MAAM;AASZ,MAAMC,GAAG,GAiBZN,QAAQ,6MAACM,GAAG;AAST,MAAMC,YAAY,GAiBrBP,QAAQ,6MAACO,YAAY;AAUlB,MAAMC,MAAM,GAmBfR,QAAQ,6MAACQ,MAAM;AAQZ,MAAMC,MAAM,GAA6CT,QAAQ,6MAACS,MAAM;AAQxE,MAAMC,QAAQ,GA4BjBV,QAAQ,6MAACU,QAAQ;AAQd,MAAMC,YAAY,GAgDrBX,QAAQ,6MAACW,YAAY;AAQlB,MAAMC,UAAU,GAENZ,QAAQ,6MAACY,UAAU;AAQ7B,MAAMC,KAAK,GAAoBb,QAAQ,6MAACa,KAAK","ignoreList":[0]}},
    {"offset": {"line": 7770, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7776, "column": 0}, "map": {"version":3,"file":"LogLevel.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/LogLevel.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Effect from \"./Effect.js\"\nimport { dual, pipe } from \"./Function.js\"\nimport * as core from \"./internal/core.js\"\nimport * as number from \"./Number.js\"\nimport * as order from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\n\n/**\n * A `LogLevel` represents the log level associated with an individual logging\n * operation. Log levels are used both to describe the granularity (or\n * importance) of individual log statements, as well as to enable tuning\n * verbosity of log output.\n *\n * @since 2.0.0\n * @category model\n * @property ordinal - The priority of the log message. Larger values indicate higher priority.\n * @property label - A label associated with the log level.\n * @property syslog -The syslog severity level of the log level.\n */\nexport type LogLevel = All | Fatal | Error | Warning | Info | Debug | Trace | None\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport type Literal = LogLevel[\"_tag\"]\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface All extends Pipeable {\n  readonly _tag: \"All\"\n  readonly label: \"ALL\"\n  readonly syslog: 0\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Fatal extends Pipeable {\n  readonly _tag: \"Fatal\"\n  readonly label: \"FATAL\"\n  readonly syslog: 2\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Error extends Pipeable {\n  readonly _tag: \"Error\"\n  readonly label: \"ERROR\"\n  readonly syslog: 3\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Warning extends Pipeable {\n  readonly _tag: \"Warning\"\n  readonly label: \"WARN\"\n  readonly syslog: 4\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Info extends Pipeable {\n  readonly _tag: \"Info\"\n  readonly label: \"INFO\"\n  readonly syslog: 6\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Debug extends Pipeable {\n  readonly _tag: \"Debug\"\n  readonly label: \"DEBUG\"\n  readonly syslog: 7\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Trace extends Pipeable {\n  readonly _tag: \"Trace\"\n  readonly label: \"TRACE\"\n  readonly syslog: 7\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface None extends Pipeable {\n  readonly _tag: \"None\"\n  readonly label: \"OFF\"\n  readonly syslog: 7\n  readonly ordinal: number\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const All: LogLevel = core.logLevelAll\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Fatal: LogLevel = core.logLevelFatal\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Error: LogLevel = core.logLevelError\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Warning: LogLevel = core.logLevelWarning\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Info: LogLevel = core.logLevelInfo\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Debug: LogLevel = core.logLevelDebug\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Trace: LogLevel = core.logLevelTrace\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const None: LogLevel = core.logLevelNone\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const allLevels = core.allLogLevels\n\n/**\n * Locally applies the specified `LogLevel` to an `Effect` workflow, reverting\n * to the previous `LogLevel` after the `Effect` workflow completes.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const locally: {\n  /**\n   * Locally applies the specified `LogLevel` to an `Effect` workflow, reverting\n   * to the previous `LogLevel` after the `Effect` workflow completes.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: LogLevel): <A, E, R>(use: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n  /**\n   * Locally applies the specified `LogLevel` to an `Effect` workflow, reverting\n   * to the previous `LogLevel` after the `Effect` workflow completes.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(use: Effect.Effect<A, E, R>, self: LogLevel): Effect.Effect<A, E, R>\n} = dual(\n  2,\n  <A, E, R>(use: Effect.Effect<A, E, R>, self: LogLevel): Effect.Effect<A, E, R> =>\n    core.fiberRefLocally(use, core.currentLogLevel, self)\n)\n\n/**\n * @since 2.0.0\n * @category instances\n */\nexport const Order: order.Order<LogLevel> = pipe(\n  number.Order,\n  order.mapInput((level: LogLevel) => level.ordinal)\n)\n\n/**\n * @since 2.0.0\n * @category ordering\n */\nexport const lessThan: {\n  /**\n   * @since 2.0.0\n   * @category ordering\n   */\n  (that: LogLevel): (self: LogLevel) => boolean\n  /**\n   * @since 2.0.0\n   * @category ordering\n   */\n  (self: LogLevel, that: LogLevel): boolean\n} = order.lessThan(Order)\n\n/**\n * @since 2.0.0\n * @category ordering\n */\nexport const lessThanEqual: {\n  /**\n   * @since 2.0.0\n   * @category ordering\n   */\n  (that: LogLevel): (self: LogLevel) => boolean\n  /**\n   * @since 2.0.0\n   * @category ordering\n   */\n  (self: LogLevel, that: LogLevel): boolean\n} = order.lessThanOrEqualTo(Order)\n\n/**\n * @since 2.0.0\n * @category ordering\n */\nexport const greaterThan: {\n  /**\n   * @since 2.0.0\n   * @category ordering\n   */\n  (that: LogLevel): (self: LogLevel) => boolean\n  /**\n   * @since 2.0.0\n   * @category ordering\n   */\n  (self: LogLevel, that: LogLevel): boolean\n} = order.greaterThan(Order)\n\n/**\n * @since 2.0.0\n * @category ordering\n */\nexport const greaterThanEqual: {\n  /**\n   * @since 2.0.0\n   * @category ordering\n   */\n  (that: LogLevel): (self: LogLevel) => boolean\n  /**\n   * @since 2.0.0\n   * @category ordering\n   */\n  (self: LogLevel, that: LogLevel): boolean\n} = order.greaterThanOrEqualTo(Order)\n\n/**\n * @since 2.0.0\n * @category conversions\n */\nexport const fromLiteral = (literal: Literal): LogLevel => {\n  switch (literal) {\n    case \"All\":\n      return All\n    case \"Debug\":\n      return Debug\n    case \"Error\":\n      return Error\n    case \"Fatal\":\n      return Fatal\n    case \"Info\":\n      return Info\n    case \"Trace\":\n      return Trace\n    case \"None\":\n      return None\n    case \"Warning\":\n      return Warning\n  }\n}\n"],"names":["dual","pipe","core","number","order","All","logLevelAll","Fatal","logLevelFatal","Error","logLevelError","Warning","logLevelWarning","Info","logLevelInfo","Debug","logLevelDebug","Trace","logLevelTrace","None","logLevelNone","allLevels","allLogLevels","locally","use","self","fiberRefLocally","currentLogLevel","Order","mapInput","level","ordinal","lessThan","lessThanEqual","lessThanOrEqualTo","greaterThan","greaterThanEqual","greaterThanOrEqualTo","fromLiteral","literal"],"mappings":";;;;;;;;;;;;;;;;;;AAKA,OAAO,KAAKE,IAAI,MAAM,oBAAoB;AAD1C,SAASF,IAAI,EAAEC,IAAI,QAAQ,eAAe;AAE1C,OAAO,KAAKE,MAAM,MAAM,aAAa;AACrC,OAAO,KAAKC,KAAK,MAAM,YAAY;;;;;AAmH5B,MAAMC,GAAG,GAAaH,IAAI,4MAACI,WAAW;AAMtC,MAAMC,KAAK,GAAaL,IAAI,4MAACM,aAAa;AAM1C,MAAMC,KAAK,GAAaP,IAAI,4MAACQ,aAAa;AAM1C,MAAMC,OAAO,GAAaT,IAAI,4MAACU,eAAe;AAM9C,MAAMC,IAAI,GAAaX,IAAI,4MAACY,YAAY;AAMxC,MAAMC,KAAK,GAAab,IAAI,4MAACc,aAAa;AAM1C,MAAMC,KAAK,GAAaf,IAAI,4MAACgB,aAAa;AAM1C,MAAMC,IAAI,GAAajB,IAAI,4MAACkB,YAAY;AAMxC,MAAMC,SAAS,GAAGnB,IAAI,4MAACoB,YAAY;AASnC,MAAMC,OAAO,GAAA,WAAA,+MAiBhBvB,OAAAA,AAAI,EACN,CAAC,EACD,CAAUwB,GAA2B,EAAEC,IAAc,GACnDvB,IAAI,4MAACwB,eAAe,CAACF,GAAG,EAAEtB,IAAI,4MAACyB,eAAe,EAAEF,IAAI,CAAC,CACxD;AAMM,MAAMG,KAAK,GAAA,WAAA,+MAA0B3B,OAAAA,AAAI,EAC9CE,MAAM,gMAACyB,KAAK,EAAA,WAAA,GACZxB,KAAK,gMAACyB,QAAQ,CAAEC,KAAe,IAAKA,KAAK,CAACC,OAAO,CAAC,CACnD;AAMM,MAAMC,QAAQ,GAAA,WAAA,GAWjB5B,KAAK,gMAAC4B,QAAQ,CAACJ,KAAK,CAAC;AAMlB,MAAMK,aAAa,GAAA,WAAA,GAWtB7B,KAAK,gMAAC8B,iBAAiB,CAACN,KAAK,CAAC;AAM3B,MAAMO,WAAW,GAAA,WAAA,GAWpB/B,KAAK,gMAAC+B,WAAW,CAACP,KAAK,CAAC;AAMrB,MAAMQ,gBAAgB,GAAA,WAAA,GAWzBhC,KAAK,gMAACiC,oBAAoB,CAACT,KAAK,CAAC;AAM9B,MAAMU,WAAW,IAAIC,OAAgB,IAAc;IACxD,OAAQA,OAAO;QACb,KAAK,KAAK;YACR,OAAOlC,GAAG;QACZ,KAAK,OAAO;YACV,OAAOU,KAAK;QACd,KAAK,OAAO;YACV,OAAON,KAAK;QACd,KAAK,OAAO;YACV,OAAOF,KAAK;QACd,KAAK,MAAM;YACT,OAAOM,IAAI;QACb,KAAK,OAAO;YACV,OAAOI,KAAK;QACd,KAAK,MAAM;YACT,OAAOE,IAAI;QACb,KAAK,SAAS;YACZ,OAAOR,OAAO;IAClB;AACF,CAAC","ignoreList":[0]}},
    {"offset": {"line": 7837, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7843, "column": 0}, "map": {"version":3,"file":"LogSpan.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/LogSpan.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport * as internal from \"./internal/logSpan.js\"\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface LogSpan {\n  readonly label: string\n  readonly startTime: number\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (label: string, startTime: number) => LogSpan = internal.make\n\n/**\n * @since 2.0.0\n * @category destructors\n */\nexport const render: (now: number) => (self: LogSpan) => string = internal.render\n"],"names":["internal","make","render"],"mappings":"AAAA;;;;;;AAGA,OAAO,KAAKA,QAAQ,MAAM,uBAAuB;;AAe1C,MAAMC,IAAI,GAAkDD,QAAQ,2MAACC,IAAI;AAMzE,MAAMC,MAAM,GAA+CF,QAAQ,2MAACE,MAAM","ignoreList":[0]}},
    {"offset": {"line": 7853, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7859, "column": 0}, "map": {"version":3,"file":"Readable.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Readable.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type { Effect } from \"./Effect.js\"\nimport { dual } from \"./Function.js\"\nimport * as core from \"./internal/core.js\"\nimport { type Pipeable, pipeArguments } from \"./Pipeable.js\"\nimport { hasProperty } from \"./Predicate.js\"\nimport type { NoInfer } from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport const TypeId: unique symbol = Symbol.for(\"effect/Readable\")\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Readable<A, E = never, R = never> extends Pipeable {\n  readonly [TypeId]: TypeId\n  readonly get: Effect<A, E, R>\n}\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isReadable = (u: unknown): u is Readable<unknown, unknown, unknown> => hasProperty(u, TypeId)\n\nconst Proto: Omit<Readable<any>, \"get\"> = {\n  [TypeId]: TypeId,\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make = <A, E, R>(get: Effect<A, E, R>): Readable<A, E, R> => {\n  const self = Object.create(Proto)\n  self.get = get\n  return self\n}\n\n/**\n * @since 2.0.0\n * @category combinators\n */\nexport const map: {\n  /**\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B>(f: (a: NoInfer<A>) => B): <E, R>(fa: Readable<A, E, R>) => Readable<B, E, R>\n  /**\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, E, R, B>(self: Readable<A, E, R>, f: (a: NoInfer<A>) => B): Readable<B, E, R>\n} = dual(\n  2,\n  <A, E, R, B>(self: Readable<A, E, R>, f: (a: NoInfer<A>) => B): Readable<B, E, R> => make(core.map(self.get, f))\n)\n\n/**\n * @since 2.0.0\n * @category combinators\n */\nexport const mapEffect: {\n  /**\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, B, E2, R2>(f: (a: NoInfer<A>) => Effect<B, E2, R2>): <E, R>(fa: Readable<A, E, R>) => Readable<B, E | E2, R | R2>\n  /**\n   * @since 2.0.0\n   * @category combinators\n   */\n  <A, E, R, B, E2, R2>(self: Readable<A, E, R>, f: (a: NoInfer<A>) => Effect<B, E2, R2>): Readable<B, E | E2, R | R2>\n} = dual(2, <A, E, R, B, E2, R2>(\n  self: Readable<A, E, R>,\n  f: (a: NoInfer<A>) => Effect<B, E2, R2>\n): Readable<B, E | E2, R | R2> => make(core.flatMap(self.get, f)))\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const unwrap = <A, E, R, E1, R1>(\n  effect: Effect<Readable<A, E, R>, E1, R1>\n): Readable<A, E | E1, R | R1> =>\n  make(\n    core.flatMap(effect, (s) => s.get)\n  )\n"],"names":["dual","core","pipeArguments","hasProperty","TypeId","Symbol","for","isReadable","u","Proto","pipe","arguments","make","get","self","Object","create","map","f","mapEffect","flatMap","unwrap","effect","s"],"mappings":";;;;;;;;AAOA,SAASG,WAAW,QAAQ,gBAAgB;AAD5C,SAAwBD,aAAa,QAAQ,eAAe;AAF5D,SAASF,IAAI,QAAQ,eAAe;AACpC,OAAO,KAAKC,IAAI,MAAM,oBAAoB;;;;;AASnC,MAAMG,MAAM,GAAA,WAAA,GAAkBC,MAAM,CAACC,GAAG,CAAC,iBAAiB,CAAC;AAqB3D,MAAMC,UAAU,IAAIC,CAAU,GAA+CL,2NAAAA,AAAW,EAACK,CAAC,EAAEJ,MAAM,CAAC;AAE1G,MAAMK,KAAK,GAA+B;IACxC,CAACL,MAAM,CAAA,EAAGA,MAAM;IAChBM,IAAIA,CAAA;QACF,QAAOR,2NAAAA,AAAa,EAAC,IAAI,EAAES,SAAS,CAAC;IACvC;CACD;AAMM,MAAMC,IAAI,IAAaC,GAAoB,IAAuB;IACvE,MAAMC,IAAI,GAAGC,MAAM,CAACC,MAAM,CAACP,KAAK,CAAC;IACjCK,IAAI,CAACD,GAAG,GAAGA,GAAG;IACd,OAAOC,IAAI;AACb,CAAC;AAMM,MAAMG,GAAG,GAAA,WAAA,+MAWZjB,OAAAA,AAAI,EACN,CAAC,EACD,CAAac,IAAuB,EAAEI,CAAuB,GAAwBN,IAAI,CAACX,IAAI,4MAACgB,GAAG,CAACH,IAAI,CAACD,GAAG,EAAEK,CAAC,CAAC,CAAC,CACjH;AAMM,MAAMC,SAAS,GAAA,WAAA,IAWlBnB,kNAAAA,AAAI,EAAC,CAAC,EAAE,CACVc,IAAuB,EACvBI,CAAuC,GACPN,IAAI,CAACX,IAAI,4MAACmB,OAAO,CAACN,IAAI,CAACD,GAAG,EAAEK,CAAC,CAAC,CAAC,CAAC;AAM3D,MAAMG,MAAM,IACjBC,MAAyC,GAEzCV,IAAI,CACFX,IAAI,4MAACmB,OAAO,CAACE,MAAM,GAAGC,CAAC,GAAKA,CAAC,CAACV,GAAG,CAAC,CACnC","ignoreList":[0]}},
    {"offset": {"line": 7891, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7897, "column": 0}, "map": {"version":3,"file":"Ref.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Ref.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Effect from \"./Effect.js\"\nimport * as internal from \"./internal/ref.js\"\nimport type * as Option from \"./Option.js\"\nimport type * as Readable from \"./Readable.js\"\nimport type * as Types from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const RefTypeId: unique symbol = internal.RefTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type RefTypeId = typeof RefTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Ref<in out A> extends Ref.Variance<A>, Effect.Effect<A>, Readable.Readable<A> {\n  modify<B>(f: (a: A) => readonly [B, A]): Effect.Effect<B>\n  readonly [Unify.typeSymbol]?: unknown\n  readonly [Unify.unifySymbol]?: RefUnify<this>\n  readonly [Unify.ignoreSymbol]?: RefUnifyIgnore\n}\n\n/**\n * @category models\n * @since 3.8.0\n */\nexport interface RefUnify<A extends { [Unify.typeSymbol]?: any }> extends Effect.EffectUnify<A> {\n  Ref?: () => Extract<A[Unify.typeSymbol], Ref<any>>\n}\n\n/**\n * @category models\n * @since 3.8.0\n */\nexport interface RefUnifyIgnore extends Effect.EffectUnifyIgnore {\n  Effect?: true\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport declare namespace Ref {\n  /**\n   * @since 2.0.0\n   */\n  export interface Variance<in out A> {\n    readonly [RefTypeId]: {\n      readonly _A: Types.Invariant<A>\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <A>(value: A) => Effect.Effect<Ref<A>> = internal.make\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const get: <A>(self: Ref<A>) => Effect.Effect<A> = internal.get\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const getAndSet: {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(value: A): (self: Ref<A>) => Effect.Effect<A>\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: Ref<A>, value: A): Effect.Effect<A>\n} = internal.getAndSet\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const getAndUpdate: {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(f: (a: A) => A): (self: Ref<A>) => Effect.Effect<A>\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: Ref<A>, f: (a: A) => A): Effect.Effect<A>\n} = internal.getAndUpdate\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const getAndUpdateSome: {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(pf: (a: A) => Option.Option<A>): (self: Ref<A>) => Effect.Effect<A>\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: Ref<A>, pf: (a: A) => Option.Option<A>): Effect.Effect<A>\n} = internal.getAndUpdateSome\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const modify: {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, B>(f: (a: A) => readonly [B, A]): (self: Ref<A>) => Effect.Effect<B>\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, B>(self: Ref<A>, f: (a: A) => readonly [B, A]): Effect.Effect<B>\n} = internal.modify\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const modifySome: {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <B, A>(fallback: B, pf: (a: A) => Option.Option<readonly [B, A]>): (self: Ref<A>) => Effect.Effect<B>\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, B>(self: Ref<A>, fallback: B, pf: (a: A) => Option.Option<readonly [B, A]>): Effect.Effect<B>\n} = internal.modifySome\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const set: {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(value: A): (self: Ref<A>) => Effect.Effect<void>\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: Ref<A>, value: A): Effect.Effect<void>\n} = internal.set\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const setAndGet: {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(value: A): (self: Ref<A>) => Effect.Effect<A>\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: Ref<A>, value: A): Effect.Effect<A>\n} = internal.setAndGet\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const update: {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(f: (a: A) => A): (self: Ref<A>) => Effect.Effect<void>\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: Ref<A>, f: (a: A) => A): Effect.Effect<void>\n} = internal.update\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateAndGet: {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(f: (a: A) => A): (self: Ref<A>) => Effect.Effect<A>\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: Ref<A>, f: (a: A) => A): Effect.Effect<A>\n} = internal.updateAndGet\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateSome: {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(f: (a: A) => Option.Option<A>): (self: Ref<A>) => Effect.Effect<void>\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: Ref<A>, f: (a: A) => Option.Option<A>): Effect.Effect<void>\n} = internal.updateSome\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateSomeAndGet: {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(pf: (a: A) => Option.Option<A>): (self: Ref<A>) => Effect.Effect<A>\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: Ref<A>, pf: (a: A) => Option.Option<A>): Effect.Effect<A>\n} = internal.updateSomeAndGet\n\n/**\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeMake: <A>(value: A) => Ref<A> = internal.unsafeMake\n"],"names":["internal","RefTypeId","make","get","getAndSet","getAndUpdate","getAndUpdateSome","modify","modifySome","set","setAndGet","update","updateAndGet","updateSome","updateSomeAndGet","unsafeMake"],"mappings":";;;;;;;;;;;;;;;;;AAIA,OAAO,KAAKA,QAAQ,MAAM,mBAAmB;;AAUtC,MAAMC,SAAS,GAAkBD,QAAQ,uMAACC,SAAS;AAsDnD,MAAMC,IAAI,GAA2CF,QAAQ,uMAACE,IAAI;AAMlE,MAAMC,GAAG,GAA0CH,QAAQ,uMAACG,GAAG;AAM/D,MAAMC,SAAS,GAWlBJ,QAAQ,uMAACI,SAAS;AAMf,MAAMC,YAAY,GAWrBL,QAAQ,uMAACK,YAAY;AAMlB,MAAMC,gBAAgB,GAWzBN,QAAQ,uMAACM,gBAAgB;AAMtB,MAAMC,MAAM,GAWfP,QAAQ,uMAACO,MAAM;AAMZ,MAAMC,UAAU,GAWnBR,QAAQ,uMAACQ,UAAU;AAMhB,MAAMC,GAAG,GAWZT,QAAQ,uMAACS,GAAG;AAMT,MAAMC,SAAS,GAWlBV,QAAQ,uMAACU,SAAS;AAMf,MAAMC,MAAM,GAWfX,QAAQ,uMAACW,MAAM;AAMZ,MAAMC,YAAY,GAWrBZ,QAAQ,uMAACY,YAAY;AAMlB,MAAMC,UAAU,GAWnBb,QAAQ,uMAACa,UAAU;AAMhB,MAAMC,gBAAgB,GAWzBd,QAAQ,uMAACc,gBAAgB;AAMtB,MAAMC,UAAU,GAA4Bf,QAAQ,uMAACe,UAAU","ignoreList":[0]}},
    {"offset": {"line": 7931, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7937, "column": 0}, "map": {"version":3,"file":"Tracer.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Tracer.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Context from \"./Context.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Exit from \"./Exit.js\"\nimport type * as Fiber from \"./Fiber.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport * as defaultServices from \"./internal/defaultServices.js\"\nimport * as internal from \"./internal/tracer.js\"\nimport type * as Option from \"./Option.js\"\n\n/**\n * @since 2.0.0\n */\nexport const TracerTypeId: unique symbol = internal.TracerTypeId\n\n/**\n * @since 2.0.0\n */\nexport type TracerTypeId = typeof TracerTypeId\n\n/**\n * @since 2.0.0\n */\nexport interface Tracer {\n  readonly [TracerTypeId]: TracerTypeId\n  span(\n    name: string,\n    parent: Option.Option<AnySpan>,\n    context: Context.Context<never>,\n    links: ReadonlyArray<SpanLink>,\n    startTime: bigint,\n    kind: SpanKind\n  ): Span\n  context<X>(f: () => X, fiber: Fiber.RuntimeFiber<any, any>): X\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type SpanStatus = {\n  _tag: \"Started\"\n  startTime: bigint\n} | {\n  _tag: \"Ended\"\n  startTime: bigint\n  endTime: bigint\n  exit: Exit.Exit<unknown, unknown>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type AnySpan = Span | ExternalSpan\n\n/**\n * @since 2.0.0\n * @category tags\n */\nexport interface ParentSpan {\n  readonly _: unique symbol\n}\n\n/**\n * @since 2.0.0\n * @category tags\n */\nexport const ParentSpan: Context.Tag<ParentSpan, AnySpan> = internal.spanTag\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface ExternalSpan {\n  readonly _tag: \"ExternalSpan\"\n  readonly spanId: string\n  readonly traceId: string\n  readonly sampled: boolean\n  readonly context: Context.Context<never>\n}\n\n/**\n * @since 3.1.0\n * @category models\n */\nexport interface SpanOptions {\n  readonly attributes?: Record<string, unknown> | undefined\n  readonly links?: ReadonlyArray<SpanLink> | undefined\n  readonly parent?: AnySpan | undefined\n  readonly root?: boolean | undefined\n  readonly context?: Context.Context<never> | undefined\n  readonly kind?: SpanKind | undefined\n  readonly captureStackTrace?: boolean | LazyArg<string | undefined> | undefined\n}\n\n/**\n * @since 3.1.0\n * @category models\n */\nexport type SpanKind = \"internal\" | \"server\" | \"client\" | \"producer\" | \"consumer\"\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Span {\n  readonly _tag: \"Span\"\n  readonly name: string\n  readonly spanId: string\n  readonly traceId: string\n  readonly parent: Option.Option<AnySpan>\n  readonly context: Context.Context<never>\n  readonly status: SpanStatus\n  readonly attributes: ReadonlyMap<string, unknown>\n  readonly links: ReadonlyArray<SpanLink>\n  readonly sampled: boolean\n  readonly kind: SpanKind\n  end(endTime: bigint, exit: Exit.Exit<unknown, unknown>): void\n  attribute(key: string, value: unknown): void\n  event(name: string, startTime: bigint, attributes?: Record<string, unknown>): void\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface SpanLink {\n  readonly _tag: \"SpanLink\"\n  readonly span: AnySpan\n  readonly attributes: Readonly<Record<string, unknown>>\n}\n\n/**\n * @since 2.0.0\n * @category tags\n */\nexport const Tracer: Context.Tag<Tracer, Tracer> = internal.tracerTag\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (options: Omit<Tracer, typeof TracerTypeId>) => Tracer = internal.make\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const externalSpan: (\n  options: {\n    readonly spanId: string\n    readonly traceId: string\n    readonly sampled?: boolean | undefined\n    readonly context?: Context.Context<never> | undefined\n  }\n) => ExternalSpan = internal.externalSpan\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const tracerWith: <A, E, R>(f: (tracer: Tracer) => Effect.Effect<A, E, R>) => Effect.Effect<A, E, R> =\n  defaultServices.tracerWith\n"],"names":["defaultServices","internal","TracerTypeId","ParentSpan","spanTag","Tracer","tracerTag","make","externalSpan","tracerWith"],"mappings":";;;;;;;;AASA,OAAO,KAAKC,QAAQ,MAAM,sBAAsB;AADhD,OAAO,KAAKD,eAAe,MAAM,+BAA+B;;;AAOzD,MAAME,YAAY,GAAkBD,QAAQ,0MAACC,YAAY;AAuDzD,MAAMC,UAAU,GAAqCF,QAAQ,0MAACG,OAAO;AAqErE,MAAMC,MAAM,GAAgCJ,QAAQ,0MAACK,SAAS;AAM9D,MAAMC,IAAI,GAA2DN,QAAQ,0MAACM,IAAI;AAMlF,MAAMC,YAAY,GAOLP,QAAQ,0MAACO,YAAY;AAMlC,MAAMC,UAAU,GACrBT,eAAe,4MAACS,UAAU","ignoreList":[0]}},
    {"offset": {"line": 7955, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7961, "column": 0}, "map": {"version":3,"file":"FiberStatus.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/FiberStatus.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Equal from \"./Equal.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport * as internal from \"./internal/fiberStatus.js\"\nimport type * as RuntimeFlags from \"./RuntimeFlags.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const FiberStatusTypeId: unique symbol = internal.FiberStatusTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type FiberStatusTypeId = typeof FiberStatusTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type FiberStatus = Done | Running | Suspended\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Done extends Equal.Equal {\n  readonly _tag: \"Done\"\n  readonly [FiberStatusTypeId]: FiberStatusTypeId\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Running extends Equal.Equal {\n  readonly _tag: \"Running\"\n  readonly [FiberStatusTypeId]: FiberStatusTypeId\n  readonly runtimeFlags: RuntimeFlags.RuntimeFlags\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Suspended extends Equal.Equal {\n  readonly _tag: \"Suspended\"\n  readonly [FiberStatusTypeId]: FiberStatusTypeId\n  readonly runtimeFlags: RuntimeFlags.RuntimeFlags\n  readonly blockingOn: FiberId.FiberId\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const done: FiberStatus = internal.done\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const running: (runtimeFlags: RuntimeFlags.RuntimeFlags) => FiberStatus = internal.running\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const suspended: (runtimeFlags: RuntimeFlags.RuntimeFlags, blockingOn: FiberId.FiberId) => FiberStatus =\n  internal.suspended\n\n/**\n * Returns `true` if the specified value is a `FiberStatus`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isFiberStatus: (u: unknown) => u is FiberStatus = internal.isFiberStatus\n\n/**\n * Returns `true` if the specified `FiberStatus` is `Done`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isDone: (self: FiberStatus) => self is Done = internal.isDone\n\n/**\n * Returns `true` if the specified `FiberStatus` is `Running`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isRunning: (self: FiberStatus) => self is Running = internal.isRunning\n\n/**\n * Returns `true` if the specified `FiberStatus` is `Suspended`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isSuspended: (self: FiberStatus) => self is Suspended = internal.isSuspended\n"],"names":["internal","FiberStatusTypeId","done","running","suspended","isFiberStatus","isDone","isRunning","isSuspended"],"mappings":";;;;;;;;;;AAKA,OAAO,KAAKA,QAAQ,MAAM,2BAA2B;;AAO9C,MAAMC,iBAAiB,GAAkBD,QAAQ,+MAACC,iBAAiB;AAgDnE,MAAMC,IAAI,GAAgBF,QAAQ,+MAACE,IAAI;AAMvC,MAAMC,OAAO,GAA6DH,QAAQ,+MAACG,OAAO;AAM1F,MAAMC,SAAS,GACpBJ,QAAQ,+MAACI,SAAS;AAQb,MAAMC,aAAa,GAAqCL,QAAQ,+MAACK,aAAa;AAQ9E,MAAMC,MAAM,GAAwCN,QAAQ,+MAACM,MAAM;AASnE,MAAMC,SAAS,GAA2CP,QAAQ,+MAACO,SAAS;AAS5E,MAAMC,WAAW,GAA6CR,QAAQ,+MAACQ,WAAW","ignoreList":[0]}},
    {"offset": {"line": 7981, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7987, "column": 0}, "map": {"version":3,"file":"Exit.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Exit.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Cause from \"./Cause.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Either from \"./Either.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as core from \"./internal/core.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport type { NoInfer } from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\n\n/**\n * An `Exit<A, E = never>` describes the result of a executing an `Effect` workflow.\n *\n * There are two possible values for an `Exit<A, E>`:\n *   - `Exit.Success` contain a success value of type `A`\n *   - `Exit.Failure` contains a failure `Cause` of type `E`\n *\n * @since 2.0.0\n * @category models\n */\nexport type Exit<A, E = never> = Success<A, E> | Failure<A, E>\n\n/**\n * Represents a failed `Effect` workflow containing the `Cause` of the failure\n * of type `E`.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Failure<out A, out E> extends Effect.Effect<A, E>, Pipeable, Inspectable {\n  readonly _tag: \"Failure\"\n  readonly _op: \"Failure\"\n  readonly cause: Cause.Cause<E>\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: ExitUnify<this>\n  [Unify.ignoreSymbol]?: ExitUnifyIgnore\n  /** @internal */\n  readonly effect_instruction_i0: Cause.Cause<E>\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface ExitUnify<A extends { [Unify.typeSymbol]?: any }> extends Effect.EffectUnify<A> {\n  Exit?: () => A[Unify.typeSymbol] extends Exit<infer A0, infer E0> | infer _ ? Exit<A0, E0> : never\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface ExitUnifyIgnore extends Effect.EffectUnifyIgnore {\n  Effect?: true\n}\n\n/**\n * Represents a successful `Effect` workflow and containing the returned value\n * of type `A`.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Success<out A, out E> extends Effect.Effect<A, E>, Pipeable, Inspectable {\n  readonly _tag: \"Success\"\n  readonly _op: \"Success\"\n  readonly value: A\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: ExitUnify<this>\n  [Unify.ignoreSymbol]?: ExitUnifyIgnore\n  /** @internal */\n  readonly effect_instruction_i0: A\n}\n\n/**\n * Returns `true` if the specified value is an `Exit`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isExit: (u: unknown) => u is Exit<unknown, unknown> = core.exitIsExit\n\n/**\n * Returns `true` if the specified `Exit` is a `Failure`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isFailure: <A, E>(self: Exit<A, E>) => self is Failure<A, E> = core.exitIsFailure\n\n/**\n * Returns `true` if the specified `Exit` is a `Success`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isSuccess: <A, E>(self: Exit<A, E>) => self is Success<A, E> = core.exitIsSuccess\n\n/**\n * Returns `true` if the specified exit is a `Failure` **and** the `Cause` of\n * the failure was due to interruption, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isInterrupted: <A, E>(self: Exit<A, E>) => boolean = core.exitIsInterrupted\n\n/**\n * Maps the `Success` value of the specified exit to the provided constant\n * value.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const as: {\n  /**\n   * Maps the `Success` value of the specified exit to the provided constant\n   * value.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A2>(value: A2): <A, E>(self: Exit<A, E>) => Exit<A2, E>\n  /**\n   * Maps the `Success` value of the specified exit to the provided constant\n   * value.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, A2>(self: Exit<A, E>, value: A2): Exit<A2, E>\n} = core.exitAs\n\n/**\n * Maps the `Success` value of the specified exit to a void.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const asVoid: <A, E>(self: Exit<A, E>) => Exit<void, E> = core.exitAsVoid\n\n/**\n * Returns a `Some<Cause<E>>` if the specified exit is a `Failure`, `None`\n * otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const causeOption: <A, E>(self: Exit<A, E>) => Option.Option<Cause.Cause<E>> = core.exitCauseOption\n\n/**\n * Collects all of the specified exit values into a `Some<Exit<List<A>, E>>`. If\n * the provided iterable contains no elements, `None` will be returned.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const all: <A, E>(\n  exits: Iterable<Exit<A, E>>,\n  options?: { readonly parallel?: boolean | undefined } | undefined\n) => Option.Option<Exit<Array<A>, E>> = core.exitCollectAll\n\n/**\n * Constructs a new `Exit.Failure` from the specified unrecoverable defect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const die: (defect: unknown) => Exit<never> = core.exitDie\n\n/**\n * Executes the predicate on the value of the specified exit if it is a\n * `Success`, otherwise returns `false`.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const exists: {\n  /**\n   * Executes the predicate on the value of the specified exit if it is a\n   * `Success`, otherwise returns `false`.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): <E>(self: Exit<A, E>) => self is Exit<B>\n  /**\n   * Executes the predicate on the value of the specified exit if it is a\n   * `Success`, otherwise returns `false`.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): <E>(self: Exit<A, E>) => boolean\n  /**\n   * Executes the predicate on the value of the specified exit if it is a\n   * `Success`, otherwise returns `false`.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, E, B extends A>(self: Exit<A, E>, refinement: Refinement<A, B>): self is Exit<B>\n  /**\n   * Executes the predicate on the value of the specified exit if it is a\n   * `Success`, otherwise returns `false`.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, E>(self: Exit<A, E>, predicate: Predicate<A>): boolean\n} = core.exitExists\n\n/**\n * Constructs a new `Exit.Failure` from the specified recoverable error of type\n * `E`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fail: <E>(error: E) => Exit<never, E> = core.exitFail\n\n/**\n * Constructs a new `Exit.Failure` from the specified `Cause` of type `E`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const failCause: <E>(cause: Cause.Cause<E>) => Exit<never, E> = core.exitFailCause\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  /**\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, A2, E2>(f: (a: A) => Exit<A2, E2>): <E>(self: Exit<A, E>) => Exit<A2, E2 | E>\n  /**\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, E2, A2>(self: Exit<A, E>, f: (a: A) => Exit<A2, E2>): Exit<A2, E | E2>\n} = core.exitFlatMap\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMapEffect: {\n  /**\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, A2, E2, R>(\n    f: (a: A) => Effect.Effect<Exit<A2, E>, E2, R>\n  ): (self: Exit<A, E>) => Effect.Effect<Exit<A2, E>, E2, R>\n  /**\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, A2, E2, R>(self: Exit<A, E>, f: (a: A) => Effect.Effect<Exit<A2, E>, E2, R>): Effect.Effect<Exit<A2, E>, E2, R>\n} = core.exitFlatMapEffect\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatten: <A, E, E2>(self: Exit<Exit<A, E>, E2>) => Exit<A, E | E2> = core.exitFlatten\n\n/**\n * @since 2.0.0\n * @category traversing\n */\nexport const forEachEffect: {\n  /**\n   * @since 2.0.0\n   * @category traversing\n   */\n  <A, B, E2, R>(f: (a: A) => Effect.Effect<B, E2, R>): <E>(self: Exit<A, E>) => Effect.Effect<Exit<B, E2 | E>, never, R>\n  /**\n   * @since 2.0.0\n   * @category traversing\n   */\n  <A, E, B, E2, R>(self: Exit<A, E>, f: (a: A) => Effect.Effect<B, E2, R>): Effect.Effect<Exit<B, E | E2>, never, R>\n} = core.exitForEachEffect\n\n/**\n * Converts an `Either<R, L>` into an `Exit<R, L>`.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const fromEither: <R, L>(either: Either.Either<R, L>) => Exit<R, L> = core.exitFromEither\n\n/**\n * Converts an `Option<A>` into an `Exit<void, A>`.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const fromOption: <A>(option: Option.Option<A>) => Exit<A, void> = core.exitFromOption\n\n/**\n * Returns the `A` if specified exit is a `Success`, otherwise returns the\n * alternate `A` value computed from the specified function which receives the\n * `Cause<E>` of the exit `Failure`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const getOrElse: {\n  /**\n   * Returns the `A` if specified exit is a `Success`, otherwise returns the\n   * alternate `A` value computed from the specified function which receives the\n   * `Cause<E>` of the exit `Failure`.\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  <E, A2>(orElse: (cause: Cause.Cause<E>) => A2): <A>(self: Exit<A, E>) => A2 | A\n  /**\n   * Returns the `A` if specified exit is a `Success`, otherwise returns the\n   * alternate `A` value computed from the specified function which receives the\n   * `Cause<E>` of the exit `Failure`.\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  <A, E, A2>(self: Exit<A, E>, orElse: (cause: Cause.Cause<E>) => A2): A | A2\n} = core.exitGetOrElse\n\n/**\n * Constructs a new `Exit.Failure` from the specified `FiberId` indicating that\n * the `Fiber` running an `Effect` workflow was terminated due to interruption.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const interrupt: (fiberId: FiberId.FiberId) => Exit<never> = core.exitInterrupt\n\n/**\n * Maps over the `Success` value of the specified exit using the provided\n * function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  /**\n   * Maps over the `Success` value of the specified exit using the provided\n   * function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, B>(f: (a: A) => B): <E>(self: Exit<A, E>) => Exit<B, E>\n  /**\n   * Maps over the `Success` value of the specified exit using the provided\n   * function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, B>(self: Exit<A, E>, f: (a: A) => B): Exit<B, E>\n} = core.exitMap\n\n/**\n * Maps over the `Success` and `Failure` cases of the specified exit using the\n * provided functions.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapBoth: {\n  /**\n   * Maps over the `Success` and `Failure` cases of the specified exit using the\n   * provided functions.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <E, A, E2, A2>(\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): (self: Exit<A, E>) => Exit<A2, E2>\n  /**\n   * Maps over the `Success` and `Failure` cases of the specified exit using the\n   * provided functions.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, E2, A2>(\n    self: Exit<A, E>,\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): Exit<A2, E2>\n} = core.exitMapBoth\n\n/**\n * Maps over the error contained in the `Failure` of the specified exit using\n * the provided function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapError: {\n  /**\n   * Maps over the error contained in the `Failure` of the specified exit using\n   * the provided function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <E, E2>(f: (e: E) => E2): <A>(self: Exit<A, E>) => Exit<A, E2>\n  /**\n   * Maps over the error contained in the `Failure` of the specified exit using\n   * the provided function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, E2>(self: Exit<A, E>, f: (e: E) => E2): Exit<A, E2>\n} = core.exitMapError\n\n/**\n * Maps over the `Cause` contained in the `Failure` of the specified exit using\n * the provided function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapErrorCause: {\n  /**\n   * Maps over the `Cause` contained in the `Failure` of the specified exit using\n   * the provided function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <E, E2>(f: (cause: Cause.Cause<E>) => Cause.Cause<E2>): <A>(self: Exit<A, E>) => Exit<A, E2>\n  /**\n   * Maps over the `Cause` contained in the `Failure` of the specified exit using\n   * the provided function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <E, A, E2>(self: Exit<A, E>, f: (cause: Cause.Cause<E>) => Cause.Cause<E2>): Exit<A, E2>\n} = core.exitMapErrorCause\n\n/**\n * @since 2.0.0\n * @category folding\n */\nexport const match: {\n  /**\n   * @since 2.0.0\n   * @category folding\n   */\n  <E, A, Z1, Z2>(\n    options: { readonly onFailure: (cause: Cause.Cause<E>) => Z1; readonly onSuccess: (a: A) => Z2 }\n  ): (self: Exit<A, E>) => Z1 | Z2\n  /**\n   * @since 2.0.0\n   * @category folding\n   */\n  <A, E, Z1, Z2>(\n    self: Exit<A, E>,\n    options: { readonly onFailure: (cause: Cause.Cause<E>) => Z1; readonly onSuccess: (a: A) => Z2 }\n  ): Z1 | Z2\n} = core.exitMatch\n\n/**\n * @since 2.0.0\n * @category folding\n */\nexport const matchEffect: {\n  /**\n   * @since 2.0.0\n   * @category folding\n   */\n  <E, A2, E2, R, A, A3, E3, R2>(\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R>\n      readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R2>\n    }\n  ): (self: Exit<A, E>) => Effect.Effect<A2 | A3, E2 | E3, R | R2>\n  /**\n   * @since 2.0.0\n   * @category folding\n   */\n  <A, E, A2, E2, R, A3, E3, R2>(\n    self: Exit<A, E>,\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect.Effect<A2, E2, R>\n      readonly onSuccess: (a: A) => Effect.Effect<A3, E3, R2>\n    }\n  ): Effect.Effect<A2 | A3, E2 | E3, R | R2>\n} = core.exitMatchEffect\n\n/**\n * Constructs a new `Exit.Success` containing the specified value of type `A`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeed: <A>(value: A) => Exit<A> = core.exitSucceed\n\nconst void_: Exit<void> = core.exitVoid\nexport {\n  /**\n   * Represents an `Exit` which succeeds with `undefined`.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  void_ as void\n}\n\n/**\n * Sequentially zips the this result with the specified result or else returns\n * the failed `Cause<E | E2>`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zip: {\n  /**\n   * Sequentially zips the this result with the specified result or else returns\n   * the failed `Cause<E | E2>`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2>(that: Exit<A2, E2>): <A, E>(self: Exit<A, E>) => Exit<[A, A2], E2 | E>\n  /**\n   * Sequentially zips the this result with the specified result or else returns\n   * the failed `Cause<E | E2>`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, A2, E2>(self: Exit<A, E>, that: Exit<A2, E2>): Exit<[A, A2], E | E2>\n} = core.exitZip\n\n/**\n * Sequentially zips the this result with the specified result discarding the\n * second element of the tuple or else returns the failed `Cause<E | E2>`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipLeft: {\n  /**\n   * Sequentially zips the this result with the specified result discarding the\n   * second element of the tuple or else returns the failed `Cause<E | E2>`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2>(that: Exit<A2, E2>): <A, E>(self: Exit<A, E>) => Exit<A, E2 | E>\n  /**\n   * Sequentially zips the this result with the specified result discarding the\n   * second element of the tuple or else returns the failed `Cause<E | E2>`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, A2, E2>(self: Exit<A, E>, that: Exit<A2, E2>): Exit<A, E | E2>\n} = core.exitZipLeft\n\n/**\n * Sequentially zips the this result with the specified result discarding the\n * first element of the tuple or else returns the failed `Cause<E | E2>`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipRight: {\n  /**\n   * Sequentially zips the this result with the specified result discarding the\n   * first element of the tuple or else returns the failed `Cause<E | E2>`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2>(that: Exit<A2, E2>): <A, E>(self: Exit<A, E>) => Exit<A2, E2 | E>\n  /**\n   * Sequentially zips the this result with the specified result discarding the\n   * first element of the tuple or else returns the failed `Cause<E | E2>`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, A2, E2>(self: Exit<A, E>, that: Exit<A2, E2>): Exit<A2, E | E2>\n} = core.exitZipRight\n\n/**\n * Parallelly zips the this result with the specified result or else returns\n * the failed `Cause<E | E2>`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipPar: {\n  /**\n   * Parallelly zips the this result with the specified result or else returns\n   * the failed `Cause<E | E2>`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2>(that: Exit<A2, E2>): <A, E>(self: Exit<A, E>) => Exit<[A, A2], E2 | E>\n  /**\n   * Parallelly zips the this result with the specified result or else returns\n   * the failed `Cause<E | E2>`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, A2, E2>(self: Exit<A, E>, that: Exit<A2, E2>): Exit<[A, A2], E | E2>\n} = core.exitZipPar\n\n/**\n * Parallelly zips the this result with the specified result discarding the\n * second element of the tuple or else returns the failed `Cause<E | E2>`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipParLeft: {\n  /**\n   * Parallelly zips the this result with the specified result discarding the\n   * second element of the tuple or else returns the failed `Cause<E | E2>`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2>(that: Exit<A2, E2>): <A, E>(self: Exit<A, E>) => Exit<A, E2 | E>\n  /**\n   * Parallelly zips the this result with the specified result discarding the\n   * second element of the tuple or else returns the failed `Cause<E | E2>`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, A2, E2>(self: Exit<A, E>, that: Exit<A2, E2>): Exit<A, E | E2>\n} = core.exitZipParLeft\n\n/**\n * Parallelly zips the this result with the specified result discarding the\n * first element of the tuple or else returns the failed `Cause<E | E2>`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipParRight: {\n  /**\n   * Parallelly zips the this result with the specified result discarding the\n   * first element of the tuple or else returns the failed `Cause<E | E2>`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2>(that: Exit<A2, E2>): <A, E>(self: Exit<A, E>) => Exit<A2, E2 | E>\n  /**\n   * Parallelly zips the this result with the specified result discarding the\n   * first element of the tuple or else returns the failed `Cause<E | E2>`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, A2, E2>(self: Exit<A, E>, that: Exit<A2, E2>): Exit<A2, E | E2>\n} = core.exitZipParRight\n\n/**\n * Zips this exit together with that exit using the specified combination\n * functions.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWith: {\n  /**\n   * Zips this exit together with that exit using the specified combination\n   * functions.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <B, E2, A, C, E>(\n    that: Exit<B, E2>,\n    options: {\n      readonly onSuccess: (a: A, b: B) => C\n      readonly onFailure: (cause: Cause.Cause<E>, cause2: Cause.Cause<E2>) => Cause.Cause<any>\n    }\n  ): (self: Exit<A, E>) => Exit<C, any>\n  /**\n   * Zips this exit together with that exit using the specified combination\n   * functions.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, B, E2, C>(\n    self: Exit<A, E>,\n    that: Exit<B, E2>,\n    options: {\n      readonly onSuccess: (a: A, b: B) => C\n      readonly onFailure: (cause: Cause.Cause<E>, cause2: Cause.Cause<E2>) => Cause.Cause<E | E2>\n    }\n  ): Exit<C, E | E2>\n} = core.exitZipWith\n"],"names":["core","isExit","exitIsExit","isFailure","exitIsFailure","isSuccess","exitIsSuccess","isInterrupted","exitIsInterrupted","as","exitAs","asVoid","exitAsVoid","causeOption","exitCauseOption","all","exitCollectAll","die","exitDie","exists","exitExists","fail","exitFail","failCause","exitFailCause","flatMap","exitFlatMap","flatMapEffect","exitFlatMapEffect","flatten","exitFlatten","forEachEffect","exitForEachEffect","fromEither","exitFromEither","fromOption","exitFromOption","getOrElse","exitGetOrElse","interrupt","exitInterrupt","map","exitMap","mapBoth","exitMapBoth","mapError","exitMapError","mapErrorCause","exitMapErrorCause","match","exitMatch","matchEffect","exitMatchEffect","succeed","exitSucceed","void_","exitVoid","void","zip","exitZip","zipLeft","exitZipLeft","zipRight","exitZipRight","zipPar","exitZipPar","zipParLeft","exitZipParLeft","zipParRight","exitZipParRight","zipWith","exitZipWith"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,OAAO,KAAKA,IAAI,MAAM,oBAAoB;;AA6EnC,MAAMC,MAAM,GAAgDD,IAAI,4MAACE,UAAU;AAQ3E,MAAMC,SAAS,GAAsDH,IAAI,4MAACI,aAAa;AAQvF,MAAMC,SAAS,GAAsDL,IAAI,4MAACM,aAAa;AASvF,MAAMC,aAAa,GAAwCP,IAAI,4MAACQ,iBAAiB;AASjF,MAAMC,EAAE,GAiBXT,IAAI,4MAACU,MAAM;AAQR,MAAMC,MAAM,GAA8CX,IAAI,4MAACY,UAAU;AASzE,MAAMC,WAAW,GAA8Db,IAAI,4MAACc,eAAe;AASnG,MAAMC,GAAG,GAGwBf,IAAI,4MAACgB,cAAc;AAQpD,MAAMC,GAAG,GAAqCjB,IAAI,4MAACkB,OAAO;AAS1D,MAAMC,MAAM,GAiCfnB,IAAI,4MAACoB,UAAU;AASZ,MAAMC,IAAI,GAAoCrB,IAAI,4MAACsB,QAAQ;AAQ3D,MAAMC,SAAS,GAAiDvB,IAAI,4MAACwB,aAAa;AAMlF,MAAMC,OAAO,GAWhBzB,IAAI,4MAAC0B,WAAW;AAMb,MAAMC,aAAa,GAatB3B,IAAI,4MAAC4B,iBAAiB;AAMnB,MAAMC,OAAO,GAA8D7B,IAAI,4MAAC8B,WAAW;AAM3F,MAAMC,aAAa,GAWtB/B,IAAI,4MAACgC,iBAAiB;AAQnB,MAAMC,UAAU,GAAsDjC,IAAI,4MAACkC,cAAc;AAQzF,MAAMC,UAAU,GAAmDnC,IAAI,4MAACoC,cAAc;AAUtF,MAAMC,SAAS,GAmBlBrC,IAAI,4MAACsC,aAAa;AASf,MAAMC,SAAS,GAA8CvC,IAAI,4MAACwC,aAAa;AAS/E,MAAMC,GAAG,GAiBZzC,IAAI,4MAAC0C,OAAO;AAST,MAAMC,OAAO,GAsBhB3C,IAAI,4MAAC4C,WAAW;AASb,MAAMC,QAAQ,GAiBjB7C,IAAI,4MAAC8C,YAAY;AASd,MAAMC,aAAa,GAiBtB/C,IAAI,4MAACgD,iBAAiB;AAMnB,MAAMC,KAAK,GAgBdjD,IAAI,4MAACkD,SAAS;AAMX,MAAMC,WAAW,GAsBpBnD,IAAI,4MAACoD,eAAe;AAQjB,MAAMC,OAAO,GAA6BrD,IAAI,4MAACsD,WAAW;AAEjE,MAAMC,KAAK,GAAevD,IAAI,4MAACwD,QAAQ;;AAkBhC,MAAME,GAAG,GAiBZ1D,IAAI,4MAAC2D,OAAO;AAST,MAAMC,OAAO,GAiBhB5D,IAAI,4MAAC6D,WAAW;AASb,MAAMC,QAAQ,GAiBjB9D,IAAI,4MAAC+D,YAAY;AASd,MAAMC,MAAM,GAiBfhE,IAAI,4MAACiE,UAAU;AASZ,MAAMC,UAAU,GAiBnBlE,IAAI,4MAACmE,cAAc;AAShB,MAAMC,WAAW,GAiBpBpE,IAAI,4MAACqE,eAAe;AASjB,MAAMC,OAAO,GA8BhBtE,IAAI,4MAACuE,WAAW","ignoreList":[0]}},
    {"offset": {"line": 8062, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8068, "column": 0}, "map": {"version":3,"file":"FiberRefsPatch.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/FiberRefsPatch.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as FiberId from \"./FiberId.js\"\nimport type * as FiberRef from \"./FiberRef.js\"\nimport type * as FiberRefs from \"./FiberRefs.js\"\nimport * as internal from \"./internal/fiberRefs/patch.js\"\n\n/**\n * A `FiberRefsPatch` captures the changes in `FiberRef` values made by a single\n * fiber as a value. This allows fibers to apply the changes made by a workflow\n * without inheriting all the `FiberRef` values of the fiber that executed the\n * workflow.\n *\n * @since 2.0.0\n * @category models\n */\nexport type FiberRefsPatch = Empty | Add | Remove | Update | AndThen\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Empty {\n  readonly _tag: \"Empty\"\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Add {\n  readonly _tag: \"Add\"\n  readonly fiberRef: FiberRef.FiberRef<unknown>\n  readonly value: unknown\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Remove {\n  readonly _tag: \"Remove\"\n  readonly fiberRef: FiberRef.FiberRef<unknown>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Update {\n  readonly _tag: \"Update\"\n  readonly fiberRef: FiberRef.FiberRef<unknown>\n  readonly patch: unknown\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface AndThen {\n  readonly _tag: \"AndThen\"\n  readonly first: FiberRefsPatch\n  readonly second: FiberRefsPatch\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: FiberRefsPatch = internal.empty\n\n/**\n * Constructs a patch that describes the changes between the specified\n * collections of `FiberRef`\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const diff: (oldValue: FiberRefs.FiberRefs, newValue: FiberRefs.FiberRefs) => FiberRefsPatch = internal.diff\n\n/**\n * Combines this patch and the specified patch to create a new patch that\n * describes applying the changes from this patch and the specified patch\n * sequentially.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const combine: {\n  /**\n   * Combines this patch and the specified patch to create a new patch that\n   * describes applying the changes from this patch and the specified patch\n   * sequentially.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  (that: FiberRefsPatch): (self: FiberRefsPatch) => FiberRefsPatch\n  /**\n   * Combines this patch and the specified patch to create a new patch that\n   * describes applying the changes from this patch and the specified patch\n   * sequentially.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  (self: FiberRefsPatch, that: FiberRefsPatch): FiberRefsPatch\n} = internal.combine\n\n/**\n * Applies the changes described by this patch to the specified collection\n * of `FiberRef` values.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const patch: {\n  /**\n   * Applies the changes described by this patch to the specified collection\n   * of `FiberRef` values.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  (fiberId: FiberId.Runtime, oldValue: FiberRefs.FiberRefs): (self: FiberRefsPatch) => FiberRefs.FiberRefs\n  /**\n   * Applies the changes described by this patch to the specified collection\n   * of `FiberRef` values.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  (\n    self: FiberRefsPatch,\n    fiberId: FiberId.Runtime,\n    oldValue: FiberRefs.FiberRefs\n  ): FiberRefs.FiberRefs\n} = internal.patch\n"],"names":["internal","empty","diff","combine","patch"],"mappings":";;;;;;AAMA,OAAO,KAAKA,QAAQ,MAAM,+BAA+B;;AAgElD,MAAMC,KAAK,GAAmBD,QAAQ,sNAACC,KAAK;AAS5C,MAAMC,IAAI,GAAqFF,QAAQ,sNAACE,IAAI;AAU5G,MAAMC,OAAO,GAmBhBH,QAAQ,sNAACG,OAAO;AASb,MAAMC,KAAK,GAqBdJ,QAAQ,sNAACI,KAAK","ignoreList":[0]}},
    {"offset": {"line": 8080, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8086, "column": 0}, "map": {"version":3,"file":"Boolean.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Boolean.ts"],"sourcesContent":["/**\n * This module provides utility functions and type class instances for working with the `boolean` type in TypeScript.\n * It includes functions for basic boolean operations, as well as type class instances for\n * `Equivalence` and `Order`.\n *\n * @since 2.0.0\n */\nimport * as equivalence from \"./Equivalence.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { dual } from \"./Function.js\"\nimport * as order from \"./Order.js\"\nimport * as predicate from \"./Predicate.js\"\n\n/**\n * Tests if a value is a `boolean`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isBoolean } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(isBoolean(true), true)\n * assert.deepStrictEqual(isBoolean(\"true\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isBoolean: (input: unknown) => input is boolean = predicate.isBoolean\n\n/**\n * This function returns the result of either of the given functions depending on the value of the boolean parameter.\n * It is useful when you have to run one of two functions depending on the boolean value.\n *\n * @param value - the boolean value that decides which function will be executed.\n * @param onFalse - a lazy evaluation function that will be executed when the `value` is `false`.\n * @param onTrue - a lazy evaluation function that will be executed when the `value` is `true`.\n *\n * @example\n * import { Boolean } from \"effect\"\n *\n * assert.deepStrictEqual(Boolean.match(true, { onFalse: () => \"It's false!\", onTrue: () => \"It's true!\" }), \"It's true!\")\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const match: {\n  /**\n   * This function returns the result of either of the given functions depending on the value of the boolean parameter.\n   * It is useful when you have to run one of two functions depending on the boolean value.\n   *\n   * @param value - the boolean value that decides which function will be executed.\n   * @param onFalse - a lazy evaluation function that will be executed when the `value` is `false`.\n   * @param onTrue - a lazy evaluation function that will be executed when the `value` is `true`.\n   *\n   * @example\n   * import { Boolean } from \"effect\"\n   *\n   * assert.deepStrictEqual(Boolean.match(true, { onFalse: () => \"It's false!\", onTrue: () => \"It's true!\" }), \"It's true!\")\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <A, B = A>(\n    options: {\n      readonly onFalse: LazyArg<A>\n      readonly onTrue: LazyArg<B>\n    }\n  ): (value: boolean) => A | B\n  /**\n   * This function returns the result of either of the given functions depending on the value of the boolean parameter.\n   * It is useful when you have to run one of two functions depending on the boolean value.\n   *\n   * @param value - the boolean value that decides which function will be executed.\n   * @param onFalse - a lazy evaluation function that will be executed when the `value` is `false`.\n   * @param onTrue - a lazy evaluation function that will be executed when the `value` is `true`.\n   *\n   * @example\n   * import { Boolean } from \"effect\"\n   *\n   * assert.deepStrictEqual(Boolean.match(true, { onFalse: () => \"It's false!\", onTrue: () => \"It's true!\" }), \"It's true!\")\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <A, B>(\n    value: boolean,\n    options: {\n      readonly onFalse: LazyArg<A>\n      readonly onTrue: LazyArg<B>\n    }\n  ): A | B\n} = dual(2, <A, B>(value: boolean, options: {\n  readonly onFalse: LazyArg<A>\n  readonly onTrue: LazyArg<B>\n}): A | B => value ? options.onTrue() : options.onFalse())\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Equivalence: equivalence.Equivalence<boolean> = equivalence.boolean\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Order: order.Order<boolean> = order.boolean\n\n/**\n * Negates the given boolean: `!self`\n *\n * @example\n * import { not } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(not(true), false)\n * assert.deepStrictEqual(not(false), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const not = (self: boolean): boolean => !self\n\n/**\n * Combines two boolean using AND: `self && that`.\n *\n * @example\n * import { and } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(and(true, true), true)\n * assert.deepStrictEqual(and(true, false), false)\n * assert.deepStrictEqual(and(false, true), false)\n * assert.deepStrictEqual(and(false, false), false)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const and: {\n  /**\n   * Combines two boolean using AND: `self && that`.\n   *\n   * @example\n   * import { and } from \"effect/Boolean\"\n   *\n   * assert.deepStrictEqual(and(true, true), true)\n   * assert.deepStrictEqual(and(true, false), false)\n   * assert.deepStrictEqual(and(false, true), false)\n   * assert.deepStrictEqual(and(false, false), false)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  (that: boolean): (self: boolean) => boolean\n  /**\n   * Combines two boolean using AND: `self && that`.\n   *\n   * @example\n   * import { and } from \"effect/Boolean\"\n   *\n   * assert.deepStrictEqual(and(true, true), true)\n   * assert.deepStrictEqual(and(true, false), false)\n   * assert.deepStrictEqual(and(false, true), false)\n   * assert.deepStrictEqual(and(false, false), false)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  (self: boolean, that: boolean): boolean\n} = dual(2, (self: boolean, that: boolean): boolean => self && that)\n\n/**\n * Combines two boolean using NAND: `!(self && that)`.\n *\n * @example\n * import { nand } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(nand(true, true), false)\n * assert.deepStrictEqual(nand(true, false), true)\n * assert.deepStrictEqual(nand(false, true), true)\n * assert.deepStrictEqual(nand(false, false), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const nand: {\n  /**\n   * Combines two boolean using NAND: `!(self && that)`.\n   *\n   * @example\n   * import { nand } from \"effect/Boolean\"\n   *\n   * assert.deepStrictEqual(nand(true, true), false)\n   * assert.deepStrictEqual(nand(true, false), true)\n   * assert.deepStrictEqual(nand(false, true), true)\n   * assert.deepStrictEqual(nand(false, false), true)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  (that: boolean): (self: boolean) => boolean\n  /**\n   * Combines two boolean using NAND: `!(self && that)`.\n   *\n   * @example\n   * import { nand } from \"effect/Boolean\"\n   *\n   * assert.deepStrictEqual(nand(true, true), false)\n   * assert.deepStrictEqual(nand(true, false), true)\n   * assert.deepStrictEqual(nand(false, true), true)\n   * assert.deepStrictEqual(nand(false, false), true)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  (self: boolean, that: boolean): boolean\n} = dual(2, (self: boolean, that: boolean): boolean => !(self && that))\n\n/**\n * Combines two boolean using OR: `self || that`.\n *\n * @example\n * import { or } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(or(true, true), true)\n * assert.deepStrictEqual(or(true, false), true)\n * assert.deepStrictEqual(or(false, true), true)\n * assert.deepStrictEqual(or(false, false), false)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const or: {\n  /**\n   * Combines two boolean using OR: `self || that`.\n   *\n   * @example\n   * import { or } from \"effect/Boolean\"\n   *\n   * assert.deepStrictEqual(or(true, true), true)\n   * assert.deepStrictEqual(or(true, false), true)\n   * assert.deepStrictEqual(or(false, true), true)\n   * assert.deepStrictEqual(or(false, false), false)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  (that: boolean): (self: boolean) => boolean\n  /**\n   * Combines two boolean using OR: `self || that`.\n   *\n   * @example\n   * import { or } from \"effect/Boolean\"\n   *\n   * assert.deepStrictEqual(or(true, true), true)\n   * assert.deepStrictEqual(or(true, false), true)\n   * assert.deepStrictEqual(or(false, true), true)\n   * assert.deepStrictEqual(or(false, false), false)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  (self: boolean, that: boolean): boolean\n} = dual(2, (self: boolean, that: boolean): boolean => self || that)\n\n/**\n * Combines two booleans using NOR: `!(self || that)`.\n *\n * @example\n * import { nor } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(nor(true, true), false)\n * assert.deepStrictEqual(nor(true, false), false)\n * assert.deepStrictEqual(nor(false, true), false)\n * assert.deepStrictEqual(nor(false, false), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const nor: {\n  /**\n   * Combines two booleans using NOR: `!(self || that)`.\n   *\n   * @example\n   * import { nor } from \"effect/Boolean\"\n   *\n   * assert.deepStrictEqual(nor(true, true), false)\n   * assert.deepStrictEqual(nor(true, false), false)\n   * assert.deepStrictEqual(nor(false, true), false)\n   * assert.deepStrictEqual(nor(false, false), true)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  (that: boolean): (self: boolean) => boolean\n  /**\n   * Combines two booleans using NOR: `!(self || that)`.\n   *\n   * @example\n   * import { nor } from \"effect/Boolean\"\n   *\n   * assert.deepStrictEqual(nor(true, true), false)\n   * assert.deepStrictEqual(nor(true, false), false)\n   * assert.deepStrictEqual(nor(false, true), false)\n   * assert.deepStrictEqual(nor(false, false), true)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  (self: boolean, that: boolean): boolean\n} = dual(2, (self: boolean, that: boolean): boolean => !(self || that))\n\n/**\n * Combines two booleans using XOR: `(!self && that) || (self && !that)`.\n *\n * @example\n * import { xor } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(xor(true, true), false)\n * assert.deepStrictEqual(xor(true, false), true)\n * assert.deepStrictEqual(xor(false, true), true)\n * assert.deepStrictEqual(xor(false, false), false)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const xor: {\n  /**\n   * Combines two booleans using XOR: `(!self && that) || (self && !that)`.\n   *\n   * @example\n   * import { xor } from \"effect/Boolean\"\n   *\n   * assert.deepStrictEqual(xor(true, true), false)\n   * assert.deepStrictEqual(xor(true, false), true)\n   * assert.deepStrictEqual(xor(false, true), true)\n   * assert.deepStrictEqual(xor(false, false), false)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  (that: boolean): (self: boolean) => boolean\n  /**\n   * Combines two booleans using XOR: `(!self && that) || (self && !that)`.\n   *\n   * @example\n   * import { xor } from \"effect/Boolean\"\n   *\n   * assert.deepStrictEqual(xor(true, true), false)\n   * assert.deepStrictEqual(xor(true, false), true)\n   * assert.deepStrictEqual(xor(false, true), true)\n   * assert.deepStrictEqual(xor(false, false), false)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  (self: boolean, that: boolean): boolean\n} = dual(2, (self: boolean, that: boolean): boolean => (!self && that) || (self && !that))\n\n/**\n * Combines two booleans using EQV (aka XNOR): `!xor(self, that)`.\n *\n * @example\n * import { eqv } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(eqv(true, true), true)\n * assert.deepStrictEqual(eqv(true, false), false)\n * assert.deepStrictEqual(eqv(false, true), false)\n * assert.deepStrictEqual(eqv(false, false), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const eqv: {\n  /**\n   * Combines two booleans using EQV (aka XNOR): `!xor(self, that)`.\n   *\n   * @example\n   * import { eqv } from \"effect/Boolean\"\n   *\n   * assert.deepStrictEqual(eqv(true, true), true)\n   * assert.deepStrictEqual(eqv(true, false), false)\n   * assert.deepStrictEqual(eqv(false, true), false)\n   * assert.deepStrictEqual(eqv(false, false), true)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  (that: boolean): (self: boolean) => boolean\n  /**\n   * Combines two booleans using EQV (aka XNOR): `!xor(self, that)`.\n   *\n   * @example\n   * import { eqv } from \"effect/Boolean\"\n   *\n   * assert.deepStrictEqual(eqv(true, true), true)\n   * assert.deepStrictEqual(eqv(true, false), false)\n   * assert.deepStrictEqual(eqv(false, true), false)\n   * assert.deepStrictEqual(eqv(false, false), true)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  (self: boolean, that: boolean): boolean\n} = dual(2, (self: boolean, that: boolean): boolean => !xor(self, that))\n\n/**\n * Combines two booleans using an implication: `(!self || that)`.\n *\n * @example\n * import { implies } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(implies(true, true), true)\n * assert.deepStrictEqual(implies(true, false), false)\n * assert.deepStrictEqual(implies(false, true), true)\n * assert.deepStrictEqual(implies(false, false), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const implies: {\n  /**\n   * Combines two booleans using an implication: `(!self || that)`.\n   *\n   * @example\n   * import { implies } from \"effect/Boolean\"\n   *\n   * assert.deepStrictEqual(implies(true, true), true)\n   * assert.deepStrictEqual(implies(true, false), false)\n   * assert.deepStrictEqual(implies(false, true), true)\n   * assert.deepStrictEqual(implies(false, false), true)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  (that: boolean): (self: boolean) => boolean\n  /**\n   * Combines two booleans using an implication: `(!self || that)`.\n   *\n   * @example\n   * import { implies } from \"effect/Boolean\"\n   *\n   * assert.deepStrictEqual(implies(true, true), true)\n   * assert.deepStrictEqual(implies(true, false), false)\n   * assert.deepStrictEqual(implies(false, true), true)\n   * assert.deepStrictEqual(implies(false, false), true)\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  (self: boolean, that: boolean): boolean\n} = dual(2, (self, that) => self ? that : true)\n\n/**\n * This utility function is used to check if all the elements in a collection of boolean values are `true`.\n *\n * @param collection - An iterable collection of booleans.\n *\n * @example\n * import { every } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(every([true, true, true]), true)\n * assert.deepStrictEqual(every([true, false, true]), false)\n *\n * @since 2.0.0\n */\nexport const every = (collection: Iterable<boolean>): boolean => {\n  for (const b of collection) {\n    if (!b) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * This utility function is used to check if at least one of the elements in a collection of boolean values is `true`.\n *\n * @param collection - An iterable collection of booleans.\n *\n * @example\n * import { some } from \"effect/Boolean\"\n *\n * assert.deepStrictEqual(some([true, false, true]), true)\n * assert.deepStrictEqual(some([false, false, false]), false)\n *\n * @since 2.0.0\n */\nexport const some = (collection: Iterable<boolean>): boolean => {\n  for (const b of collection) {\n    if (b) {\n      return true\n    }\n  }\n  return false\n}\n"],"names":["equivalence","dual","order","predicate","isBoolean","match","value","options","onTrue","onFalse","Equivalence","boolean","Order","not","self","and","that","nand","or","nor","xor","eqv","implies","every","collection","b","some"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;AAWA,OAAO,KAAKG,SAAS,MAAM,gBAAgB;AAF3C,SAASF,IAAI,QAAQ,eAAe;AAFpC,OAAO,KAAKD,WAAW,MAAM,kBAAkB;AAG/C,OAAO,KAAKE,KAAK,MAAM,YAAY;;;;;AAiB5B,MAAME,SAAS,GAAyCD,SAAS,gMAACC,SAAS;AAkB3E,MAAMC,KAAK,GAAA,WAAA,8MA8CdJ,QAAAA,AAAI,EAAC,CAAC,EAAE,CAAOK,KAAc,EAAEC,OAGlC,GAAYD,KAAK,GAAGC,OAAO,CAACC,MAAM,EAAE,GAAGD,OAAO,CAACE,OAAO,EAAE,CAAC;AAMnD,MAAMC,WAAW,GAAqCV,WAAW,gMAACW,OAAO;AAMzE,MAAMC,KAAK,GAAyBV,KAAK,gMAACS,OAAO;AAcjD,MAAME,GAAG,IAAIC,IAAa,GAAc,CAACA,IAAI;AAgB7C,MAAMC,GAAG,GAAA,WAAA,+MA+BZd,OAAAA,AAAI,EAAC,CAAC,EAAE,CAACa,IAAa,EAAEE,IAAa,GAAcF,IAAI,IAAIE,IAAI,CAAC;AAgB7D,MAAMC,IAAI,GAAA,WAAA,+MA+BbhB,OAAI,AAAJA,EAAK,CAAC,EAAE,CAACa,IAAa,EAAEE,IAAa,GAAc,CAAA,CAAEF,IAAI,IAAIE,IAAI,CAAC,CAAC;AAgBhE,MAAME,EAAE,GAAA,WAAA,GA+BXjB,mNAAAA,AAAI,EAAC,CAAC,EAAE,CAACa,IAAa,EAAEE,IAAa,GAAcF,IAAI,IAAIE,IAAI,CAAC;AAgB7D,MAAMG,GAAG,GAAA,WAAA,+MA+BZlB,OAAAA,AAAI,EAAC,CAAC,EAAE,CAACa,IAAa,EAAEE,IAAa,GAAc,CAAA,CAAEF,IAAI,IAAIE,IAAI,CAAC,CAAC;AAgBhE,MAAMI,GAAG,GAAA,WAAA,+MA+BZnB,OAAAA,AAAI,EAAC,CAAC,EAAE,CAACa,IAAa,EAAEE,IAAa,GAAe,CAACF,IAAI,IAAIE,IAAI,IAAMF,IAAI,IAAI,CAACE,IAAK,CAAC;AAgBnF,MAAMK,GAAG,GAAA,WAAA,+MA+BZpB,OAAAA,AAAI,EAAC,CAAC,EAAE,CAACa,IAAa,EAAEE,IAAa,GAAc,CAACI,GAAG,CAACN,IAAI,EAAEE,IAAI,CAAC,CAAC;AAgBjE,MAAMM,OAAO,GAAA,WAAA,+MA+BhBrB,OAAAA,AAAI,EAAC,CAAC,EAAE,CAACa,IAAI,EAAEE,IAAI,GAAKF,IAAI,GAAGE,IAAI,GAAG,IAAI,CAAC;AAexC,MAAMO,KAAK,IAAIC,UAA6B,IAAa;IAC9D,KAAK,MAAMC,CAAC,IAAID,UAAU,CAAE;QAC1B,IAAI,CAACC,CAAC,EAAE;YACN,OAAO,KAAK;QACd;IACF;IACA,OAAO,IAAI;AACb,CAAC;AAeM,MAAMC,IAAI,IAAIF,UAA6B,IAAa;IAC7D,KAAK,MAAMC,CAAC,IAAID,UAAU,CAAE;QAC1B,IAAIC,CAAC,EAAE;YACL,OAAO,IAAI;QACb;IACF;IACA,OAAO,KAAK;AACd,CAAC","ignoreList":[0]}},
    {"offset": {"line": 8144, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8150, "column": 0}, "map": {"version":3,"file":"ExecutionStrategy.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/ExecutionStrategy.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type { LazyArg } from \"./Function.js\"\nimport * as internal from \"./internal/executionStrategy.js\"\n\n/**\n * Describes a strategy for evaluating multiple effects, potentially in\n * parallel.\n *\n * There are 3 possible execution strategies: `Sequential`, `Parallel`,\n * `ParallelN`.\n *\n * @since 2.0.0\n * @category models\n */\nexport type ExecutionStrategy = Sequential | Parallel | ParallelN\n\n/**\n * Execute effects sequentially.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Sequential {\n  readonly _tag: \"Sequential\"\n}\n\n/**\n * Execute effects in parallel.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Parallel {\n  readonly _tag: \"Parallel\"\n}\n\n/**\n * Execute effects in parallel, up to the specified number of concurrent fibers.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface ParallelN {\n  readonly _tag: \"ParallelN\"\n  readonly parallelism: number\n}\n\n/**\n * Execute effects sequentially.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const sequential: ExecutionStrategy = internal.sequential\n\n/**\n * Execute effects in parallel.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const parallel: ExecutionStrategy = internal.parallel\n\n/**\n * Execute effects in parallel, up to the specified number of concurrent fibers.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const parallelN: (parallelism: number) => ExecutionStrategy = internal.parallelN\n\n/**\n * Returns `true` if the specified `ExecutionStrategy` is an instance of\n * `Sequential`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isSequential: (self: ExecutionStrategy) => self is Sequential = internal.isSequential\n\n/**\n * Returns `true` if the specified `ExecutionStrategy` is an instance of\n * `Sequential`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isParallel: (self: ExecutionStrategy) => self is Parallel = internal.isParallel\n\n/**\n * Returns `true` if the specified `ExecutionStrategy` is an instance of\n * `Sequential`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isParallelN: (self: ExecutionStrategy) => self is ParallelN = internal.isParallelN\n\n/**\n * Folds over the specified `ExecutionStrategy` using the provided case\n * functions.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const match: {\n  /**\n   * Folds over the specified `ExecutionStrategy` using the provided case\n   * functions.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <A>(\n    options: {\n      readonly onSequential: LazyArg<A>\n      readonly onParallel: LazyArg<A>\n      readonly onParallelN: (n: number) => A\n    }\n  ): (self: ExecutionStrategy) => A\n  /**\n   * Folds over the specified `ExecutionStrategy` using the provided case\n   * functions.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <A>(\n    self: ExecutionStrategy,\n    options: {\n      readonly onSequential: LazyArg<A>\n      readonly onParallel: LazyArg<A>\n      readonly onParallelN: (n: number) => A\n    }\n  ): A\n} = internal.match\n"],"names":["internal","sequential","parallel","parallelN","isSequential","isParallel","isParallelN","match"],"mappings":";;;;;;;;;AAIA,OAAO,KAAKA,QAAQ,MAAM,iCAAiC;;AAmDpD,MAAMC,UAAU,GAAsBD,QAAQ,qNAACC,UAAU;AAQzD,MAAMC,QAAQ,GAAsBF,QAAQ,qNAACE,QAAQ;AAQrD,MAAMC,SAAS,GAA+CH,QAAQ,qNAACG,SAAS;AAShF,MAAMC,YAAY,GAAoDJ,QAAQ,qNAACI,YAAY;AAS3F,MAAMC,UAAU,GAAkDL,QAAQ,qNAACK,UAAU;AASrF,MAAMC,WAAW,GAAmDN,QAAQ,qNAACM,WAAW;AASxF,MAAMC,KAAK,GA8BdP,QAAQ,qNAACO,KAAK","ignoreList":[0]}},
    {"offset": {"line": 8168, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8174, "column": 0}, "map": {"version":3,"file":"Deferred.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Deferred.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Cause from \"./Cause.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Exit from \"./Exit.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport * as core from \"./internal/core.js\"\nimport * as internal from \"./internal/deferred.js\"\nimport type * as MutableRef from \"./MutableRef.js\"\nimport type * as Option from \"./Option.js\"\nimport type * as Types from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const DeferredTypeId: unique symbol = internal.DeferredTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type DeferredTypeId = typeof DeferredTypeId\n\n/**\n * A `Deferred` represents an asynchronous variable that can be set exactly\n * once, with the ability for an arbitrary number of fibers to suspend (by\n * calling `Deferred.await`) and automatically resume when the variable is set.\n *\n * `Deferred` can be used for building primitive actions whose completions\n * require the coordinated action of multiple fibers, and for building\n * higher-level concurrent or asynchronous structures.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Deferred<in out A, in out E = never> extends Effect.Effect<A, E>, Deferred.Variance<A, E> {\n  /** @internal */\n  readonly state: MutableRef.MutableRef<internal.State<A, E>>\n  /** @internal */\n  readonly blockingOn: FiberId.FiberId\n  readonly [Unify.typeSymbol]?: unknown\n  readonly [Unify.unifySymbol]?: DeferredUnify<this>\n  readonly [Unify.ignoreSymbol]?: DeferredUnifyIgnore\n}\n\n/**\n * @category models\n * @since 3.8.0\n */\nexport interface DeferredUnify<A extends { [Unify.typeSymbol]?: any }> extends Effect.EffectUnify<A> {\n  Deferred?: () => Extract<A[Unify.typeSymbol], Deferred<any, any>>\n}\n\n/**\n * @category models\n * @since 3.8.0\n */\nexport interface DeferredUnifyIgnore extends Effect.EffectUnifyIgnore {\n  Effect?: true\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Deferred {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<in out A, in out E> {\n    readonly [DeferredTypeId]: {\n      readonly _A: Types.Invariant<A>\n      readonly _E: Types.Invariant<E>\n    }\n  }\n}\n\n/**\n * Creates a new `Deferred`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <A, E = never>() => Effect.Effect<Deferred<A, E>> = core.deferredMake\n\n/**\n * Creates a new `Deferred` from the specified `FiberId`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const makeAs: <A, E = never>(fiberId: FiberId.FiberId) => Effect.Effect<Deferred<A, E>> = core.deferredMakeAs\n\nconst _await: <A, E>(self: Deferred<A, E>) => Effect.Effect<A, E> = core.deferredAwait\n\nexport {\n  /**\n   * Retrieves the value of the `Deferred`, suspending the fiber running the\n   * workflow until the result is available.\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  _await as await\n}\n\n/**\n * Completes the deferred with the result of the specified effect. If the\n * deferred has already been completed, the method will produce false.\n *\n * Note that `Deferred.completeWith` will be much faster, so consider using\n * that if you do not need to memoize the result of the specified effect.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const complete: {\n  /**\n   * Completes the deferred with the result of the specified effect. If the\n   * deferred has already been completed, the method will produce false.\n   *\n   * Note that `Deferred.completeWith` will be much faster, so consider using\n   * that if you do not need to memoize the result of the specified effect.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E>(effect: Effect.Effect<A, E>): (self: Deferred<A, E>) => Effect.Effect<boolean>\n  /**\n   * Completes the deferred with the result of the specified effect. If the\n   * deferred has already been completed, the method will produce false.\n   *\n   * Note that `Deferred.completeWith` will be much faster, so consider using\n   * that if you do not need to memoize the result of the specified effect.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E>(self: Deferred<A, E>, effect: Effect.Effect<A, E>): Effect.Effect<boolean>\n} = core.deferredComplete\n\n/**\n * Completes the deferred with the result of the specified effect. If the\n * deferred has already been completed, the method will produce false.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const completeWith: {\n  /**\n   * Completes the deferred with the result of the specified effect. If the\n   * deferred has already been completed, the method will produce false.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E>(effect: Effect.Effect<A, E>): (self: Deferred<A, E>) => Effect.Effect<boolean>\n  /**\n   * Completes the deferred with the result of the specified effect. If the\n   * deferred has already been completed, the method will produce false.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E>(self: Deferred<A, E>, effect: Effect.Effect<A, E>): Effect.Effect<boolean>\n} = core.deferredCompleteWith\n\n/**\n * Exits the `Deferred` with the specified `Exit` value, which will be\n * propagated to all fibers waiting on the value of the `Deferred`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const done: {\n  /**\n   * Exits the `Deferred` with the specified `Exit` value, which will be\n   * propagated to all fibers waiting on the value of the `Deferred`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E>(exit: Exit.Exit<A, E>): (self: Deferred<A, E>) => Effect.Effect<boolean>\n  /**\n   * Exits the `Deferred` with the specified `Exit` value, which will be\n   * propagated to all fibers waiting on the value of the `Deferred`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E>(self: Deferred<A, E>, exit: Exit.Exit<A, E>): Effect.Effect<boolean>\n} = core.deferredDone\n\n/**\n * Fails the `Deferred` with the specified error, which will be propagated to\n * all fibers waiting on the value of the `Deferred`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const fail: {\n  /**\n   * Fails the `Deferred` with the specified error, which will be propagated to\n   * all fibers waiting on the value of the `Deferred`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <E>(error: E): <A>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  /**\n   * Fails the `Deferred` with the specified error, which will be propagated to\n   * all fibers waiting on the value of the `Deferred`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E>(self: Deferred<A, E>, error: E): Effect.Effect<boolean>\n} = core.deferredFail\n\n/**\n * Fails the `Deferred` with the specified error, which will be propagated to\n * all fibers waiting on the value of the `Deferred`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const failSync: {\n  /**\n   * Fails the `Deferred` with the specified error, which will be propagated to\n   * all fibers waiting on the value of the `Deferred`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <E>(evaluate: LazyArg<E>): <A>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  /**\n   * Fails the `Deferred` with the specified error, which will be propagated to\n   * all fibers waiting on the value of the `Deferred`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E>(self: Deferred<A, E>, evaluate: LazyArg<E>): Effect.Effect<boolean>\n} = core.deferredFailSync\n\n/**\n * Fails the `Deferred` with the specified `Cause`, which will be propagated to\n * all fibers waiting on the value of the `Deferred`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const failCause: {\n  /**\n   * Fails the `Deferred` with the specified `Cause`, which will be propagated to\n   * all fibers waiting on the value of the `Deferred`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <E>(cause: Cause.Cause<E>): <A>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  /**\n   * Fails the `Deferred` with the specified `Cause`, which will be propagated to\n   * all fibers waiting on the value of the `Deferred`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E>(self: Deferred<A, E>, cause: Cause.Cause<E>): Effect.Effect<boolean>\n} = core.deferredFailCause\n\n/**\n * Fails the `Deferred` with the specified `Cause`, which will be propagated to\n * all fibers waiting on the value of the `Deferred`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const failCauseSync: {\n  /**\n   * Fails the `Deferred` with the specified `Cause`, which will be propagated to\n   * all fibers waiting on the value of the `Deferred`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <E>(evaluate: LazyArg<Cause.Cause<E>>): <A>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  /**\n   * Fails the `Deferred` with the specified `Cause`, which will be propagated to\n   * all fibers waiting on the value of the `Deferred`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E>(self: Deferred<A, E>, evaluate: LazyArg<Cause.Cause<E>>): Effect.Effect<boolean>\n} = core.deferredFailCauseSync\n\n/**\n * Kills the `Deferred` with the specified defect, which will be propagated to\n * all fibers waiting on the value of the `Deferred`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const die: {\n  /**\n   * Kills the `Deferred` with the specified defect, which will be propagated to\n   * all fibers waiting on the value of the `Deferred`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (defect: unknown): <A, E>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  /**\n   * Kills the `Deferred` with the specified defect, which will be propagated to\n   * all fibers waiting on the value of the `Deferred`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E>(self: Deferred<A, E>, defect: unknown): Effect.Effect<boolean>\n} = core.deferredDie\n\n/**\n * Kills the `Deferred` with the specified defect, which will be propagated to\n * all fibers waiting on the value of the `Deferred`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const dieSync: {\n  /**\n   * Kills the `Deferred` with the specified defect, which will be propagated to\n   * all fibers waiting on the value of the `Deferred`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (evaluate: LazyArg<unknown>): <A, E>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  /**\n   * Kills the `Deferred` with the specified defect, which will be propagated to\n   * all fibers waiting on the value of the `Deferred`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E>(self: Deferred<A, E>, evaluate: LazyArg<unknown>): Effect.Effect<boolean>\n} = core.deferredDieSync\n\n/**\n * Completes the `Deferred` with interruption. This will interrupt all fibers\n * waiting on the value of the `Deferred` with the `FiberId` of the fiber\n * calling this method.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const interrupt: <A, E>(self: Deferred<A, E>) => Effect.Effect<boolean> = core.deferredInterrupt\n\n/**\n * Completes the `Deferred` with interruption. This will interrupt all fibers\n * waiting on the value of the `Deferred` with the specified `FiberId`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const interruptWith: {\n  /**\n   * Completes the `Deferred` with interruption. This will interrupt all fibers\n   * waiting on the value of the `Deferred` with the specified `FiberId`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (fiberId: FiberId.FiberId): <A, E>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  /**\n   * Completes the `Deferred` with interruption. This will interrupt all fibers\n   * waiting on the value of the `Deferred` with the specified `FiberId`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E>(self: Deferred<A, E>, fiberId: FiberId.FiberId): Effect.Effect<boolean>\n} = core.deferredInterruptWith\n\n/**\n * Returns `true` if this `Deferred` has already been completed with a value or\n * an error, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isDone: <A, E>(self: Deferred<A, E>) => Effect.Effect<boolean> = core.deferredIsDone\n\n/**\n * Returns a `Some<Effect<A, E, R>>` from the `Deferred` if this `Deferred` has\n * already been completed, `None` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const poll: <A, E>(\n  self: Deferred<A, E>\n) => Effect.Effect<Option.Option<Effect.Effect<A, E>>> = core.deferredPoll\n\n/**\n * Completes the `Deferred` with the specified value.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const succeed: {\n  /**\n   * Completes the `Deferred` with the specified value.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(value: A): <E>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  /**\n   * Completes the `Deferred` with the specified value.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E>(self: Deferred<A, E>, value: A): Effect.Effect<boolean>\n} = core.deferredSucceed\n\n/**\n * Completes the `Deferred` with the specified lazily evaluated value.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const sync: {\n  /**\n   * Completes the `Deferred` with the specified lazily evaluated value.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(evaluate: LazyArg<A>): <E>(self: Deferred<A, E>) => Effect.Effect<boolean>\n  /**\n   * Completes the `Deferred` with the specified lazily evaluated value.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E>(self: Deferred<A, E>, evaluate: LazyArg<A>): Effect.Effect<boolean>\n} = core.deferredSync\n\n/**\n * Unsafely creates a new `Deferred` from the specified `FiberId`.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeMake: <A, E = never>(fiberId: FiberId.FiberId) => Deferred<A, E> = core.deferredUnsafeMake\n\n/**\n * Unsafely exits the `Deferred` with the specified `Exit` value, which will be\n * propagated to all fibers waiting on the value of the `Deferred`.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeDone: <A, E>(self: Deferred<A, E>, effect: Effect.Effect<A, E>) => void = core.deferredUnsafeDone\n"],"names":["core","internal","DeferredTypeId","make","deferredMake","makeAs","deferredMakeAs","_await","deferredAwait","await","complete","deferredComplete","completeWith","deferredCompleteWith","done","deferredDone","fail","deferredFail","failSync","deferredFailSync","failCause","deferredFailCause","failCauseSync","deferredFailCauseSync","die","deferredDie","dieSync","deferredDieSync","interrupt","deferredInterrupt","interruptWith","deferredInterruptWith","isDone","deferredIsDone","poll","deferredPoll","succeed","deferredSucceed","sync","deferredSync","unsafeMake","deferredUnsafeMake","unsafeDone","deferredUnsafeDone"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AASA,OAAO,KAAKC,QAAQ,MAAM,wBAAwB;AADlD,OAAO,KAAKD,IAAI,MAAM,oBAAoB;;;AAWnC,MAAME,cAAc,GAAkBD,QAAQ,4MAACC,cAAc;AAoE7D,MAAMC,IAAI,GAAsDH,IAAI,4MAACI,YAAY;AAQjF,MAAMC,MAAM,GAA8EL,IAAI,4MAACM,cAAc;AAEpH,MAAMC,MAAM,GAAwDP,IAAI,4MAACQ,aAAa;;AAuB/E,MAAME,QAAQ,GAuBjBV,IAAI,4MAACW,gBAAgB;AASlB,MAAMC,YAAY,GAiBrBZ,IAAI,4MAACa,oBAAoB;AAStB,MAAMC,IAAI,GAiBbd,IAAI,4MAACe,YAAY;AASd,MAAMC,IAAI,GAiBbhB,IAAI,4MAACiB,YAAY;AASd,MAAMC,QAAQ,GAiBjBlB,IAAI,4MAACmB,gBAAgB;AASlB,MAAMC,SAAS,GAiBlBpB,IAAI,4MAACqB,iBAAiB;AASnB,MAAMC,aAAa,GAiBtBtB,IAAI,4MAACuB,qBAAqB;AASvB,MAAMC,GAAG,GAiBZxB,IAAI,4MAACyB,WAAW;AASb,MAAMC,OAAO,GAiBhB1B,IAAI,4MAAC2B,eAAe;AAUjB,MAAMC,SAAS,GAA2D5B,IAAI,4MAAC6B,iBAAiB;AAShG,MAAMC,aAAa,GAiBtB9B,IAAI,4MAAC+B,qBAAqB;AASvB,MAAMC,MAAM,GAA2DhC,IAAI,4MAACiC,cAAc;AAS1F,MAAMC,IAAI,GAEwClC,IAAI,4MAACmC,YAAY;AAQnE,MAAMC,OAAO,GAehBpC,IAAI,4MAACqC,eAAe;AAQjB,MAAMC,IAAI,GAebtC,IAAI,4MAACuC,YAAY;AAQd,MAAMC,UAAU,GAA+DxC,IAAI,4MAACyC,kBAAkB;AAStG,MAAMC,UAAU,GAAsE1C,IAAI,4MAAC2C,kBAAkB","ignoreList":[0]}},
    {"offset": {"line": 8223, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8229, "column": 0}, "map": {"version":3,"file":"RedBlackTree.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/RedBlackTree.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type { Chunk } from \"./Chunk.js\"\nimport type { Equal } from \"./Equal.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as RBT from \"./internal/redBlackTree.js\"\nimport * as RBTI from \"./internal/redBlackTree/iterator.js\"\nimport type { Option } from \"./Option.js\"\nimport type { Order } from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type * as Types from \"./Types.js\"\n\nconst TypeId: unique symbol = RBT.RedBlackTreeTypeId as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category constants\n */\nexport const Direction = RBTI.Direction\n\n/**\n * A Red-Black Tree.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface RedBlackTree<in out Key, out Value> extends Iterable<[Key, Value]>, Equal, Pipeable, Inspectable {\n  readonly [TypeId]: {\n    readonly _Key: Types.Invariant<Key>\n    readonly _Value: Types.Covariant<Value>\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace RedBlackTree {\n  /**\n   * @since 2.0.0\n   */\n  export type Direction = number & {\n    readonly Direction: unique symbol\n  }\n}\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isRedBlackTree: {\n  /**\n   * @since 2.0.0\n   * @category refinements\n   */\n  <K, V>(u: Iterable<readonly [K, V]>): u is RedBlackTree<K, V>\n  /**\n   * @since 2.0.0\n   * @category refinements\n   */\n  (u: unknown): u is RedBlackTree<unknown, unknown>\n} = RBT.isRedBlackTree\n\n/**\n * Creates an empty `RedBlackTree`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: <K, V = never>(ord: Order<K>) => RedBlackTree<K, V> = RBT.empty\n\n/**\n * Creates a new `RedBlackTree` from an iterable collection of key/value pairs.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable: {\n  /**\n   * Creates a new `RedBlackTree` from an iterable collection of key/value pairs.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <B>(ord: Order<B>): <K extends B, V>(entries: Iterable<readonly [K, V]>) => RedBlackTree<K, V>\n  /**\n   * Creates a new `RedBlackTree` from an iterable collection of key/value pairs.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <K extends B, V, B>(entries: Iterable<readonly [K, V]>, ord: Order<B>): RedBlackTree<K, V>\n} = RBT.fromIterable\n\n/**\n * Constructs a new `RedBlackTree` from the specified entries.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <K>(\n  ord: Order<K>\n) => <Entries extends Array<readonly [K, any]>>(\n  ...entries: Entries\n) => RedBlackTree<K, Entries[number] extends readonly [any, infer V] ? V : never> = RBT.make\n\n/**\n * Returns an iterator that points to the element at the specified index of the\n * tree.\n *\n * **Note**: The iterator will run through elements in order.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const at: {\n  /**\n   * Returns an iterator that points to the element at the specified index of the\n   * tree.\n   *\n   * **Note**: The iterator will run through elements in order.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  (index: number): <K, V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  /**\n   * Returns an iterator that points to the element at the specified index of the\n   * tree.\n   *\n   * **Note**: The iterator will run through elements in order.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, index: number): Iterable<[K, V]>\n} = RBT.atForwards\n\n/**\n * Returns an iterator that points to the element at the specified index of the\n * tree.\n *\n * **Note**: The iterator will run through elements in reverse order.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const atReversed: {\n  /**\n   * Returns an iterator that points to the element at the specified index of the\n   * tree.\n   *\n   * **Note**: The iterator will run through elements in reverse order.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  (index: number): <K, V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  /**\n   * Returns an iterator that points to the element at the specified index of the\n   * tree.\n   *\n   * **Note**: The iterator will run through elements in reverse order.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, index: number): Iterable<[K, V]>\n} = RBT.atBackwards\n\n/**\n * Finds all values in the tree associated with the specified key.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const findAll: {\n  /**\n   * Finds all values in the tree associated with the specified key.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Chunk<V>\n  /**\n   * Finds all values in the tree associated with the specified key.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K): Chunk<V>\n} = RBT.findAll\n\n/**\n * Finds the first value in the tree associated with the specified key, if it exists.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirst: {\n  /**\n   * Finds the first value in the tree associated with the specified key, if it exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Option<V>\n  /**\n   * Finds the first value in the tree associated with the specified key, if it exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K): Option<V>\n} = RBT.findFirst\n\n/**\n * Returns the first entry in the tree, if it exists.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const first: <K, V>(self: RedBlackTree<K, V>) => Option<[K, V]> = RBT.first\n\n/**\n * Returns the element at the specified index within the tree or `None` if the\n * specified index does not exist.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const getAt: {\n  /**\n   * Returns the element at the specified index within the tree or `None` if the\n   * specified index does not exist.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  (index: number): <K, V>(self: RedBlackTree<K, V>) => Option<[K, V]>\n  /**\n   * Returns the element at the specified index within the tree or `None` if the\n   * specified index does not exist.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K, V>(self: RedBlackTree<K, V>, index: number): Option<[K, V]>\n} = RBT.getAt\n\n/**\n * Gets the `Order<K>` that the `RedBlackTree<K, V>` is using.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const getOrder: <K, V>(self: RedBlackTree<K, V>) => Order<K> = RBT.getOrder\n\n/**\n * Returns an iterator that traverse entries in order with keys greater than the\n * specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const greaterThan: {\n  /**\n   * Returns an iterator that traverse entries in order with keys greater than the\n   * specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  /**\n   * Returns an iterator that traverse entries in order with keys greater than the\n   * specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.greaterThanForwards\n\n/**\n * Returns an iterator that traverse entries in reverse order with keys greater\n * than the specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const greaterThanReversed: {\n  /**\n   * Returns an iterator that traverse entries in reverse order with keys greater\n   * than the specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  /**\n   * Returns an iterator that traverse entries in reverse order with keys greater\n   * than the specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.greaterThanBackwards\n\n/**\n * Returns an iterator that traverse entries in order with keys greater than or\n * equal to the specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const greaterThanEqual: {\n  /**\n   * Returns an iterator that traverse entries in order with keys greater than or\n   * equal to the specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  /**\n   * Returns an iterator that traverse entries in order with keys greater than or\n   * equal to the specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.greaterThanEqualForwards\n\n/**\n * Returns an iterator that traverse entries in reverse order with keys greater\n * than or equal to the specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const greaterThanEqualReversed: {\n  /**\n   * Returns an iterator that traverse entries in reverse order with keys greater\n   * than or equal to the specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  /**\n   * Returns an iterator that traverse entries in reverse order with keys greater\n   * than or equal to the specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.greaterThanEqualBackwards\n\n/**\n * Finds the item with key, if it exists.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const has: {\n  /**\n   * Finds the item with key, if it exists.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => boolean\n  /**\n   * Finds the item with key, if it exists.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K): boolean\n} = RBT.has\n\n/**\n * Insert a new item into the tree.\n *\n * @since 2.0.0\n */\nexport const insert: {\n  /**\n   * Insert a new item into the tree.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(key: K, value: V): (self: RedBlackTree<K, V>) => RedBlackTree<K, V>\n  /**\n   * Insert a new item into the tree.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K, value: V): RedBlackTree<K, V>\n} = RBT.insert\n\n/**\n * Get all the keys present in the tree in order.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const keys: <K, V>(self: RedBlackTree<K, V>) => IterableIterator<K> = RBT.keysForward\n\n/**\n * Get all the keys present in the tree in reverse order.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const keysReversed: <K, V>(self: RedBlackTree<K, V>) => IterableIterator<K> = RBT.keysBackward\n\n/**\n * Returns the last entry in the tree, if it exists.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const last: <K, V>(self: RedBlackTree<K, V>) => Option<[K, V]> = RBT.last\n\n/**\n * Returns an iterator that traverse entries in order with keys less than the\n * specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const lessThan: {\n  /**\n   * Returns an iterator that traverse entries in order with keys less than the\n   * specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  /**\n   * Returns an iterator that traverse entries in order with keys less than the\n   * specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.lessThanForwards\n\n/**\n * Returns an iterator that traverse entries in reverse order with keys less\n * than the specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const lessThanReversed: {\n  /**\n   * Returns an iterator that traverse entries in reverse order with keys less\n   * than the specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  /**\n   * Returns an iterator that traverse entries in reverse order with keys less\n   * than the specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.lessThanBackwards\n\n/**\n * Returns an iterator that traverse entries in order with keys less than or\n * equal to the specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const lessThanEqual: {\n  /**\n   * Returns an iterator that traverse entries in order with keys less than or\n   * equal to the specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  /**\n   * Returns an iterator that traverse entries in order with keys less than or\n   * equal to the specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.lessThanEqualForwards\n\n/**\n * Returns an iterator that traverse entries in reverse order with keys less\n * than or equal to the specified key.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const lessThanEqualReversed: {\n  /**\n   * Returns an iterator that traverse entries in reverse order with keys less\n   * than or equal to the specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => Iterable<[K, V]>\n  /**\n   * Returns an iterator that traverse entries in reverse order with keys less\n   * than or equal to the specified key.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K): Iterable<[K, V]>\n} = RBT.lessThanEqualBackwards\n\n/**\n * Execute the specified function for each node of the tree, in order.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEach: {\n  /**\n   * Execute the specified function for each node of the tree, in order.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(f: (key: K, value: V) => void): (self: RedBlackTree<K, V>) => void\n  /**\n   * Execute the specified function for each node of the tree, in order.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, f: (key: K, value: V) => void): void\n} = RBT.forEach\n\n/**\n * Visit each node of the tree in order with key greater then or equal to max.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEachGreaterThanEqual: {\n  /**\n   * Visit each node of the tree in order with key greater then or equal to max.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(min: K, f: (key: K, value: V) => void): (self: RedBlackTree<K, V>) => void\n  /**\n   * Visit each node of the tree in order with key greater then or equal to max.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, min: K, f: (key: K, value: V) => void): void\n} = RBT.forEachGreaterThanEqual\n\n/**\n * Visit each node of the tree in order with key lower then max.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEachLessThan: {\n  /**\n   * Visit each node of the tree in order with key lower then max.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(max: K, f: (key: K, value: V) => void): (self: RedBlackTree<K, V>) => void\n  /**\n   * Visit each node of the tree in order with key lower then max.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(self: RedBlackTree<K, V>, max: K, f: (key: K, value: V) => void): void\n} = RBT.forEachLessThan\n\n/**\n * Visit each node of the tree in order with key lower than max and greater\n * than or equal to min.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEachBetween: {\n  /**\n   * Visit each node of the tree in order with key lower than max and greater\n   * than or equal to min.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(\n    options: {\n      readonly min: K\n      readonly max: K\n      readonly body: (key: K, value: V) => void\n    }\n  ): (self: RedBlackTree<K, V>) => void\n  /**\n   * Visit each node of the tree in order with key lower than max and greater\n   * than or equal to min.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <K, V>(\n    self: RedBlackTree<K, V>,\n    options: {\n      readonly min: K\n      readonly max: K\n      readonly body: (key: K, value: V) => void\n    }\n  ): void\n} = RBT.forEachBetween\n\n/**\n * Reduce a state over the entries of the tree.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduce: {\n  /**\n   * Reduce a state over the entries of the tree.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <Z, V, K>(zero: Z, f: (accumulator: Z, value: V, key: K) => Z): (self: RedBlackTree<K, V>) => Z\n  /**\n   * Reduce a state over the entries of the tree.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <Z, V, K>(\n    self: RedBlackTree<K, V>,\n    zero: Z,\n    f: (accumulator: Z, value: V, key: K) => Z\n  ): Z\n} = RBT.reduce\n\n/**\n * Removes the entry with the specified key, if it exists.\n *\n * @since 2.0.0\n */\nexport const removeFirst: {\n  /**\n   * Removes the entry with the specified key, if it exists.\n   *\n   * @since 2.0.0\n   */\n  <K>(key: K): <V>(self: RedBlackTree<K, V>) => RedBlackTree<K, V>\n  /**\n   * Removes the entry with the specified key, if it exists.\n   *\n   * @since 2.0.0\n   */\n  <K, V>(self: RedBlackTree<K, V>, key: K): RedBlackTree<K, V>\n} = RBT.removeFirst\n\n/**\n * Traverse the tree in reverse order.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const reversed: <K, V>(self: RedBlackTree<K, V>) => Iterable<[K, V]> = RBT.reversed\n\n/**\n * Returns the size of the tree.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const size: <K, V>(self: RedBlackTree<K, V>) => number = RBT.size\n\n/**\n * Get all values present in the tree in order.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const values: <K, V>(self: RedBlackTree<K, V>) => IterableIterator<V> = RBT.valuesForward\n\n/**\n * Get all values present in the tree in reverse order.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const valuesReversed: <K, V>(self: RedBlackTree<K, V>) => IterableIterator<V> = RBT.valuesBackward\n"],"names":["RBT","RBTI","TypeId","RedBlackTreeTypeId","Direction","isRedBlackTree","empty","fromIterable","make","at","atForwards","atReversed","atBackwards","findAll","findFirst","first","getAt","getOrder","greaterThan","greaterThanForwards","greaterThanReversed","greaterThanBackwards","greaterThanEqual","greaterThanEqualForwards","greaterThanEqualReversed","greaterThanEqualBackwards","has","insert","keys","keysForward","keysReversed","keysBackward","last","lessThan","lessThanForwards","lessThanReversed","lessThanBackwards","lessThanEqual","lessThanEqualForwards","lessThanEqualReversed","lessThanEqualBackwards","forEach","forEachGreaterThanEqual","forEachLessThan","forEachBetween","reduce","removeFirst","reversed","size","values","valuesForward","valuesReversed","valuesBackward"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,OAAO,KAAKA,GAAG,MAAM,4BAA4B;AACjD,OAAO,KAAKC,IAAI,MAAM,qCAAqC;;;AAM3D,MAAMC,MAAM,GAAkBF,GAAG,qNAACG,kBAA4B;AAYvD,MAAMC,SAAS,GAAGH,IAAI,gOAACG,SAAS;AA+BhC,MAAMC,cAAc,GAWvBL,GAAG,qNAACK,cAAc;AAQf,MAAMC,KAAK,GAAwDN,GAAG,qNAACM,KAAK;AAQ5E,MAAMC,YAAY,GAerBP,GAAG,qNAACO,YAAY;AAQb,MAAMC,IAAI,GAImER,GAAG,qNAACQ,IAAI;AAWrF,MAAMC,EAAE,GAqBXT,GAAG,qNAACU,UAAU;AAWX,MAAMC,UAAU,GAqBnBX,GAAG,qNAACY,WAAW;AAQZ,MAAMC,OAAO,GAehBb,GAAG,qNAACa,OAAO;AAQR,MAAMC,SAAS,GAelBd,GAAG,qNAACc,SAAS;AAQV,MAAMC,KAAK,GAAuDf,GAAG,qNAACe,KAAK;AAS3E,MAAMC,KAAK,GAiBdhB,GAAG,qNAACgB,KAAK;AAQN,MAAMC,QAAQ,GAAiDjB,GAAG,qNAACiB,QAAQ;AAS3E,MAAMC,WAAW,GAiBpBlB,GAAG,qNAACmB,mBAAmB;AASpB,MAAMC,mBAAmB,GAiB5BpB,GAAG,qNAACqB,oBAAoB;AASrB,MAAMC,gBAAgB,GAiBzBtB,GAAG,qNAACuB,wBAAwB;AASzB,MAAMC,wBAAwB,GAiBjCxB,GAAG,qNAACyB,yBAAyB;AAQ1B,MAAMC,GAAG,GAeZ1B,GAAG,qNAAC0B,GAAG;AAOJ,MAAMC,MAAM,GAaf3B,GAAG,qNAAC2B,MAAM;AAQP,MAAMC,IAAI,GAA4D5B,GAAG,qNAAC6B,WAAW;AAQrF,MAAMC,YAAY,GAA4D9B,GAAG,qNAAC+B,YAAY;AAQ9F,MAAMC,IAAI,GAAuDhC,GAAG,qNAACgC,IAAI;AASzE,MAAMC,QAAQ,GAiBjBjC,GAAG,qNAACkC,gBAAgB;AASjB,MAAMC,gBAAgB,GAiBzBnC,GAAG,qNAACoC,iBAAiB;AASlB,MAAMC,aAAa,GAiBtBrC,GAAG,qNAACsC,qBAAqB;AAStB,MAAMC,qBAAqB,GAiB9BvC,GAAG,qNAACwC,sBAAsB;AAQvB,MAAMC,OAAO,GAehBzC,GAAG,qNAACyC,OAAO;AAQR,MAAMC,uBAAuB,GAehC1C,GAAG,qNAAC0C,uBAAuB;AAQxB,MAAMC,eAAe,GAexB3C,GAAG,qNAAC2C,eAAe;AAShB,MAAMC,cAAc,GA8BvB5C,GAAG,qNAAC4C,cAAc;AAQf,MAAMC,MAAM,GAmBf7C,GAAG,qNAAC6C,MAAM;AAOP,MAAMC,WAAW,GAapB9C,GAAG,qNAAC8C,WAAW;AAQZ,MAAMC,QAAQ,GAAyD/C,GAAG,qNAAC+C,QAAQ;AAQnF,MAAMC,IAAI,GAA+ChD,GAAG,qNAACgD,IAAI;AAQjE,MAAMC,MAAM,GAA4DjD,GAAG,qNAACkD,aAAa;AAQzF,MAAMC,cAAc,GAA4DnD,GAAG,qNAACoD,cAAc","ignoreList":[0]}},
    {"offset": {"line": 8306, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8312, "column": 0}, "map": {"version":3,"file":"SortedSet.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/SortedSet.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport * as Equal from \"./Equal.js\"\nimport type * as Equivalence from \"./Equivalence.js\"\nimport * as Dual from \"./Function.js\"\nimport { pipe } from \"./Function.js\"\nimport * as Hash from \"./Hash.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport type { Order } from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\nimport type { Predicate } from \"./Predicate.js\"\nimport { hasProperty } from \"./Predicate.js\"\nimport * as RBT from \"./RedBlackTree.js\"\nimport type { Invariant, NoInfer } from \"./Types.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/SortedSet\")\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface SortedSet<in out A> extends Iterable<A>, Equal.Equal, Pipeable, Inspectable {\n  readonly [TypeId]: {\n    readonly _A: Invariant<A>\n  }\n  /** @internal */\n  readonly keyTree: RBT.RedBlackTree<A, boolean>\n}\n\nconst SortedSetProto: Omit<SortedSet<unknown>, \"keyTree\"> = {\n  [TypeId]: {\n    _A: (_: any) => _\n  },\n  [Hash.symbol]<A>(this: SortedSet<A>): number {\n    return pipe(\n      Hash.hash(this.keyTree),\n      Hash.combine(Hash.hash(TypeId)),\n      Hash.cached(this)\n    )\n  },\n  [Equal.symbol]<A>(this: SortedSet<A>, that: unknown): boolean {\n    return isSortedSet(that) && Equal.equals(this.keyTree, that.keyTree)\n  },\n  [Symbol.iterator]<A>(this: SortedSet<A>): Iterator<A> {\n    return RBT.keys(this.keyTree)\n  },\n  toString<A>(this: SortedSet<A>) {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"SortedSet\",\n      values: Array.from(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst fromTree = <A>(keyTree: RBT.RedBlackTree<A, boolean>): SortedSet<A> => {\n  const a = Object.create(SortedSetProto)\n  a.keyTree = keyTree\n  return a\n}\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isSortedSet: {\n  /**\n   * @since 2.0.0\n   * @category refinements\n   */\n  <A>(u: Iterable<A>): u is SortedSet<A>\n  /**\n   * @since 2.0.0\n   * @category refinements\n   */\n  (u: unknown): u is SortedSet<unknown>\n} = (u: unknown): u is SortedSet<unknown> => hasProperty(u, TypeId)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const empty = <A>(O: Order<A>): SortedSet<A> => fromTree(RBT.empty(O))\n\n/**\n * Creates a new `SortedSet` from an iterable collection of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable: {\n  /**\n   * Creates a new `SortedSet` from an iterable collection of values.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <B>(ord: Order<B>): <A extends B>(iterable: Iterable<A>) => SortedSet<A>\n  /**\n   * Creates a new `SortedSet` from an iterable collection of values.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <A extends B, B>(iterable: Iterable<A>, ord: Order<B>): SortedSet<A>\n} = Dual.dual(\n  2,\n  <A extends B, B>(iterable: Iterable<A>, ord: Order<B>): SortedSet<A> =>\n    fromTree(RBT.fromIterable(Array.from(iterable).map((k) => [k, true]), ord))\n)\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make =\n  <K>(ord: Order<K>) => <Entries extends ReadonlyArray<K>>(...entries: Entries): SortedSet<Entries[number]> =>\n    fromIterable(entries, ord)\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const add: {\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(value: A): (self: SortedSet<A>) => SortedSet<A>\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: SortedSet<A>, value: A): SortedSet<A>\n} = Dual.dual<\n  <A>(value: A) => (self: SortedSet<A>) => SortedSet<A>,\n  <A>(self: SortedSet<A>, value: A) => SortedSet<A>\n>(2, (self, value) =>\n  RBT.has(self.keyTree, value)\n    ? self\n    : fromTree(RBT.insert(self.keyTree, value, true)))\n\n/**\n * @since 2.0.0\n */\nexport const difference: {\n  /**\n   * @since 2.0.0\n   */\n  <A, B extends A>(that: Iterable<B>): (self: SortedSet<A>) => SortedSet<A>\n  /**\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: SortedSet<A>, that: Iterable<B>): SortedSet<A>\n} = Dual.dual<\n  <A, B extends A>(that: Iterable<B>) => (self: SortedSet<A>) => SortedSet<A>,\n  <A, B extends A>(self: SortedSet<A>, that: Iterable<B>) => SortedSet<A>\n>(2, <A, B extends A>(self: SortedSet<A>, that: Iterable<B>) => {\n  let out = self\n  for (const value of that) {\n    out = remove<A | B>(out, value)\n  }\n  return out\n})\n\n/**\n * Check if a predicate holds true for every `SortedSet` element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const every: {\n  /**\n   * Check if a predicate holds true for every `SortedSet` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(predicate: Predicate<A>): (self: SortedSet<A>) => boolean\n  /**\n   * Check if a predicate holds true for every `SortedSet` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: SortedSet<A>, predicate: Predicate<A>): boolean\n} = Dual.dual(2, <A>(self: SortedSet<A>, predicate: Predicate<A>): boolean => {\n  for (const value of self) {\n    if (!predicate(value)) {\n      return false\n    }\n  }\n  return true\n})\n\n/**\n * @since 2.0.0\n * @category filtering\n */\nexport const filter: {\n  /**\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A, B extends A>(predicate: Predicate<B>): (self: SortedSet<A>) => SortedSet<A>\n  /**\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A>(self: SortedSet<A>, predicate: Predicate<A>): SortedSet<A>\n} = Dual.dual(2, <A>(self: SortedSet<A>, predicate: Predicate<A>): SortedSet<A> => {\n  const ord = RBT.getOrder(self.keyTree)\n  let out = empty<A>(ord)\n  for (const value of self) {\n    if (predicate(value)) {\n      out = add(out, value)\n    }\n  }\n  return out\n})\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  /**\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <B, A>(O: Order<B>, f: (a: A) => Iterable<B>): (self: SortedSet<A>) => SortedSet<B>\n  /**\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, B>(self: SortedSet<A>, O: Order<B>, f: (a: A) => Iterable<B>): SortedSet<B>\n} = Dual.dual<\n  <B, A>(O: Order<B>, f: (a: A) => Iterable<B>) => (self: SortedSet<A>) => SortedSet<B>,\n  <A, B>(self: SortedSet<A>, O: Order<B>, f: (a: A) => Iterable<B>) => SortedSet<B>\n>(3, (self, O, f) => {\n  let out = empty(O)\n  forEach(self, (a) => {\n    for (const b of f(a)) {\n      out = add(out, b)\n    }\n  })\n  return out\n})\n\n/**\n * @since 2.0.0\n * @category traversing\n */\nexport const forEach: {\n  /**\n   * @since 2.0.0\n   * @category traversing\n   */\n  <A>(f: (a: A) => void): (self: SortedSet<A>) => void\n  /**\n   * @since 2.0.0\n   * @category traversing\n   */\n  <A>(self: SortedSet<A>, f: (a: A) => void): void\n} = Dual.dual<\n  <A>(f: (a: A) => void) => (self: SortedSet<A>) => void,\n  <A>(self: SortedSet<A>, f: (a: A) => void) => void\n>(2, (self, f) => RBT.forEach(self.keyTree, f))\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const has: {\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(value: A): (self: SortedSet<A>) => boolean\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: SortedSet<A>, value: A): boolean\n} = Dual.dual<\n  <A>(value: A) => (self: SortedSet<A>) => boolean,\n  <A>(self: SortedSet<A>, value: A) => boolean\n>(2, (self, value) => RBT.has(self.keyTree, value))\n\n/**\n * @since 2.0.0\n */\nexport const intersection: {\n  /**\n   * @since 2.0.0\n   */\n  <A>(that: Iterable<A>): (self: SortedSet<A>) => SortedSet<A>\n  /**\n   * @since 2.0.0\n   */\n  <A>(self: SortedSet<A>, that: Iterable<A>): SortedSet<A>\n} = Dual.dual<\n  <A>(that: Iterable<A>) => (self: SortedSet<A>) => SortedSet<A>,\n  <A>(self: SortedSet<A>, that: Iterable<A>) => SortedSet<A>\n>(2, (self, that) => {\n  const ord = RBT.getOrder(self.keyTree)\n  let out = empty(ord)\n  for (const value of that) {\n    if (has(self, value)) {\n      out = add(out, value)\n    }\n  }\n  return out\n})\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const isSubset: {\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(that: SortedSet<A>): (self: SortedSet<A>) => boolean\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: SortedSet<A>, that: SortedSet<A>): boolean\n} = Dual.dual<\n  <A>(that: SortedSet<A>) => (self: SortedSet<A>) => boolean,\n  <A>(self: SortedSet<A>, that: SortedSet<A>) => boolean\n>(2, (self, that) => every(self, (a) => has(that, a)))\n\n/**\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  /**\n   * @since 2.0.0\n   * @category mapping\n   */\n  <B, A>(O: Order<B>, f: (a: A) => B): (self: SortedSet<A>) => SortedSet<B>\n  /**\n   * @since 2.0.0\n   * @category mapping\n   */\n  <B, A>(self: SortedSet<A>, O: Order<B>, f: (a: A) => B): SortedSet<B>\n} = Dual.dual<\n  <B, A>(O: Order<B>, f: (a: A) => B) => (self: SortedSet<A>) => SortedSet<B>,\n  <B, A>(self: SortedSet<A>, O: Order<B>, f: (a: A) => B) => SortedSet<B>\n>(3, (self, O, f) => {\n  let out = empty(O)\n  forEach(self, (a) => {\n    const b = f(a)\n    if (!has(out, b)) {\n      out = add(out, b)\n    }\n  })\n  return out\n})\n\n/**\n * @since 2.0.0\n * @category filtering\n */\nexport const partition: {\n  /**\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A>(predicate: (a: NoInfer<A>) => boolean): (self: SortedSet<A>) => [excluded: SortedSet<A>, satisfying: SortedSet<A>]\n  /**\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A>(self: SortedSet<A>, predicate: (a: A) => boolean): [excluded: SortedSet<A>, satisfying: SortedSet<A>]\n} = Dual.dual(\n  2,\n  <A>(self: SortedSet<A>, predicate: (a: A) => boolean): [excluded: SortedSet<A>, satisfying: SortedSet<A>] => {\n    const ord = RBT.getOrder(self.keyTree)\n    let right = empty(ord)\n    let left = empty(ord)\n    for (const value of self) {\n      if (predicate(value)) {\n        right = add(right, value)\n      } else {\n        left = add(left, value)\n      }\n    }\n    return [left, right]\n  }\n)\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const remove: {\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(value: A): (self: SortedSet<A>) => SortedSet<A>\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: SortedSet<A>, value: A): SortedSet<A>\n} = Dual.dual<\n  <A>(value: A) => (self: SortedSet<A>) => SortedSet<A>,\n  <A>(self: SortedSet<A>, value: A) => SortedSet<A>\n>(2, (self, value) => fromTree(RBT.removeFirst(self.keyTree, value)))\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const size = <A>(self: SortedSet<A>): number => RBT.size(self.keyTree)\n\n/**\n * Check if a predicate holds true for some `SortedSet` element.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const some: {\n  /**\n   * Check if a predicate holds true for some `SortedSet` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(predicate: Predicate<A>): (self: SortedSet<A>) => boolean\n  /**\n   * Check if a predicate holds true for some `SortedSet` element.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: SortedSet<A>, predicate: Predicate<A>): boolean\n} = Dual.dual<\n  <A>(predicate: Predicate<A>) => (self: SortedSet<A>) => boolean,\n  <A>(self: SortedSet<A>, predicate: Predicate<A>) => boolean\n>(2, (self, predicate) => {\n  for (const value of self) {\n    if (predicate(value)) {\n      return true\n    }\n  }\n  return false\n})\n\n/**\n * @since 2.0.0\n * @category elements\n */\nexport const toggle: {\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(value: A): (self: SortedSet<A>) => SortedSet<A>\n  /**\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(self: SortedSet<A>, value: A): SortedSet<A>\n} = Dual.dual<\n  <A>(value: A) => (self: SortedSet<A>) => SortedSet<A>,\n  <A>(self: SortedSet<A>, value: A) => SortedSet<A>\n>(2, (self, value) => has(self, value) ? remove(self, value) : add(self, value))\n\n/**\n * @since 2.0.0\n */\nexport const union: {\n  /**\n   * @since 2.0.0\n   */\n  <A>(that: Iterable<A>): (self: SortedSet<A>) => SortedSet<A>\n  /**\n   * @since 2.0.0\n   */\n  <A>(self: SortedSet<A>, that: Iterable<A>): SortedSet<A>\n} = Dual.dual<\n  <A>(that: Iterable<A>) => (self: SortedSet<A>) => SortedSet<A>,\n  <A>(self: SortedSet<A>, that: Iterable<A>) => SortedSet<A>\n>(2, <A>(self: SortedSet<A>, that: Iterable<A>) => {\n  const ord = RBT.getOrder(self.keyTree)\n  let out = empty<A>(ord)\n  for (const value of self) {\n    out = add(value)(out)\n  }\n  for (const value of that) {\n    out = add(value)(out)\n  }\n  return out\n})\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const values = <A>(self: SortedSet<A>): IterableIterator<A> => RBT.keys(self.keyTree)\n\n/**\n * @since 2.0.0\n * @category equivalence\n */\nexport const getEquivalence = <A>(): Equivalence.Equivalence<SortedSet<A>> => (a, b) => isSubset(a, b) && isSubset(b, a)\n"],"names":["Equal","Dual","pipe","Hash","format","NodeInspectSymbol","toJSON","pipeArguments","hasProperty","RBT","TypeId","Symbol","for","SortedSetProto","_A","_","symbol","hash","keyTree","combine","cached","that","isSortedSet","equals","iterator","keys","toString","_id","values","Array","from","map","arguments","fromTree","a","Object","create","u","empty","O","fromIterable","dual","iterable","ord","k","make","entries","add","self","value","has","insert","difference","out","remove","every","predicate","filter","getOrder","flatMap","f","forEach","b","intersection","isSubset","partition","right","left","removeFirst","size","some","toggle","union","getEquivalence"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,OAAO,KAAKG,IAAI,MAAM,WAAW;AADjC,SAASD,IAAI,QAAQ,eAAe;AAHpC,OAAO,KAAKF,KAAK,MAAM,YAAY;AAYnC,OAAO,KAAKS,GAAG,MAAM,mBAAmB;AANxC,SAASL,MAAM,EAAEC,iBAAiB,EAAEC,MAAM,QAAQ,kBAAkB;AAGpE,SAASC,aAAa,QAAQ,eAAe;AAE7C,SAASC,WAAW,QAAQ,gBAAgB;;;;;;;;;AAI5C,MAAME,MAAM,GAAA,WAAA,GAAkBC,MAAM,CAACC,GAAG,CAAC,kBAAkB,CAAC;AAoB5D,MAAMC,cAAc,GAAwC;IAC1D,CAACH,MAAM,CAAA,EAAG;QACRI,EAAE,GAAGC,CAAM,GAAKA;KACjB;IACD,CAACZ,IAAI,gMAACa,MAAM,CAAA,GAAC;QACX,mNAAOd,OAAAA,AAAI,EACTC,IAAI,gMAACc,IAAI,CAAC,IAAI,CAACC,OAAO,CAAC,EACvBf,IAAI,gMAACgB,OAAO,CAAChB,IAAI,gMAACc,IAAI,CAACP,MAAM,CAAC,CAAC,EAC/BP,IAAI,gMAACiB,MAAM,CAAC,IAAI,CAAC,CAClB;IACH,CAAC;IACD,CAACpB,KAAK,gMAACgB,MAAM,CAAA,EAAyBK,IAAa;QACjD,OAAOC,WAAW,CAACD,IAAI,CAAC,IAAIrB,KAAK,gMAACuB,MAAM,CAAC,IAAI,CAACL,OAAO,EAAEG,IAAI,CAACH,OAAO,CAAC;IACtE,CAAC;IACD,CAACP,MAAM,CAACa,QAAQ,CAAA,GAAC;QACf,OAAOf,GAAG,yMAACgB,IAAI,CAAC,IAAI,CAACP,OAAO,CAAC;IAC/B,CAAC;IACDQ,QAAQA,CAAA;QACN,qNAAOtB,UAAAA,AAAM,EAAC,IAAI,CAACE,MAAM,EAAE,CAAC;IAC9B,CAAC;IACDA,MAAMA,CAAA;QACJ,OAAO;YACLqB,GAAG,EAAE,WAAW;YAChBC,MAAM,EAAEC,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC,CAACC,GAAG,CAACzB,oNAAM;SACpC;IACH,CAAC;IACD,4MAACD,oBAAiB,CAAA,GAAC;QACjB,OAAO,IAAI,CAACC,MAAM,EAAE;IACtB,CAAC;IACDJ,IAAIA,CAAA;QACF,mNAAOK,gBAAAA,AAAa,EAAC,IAAI,EAAEyB,SAAS,CAAC;IACvC;CACD;AAED,MAAMC,QAAQ,IAAOf,OAAqC,IAAkB;IAC1E,MAAMgB,CAAC,GAAGC,MAAM,CAACC,MAAM,CAACvB,cAAc,CAAC;IACvCqB,CAAC,CAAChB,OAAO,GAAGA,OAAO;IACnB,OAAOgB,CAAC;AACV,CAAC;AAMM,MAAMZ,WAAW,IAWnBe,CAAU,gNAA8B7B,cAAAA,AAAW,EAAC6B,CAAC,EAAE3B,MAAM,CAAC;AAM5D,MAAM4B,KAAK,IAAOC,CAAW,GAAmBN,QAAQ,CAACxB,GAAG,yMAAC6B,KAAK,CAACC,CAAC,CAAC,CAAC;AAQtE,MAAMC,YAAY,GAAA,WAAA,GAerBvC,IAAI,oMAACwC,IAAI,CACX,CAAC,EACD,CAAiBC,QAAqB,EAAEC,GAAa,GACnDV,QAAQ,CAACxB,GAAG,yMAAC+B,YAAY,CAACX,KAAK,CAACC,IAAI,CAACY,QAAQ,CAAC,CAACX,GAAG,EAAEa,CAAC,GAAK;YAACA,CAAC;YAAE,IAAI;SAAC,CAAC,EAAED,GAAG,CAAC,CAAC,CAC9E;AAMM,MAAME,IAAI,IACXF,GAAa,GAAK,CAAmC,GAAGG,OAAgB,GAC1EN,YAAY,CAACM,OAAO,EAAEH,GAAG,CAAC;AAMvB,MAAMI,GAAG,GAAA,WAAA,GAWZ9C,IAAI,oMAACwC,IAAI,CAGX,CAAC,EAAE,CAACO,IAAI,EAAEC,KAAK,GACfxC,GAAG,yMAACyC,GAAG,CAACF,IAAI,CAAC9B,OAAO,EAAE+B,KAAK,CAAC,GACxBD,IAAI,GACJf,QAAQ,CAACxB,GAAG,yMAAC0C,MAAM,CAACH,IAAI,CAAC9B,OAAO,EAAE+B,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;AAK/C,MAAMG,UAAU,GAAA,WAAA,GASnBnD,IAAI,oMAACwC,IAAI,CAGX,CAAC,EAAE,CAAiBO,IAAkB,EAAE3B,IAAiB,KAAI;IAC7D,IAAIgC,GAAG,GAAGL,IAAI;IACd,KAAK,MAAMC,KAAK,IAAI5B,IAAI,CAAE;QACxBgC,GAAG,GAAGC,MAAM,CAAQD,GAAG,EAAEJ,KAAK,CAAC;IACjC;IACA,OAAOI,GAAG;AACZ,CAAC,CAAC;AAQK,MAAME,KAAK,GAAA,WAAA,GAedtD,IAAI,oMAACwC,IAAI,CAAC,CAAC,EAAE,CAAIO,IAAkB,EAAEQ,SAAuB,KAAa;IAC3E,KAAK,MAAMP,KAAK,IAAID,IAAI,CAAE;QACxB,IAAI,CAACQ,SAAS,CAACP,KAAK,CAAC,EAAE;YACrB,OAAO,KAAK;QACd;IACF;IACA,OAAO,IAAI;AACb,CAAC,CAAC;AAMK,MAAMQ,MAAM,GAAA,WAAA,GAWfxD,IAAI,oMAACwC,IAAI,CAAC,CAAC,EAAE,CAAIO,IAAkB,EAAEQ,SAAuB,KAAkB;IAChF,MAAMb,GAAG,GAAGlC,GAAG,yMAACiD,QAAQ,CAACV,IAAI,CAAC9B,OAAO,CAAC;IACtC,IAAImC,GAAG,GAAGf,KAAK,CAAIK,GAAG,CAAC;IACvB,KAAK,MAAMM,KAAK,IAAID,IAAI,CAAE;QACxB,IAAIQ,SAAS,CAACP,KAAK,CAAC,EAAE;YACpBI,GAAG,GAAGN,GAAG,CAACM,GAAG,EAAEJ,KAAK,CAAC;QACvB;IACF;IACA,OAAOI,GAAG;AACZ,CAAC,CAAC;AAMK,MAAMM,OAAO,GAAA,WAAA,GAWhB1D,IAAI,oMAACwC,IAAI,CAGX,CAAC,EAAE,CAACO,IAAI,EAAET,CAAC,EAAEqB,CAAC,KAAI;IAClB,IAAIP,GAAG,GAAGf,KAAK,CAACC,CAAC,CAAC;IAClBsB,OAAO,CAACb,IAAI,EAAGd,CAAC,IAAI;QAClB,KAAK,MAAM4B,CAAC,IAAIF,CAAC,CAAC1B,CAAC,CAAC,CAAE;YACpBmB,GAAG,GAAGN,GAAG,CAACM,GAAG,EAAES,CAAC,CAAC;QACnB;IACF,CAAC,CAAC;IACF,OAAOT,GAAG;AACZ,CAAC,CAAC;AAMK,MAAMQ,OAAO,GAAA,WAAA,GAWhB5D,IAAI,oMAACwC,IAAI,CAGX,CAAC,EAAE,CAACO,IAAI,EAAEY,CAAC,GAAKnD,GAAG,yMAACoD,OAAO,CAACb,IAAI,CAAC9B,OAAO,EAAE0C,CAAC,CAAC,CAAC;AAMxC,MAAMV,GAAG,GAAA,WAAA,GAWZjD,IAAI,oMAACwC,IAAI,CAGX,CAAC,EAAE,CAACO,IAAI,EAAEC,KAAK,GAAKxC,GAAG,yMAACyC,GAAG,CAACF,IAAI,CAAC9B,OAAO,EAAE+B,KAAK,CAAC,CAAC;AAK5C,MAAMc,YAAY,GAAA,WAAA,GASrB9D,IAAI,oMAACwC,IAAI,CAGX,CAAC,EAAE,CAACO,IAAI,EAAE3B,IAAI,KAAI;IAClB,MAAMsB,GAAG,GAAGlC,GAAG,yMAACiD,QAAQ,CAACV,IAAI,CAAC9B,OAAO,CAAC;IACtC,IAAImC,GAAG,GAAGf,KAAK,CAACK,GAAG,CAAC;IACpB,KAAK,MAAMM,KAAK,IAAI5B,IAAI,CAAE;QACxB,IAAI6B,GAAG,CAACF,IAAI,EAAEC,KAAK,CAAC,EAAE;YACpBI,GAAG,GAAGN,GAAG,CAACM,GAAG,EAAEJ,KAAK,CAAC;QACvB;IACF;IACA,OAAOI,GAAG;AACZ,CAAC,CAAC;AAMK,MAAMW,QAAQ,GAAA,WAAA,GAWjB/D,IAAI,oMAACwC,IAAI,CAGX,CAAC,EAAE,CAACO,IAAI,EAAE3B,IAAI,GAAKkC,KAAK,CAACP,IAAI,GAAGd,CAAC,GAAKgB,GAAG,CAAC7B,IAAI,EAAEa,CAAC,CAAC,CAAC,CAAC;AAM/C,MAAMH,GAAG,GAAA,WAAA,GAWZ9B,IAAI,oMAACwC,IAAI,CAGX,CAAC,EAAE,CAACO,IAAI,EAAET,CAAC,EAAEqB,CAAC,KAAI;IAClB,IAAIP,GAAG,GAAGf,KAAK,CAACC,CAAC,CAAC;IAClBsB,OAAO,CAACb,IAAI,GAAGd,CAAC,IAAI;QAClB,MAAM4B,CAAC,GAAGF,CAAC,CAAC1B,CAAC,CAAC;QACd,IAAI,CAACgB,GAAG,CAACG,GAAG,EAAES,CAAC,CAAC,EAAE;YAChBT,GAAG,GAAGN,GAAG,CAACM,GAAG,EAAES,CAAC,CAAC;QACnB;IACF,CAAC,CAAC;IACF,OAAOT,GAAG;AACZ,CAAC,CAAC;AAMK,MAAMY,SAAS,GAAA,WAAA,GAWlBhE,IAAI,oMAACwC,IAAI,CACX,CAAC,EACD,CAAIO,IAAkB,EAAEQ,SAA4B,KAAwD;IAC1G,MAAMb,GAAG,GAAGlC,GAAG,yMAACiD,QAAQ,CAACV,IAAI,CAAC9B,OAAO,CAAC;IACtC,IAAIgD,KAAK,GAAG5B,KAAK,CAACK,GAAG,CAAC;IACtB,IAAIwB,IAAI,GAAG7B,KAAK,CAACK,GAAG,CAAC;IACrB,KAAK,MAAMM,KAAK,IAAID,IAAI,CAAE;QACxB,IAAIQ,SAAS,CAACP,KAAK,CAAC,EAAE;YACpBiB,KAAK,GAAGnB,GAAG,CAACmB,KAAK,EAAEjB,KAAK,CAAC;QAC3B,CAAC,MAAM;YACLkB,IAAI,GAAGpB,GAAG,CAACoB,IAAI,EAAElB,KAAK,CAAC;QACzB;IACF;IACA,OAAO;QAACkB,IAAI;QAAED,KAAK;KAAC;AACtB,CAAC,CACF;AAMM,MAAMZ,MAAM,GAAA,WAAA,GAWfrD,IAAI,oMAACwC,IAAI,CAGX,CAAC,EAAE,CAACO,IAAI,EAAEC,KAAK,GAAKhB,QAAQ,CAACxB,GAAG,yMAAC2D,WAAW,CAACpB,IAAI,CAAC9B,OAAO,EAAE+B,KAAK,CAAC,CAAC,CAAC;AAM9D,MAAMoB,IAAI,IAAOrB,IAAkB,GAAavC,GAAG,yMAAC4D,IAAI,CAACrB,IAAI,CAAC9B,OAAO,CAAC;AAQtE,MAAMoD,IAAI,GAAA,WAAA,GAebrE,IAAI,oMAACwC,IAAI,CAGX,CAAC,EAAE,CAACO,IAAI,EAAEQ,SAAS,KAAI;IACvB,KAAK,MAAMP,KAAK,IAAID,IAAI,CAAE;QACxB,IAAIQ,SAAS,CAACP,KAAK,CAAC,EAAE;YACpB,OAAO,IAAI;QACb;IACF;IACA,OAAO,KAAK;AACd,CAAC,CAAC;AAMK,MAAMsB,MAAM,GAAA,WAAA,GAWftE,IAAI,oMAACwC,IAAI,CAGX,CAAC,EAAE,CAACO,IAAI,EAAEC,KAAK,GAAKC,GAAG,CAACF,IAAI,EAAEC,KAAK,CAAC,GAAGK,MAAM,CAACN,IAAI,EAAEC,KAAK,CAAC,GAAGF,GAAG,CAACC,IAAI,EAAEC,KAAK,CAAC,CAAC;AAKzE,MAAMuB,KAAK,GAAA,WAAA,GASdvE,IAAI,oMAACwC,IAAI,CAGX,CAAC,EAAE,CAAIO,IAAkB,EAAE3B,IAAiB,KAAI;IAChD,MAAMsB,GAAG,GAAGlC,GAAG,yMAACiD,QAAQ,CAACV,IAAI,CAAC9B,OAAO,CAAC;IACtC,IAAImC,GAAG,GAAGf,KAAK,CAAIK,GAAG,CAAC;IACvB,KAAK,MAAMM,KAAK,IAAID,IAAI,CAAE;QACxBK,GAAG,GAAGN,GAAG,CAACE,KAAK,CAAC,CAACI,GAAG,CAAC;IACvB;IACA,KAAK,MAAMJ,KAAK,IAAI5B,IAAI,CAAE;QACxBgC,GAAG,GAAGN,GAAG,CAACE,KAAK,CAAC,CAACI,GAAG,CAAC;IACvB;IACA,OAAOA,GAAG;AACZ,CAAC,CAAC;AAMK,MAAMzB,MAAM,IAAOoB,IAAkB,GAA0BvC,GAAG,yMAACgB,IAAI,CAACuB,IAAI,CAAC9B,OAAO,CAAC;AAMrF,MAAMuD,cAAc,GAAGA,CAAA,GAAgD,CAACvC,CAAC,EAAE4B,CAAC,GAAKE,QAAQ,CAAC9B,CAAC,EAAE4B,CAAC,CAAC,IAAIE,QAAQ,CAACF,CAAC,EAAE5B,CAAC,CAAC","ignoreList":[0]}},
    {"offset": {"line": 8493, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8499, "column": 0}, "map": {"version":3,"file":"Differ.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Differ.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type { Chunk } from \"./Chunk.js\"\nimport type { Context } from \"./Context.js\"\nimport type { Either } from \"./Either.js\"\nimport type { Equal } from \"./Equal.js\"\nimport * as Dual from \"./Function.js\"\nimport type { HashMap } from \"./HashMap.js\"\nimport type { HashSet } from \"./HashSet.js\"\nimport * as internal from \"./internal/differ.js\"\nimport * as ChunkPatch from \"./internal/differ/chunkPatch.js\"\nimport * as ContextPatch from \"./internal/differ/contextPatch.js\"\nimport * as HashMapPatch from \"./internal/differ/hashMapPatch.js\"\nimport * as HashSetPatch from \"./internal/differ/hashSetPatch.js\"\nimport * as OrPatch from \"./internal/differ/orPatch.js\"\nimport * as ReadonlyArrayPatch from \"./internal/differ/readonlyArrayPatch.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport const TypeId: unique symbol = internal.DifferTypeId as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * A `Differ<Value, Patch>` knows how to compare an old value and new value of\n * type `Value` to produce a patch of type `Patch` that describes the\n * differences between those values. A `Differ` also knows how to apply a patch\n * to an old value to produce a new value that represents the old value updated\n * with the changes described by the patch.\n *\n * A `Differ` can be used to construct a `FiberRef` supporting compositional\n * updates using the `FiberRef.makePatch` constructor.\n *\n * The `Differ` companion object contains constructors for `Differ` values for\n * common data types such as `Chunk`, `HashMap`, and `HashSet``. In addition,\n * `Differ`values can be transformed using the `transform` operator and combined\n * using the `orElseEither` and `zip` operators. This allows creating `Differ`\n * values for arbitrarily complex data types compositionally.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Differ<in out Value, in out Patch> {\n  readonly [TypeId]: {\n    readonly _V: Types.Invariant<Value>\n    readonly _P: Types.Invariant<Patch>\n  }\n  readonly empty: Patch\n  diff(oldValue: Value, newValue: Value): Patch\n  combine(first: Patch, second: Patch): Patch\n  patch(patch: Patch, oldValue: Value): Value\n}\n\nconst ChunkPatchTypeId: unique symbol = ChunkPatch.ChunkPatchTypeId as Differ.Chunk.TypeId\nconst ContextPatchTypeId: unique symbol = ContextPatch.ContextPatchTypeId as Differ.Context.TypeId\nconst HashMapPatchTypeId: unique symbol = HashMapPatch.HashMapPatchTypeId as Differ.HashMap.TypeId\nconst HashSetPatchTypeId: unique symbol = HashSetPatch.HashSetPatchTypeId as Differ.HashSet.TypeId\nconst OrPatchTypeId: unique symbol = OrPatch.OrPatchTypeId as Differ.Or.TypeId\nconst ReadonlyArrayPatchTypeId: unique symbol = ReadonlyArrayPatch\n  .ReadonlyArrayPatchTypeId as Differ.ReadonlyArray.TypeId\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Differ {\n  /**\n   * @since 2.0.0\n   */\n  export namespace Context {\n    /**\n     * @since 2.0.0\n     * @category symbol\n     */\n    export type TypeId = typeof ContextPatchTypeId\n    /**\n     * A `Patch<Input, Output>` describes an update that transforms a `Env<Input>`\n     * to a `Env<Output>` as a data structure. This allows combining updates to\n     * different services in the environment in a compositional way.\n     *\n     * @since 2.0.0\n     * @category models\n     */\n    export interface Patch<in Input, out Output> extends Equal {\n      readonly [ContextPatchTypeId]: {\n        readonly _Input: Types.Contravariant<Input>\n        readonly _Output: Types.Covariant<Output>\n      }\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  export namespace Chunk {\n    /**\n     * @since 2.0.0\n     * @category symbol\n     */\n    export type TypeId = typeof ChunkPatchTypeId\n    /**\n     * A patch which describes updates to a chunk of values.\n     *\n     * @since 2.0.0\n     * @category models\n     */\n    export interface Patch<in out Value, in out Patch> extends Equal {\n      readonly [ChunkPatchTypeId]: {\n        readonly _Value: Types.Invariant<Value>\n        readonly _Patch: Types.Invariant<Patch>\n      }\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  export namespace HashMap {\n    /**\n     * @since 2.0.0\n     * @category symbol\n     */\n    export type TypeId = typeof HashMapPatchTypeId\n    /**\n     * A patch which describes updates to a map of keys and values.\n     *\n     * @since 2.0.0\n     * @category models\n     */\n    export interface Patch<in out Key, in out Value, in out Patch> extends Equal {\n      readonly [HashMapPatchTypeId]: {\n        readonly _Key: Types.Invariant<Key>\n        readonly _Value: Types.Invariant<Value>\n        readonly _Patch: Types.Invariant<Patch>\n      }\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  export namespace HashSet {\n    /**\n     * @since 2.0.0\n     * @category symbol\n     */\n    export type TypeId = typeof HashSetPatchTypeId\n    /**\n     * A patch which describes updates to a set of values.\n     *\n     * @since 2.0.0\n     * @category models\n     */\n    export interface Patch<in out Value> extends Equal {\n      readonly [HashSetPatchTypeId]: {\n        readonly _Value: Types.Invariant<Value>\n      }\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  export namespace Or {\n    /**\n     * @since 2.0.0\n     * @category symbol\n     */\n    export type TypeId = typeof OrPatchTypeId\n    /**\n     * A patch which describes updates to either one value or another.\n     *\n     * @since 2.0.0\n     * @category models\n     */\n    export interface Patch<in out Value, in out Value2, in out Patch, in out Patch2> extends Equal {\n      readonly [OrPatchTypeId]: {\n        readonly _Value: Types.Invariant<Value>\n        readonly _Value2: Types.Invariant<Value2>\n        readonly _Patch: Types.Invariant<Patch>\n        readonly _Patch2: Types.Invariant<Patch2>\n      }\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  export namespace ReadonlyArray {\n    /**\n     * @since 2.0.0\n     * @category symbol\n     */\n    export type TypeId = typeof ReadonlyArrayPatchTypeId\n    /**\n     * A patch which describes updates to a ReadonlyArray of values.\n     *\n     * @since 2.0.0\n     * @category models\n     */\n    export interface Patch<in out Value, in out Patch> extends Equal {\n      readonly [ReadonlyArrayPatchTypeId]: {\n        readonly _Value: Types.Invariant<Value>\n        readonly _Patch: Types.Invariant<Patch>\n      }\n    }\n  }\n}\n\n/**\n * An empty patch that describes no changes.\n *\n * @since 2.0.0\n * @category patch\n */\nexport const empty: <Value, Patch>(self: Differ<Value, Patch>) => Patch = (\n  self\n) => self.empty\n\n/**\n * @since 2.0.0\n * @category patch\n */\nexport const diff: {\n  /**\n   * @since 2.0.0\n   * @category patch\n   */\n  <Value>(oldValue: Value, newValue: Value): <Patch>(\n    self: Differ<Value, Patch>\n  ) => Patch\n  /**\n   * @since 2.0.0\n   * @category patch\n   */\n  <Value, Patch>(self: Differ<Value, Patch>, oldValue: Value, newValue: Value): Patch\n} = Dual.dual(\n  3,\n  <Value, Patch>(\n    self: Differ<Value, Patch>,\n    oldValue: Value,\n    newValue: Value\n  ): Patch => self.diff(oldValue, newValue)\n)\n\n/**\n * Combines two patches to produce a new patch that describes the updates of\n * the first patch and then the updates of the second patch. The combine\n * operation should be associative. In addition, if the combine operation is\n * commutative then joining multiple fibers concurrently will result in\n * deterministic `FiberRef` values.\n *\n * @since 2.0.0\n * @category patch\n */\nexport const combine: {\n  /**\n   * Combines two patches to produce a new patch that describes the updates of\n   * the first patch and then the updates of the second patch. The combine\n   * operation should be associative. In addition, if the combine operation is\n   * commutative then joining multiple fibers concurrently will result in\n   * deterministic `FiberRef` values.\n   *\n   * @since 2.0.0\n   * @category patch\n   */\n  <Patch>(first: Patch, second: Patch): <Value>(\n    self: Differ<Value, Patch>\n  ) => Patch\n  /**\n   * Combines two patches to produce a new patch that describes the updates of\n   * the first patch and then the updates of the second patch. The combine\n   * operation should be associative. In addition, if the combine operation is\n   * commutative then joining multiple fibers concurrently will result in\n   * deterministic `FiberRef` values.\n   *\n   * @since 2.0.0\n   * @category patch\n   */\n  <Value, Patch>(self: Differ<Value, Patch>, first: Patch, second: Patch): Patch\n} = Dual.dual(\n  3,\n  <Value, Patch>(\n    self: Differ<Value, Patch>,\n    first: Patch,\n    second: Patch\n  ): Patch => self.combine(first, second)\n)\n\n/**\n * Applies a patch to an old value to produce a new value that is equal to the\n * old value with the updates described by the patch.\n *\n * @since 2.0.0\n * @category patch\n */\nexport const patch: {\n  /**\n   * Applies a patch to an old value to produce a new value that is equal to the\n   * old value with the updates described by the patch.\n   *\n   * @since 2.0.0\n   * @category patch\n   */\n  <Patch, Value>(patch: Patch, oldValue: Value): (\n    self: Differ<Value, Patch>\n  ) => Value\n  /**\n   * Applies a patch to an old value to produce a new value that is equal to the\n   * old value with the updates described by the patch.\n   *\n   * @since 2.0.0\n   * @category patch\n   */\n  <Patch, Value>(self: Differ<Value, Patch>, patch: Patch, oldValue: Value): Value\n} = Dual.dual(\n  3,\n  <Patch, Value>(\n    self: Differ<Value, Patch>,\n    patch: Patch,\n    oldValue: Value\n  ): Value => self.patch(patch, oldValue)\n)\n\n/**\n * Constructs a new `Differ`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <Value, Patch>(params: {\n  readonly empty: Patch\n  readonly diff: (oldValue: Value, newValue: Value) => Patch\n  readonly combine: (first: Patch, second: Patch) => Patch\n  readonly patch: (patch: Patch, oldValue: Value) => Value\n}) => Differ<Value, Patch> = internal.make\n\n/**\n * Constructs a differ that knows how to diff `Env` values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const environment: <A>() => Differ<\n  Context<A>,\n  Differ.Context.Patch<A, A>\n> = internal.environment\n\n/**\n * Constructs a differ that knows how to diff a `Chunk` of values given a\n * differ that knows how to diff the values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const chunk: <Value, Patch>(\n  differ: Differ<Value, Patch>\n) => Differ<Chunk<Value>, Differ.Chunk.Patch<Value, Patch>> = internal.chunk\n\n/**\n * Constructs a differ that knows how to diff a `HashMap` of keys and values given\n * a differ that knows how to diff the values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const hashMap: <Key, Value, Patch>(\n  differ: Differ<Value, Patch>\n) => Differ<HashMap<Key, Value>, Differ.HashMap.Patch<Key, Value, Patch>> = internal.hashMap\n\n/**\n * Constructs a differ that knows how to diff a `HashSet` of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const hashSet: <Value>() => Differ<\n  HashSet<Value>,\n  Differ.HashSet.Patch<Value>\n> = internal.hashSet\n\n/**\n * Combines this differ and the specified differ to produce a differ that\n * knows how to diff the sum of their values.\n *\n * @since 2.0.0\n */\nexport const orElseEither: {\n  /**\n   * Combines this differ and the specified differ to produce a differ that\n   * knows how to diff the sum of their values.\n   *\n   * @since 2.0.0\n   */\n  <Value2, Patch2>(that: Differ<Value2, Patch2>): <Value, Patch>(\n    self: Differ<Value, Patch>\n  ) => Differ<\n    Either<Value2, Value>,\n    Differ.Or.Patch<Value, Value2, Patch, Patch2>\n  >\n  /**\n   * Combines this differ and the specified differ to produce a differ that\n   * knows how to diff the sum of their values.\n   *\n   * @since 2.0.0\n   */\n  <Value, Patch, Value2, Patch2>(self: Differ<Value, Patch>, that: Differ<Value2, Patch2>): Differ<\n    Either<Value2, Value>,\n    Differ.Or.Patch<Value, Value2, Patch, Patch2>\n  >\n} = internal.orElseEither\n\n/**\n * Constructs a differ that knows how to diff a `ReadonlyArray` of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const readonlyArray: <Value, Patch>(\n  differ: Differ<Value, Patch>\n) => Differ<ReadonlyArray<Value>, Differ.ReadonlyArray.Patch<Value, Patch>> = internal.readonlyArray\n\n/**\n * Transforms the type of values that this differ knows how to differ using\n * the specified functions that map the new and old value types to each other.\n *\n * @since 2.0.0\n */\nexport const transform: {\n  /**\n   * Transforms the type of values that this differ knows how to differ using\n   * the specified functions that map the new and old value types to each other.\n   *\n   * @since 2.0.0\n   */\n  <Value, Value2>(\n    options: {\n      readonly toNew: (value: Value) => Value2\n      readonly toOld: (value: Value2) => Value\n    }\n  ): <Patch>(self: Differ<Value, Patch>) => Differ<Value2, Patch>\n  /**\n   * Transforms the type of values that this differ knows how to differ using\n   * the specified functions that map the new and old value types to each other.\n   *\n   * @since 2.0.0\n   */\n  <Value, Patch, Value2>(\n    self: Differ<Value, Patch>,\n    options: {\n      readonly toNew: (value: Value) => Value2\n      readonly toOld: (value: Value2) => Value\n    }\n  ): Differ<Value2, Patch>\n} = internal.transform\n\n/**\n * Constructs a differ that just diffs two values by returning a function that\n * sets the value to the new value. This differ does not support combining\n * multiple updates to the value compositionally and should only be used when\n * there is no compositional way to update them.\n *\n * @since 2.0.0\n */\nexport const update: <A>() => Differ<A, (a: A) => A> = internal.update\n\n/**\n * A variant of `update` that allows specifying the function that will be used\n * to combine old values with new values.\n *\n * @since 2.0.0\n */\nexport const updateWith: <A>(f: (x: A, y: A) => A) => Differ<A, (a: A) => A> = internal.updateWith\n\n/**\n * Combines this differ and the specified differ to produce a new differ that\n * knows how to diff the product of their values.\n *\n * @since 2.0.0\n */\nexport const zip: {\n  /**\n   * Combines this differ and the specified differ to produce a new differ that\n   * knows how to diff the product of their values.\n   *\n   * @since 2.0.0\n   */\n  <Value2, Patch2>(that: Differ<Value2, Patch2>): <Value, Patch>(\n    self: Differ<Value, Patch>\n  ) => Differ<\n    readonly [Value, Value2], // readonly because invariant\n    readonly [Patch, Patch2] // readonly because invariant\n  >\n  /**\n   * Combines this differ and the specified differ to produce a new differ that\n   * knows how to diff the product of their values.\n   *\n   * @since 2.0.0\n   */\n  <Value, Patch, Value2, Patch2>(self: Differ<Value, Patch>, that: Differ<Value2, Patch2>): Differ<\n    readonly [Value, Value2], // readonly because invariant\n    readonly [Patch, Patch2] // readonly because invariant\n  >\n} = internal.zip\n"],"names":["Dual","internal","ChunkPatch","ContextPatch","HashMapPatch","HashSetPatch","OrPatch","ReadonlyArrayPatch","TypeId","DifferTypeId","ChunkPatchTypeId","ContextPatchTypeId","HashMapPatchTypeId","HashSetPatchTypeId","OrPatchTypeId","ReadonlyArrayPatchTypeId","empty","self","diff","dual","oldValue","newValue","combine","first","second","patch","make","environment","chunk","hashMap","hashSet","orElseEither","readonlyArray","transform","update","updateWith","zip"],"mappings":";;;;;;;;;;;;;;;;;;AAUA,OAAO,KAAKC,QAAQ,MAAM,sBAAsB;AAChD,OAAO,KAAKC,UAAU,MAAM,iCAAiC;AAC7D,OAAO,KAAKC,YAAY,MAAM,mCAAmC;AACjE,OAAO,KAAKC,YAAY,MAAM,mCAAmC;AACjE,OAAO,KAAKC,YAAY,MAAM,mCAAmC;AACjE,OAAO,KAAKC,OAAO,MAAM,8BAA8B;AACvD,OAAO,KAAKC,kBAAkB,MAAM,yCAAyC;AAT7E,OAAO,KAAKP,IAAI,MAAM,eAAe;;;;;;;;;AAgB9B,MAAMQ,MAAM,GAAkBP,QAAQ,0MAACQ,YAAsB;AAsCpE,MAAMC,gBAAgB,GAAkBR,UAAU,sNAACQ,gBAAuC;AAC1F,MAAMC,kBAAkB,GAAkBR,YAAY,sNAACQ,kBAA2C;AAClG,MAAMC,kBAAkB,GAAkBR,YAAY,sNAACQ,kBAA2C;AAClG,MAAMC,kBAAkB,GAAkBR,YAAY,sNAACQ,kBAA2C;AAClG,MAAMC,aAAa,GAAkBR,OAAO,sNAACQ,aAAiC;AAC9E,MAAMC,wBAAwB,GAAkBR,kBAAkB,sNAC/DQ,wBAAuD;AA2JnD,MAAMC,KAAK,IAChBC,IAAI,GACDA,IAAI,CAACD,KAAK;AAMR,MAAME,IAAI,GAAA,WAAA,GAablB,IAAI,oMAACmB,IAAI,CACX,CAAC,EACD,CACEF,IAA0B,EAC1BG,QAAe,EACfC,QAAe,GACLJ,IAAI,CAACC,IAAI,CAACE,QAAQ,EAAEC,QAAQ,CAAC,CAC1C;AAYM,MAAMC,OAAO,GAAA,WAAA,GAyBhBtB,IAAI,oMAACmB,IAAI,CACX,CAAC,EACD,CACEF,IAA0B,EAC1BM,KAAY,EACZC,MAAa,GACHP,IAAI,CAACK,OAAO,CAACC,KAAK,EAAEC,MAAM,CAAC,CACxC;AASM,MAAMC,KAAK,GAAA,WAAA,GAmBdzB,IAAI,oMAACmB,IAAI,CACX,CAAC,EACD,CACEF,IAA0B,EAC1BQ,KAAY,EACZL,QAAe,GACLH,IAAI,CAACQ,KAAK,CAACA,KAAK,EAAEL,QAAQ,CAAC,CACxC;AAQM,MAAMM,IAAI,GAKYzB,QAAQ,0MAACyB,IAAI;AAQnC,MAAMC,WAAW,GAGpB1B,QAAQ,0MAAC0B,WAAW;AASjB,MAAMC,KAAK,GAE4C3B,QAAQ,0MAAC2B,KAAK;AASrE,MAAMC,OAAO,GAEwD5B,QAAQ,0MAAC4B,OAAO;AAQrF,MAAMC,OAAO,GAGhB7B,QAAQ,0MAAC6B,OAAO;AAQb,MAAMC,YAAY,GAuBrB9B,QAAQ,0MAAC8B,YAAY;AAQlB,MAAMC,aAAa,GAEoD/B,QAAQ,0MAAC+B,aAAa;AAQ7F,MAAMC,SAAS,GA0BlBhC,QAAQ,0MAACgC,SAAS;AAUf,MAAMC,MAAM,GAAoCjC,QAAQ,0MAACiC,MAAM;AAQ/D,MAAMC,UAAU,GAAwDlC,QAAQ,0MAACkC,UAAU;AAQ3F,MAAMC,GAAG,GAuBZnC,QAAQ,0MAACmC,GAAG","ignoreList":[0]}},
    {"offset": {"line": 8555, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8561, "column": 0}, "map": {"version":3,"file":"ScheduleInterval.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/ScheduleInterval.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Duration from \"./Duration.js\"\nimport * as internal from \"./internal/schedule/interval.js\"\nimport type * as Option from \"./Option.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const IntervalTypeId: unique symbol = internal.IntervalTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type IntervalTypeId = typeof IntervalTypeId\n\n/**\n * An `Interval` represents an interval of time. Intervals can encompass all\n * time, or no time at all.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Interval {\n  readonly [IntervalTypeId]: IntervalTypeId\n  readonly startMillis: number\n  readonly endMillis: number\n}\n\n/**\n * Constructs a new interval from the two specified endpoints. If the start\n * endpoint greater than the end endpoint, then a zero size interval will be\n * returned.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (startMillis: number, endMillis: number) => Interval = internal.make\n\n/**\n * An `Interval` of zero-width.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: Interval = internal.empty\n\n/**\n * Returns `true` if this `Interval` is less than `that` interval, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category ordering\n */\nexport const lessThan: {\n  /**\n   * Returns `true` if this `Interval` is less than `that` interval, `false`\n   * otherwise.\n   *\n   * @since 2.0.0\n   * @category ordering\n   */\n  (that: Interval): (self: Interval) => boolean\n  /**\n   * Returns `true` if this `Interval` is less than `that` interval, `false`\n   * otherwise.\n   *\n   * @since 2.0.0\n   * @category ordering\n   */\n  (self: Interval, that: Interval): boolean\n} = internal.lessThan\n\n/**\n * Returns the minimum of two `Interval`s.\n *\n * @since 2.0.0\n * @category ordering\n */\nexport const min: {\n  /**\n   * Returns the minimum of two `Interval`s.\n   *\n   * @since 2.0.0\n   * @category ordering\n   */\n  (that: Interval): (self: Interval) => Interval\n  /**\n   * Returns the minimum of two `Interval`s.\n   *\n   * @since 2.0.0\n   * @category ordering\n   */\n  (self: Interval, that: Interval): Interval\n} = internal.min\n\n/**\n * Returns the maximum of two `Interval`s.\n *\n * @since 2.0.0\n * @category ordering\n */\nexport const max: {\n  /**\n   * Returns the maximum of two `Interval`s.\n   *\n   * @since 2.0.0\n   * @category ordering\n   */\n  (that: Interval): (self: Interval) => Interval\n  /**\n   * Returns the maximum of two `Interval`s.\n   *\n   * @since 2.0.0\n   * @category ordering\n   */\n  (self: Interval, that: Interval): Interval\n} = internal.max\n\n/**\n * Returns `true` if the specified `Interval` is empty, `false` otherwise.\n *\n * @since 2.0.0\n * @category ordering\n */\nexport const isEmpty: (self: Interval) => boolean = internal.isEmpty\n\n/**\n * Returns `true` if the specified `Interval` is non-empty, `false` otherwise.\n *\n * @since 2.0.0\n * @category ordering\n */\nexport const isNonEmpty: (self: Interval) => boolean = internal.isNonEmpty\n\n/**\n * Computes a new `Interval` which is the intersection of this `Interval` and\n * that `Interval`.\n *\n * @since 2.0.0\n * @category ordering\n */\nexport const intersect: {\n  /**\n   * Computes a new `Interval` which is the intersection of this `Interval` and\n   * that `Interval`.\n   *\n   * @since 2.0.0\n   * @category ordering\n   */\n  (that: Interval): (self: Interval) => Interval\n  /**\n   * Computes a new `Interval` which is the intersection of this `Interval` and\n   * that `Interval`.\n   *\n   * @since 2.0.0\n   * @category ordering\n   */\n  (self: Interval, that: Interval): Interval\n} = internal.intersect\n\n/**\n * Calculates the size of the `Interval` as the `Duration` from the start of the\n * interval to the end of the interval.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const size: (self: Interval) => Duration.Duration = internal.size\n\n/**\n * Computes a new `Interval` which is the union of this `Interval` and that\n * `Interval` as a `Some`, otherwise returns `None` if the two intervals cannot\n * form a union.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const union: {\n  /**\n   * Computes a new `Interval` which is the union of this `Interval` and that\n   * `Interval` as a `Some`, otherwise returns `None` if the two intervals cannot\n   * form a union.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (that: Interval): (self: Interval) => Option.Option<Interval>\n  /**\n   * Computes a new `Interval` which is the union of this `Interval` and that\n   * `Interval` as a `Some`, otherwise returns `None` if the two intervals cannot\n   * form a union.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: Interval, that: Interval): Option.Option<Interval>\n} = internal.union\n\n/**\n * Construct an `Interval` that includes all time equal to and after the\n * specified start time.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const after: (startMilliseconds: number) => Interval = internal.after\n\n/**\n * Construct an `Interval` that includes all time equal to and before the\n * specified end time.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const before: (endMilliseconds: number) => Interval = internal.before\n"],"names":["internal","IntervalTypeId","make","empty","lessThan","min","max","isEmpty","isNonEmpty","intersect","size","union","after","before"],"mappings":";;;;;;;;;;;;;;;AAIA,OAAO,KAAKA,QAAQ,MAAM,iCAAiC;;AAOpD,MAAMC,cAAc,GAAkBD,QAAQ,wNAACC,cAAc;AA6B7D,MAAMC,IAAI,GAAyDF,QAAQ,wNAACE,IAAI;AAQhF,MAAMC,KAAK,GAAaH,QAAQ,wNAACG,KAAK;AAStC,MAAMC,QAAQ,GAiBjBJ,QAAQ,wNAACI,QAAQ;AAQd,MAAMC,GAAG,GAeZL,QAAQ,wNAACK,GAAG;AAQT,MAAMC,GAAG,GAeZN,QAAQ,wNAACM,GAAG;AAQT,MAAMC,OAAO,GAAgCP,QAAQ,wNAACO,OAAO;AAQ7D,MAAMC,UAAU,GAAgCR,QAAQ,wNAACQ,UAAU;AASnE,MAAMC,SAAS,GAiBlBT,QAAQ,wNAACS,SAAS;AASf,MAAMC,IAAI,GAA0CV,QAAQ,wNAACU,IAAI;AAUjE,MAAMC,KAAK,GAmBdX,QAAQ,wNAACW,KAAK;AASX,MAAMC,KAAK,GAA4CZ,QAAQ,wNAACY,KAAK;AASrE,MAAMC,MAAM,GAA0Cb,QAAQ,wNAACa,MAAM","ignoreList":[0]}},
    {"offset": {"line": 8591, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8597, "column": 0}, "map": {"version":3,"file":"ScheduleIntervals.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/ScheduleIntervals.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Check from \"./Chunk.js\"\nimport * as internal from \"./internal/schedule/intervals.js\"\nimport type * as Interval from \"./ScheduleInterval.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const IntervalsTypeId: unique symbol = internal.IntervalsTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type IntervalsTypeId = typeof IntervalsTypeId\n\n/**\n * An `Intervals` represents a list of several `Interval`s.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Intervals {\n  readonly [IntervalsTypeId]: IntervalsTypeId\n  readonly intervals: Check.Chunk<Interval.Interval>\n}\n\n/**\n * Creates a new `Intervals` from a `List` of `Interval`s.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (intervals: Check.Chunk<Interval.Interval>) => Intervals = internal.make\n\n/**\n * Constructs an empty list of `Interval`s.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: Intervals = internal.empty\n\n/**\n * Creates `Intervals` from the specified `Iterable<Interval>`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable: (intervals: Iterable<Interval.Interval>) => Intervals = internal.fromIterable\n\n/**\n * Computes the union of this `Intervals` and  that `Intervals`\n *\n * @since 2.0.0\n * @category utils\n */\nexport const union: {\n  /**\n   * Computes the union of this `Intervals` and  that `Intervals`\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (that: Intervals): (self: Intervals) => Intervals\n  /**\n   * Computes the union of this `Intervals` and  that `Intervals`\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: Intervals, that: Intervals): Intervals\n} = internal.union\n\n/**\n * Produces the intersection of this `Intervals` and that `Intervals`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const intersect: {\n  /**\n   * Produces the intersection of this `Intervals` and that `Intervals`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (that: Intervals): (self: Intervals) => Intervals\n  /**\n   * Produces the intersection of this `Intervals` and that `Intervals`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: Intervals, that: Intervals): Intervals\n} = internal.intersect\n\n/**\n * The start of the earliest interval in the specified `Intervals`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const start: (self: Intervals) => number = internal.start\n\n/**\n * The end of the latest interval in the specified `Intervals`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const end: (self: Intervals) => number = internal.end\n\n/**\n * Returns `true` if the start of this `Intervals` is before the start of that\n * `Intervals`, `false` otherwise.\n *\n * @since 2.0.0\n * @category ordering\n */\nexport const lessThan: {\n  /**\n   * Returns `true` if the start of this `Intervals` is before the start of that\n   * `Intervals`, `false` otherwise.\n   *\n   * @since 2.0.0\n   * @category ordering\n   */\n  (that: Intervals): (self: Intervals) => boolean\n  /**\n   * Returns `true` if the start of this `Intervals` is before the start of that\n   * `Intervals`, `false` otherwise.\n   *\n   * @since 2.0.0\n   * @category ordering\n   */\n  (self: Intervals, that: Intervals): boolean\n} = internal.lessThan\n\n/**\n * Returns `true` if this `Intervals` is non-empty, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isNonEmpty: (self: Intervals) => boolean = internal.isNonEmpty\n\n/**\n * Returns the maximum of the two `Intervals` (i.e. which has the latest start).\n *\n * @since 2.0.0\n * @category ordering\n */\nexport const max: {\n  /**\n   * Returns the maximum of the two `Intervals` (i.e. which has the latest start).\n   *\n   * @since 2.0.0\n   * @category ordering\n   */\n  (that: Intervals): (self: Intervals) => Intervals\n  /**\n   * Returns the maximum of the two `Intervals` (i.e. which has the latest start).\n   *\n   * @since 2.0.0\n   * @category ordering\n   */\n  (self: Intervals, that: Intervals): Intervals\n} = internal.max\n"],"names":["internal","IntervalsTypeId","make","empty","fromIterable","union","intersect","start","end","lessThan","isNonEmpty","max"],"mappings":";;;;;;;;;;;;;AAIA,OAAO,KAAKA,QAAQ,MAAM,kCAAkC;;AAOrD,MAAMC,eAAe,GAAkBD,QAAQ,yNAACC,eAAe;AAyB/D,MAAMC,IAAI,GAA6DF,QAAQ,yNAACE,IAAI;AAQpF,MAAMC,KAAK,GAAcH,QAAQ,yNAACG,KAAK;AAQvC,MAAMC,YAAY,GAA0DJ,QAAQ,yNAACI,YAAY;AAQjG,MAAMC,KAAK,GAedL,QAAQ,yNAACK,KAAK;AAQX,MAAMC,SAAS,GAelBN,QAAQ,yNAACM,SAAS;AAQf,MAAMC,KAAK,GAAgCP,QAAQ,yNAACO,KAAK;AAQzD,MAAMC,GAAG,GAAgCR,QAAQ,yNAACQ,GAAG;AASrD,MAAMC,QAAQ,GAiBjBT,QAAQ,yNAACS,QAAQ;AAQd,MAAMC,UAAU,GAAiCV,QAAQ,yNAACU,UAAU;AAQpE,MAAMC,GAAG,GAeZX,QAAQ,yNAACW,GAAG","ignoreList":[0]}},
    {"offset": {"line": 8623, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8629, "column": 0}, "map": {"version":3,"file":"ScheduleDecision.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/ScheduleDecision.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport * as internal from \"./internal/schedule/decision.js\"\nimport type * as Interval from \"./ScheduleInterval.js\"\nimport type * as Intervals from \"./ScheduleIntervals.js\"\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type ScheduleDecision = Continue | Done\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Continue {\n  readonly _tag: \"Continue\"\n  readonly intervals: Intervals.Intervals\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Done {\n  readonly _tag: \"Done\"\n}\n\nconst _continue = internal._continue\nexport {\n  /**\n   * @since 2.0.0\n   * @category constructors\n   */\n  _continue as continue\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const continueWith: (interval: Interval.Interval) => ScheduleDecision = internal.continueWith\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const done: ScheduleDecision = internal.done\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isContinue: (self: ScheduleDecision) => self is Continue = internal.isContinue\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isDone: (self: ScheduleDecision) => self is Done = internal.isDone\n"],"names":["internal","_continue","continue","continueWith","done","isContinue","isDone"],"mappings":"AAAA;;;;;;;;;AAGA,OAAO,KAAKA,QAAQ,MAAM,iCAAiC;;AA2B3D,MAAMC,SAAS,GAAGD,QAAQ,wNAACC,SAAS;;AAa7B,MAAME,YAAY,GAAsDH,QAAQ,wNAACG,YAAY;AAM7F,MAAMC,IAAI,GAAqBJ,QAAQ,wNAACI,IAAI;AAM5C,MAAMC,UAAU,GAAiDL,QAAQ,wNAACK,UAAU;AAMpF,MAAMC,MAAM,GAA6CN,QAAQ,wNAACM,MAAM","ignoreList":[0]}},
    {"offset": {"line": 8646, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8652, "column": 0}, "map": {"version":3,"file":"String.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/String.ts"],"sourcesContent":["/**\n * This module provides utility functions and type class instances for working with the `string` type in TypeScript.\n * It includes functions for basic string manipulation, as well as type class instances for\n * `Equivalence` and `Order`.\n *\n * @since 2.0.0\n */\n\nimport type { NonEmptyArray } from \"./Array.js\"\nimport * as equivalence from \"./Equivalence.js\"\nimport { dual } from \"./Function.js\"\nimport * as readonlyArray from \"./internal/array.js\"\nimport * as number from \"./Number.js\"\nimport * as Option from \"./Option.js\"\nimport * as order from \"./Order.js\"\nimport type * as Ordering from \"./Ordering.js\"\nimport type { Refinement } from \"./Predicate.js\"\nimport * as predicate from \"./Predicate.js\"\n\n/**\n * Tests if a value is a `string`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { String } from \"effect\"\n *\n * assert.deepStrictEqual(String.isString(\"a\"), true)\n * assert.deepStrictEqual(String.isString(1), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isString: Refinement<unknown, string> = predicate.isString\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Equivalence: equivalence.Equivalence<string> = equivalence.string\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Order: order.Order<string> = order.string\n\n/**\n * The empty string `\"\"`.\n *\n * @since 2.0.0\n */\nexport const empty: \"\" = \"\" as const\n\n/**\n * Concatenates two strings at the type level.\n *\n * @since 2.0.0\n */\nexport type Concat<A extends string, B extends string> = `${A}${B}`\n\n/**\n * Concatenates two strings at runtime.\n *\n * @since 2.0.0\n */\nexport const concat: {\n  /**\n   * Concatenates two strings at runtime.\n   *\n   * @since 2.0.0\n   */\n  <B extends string>(that: B): <A extends string>(self: A) => Concat<A, B>\n  /**\n   * Concatenates two strings at runtime.\n   *\n   * @since 2.0.0\n   */\n  <A extends string, B extends string>(self: A, that: B): Concat<A, B>\n} = dual(2, (self: string, that: string): string => self + that)\n\n/**\n * @example\n * import { pipe, String } from \"effect\"\n *\n * assert.deepStrictEqual(pipe('a', String.toUpperCase), 'A')\n *\n * @since 2.0.0\n */\nexport const toUpperCase = <S extends string>(self: S): Uppercase<S> => self.toUpperCase() as Uppercase<S>\n\n/**\n * @example\n * import { pipe, String } from \"effect\"\n *\n * assert.deepStrictEqual(pipe('A', String.toLowerCase), 'a')\n *\n * @since 2.0.0\n */\nexport const toLowerCase = <T extends string>(self: T): Lowercase<T> => self.toLowerCase() as Lowercase<T>\n\n/**\n * @example\n * import { pipe, String } from \"effect\"\n *\n * assert.deepStrictEqual(pipe('abc', String.capitalize), 'Abc')\n *\n * @since 2.0.0\n */\nexport const capitalize = <T extends string>(self: T): Capitalize<T> => {\n  if (self.length === 0) return self as Capitalize<T>\n\n  return (toUpperCase(self[0]) + self.slice(1)) as Capitalize<T>\n}\n\n/**\n * @example\n * import { pipe, String } from \"effect\"\n *\n * assert.deepStrictEqual(pipe('ABC', String.uncapitalize), 'aBC')\n *\n * @since 2.0.0\n */\nexport const uncapitalize = <T extends string>(self: T): Uncapitalize<T> => {\n  if (self.length === 0) return self as Uncapitalize<T>\n\n  return (toLowerCase(self[0]) + self.slice(1)) as Uncapitalize<T>\n}\n\n/**\n * @example\n * import { pipe, String } from \"effect\"\n *\n * assert.deepStrictEqual(pipe('abc', String.replace('b', 'd')), 'adc')\n *\n * @since 2.0.0\n */\nexport const replace = (searchValue: string | RegExp, replaceValue: string) => (self: string): string =>\n  self.replace(searchValue, replaceValue)\n\n/**\n * @since 2.0.0\n */\nexport type Trim<A extends string> = TrimEnd<TrimStart<A>>\n\n/**\n * @example\n * import { String } from \"effect\"\n *\n * assert.deepStrictEqual(String.trim(' a '), 'a')\n *\n * @since 2.0.0\n */\nexport const trim = <A extends string>(self: A): Trim<A> => self.trim() as Trim<A>\n\n/**\n * @since 2.0.0\n */\nexport type TrimStart<A extends string> = A extends `${\" \" | \"\\n\" | \"\\t\" | \"\\r\"}${infer B}` ? TrimStart<B> : A\n\n/**\n * @example\n * import { String } from \"effect\"\n *\n * assert.deepStrictEqual(String.trimStart(' a '), 'a ')\n *\n * @since 2.0.0\n */\nexport const trimStart = <A extends string>(self: A): TrimStart<A> => self.trimStart() as TrimStart<A>\n\n/**\n * @since 2.0.0\n */\nexport type TrimEnd<A extends string> = A extends `${infer B}${\" \" | \"\\n\" | \"\\t\" | \"\\r\"}` ? TrimEnd<B> : A\n\n/**\n * @example\n * import { String } from \"effect\"\n *\n * assert.deepStrictEqual(String.trimEnd(' a '), ' a')\n *\n * @since 2.0.0\n */\nexport const trimEnd = <A extends string>(self: A): TrimEnd<A> => self.trimEnd() as TrimEnd<A>\n\n/**\n * @example\n * import { pipe, String } from \"effect\"\n *\n * assert.deepStrictEqual(pipe('abcd', String.slice(1, 3)), 'bc')\n *\n * @since 2.0.0\n */\nexport const slice = (start?: number, end?: number) => (self: string): string => self.slice(start, end)\n\n/**\n * Test whether a `string` is empty.\n *\n * @example\n * import { String } from \"effect\"\n *\n * assert.deepStrictEqual(String.isEmpty(''), true)\n * assert.deepStrictEqual(String.isEmpty('a'), false)\n *\n * @since 2.0.0\n */\nexport const isEmpty = (self: string): self is \"\" => self.length === 0\n\n/**\n * Test whether a `string` is non empty.\n *\n * @since 2.0.0\n */\nexport const isNonEmpty = (self: string): boolean => self.length > 0\n\n/**\n * Calculate the number of characters in a `string`.\n *\n * @example\n * import { String } from \"effect\"\n *\n * assert.deepStrictEqual(String.length('abc'), 3)\n *\n * @since 2.0.0\n */\nexport const length = (self: string): number => self.length\n\n/**\n * @example\n * import { pipe, String } from \"effect\"\n *\n * assert.deepStrictEqual(pipe('abc', String.split('')), ['a', 'b', 'c'])\n * assert.deepStrictEqual(pipe('', String.split('')), [''])\n *\n * @since 2.0.0\n */\nexport const split: {\n  /**\n   * @example\n   * import { pipe, String } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe('abc', String.split('')), ['a', 'b', 'c'])\n   * assert.deepStrictEqual(pipe('', String.split('')), [''])\n   *\n   * @since 2.0.0\n   */\n  (separator: string | RegExp): (self: string) => NonEmptyArray<string>\n  /**\n   * @example\n   * import { pipe, String } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe('abc', String.split('')), ['a', 'b', 'c'])\n   * assert.deepStrictEqual(pipe('', String.split('')), [''])\n   *\n   * @since 2.0.0\n   */\n  (self: string, separator: string | RegExp): NonEmptyArray<string>\n} = dual(2, (self: string, separator: string | RegExp): NonEmptyArray<string> => {\n  const out = self.split(separator)\n  return readonlyArray.isNonEmptyArray(out) ? out : [self]\n})\n\n/**\n * Returns `true` if `searchString` appears as a substring of `self`, at one or more positions that are\n * greater than or equal to `position`; otherwise, returns `false`.\n *\n * @since 2.0.0\n */\nexport const includes = (searchString: string, position?: number) => (self: string): boolean =>\n  self.includes(searchString, position)\n\n/**\n * @since 2.0.0\n */\nexport const startsWith = (searchString: string, position?: number) => (self: string): boolean =>\n  self.startsWith(searchString, position)\n\n/**\n * @since 2.0.0\n */\nexport const endsWith = (searchString: string, position?: number) => (self: string): boolean =>\n  self.endsWith(searchString, position)\n\n/**\n * @example\n * import { pipe, String, Option } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"abc\", String.charCodeAt(1)), Option.some(98))\n * assert.deepStrictEqual(pipe(\"abc\", String.charCodeAt(4)), Option.none())\n *\n * @since 2.0.0\n */\nexport const charCodeAt: {\n  /**\n   * @example\n   * import { pipe, String, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe(\"abc\", String.charCodeAt(1)), Option.some(98))\n   * assert.deepStrictEqual(pipe(\"abc\", String.charCodeAt(4)), Option.none())\n   *\n   * @since 2.0.0\n   */\n  (index: number): (self: string) => Option.Option<number>\n  /**\n   * @example\n   * import { pipe, String, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe(\"abc\", String.charCodeAt(1)), Option.some(98))\n   * assert.deepStrictEqual(pipe(\"abc\", String.charCodeAt(4)), Option.none())\n   *\n   * @since 2.0.0\n   */\n  (self: string, index: number): Option.Option<number>\n} = dual(\n  2,\n  (self: string, index: number): Option.Option<number> =>\n    Option.filter(Option.some(self.charCodeAt(index)), (charCode) => !isNaN(charCode))\n)\n\n/**\n * @example\n * import { pipe, String, Option } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"abcd\", String.substring(1)), \"bcd\")\n * assert.deepStrictEqual(pipe(\"abcd\", String.substring(1, 3)), \"bc\")\n *\n * @since 2.0.0\n */\nexport const substring = (start: number, end?: number) => (self: string): string => self.substring(start, end)\n\n/**\n * @example\n * import { pipe, String, Option } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"abc\", String.at(1)), Option.some(\"b\"))\n * assert.deepStrictEqual(pipe(\"abc\", String.at(4)), Option.none())\n *\n * @since 2.0.0\n */\nexport const at: {\n  /**\n   * @example\n   * import { pipe, String, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe(\"abc\", String.at(1)), Option.some(\"b\"))\n   * assert.deepStrictEqual(pipe(\"abc\", String.at(4)), Option.none())\n   *\n   * @since 2.0.0\n   */\n  (index: number): (self: string) => Option.Option<string>\n  /**\n   * @example\n   * import { pipe, String, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe(\"abc\", String.at(1)), Option.some(\"b\"))\n   * assert.deepStrictEqual(pipe(\"abc\", String.at(4)), Option.none())\n   *\n   * @since 2.0.0\n   */\n  (self: string, index: number): Option.Option<string>\n} = dual(2, (self: string, index: number): Option.Option<string> => Option.fromNullable(self.at(index)))\n\n/**\n * @example\n * import { pipe, String, Option } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"abc\", String.charAt(1)), Option.some(\"b\"))\n * assert.deepStrictEqual(pipe(\"abc\", String.charAt(4)), Option.none())\n *\n * @since 2.0.0\n */\nexport const charAt: {\n  /**\n   * @example\n   * import { pipe, String, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe(\"abc\", String.charAt(1)), Option.some(\"b\"))\n   * assert.deepStrictEqual(pipe(\"abc\", String.charAt(4)), Option.none())\n   *\n   * @since 2.0.0\n   */\n  (index: number): (self: string) => Option.Option<string>\n  /**\n   * @example\n   * import { pipe, String, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe(\"abc\", String.charAt(1)), Option.some(\"b\"))\n   * assert.deepStrictEqual(pipe(\"abc\", String.charAt(4)), Option.none())\n   *\n   * @since 2.0.0\n   */\n  (self: string, index: number): Option.Option<string>\n} = dual(\n  2,\n  (self: string, index: number): Option.Option<string> => Option.filter(Option.some(self.charAt(index)), isNonEmpty)\n)\n\n/**\n * @example\n * import { pipe, String, Option } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"abc\", String.codePointAt(1)), Option.some(98))\n *\n * @since 2.0.0\n */\nexport const codePointAt: {\n  /**\n   * @example\n   * import { pipe, String, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe(\"abc\", String.codePointAt(1)), Option.some(98))\n   *\n   * @since 2.0.0\n   */\n  (index: number): (self: string) => Option.Option<number>\n  /**\n   * @example\n   * import { pipe, String, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe(\"abc\", String.codePointAt(1)), Option.some(98))\n   *\n   * @since 2.0.0\n   */\n  (self: string, index: number): Option.Option<number>\n} = dual(2, (self: string, index: number): Option.Option<number> => Option.fromNullable(self.codePointAt(index)))\n\n/**\n * @example\n * import { pipe, String, Option } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"abbbc\", String.indexOf(\"b\")), Option.some(1))\n *\n * @since 2.0.0\n */\nexport const indexOf = (searchString: string) => (self: string): Option.Option<number> =>\n  Option.filter(Option.some(self.indexOf(searchString)), number.greaterThanOrEqualTo(0))\n\n/**\n * @example\n * import { pipe, String, Option } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"abbbc\", String.lastIndexOf(\"b\")), Option.some(3))\n * assert.deepStrictEqual(pipe(\"abbbc\", String.lastIndexOf(\"d\")), Option.none())\n *\n * @since 2.0.0\n */\nexport const lastIndexOf = (searchString: string) => (self: string): Option.Option<number> =>\n  Option.filter(Option.some(self.lastIndexOf(searchString)), number.greaterThanOrEqualTo(0))\n\n/**\n * @example\n * import { pipe, String } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"a\", String.localeCompare(\"b\")), -1)\n * assert.deepStrictEqual(pipe(\"b\", String.localeCompare(\"a\")), 1)\n * assert.deepStrictEqual(pipe(\"a\", String.localeCompare(\"a\")), 0)\n *\n * @since 2.0.0\n */\nexport const localeCompare =\n  (that: string, locales?: Array<string>, options?: Intl.CollatorOptions) => (self: string): Ordering.Ordering =>\n    number.sign(self.localeCompare(that, locales, options))\n\n/**\n * It is the `pipe`-able version of the native `match` method.\n *\n * @since 2.0.0\n */\nexport const match = (regexp: RegExp | string) => (self: string): Option.Option<RegExpMatchArray> =>\n  Option.fromNullable(self.match(regexp))\n\n/**\n * It is the `pipe`-able version of the native `matchAll` method.\n *\n * @since 2.0.0\n */\nexport const matchAll = (regexp: RegExp) => (self: string): IterableIterator<RegExpMatchArray> => self.matchAll(regexp)\n\n/**\n * @example\n * import { pipe, String } from \"effect\"\n *\n * const str = \"\\u1E9B\\u0323\";\n * assert.deepStrictEqual(pipe(str, String.normalize()), \"\\u1E9B\\u0323\")\n * assert.deepStrictEqual(pipe(str, String.normalize(\"NFC\")), \"\\u1E9B\\u0323\")\n * assert.deepStrictEqual(pipe(str, String.normalize(\"NFD\")), \"\\u017F\\u0323\\u0307\")\n * assert.deepStrictEqual(pipe(str, String.normalize(\"NFKC\")), \"\\u1E69\")\n * assert.deepStrictEqual(pipe(str, String.normalize(\"NFKD\")), \"\\u0073\\u0323\\u0307\")\n *\n * @since 2.0.0\n */\nexport const normalize = (form?: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\") => (self: string): string => self.normalize(form)\n\n/**\n * @example\n * import { pipe, String } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"a\", String.padEnd(5)), \"a    \")\n * assert.deepStrictEqual(pipe(\"a\", String.padEnd(5, \"_\")), \"a____\")\n *\n * @since 2.0.0\n */\nexport const padEnd = (maxLength: number, fillString?: string) => (self: string): string =>\n  self.padEnd(maxLength, fillString)\n\n/**\n * @example\n * import { pipe, String } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"a\", String.padStart(5)), \"    a\")\n * assert.deepStrictEqual(pipe(\"a\", String.padStart(5, \"_\")), \"____a\")\n *\n * @since 2.0.0\n */\nexport const padStart = (maxLength: number, fillString?: string) => (self: string): string =>\n  self.padStart(maxLength, fillString)\n\n/**\n * @example\n * import { pipe, String } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"a\", String.repeat(5)), \"aaaaa\")\n *\n * @since 2.0.0\n */\nexport const repeat = (count: number) => (self: string): string => self.repeat(count)\n\n/**\n * @example\n * import { pipe, String } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"ababb\", String.replaceAll(\"b\", \"c\")), \"acacc\")\n * assert.deepStrictEqual(pipe(\"ababb\", String.replaceAll(/ba/g, \"cc\")), \"accbb\")\n *\n * @since 2.0.0\n */\nexport const replaceAll = (searchValue: string | RegExp, replaceValue: string) => (self: string): string =>\n  self.replaceAll(searchValue, replaceValue)\n\n/**\n * @example\n * import { pipe, String, Option } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"ababb\", String.search(\"b\")), Option.some(1))\n * assert.deepStrictEqual(pipe(\"ababb\", String.search(/abb/)), Option.some(2))\n * assert.deepStrictEqual(pipe(\"ababb\", String.search(\"d\")), Option.none())\n *\n * @since 2.0.0\n */\nexport const search: {\n  /**\n   * @example\n   * import { pipe, String, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe(\"ababb\", String.search(\"b\")), Option.some(1))\n   * assert.deepStrictEqual(pipe(\"ababb\", String.search(/abb/)), Option.some(2))\n   * assert.deepStrictEqual(pipe(\"ababb\", String.search(\"d\")), Option.none())\n   *\n   * @since 2.0.0\n   */\n  (regexp: RegExp | string): (self: string) => Option.Option<number>\n  /**\n   * @example\n   * import { pipe, String, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe(\"ababb\", String.search(\"b\")), Option.some(1))\n   * assert.deepStrictEqual(pipe(\"ababb\", String.search(/abb/)), Option.some(2))\n   * assert.deepStrictEqual(pipe(\"ababb\", String.search(\"d\")), Option.none())\n   *\n   * @since 2.0.0\n   */\n  (self: string, regexp: RegExp | string): Option.Option<number>\n} = dual(\n  2,\n  (self: string, regexp: RegExp | string): Option.Option<number> =>\n    Option.filter(Option.some(self.search(regexp)), number.greaterThanOrEqualTo(0))\n)\n\n/**\n * @example\n * import { pipe, String } from \"effect\"\n *\n * const str = \"\\u0130\"\n * assert.deepStrictEqual(pipe(str, String.toLocaleLowerCase(\"tr\")), \"i\")\n *\n * @since 2.0.0\n */\nexport const toLocaleLowerCase = (locale?: string | Array<string>) => (self: string): string =>\n  self.toLocaleLowerCase(locale)\n\n/**\n * @example\n * import { pipe, String } from \"effect\"\n *\n * const str = \"i\\u0307\"\n * assert.deepStrictEqual(pipe(str, String.toLocaleUpperCase(\"lt-LT\")), \"I\")\n *\n * @since 2.0.0\n */\nexport const toLocaleUpperCase = (locale?: string | Array<string>) => (self: string): string =>\n  self.toLocaleUpperCase(locale)\n\n/**\n * Keep the specified number of characters from the start of a string.\n *\n * If `n` is larger than the available number of characters, the string will\n * be returned whole.\n *\n * If `n` is not a positive number, an empty string will be returned.\n *\n * If `n` is a float, it will be rounded down to the nearest integer.\n *\n * @example\n * import { String } from \"effect\"\n *\n * assert.deepStrictEqual(String.takeLeft(\"Hello World\", 5), \"Hello\")\n *\n * @since 2.0.0\n */\nexport const takeLeft: {\n  /**\n   * Keep the specified number of characters from the start of a string.\n   *\n   * If `n` is larger than the available number of characters, the string will\n   * be returned whole.\n   *\n   * If `n` is not a positive number, an empty string will be returned.\n   *\n   * If `n` is a float, it will be rounded down to the nearest integer.\n   *\n   * @example\n   * import { String } from \"effect\"\n   *\n   * assert.deepStrictEqual(String.takeLeft(\"Hello World\", 5), \"Hello\")\n   *\n   * @since 2.0.0\n   */\n  (n: number): (self: string) => string\n  /**\n   * Keep the specified number of characters from the start of a string.\n   *\n   * If `n` is larger than the available number of characters, the string will\n   * be returned whole.\n   *\n   * If `n` is not a positive number, an empty string will be returned.\n   *\n   * If `n` is a float, it will be rounded down to the nearest integer.\n   *\n   * @example\n   * import { String } from \"effect\"\n   *\n   * assert.deepStrictEqual(String.takeLeft(\"Hello World\", 5), \"Hello\")\n   *\n   * @since 2.0.0\n   */\n  (self: string, n: number): string\n} = dual(2, (self: string, n: number): string => self.slice(0, Math.max(n, 0)))\n\n/**\n * Keep the specified number of characters from the end of a string.\n *\n * If `n` is larger than the available number of characters, the string will\n * be returned whole.\n *\n * If `n` is not a positive number, an empty string will be returned.\n *\n * If `n` is a float, it will be rounded down to the nearest integer.\n *\n * @example\n * import { String } from \"effect\"\n *\n * assert.deepStrictEqual(String.takeRight(\"Hello World\", 5), \"World\")\n *\n * @since 2.0.0\n */\nexport const takeRight: {\n  /**\n   * Keep the specified number of characters from the end of a string.\n   *\n   * If `n` is larger than the available number of characters, the string will\n   * be returned whole.\n   *\n   * If `n` is not a positive number, an empty string will be returned.\n   *\n   * If `n` is a float, it will be rounded down to the nearest integer.\n   *\n   * @example\n   * import { String } from \"effect\"\n   *\n   * assert.deepStrictEqual(String.takeRight(\"Hello World\", 5), \"World\")\n   *\n   * @since 2.0.0\n   */\n  (n: number): (self: string) => string\n  /**\n   * Keep the specified number of characters from the end of a string.\n   *\n   * If `n` is larger than the available number of characters, the string will\n   * be returned whole.\n   *\n   * If `n` is not a positive number, an empty string will be returned.\n   *\n   * If `n` is a float, it will be rounded down to the nearest integer.\n   *\n   * @example\n   * import { String } from \"effect\"\n   *\n   * assert.deepStrictEqual(String.takeRight(\"Hello World\", 5), \"World\")\n   *\n   * @since 2.0.0\n   */\n  (self: string, n: number): string\n} = dual(\n  2,\n  (self: string, n: number): string => self.slice(Math.max(0, self.length - Math.floor(n)), Infinity)\n)\n\nconst CR = 0x0d\nconst LF = 0x0a\n\n/**\n * Returns an `IterableIterator` which yields each line contained within the\n * string, trimming off the trailing newline character.\n *\n * @since 2.0.0\n */\nexport const linesIterator = (self: string): LinesIterator => linesSeparated(self, true)\n\n/**\n * Returns an `IterableIterator` which yields each line contained within the\n * string as well as the trailing newline character.\n *\n * @since 2.0.0\n */\nexport const linesWithSeparators = (s: string): LinesIterator => linesSeparated(s, false)\n\n/**\n * For every line in this string, strip a leading prefix consisting of blanks\n * or control characters followed by the character specified by `marginChar`\n * from the line.\n *\n * @since 2.0.0\n */\nexport const stripMarginWith: {\n  /**\n   * For every line in this string, strip a leading prefix consisting of blanks\n   * or control characters followed by the character specified by `marginChar`\n   * from the line.\n   *\n   * @since 2.0.0\n   */\n  (marginChar: string): (self: string) => string\n  /**\n   * For every line in this string, strip a leading prefix consisting of blanks\n   * or control characters followed by the character specified by `marginChar`\n   * from the line.\n   *\n   * @since 2.0.0\n   */\n  (self: string, marginChar: string): string\n} = dual(2, (self: string, marginChar: string): string => {\n  let out = \"\"\n\n  for (const line of linesWithSeparators(self)) {\n    let index = 0\n\n    while (index < line.length && line.charAt(index) <= \" \") {\n      index = index + 1\n    }\n\n    const stripped = index < line.length && line.charAt(index) === marginChar\n      ? line.substring(index + 1)\n      : line\n\n    out = out + stripped\n  }\n\n  return out\n})\n\n/**\n * For every line in this string, strip a leading prefix consisting of blanks\n * or control characters followed by the `\"|\"` character from the line.\n *\n * @since 2.0.0\n */\nexport const stripMargin = (self: string): string => stripMarginWith(self, \"|\")\n\n/**\n * @since 2.0.0\n */\nexport const snakeToCamel = (self: string): string => {\n  let str = self[0]\n  for (let i = 1; i < self.length; i++) {\n    str += self[i] === \"_\" ? self[++i].toUpperCase() : self[i]\n  }\n  return str\n}\n\n/**\n * @since 2.0.0\n */\nexport const snakeToPascal = (self: string): string => {\n  let str = self[0].toUpperCase()\n  for (let i = 1; i < self.length; i++) {\n    str += self[i] === \"_\" ? self[++i].toUpperCase() : self[i]\n  }\n  return str\n}\n\n/**\n * @since 2.0.0\n */\nexport const snakeToKebab = (self: string): string => self.replace(/_/g, \"-\")\n\n/**\n * @since 2.0.0\n */\nexport const camelToSnake = (self: string): string => self.replace(/([A-Z])/g, \"_$1\").toLowerCase()\n\n/**\n * @since 2.0.0\n */\nexport const pascalToSnake = (self: string): string =>\n  (self.slice(0, 1) + self.slice(1).replace(/([A-Z])/g, \"_$1\")).toLowerCase()\n\n/**\n * @since 2.0.0\n */\nexport const kebabToSnake = (self: string): string => self.replace(/-/g, \"_\")\n\nclass LinesIterator implements IterableIterator<string> {\n  private index: number\n  private readonly length: number\n\n  constructor(readonly s: string, readonly stripped: boolean = false) {\n    this.index = 0\n    this.length = s.length\n  }\n\n  next(): IteratorResult<string> {\n    if (this.done) {\n      return { done: true, value: undefined }\n    }\n    const start = this.index\n    while (!this.done && !isLineBreak(this.s[this.index]!)) {\n      this.index = this.index + 1\n    }\n    let end = this.index\n    if (!this.done) {\n      const char = this.s[this.index]!\n      this.index = this.index + 1\n      if (!this.done && isLineBreak2(char, this.s[this.index]!)) {\n        this.index = this.index + 1\n      }\n      if (!this.stripped) {\n        end = this.index\n      }\n    }\n    return { done: false, value: this.s.substring(start, end) }\n  }\n\n  [Symbol.iterator](): IterableIterator<string> {\n    return new LinesIterator(this.s, this.stripped)\n  }\n\n  private get done(): boolean {\n    return this.index >= this.length\n  }\n}\n\n/**\n * Test if the provided character is a line break character (i.e. either `\"\\r\"`\n * or `\"\\n\"`).\n */\nconst isLineBreak = (char: string): boolean => {\n  const code = char.charCodeAt(0)\n  return code === CR || code === LF\n}\n\n/**\n * Test if the provided characters combine to form a carriage return/line-feed\n * (i.e. `\"\\r\\n\"`).\n */\nconst isLineBreak2 = (char0: string, char1: string): boolean => char0.charCodeAt(0) === CR && char1.charCodeAt(0) === LF\n\nconst linesSeparated = (self: string, stripped: boolean): LinesIterator => new LinesIterator(self, stripped)\n"],"names":["equivalence","dual","readonlyArray","number","Option","order","predicate","isString","Equivalence","string","Order","empty","concat","self","that","toUpperCase","toLowerCase","capitalize","length","slice","uncapitalize","replace","searchValue","replaceValue","trim","trimStart","trimEnd","start","end","isEmpty","isNonEmpty","split","separator","out","isNonEmptyArray","includes","searchString","position","startsWith","endsWith","charCodeAt","index","filter","some","charCode","isNaN","substring","at","fromNullable","charAt","codePointAt","indexOf","greaterThanOrEqualTo","lastIndexOf","localeCompare","locales","options","sign","match","regexp","matchAll","normalize","form","padEnd","maxLength","fillString","padStart","repeat","count","replaceAll","search","toLocaleLowerCase","locale","toLocaleUpperCase","takeLeft","n","Math","max","takeRight","floor","Infinity","CR","LF","linesIterator","linesSeparated","linesWithSeparators","s","stripMarginWith","marginChar","line","stripped","stripMargin","snakeToCamel","str","i","snakeToPascal","snakeToKebab","camelToSnake","pascalToSnake","kebabToSnake","LinesIterator","constructor","next","done","value","undefined","isLineBreak","char","isLineBreak2","Symbol","iterator","code","char0","char1"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 8869, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8875, "column": 0}, "map": {"version":3,"file":"Cron.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Cron.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport * as Arr from \"./Array.js\"\nimport * as Either from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport * as equivalence from \"./Equivalence.js\"\nimport { dual, pipe } from \"./Function.js\"\nimport * as Hash from \"./Hash.js\"\nimport { format, type Inspectable, NodeInspectSymbol } from \"./Inspectable.js\"\nimport * as N from \"./Number.js\"\nimport { type Pipeable, pipeArguments } from \"./Pipeable.js\"\nimport { hasProperty } from \"./Predicate.js\"\nimport * as String from \"./String.js\"\nimport type { Mutable } from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const TypeId: unique symbol = Symbol.for(\"effect/Cron\")\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Cron extends Pipeable, Equal.Equal, Inspectable {\n  readonly [TypeId]: TypeId\n  readonly minutes: ReadonlySet<number>\n  readonly hours: ReadonlySet<number>\n  readonly days: ReadonlySet<number>\n  readonly months: ReadonlySet<number>\n  readonly weekdays: ReadonlySet<number>\n}\n\nconst CronProto: Omit<Cron, \"minutes\" | \"hours\" | \"days\" | \"months\" | \"weekdays\"> = {\n  [TypeId]: TypeId,\n  [Equal.symbol](this: Cron, that: unknown) {\n    return isCron(that) && equals(this, that)\n  },\n  [Hash.symbol](this: Cron): number {\n    return pipe(\n      Hash.array(Arr.fromIterable(this.minutes)),\n      Hash.combine(Hash.array(Arr.fromIterable(this.hours))),\n      Hash.combine(Hash.array(Arr.fromIterable(this.days))),\n      Hash.combine(Hash.array(Arr.fromIterable(this.months))),\n      Hash.combine(Hash.array(Arr.fromIterable(this.weekdays))),\n      Hash.cached(this)\n    )\n  },\n  toString(this: Cron) {\n    return format(this.toJSON())\n  },\n  toJSON(this: Cron) {\n    return {\n      _id: \"Cron\",\n      minutes: Arr.fromIterable(this.minutes),\n      hours: Arr.fromIterable(this.hours),\n      days: Arr.fromIterable(this.days),\n      months: Arr.fromIterable(this.months),\n      weekdays: Arr.fromIterable(this.weekdays)\n    }\n  },\n  [NodeInspectSymbol](this: Cron) {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n} as const\n\n/**\n * Checks if a given value is a `Cron` instance.\n *\n * @param u - The value to check.\n *\n * @since 2.0.0\n * @category guards\n */\nexport const isCron = (u: unknown): u is Cron => hasProperty(u, TypeId)\n\n/**\n * Creates a `Cron` instance from.\n *\n * @param constraints - The cron constraints.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make = ({\n  days,\n  hours,\n  minutes,\n  months,\n  weekdays\n}: {\n  readonly minutes: Iterable<number>\n  readonly hours: Iterable<number>\n  readonly days: Iterable<number>\n  readonly months: Iterable<number>\n  readonly weekdays: Iterable<number>\n}): Cron => {\n  const o: Mutable<Cron> = Object.create(CronProto)\n  o.minutes = new Set(Arr.sort(minutes, N.Order))\n  o.hours = new Set(Arr.sort(hours, N.Order))\n  o.days = new Set(Arr.sort(days, N.Order))\n  o.months = new Set(Arr.sort(months, N.Order))\n  o.weekdays = new Set(Arr.sort(weekdays, N.Order))\n  return o\n}\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport const ParseErrorTypeId: unique symbol = Symbol.for(\"effect/Cron/errors/ParseError\")\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type ParseErrorTypeId = typeof ParseErrorTypeId\n\n/**\n * Represents a checked exception which occurs when decoding fails.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface ParseError {\n  readonly _tag: \"ParseError\"\n  readonly [ParseErrorTypeId]: ParseErrorTypeId\n  readonly message: string\n  readonly input?: string\n}\n\nconst ParseErrorProto: Omit<ParseError, \"input\" | \"message\"> = {\n  _tag: \"ParseError\",\n  [ParseErrorTypeId]: ParseErrorTypeId\n}\n\nconst ParseError = (message: string, input?: string): ParseError => {\n  const o: Mutable<ParseError> = Object.create(ParseErrorProto)\n  o.message = message\n  if (input !== undefined) {\n    o.input = input\n  }\n  return o\n}\n\n/**\n * Returns `true` if the specified value is an `ParseError`, `false` otherwise.\n *\n * @param u - The value to check.\n *\n * @since 2.0.0\n * @category guards\n */\nexport const isParseError = (u: unknown): u is ParseError => hasProperty(u, ParseErrorTypeId)\n\n/**\n * Parses a cron expression into a `Cron` instance.\n *\n * @param cron - The cron expression to parse.\n *\n * @example\n * import { Cron, Either } from \"effect\"\n *\n * // At 04:00 on every day-of-month from 8 through 14.\n * assert.deepStrictEqual(Cron.parse(\"0 4 8-14 * *\"), Either.right(Cron.make({\n *   minutes: [0],\n *   hours: [4],\n *   days: [8, 9, 10, 11, 12, 13, 14],\n *   months: [],\n *   weekdays: []\n * })))\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const parse = (cron: string): Either.Either<Cron, ParseError> => {\n  const segments = cron.split(\" \").filter(String.isNonEmpty)\n  if (segments.length !== 5) {\n    return Either.left(ParseError(`Invalid number of segments in cron expression`, cron))\n  }\n\n  const [minutes, hours, days, months, weekdays] = segments\n  return Either.all({\n    minutes: parseSegment(minutes, minuteOptions),\n    hours: parseSegment(hours, hourOptions),\n    days: parseSegment(days, dayOptions),\n    months: parseSegment(months, monthOptions),\n    weekdays: parseSegment(weekdays, weekdayOptions)\n  }).pipe(Either.map((segments) => make(segments)))\n}\n\n/**\n * Checks if a given `Date` falls within an active `Cron` time window.\n *\n * @param cron - The `Cron` instance.\n * @param date - The `Date` to check against.\n *\n * @example\n * import { Cron, Either } from \"effect\"\n *\n * const cron = Either.getOrThrow(Cron.parse(\"0 4 8-14 * *\"))\n * assert.deepStrictEqual(Cron.match(cron, new Date(\"2021-01-08 04:00:00\")), true)\n * assert.deepStrictEqual(Cron.match(cron, new Date(\"2021-01-08 05:00:00\")), false)\n *\n * @since 2.0.0\n */\nexport const match = (cron: Cron, date: Date): boolean => {\n  const { days, hours, minutes, months, weekdays } = cron\n\n  const minute = date.getMinutes()\n  if (minutes.size !== 0 && !minutes.has(minute)) {\n    return false\n  }\n\n  const hour = date.getHours()\n  if (hours.size !== 0 && !hours.has(hour)) {\n    return false\n  }\n\n  const month = date.getMonth() + 1\n  if (months.size !== 0 && !months.has(month)) {\n    return false\n  }\n\n  if (days.size === 0 && weekdays.size === 0) {\n    return true\n  }\n\n  const day = date.getDate()\n  if (weekdays.size === 0) {\n    return days.has(day)\n  }\n\n  const weekday = date.getDay()\n  if (days.size === 0) {\n    return weekdays.has(weekday)\n  }\n\n  return days.has(day) || weekdays.has(weekday)\n}\n\n/**\n * Returns the next run `Date` for the given `Cron` instance.\n *\n * Uses the current time as a starting point if no value is provided for `now`.\n *\n * @example\n * import { Cron, Either } from \"effect\"\n *\n * const after = new Date(\"2021-01-01 00:00:00\")\n * const cron = Either.getOrThrow(Cron.parse(\"0 4 8-14 * *\"))\n * assert.deepStrictEqual(Cron.next(cron, after), new Date(\"2021-01-08 04:00:00\"))\n *\n * @param cron - The `Cron` instance.\n * @param now - The `Date` to start searching from.\n *\n * @since 2.0.0\n */\nexport const next = (cron: Cron, now?: Date): Date => {\n  const { days, hours, minutes, months, weekdays } = cron\n\n  const restrictMinutes = minutes.size !== 0\n  const restrictHours = hours.size !== 0\n  const restrictDays = days.size !== 0\n  const restrictMonths = months.size !== 0\n  const restrictWeekdays = weekdays.size !== 0\n\n  const current = now ? new Date(now.getTime()) : new Date()\n  // Increment by one minute to ensure we don't match the current date.\n  current.setMinutes(current.getMinutes() + 1)\n  current.setSeconds(0)\n  current.setMilliseconds(0)\n\n  // Only search 8 years into the future.\n  const limit = new Date(current).setFullYear(current.getFullYear() + 8)\n  while (current.getTime() <= limit) {\n    if (restrictMonths && !months.has(current.getMonth() + 1)) {\n      current.setMonth(current.getMonth() + 1)\n      current.setDate(1)\n      current.setHours(0)\n      current.setMinutes(0)\n      continue\n    }\n\n    if (restrictDays && restrictWeekdays) {\n      if (!days.has(current.getDate()) && !weekdays.has(current.getDay())) {\n        current.setDate(current.getDate() + 1)\n        current.setHours(0)\n        current.setMinutes(0)\n        continue\n      }\n    } else if (restrictDays) {\n      if (!days.has(current.getDate())) {\n        current.setDate(current.getDate() + 1)\n        current.setHours(0)\n        current.setMinutes(0)\n        continue\n      }\n    } else if (restrictWeekdays) {\n      if (!weekdays.has(current.getDay())) {\n        current.setDate(current.getDate() + 1)\n        current.setHours(0)\n        current.setMinutes(0)\n        continue\n      }\n    }\n\n    if (restrictHours && !hours.has(current.getHours())) {\n      current.setHours(current.getHours() + 1)\n      current.setMinutes(0)\n      continue\n    }\n\n    if (restrictMinutes && !minutes.has(current.getMinutes())) {\n      current.setMinutes(current.getMinutes() + 1)\n      continue\n    }\n\n    return current\n  }\n\n  throw new Error(\"Unable to find next cron date\")\n}\n\n/**\n * Returns an `IterableIterator` which yields the sequence of `Date`s that match the `Cron` instance.\n *\n * @param cron - The `Cron` instance.\n * @param now - The `Date` to start searching from.\n *\n * @since 2.0.0\n */\nexport const sequence = function*(cron: Cron, now?: Date): IterableIterator<Date> {\n  while (true) {\n    yield now = next(cron, now)\n  }\n}\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Equivalence: equivalence.Equivalence<Cron> = equivalence.make((self, that) =>\n  restrictionsEquals(self.minutes, that.minutes) &&\n  restrictionsEquals(self.hours, that.hours) &&\n  restrictionsEquals(self.days, that.days) &&\n  restrictionsEquals(self.months, that.months) &&\n  restrictionsEquals(self.weekdays, that.weekdays)\n)\n\nconst restrictionsArrayEquals = equivalence.array(equivalence.number)\nconst restrictionsEquals = (self: ReadonlySet<number>, that: ReadonlySet<number>): boolean =>\n  restrictionsArrayEquals(Arr.fromIterable(self), Arr.fromIterable(that))\n\n/**\n * Checks if two `Cron`s are equal.\n *\n * @since 2.0.0\n * @category predicates\n */\nexport const equals: {\n  /**\n   * Checks if two `Cron`s are equal.\n   *\n   * @since 2.0.0\n   * @category predicates\n   */\n  (that: Cron): (self: Cron) => boolean\n  /**\n   * Checks if two `Cron`s are equal.\n   *\n   * @since 2.0.0\n   * @category predicates\n   */\n  (self: Cron, that: Cron): boolean\n} = dual(2, (self: Cron, that: Cron): boolean => Equivalence(self, that))\n\ninterface SegmentOptions {\n  segment: string\n  min: number\n  max: number\n  aliases?: Record<string, number> | undefined\n}\n\nconst minuteOptions: SegmentOptions = {\n  segment: \"minute\",\n  min: 0,\n  max: 59\n}\n\nconst hourOptions: SegmentOptions = {\n  segment: \"hour\",\n  min: 0,\n  max: 23\n}\n\nconst dayOptions: SegmentOptions = {\n  segment: \"day\",\n  min: 1,\n  max: 31\n}\n\nconst monthOptions: SegmentOptions = {\n  segment: \"month\",\n  min: 1,\n  max: 12,\n  aliases: {\n    jan: 1,\n    feb: 2,\n    mar: 3,\n    apr: 4,\n    may: 5,\n    jun: 6,\n    jul: 7,\n    aug: 8,\n    sep: 9,\n    oct: 10,\n    nov: 11,\n    dec: 12\n  }\n}\n\nconst weekdayOptions: SegmentOptions = {\n  segment: \"weekday\",\n  min: 0,\n  max: 6,\n  aliases: {\n    sun: 0,\n    mon: 1,\n    tue: 2,\n    wed: 3,\n    thu: 4,\n    fri: 5,\n    sat: 6\n  }\n}\n\nconst parseSegment = (\n  input: string,\n  options: SegmentOptions\n): Either.Either<ReadonlySet<number>, ParseError> => {\n  const capacity = options.max - options.min + 1\n  const values = new Set<number>()\n  const fields = input.split(\",\")\n\n  for (const field of fields) {\n    const [raw, step] = splitStep(field)\n    if (raw === \"*\" && step === undefined) {\n      return Either.right(new Set())\n    }\n\n    if (step !== undefined) {\n      if (!Number.isInteger(step)) {\n        return Either.left(ParseError(`Expected step value to be a positive integer`, input))\n      }\n      if (step < 1) {\n        return Either.left(ParseError(`Expected step value to be greater than 0`, input))\n      }\n      if (step > options.max) {\n        return Either.left(ParseError(`Expected step value to be less than ${options.max}`, input))\n      }\n    }\n\n    if (raw === \"*\") {\n      for (let i = options.min; i <= options.max; i += step ?? 1) {\n        values.add(i)\n      }\n    } else {\n      const [left, right] = splitRange(raw, options.aliases)\n      if (!Number.isInteger(left)) {\n        return Either.left(ParseError(`Expected a positive integer`, input))\n      }\n      if (left < options.min || left > options.max) {\n        return Either.left(ParseError(`Expected a value between ${options.min} and ${options.max}`, input))\n      }\n\n      if (right === undefined) {\n        values.add(left)\n      } else {\n        if (!Number.isInteger(right)) {\n          return Either.left(ParseError(`Expected a positive integer`, input))\n        }\n        if (right < options.min || right > options.max) {\n          return Either.left(ParseError(`Expected a value between ${options.min} and ${options.max}`, input))\n        }\n        if (left > right) {\n          return Either.left(ParseError(`Invalid value range`, input))\n        }\n\n        for (let i = left; i <= right; i += step ?? 1) {\n          values.add(i)\n        }\n      }\n    }\n\n    if (values.size >= capacity) {\n      return Either.right(new Set())\n    }\n  }\n\n  return Either.right(values)\n}\n\nconst splitStep = (input: string): [string, number | undefined] => {\n  const seperator = input.indexOf(\"/\")\n  if (seperator !== -1) {\n    return [input.slice(0, seperator), Number(input.slice(seperator + 1))]\n  }\n\n  return [input, undefined]\n}\n\nconst splitRange = (input: string, aliases?: Record<string, number>): [number, number | undefined] => {\n  const seperator = input.indexOf(\"-\")\n  if (seperator !== -1) {\n    return [aliasOrValue(input.slice(0, seperator), aliases), aliasOrValue(input.slice(seperator + 1), aliases)]\n  }\n\n  return [aliasOrValue(input, aliases), undefined]\n}\n\nfunction aliasOrValue(field: string, aliases?: Record<string, number>): number {\n  return aliases?.[field.toLocaleLowerCase()] ?? Number(field)\n}\n"],"names":["Arr","Either","Equal","equivalence","dual","pipe","Hash","format","NodeInspectSymbol","N","pipeArguments","hasProperty","String","TypeId","Symbol","for","CronProto","symbol","that","isCron","equals","array","fromIterable","minutes","combine","hours","days","months","weekdays","cached","toString","toJSON","_id","arguments","u","make","o","Object","create","Set","sort","Order","ParseErrorTypeId","ParseErrorProto","_tag","ParseError","message","input","undefined","isParseError","parse","cron","segments","split","filter","isNonEmpty","length","left","all","parseSegment","minuteOptions","hourOptions","dayOptions","monthOptions","weekdayOptions","map","match","date","minute","getMinutes","size","has","hour","getHours","month","getMonth","day","getDate","weekday","getDay","next","now","restrictMinutes","restrictHours","restrictDays","restrictMonths","restrictWeekdays","current","Date","getTime","setMinutes","setSeconds","setMilliseconds","limit","setFullYear","getFullYear","setMonth","setDate","setHours","Error","sequence","Equivalence","self","restrictionsEquals","restrictionsArrayEquals","number","segment","min","max","aliases","jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec","sun","mon","tue","wed","thu","fri","sat","options","capacity","values","fields","field","raw","step","splitStep","right","Number","isInteger","i","add","splitRange","seperator","indexOf","slice","aliasOrValue","toLocaleLowerCase"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 9204, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9210, "column": 0}, "map": {"version":3,"file":"Random.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Random.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Array from \"./Array.js\"\nimport type * as Cause from \"./Cause.js\"\nimport type * as Chunk from \"./Chunk.js\"\nimport type * as Context from \"./Context.js\"\nimport type * as Effect from \"./Effect.js\"\nimport * as defaultServices from \"./internal/defaultServices.js\"\nimport * as internal from \"./internal/random.js\"\nimport type * as NonEmptyIterable from \"./NonEmptyIterable.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const RandomTypeId: unique symbol = internal.RandomTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type RandomTypeId = typeof RandomTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Random {\n  readonly [RandomTypeId]: RandomTypeId\n  /**\n   * Returns the next numeric value from the pseudo-random number generator.\n   */\n  readonly next: Effect.Effect<number>\n  /**\n   * Returns the next boolean value from the pseudo-random number generator.\n   */\n  readonly nextBoolean: Effect.Effect<boolean>\n  /**\n   * Returns the next integer value from the pseudo-random number generator.\n   */\n  readonly nextInt: Effect.Effect<number>\n  /**\n   * Returns the next numeric value in the specified range from the\n   * pseudo-random number generator.\n   */\n  nextRange(min: number, max: number): Effect.Effect<number>\n  /**\n   * Returns the next integer value in the specified range from the\n   * pseudo-random number generator.\n   */\n  nextIntBetween(min: number, max: number): Effect.Effect<number>\n  /**\n   * Uses the pseudo-random number generator to shuffle the specified iterable.\n   */\n  shuffle<A>(elements: Iterable<A>): Effect.Effect<Chunk.Chunk<A>>\n}\n\n/**\n * Returns the next numeric value from the pseudo-random number generator.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const next: Effect.Effect<number> = defaultServices.next\n\n/**\n * Returns the next integer value from the pseudo-random number generator.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const nextInt: Effect.Effect<number> = defaultServices.nextInt\n\n/**\n * Returns the next boolean value from the pseudo-random number generator.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const nextBoolean: Effect.Effect<boolean> = defaultServices.nextBoolean\n\n/**\n * Returns the next numeric value in the specified range from the\n * pseudo-random number generator.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const nextRange: (min: number, max: number) => Effect.Effect<number> = defaultServices.nextRange\n\n/**\n * Returns the next integer value in the specified range from the\n * pseudo-random number generator.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const nextIntBetween: (min: number, max: number) => Effect.Effect<number> = defaultServices.nextIntBetween\n\n/**\n * Uses the pseudo-random number generator to shuffle the specified iterable.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const shuffle: <A>(elements: Iterable<A>) => Effect.Effect<Chunk.Chunk<A>> = defaultServices.shuffle\n\n/**\n * Get a random element from an iterable.\n *\n * @example\n * import { Effect, Random } from \"effect\"\n *\n * Effect.gen(function* () {\n *   const randomItem = yield* Random.choice([1, 2, 3])\n *   console.log(randomItem)\n * })\n *\n * @since 3.6.0\n * @category constructors\n */\nexport const choice: <Self extends Iterable<unknown>>(\n  elements: Self\n) => Self extends NonEmptyIterable.NonEmptyIterable<infer A> ? Effect.Effect<A>\n  : Self extends Array.NonEmptyReadonlyArray<infer A> ? Effect.Effect<A>\n  : Self extends Iterable<infer A> ? Effect.Effect<A, Cause.NoSuchElementException>\n  : never = defaultServices.choice\n\n/**\n * Retreives the `Random` service from the context and uses it to run the\n * specified workflow.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const randomWith: <A, E, R>(f: (random: Random) => Effect.Effect<A, E, R>) => Effect.Effect<A, E, R> =\n  defaultServices.randomWith\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const Random: Context.Tag<Random, Random> = internal.randomTag\n\n/**\n * Constructs the `Random` service, seeding the pseudo-random number generator\n * with an hash of the specified seed.\n * This constructor is useful for generating predictable sequences of random values for specific use cases.\n *\n * Example uses:\n * - Generating random UI data for visual tests.\n * - Creating data that needs to change daily but remain the same throughout a single day, such as using a date as the seed.\n *\n * @param seed - The seed value used to initialize the generator.\n *\n * @example\n * import { Effect, Random } from \"effect\"\n *\n * const random1 = Random.make(\"myseed\")\n * const random2 = Random.make(\"myseed\")\n *\n * assert.equal(Effect.runSync(random1.next), Effect.runSync(random2.next))\n *\n * @since 3.5.0\n * @category constructors\n */\nexport const make: <A>(seed: A) => Random = internal.make\n"],"names":["defaultServices","internal","RandomTypeId","next","nextInt","nextBoolean","nextRange","nextIntBetween","shuffle","choice","randomWith","Random","randomTag","make"],"mappings":";;;;;;;;;;;;;AASA,OAAO,KAAKC,QAAQ,MAAM,sBAAsB;AADhD,OAAO,KAAKD,eAAe,MAAM,+BAA+B;;;AAQzD,MAAME,YAAY,GAAkBD,QAAQ,0MAACC,YAAY;AAgDzD,MAAMC,IAAI,GAA0BH,eAAe,4MAACG,IAAI;AAQxD,MAAMC,OAAO,GAA0BJ,eAAe,4MAACI,OAAO;AAQ9D,MAAMC,WAAW,GAA2BL,eAAe,4MAACK,WAAW;AASvE,MAAMC,SAAS,GAAwDN,eAAe,4MAACM,SAAS;AAShG,MAAMC,cAAc,GAAwDP,eAAe,4MAACO,cAAc;AAQ1G,MAAMC,OAAO,GAAgER,eAAe,4MAACQ,OAAO;AAgBpG,MAAMC,MAAM,GAKPT,eAAe,4MAACS,MAAM;AAS3B,MAAMC,UAAU,GACrBV,eAAe,4MAACU,UAAU;AAMrB,MAAMC,MAAM,GAAgCV,QAAQ,0MAACW,SAAS;AAwB9D,MAAMC,IAAI,GAA2BZ,QAAQ,0MAACY,IAAI","ignoreList":[0]}},
    {"offset": {"line": 9238, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9244, "column": 0}, "map": {"version":3,"file":"Scope.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Scope.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\n\nimport type * as Context from \"./Context.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as ExecutionStrategy from \"./ExecutionStrategy.js\"\nimport type * as Exit from \"./Exit.js\"\nimport * as core from \"./internal/core.js\"\nimport * as fiberRuntime from \"./internal/fiberRuntime.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\n\n/**\n * A unique identifier for the `Scope` type.\n *\n * @since 2.0.0\n * @category symbols\n */\nexport const ScopeTypeId: unique symbol = core.ScopeTypeId\n\n/**\n * The type of the unique identifier for `Scope`.\n *\n * @since 2.0.0\n * @category symbols\n */\nexport type ScopeTypeId = typeof ScopeTypeId\n\n/**\n * A unique identifier for the `CloseableScope` type.\n *\n * @since 2.0.0\n * @category symbols\n */\nexport const CloseableScopeTypeId: unique symbol = core.CloseableScopeTypeId\n\n/**\n * The type of the unique identifier for `CloseableScope`.\n *\n * @since 2.0.0\n * @category symbols\n */\nexport type CloseableScopeTypeId = typeof CloseableScopeTypeId\n\n/**\n * Represents a scope that manages finalizers and can fork child scopes.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Scope extends Pipeable {\n  readonly [ScopeTypeId]: ScopeTypeId\n  /**\n   * The execution strategy for running finalizers in this scope.\n   */\n  readonly strategy: ExecutionStrategy.ExecutionStrategy\n  /**\n   * Forks a new child scope with the specified execution strategy. The child scope\n   * will automatically be closed when this scope is closed.\n   *\n   * @internal\n   */\n  fork(strategy: ExecutionStrategy.ExecutionStrategy): Effect.Effect<Scope.Closeable>\n  /**\n   * Adds a finalizer to this scope. The finalizer will be run when the scope is closed.\n   *\n   * @internal\n   */\n  addFinalizer(finalizer: Scope.Finalizer): Effect.Effect<void>\n}\n\n/**\n * A scope that can be explicitly closed with a specified exit value.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface CloseableScope extends Scope, Pipeable {\n  readonly [CloseableScopeTypeId]: CloseableScopeTypeId\n\n  /**\n   * Closes this scope with the given exit value, running all finalizers.\n   *\n   * @internal\n   */\n  close(exit: Exit.Exit<unknown, unknown>): Effect.Effect<void>\n}\n\n/**\n * A tag representing the current `Scope` in the environment.\n *\n * @since 2.0.0\n * @category context\n */\nexport const Scope: Context.Tag<Scope, Scope> = fiberRuntime.scopeTag\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Scope {\n  /**\n   * A finalizer function that takes an `Exit` value and returns an `Effect`.\n   *\n   * @since 2.0.0\n   * @category model\n   */\n  export type Finalizer = (exit: Exit.Exit<unknown, unknown>) => Effect.Effect<void>\n  /**\n   * A closeable scope that can be explicitly closed.\n   *\n   * @since 2.0.0\n   * @category model\n   */\n  export type Closeable = CloseableScope\n}\n\n/**\n * Adds a finalizer to this scope. The finalizer is guaranteed to be run when\n * the scope is closed. Use this when the finalizer does not need to know the\n * `Exit` value that the scope is closed with.\n *\n * @see {@link addFinalizerExit}\n * @since 2.0.0\n * @category utils\n */\nexport const addFinalizer: (\n  self: Scope,\n  finalizer: Effect.Effect<unknown>\n) => Effect.Effect<void> = core.scopeAddFinalizer\n\n/**\n * Adds a finalizer to this scope. The finalizer receives the `Exit` value\n * when the scope is closed, allowing it to perform different actions based\n * on the exit status.\n *\n * @see {@link addFinalizer}\n * @since 2.0.0\n * @category utils\n */\nexport const addFinalizerExit: (self: Scope, finalizer: Scope.Finalizer) => Effect.Effect<void> =\n  core.scopeAddFinalizerExit\n\n/**\n * Closes this scope with the specified exit value, running all finalizers that\n * have been added to the scope.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const close: (self: CloseableScope, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<void> = core.scopeClose\n\n/**\n * Extends the scope of an `Effect` that requires a scope into this scope.\n * It provides this scope to the effect but does not close the scope when the\n * effect completes execution. This allows extending a scoped value into a\n * larger scope.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const extend: {\n  /**\n   * Extends the scope of an `Effect` that requires a scope into this scope.\n   * It provides this scope to the effect but does not close the scope when the\n   * effect completes execution. This allows extending a scoped value into a\n   * larger scope.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (scope: Scope): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, Scope>>\n  /**\n   * Extends the scope of an `Effect` that requires a scope into this scope.\n   * It provides this scope to the effect but does not close the scope when the\n   * effect completes execution. This allows extending a scoped value into a\n   * larger scope.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(effect: Effect.Effect<A, E, R>, scope: Scope): Effect.Effect<A, E, Exclude<R, Scope>>\n} = fiberRuntime.scopeExtend\n\n/**\n * Forks a new child scope with the specified execution strategy. The child scope\n * will automatically be closed when this scope is closed.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const fork: (\n  self: Scope,\n  strategy: ExecutionStrategy.ExecutionStrategy\n) => Effect.Effect<CloseableScope> = core.scopeFork\n\n/**\n * Provides this closeable scope to an `Effect` that requires a scope,\n * guaranteeing that the scope is closed with the result of that effect as\n * soon as the effect completes execution, whether by success, failure, or\n * interruption.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const use: {\n  /**\n   * Provides this closeable scope to an `Effect` that requires a scope,\n   * guaranteeing that the scope is closed with the result of that effect as\n   * soon as the effect completes execution, whether by success, failure, or\n   * interruption.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  (scope: CloseableScope): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, Scope>>\n  /**\n   * Provides this closeable scope to an `Effect` that requires a scope,\n   * guaranteeing that the scope is closed with the result of that effect as\n   * soon as the effect completes execution, whether by success, failure, or\n   * interruption.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R>(effect: Effect.Effect<A, E, R>, scope: CloseableScope): Effect.Effect<A, E, Exclude<R, Scope>>\n} = fiberRuntime.scopeUse\n\n/**\n * Creates a new closeable scope where finalizers will run according to the\n * specified `ExecutionStrategy`. If no execution strategy is provided, `sequential`\n * will be used by default.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (\n  executionStrategy?: ExecutionStrategy.ExecutionStrategy\n) => Effect.Effect<CloseableScope> = fiberRuntime.scopeMake\n"],"names":["core","fiberRuntime","ScopeTypeId","CloseableScopeTypeId","Scope","scopeTag","addFinalizer","scopeAddFinalizer","addFinalizerExit","scopeAddFinalizerExit","close","scopeClose","extend","scopeExtend","fork","scopeFork","use","scopeUse","make","scopeMake"],"mappings":"AAAA;;;;;;;;;;;;;;AAQA,OAAO,KAAKA,IAAI,MAAM,oBAAoB;AAC1C,OAAO,KAAKC,YAAY,MAAM,4BAA4B;;;AASnD,MAAMC,WAAW,GAAkBF,IAAI,4MAACE,WAAW;AAgBnD,MAAMC,oBAAoB,GAAkBH,IAAI,4MAACG,oBAAoB;AA4DrE,MAAMC,KAAK,GAA8BH,YAAY,4MAACI,QAAQ;AA+B9D,MAAMC,YAAY,GAGEN,IAAI,4MAACO,iBAAiB;AAW1C,MAAMC,gBAAgB,GAC3BR,IAAI,4MAACS,qBAAqB;AASrB,MAAMC,KAAK,GAAqFV,IAAI,4MAACW,UAAU;AAW/G,MAAMC,MAAM,GAqBfX,YAAY,4MAACY,WAAW;AASrB,MAAMC,IAAI,GAGoBd,IAAI,4MAACe,SAAS;AAW5C,MAAMC,GAAG,GAqBZf,YAAY,4MAACgB,QAAQ;AAUlB,MAAMC,IAAI,GAEoBjB,YAAY,4MAACkB,SAAS","ignoreList":[0]}},
    {"offset": {"line": 9272, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9278, "column": 0}, "map": {"version":3,"file":"Fiber.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Fiber.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Cause from \"./Cause.js\"\nimport type { Context } from \"./Context.js\"\nimport type { DefaultServices } from \"./DefaultServices.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Either from \"./Either.js\"\nimport type * as Exit from \"./Exit.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport type { FiberRef } from \"./FiberRef.js\"\nimport type * as FiberRefs from \"./FiberRefs.js\"\nimport type * as FiberStatus from \"./FiberStatus.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport * as core from \"./internal/core.js\"\nimport * as circular from \"./internal/effect/circular.js\"\nimport * as internal from \"./internal/fiber.js\"\nimport * as fiberRuntime from \"./internal/fiberRuntime.js\"\nimport type * as Option from \"./Option.js\"\nimport type * as order from \"./Order.js\"\nimport type * as RuntimeFlags from \"./RuntimeFlags.js\"\nimport type { Scheduler } from \"./Scheduler.js\"\nimport type * as Scope from \"./Scope.js\"\nimport type { Supervisor } from \"./Supervisor.js\"\nimport type { AnySpan, Tracer } from \"./Tracer.js\"\nimport type * as Types from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const FiberTypeId: unique symbol = internal.FiberTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type FiberTypeId = typeof FiberTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const RuntimeFiberTypeId: unique symbol = internal.RuntimeFiberTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type RuntimeFiberTypeId = typeof RuntimeFiberTypeId\n\n/**\n * A fiber is a lightweight thread of execution that never consumes more than a\n * whole thread (but may consume much less, depending on contention and\n * asynchronicity). Fibers are spawned by forking effects, which run\n * concurrently with the parent effect.\n *\n * Fibers can be joined, yielding their result to other fibers, or interrupted,\n * which terminates the fiber, safely releasing all resources.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Fiber<out A, out E = never> extends Effect.Effect<A, E>, Fiber.Variance<A, E> {\n  /**\n   * The identity of the fiber.\n   */\n  id(): FiberId.FiberId\n\n  /**\n   * Awaits the fiber, which suspends the awaiting fiber until the result of the\n   * fiber has been determined.\n   */\n  readonly await: Effect.Effect<Exit.Exit<A, E>>\n\n  /**\n   * Retrieves the immediate children of the fiber.\n   */\n  readonly children: Effect.Effect<Array<Fiber.Runtime<any, any>>>\n\n  /**\n   * Inherits values from all `FiberRef` instances into current fiber. This\n   * will resume immediately.\n   */\n  readonly inheritAll: Effect.Effect<void>\n\n  /**\n   * Tentatively observes the fiber, but returns immediately if it is not\n   * already done.\n   */\n  readonly poll: Effect.Effect<Option.Option<Exit.Exit<A, E>>>\n\n  /**\n   * In the background, interrupts the fiber as if interrupted from the\n   * specified fiber. If the fiber has already exited, the returned effect will\n   * resume immediately. Otherwise, the effect will resume when the fiber exits.\n   */\n  interruptAsFork(fiberId: FiberId.FiberId): Effect.Effect<void>\n\n  readonly [Unify.typeSymbol]?: unknown\n  readonly [Unify.unifySymbol]?: FiberUnify<this>\n  readonly [Unify.ignoreSymbol]?: FiberUnifyIgnore\n}\n\n/**\n * @category models\n * @since 3.8.0\n */\nexport interface FiberUnify<A extends { [Unify.typeSymbol]?: any }> extends Effect.EffectUnify<A> {\n  Fiber?: () => A[Unify.typeSymbol] extends Fiber<infer A0, infer E0> | infer _ ? Fiber<A0, E0> : never\n}\n\n/**\n * @category models\n * @since 3.8.0\n */\nexport interface FiberUnifyIgnore extends Effect.EffectUnifyIgnore {\n  Effect?: true\n}\n\n/**\n * A runtime fiber that is executing an effect. Runtime fibers have an\n * identity and a trace.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface RuntimeFiber<out A, out E = never> extends Fiber<A, E>, Fiber.RuntimeVariance<A, E> {\n  /**\n   * Reads the current number of ops that have occurred since the last yield\n   */\n  get currentOpCount(): number\n\n  /**\n   * Reads the current value of a fiber ref\n   */\n  getFiberRef<X>(fiberRef: FiberRef<X>): X\n\n  /**\n   * The identity of the fiber.\n   */\n  id(): FiberId.Runtime\n\n  /**\n   * The status of the fiber.\n   */\n  readonly status: Effect.Effect<FiberStatus.FiberStatus>\n\n  /**\n   * Returns the current `RuntimeFlags` the fiber is running with.\n   */\n  readonly runtimeFlags: Effect.Effect<RuntimeFlags.RuntimeFlags>\n\n  /**\n   * Adds an observer to the list of observers.\n   */\n  addObserver(observer: (exit: Exit.Exit<A, E>) => void): void\n\n  /**\n   * Removes the specified observer from the list of observers that will be\n   * notified when the fiber exits.\n   */\n  removeObserver(observer: (exit: Exit.Exit<A, E>) => void): void\n\n  /**\n   * Retrieves all fiber refs of the fiber.\n   */\n  getFiberRefs(): FiberRefs.FiberRefs\n\n  /**\n   * Unsafely observes the fiber, but returns immediately if it is not\n   * already done.\n   */\n  unsafePoll(): Exit.Exit<A, E> | null\n\n  /**\n   * In the background, interrupts the fiber as if interrupted from the\n   * specified fiber. If the fiber has already exited, the returned effect will\n   * resume immediately. Otherwise, the effect will resume when the fiber exits.\n   */\n  unsafeInterruptAsFork(fiberId: FiberId.FiberId): void\n\n  /**\n   * Gets the current context\n   */\n  get currentContext(): Context<never>\n\n  /**\n   * Gets the current context\n   */\n  get currentDefaultServices(): Context<DefaultServices>\n\n  /**\n   * Gets the current scheduler\n   */\n  get currentScheduler(): Scheduler\n\n  /**\n   * Gets the current tracer\n   */\n  get currentTracer(): Tracer\n\n  /**\n   * Gets the current span\n   */\n  get currentSpan(): AnySpan | undefined\n\n  /**\n   * Gets the current supervisor\n   */\n  get currentSupervisor(): Supervisor<unknown>\n\n  readonly [Unify.typeSymbol]?: unknown\n  readonly [Unify.unifySymbol]?: RuntimeFiberUnify<this>\n  readonly [Unify.ignoreSymbol]?: RuntimeFiberUnifyIgnore\n}\n\n/**\n * @category models\n * @since 3.8.0\n */\nexport interface RuntimeFiberUnify<A extends { [Unify.typeSymbol]?: any }> extends FiberUnify<A> {\n  RuntimeFiber?: () => A[Unify.typeSymbol] extends RuntimeFiber<infer A0, infer E0> | infer _ ? RuntimeFiber<A0, E0>\n    : never\n}\n\n/**\n * @category models\n * @since 3.8.0\n */\nexport interface RuntimeFiberUnifyIgnore extends FiberUnifyIgnore {\n  Fiber?: true\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Fiber {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export type Runtime<A, E = never> = RuntimeFiber<A, E>\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<out A, out E> {\n    readonly [FiberTypeId]: {\n      readonly _A: Types.Covariant<A>\n      readonly _E: Types.Covariant<E>\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  export interface RuntimeVariance<out A, out E> {\n    readonly [RuntimeFiberTypeId]: {\n      readonly _A: Types.Covariant<A>\n      readonly _E: Types.Covariant<E>\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Dump {\n    /**\n     * The fiber's unique identifier.\n     */\n    readonly id: FiberId.Runtime\n    /**\n     * The status of the fiber.\n     */\n    readonly status: FiberStatus.FiberStatus\n  }\n\n  /**\n   * A record containing information about a `Fiber`.\n   *\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Descriptor {\n    /**\n     * The fiber's unique identifier.\n     */\n    readonly id: FiberId.FiberId\n    /**\n     * The status of the fiber.\n     */\n    readonly status: FiberStatus.FiberStatus\n    /**\n     * The set of fibers attempting to interrupt the fiber or its ancestors.\n     */\n    readonly interruptors: HashSet.HashSet<FiberId.FiberId>\n  }\n}\n\n/**\n * @since 2.0.0\n * @category instances\n */\nexport const Order: order.Order<RuntimeFiber<unknown, unknown>> = internal.Order\n\n/**\n * Returns `true` if the specified value is a `Fiber`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isFiber: (u: unknown) => u is Fiber<unknown, unknown> = internal.isFiber\n\n/**\n * Returns `true` if the specified `Fiber` is a `RuntimeFiber`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isRuntimeFiber: <A, E>(self: Fiber<A, E>) => self is RuntimeFiber<A, E> = internal.isRuntimeFiber\n\n/**\n * The identity of the fiber.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const id: <A, E>(self: Fiber<A, E>) => FiberId.FiberId = internal.id\n\nconst _await: <A, E>(self: Fiber<A, E>) => Effect.Effect<Exit.Exit<A, E>> = internal._await\n\nexport {\n  /**\n   * Awaits the fiber, which suspends the awaiting fiber until the result of the\n   * fiber has been determined.\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  _await as await\n}\n\n/**\n * Awaits on all fibers to be completed, successfully or not.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const awaitAll: <const T extends Iterable<Fiber<any, any>>>(\n  fibers: T\n) => Effect.Effect<\n  [T] extends [ReadonlyArray<infer U>]\n    ? number extends T[\"length\"] ? Array<U extends Fiber<infer A, infer E> ? Exit.Exit<A, E> : never>\n    : { -readonly [K in keyof T]: T[K] extends Fiber<infer A, infer E> ? Exit.Exit<A, E> : never }\n    : Array<T extends Iterable<infer U> ? U extends Fiber<infer A, infer E> ? Exit.Exit<A, E> : never : never>\n> = fiberRuntime.fiberAwaitAll\n\n/**\n * Retrieves the immediate children of the fiber.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const children: <A, E>(self: Fiber<A, E>) => Effect.Effect<Array<RuntimeFiber<any, any>>> = internal.children\n\n/**\n * Collects all fibers into a single fiber producing an in-order list of the\n * results.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const all: <A, E>(fibers: Iterable<Fiber<A, E>>) => Fiber<ReadonlyArray<A>, E> = fiberRuntime.fiberAll\n\n/**\n * A fiber that is done with the specified `Exit` value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const done: <A, E>(exit: Exit.Exit<A, E>) => Fiber<A, E> = internal.done\n\n/**\n * @since 2.0.0\n * @category destructors\n */\nexport const dump: <A, E>(self: RuntimeFiber<A, E>) => Effect.Effect<Fiber.Dump> = internal.dump\n\n/**\n * @since 2.0.0\n * @category destructors\n */\nexport const dumpAll: (\n  fibers: Iterable<RuntimeFiber<unknown, unknown>>\n) => Effect.Effect<Array<Fiber.Dump>> = internal.dumpAll\n\n/**\n * A fiber that has already failed with the specified value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fail: <E>(error: E) => Fiber<never, E> = internal.fail\n\n/**\n * Creates a `Fiber` that has already failed with the specified cause.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const failCause: <E>(cause: Cause.Cause<E>) => Fiber<never, E> = internal.failCause\n\n/**\n * Lifts an `Effect` into a `Fiber`.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const fromEffect: <A, E>(effect: Effect.Effect<A, E>) => Effect.Effect<Fiber<A, E>> = internal.fromEffect\n\n/**\n * Gets the current fiber if one is running.\n *\n * @since 2.0.0\n * @category utilities\n */\nexport const getCurrentFiber: () => Option.Option<RuntimeFiber<any, any>> = internal.getCurrentFiber\n\n/**\n * Inherits values from all `FiberRef` instances into current fiber. This\n * will resume immediately.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const inheritAll: <A, E>(self: Fiber<A, E>) => Effect.Effect<void> = internal.inheritAll\n\n/**\n * Interrupts the fiber from whichever fiber is calling this method. If the\n * fiber has already exited, the returned effect will resume immediately.\n * Otherwise, the effect will resume when the fiber exits.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const interrupt: <A, E>(self: Fiber<A, E>) => Effect.Effect<Exit.Exit<A, E>> = core.interruptFiber\n\n/**\n * Constructrs a `Fiber` that is already interrupted.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const interrupted: (fiberId: FiberId.FiberId) => Fiber<never> = internal.interrupted\n\n/**\n * Interrupts the fiber as if interrupted from the specified fiber. If the\n * fiber has already exited, the returned effect will resume immediately.\n * Otherwise, the effect will resume when the fiber exits.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const interruptAs: {\n  /**\n   * Interrupts the fiber as if interrupted from the specified fiber. If the\n   * fiber has already exited, the returned effect will resume immediately.\n   * Otherwise, the effect will resume when the fiber exits.\n   *\n   * @since 2.0.0\n   * @category interruption\n   */\n  (fiberId: FiberId.FiberId): <A, E>(self: Fiber<A, E>) => Effect.Effect<Exit.Exit<A, E>>\n  /**\n   * Interrupts the fiber as if interrupted from the specified fiber. If the\n   * fiber has already exited, the returned effect will resume immediately.\n   * Otherwise, the effect will resume when the fiber exits.\n   *\n   * @since 2.0.0\n   * @category interruption\n   */\n  <A, E>(self: Fiber<A, E>, fiberId: FiberId.FiberId): Effect.Effect<Exit.Exit<A, E>>\n} = core.interruptAsFiber\n\n/**\n * Interrupts the fiber as if interrupted from the specified fiber. If the\n * fiber has already exited, the returned effect will resume immediately.\n * Otherwise, the effect will resume when the fiber exits.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const interruptAsFork: {\n  /**\n   * Interrupts the fiber as if interrupted from the specified fiber. If the\n   * fiber has already exited, the returned effect will resume immediately.\n   * Otherwise, the effect will resume when the fiber exits.\n   *\n   * @since 2.0.0\n   * @category interruption\n   */\n  (fiberId: FiberId.FiberId): <A, E>(self: Fiber<A, E>) => Effect.Effect<void>\n  /**\n   * Interrupts the fiber as if interrupted from the specified fiber. If the\n   * fiber has already exited, the returned effect will resume immediately.\n   * Otherwise, the effect will resume when the fiber exits.\n   *\n   * @since 2.0.0\n   * @category interruption\n   */\n  <A, E>(self: Fiber<A, E>, fiberId: FiberId.FiberId): Effect.Effect<void>\n} = internal.interruptAsFork\n\n/**\n * Interrupts all fibers, awaiting their interruption.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const interruptAll: (fibers: Iterable<Fiber<any, any>>) => Effect.Effect<void> = internal.interruptAll\n\n/**\n * Interrupts all fibers as by the specified fiber, awaiting their\n * interruption.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const interruptAllAs: {\n  /**\n   * Interrupts all fibers as by the specified fiber, awaiting their\n   * interruption.\n   *\n   * @since 2.0.0\n   * @category interruption\n   */\n  (fiberId: FiberId.FiberId): (fibers: Iterable<Fiber<any, any>>) => Effect.Effect<void>\n  /**\n   * Interrupts all fibers as by the specified fiber, awaiting their\n   * interruption.\n   *\n   * @since 2.0.0\n   * @category interruption\n   */\n  (fibers: Iterable<Fiber<any, any>>, fiberId: FiberId.FiberId): Effect.Effect<void>\n} = internal.interruptAllAs\n\n/**\n * Interrupts the fiber from whichever fiber is calling this method. The\n * interruption will happen in a separate daemon fiber, and the returned\n * effect will always resume immediately without waiting.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const interruptFork: <A, E>(self: Fiber<A, E>) => Effect.Effect<void> = fiberRuntime.fiberInterruptFork\n\n/**\n * Joins the fiber, which suspends the joining fiber until the result of the\n * fiber has been determined. Attempting to join a fiber that has erred will\n * result in a catchable error. Joining an interrupted fiber will result in an\n * \"inner interruption\" of this fiber, unlike interruption triggered by\n * another fiber, \"inner interruption\" can be caught and recovered.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const join: <A, E>(self: Fiber<A, E>) => Effect.Effect<A, E> = internal.join\n\n/**\n * Joins all fibers, awaiting their _successful_ completion. Attempting to\n * join a fiber that has erred will result in a catchable error, _if_ that\n * error does not result from interruption.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const joinAll: <A, E>(fibers: Iterable<Fiber<A, E>>) => Effect.Effect<Array<A>, E> = fiberRuntime.fiberJoinAll\n\n/**\n * Maps over the value the Fiber computes.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  /**\n   * Maps over the value the Fiber computes.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, B>(f: (a: A) => B): <E>(self: Fiber<A, E>) => Fiber<B, E>\n  /**\n   * Maps over the value the Fiber computes.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, B>(self: Fiber<A, E>, f: (a: A) => B): Fiber<B, E>\n} = internal.map\n\n/**\n * Effectually maps over the value the fiber computes.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapEffect: {\n  /**\n   * Effectually maps over the value the fiber computes.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, A2, E2>(f: (a: A) => Effect.Effect<A2, E2>): <E>(self: Fiber<A, E>) => Fiber<A2, E2 | E>\n  /**\n   * Effectually maps over the value the fiber computes.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, A2, E2>(self: Fiber<A, E>, f: (a: A) => Effect.Effect<A2, E2>): Fiber<A2, E | E2>\n} = internal.mapEffect\n\n/**\n * Passes the success of this fiber to the specified callback, and continues\n * with the fiber that it returns.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapFiber: {\n  /**\n   * Passes the success of this fiber to the specified callback, and continues\n   * with the fiber that it returns.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <E, E2, A, B>(f: (a: A) => Fiber<B, E2>): (self: Fiber<A, E>) => Effect.Effect<Fiber<B, E | E2>>\n  /**\n   * Passes the success of this fiber to the specified callback, and continues\n   * with the fiber that it returns.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, E2, B>(self: Fiber<A, E>, f: (a: A) => Fiber<B, E2>): Effect.Effect<Fiber<B, E | E2>>\n} = internal.mapFiber\n\n/**\n * Folds over the `Fiber` or `RuntimeFiber`.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const match: {\n  /**\n   * Folds over the `Fiber` or `RuntimeFiber`.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <A, E, Z>(\n    options: {\n      readonly onFiber: (fiber: Fiber<A, E>) => Z\n      readonly onRuntimeFiber: (fiber: RuntimeFiber<A, E>) => Z\n    }\n  ): (self: Fiber<A, E>) => Z\n  /**\n   * Folds over the `Fiber` or `RuntimeFiber`.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <A, E, Z>(\n    self: Fiber<A, E>,\n    options: {\n      readonly onFiber: (fiber: Fiber<A, E>) => Z\n      readonly onRuntimeFiber: (fiber: RuntimeFiber<A, E>) => Z\n    }\n  ): Z\n} = internal.match\n\n/**\n * A fiber that never fails or succeeds.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const never: Fiber<never> = internal.never\n\n/**\n * Returns a fiber that prefers `this` fiber, but falls back to the `that` one\n * when `this` one fails. Interrupting the returned fiber will interrupt both\n * fibers, sequentially, from left to right.\n *\n * @since 2.0.0\n * @category alternatives\n */\nexport const orElse: {\n  /**\n   * Returns a fiber that prefers `this` fiber, but falls back to the `that` one\n   * when `this` one fails. Interrupting the returned fiber will interrupt both\n   * fibers, sequentially, from left to right.\n   *\n   * @since 2.0.0\n   * @category alternatives\n   */\n  <A2, E2>(that: Fiber<A2, E2>): <A, E>(self: Fiber<A, E>) => Fiber<A2 | A, E2 | E>\n  /**\n   * Returns a fiber that prefers `this` fiber, but falls back to the `that` one\n   * when `this` one fails. Interrupting the returned fiber will interrupt both\n   * fibers, sequentially, from left to right.\n   *\n   * @since 2.0.0\n   * @category alternatives\n   */\n  <A, E, A2, E2>(self: Fiber<A, E>, that: Fiber<A2, E2>): Fiber<A | A2, E | E2>\n} = internal.orElse\n\n/**\n * Returns a fiber that prefers `this` fiber, but falls back to the `that` one\n * when `this` one fails. Interrupting the returned fiber will interrupt both\n * fibers, sequentially, from left to right.\n *\n * @since 2.0.0\n * @category alternatives\n */\nexport const orElseEither: {\n  /**\n   * Returns a fiber that prefers `this` fiber, but falls back to the `that` one\n   * when `this` one fails. Interrupting the returned fiber will interrupt both\n   * fibers, sequentially, from left to right.\n   *\n   * @since 2.0.0\n   * @category alternatives\n   */\n  <A2, E2>(that: Fiber<A2, E2>): <A, E>(self: Fiber<A, E>) => Fiber<Either.Either<A2, A>, E2 | E>\n  /**\n   * Returns a fiber that prefers `this` fiber, but falls back to the `that` one\n   * when `this` one fails. Interrupting the returned fiber will interrupt both\n   * fibers, sequentially, from left to right.\n   *\n   * @since 2.0.0\n   * @category alternatives\n   */\n  <A, E, A2, E2>(self: Fiber<A, E>, that: Fiber<A2, E2>): Fiber<Either.Either<A2, A>, E | E2>\n} = internal.orElseEither\n\n/**\n * Tentatively observes the fiber, but returns immediately if it is not\n * already done.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const poll: <A, E>(self: Fiber<A, E>) => Effect.Effect<Option.Option<Exit.Exit<A, E>>> = internal.poll\n\n/**\n * Pretty-prints a `RuntimeFiber`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const pretty: <A, E>(self: RuntimeFiber<A, E>) => Effect.Effect<string> = internal.pretty\n\n/**\n * Returns a chunk containing all root fibers.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const roots: Effect.Effect<Array<RuntimeFiber<any, any>>> = internal.roots\n\n/**\n * Returns a chunk containing all root fibers.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const unsafeRoots: (_: void) => Array<RuntimeFiber<any, any>> = internal.unsafeRoots\n\n/**\n * Converts this fiber into a scoped effect. The fiber is interrupted when the\n * scope is closed.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const scoped: <A, E>(self: Fiber<A, E>) => Effect.Effect<Fiber<A, E>, never, Scope.Scope> =\n  fiberRuntime.fiberScoped\n\n/**\n * Returns the `FiberStatus` of a `RuntimeFiber`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const status: <A, E>(self: RuntimeFiber<A, E>) => Effect.Effect<FiberStatus.FiberStatus> = internal.status\n\n/**\n * Returns a fiber that has already succeeded with the specified value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeed: <A>(value: A) => Fiber<A> = internal.succeed\n\nconst void_: Fiber<void> = internal.void\nexport {\n  /**\n   * A fiber that has already succeeded with unit.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  void_ as void\n}\n\n/**\n * Zips this fiber and the specified fiber together, producing a tuple of\n * their output.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zip: {\n  /**\n   * Zips this fiber and the specified fiber together, producing a tuple of\n   * their output.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2>(that: Fiber<A2, E2>): <A, E>(self: Fiber<A, E>) => Fiber<[A, A2], E2 | E>\n  /**\n   * Zips this fiber and the specified fiber together, producing a tuple of\n   * their output.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, A2, E2>(self: Fiber<A, E>, that: Fiber<A2, E2>): Fiber<[A, A2], E | E2>\n} = circular.zipFiber\n\n/**\n * Same as `zip` but discards the output of that `Fiber`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipLeft: {\n  /**\n   * Same as `zip` but discards the output of that `Fiber`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2>(that: Fiber<A2, E2>): <A, E>(self: Fiber<A, E>) => Fiber<A, E2 | E>\n  /**\n   * Same as `zip` but discards the output of that `Fiber`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, A2, E2>(self: Fiber<A, E>, that: Fiber<A2, E2>): Fiber<A, E | E2>\n} = circular.zipLeftFiber\n\n/**\n * Same as `zip` but discards the output of this `Fiber`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipRight: {\n  /**\n   * Same as `zip` but discards the output of this `Fiber`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2>(that: Fiber<A2, E2>): <A, E>(self: Fiber<A, E>) => Fiber<A2, E2 | E>\n  /**\n   * Same as `zip` but discards the output of this `Fiber`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, A2, E2>(self: Fiber<A, E>, that: Fiber<A2, E2>): Fiber<A2, E | E2>\n} = circular.zipRightFiber\n\n/**\n * Zips this fiber with the specified fiber, combining their results using the\n * specified combiner function. Both joins and interruptions are performed in\n * sequential order from left to right.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWith: {\n  /**\n   * Zips this fiber with the specified fiber, combining their results using the\n   * specified combiner function. Both joins and interruptions are performed in\n   * sequential order from left to right.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <B, E2, A, C>(that: Fiber<B, E2>, f: (a: A, b: B) => C): <E>(self: Fiber<A, E>) => Fiber<C, E2 | E>\n  /**\n   * Zips this fiber with the specified fiber, combining their results using the\n   * specified combiner function. Both joins and interruptions are performed in\n   * sequential order from left to right.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, B, E2, C>(self: Fiber<A, E>, that: Fiber<B, E2>, f: (a: A, b: B) => C): Fiber<C, E | E2>\n} = circular.zipWithFiber\n"],"names":["core","circular","internal","fiberRuntime","FiberTypeId","RuntimeFiberTypeId","Order","isFiber","isRuntimeFiber","id","_await","await","awaitAll","fiberAwaitAll","children","all","fiberAll","done","dump","dumpAll","fail","failCause","fromEffect","getCurrentFiber","inheritAll","interrupt","interruptFiber","interrupted","interruptAs","interruptAsFiber","interruptAsFork","interruptAll","interruptAllAs","interruptFork","fiberInterruptFork","join","joinAll","fiberJoinAll","map","mapEffect","mapFiber","match","never","orElse","orElseEither","poll","pretty","roots","unsafeRoots","scoped","fiberScoped","status","succeed","void_","void","zip","zipFiber","zipLeft","zipLeftFiber","zipRight","zipRightFiber","zipWith","zipWithFiber"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 9382, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9388, "column": 0}, "map": {"version":3,"file":"Cause.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Cause.ts"],"sourcesContent":["/**\n * The `Effect<A, E, R>` type is polymorphic in values of type `E` and we can\n * work with any error type that we want. However, there is a lot of information\n * that is not inside an arbitrary `E` value. So as a result, an `Effect` needs\n * somewhere to store things like unexpected errors or defects, stack and\n * execution traces, causes of fiber interruptions, and so forth.\n *\n * Effect-TS is very strict about preserving the full information related to a\n * failure. It captures all type of errors into the `Cause` data type. `Effect`\n * uses the `Cause<E>` data type to store the full story of failure. So its\n * error model is lossless. It doesn't throw information related to the failure\n * result. So we can figure out exactly what happened during the operation of\n * our effects.\n *\n * It is important to note that `Cause` is an underlying data type representing\n * errors occuring within an `Effect` workflow. Thus, we don't usually deal with\n * `Cause`s directly. Even though it is not a data type that we deal with very\n * often, the `Cause` of a failing `Effect` workflow can be accessed at any\n * time, which gives us total access to all parallel and sequential errors in\n * occurring within our codebase.\n *\n * @since 2.0.0\n */\nimport type * as Channel from \"./Channel.js\"\nimport type * as Chunk from \"./Chunk.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Either from \"./Either.js\"\nimport type * as Equal from \"./Equal.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as internal from \"./internal/cause.js\"\nimport * as core from \"./internal/core.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport type * as Sink from \"./Sink.js\"\nimport type * as Stream from \"./Stream.js\"\nimport type { Span } from \"./Tracer.js\"\nimport type { Covariant, NoInfer } from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const CauseTypeId: unique symbol = internal.CauseTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type CauseTypeId = typeof CauseTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const RuntimeExceptionTypeId: unique symbol = core.RuntimeExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type RuntimeExceptionTypeId = typeof RuntimeExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const InterruptedExceptionTypeId: unique symbol = core.InterruptedExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type InterruptedExceptionTypeId = typeof InterruptedExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const IllegalArgumentExceptionTypeId: unique symbol = core.IllegalArgumentExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type IllegalArgumentExceptionTypeId = typeof IllegalArgumentExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const NoSuchElementExceptionTypeId: unique symbol = core.NoSuchElementExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type NoSuchElementExceptionTypeId = typeof NoSuchElementExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const InvalidPubSubCapacityExceptionTypeId: unique symbol = core.InvalidPubSubCapacityExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type InvalidPubSubCapacityExceptionTypeId = typeof InvalidPubSubCapacityExceptionTypeId\n\n/**\n * @since 3.5.0\n * @category symbols\n */\nexport const ExceededCapacityExceptionTypeId: unique symbol = core.ExceededCapacityExceptionTypeId\n\n/**\n * @since 3.5.0\n * @category symbols\n */\nexport type ExceededCapacityExceptionTypeId = typeof ExceededCapacityExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const TimeoutExceptionTypeId: unique symbol = core.TimeoutExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type TimeoutExceptionTypeId = typeof TimeoutExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const UnknownExceptionTypeId: unique symbol = core.UnknownExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type UnknownExceptionTypeId = typeof UnknownExceptionTypeId\n\n/**\n * A `Cause` represents the full history of a failure resulting from running an\n * `Effect` workflow.\n *\n * Effect-TS uses a data structure from functional programming called a semiring\n * to represent the `Cause` data type. This allows us to take a base type `E`\n * (which represents the error type of an `Effect`) and capture the sequential\n * and parallel composition of errors in a fully lossless fashion.\n *\n * @since 2.0.0\n * @category models\n */\nexport type Cause<E> =\n  | Empty\n  | Fail<E>\n  | Die\n  | Interrupt\n  | Sequential<E>\n  | Parallel<E>\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Cause {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<out E> {\n    readonly [CauseTypeId]: {\n      readonly _E: Covariant<E>\n    }\n  }\n}\n\n/**\n * Represents a set of methods that can be used to reduce a `Cause<E>` to a\n * specified value of type `Z` with access to a context of type `C`.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface CauseReducer<in C, in E, in out Z> {\n  emptyCase(context: C): Z\n  failCase(context: C, error: E): Z\n  dieCase(context: C, defect: unknown): Z\n  interruptCase(context: C, fiberId: FiberId.FiberId): Z\n  sequentialCase(context: C, left: Z, right: Z): Z\n  parallelCase(context: C, left: Z, right: Z): Z\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface YieldableError extends Pipeable, Inspectable, Readonly<Error> {\n  readonly [Effect.EffectTypeId]: Effect.Effect.VarianceStruct<never, this, never>\n  readonly [Stream.StreamTypeId]: Stream.Stream.VarianceStruct<never, this, never>\n  readonly [Sink.SinkTypeId]: Sink.Sink.VarianceStruct<never, unknown, never, this, never>\n  readonly [Channel.ChannelTypeId]: Channel.Channel.VarianceStruct<never, unknown, this, unknown, never, unknown, never>\n  [Symbol.iterator](): Effect.EffectGenerator<Effect.Effect<never, this, never>>\n}\n\n/**\n * Represents a generic checked exception which occurs at runtime.\n *\n * @since 2.0.0\n * @category errors\n */\nexport const YieldableError: new(message?: string | undefined) => YieldableError = core.YieldableError\n\n/**\n * Represents a generic checked exception which occurs at runtime.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface RuntimeException extends YieldableError {\n  readonly _tag: \"RuntimeException\"\n  readonly [RuntimeExceptionTypeId]: RuntimeExceptionTypeId\n}\n\n/**\n * Represents a checked exception which occurs when a `Fiber` is interrupted.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface InterruptedException extends YieldableError {\n  readonly _tag: \"InterruptedException\"\n  readonly [InterruptedExceptionTypeId]: InterruptedExceptionTypeId\n}\n\n/**\n * Represents a checked exception which occurs when an invalid argument is\n * provided to a method.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface IllegalArgumentException extends YieldableError {\n  readonly _tag: \"IllegalArgumentException\"\n  readonly [IllegalArgumentExceptionTypeId]: IllegalArgumentExceptionTypeId\n}\n\n/**\n * Represents a checked exception which occurs when an expected element was\n * unable to be found.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface NoSuchElementException extends YieldableError {\n  readonly _tag: \"NoSuchElementException\"\n  readonly [NoSuchElementExceptionTypeId]: NoSuchElementExceptionTypeId\n}\n\n/**\n * Represents a checked exception which occurs when attempting to construct a\n * `PubSub` with an invalid capacity.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface InvalidPubSubCapacityException extends YieldableError {\n  readonly _tag: \"InvalidPubSubCapacityException\"\n  readonly [InvalidPubSubCapacityExceptionTypeId]: InvalidPubSubCapacityExceptionTypeId\n}\n\n/**\n * Represents a checked exception which occurs when a resources capacity has\n * been exceeded.\n *\n * @since 3.5.0\n * @category models\n */\nexport interface ExceededCapacityException extends YieldableError {\n  readonly _tag: \"ExceededCapacityException\"\n  readonly [ExceededCapacityExceptionTypeId]: ExceededCapacityExceptionTypeId\n}\n\n/**\n * Represents a checked exception which occurs when a computation doesn't\n * finish on schedule.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface TimeoutException extends YieldableError {\n  readonly _tag: \"TimeoutException\"\n  readonly [TimeoutExceptionTypeId]: TimeoutExceptionTypeId\n}\n\n/**\n * Represents a checked exception which occurs when an unknown error is thrown, such as\n * from a rejected promise.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface UnknownException extends YieldableError {\n  readonly _tag: \"UnknownException\"\n  readonly [UnknownExceptionTypeId]: UnknownExceptionTypeId\n  readonly error: unknown\n}\n\n/**\n * The `Empty` cause represents a lack of errors.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Empty extends Cause.Variance<never>, Equal.Equal, Pipeable, Inspectable {\n  readonly _tag: \"Empty\"\n}\n\n/**\n * The `Fail` cause represents a `Cause` which failed with an expected error of\n * type `E`.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Fail<out E> extends Cause.Variance<E>, Equal.Equal, Pipeable, Inspectable {\n  readonly _tag: \"Fail\"\n  readonly error: E\n}\n\n/**\n * The `Die` cause represents a `Cause` which failed as a result of a defect, or\n * in other words, an unexpected error.\n *\n * type `E`.\n * @since 2.0.0\n * @category models\n */\nexport interface Die extends Cause.Variance<never>, Equal.Equal, Pipeable, Inspectable {\n  readonly _tag: \"Die\"\n  readonly defect: unknown\n}\n\n/**\n * The `Interrupt` cause represents failure due to `Fiber` interruption, which\n * contains the `FiberId` of the interrupted `Fiber`.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Interrupt extends Cause.Variance<never>, Equal.Equal, Pipeable, Inspectable {\n  readonly _tag: \"Interrupt\"\n  readonly fiberId: FiberId.FiberId\n}\n\n/**\n * The `Parallel` cause represents the composition of two causes which occurred\n * in parallel.\n *\n * In Effect-TS programs, it is possible that two operations may be performed in\n * parallel. In these cases, the `Effect` workflow can fail for more than one\n * reason. If both computations fail, then there are actually two errors which\n * occurred in parallel. In these cases, the errors can be represented by the\n * `Parallel` cause.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Parallel<out E> extends Cause.Variance<E>, Equal.Equal, Pipeable, Inspectable {\n  readonly _tag: \"Parallel\"\n  readonly left: Cause<E>\n  readonly right: Cause<E>\n}\n\n/**\n * The `Sequential` cause represents the composition of two causes which occurred\n * sequentially.\n *\n * For example, if we perform Effect-TS's analog of `try-finally` (i.e.\n * `Effect.ensuring`), and both the `try` and `finally` blocks fail, we have two\n * errors which occurred sequentially. In these cases, the errors can be\n * represented by the `Sequential` cause.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Sequential<out E> extends Cause.Variance<E>, Equal.Equal, Pipeable, Inspectable {\n  readonly _tag: \"Sequential\"\n  readonly left: Cause<E>\n  readonly right: Cause<E>\n}\n\n/**\n * Constructs a new `Empty` cause.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: Cause<never> = internal.empty\n\n/**\n * Constructs a new `Fail` cause from the specified `error`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fail: <E>(error: E) => Cause<E> = internal.fail\n\n/**\n * Constructs a new `Die` cause from the specified `defect`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const die: (defect: unknown) => Cause<never> = internal.die\n\n/**\n * Constructs a new `Interrupt` cause from the specified `fiberId`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const interrupt: (fiberId: FiberId.FiberId) => Cause<never> = internal.interrupt\n\n/**\n * Constructs a new `Parallel` cause from the specified `left` and `right`\n * causes.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const parallel: <E, E2>(left: Cause<E>, right: Cause<E2>) => Cause<E | E2> = internal.parallel\n\n/**\n * Constructs a new `Sequential` cause from the specified pecified `left` and\n * `right` causes.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const sequential: <E, E2>(left: Cause<E>, right: Cause<E2>) => Cause<E | E2> = internal.sequential\n\n/**\n * Returns `true` if the specified value is a `Cause`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isCause: (u: unknown) => u is Cause<never> = internal.isCause\n\n/**\n * Returns `true` if the specified `Cause` is an `Empty` type, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isEmptyType: <E>(self: Cause<E>) => self is Empty = internal.isEmptyType\n\n/**\n * Returns `true` if the specified `Cause` is a `Fail` type, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isFailType: <E>(self: Cause<E>) => self is Fail<E> = internal.isFailType\n\n/**\n * Returns `true` if the specified `Cause` is a `Die` type, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isDieType: <E>(self: Cause<E>) => self is Die = internal.isDieType\n\n/**\n * Returns `true` if the specified `Cause` is an `Interrupt` type, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isInterruptType: <E>(self: Cause<E>) => self is Interrupt = internal.isInterruptType\n\n/**\n * Returns `true` if the specified `Cause` is a `Sequential` type, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isSequentialType: <E>(self: Cause<E>) => self is Sequential<E> = internal.isSequentialType\n\n/**\n * Returns `true` if the specified `Cause` is a `Parallel` type, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isParallelType: <E>(self: Cause<E>) => self is Parallel<E> = internal.isParallelType\n\n/**\n * Returns the size of the cause, calculated as the number of individual `Cause`\n * nodes found in the `Cause` semiring structure.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const size: <E>(self: Cause<E>) => number = internal.size\n\n/**\n * Returns `true` if the specified cause is empty, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isEmpty: <E>(self: Cause<E>) => boolean = internal.isEmpty\n\n/**\n * Returns `true` if the specified cause contains a failure, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isFailure: <E>(self: Cause<E>) => boolean = internal.isFailure\n\n/**\n * Returns `true` if the specified cause contains a defect, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isDie: <E>(self: Cause<E>) => boolean = internal.isDie\n\n/**\n * Returns `true` if the specified cause contains an interruption, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isInterrupted: <E>(self: Cause<E>) => boolean = internal.isInterrupted\n\n/**\n * Returns `true` if the specified cause contains only interruptions (without\n * any `Die` or `Fail` causes), `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isInterruptedOnly: <E>(self: Cause<E>) => boolean = internal.isInterruptedOnly\n\n/**\n * Returns a `List` of all recoverable errors of type `E` in the specified\n * cause.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const failures: <E>(self: Cause<E>) => Chunk.Chunk<E> = internal.failures\n\n/**\n * Returns a `List` of all unrecoverable defects in the specified cause.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const defects: <E>(self: Cause<E>) => Chunk.Chunk<unknown> = internal.defects\n\n/**\n * Returns a `HashSet` of `FiberId`s for all fibers that interrupted the fiber\n * described by the specified cause.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const interruptors: <E>(self: Cause<E>) => HashSet.HashSet<FiberId.FiberId> = internal.interruptors\n\n/**\n * Returns the `E` associated with the first `Fail` in this `Cause`, if one\n * exists.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const failureOption: <E>(self: Cause<E>) => Option.Option<E> = internal.failureOption\n\n/**\n * Returns the first checked error on the `Left` if available, if there are\n * no checked errors return the rest of the `Cause` that is known to contain\n * only `Die` or `Interrupt` causes.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const failureOrCause: <E>(self: Cause<E>) => Either.Either<Cause<never>, E> = internal.failureOrCause\n\n/**\n * Converts the specified `Cause<Option<E>>` to an `Option<Cause<E>>` by\n * recursively stripping out any failures with the error `None`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const flipCauseOption: <E>(self: Cause<Option.Option<E>>) => Option.Option<Cause<E>> = internal.flipCauseOption\n\n/**\n * Returns the defect associated with the first `Die` in this `Cause`, if one\n * exists.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const dieOption: <E>(self: Cause<E>) => Option.Option<unknown> = internal.dieOption\n\n/**\n * Returns the `FiberId` associated with the first `Interrupt` in the specified\n * cause, if one exists.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const interruptOption: <E>(self: Cause<E>) => Option.Option<FiberId.FiberId> = internal.interruptOption\n\n/**\n * Remove all `Fail` and `Interrupt` nodes from the specified cause, and return\n * a cause containing only `Die` cause/finalizer defects.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const keepDefects: <E>(self: Cause<E>) => Option.Option<Cause<never>> = internal.keepDefects\n\n/**\n * Linearizes the specified cause into a `HashSet` of parallel causes where each\n * parallel cause contains a linear sequence of failures.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const linearize: <E>(self: Cause<E>) => HashSet.HashSet<Cause<E>> = internal.linearize\n\n/**\n * Remove all `Fail` and `Interrupt` nodes from the specified cause, and return\n * a cause containing only `Die` cause/finalizer defects.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const stripFailures: <E>(self: Cause<E>) => Cause<never> = internal.stripFailures\n\n/**\n * Remove all `Die` causes that the specified partial function is defined at,\n * returning `Some` with the remaining causes or `None` if there are no\n * remaining causes.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const stripSomeDefects: {\n  /**\n   * Remove all `Die` causes that the specified partial function is defined at,\n   * returning `Some` with the remaining causes or `None` if there are no\n   * remaining causes.\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  (pf: (defect: unknown) => Option.Option<unknown>): <E>(self: Cause<E>) => Option.Option<Cause<E>>\n  /**\n   * Remove all `Die` causes that the specified partial function is defined at,\n   * returning `Some` with the remaining causes or `None` if there are no\n   * remaining causes.\n   *\n   * @since 2.0.0\n   * @category getters\n   */\n  <E>(self: Cause<E>, pf: (defect: unknown) => Option.Option<unknown>): Option.Option<Cause<E>>\n} = internal.stripSomeDefects\n\n/**\n * @since 2.0.0\n * @category mapping\n */\nexport const as: {\n  /**\n   * @since 2.0.0\n   * @category mapping\n   */\n  <E2>(error: E2): <E>(self: Cause<E>) => Cause<E2>\n  /**\n   * @since 2.0.0\n   * @category mapping\n   */\n  <E, E2>(self: Cause<E>, error: E2): Cause<E2>\n} = internal.as\n\n/**\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  /**\n   * @since 2.0.0\n   * @category mapping\n   */\n  <E, E2>(f: (e: E) => E2): (self: Cause<E>) => Cause<E2>\n  /**\n   * @since 2.0.0\n   * @category mapping\n   */\n  <E, E2>(self: Cause<E>, f: (e: E) => E2): Cause<E2>\n} = internal.map\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  /**\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <E, E2>(f: (e: E) => Cause<E2>): (self: Cause<E>) => Cause<E2>\n  /**\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <E, E2>(self: Cause<E>, f: (e: E) => Cause<E2>): Cause<E2>\n} = internal.flatMap\n\n/**\n * Executes a sequence of two `Cause`s. The second `Cause` can be dependent on the result of the first `Cause`.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const andThen: {\n  /**\n   * Executes a sequence of two `Cause`s. The second `Cause` can be dependent on the result of the first `Cause`.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <E, E2>(f: (e: E) => Cause<E2>): (self: Cause<E>) => Cause<E2>\n  /**\n   * Executes a sequence of two `Cause`s. The second `Cause` can be dependent on the result of the first `Cause`.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <E2>(f: Cause<E2>): <E>(self: Cause<E>) => Cause<E2>\n  /**\n   * Executes a sequence of two `Cause`s. The second `Cause` can be dependent on the result of the first `Cause`.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <E, E2>(self: Cause<E>, f: (e: E) => Cause<E2>): Cause<E2>\n  /**\n   * Executes a sequence of two `Cause`s. The second `Cause` can be dependent on the result of the first `Cause`.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <E, E2>(self: Cause<E>, f: Cause<E2>): Cause<E2>\n} = internal.andThen\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatten: <E>(self: Cause<Cause<E>>) => Cause<E> = internal.flatten\n\n/**\n * Returns `true` if the `self` cause contains or is equal to `that` cause,\n * `false` otherwise.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const contains: {\n  /**\n   * Returns `true` if the `self` cause contains or is equal to `that` cause,\n   * `false` otherwise.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <E2>(that: Cause<E2>): <E>(self: Cause<E>) => boolean\n  /**\n   * Returns `true` if the `self` cause contains or is equal to `that` cause,\n   * `false` otherwise.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <E, E2>(self: Cause<E>, that: Cause<E2>): boolean\n} = internal.contains\n\n/**\n * Squashes a `Cause` down to a single defect, chosen to be the \"most important\"\n * defect.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const squash: <E>(self: Cause<E>) => unknown = core.causeSquash\n\n/**\n * Squashes a `Cause` down to a single defect, chosen to be the \"most important\"\n * defect. If a recoverable error is found, the provided function will be used\n * to map the error a defect, and the resulting value will be returned.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const squashWith: {\n  /**\n   * Squashes a `Cause` down to a single defect, chosen to be the \"most important\"\n   * defect. If a recoverable error is found, the provided function will be used\n   * to map the error a defect, and the resulting value will be returned.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <E>(f: (error: E) => unknown): (self: Cause<E>) => unknown\n  /**\n   * Squashes a `Cause` down to a single defect, chosen to be the \"most important\"\n   * defect. If a recoverable error is found, the provided function will be used\n   * to map the error a defect, and the resulting value will be returned.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <E>(self: Cause<E>, f: (error: E) => unknown): unknown\n} = core.causeSquashWith\n\n/**\n * Uses the provided partial function to search the specified cause and attempt\n * to extract information from it.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const find: {\n  /**\n   * Uses the provided partial function to search the specified cause and attempt\n   * to extract information from it.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <E, Z>(pf: (cause: Cause<E>) => Option.Option<Z>): (self: Cause<E>) => Option.Option<Z>\n  /**\n   * Uses the provided partial function to search the specified cause and attempt\n   * to extract information from it.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <E, Z>(self: Cause<E>, pf: (cause: Cause<E>) => Option.Option<Z>): Option.Option<Z>\n} = internal.find\n\n/**\n * Filters causes which match the provided predicate out of the specified cause.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filter: {\n  /**\n   * Filters causes which match the provided predicate out of the specified cause.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <E, EB extends E>(refinement: Refinement<Cause<NoInfer<E>>, Cause<EB>>): (self: Cause<E>) => Cause<EB>\n  /**\n   * Filters causes which match the provided predicate out of the specified cause.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <E>(predicate: Predicate<Cause<NoInfer<E>>>): (self: Cause<E>) => Cause<E>\n  /**\n   * Filters causes which match the provided predicate out of the specified cause.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <E, EB extends E>(self: Cause<E>, refinement: Refinement<Cause<E>, Cause<EB>>): Cause<EB>\n  /**\n   * Filters causes which match the provided predicate out of the specified cause.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <E>(self: Cause<E>, predicate: Predicate<Cause<E>>): Cause<E>\n} = internal.filter\n\n/**\n * Folds the specified cause into a value of type `Z`.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const match: {\n  /**\n   * Folds the specified cause into a value of type `Z`.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <Z, E>(\n    options: {\n      readonly onEmpty: Z\n      readonly onFail: (error: E) => Z\n      readonly onDie: (defect: unknown) => Z\n      readonly onInterrupt: (fiberId: FiberId.FiberId) => Z\n      readonly onSequential: (left: Z, right: Z) => Z\n      readonly onParallel: (left: Z, right: Z) => Z\n    }\n  ): (self: Cause<E>) => Z\n  /**\n   * Folds the specified cause into a value of type `Z`.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <Z, E>(\n    self: Cause<E>,\n    options: {\n      readonly onEmpty: Z\n      readonly onFail: (error: E) => Z\n      readonly onDie: (defect: unknown) => Z\n      readonly onInterrupt: (fiberId: FiberId.FiberId) => Z\n      readonly onSequential: (left: Z, right: Z) => Z\n      readonly onParallel: (left: Z, right: Z) => Z\n    }\n  ): Z\n} = internal.match\n\n/**\n * Reduces the specified cause into a value of type `Z`, beginning with the\n * provided `zero` value.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduce: {\n  /**\n   * Reduces the specified cause into a value of type `Z`, beginning with the\n   * provided `zero` value.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <Z, E>(zero: Z, pf: (accumulator: Z, cause: Cause<E>) => Option.Option<Z>): (self: Cause<E>) => Z\n  /**\n   * Reduces the specified cause into a value of type `Z`, beginning with the\n   * provided `zero` value.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <Z, E>(\n    self: Cause<E>,\n    zero: Z,\n    pf: (accumulator: Z, cause: Cause<E>) => Option.Option<Z>\n  ): Z\n} = internal.reduce\n\n/**\n * Reduces the specified cause into a value of type `Z` using a `Cause.Reducer`.\n * Also allows for accessing the provided context during reduction.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduceWithContext: {\n  /**\n   * Reduces the specified cause into a value of type `Z` using a `Cause.Reducer`.\n   * Also allows for accessing the provided context during reduction.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <C, E, Z>(context: C, reducer: CauseReducer<C, E, Z>): (self: Cause<E>) => Z\n  /**\n   * Reduces the specified cause into a value of type `Z` using a `Cause.Reducer`.\n   * Also allows for accessing the provided context during reduction.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <C, E, Z>(self: Cause<E>, context: C, reducer: CauseReducer<C, E, Z>): Z\n} = internal.reduceWithContext\n\n/**\n * Represents a checked exception which occurs when a `Fiber` is interrupted.\n *\n * @since 2.0.0\n * @category errors\n */\nexport const InterruptedException: new(message?: string | undefined) => InterruptedException = core.InterruptedException\n\n/**\n * Returns `true` if the specified value is an `InterruptedException`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isInterruptedException: (u: unknown) => u is InterruptedException = core.isInterruptedException\n\n/**\n * Represents a checked exception which occurs when an invalid argument is\n * provided to a method.\n *\n * @since 2.0.0\n * @category errors\n */\nexport const IllegalArgumentException: new(message?: string | undefined) => IllegalArgumentException =\n  core.IllegalArgumentException\n\n/**\n * Returns `true` if the specified value is an `IllegalArgumentException`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isIllegalArgumentException: (u: unknown) => u is IllegalArgumentException = core.isIllegalArgumentException\n\n/**\n * Represents a checked exception which occurs when an expected element was\n * unable to be found.\n *\n * @since 2.0.0\n * @category errors\n */\nexport const NoSuchElementException: new(message?: string | undefined) => NoSuchElementException =\n  core.NoSuchElementException\n\n/**\n * Returns `true` if the specified value is an `NoSuchElementException`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isNoSuchElementException: (u: unknown) => u is NoSuchElementException = core.isNoSuchElementException\n\n/**\n * Represents a generic checked exception which occurs at runtime.\n *\n * @since 2.0.0\n * @category errors\n */\nexport const RuntimeException: new(message?: string | undefined) => RuntimeException = core.RuntimeException\n\n/**\n * Returns `true` if the specified value is an `RuntimeException`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isRuntimeException: (u: unknown) => u is RuntimeException = core.isRuntimeException\n\n/**\n * Represents a checked exception which occurs when a computation doesn't\n * finish on schedule.\n *\n * @since 2.0.0\n * @category errors\n */\nexport const TimeoutException: new(message?: string | undefined) => TimeoutException = core.TimeoutException\n\n/**\n * Represents a checked exception which occurs when an unknown error is thrown, such as\n * from a rejected promise.\n *\n * @since 2.0.0\n * @category errors\n */\nexport const UnknownException: new(error: unknown, message?: string | undefined) => UnknownException =\n  core.UnknownException\n\n/**\n * Returns `true` if the specified value is an `UnknownException`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isUnknownException: (u: unknown) => u is UnknownException = core.isUnknownException\n\n/**\n * Represents a checked exception which occurs when a resources capacity has\n * been exceeded.\n *\n * @since 3.5.0\n * @category errors\n */\nexport const ExceededCapacityException: new(message?: string | undefined) => ExceededCapacityException =\n  core.ExceededCapacityException\n\n/**\n * Returns `true` if the specified value is an `ExceededCapacityException`, `false`\n * otherwise.\n *\n * @since 3.5.0\n * @category refinements\n */\nexport const isExceededCapacityException: (u: unknown) => u is ExceededCapacityException =\n  core.isExceededCapacityException\n\n/**\n * Returns the specified `Cause` as a pretty-printed string.\n *\n * @since 2.0.0\n * @category rendering\n */\nexport const pretty: <E>(cause: Cause<E>, options?: {\n  readonly renderErrorCause?: boolean | undefined\n}) => string = internal.pretty\n\n/**\n * @since 3.2.0\n * @category models\n */\nexport interface PrettyError extends Error {\n  readonly span: Span | undefined\n}\n\n/**\n * Returns the specified `Cause` as a pretty-printed string.\n *\n * @since 3.2.0\n * @category rendering\n */\nexport const prettyErrors: <E>(cause: Cause<E>) => Array<PrettyError> = internal.prettyErrors\n\n/**\n * Returns the original, unproxied, instance of a thrown error\n *\n * @since 2.0.0\n * @category errors\n */\nexport const originalError: <E>(obj: E) => E = core.originalInstance\n"],"names":["internal","core","CauseTypeId","RuntimeExceptionTypeId","InterruptedExceptionTypeId","IllegalArgumentExceptionTypeId","NoSuchElementExceptionTypeId","InvalidPubSubCapacityExceptionTypeId","ExceededCapacityExceptionTypeId","TimeoutExceptionTypeId","UnknownExceptionTypeId","YieldableError","empty","fail","die","interrupt","parallel","sequential","isCause","isEmptyType","isFailType","isDieType","isInterruptType","isSequentialType","isParallelType","size","isEmpty","isFailure","isDie","isInterrupted","isInterruptedOnly","failures","defects","interruptors","failureOption","failureOrCause","flipCauseOption","dieOption","interruptOption","keepDefects","linearize","stripFailures","stripSomeDefects","as","map","flatMap","andThen","flatten","contains","squash","causeSquash","squashWith","causeSquashWith","find","filter","match","reduce","reduceWithContext","InterruptedException","isInterruptedException","IllegalArgumentException","isIllegalArgumentException","NoSuchElementException","isNoSuchElementException","RuntimeException","isRuntimeException","TimeoutException","UnknownException","isUnknownException","ExceededCapacityException","isExceededCapacityException","pretty","prettyErrors","originalError","originalInstance"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 9534, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9540, "column": 0}, "map": {"version":3,"file":"MutableList.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/MutableList.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport * as Dual from \"./Function.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/MutableList\") as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface MutableList<out A> extends Iterable<A>, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n\n  /** @internal */\n  head: LinkedListNode<A> | undefined\n  /** @internal */\n  tail: LinkedListNode<A> | undefined\n}\n\nconst MutableListProto: Omit<MutableList<unknown>, \"head\" | \"tail\"> = {\n  [TypeId]: TypeId,\n  [Symbol.iterator](this: MutableList<unknown>): Iterator<unknown> {\n    let done = false\n    let head: LinkedListNode<unknown> | undefined = this.head\n    return {\n      next() {\n        if (done) {\n          return this.return!()\n        }\n        if (head == null) {\n          done = true\n          return this.return!()\n        }\n        const value = head.value\n        head = head.next\n        return { done, value }\n      },\n      return(value?: unknown) {\n        if (!done) {\n          done = true\n        }\n        return { done: true, value }\n      }\n    }\n  },\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"MutableList\",\n      values: Array.from(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\ninterface MutableListImpl<A> extends MutableList<A> {\n  _length: number\n}\n\n/** @internal */\ninterface LinkedListNode<T> {\n  removed: boolean\n  value: T\n  prev: LinkedListNode<T> | undefined\n  next: LinkedListNode<T> | undefined\n}\n\n/** @internal */\nconst makeNode = <T>(value: T): LinkedListNode<T> => ({\n  value,\n  removed: false,\n  prev: undefined,\n  next: undefined\n})\n\n/**\n * Creates an empty `MutableList`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty = <A>(): MutableList<A> => {\n  const list = Object.create(MutableListProto)\n  list.head = undefined\n  list.tail = undefined\n  list._length = 0\n  return list\n}\n\n/**\n * Creates a new `MutableList` from an iterable collection of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable = <A>(iterable: Iterable<A>): MutableList<A> => {\n  const list = empty<A>()\n  for (const element of iterable) {\n    append(list, element)\n  }\n  return list\n}\n\n/**\n * Creates a new `MutableList` from the specified elements.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make = <A>(...elements: ReadonlyArray<A>): MutableList<A> => fromIterable(elements)\n\n/**\n * Returns `true` if the list contains zero elements, `false`, otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isEmpty = <A>(self: MutableList<A>): boolean => length(self) === 0\n\n/**\n * Returns the length of the list.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const length = <A>(self: MutableList<A>): number => (self as MutableListImpl<A>)._length\n\n/**\n * Returns the last element of the list, if it exists.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const tail = <A>(self: MutableList<A>): A | undefined => self.tail === undefined ? undefined : self.tail.value\n\n/**\n * Returns the first element of the list, if it exists.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const head = <A>(self: MutableList<A>): A | undefined => self.head === undefined ? undefined : self.head.value\n\n/**\n * Executes the specified function `f` for each element in the list.\n *\n * @since 2.0.0\n * @category traversing\n */\nexport const forEach: {\n  /**\n   * Executes the specified function `f` for each element in the list.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <A>(f: (element: A) => void): (self: MutableList<A>) => void\n  /**\n   * Executes the specified function `f` for each element in the list.\n   *\n   * @since 2.0.0\n   * @category traversing\n   */\n  <A>(self: MutableList<A>, f: (element: A) => void): void\n} = Dual.dual<\n  <A>(f: (element: A) => void) => (self: MutableList<A>) => void,\n  <A>(self: MutableList<A>, f: (element: A) => void) => void\n>(2, (self, f) => {\n  let current = self.head\n  while (current !== undefined) {\n    f(current.value)\n    current = current.next\n  }\n})\n\n/**\n * Removes all elements from the doubly-linked list.\n *\n * @since 2.0.0\n */\nexport const reset = <A>(self: MutableList<A>): MutableList<A> => {\n  ;(self as MutableListImpl<A>)._length = 0\n  self.head = undefined\n  self.tail = undefined\n  return self\n}\n\n/**\n * Appends the specified element to the end of the `MutableList`.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const append: {\n  /**\n   * Appends the specified element to the end of the `MutableList`.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A>(value: A): (self: MutableList<A>) => MutableList<A>\n  /**\n   * Appends the specified element to the end of the `MutableList`.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A>(self: MutableList<A>, value: A): MutableList<A>\n} = Dual.dual<\n  <A>(value: A) => (self: MutableList<A>) => MutableList<A>,\n  <A>(self: MutableList<A>, value: A) => MutableList<A>\n>(2, <A>(self: MutableList<A>, value: A) => {\n  const node = makeNode(value)\n  if (self.head === undefined) {\n    self.head = node\n  }\n  if (self.tail === undefined) {\n    self.tail = node\n  } else {\n    self.tail.next = node\n    node.prev = self.tail\n    self.tail = node\n  }\n  ;(self as MutableListImpl<A>)._length += 1\n  return self\n})\n\n/**\n * Removes the first value from the list and returns it, if it exists.\n *\n * @since 0.0.1\n */\nexport const shift = <A>(self: MutableList<A>): A | undefined => {\n  const head = self.head\n  if (head !== undefined) {\n    remove(self, head)\n    return head.value\n  }\n  return undefined\n}\n\n/**\n * Removes the last value from the list and returns it, if it exists.\n *\n * @since 0.0.1\n */\nexport const pop = <A>(self: MutableList<A>): A | undefined => {\n  const tail = self.tail\n  if (tail !== undefined) {\n    remove(self, tail)\n    return tail.value\n  }\n  return undefined\n}\n\n/**\n * Prepends the specified value to the beginning of the list.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prepend: {\n  /**\n   * Prepends the specified value to the beginning of the list.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A>(value: A): (self: MutableList<A>) => MutableList<A>\n  /**\n   * Prepends the specified value to the beginning of the list.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A>(self: MutableList<A>, value: A): MutableList<A>\n} = Dual.dual<\n  <A>(value: A) => (self: MutableList<A>) => MutableList<A>,\n  <A>(self: MutableList<A>, value: A) => MutableList<A>\n>(2, <A>(self: MutableList<A>, value: A) => {\n  const node = makeNode(value)\n  node.next = self.head\n  if (self.head !== undefined) {\n    self.head.prev = node\n  }\n  self.head = node\n  if (self.tail === undefined) {\n    self.tail = node\n  }\n  ;(self as MutableListImpl<A>)._length += 1\n  return self\n})\n\nconst remove = <A>(self: MutableList<A>, node: LinkedListNode<A>): void => {\n  if (node.removed) {\n    return\n  }\n  node.removed = true\n  if (node.prev !== undefined && node.next !== undefined) {\n    node.prev.next = node.next\n    node.next.prev = node.prev\n  } else if (node.prev !== undefined) {\n    self.tail = node.prev\n    node.prev.next = undefined\n  } else if (node.next !== undefined) {\n    self.head = node.next\n    node.next.prev = undefined\n  } else {\n    self.tail = undefined\n    self.head = undefined\n  }\n  if ((self as MutableListImpl<A>)._length > 0) {\n    ;(self as MutableListImpl<A>)._length -= 1\n  }\n}\n"],"names":["Dual","format","NodeInspectSymbol","toJSON","pipeArguments","TypeId","Symbol","for","MutableListProto","iterator","done","head","next","return","value","toString","_id","values","Array","from","map","pipe","arguments","makeNode","removed","prev","undefined","empty","list","Object","create","tail","_length","fromIterable","iterable","element","append","make","elements","isEmpty","self","length","forEach","dual","f","current","reset","node","shift","remove","pop","prepend"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 9720, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9726, "column": 0}, "map": {"version":3,"file":"MutableQueue.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/MutableQueue.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport * as Chunk from \"./Chunk.js\"\nimport * as Dual from \"./Function.js\"\nimport { format, type Inspectable, NodeInspectSymbol, toJSON } from \"./Inspectable.js\"\nimport * as MutableList from \"./MutableList.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport { pipeArguments } from \"./Pipeable.js\"\n\nconst TypeId: unique symbol = Symbol.for(\"effect/MutableQueue\") as TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport const EmptyMutableQueue = Symbol.for(\"effect/mutable/MutableQueue/Empty\")\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface MutableQueue<out A> extends Iterable<A>, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n\n  /** @internal */\n  queue: MutableList.MutableList<A>\n  /** @internal */\n  capacity: number | undefined\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace MutableQueue {\n  /**\n   * @since 2.0.0\n   */\n  export type Empty = typeof EmptyMutableQueue\n}\n\nconst MutableQueueProto: Omit<MutableQueue<unknown>, \"queue\" | \"capacity\"> = {\n  [TypeId]: TypeId,\n  [Symbol.iterator]<A>(this: MutableQueue<A>): Iterator<A> {\n    return Array.from(this.queue)[Symbol.iterator]()\n  },\n  toString() {\n    return format(this.toJSON())\n  },\n  toJSON() {\n    return {\n      _id: \"MutableQueue\",\n      values: Array.from(this).map(toJSON)\n    }\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst make = <A>(capacity: number | undefined): MutableQueue<A> => {\n  const queue = Object.create(MutableQueueProto)\n  queue.queue = MutableList.empty()\n  queue.capacity = capacity\n  return queue\n}\n\n/**\n * Creates a new bounded `MutableQueue`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const bounded = <A>(capacity: number): MutableQueue<A> => make(capacity)\n\n/**\n * Creates a new unbounded `MutableQueue`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const unbounded = <A>(): MutableQueue<A> => make(undefined)\n\n/**\n * Returns the current number of elements in the queue.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const length = <A>(self: MutableQueue<A>): number => MutableList.length(self.queue)\n\n/**\n * Returns `true` if the queue is empty, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isEmpty = <A>(self: MutableQueue<A>): boolean => MutableList.isEmpty(self.queue)\n\n/**\n * Returns `true` if the queue is full, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isFull = <A>(self: MutableQueue<A>): boolean =>\n  self.capacity === undefined ? false : MutableList.length(self.queue) === self.capacity\n\n/**\n * The **maximum** number of elements that a queue can hold.\n *\n * **Note**: unbounded queues can still implement this interface with\n * `capacity = Infinity`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const capacity = <A>(self: MutableQueue<A>): number => self.capacity === undefined ? Infinity : self.capacity\n\n/**\n * Offers an element to the queue.\n *\n * Returns whether the enqueue was successful or not.\n *\n * @since 2.0.0\n */\nexport const offer: {\n  /**\n   * Offers an element to the queue.\n   *\n   * Returns whether the enqueue was successful or not.\n   *\n   * @since 2.0.0\n   */\n  <A>(self: MutableQueue<A>, value: A): boolean\n  /**\n   * Offers an element to the queue.\n   *\n   * Returns whether the enqueue was successful or not.\n   *\n   * @since 2.0.0\n   */\n  <A>(value: A): (self: MutableQueue<A>) => boolean\n} = Dual.dual<\n  <A>(value: A) => (self: MutableQueue<A>) => boolean,\n  <A>(self: MutableQueue<A>, value: A) => boolean\n>(2, <A>(self: MutableQueue<A>, value: A) => {\n  const queueLength = MutableList.length(self.queue)\n  if (self.capacity !== undefined && queueLength === self.capacity) {\n    return false\n  }\n  MutableList.append(value)(self.queue)\n  return true\n})\n\n/**\n * Enqueues a collection of values into the queue.\n *\n * Returns a `Chunk` of the values that were **not** able to be enqueued.\n *\n * @since 2.0.0\n */\nexport const offerAll: {\n  /**\n   * Enqueues a collection of values into the queue.\n   *\n   * Returns a `Chunk` of the values that were **not** able to be enqueued.\n   *\n   * @since 2.0.0\n   */\n  <A>(values: Iterable<A>): (self: MutableQueue<A>) => Chunk.Chunk<A>\n  /**\n   * Enqueues a collection of values into the queue.\n   *\n   * Returns a `Chunk` of the values that were **not** able to be enqueued.\n   *\n   * @since 2.0.0\n   */\n  <A>(self: MutableQueue<A>, values: Iterable<A>): Chunk.Chunk<A>\n} = Dual.dual<\n  <A>(values: Iterable<A>) => (self: MutableQueue<A>) => Chunk.Chunk<A>,\n  <A>(self: MutableQueue<A>, values: Iterable<A>) => Chunk.Chunk<A>\n>(2, <A>(self: MutableQueue<A>, values: Iterable<A>) => {\n  const iterator = values[Symbol.iterator]()\n  let next: IteratorResult<A> | undefined\n  let remainder = Chunk.empty<A>()\n  let offering = true\n  while (offering && (next = iterator.next()) && !next.done) {\n    offering = offer(next.value)(self)\n  }\n  while (next != null && !next.done) {\n    remainder = Chunk.prepend<A>(next.value)(remainder)\n    next = iterator.next()\n  }\n  return Chunk.reverse(remainder)\n})\n\n/**\n * Dequeues an element from the queue.\n *\n * Returns either an element from the queue, or the `def` param.\n *\n * **Note**: if there is no meaningful default for your type, you can always\n * use `poll(MutableQueue.EmptyMutableQueue)`.\n *\n * @since 2.0.0\n */\nexport const poll: {\n  /**\n   * Dequeues an element from the queue.\n   *\n   * Returns either an element from the queue, or the `def` param.\n   *\n   * **Note**: if there is no meaningful default for your type, you can always\n   * use `poll(MutableQueue.EmptyMutableQueue)`.\n   *\n   * @since 2.0.0\n   */\n  <D>(def: D): <A>(self: MutableQueue<A>) => D | A\n  /**\n   * Dequeues an element from the queue.\n   *\n   * Returns either an element from the queue, or the `def` param.\n   *\n   * **Note**: if there is no meaningful default for your type, you can always\n   * use `poll(MutableQueue.EmptyMutableQueue)`.\n   *\n   * @since 2.0.0\n   */\n  <A, D>(self: MutableQueue<A>, def: D): A | D\n} = Dual.dual<\n  <D>(def: D) => <A>(self: MutableQueue<A>) => A | D,\n  <A, D>(self: MutableQueue<A>, def: D) => A | D\n>(2, (self, def) => {\n  if (MutableList.isEmpty(self.queue)) {\n    return def\n  }\n  return MutableList.shift(self.queue)!\n})\n\n/**\n * Dequeues up to `n` elements from the queue.\n *\n * Returns a `List` of up to `n` elements.\n *\n * @since 2.0.0\n */\nexport const pollUpTo: {\n  /**\n   * Dequeues up to `n` elements from the queue.\n   *\n   * Returns a `List` of up to `n` elements.\n   *\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: MutableQueue<A>) => Chunk.Chunk<A>\n  /**\n   * Dequeues up to `n` elements from the queue.\n   *\n   * Returns a `List` of up to `n` elements.\n   *\n   * @since 2.0.0\n   */\n  <A>(self: MutableQueue<A>, n: number): Chunk.Chunk<A>\n} = Dual.dual<\n  (n: number) => <A>(self: MutableQueue<A>) => Chunk.Chunk<A>,\n  <A>(self: MutableQueue<A>, n: number) => Chunk.Chunk<A>\n>(2, <A>(self: MutableQueue<A>, n: number) => {\n  let result = Chunk.empty<A>()\n  let count = 0\n  while (count < n) {\n    const element = poll(EmptyMutableQueue)(self)\n    if (element === EmptyMutableQueue) {\n      break\n    }\n    result = Chunk.prepend(element)(result)\n    count += 1\n  }\n  return Chunk.reverse(result)\n})\n"],"names":["Chunk","Dual","format","NodeInspectSymbol","toJSON","MutableList","pipeArguments","TypeId","Symbol","for","EmptyMutableQueue","MutableQueueProto","iterator","Array","from","queue","toString","_id","values","map","pipe","arguments","make","capacity","Object","create","empty","bounded","unbounded","undefined","length","self","isEmpty","isFull","Infinity","offer","dual","value","queueLength","append","offerAll","next","remainder","offering","done","prepend","reverse","poll","def","shift","pollUpTo","n","result","count","element"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 9827, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9833, "column": 0}, "map": {"version":3,"file":"Request.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Request.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as _Cache from \"./Cache.js\"\nimport type { Cause } from \"./Cause.js\"\nimport type { Deferred } from \"./Deferred.js\"\nimport type { DurationInput } from \"./Duration.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Exit from \"./Exit.js\"\nimport type { FiberId } from \"./FiberId.js\"\nimport * as _RequestBlock from \"./internal/blockedRequests.js\"\nimport * as cache from \"./internal/cache.js\"\nimport * as core from \"./internal/core.js\"\nimport * as fiberRuntime from \"./internal/fiberRuntime.js\"\nimport * as internal from \"./internal/request.js\"\nimport type * as Option from \"./Option.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const RequestTypeId: unique symbol = internal.RequestTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type RequestTypeId = typeof RequestTypeId\n\n/**\n * A `Request<A, E>` is a request from a data source for a value of type `A`\n * that may fail with an `E`.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Request<out A, out E = never> extends Request.Variance<A, E> {}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Request {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<out A, out E> {\n    readonly [RequestTypeId]: {\n      readonly _A: Types.Covariant<A>\n      readonly _E: Types.Covariant<E>\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Constructor<R extends Request<any, any>, T extends keyof R = never> {\n    (args: Omit<R, T | keyof (Request.Variance<Request.Success<R>, Request.Error<R>>)>): R\n  }\n\n  /**\n   * A utility type to extract the error type from a `Request`.\n   *\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Error<T extends Request<any, any>> = [T] extends [Request<infer _A, infer _E>] ? _E : never\n\n  /**\n   * A utility type to extract the value type from a `Request`.\n   *\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Success<T extends Request<any, any>> = [T] extends [Request<infer _A, infer _E>] ? _A : never\n\n  /**\n   * A utility type to extract the result type from a `Request`.\n   *\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Result<T extends Request<any, any>> = T extends Request<infer A, infer E> ? Exit.Exit<A, E> : never\n\n  /**\n   * A utility type to extract the optional result type from a `Request`.\n   *\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type OptionalResult<T extends Request<any, any>> = T extends Request<infer A, infer E>\n    ? Exit.Exit<Option.Option<A>, E>\n    : never\n}\n\n/**\n * Returns `true` if the specified value is a `Request`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isRequest: (u: unknown) => u is Request<unknown, unknown> = internal.isRequest\n\n/**\n * Constructs a new `Request`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const of: <R extends Request<any, any>>() => Request.Constructor<R> = internal.of\n\n/**\n * Constructs a new `Request`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const tagged: <R extends Request<any, any> & { _tag: string }>(\n  tag: R[\"_tag\"]\n) => Request.Constructor<R, \"_tag\"> = internal.tagged\n\n/**\n * Provides a constructor for a Request Class.\n *\n * @example\n * import { Request } from \"effect\"\n *\n * type Success = string\n * type Error = never\n *\n * class MyRequest extends Request.Class<Success, Error, {\n *   readonly id: string\n * }> {}\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const Class: new<Success, Error, A extends Record<string, any>>(\n  args: Types.Equals<Omit<A, keyof Request<unknown, unknown>>, {}> extends true ? void\n    : { readonly [P in keyof A as P extends keyof Request<unknown, unknown> ? never : P]: A[P] }\n) => Request<Success, Error> & Readonly<A> = internal.Class as any\n\n/**\n * Provides a Tagged constructor for a Request Class.\n *\n * @example\n * import { Request } from \"effect\"\n *\n * type Success = string\n * type Error = never\n *\n * class MyRequest extends Request.TaggedClass(\"MyRequest\")<Success, Error, {\n *   readonly name: string\n * }> {}\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const TaggedClass: <Tag extends string>(\n  tag: Tag\n) => new<Success, Error, A extends Record<string, any>>(\n  args: Types.Equals<Omit<A, keyof Request<unknown, unknown>>, {}> extends true ? void\n    : { readonly [P in keyof A as P extends \"_tag\" | keyof Request<unknown, unknown> ? never : P]: A[P] }\n) => Request<Success, Error> & Readonly<A> & { readonly _tag: Tag } = internal.TaggedClass as any\n\n/**\n * Complete a `Request` with the specified result.\n *\n * @since 2.0.0\n * @category request completion\n */\nexport const complete: {\n  /**\n   * Complete a `Request` with the specified result.\n   *\n   * @since 2.0.0\n   * @category request completion\n   */\n  <A extends Request<any, any>>(result: Request.Result<A>): (self: A) => Effect.Effect<void>\n  /**\n   * Complete a `Request` with the specified result.\n   *\n   * @since 2.0.0\n   * @category request completion\n   */\n  <A extends Request<any, any>>(self: A, result: Request.Result<A>): Effect.Effect<void>\n} = internal.complete\n\n/**\n * Interrupts the child effect when requests are no longer needed\n *\n * @since 2.0.0\n * @category request completion\n */\nexport const interruptWhenPossible: {\n  /**\n   * Interrupts the child effect when requests are no longer needed\n   *\n   * @since 2.0.0\n   * @category request completion\n   */\n  (all: Iterable<Request<any, any>>): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<void, E, R>\n  /**\n   * Interrupts the child effect when requests are no longer needed\n   *\n   * @since 2.0.0\n   * @category request completion\n   */\n  <A, E, R>(self: Effect.Effect<A, E, R>, all: Iterable<Request<any, any>>): Effect.Effect<void, E, R>\n} = fiberRuntime.interruptWhenPossible\n\n/**\n * Complete a `Request` with the specified effectful computation, failing the\n * request with the error from the effect workflow if it fails, and completing\n * the request with the value of the effect workflow if it succeeds.\n *\n * @since 2.0.0\n * @category request completion\n */\nexport const completeEffect: {\n  /**\n   * Complete a `Request` with the specified effectful computation, failing the\n   * request with the error from the effect workflow if it fails, and completing\n   * the request with the value of the effect workflow if it succeeds.\n   *\n   * @since 2.0.0\n   * @category request completion\n   */\n  <A extends Request<any, any>, R>(\n    effect: Effect.Effect<Request.Success<A>, Request.Error<A>, R>\n  ): (self: A) => Effect.Effect<void, never, R>\n  /**\n   * Complete a `Request` with the specified effectful computation, failing the\n   * request with the error from the effect workflow if it fails, and completing\n   * the request with the value of the effect workflow if it succeeds.\n   *\n   * @since 2.0.0\n   * @category request completion\n   */\n  <A extends Request<any, any>, R>(\n    self: A,\n    effect: Effect.Effect<Request.Success<A>, Request.Error<A>, R>\n  ): Effect.Effect<void, never, R>\n} = internal.completeEffect\n\n/**\n * Complete a `Request` with the specified error.\n *\n * @since 2.0.0\n * @category request completion\n */\nexport const fail: {\n  /**\n   * Complete a `Request` with the specified error.\n   *\n   * @since 2.0.0\n   * @category request completion\n   */\n  <A extends Request<any, any>>(error: Request.Error<A>): (self: A) => Effect.Effect<void>\n  /**\n   * Complete a `Request` with the specified error.\n   *\n   * @since 2.0.0\n   * @category request completion\n   */\n  <A extends Request<any, any>>(self: A, error: Request.Error<A>): Effect.Effect<void>\n} = internal.fail\n\n/**\n * Complete a `Request` with the specified cause.\n *\n * @since 2.0.0\n * @category request completion\n */\nexport const failCause: {\n  /**\n   * Complete a `Request` with the specified cause.\n   *\n   * @since 2.0.0\n   * @category request completion\n   */\n  <A extends Request<any, any>>(cause: Cause<Request.Error<A>>): (self: A) => Effect.Effect<void>\n  /**\n   * Complete a `Request` with the specified cause.\n   *\n   * @since 2.0.0\n   * @category request completion\n   */\n  <A extends Request<any, any>>(self: A, cause: Cause<Request.Error<A>>): Effect.Effect<void>\n} = internal.failCause\n\n/**\n * Complete a `Request` with the specified value.\n *\n * @since 2.0.0\n * @category request completion\n */\nexport const succeed: {\n  /**\n   * Complete a `Request` with the specified value.\n   *\n   * @since 2.0.0\n   * @category request completion\n   */\n  <A extends Request<any, any>>(value: Request.Success<A>): (self: A) => Effect.Effect<void>\n  /**\n   * Complete a `Request` with the specified value.\n   *\n   * @since 2.0.0\n   * @category request completion\n   */\n  <A extends Request<any, any>>(self: A, value: Request.Success<A>): Effect.Effect<void>\n} = internal.succeed\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Listeners {\n  readonly count: number\n  readonly observers: Set<(count: number) => void>\n  interrupted: boolean\n  addObserver(f: (count: number) => void): void\n  removeObserver(f: (count: number) => void): void\n  increment(): void\n  decrement(): void\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Cache extends\n  _Cache.ConsumerCache<Request<any, any>, {\n    listeners: Listeners\n    handle: Deferred<unknown, unknown>\n  }>\n{}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport const makeCache = (\n  options: {\n    readonly capacity: number\n    readonly timeToLive: DurationInput\n  }\n): Effect.Effect<Cache> =>\n  cache.make({\n    ...options,\n    lookup: () =>\n      core.map(core.deferredMake<unknown, unknown>(), (handle) => ({ listeners: new internal.Listeners(), handle }))\n  })\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const EntryTypeId: unique symbol = Symbol.for(\"effect/RequestBlock.Entry\")\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type EntryTypeId = typeof EntryTypeId\n\n/**\n * A `Entry<A>` keeps track of a request of type `A` along with a\n * `Ref` containing the result of the request, existentially hiding the result\n * type. This is used internally by the library to support data sources that\n * return different result types for different requests while guaranteeing that\n * results will be of the type requested.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Entry<out R> extends Entry.Variance<R> {\n  readonly request: R\n  readonly result: Deferred<\n    [R] extends [Request<infer _A, infer _E>] ? _A : never,\n    [R] extends [Request<infer _A, infer _E>] ? _E : never\n  >\n  readonly listeners: Listeners\n  readonly ownerId: FiberId\n  readonly state: {\n    completed: boolean\n  }\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport declare namespace Entry {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<out R> {\n    readonly [EntryTypeId]: {\n      readonly _R: Types.Covariant<R>\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isEntry = _RequestBlock.isEntry\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const makeEntry = _RequestBlock.makeEntry\n"],"names":["_RequestBlock","cache","core","fiberRuntime","internal","RequestTypeId","isRequest","of","tagged","Class","TaggedClass","complete","interruptWhenPossible","completeEffect","fail","failCause","succeed","makeCache","options","make","lookup","map","deferredMake","handle","listeners","Listeners","EntryTypeId","Symbol","for","isEntry","makeEntry"],"mappings":";;;;;;;;;;;;;;;;;;AAcA,OAAO,KAAKI,QAAQ,MAAM,uBAAuB;AADjD,OAAO,KAAKD,YAAY,MAAM,4BAA4B;AAF1D,OAAO,KAAKF,KAAK,MAAM,qBAAqB;AAC5C,OAAO,KAAKC,IAAI,MAAM,oBAAoB;AAF1C,OAAO,KAAKF,aAAa,MAAM,+BAA+B;;;;;;AAYvD,MAAMK,aAAa,GAAkBD,QAAQ,2MAACC,aAAa;AAiF3D,MAAMC,SAAS,GAAmDF,QAAQ,2MAACE,SAAS;AAQpF,MAAMC,EAAE,GAA8DH,QAAQ,2MAACG,EAAE;AAQjF,MAAMC,MAAM,GAEmBJ,QAAQ,2MAACI,MAAM;AAkB9C,MAAMC,KAAK,GAG2BL,QAAQ,2MAACK,KAAY;AAkB3D,MAAMC,WAAW,GAK8CN,QAAQ,2MAACM,WAAkB;AAQ1F,MAAMC,QAAQ,GAejBP,QAAQ,2MAACO,QAAQ;AAQd,MAAMC,qBAAqB,GAe9BT,YAAY,4MAACS,qBAAqB;AAU/B,MAAMC,cAAc,GAwBvBT,QAAQ,2MAACS,cAAc;AAQpB,MAAMC,IAAI,GAebV,QAAQ,2MAACU,IAAI;AAQV,MAAMC,SAAS,GAelBX,QAAQ,2MAACW,SAAS;AAQf,MAAMC,OAAO,GAehBZ,QAAQ,2MAACY,OAAO;AA+Bb,MAAMC,SAAS,IACpBC,OAGC,GAEDjB,KAAK,4MAACkB,IAAI,CAAC;QACT,GAAGD,OAAO;QACVE,MAAM,EAAEA,CAAA,GACNlB,IAAI,4MAACmB,GAAG,CAACnB,IAAI,4MAACoB,YAAY,EAAoB,GAAGC,MAAM,GAAA,CAAM;oBAAEC,SAAS,EAAE,IAAIpB,QAAQ,2MAACqB,SAAS,EAAE;oBAAEF;gBAAM,CAAE,CAAC;KAChH,CAAC;AAMG,MAAMG,WAAW,GAAA,WAAA,GAAkBC,MAAM,CAACC,GAAG,CAAC,2BAA2B,CAAC;AAmD1E,MAAMC,OAAO,GAAG7B,aAAa,8MAAC6B,OAAO;AAMrC,MAAMC,SAAS,GAAG9B,aAAa,8MAAC8B,SAAS","ignoreList":[0]}},
    {"offset": {"line": 9883, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9889, "column": 0}, "map": {"version":3,"file":"Effect.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Effect.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as RA from \"./Array.js\"\nimport type * as Cause from \"./Cause.js\"\nimport type * as Chunk from \"./Chunk.js\"\nimport type * as Clock from \"./Clock.js\"\nimport type { ConfigProvider } from \"./ConfigProvider.js\"\nimport type { Console } from \"./Console.js\"\nimport type * as Context from \"./Context.js\"\nimport type * as Deferred from \"./Deferred.js\"\nimport type * as Duration from \"./Duration.js\"\nimport type * as Either from \"./Either.js\"\nimport type { Equivalence } from \"./Equivalence.js\"\nimport type { ExecutionStrategy } from \"./ExecutionStrategy.js\"\nimport type * as Exit from \"./Exit.js\"\nimport type * as Fiber from \"./Fiber.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport type * as FiberRef from \"./FiberRef.js\"\nimport type * as FiberRefs from \"./FiberRefs.js\"\nimport type * as FiberRefsPatch from \"./FiberRefsPatch.js\"\nimport type * as FiberStatus from \"./FiberStatus.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { dual } from \"./Function.js\"\nimport type * as HashMap from \"./HashMap.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport * as _console from \"./internal/console.js\"\nimport { TagProto } from \"./internal/context.js\"\nimport * as effect from \"./internal/core-effect.js\"\nimport * as core from \"./internal/core.js\"\nimport * as defaultServices from \"./internal/defaultServices.js\"\nimport * as circular from \"./internal/effect/circular.js\"\nimport * as fiberRuntime from \"./internal/fiberRuntime.js\"\nimport * as layer from \"./internal/layer.js\"\nimport * as query from \"./internal/query.js\"\nimport * as _runtime from \"./internal/runtime.js\"\nimport * as _schedule from \"./internal/schedule.js\"\nimport type * as Layer from \"./Layer.js\"\nimport type { LogLevel } from \"./LogLevel.js\"\nimport type * as ManagedRuntime from \"./ManagedRuntime.js\"\nimport type * as Metric from \"./Metric.js\"\nimport type * as MetricLabel from \"./MetricLabel.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport type * as Random from \"./Random.js\"\nimport type * as Ref from \"./Ref.js\"\nimport * as Request from \"./Request.js\"\nimport type { RequestBlock } from \"./RequestBlock.js\"\nimport type { RequestResolver } from \"./RequestResolver.js\"\nimport type * as Runtime from \"./Runtime.js\"\nimport type * as RuntimeFlags from \"./RuntimeFlags.js\"\nimport type * as RuntimeFlagsPatch from \"./RuntimeFlagsPatch.js\"\nimport type * as Schedule from \"./Schedule.js\"\nimport * as Scheduler from \"./Scheduler.js\"\nimport type * as Scope from \"./Scope.js\"\nimport type * as Supervisor from \"./Supervisor.js\"\nimport type * as Tracer from \"./Tracer.js\"\nimport type { Concurrency, Contravariant, Covariant, NoExcessProperties, NoInfer, NotFunction } from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\nimport type { YieldWrap } from \"./Utils.js\"\n\n// -------------------------------------------------------------------------------------\n// models\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const EffectTypeId: unique symbol = core.EffectTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type EffectTypeId = typeof EffectTypeId\n\n/**\n * The `Effect` interface defines a value that lazily describes a workflow or job.\n * The workflow requires some context `R`, and may fail with an error of type `E`,\n * or succeed with a value of type `A`.\n *\n * `Effect` values model resourceful interaction with the outside world, including\n * synchronous, asynchronous, concurrent, and parallel interaction. They use a\n * fiber-based concurrency model, with built-in support for scheduling, fine-grained\n * interruption, structured concurrency, and high scalability.\n *\n * To run an `Effect` value, you need a `Runtime`, which is a type that is capable\n * of executing `Effect` values.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Effect<out A, out E = never, out R = never> extends Effect.Variance<A, E, R>, Pipeable {\n  readonly [Unify.typeSymbol]?: unknown\n  readonly [Unify.unifySymbol]?: EffectUnify<this>\n  readonly [Unify.ignoreSymbol]?: EffectUnifyIgnore\n  [Symbol.iterator](): EffectGenerator<Effect<A, E, R>>\n}\n\n/**\n * @since 3.0.0\n * @category models\n */\nexport interface EffectGenerator<T extends Effect<any, any, any>> {\n  next(...args: ReadonlyArray<any>): IteratorResult<YieldWrap<T>, Effect.Success<T>>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface EffectUnify<A extends { [Unify.typeSymbol]?: any }>\n  extends Either.EitherUnify<A>, Option.OptionUnify<A>, Context.TagUnify<A>\n{\n  Effect?: () => A[Unify.typeSymbol] extends Effect<infer A0, infer E0, infer R0> | infer _ ? Effect<A0, E0, R0> : never\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface EffectUnifyIgnore {\n  Tag?: true\n  Option?: true\n  Either?: true\n}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface EffectTypeLambda extends TypeLambda {\n  readonly type: Effect<this[\"Target\"], this[\"Out1\"], this[\"Out2\"]>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Blocked<out A, out E> extends Effect<A, E> {\n  readonly _op: \"Blocked\"\n  readonly effect_instruction_i0: RequestBlock\n  readonly effect_instruction_i1: Effect<A, E>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\ndeclare module \"./Context.js\" {\n  interface Tag<Id, Value> extends Effect<Value, never, Id> {\n    [Symbol.iterator](): EffectGenerator<Tag<Id, Value>>\n  }\n  interface TagUnifyIgnore {\n    Effect?: true\n    Either?: true\n    Option?: true\n  }\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\ndeclare module \"./Either.js\" {\n  interface Left<L, R> extends Effect<R, L> {\n    readonly _tag: \"Left\"\n    [Symbol.iterator](): EffectGenerator<Left<L, R>>\n  }\n  interface Right<L, R> extends Effect<R, L> {\n    readonly _tag: \"Right\"\n    [Symbol.iterator](): EffectGenerator<Right<L, R>>\n  }\n  interface EitherUnifyIgnore {\n    Effect?: true\n    Tag?: true\n    Option?: true\n  }\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\ndeclare module \"./Option.js\" {\n  interface None<A> extends Effect<A, Cause.NoSuchElementException> {\n    readonly _tag: \"None\"\n    [Symbol.iterator](): EffectGenerator<None<A>>\n  }\n  interface Some<A> extends Effect<A, Cause.NoSuchElementException> {\n    readonly _tag: \"Some\"\n    [Symbol.iterator](): EffectGenerator<Some<A>>\n  }\n  interface OptionUnifyIgnore {\n    Effect?: true\n    Tag?: true\n    Either?: true\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Effect {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<out A, out E, out R> {\n    readonly [EffectTypeId]: VarianceStruct<A, E, R>\n  }\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface VarianceStruct<out A, out E, out R> {\n    readonly _V: string\n    readonly _A: Covariant<A>\n    readonly _E: Covariant<E>\n    readonly _R: Covariant<R>\n  }\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Context<T extends Effect<any, any, any>> = [T] extends [Effect<infer _A, infer _E, infer _R>] ? _R : never\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Error<T extends Effect<any, any, any>> = [T] extends [Effect<infer _A, infer _E, infer _R>] ? _E : never\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Success<T extends Effect<any, any, any>> = [T] extends [Effect<infer _A, infer _E, infer _R>] ? _A : never\n}\n\n// -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n\n/**\n * This function returns `true` if the specified value is an `Effect` value,\n * `false` otherwise.\n *\n * This function can be useful for checking the type of a value before\n * attempting to operate on it as an `Effect` value. For example, you could\n * use `isEffect` to check the type of a value before using it as an\n * argument to a function that expects an `Effect` value.\n *\n * @param u - The value to check for being an `Effect` value.\n *\n * @returns `true` if the specified value is an `Effect` value, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isEffect: (u: unknown) => u is Effect<unknown, unknown, unknown> = core.isEffect\n\n// -------------------------------------------------------------------------------------\n// caching\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns an effect that caches its result for a specified duration, known as\n * the `timeToLive`. When the cache expires after the duration, the effect will be\n * recomputed upon next evaluation.\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * let i = 1\n * const expensiveTask = Effect.promise<string>(() => {\n *   console.log(\"expensive task...\")\n *   return new Promise((resolve) => {\n *     setTimeout(() => {\n *       resolve(`result ${i++}`)\n *     }, 100)\n *   })\n * })\n *\n * const program = Effect.gen(function* () {\n *   const cached = yield* Effect.cachedWithTTL(expensiveTask, \"150 millis\")\n *   yield* cached.pipe(Effect.andThen(Console.log))\n *   yield* cached.pipe(Effect.andThen(Console.log))\n *   yield* Effect.sleep(\"100 millis\")\n *   yield* cached.pipe(Effect.andThen(Console.log))\n * })\n *\n * Effect.runFork(program)\n * // Output:\n * // expensive task...\n * // result 1\n * // result 1\n * // expensive task...\n * // result 2\n *\n * @since 2.0.0\n * @category caching\n */\nexport const cachedWithTTL: {\n  // -------------------------------------------------------------------------------------\n  // caching\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * Returns an effect that caches its result for a specified duration, known as\n   * the `timeToLive`. When the cache expires after the duration, the effect will be\n   * recomputed upon next evaluation.\n   *\n   * @example\n   * import { Effect, Console } from \"effect\"\n   *\n   * let i = 1\n   * const expensiveTask = Effect.promise<string>(() => {\n   *   console.log(\"expensive task...\")\n   *   return new Promise((resolve) => {\n   *     setTimeout(() => {\n   *       resolve(`result ${i++}`)\n   *     }, 100)\n   *   })\n   * })\n   *\n   * const program = Effect.gen(function* () {\n   *   const cached = yield* Effect.cachedWithTTL(expensiveTask, \"150 millis\")\n   *   yield* cached.pipe(Effect.andThen(Console.log))\n   *   yield* cached.pipe(Effect.andThen(Console.log))\n   *   yield* Effect.sleep(\"100 millis\")\n   *   yield* cached.pipe(Effect.andThen(Console.log))\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // expensive task...\n   * // result 1\n   * // result 1\n   * // expensive task...\n   * // result 2\n   *\n   * @since 2.0.0\n   * @category caching\n   */\n  (timeToLive: Duration.DurationInput): <A, E, R>(self: Effect<A, E, R>) => Effect<Effect<A, E>, never, R>\n  // -------------------------------------------------------------------------------------\n  // caching\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * Returns an effect that caches its result for a specified duration, known as\n   * the `timeToLive`. When the cache expires after the duration, the effect will be\n   * recomputed upon next evaluation.\n   *\n   * @example\n   * import { Effect, Console } from \"effect\"\n   *\n   * let i = 1\n   * const expensiveTask = Effect.promise<string>(() => {\n   *   console.log(\"expensive task...\")\n   *   return new Promise((resolve) => {\n   *     setTimeout(() => {\n   *       resolve(`result ${i++}`)\n   *     }, 100)\n   *   })\n   * })\n   *\n   * const program = Effect.gen(function* () {\n   *   const cached = yield* Effect.cachedWithTTL(expensiveTask, \"150 millis\")\n   *   yield* cached.pipe(Effect.andThen(Console.log))\n   *   yield* cached.pipe(Effect.andThen(Console.log))\n   *   yield* Effect.sleep(\"100 millis\")\n   *   yield* cached.pipe(Effect.andThen(Console.log))\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // expensive task...\n   * // result 1\n   * // result 1\n   * // expensive task...\n   * // result 2\n   *\n   * @since 2.0.0\n   * @category caching\n   */\n  <A, E, R>(self: Effect<A, E, R>, timeToLive: Duration.DurationInput): Effect<Effect<A, E>, never, R>\n} = circular.cached\n\n/**\n * Similar to {@link cachedWithTTL}, this function caches an effect's result for a\n * specified duration. It also includes an additional effect for manually\n * invalidating the cached value before it naturally expires.\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * let i = 1\n * const expensiveTask = Effect.promise<string>(() => {\n *   console.log(\"expensive task...\")\n *   return new Promise((resolve) => {\n *     setTimeout(() => {\n *       resolve(`result ${i++}`)\n *     }, 100)\n *   })\n * })\n *\n * const program = Effect.gen(function* () {\n *   const [cached, invalidate] = yield* Effect.cachedInvalidateWithTTL(\n *     expensiveTask,\n *     \"1 hour\"\n *   )\n *   yield* cached.pipe(Effect.andThen(Console.log))\n *   yield* cached.pipe(Effect.andThen(Console.log))\n *   yield* invalidate\n *   yield* cached.pipe(Effect.andThen(Console.log))\n * })\n *\n * Effect.runFork(program)\n * // Output:\n * // expensive task...\n * // result 1\n * // result 1\n * // expensive task...\n * // result 2\n *\n * @since 2.0.0\n * @category caching\n */\nexport const cachedInvalidateWithTTL: {\n  /**\n   * Similar to {@link cachedWithTTL}, this function caches an effect's result for a\n   * specified duration. It also includes an additional effect for manually\n   * invalidating the cached value before it naturally expires.\n   *\n   * @example\n   * import { Effect, Console } from \"effect\"\n   *\n   * let i = 1\n   * const expensiveTask = Effect.promise<string>(() => {\n   *   console.log(\"expensive task...\")\n   *   return new Promise((resolve) => {\n   *     setTimeout(() => {\n   *       resolve(`result ${i++}`)\n   *     }, 100)\n   *   })\n   * })\n   *\n   * const program = Effect.gen(function* () {\n   *   const [cached, invalidate] = yield* Effect.cachedInvalidateWithTTL(\n   *     expensiveTask,\n   *     \"1 hour\"\n   *   )\n   *   yield* cached.pipe(Effect.andThen(Console.log))\n   *   yield* cached.pipe(Effect.andThen(Console.log))\n   *   yield* invalidate\n   *   yield* cached.pipe(Effect.andThen(Console.log))\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // expensive task...\n   * // result 1\n   * // result 1\n   * // expensive task...\n   * // result 2\n   *\n   * @since 2.0.0\n   * @category caching\n   */\n  (timeToLive: Duration.DurationInput): <A, E, R>(\n    self: Effect<A, E, R>\n  ) => Effect<[Effect<A, E>, Effect<void>], never, R>\n  /**\n   * Similar to {@link cachedWithTTL}, this function caches an effect's result for a\n   * specified duration. It also includes an additional effect for manually\n   * invalidating the cached value before it naturally expires.\n   *\n   * @example\n   * import { Effect, Console } from \"effect\"\n   *\n   * let i = 1\n   * const expensiveTask = Effect.promise<string>(() => {\n   *   console.log(\"expensive task...\")\n   *   return new Promise((resolve) => {\n   *     setTimeout(() => {\n   *       resolve(`result ${i++}`)\n   *     }, 100)\n   *   })\n   * })\n   *\n   * const program = Effect.gen(function* () {\n   *   const [cached, invalidate] = yield* Effect.cachedInvalidateWithTTL(\n   *     expensiveTask,\n   *     \"1 hour\"\n   *   )\n   *   yield* cached.pipe(Effect.andThen(Console.log))\n   *   yield* cached.pipe(Effect.andThen(Console.log))\n   *   yield* invalidate\n   *   yield* cached.pipe(Effect.andThen(Console.log))\n   * })\n   *\n   * Effect.runFork(program)\n   * // Output:\n   * // expensive task...\n   * // result 1\n   * // result 1\n   * // expensive task...\n   * // result 2\n   *\n   * @since 2.0.0\n   * @category caching\n   */\n  <A, E, R>(self: Effect<A, E, R>, timeToLive: Duration.DurationInput): Effect<[Effect<A, E>, Effect<void>], never, R>\n} = circular.cachedInvalidateWithTTL\n\n/**\n * Returns an effect that computes a result lazily and caches it. Subsequent\n * evaluations of this effect will return the cached result without re-executing\n * the logic.\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * let i = 1\n * const expensiveTask = Effect.promise<string>(() => {\n *   console.log(\"expensive task...\")\n *   return new Promise((resolve) => {\n *     setTimeout(() => {\n *       resolve(`result ${i++}`)\n *     }, 100)\n *   })\n * })\n *\n * const program = Effect.gen(function* () {\n *   console.log(\"non-cached version:\")\n *   yield* expensiveTask.pipe(Effect.andThen(Console.log))\n *   yield* expensiveTask.pipe(Effect.andThen(Console.log))\n *   console.log(\"cached version:\")\n *   const cached = yield* Effect.cached(expensiveTask)\n *   yield* cached.pipe(Effect.andThen(Console.log))\n *   yield* cached.pipe(Effect.andThen(Console.log))\n * })\n *\n * Effect.runFork(program)\n * // Output:\n * // non-cached version:\n * // expensive task...\n * // result 1\n * // expensive task...\n * // result 2\n * // cached version:\n * // expensive task...\n * // result 3\n * // result 3\n *\n * @since 2.0.0\n * @category caching\n */\nexport const cached: <A, E, R>(self: Effect<A, E, R>) => Effect<Effect<A, E, R>> = effect.memoize\n\n/**\n * Returns a memoized version of a function with effects. Memoization ensures\n * that results are stored and reused for the same inputs, reducing the need to\n * recompute them.\n *\n * @example\n * import { Effect, Random } from \"effect\"\n *\n * const program = Effect.gen(function* () {\n *   const randomNumber = (n: number) => Random.nextIntBetween(1, n)\n *   console.log(\"non-memoized version:\")\n *   console.log(yield* randomNumber(10))\n *   console.log(yield* randomNumber(10))\n *\n *   console.log(\"memoized version:\")\n *   const memoized = yield* Effect.cachedFunction(randomNumber)\n *   console.log(yield* memoized(10))\n *   console.log(yield* memoized(10))\n * })\n *\n * Effect.runFork(program)\n * // Example Output:\n * // non-memoized version:\n * // 2\n * // 8\n * // memoized version:\n * // 5\n * // 5\n *\n * @since 2.0.0\n * @category caching\n */\nexport const cachedFunction: <A, B, E, R>(\n  f: (a: A) => Effect<B, E, R>,\n  eq?: Equivalence<A>\n) => Effect<(a: A) => Effect<B, E, R>> = circular.cachedFunction\n\n/**\n * Returns an effect that executes only once, regardless of how many times it's\n * called.\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * const program = Effect.gen(function* () {\n *   const task1 = Console.log(\"task1\")\n *   yield* Effect.repeatN(task1, 2)\n *   const task2 = yield* Effect.once(Console.log(\"task2\"))\n *   yield* Effect.repeatN(task2, 2)\n * })\n *\n * Effect.runFork(program)\n * // Output:\n * // task1\n * // task1\n * // task1\n * // task2\n *\n * @since 2.0.0\n * @category caching\n */\nexport const once: <A, E, R>(self: Effect<A, E, R>) => Effect<Effect<void, E, R>> = effect.once\n\n// -------------------------------------------------------------------------------------\n// collecting & elements\n// -------------------------------------------------------------------------------------\n\n/**\n * Runs all the provided effects in sequence respecting the structure provided in input.\n *\n * Supports multiple arguments, a single argument tuple / array or record / struct.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const all: <\n  const Arg extends Iterable<Effect<any, any, any>> | Record<string, Effect<any, any, any>>,\n  O extends {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n>(arg: Arg, options?: O) => All.Return<Arg, O> = fiberRuntime.all\n\n/**\n * Data-last variant of `Effect.all`.\n *\n * Runs all the provided effects in sequence respecting the structure provided in input.\n *\n * Supports multiple arguments, a single argument tuple / array or record / struct.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const allWith: <\n  O extends {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n>(\n  options?: O\n) => <const Arg extends Iterable<Effect<any, any, any>> | Record<string, Effect<any, any, any>>>(\n  arg: Arg\n) => All.Return<Arg, O> = fiberRuntime.allWith\n\n/**\n * @since 2.0.0\n */\nexport declare namespace All {\n  /**\n   * @since 2.0.0\n   */\n  export type EffectAny = Effect<any, any, any>\n\n  /**\n   * @since 2.0.0\n   */\n  export type ReturnIterable<T extends Iterable<EffectAny>, Discard extends boolean, Mode> = [T] extends\n    [Iterable<Effect.Variance<infer R0, infer L0, infer R>>] ? Effect<\n      Discard extends true ? void : Mode extends \"either\" ? Array<Either.Either<R0, L0>> : Array<R0>,\n      Mode extends \"either\" ? never\n        : Mode extends \"validate\" ? Array<Option.Option<L0>>\n        : L0,\n      R\n    >\n    : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type ReturnTuple<T extends ReadonlyArray<unknown>, Discard extends boolean, Mode> = Effect<\n    Discard extends true ? void\n      : T[number] extends never ? []\n      : Mode extends \"either\" ? {\n          -readonly [K in keyof T]: [T[K]] extends [Effect.Variance<infer _A, infer _E, infer _R>] ?\n            Either.Either<_A, _E>\n            : never\n        }\n      : { -readonly [K in keyof T]: [T[K]] extends [Effect.Variance<infer _A, infer _E, infer _R>] ? _A : never },\n    Mode extends \"either\" ? never\n      : T[number] extends never ? never\n      : Mode extends \"validate\" ? {\n          -readonly [K in keyof T]: [T[K]] extends [Effect.Variance<infer _A, infer _E, infer _R>] ? Option.Option<_E>\n            : never\n        }\n      : [T[number]] extends [{ [EffectTypeId]: { _E: (_: never) => infer E } }] ? E\n      : never,\n    T[number] extends never ? never\n      : [T[number]] extends [{ [EffectTypeId]: { _R: (_: never) => infer R } }] ? R\n      : never\n  > extends infer X ? X : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type ReturnObject<T, Discard extends boolean, Mode> = [T] extends [{ [K: string]: EffectAny }] ? Effect<\n      Discard extends true ? void\n        : Mode extends \"either\" ? {\n            -readonly [K in keyof T]: [T[K]] extends [Effect.Variance<infer _A, infer _E, infer _R>] ?\n              Either.Either<_A, _E>\n              : never\n          }\n        : { -readonly [K in keyof T]: [T[K]] extends [Effect.Variance<infer _A, infer _E, infer _R>] ? _A : never },\n      Mode extends \"either\" ? never\n        : keyof T extends never ? never\n        : Mode extends \"validate\" ? {\n            -readonly [K in keyof T]: [T[K]] extends [Effect.Variance<infer _A, infer _E, infer _R>] ? Option.Option<_E>\n              : never\n          }\n        : [T[keyof T]] extends [{ [EffectTypeId]: { _E: (_: never) => infer E } }] ? E\n        : never,\n      keyof T extends never ? never\n        : [T[keyof T]] extends [{ [EffectTypeId]: { _R: (_: never) => infer R } }] ? R\n        : never\n    >\n    : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type IsDiscard<A> = [Extract<A, { readonly discard: true }>] extends [never] ? false : true\n\n  /**\n   * @since 2.0.0\n   */\n  export type ExtractMode<A> = [A] extends [{ mode: infer M }] ? M : \"default\"\n\n  /**\n   * @since 2.0.0\n   */\n  export type Return<\n    Arg extends Iterable<EffectAny> | Record<string, EffectAny>,\n    O extends {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: boolean | undefined\n      readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  > = [Arg] extends [ReadonlyArray<EffectAny>] ? ReturnTuple<Arg, IsDiscard<O>, ExtractMode<O>>\n    : [Arg] extends [Iterable<EffectAny>] ? ReturnIterable<Arg, IsDiscard<O>, ExtractMode<O>>\n    : [Arg] extends [Record<string, EffectAny>] ? ReturnObject<Arg, IsDiscard<O>, ExtractMode<O>>\n    : never\n}\n\n/**\n * Evaluate and run each effect in the structure and collect the results,\n * discarding results from failed effects.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const allSuccesses: <X extends Effect<any, any, any>>(\n  elements: Iterable<X>,\n  options?:\n    | {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n    | undefined\n) => Effect<Array<Effect.Success<X>>, never, Effect.Context<X>> = fiberRuntime.allSuccesses\n\n/**\n * Drops all elements until the effectful predicate returns true.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const dropUntil: {\n  /**\n   * Drops all elements until the effectful predicate returns true.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, E, R>(\n    predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): (elements: Iterable<A>) => Effect<Array<A>, E, R>\n  /**\n   * Drops all elements until the effectful predicate returns true.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: A, i: number) => Effect<boolean, E, R>\n  ): Effect<Array<A>, E, R>\n} = effect.dropUntil\n\n/**\n * Drops all elements so long as the predicate returns true.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const dropWhile: {\n  /**\n   * Drops all elements so long as the predicate returns true.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, E, R>(\n    predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): (elements: Iterable<A>) => Effect<Array<A>, E, R>\n  /**\n   * Drops all elements so long as the predicate returns true.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: A, i: number) => Effect<boolean, E, R>\n  ): Effect<Array<A>, E, R>\n} = effect.dropWhile\n\n/**\n * Determines whether all elements of the `Collection<A>` satisfies the effectual\n * predicate `f`.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const every: {\n  /**\n   * Determines whether all elements of the `Collection<A>` satisfies the effectual\n   * predicate `f`.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, E, R>(f: (a: A, i: number) => Effect<boolean, E, R>): (elements: Iterable<A>) => Effect<boolean, E, R>\n  /**\n   * Determines whether all elements of the `Collection<A>` satisfies the effectual\n   * predicate `f`.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, E, R>(elements: Iterable<A>, f: (a: A, i: number) => Effect<boolean, E, R>): Effect<boolean, E, R>\n} = effect.every\n\n/**\n * Determines whether any element of the `Iterable<A>` satisfies the effectual\n * predicate `f`.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const exists: {\n  /**\n   * Determines whether any element of the `Iterable<A>` satisfies the effectual\n   * predicate `f`.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, E, R>(\n    f: (a: A, i: number) => Effect<boolean, E, R>,\n    options?:\n      | {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): (elements: Iterable<A>) => Effect<boolean, E, R>\n  /**\n   * Determines whether any element of the `Iterable<A>` satisfies the effectual\n   * predicate `f`.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect<boolean, E, R>,\n    options?:\n      | {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): Effect<boolean, E, R>\n} = fiberRuntime.exists\n\n/**\n * Filters the collection using the specified effectful predicate.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const filter: {\n  /**\n   * Filters the collection using the specified effectful predicate.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, E, R>(\n    f: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly negate?: boolean | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    } | undefined\n  ): (elements: Iterable<A>) => Effect<Array<A>, E, R>\n  /**\n   * Filters the collection using the specified effectful predicate.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, E, R>(\n    elements: Iterable<A>,\n    f: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly negate?: boolean | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    } | undefined\n  ): Effect<Array<A>, E, R>\n} = fiberRuntime.filter\n\n/**\n * Performs a filter and map in a single step.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const filterMap: {\n  /**\n   * Performs a filter and map in a single step.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <Eff extends Effect<any, any, any>, B>(\n    pf: (a: Effect.Success<Eff>) => Option.Option<B>\n  ): (elements: Iterable<Eff>) => Effect<Array<B>, Effect.Error<Eff>, Effect.Context<Eff>>\n  /**\n   * Performs a filter and map in a single step.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <Eff extends Effect<any, any, any>, B>(\n    elements: Iterable<Eff>,\n    pf: (a: Effect.Success<Eff>) => Option.Option<B>\n  ): Effect<Array<B>, Effect.Error<Eff>, Effect.Context<Eff>>\n} = effect.filterMap\n\n/**\n * Returns the first element that satisfies the effectful predicate.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const findFirst: {\n  /**\n   * Returns the first element that satisfies the effectful predicate.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, E, R>(\n    f: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): (elements: Iterable<A>) => Effect<Option.Option<A>, E, R>\n  /**\n   * Returns the first element that satisfies the effectful predicate.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, E, R>(\n    elements: Iterable<A>,\n    f: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): Effect<Option.Option<A>, E, R>\n} = effect.findFirst\n\n/**\n * This function takes an iterable of `Effect` values and returns a new\n * `Effect` value that represents the first `Effect` value in the iterable\n * that succeeds. If all of the `Effect` values in the iterable fail, then\n * the resulting `Effect` value will fail as well.\n *\n * This function is sequential, meaning that the `Effect` values in the\n * iterable will be executed in sequence, and the first one that succeeds\n * will determine the outcome of the resulting `Effect` value.\n *\n * @param effects - The iterable of `Effect` values to evaluate.\n *\n * @returns A new `Effect` value that represents the first successful\n * `Effect` value in the iterable, or a failed `Effect` value if all of the\n * `Effect` values in the iterable fail.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const firstSuccessOf: <Eff extends Effect<any, any, any>>(\n  effects: Iterable<Eff>\n) => Effect<Effect.Success<Eff>, Effect.Error<Eff>, Effect.Context<Eff>> = effect.firstSuccessOf\n/**\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const forEach: {\n  /**\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <B, E, R, S extends Iterable<any>>(\n    f: (a: RA.ReadonlyArray.Infer<S>, i: number) => Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    } | undefined\n  ): (\n    self: S\n  ) => Effect<RA.ReadonlyArray.With<S, B>, E, R>\n  /**\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): (self: Iterable<A>) => Effect<void, E, R>\n  /**\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <B, E, R, S extends Iterable<any>>(\n    self: S,\n    f: (a: RA.ReadonlyArray.Infer<S>, i: number) => Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    } | undefined\n  ): Effect<RA.ReadonlyArray.With<S, B>, E, R>\n  /**\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, B, E, R>(\n    self: Iterable<A>,\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect<void, E, R>\n} = fiberRuntime.forEach as any\n\n/**\n * Returns a successful effect with the head of the collection if the collection\n * is non-empty, or fails with the error `None` if the collection is empty.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const head: <A, E, R>(self: Effect<Iterable<A>, E, R>) => Effect<A, Cause.NoSuchElementException | E, R> =\n  effect.head\n\n/**\n * Merges an `Iterable<Effect<A, E, R>>` to a single effect, working\n * sequentially.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const mergeAll: {\n  /**\n   * Merges an `Iterable<Effect<A, E, R>>` to a single effect, working\n   * sequentially.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <Z, Eff extends Effect<any, any, any>>(\n    zero: Z,\n    f: (z: Z, a: Effect.Success<Eff>, i: number) => Z,\n    options?:\n      | {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): (elements: Iterable<Eff>) => Effect<Z, Effect.Error<Eff>, Effect.Context<Eff>>\n  /**\n   * Merges an `Iterable<Effect<A, E, R>>` to a single effect, working\n   * sequentially.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <Eff extends Effect<any, any, any>, Z>(\n    elements: Iterable<Eff>,\n    zero: Z,\n    f: (z: Z, a: Effect.Success<Eff>, i: number) => Z,\n    options?:\n      | {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): Effect<Z, Effect.Error<Eff>, Effect.Context<Eff>>\n} = fiberRuntime.mergeAll\n\n/**\n * Feeds elements of type `A` to a function `f` that returns an effect.\n * Collects all successes and failures in a tupled fashion.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const partition: {\n  /**\n   * Feeds elements of type `A` to a function `f` that returns an effect.\n   * Collects all successes and failures in a tupled fashion.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options?:\n      | {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): (elements: Iterable<A>) => Effect<[excluded: Array<E>, satisfying: Array<B>], never, R>\n  /**\n   * Feeds elements of type `A` to a function `f` that returns an effect.\n   * Collects all successes and failures in a tupled fashion.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options?:\n      | {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): Effect<[excluded: Array<E>, satisfying: Array<B>], never, R>\n} = fiberRuntime.partition\n\n/**\n * Folds an `Iterable<A>` using an effectual function f, working sequentially\n * from left to right.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const reduce: {\n  /**\n   * Folds an `Iterable<A>` using an effectual function f, working sequentially\n   * from left to right.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <Z, A, E, R>(zero: Z, f: (z: Z, a: A, i: number) => Effect<Z, E, R>): (elements: Iterable<A>) => Effect<Z, E, R>\n  /**\n   * Folds an `Iterable<A>` using an effectual function f, working sequentially\n   * from left to right.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, Z, E, R>(\n    elements: Iterable<A>,\n    zero: Z,\n    f: (z: Z, a: A, i: number) => Effect<Z, E, R>\n  ): Effect<Z, E, R>\n} = effect.reduce\n\n/**\n * Reduces an `Iterable<Effect<A, E, R>>` to a single effect.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const reduceEffect: {\n  /**\n   * Reduces an `Iterable<Effect<A, E, R>>` to a single effect.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <Z, E, R, Eff extends Effect<any, any, any>>(\n    zero: Effect<Z, E, R>,\n    f: (acc: NoInfer<Z>, a: Effect.Success<Eff>, i: number) => Z,\n    options?:\n      | {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): (elements: Iterable<Eff>) => Effect<Z, E | Effect.Error<Eff>, R | Effect.Context<Eff>>\n  /**\n   * Reduces an `Iterable<Effect<A, E, R>>` to a single effect.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <Eff extends Effect<any, any, any>, Z, E, R>(\n    elements: Iterable<Eff>,\n    zero: Effect<Z, E, R>,\n    f: (acc: NoInfer<Z>, a: Effect.Success<Eff>, i: number) => Z,\n    options?:\n      | {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): Effect<Z, E | Effect.Error<Eff>, R | Effect.Context<Eff>>\n} = fiberRuntime.reduceEffect\n\n/**\n * Folds an `Iterable<A>` using an effectual function f, working sequentially from left to right.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const reduceRight: {\n  /**\n   * Folds an `Iterable<A>` using an effectual function f, working sequentially from left to right.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, Z, R, E>(zero: Z, f: (a: A, z: Z, i: number) => Effect<Z, E, R>): (elements: Iterable<A>) => Effect<Z, E, R>\n  /**\n   * Folds an `Iterable<A>` using an effectual function f, working sequentially from left to right.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, Z, R, E>(\n    elements: Iterable<A>,\n    zero: Z,\n    f: (a: A, z: Z, i: number) => Effect<Z, E, R>\n  ): Effect<Z, E, R>\n} = effect.reduceRight\n\n/**\n * Folds over the elements in this chunk from the left, stopping the fold early\n * when the predicate is not satisfied.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const reduceWhile: {\n  /**\n   * Folds over the elements in this chunk from the left, stopping the fold early\n   * when the predicate is not satisfied.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <Z, A, E, R>(\n    zero: Z,\n    options: { readonly while: Predicate<Z>; readonly body: (s: Z, a: A, i: number) => Effect<Z, E, R> }\n  ): (elements: Iterable<A>) => Effect<Z, E, R>\n  /**\n   * Folds over the elements in this chunk from the left, stopping the fold early\n   * when the predicate is not satisfied.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, Z, E, R>(\n    elements: Iterable<A>,\n    zero: Z,\n    options: { readonly while: Predicate<Z>; readonly body: (s: Z, a: A, i: number) => Effect<Z, E, R> }\n  ): Effect<Z, E, R>\n} = effect.reduceWhile\n\n/**\n * Replicates the given effect `n` times.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const replicate: {\n  /**\n   * Replicates the given effect `n` times.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  (n: number): <A, E, R>(self: Effect<A, E, R>) => Array<Effect<A, E, R>>\n  /**\n   * Replicates the given effect `n` times.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, E, R>(self: Effect<A, E, R>, n: number): Array<Effect<A, E, R>>\n} = fiberRuntime.replicate\n\n/**\n * Performs this effect the specified number of times and collects the\n * results.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const replicateEffect: {\n  /**\n   * Performs this effect the specified number of times and collects the\n   * results.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  (\n    n: number,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<Array<A>, E, R>\n  /**\n   * Performs this effect the specified number of times and collects the\n   * results.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  (\n    n: number,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<void, E, R>\n  /**\n   * Performs this effect the specified number of times and collects the\n   * results.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, E, R>(\n    self: Effect<A, E, R>,\n    n: number,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect<Array<A>, E, R>\n  /**\n   * Performs this effect the specified number of times and collects the\n   * results.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, E, R>(\n    self: Effect<A, E, R>,\n    n: number,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect<void, E, R>\n} = fiberRuntime.replicateEffect\n\n/**\n * Takes elements until the effectual predicate returns true.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const takeUntil: {\n  /**\n   * Takes elements until the effectual predicate returns true.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, R, E>(\n    predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): (elements: Iterable<A>) => Effect<Array<A>, E, R>\n  /**\n   * Takes elements until the effectual predicate returns true.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): Effect<Array<A>, E, R>\n} = effect.takeUntil\n\n/**\n * Takes all elements so long as the effectual predicate returns true.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const takeWhile: {\n  /**\n   * Takes all elements so long as the effectual predicate returns true.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, E, R>(\n    predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): (elements: Iterable<A>) => Effect<Array<A>, E, R>\n  /**\n   * Takes all elements so long as the effectual predicate returns true.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, E, R>(\n    elements: Iterable<A>,\n    predicate: (a: NoInfer<A>, i: number) => Effect<boolean, E, R>\n  ): Effect<Array<A>, E, R>\n} = effect.takeWhile\n\n/**\n * Feeds elements of type `A` to `f` and accumulates all errors in error\n * channel or successes in success channel.\n *\n * This combinator is lossy meaning that if there are errors all successes\n * will be lost. To retain all information please use `partition`.\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const validateAll: {\n  /**\n   * Feeds elements of type `A` to `f` and accumulates all errors in error\n   * channel or successes in success channel.\n   *\n   * This combinator is lossy meaning that if there are errors all successes\n   * will be lost. To retain all information please use `partition`.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    } | undefined\n  ): (elements: Iterable<A>) => Effect<Array<B>, Array<E>, R>\n  /**\n   * Feeds elements of type `A` to `f` and accumulates all errors in error\n   * channel or successes in success channel.\n   *\n   * This combinator is lossy meaning that if there are errors all successes\n   * will be lost. To retain all information please use `partition`.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): (elements: Iterable<A>) => Effect<void, Array<E>, R>\n  /**\n   * Feeds elements of type `A` to `f` and accumulates all errors in error\n   * channel or successes in success channel.\n   *\n   * This combinator is lossy meaning that if there are errors all successes\n   * will be lost. To retain all information please use `partition`.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    } | undefined\n  ): Effect<Array<B>, Array<E>, R>\n  /**\n   * Feeds elements of type `A` to `f` and accumulates all errors in error\n   * channel or successes in success channel.\n   *\n   * This combinator is lossy meaning that if there are errors all successes\n   * will be lost. To retain all information please use `partition`.\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect<void, Array<E>, R>\n} = fiberRuntime.validateAll\n\n/**\n * Feeds elements of type `A` to `f` until it succeeds. Returns first success\n * or the accumulation of all errors.\n *\n * If `elements` is empty then `Effect.fail([])` is returned.\n *\n * @example\n * import { Effect, Exit } from \"effect\"\n *\n * const f = (n: number) => (n > 0 ? Effect.succeed(n) : Effect.fail(`${n} is negative`))\n *\n * assert.deepStrictEqual(Effect.runSyncExit(Effect.validateFirst([], f)), Exit.fail([]))\n * assert.deepStrictEqual(Effect.runSyncExit(Effect.validateFirst([1, 2], f)), Exit.succeed(1))\n * assert.deepStrictEqual(Effect.runSyncExit(Effect.validateFirst([1, -1], f)), Exit.succeed(1))\n * assert.deepStrictEqual(Effect.runSyncExit(Effect.validateFirst([-1, 2], f)), Exit.succeed(2))\n * assert.deepStrictEqual(Effect.runSyncExit(Effect.validateFirst([-1, -2], f)), Exit.fail(['-1 is negative', '-2 is negative']))\n *\n * @since 2.0.0\n * @category collecting & elements\n */\nexport const validateFirst: {\n  /**\n   * Feeds elements of type `A` to `f` until it succeeds. Returns first success\n   * or the accumulation of all errors.\n   *\n   * If `elements` is empty then `Effect.fail([])` is returned.\n   *\n   * @example\n   * import { Effect, Exit } from \"effect\"\n   *\n   * const f = (n: number) => (n > 0 ? Effect.succeed(n) : Effect.fail(`${n} is negative`))\n   *\n   * assert.deepStrictEqual(Effect.runSyncExit(Effect.validateFirst([], f)), Exit.fail([]))\n   * assert.deepStrictEqual(Effect.runSyncExit(Effect.validateFirst([1, 2], f)), Exit.succeed(1))\n   * assert.deepStrictEqual(Effect.runSyncExit(Effect.validateFirst([1, -1], f)), Exit.succeed(1))\n   * assert.deepStrictEqual(Effect.runSyncExit(Effect.validateFirst([-1, 2], f)), Exit.succeed(2))\n   * assert.deepStrictEqual(Effect.runSyncExit(Effect.validateFirst([-1, -2], f)), Exit.fail(['-1 is negative', '-2 is negative']))\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options?:\n      | {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): (elements: Iterable<A>) => Effect<B, Array<E>, R>\n  /**\n   * Feeds elements of type `A` to `f` until it succeeds. Returns first success\n   * or the accumulation of all errors.\n   *\n   * If `elements` is empty then `Effect.fail([])` is returned.\n   *\n   * @example\n   * import { Effect, Exit } from \"effect\"\n   *\n   * const f = (n: number) => (n > 0 ? Effect.succeed(n) : Effect.fail(`${n} is negative`))\n   *\n   * assert.deepStrictEqual(Effect.runSyncExit(Effect.validateFirst([], f)), Exit.fail([]))\n   * assert.deepStrictEqual(Effect.runSyncExit(Effect.validateFirst([1, 2], f)), Exit.succeed(1))\n   * assert.deepStrictEqual(Effect.runSyncExit(Effect.validateFirst([1, -1], f)), Exit.succeed(1))\n   * assert.deepStrictEqual(Effect.runSyncExit(Effect.validateFirst([-1, 2], f)), Exit.succeed(2))\n   * assert.deepStrictEqual(Effect.runSyncExit(Effect.validateFirst([-1, -2], f)), Exit.fail(['-1 is negative', '-2 is negative']))\n   *\n   * @since 2.0.0\n   * @category collecting & elements\n   */\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect<B, E, R>,\n    options?:\n      | {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): Effect<B, Array<E>, R>\n} = fiberRuntime.validateFirst\n\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n\n/**\n * Creates an `Effect` from a callback-based asynchronous API.\n *\n * Useful for integrating Node.js-style callback functions into the Effect system.\n *\n * The `resume` function **MUST** be called at most once.\n *\n * The `resume` function can optionally return an `Effect`, which will be\n * executed if the `Fiber` executing this `Effect` is interrupted.\n *\n * The `resume` function can also receive an `AbortSignal` if required for\n * interruption.\n *\n * The `FiberId` of the fiber that may complete the async callback may also be\n * specified. This is called the \"blocking fiber\" because it suspends the fiber\n * executing the `async` effect (i.e. semantically blocks the fiber from making\n * progress). Specifying this fiber id in cases where it is known will improve\n * diagnostics, but not affect the behavior of the returned effect.\n *\n * @example\n * import { Effect } from \"effect\"\n * import * as fs from \"fs\"\n *\n * // Wrapping a callback-based API using Effect.async\n * const readFile = (filename: string) => Effect.async<Buffer, Error>((resume) => {\n *   fs.readFile(filename, (error, data) => {\n *     if (error) {\n *       resume(Effect.fail(error))\n *     } else {\n *       resume(Effect.succeed(data))\n *     }\n *   });\n * });\n *\n * const program = readFile(\"todos.txt\")\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const async: <A, E = never, R = never>(\n  resume: (callback: (_: Effect<A, E, R>) => void, signal: AbortSignal) => void | Effect<void, never, R>,\n  blockingOn?: FiberId.FiberId\n) => Effect<A, E, R> = core.async\n\n/**\n * Converts an asynchronous, callback-style API into an `Effect`, which will\n * be executed asynchronously.\n *\n * With this variant, the registration function may return a an `Effect`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const asyncEffect: <A, E, R, R3, E2, R2>(\n  register: (callback: (_: Effect<A, E, R>) => void) => Effect<Effect<void, never, R3> | void, E2, R2>\n) => Effect<A, E | E2, R | R2 | R3> = _runtime.asyncEffect\n\n/**\n * Low level constructor that enables for custom stack tracing cutpoints.\n *\n * It is meant to be called with a bag of instructions that become available in the \"this\" of the effect.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * const throwingFunction = () => { throw new Error() }\n * const blowUp = Effect.custom(throwingFunction, function() {\n *   return Effect.succeed(this.effect_instruction_i0())\n * })\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const custom: {\n  /**\n   * Low level constructor that enables for custom stack tracing cutpoints.\n   *\n   * It is meant to be called with a bag of instructions that become available in the \"this\" of the effect.\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * const throwingFunction = () => { throw new Error() }\n   * const blowUp = Effect.custom(throwingFunction, function() {\n   *   return Effect.succeed(this.effect_instruction_i0())\n   * })\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <X, A, E, R>(i0: X, body: (this: { effect_instruction_i0: X }) => Effect<A, E, R>): Effect<A, E, R>\n  /**\n   * Low level constructor that enables for custom stack tracing cutpoints.\n   *\n   * It is meant to be called with a bag of instructions that become available in the \"this\" of the effect.\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * const throwingFunction = () => { throw new Error() }\n   * const blowUp = Effect.custom(throwingFunction, function() {\n   *   return Effect.succeed(this.effect_instruction_i0())\n   * })\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <X, Y, A, E, R>(\n    i0: X,\n    i1: Y,\n    body: (this: { effect_instruction_i0: X; effect_instruction_i1: Y }) => Effect<A, E, R>\n  ): Effect<A, E, R>\n  /**\n   * Low level constructor that enables for custom stack tracing cutpoints.\n   *\n   * It is meant to be called with a bag of instructions that become available in the \"this\" of the effect.\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * const throwingFunction = () => { throw new Error() }\n   * const blowUp = Effect.custom(throwingFunction, function() {\n   *   return Effect.succeed(this.effect_instruction_i0())\n   * })\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <X, Y, Z, A, E, R>(\n    i0: X,\n    i1: Y,\n    i2: Z,\n    body: (this: { effect_instruction_i0: X; effect_instruction_i1: Y; effect_instruction_i2: Z }) => Effect<A, E, R>\n  ): Effect<A, E, R>\n} = core.custom\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const withFiberRuntime: <A, E = never, R = never>(\n  withRuntime: (\n    fiber: Fiber.RuntimeFiber<A, E>,\n    status: FiberStatus.Running\n  ) => Effect<A, E, R>\n) => Effect<A, E, R> = core.withFiberRuntime\n\n/**\n * Creates an `Effect` that represents a recoverable error.\n *\n * This `Effect` does not succeed but instead fails with the provided error. The\n * failure can be of any type, and will propagate through the effect pipeline\n * unless handled.\n *\n * Use this function when you want to explicitly signal an error in an `Effect`\n * computation. The failed effect can later be handled with functions like\n * {@link catchAll} or {@link catchTag}.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * // Example of creating a failed effect\n * const failedEffect = Effect.fail(\"Something went wrong\")\n *\n * // Handle the failure\n * failedEffect.pipe(\n *   Effect.catchAll((error) => Effect.succeed(`Recovered from: ${error}`)),\n *   Effect.runPromise\n * ).then(console.log)\n * // Output: \"Recovered from: Something went wrong\"\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fail: <E>(error: E) => Effect<never, E> = core.fail\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const failSync: <E>(evaluate: LazyArg<E>) => Effect<never, E> = core.failSync\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const failCause: <E>(cause: Cause.Cause<E>) => Effect<never, E> = core.failCause\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const failCauseSync: <E>(evaluate: LazyArg<Cause.Cause<E>>) => Effect<never, E> = core.failCauseSync\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const die: (defect: unknown) => Effect<never> = core.die\n\n/**\n * Returns an effect that dies with a `RuntimeException` having the specified\n * text message. This method can be used for terminating a fiber because a\n * defect has been detected in the code.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const dieMessage: (message: string) => Effect<never> = core.dieMessage\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const dieSync: (evaluate: LazyArg<unknown>) => Effect<never> = core.dieSync\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const gen: {\n  /**\n   * @since 2.0.0\n   * @category constructors\n   */\n  <Eff extends YieldWrap<Effect<any, any, any>>, AEff>(f: (resume: Adapter) => Generator<Eff, AEff, never>): Effect<\n    AEff,\n    [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n    [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n  >\n  /**\n   * @since 2.0.0\n   * @category constructors\n   */\n  <Self, Eff extends YieldWrap<Effect<any, any, any>>, AEff>(\n    self: Self,\n    f: (this: Self, resume: Adapter) => Generator<Eff, AEff, never>\n  ): Effect<\n    AEff,\n    [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer E, infer _R>>] ? E : never,\n    [Eff] extends [never] ? never : [Eff] extends [YieldWrap<Effect<infer _A, infer _E, infer R>>] ? R : never\n  >\n} = effect.gen\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Adapter {\n  <A, E, R>(self: Effect<A, E, R>): Effect<A, E, R>\n  <A, _A, _E, _R>(a: A, ab: (a: A) => Effect<_A, _E, _R>): Effect<_A, _E, _R>\n  <A, B, _A, _E, _R>(a: A, ab: (a: A) => B, bc: (b: B) => Effect<_A, _E, _R>): Effect<_A, _E, _R>\n  <A, B, C, _A, _E, _R>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => Effect<_A, _E, _R>): Effect<_A, _E, _R>\n  <A, B, C, D, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (g: H) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => S,\n    st: (s: S) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, _A, _E, _R>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => S,\n    st: (s: S) => T,\n    tu: (s: T) => Effect<_A, _E, _R>\n  ): Effect<_A, _E, _R>\n}\n\n/**\n * Returns an effect that will never produce anything. The moral equivalent of\n * `while(true) {}`, only without the wasted CPU cycles.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const never: Effect<never> = core.never\n\n/**\n * Requires the option produced by this value to be `None`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const none: <A, E, R>(\n  self: Effect<Option.Option<A>, E, R>\n) => Effect<void, E | Cause.NoSuchElementException, R> = effect.none\n\n/**\n * Creates an `Effect` that represents an asynchronous computation guaranteed to succeed.\n *\n * The provided function (`thunk`) returns a `Promise` that should never reject.\n * If the `Promise` does reject, the rejection is treated as a defect.\n *\n * An optional `AbortSignal` can be provided to allow for interruption of the\n * wrapped `Promise` API.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * // Creating an effect that resolves after a delay\n * const delay = (message: string) => Effect.promise(() => new Promise((resolve) => {\n *   setTimeout(() => resolve(message), 2000)\n * }))\n *\n * const program = delay(\"Async operation completed successfully!\")\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const promise: <A>(\n  evaluate: (signal: AbortSignal) => PromiseLike<A>\n) => Effect<A> = effect.promise\n\n/**\n * Creates an `Effect` that succeeds with the provided value.\n *\n * Use this function to represent a successful computation that yields a value of type `A`.\n * The effect does not fail and does not require any environmental context.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * // Creating an effect that succeeds with the number 42\n * const success = Effect.succeed(42)\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeed: <A>(value: A) => Effect<A> = core.succeed\n\n/**\n * Returns an effect which succeeds with `None`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeedNone: Effect<Option.Option<never>> = effect.succeedNone\n\n/**\n * Returns an effect which succeeds with the value wrapped in a `Some`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeedSome: <A>(value: A) => Effect<Option.Option<A>> = effect.succeedSome\n\n/**\n * Creates an `Effect` that defers the creation of another effect until it is needed.\n *\n * Useful for lazy evaluation, handling circular dependencies, or avoiding eager execution in recursive functions.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * // Handling recursion without stack overflow\n * const fibonacci = (n: number): Effect.Effect<number> =>\n *   n < 2\n *     ? Effect.succeed(1)\n *     : Effect.zipWith(\n *         Effect.suspend(() => fibonacci(n - 1)),\n *         Effect.suspend(() => fibonacci(n - 2)),\n *         (a, b) => a + b\n *       )\n *\n * console.log(Effect.runSync(fibonacci(10))) // Output: 89\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const suspend: <A, E, R>(effect: LazyArg<Effect<A, E, R>>) => Effect<A, E, R> = core.suspend\n\n/**\n * Creates an `Effect` that represents a synchronous side-effectful computation.\n *\n * The provided function (`thunk`) should not throw errors; if it does, the error is treated as a defect.\n * Use `Effect.sync` when you are certain the operation will not fail.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * // Creating an effect that logs a message\n * const log = (message: string) => Effect.sync(() => {\n *   console.log(message) // side effect\n * })\n *\n * const program = log(\"Hello, World!\")\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const sync: <A>(thunk: LazyArg<A>) => Effect<A> = core.sync\n\nconst _void: Effect<void> = core.void\nexport {\n  /**\n   * @since 2.0.0\n   * @category constructors\n   */\n  _void as void\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const yieldNow: (options?: {\n  readonly priority?: number | undefined\n}) => Effect<void> = core.yieldNow\n\n// -------------------------------------------------------------------------------------\n// error handling\n// -------------------------------------------------------------------------------------\n\nconst _catch: {\n  <N extends keyof E, K extends E[N] & string, E, A1, E1, R1>(\n    discriminator: N,\n    options: { readonly failure: K; readonly onFailure: (error: Extract<E, { [n in N]: K }>) => Effect<A1, E1, R1> }\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A1 | A, E1 | Exclude<E, { [n in N]: K }>, R1 | R>\n  <A, E, R, N extends keyof E, K extends E[N] & string, A1, E1, R1>(\n    self: Effect<A, E, R>,\n    discriminator: N,\n    options: { readonly failure: K; readonly onFailure: (error: Extract<E, { [n in N]: K }>) => Effect<A1, E1, R1> }\n  ): Effect<A | A1, E1 | Exclude<E, { [n in N]: K }>, R | R1>\n} = effect._catch\n\nexport {\n  /**\n   * Recovers from specified error.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  _catch as catch\n}\n\n/**\n * Recovers from all recoverable errors.\n *\n * **Note**: that `Effect.catchAll` will not recover from unrecoverable defects. To\n * recover from both recoverable and unrecoverable errors use\n * `Effect.catchAllCause`.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchAll: {\n  /**\n   * Recovers from all recoverable errors.\n   *\n   * **Note**: that `Effect.catchAll` will not recover from unrecoverable defects. To\n   * recover from both recoverable and unrecoverable errors use\n   * `Effect.catchAllCause`.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <E, A2, E2, R2>(f: (e: E) => Effect<A2, E2, R2>): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2, R2 | R>\n  /**\n   * Recovers from all recoverable errors.\n   *\n   * **Note**: that `Effect.catchAll` will not recover from unrecoverable defects. To\n   * recover from both recoverable and unrecoverable errors use\n   * `Effect.catchAllCause`.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, A2, E2, R2>(self: Effect<A, E, R>, f: (e: E) => Effect<A2, E2, R2>): Effect<A2 | A, E2, R2 | R>\n} = core.catchAll\n\n/**\n * Recovers from both recoverable and unrecoverable errors.\n *\n * See `sandbox`, `mapErrorCause` for other functions that can\n * recover from defects.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchAllCause: {\n  /**\n   * Recovers from both recoverable and unrecoverable errors.\n   *\n   * See `sandbox`, `mapErrorCause` for other functions that can\n   * recover from defects.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <E, A2, E2, R2>(\n    f: (cause: Cause.Cause<E>) => Effect<A2, E2, R2>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2, R2 | R>\n  /**\n   * Recovers from both recoverable and unrecoverable errors.\n   *\n   * See `sandbox`, `mapErrorCause` for other functions that can\n   * recover from defects.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    f: (cause: Cause.Cause<E>) => Effect<A2, E2, R2>\n  ): Effect<A | A2, E2, R | R2>\n} = core.catchAllCause\n\n/**\n * Recovers from all defects with provided function.\n *\n * **WARNING**: There is no sensible way to recover from defects. This\n * method should be used only at the boundary between Effect and an external\n * system, to transmit information on a defect for diagnostic or explanatory\n * purposes.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchAllDefect: {\n  /**\n   * Recovers from all defects with provided function.\n   *\n   * **WARNING**: There is no sensible way to recover from defects. This\n   * method should be used only at the boundary between Effect and an external\n   * system, to transmit information on a defect for diagnostic or explanatory\n   * purposes.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A2, E2, R2>(\n    f: (defect: unknown) => Effect<A2, E2, R2>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2 | E, R2 | R>\n  /**\n   * Recovers from all defects with provided function.\n   *\n   * **WARNING**: There is no sensible way to recover from defects. This\n   * method should be used only at the boundary between Effect and an external\n   * system, to transmit information on a defect for diagnostic or explanatory\n   * purposes.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    f: (defect: unknown) => Effect<A2, E2, R2>\n  ): Effect<A | A2, E | E2, R | R2>\n} = effect.catchAllDefect\n\n/**\n * Recovers from errors that match the given predicate.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchIf: {\n  /**\n   * Recovers from errors that match the given predicate.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <E, EB extends E, A2, E2, R2>(\n    refinement: Refinement<NoInfer<E>, EB>,\n    f: (e: EB) => Effect<A2, E2, R2>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2 | Exclude<E, EB>, R2 | R>\n  /**\n   * Recovers from errors that match the given predicate.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <E, A2, E2, R2>(\n    predicate: Predicate<NoInfer<E>>,\n    f: (e: NoInfer<E>) => Effect<A2, E2, R2>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E | E2, R2 | R>\n  /**\n   * Recovers from errors that match the given predicate.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, EB extends E, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    refinement: Refinement<E, EB>,\n    f: (e: EB) => Effect<A2, E2, R2>\n  ): Effect<A | A2, E2 | Exclude<E, EB>, R | R2>\n  /**\n   * Recovers from errors that match the given predicate.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    predicate: Predicate<E>,\n    f: (e: E) => Effect<A2, E2, R2>\n  ): Effect<A | A2, E | E2, R | R2>\n} = core.catchIf\n\n/**\n * Recovers from some or all of the error cases.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchSome: {\n  /**\n   * Recovers from some or all of the error cases.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <E, A2, E2, R2>(\n    pf: (e: NoInfer<E>) => Option.Option<Effect<A2, E2, R2>>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E | E2, R2 | R>\n  /**\n   * Recovers from some or all of the error cases.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    pf: (e: NoInfer<E>) => Option.Option<Effect<A2, E2, R2>>\n  ): Effect<A | A2, E | E2, R | R2>\n} = core.catchSome\n\n/**\n * Recovers from some or all of the error cases with provided cause.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchSomeCause: {\n  /**\n   * Recovers from some or all of the error cases with provided cause.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <E, A2, E2, R2>(\n    f: (cause: Cause.Cause<NoInfer<E>>) => Option.Option<Effect<A2, E2, R2>>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E | E2, R2 | R>\n  /**\n   * Recovers from some or all of the error cases with provided cause.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    f: (cause: Cause.Cause<NoInfer<E>>) => Option.Option<Effect<A2, E2, R2>>\n  ): Effect<A2 | A, E | E2, R2 | R>\n} = effect.catchSomeCause\n\n/**\n * Recovers from some or all of the defects with provided partial function.\n *\n * **WARNING**: There is no sensible way to recover from defects. This\n * method should be used only at the boundary between Effect and an external\n * system, to transmit information on a defect for diagnostic or explanatory\n * purposes.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchSomeDefect: {\n  /**\n   * Recovers from some or all of the defects with provided partial function.\n   *\n   * **WARNING**: There is no sensible way to recover from defects. This\n   * method should be used only at the boundary between Effect and an external\n   * system, to transmit information on a defect for diagnostic or explanatory\n   * purposes.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A2, E2, R2>(\n    pf: (defect: unknown) => Option.Option<Effect<A2, E2, R2>>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2 | E, R2 | R>\n  /**\n   * Recovers from some or all of the defects with provided partial function.\n   *\n   * **WARNING**: There is no sensible way to recover from defects. This\n   * method should be used only at the boundary between Effect and an external\n   * system, to transmit information on a defect for diagnostic or explanatory\n   * purposes.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    pf: (defect: unknown) => Option.Option<Effect<A2, E2, R2>>\n  ): Effect<A | A2, E | E2, R | R2>\n} = effect.catchSomeDefect\n\n/**\n * Recovers from the specified tagged error.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchTag: {\n  /**\n   * Recovers from the specified tagged error.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <K extends E extends { _tag: string } ? E[\"_tag\"] : never, E, A1, E1, R1>(\n    k: K,\n    f: (e: NoInfer<Extract<E, { _tag: K }>>) => Effect<A1, E1, R1>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A1 | A, E1 | Exclude<E, { _tag: K }>, R1 | R>\n  /**\n   * Recovers from the specified tagged error.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, K extends E extends { _tag: string } ? E[\"_tag\"] : never, R1, E1, A1>(\n    self: Effect<A, E, R>,\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Effect<A1, E1, R1>\n  ): Effect<A | A1, E1 | Exclude<E, { _tag: K }>, R | R1>\n} = effect.catchTag\n\n/**\n * Recovers from the specified tagged errors.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchTags: {\n  /**\n   * Recovers from the specified tagged errors.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <\n    E,\n    Cases extends\n      & { [K in Extract<E, { _tag: string }>[\"_tag\"]]+?: ((error: Extract<E, { _tag: K }>) => Effect<any, any, any>) }\n      & (unknown extends E ? {} : { [K in Exclude<keyof Cases, Extract<E, { _tag: string }>[\"_tag\"]>]: never })\n  >(cases: Cases): <A, R>(\n    self: Effect<A, E, R>\n  ) => Effect<\n    | A\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect<infer A, any, any> ? A : never\n    }[keyof Cases],\n    | Exclude<E, { _tag: keyof Cases }>\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect<any, infer E, any> ? E : never\n    }[keyof Cases],\n    | R\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect<any, any, infer R> ? R : never\n    }[keyof Cases]\n  >\n  /**\n   * Recovers from the specified tagged errors.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <\n    R,\n    E,\n    A,\n    Cases extends\n      & { [K in Extract<E, { _tag: string }>[\"_tag\"]]+?: ((error: Extract<E, { _tag: K }>) => Effect<any, any, any>) }\n      & (unknown extends E ? {} : { [K in Exclude<keyof Cases, Extract<E, { _tag: string }>[\"_tag\"]>]: never })\n  >(self: Effect<A, E, R>, cases: Cases): Effect<\n    | A\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect<infer A, any, any> ? A : never\n    }[keyof Cases],\n    | Exclude<E, { _tag: keyof Cases }>\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect<any, infer E, any> ? E : never\n    }[keyof Cases],\n    | R\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect<any, any, infer R> ? R : never\n    }[keyof Cases]\n  >\n} = effect.catchTags\n\n/**\n * Returns an effect that succeeds with the cause of failure of this effect,\n * or `Cause.empty` if the effect did succeed.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const cause: <A, E, R>(self: Effect<A, E, R>) => Effect<Cause.Cause<E>, never, R> = effect.cause\n\n/**\n * Returns an effect that ignores errors and runs repeatedly until it\n * eventually succeeds.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const eventually: <A, E, R>(self: Effect<A, E, R>) => Effect<A, never, R> = effect.eventually\n\n/**\n * Returns a new effect that ignores the success or failure of this effect.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const ignore: <A, E, R>(self: Effect<A, E, R>) => Effect<void, never, R> = effect.ignore\n\n/**\n * Returns a new effect that ignores the success or failure of this effect,\n * but which also logs failures at the Debug level, just in case the failure\n * turns out to be important.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const ignoreLogged: <A, E, R>(self: Effect<A, E, R>) => Effect<void, never, R> = effect.ignoreLogged\n\n/**\n * Exposes all parallel errors in a single call.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const parallelErrors: <A, E, R>(self: Effect<A, E, R>) => Effect<A, Array<E>, R> = effect.parallelErrors\n\n/**\n * Exposes the full `Cause` of failure for the specified effect.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const sandbox: <A, E, R>(self: Effect<A, E, R>) => Effect<A, Cause.Cause<E>, R> = effect.sandbox\n\n/**\n * @since 2.0.0\n * @category error handling\n */\nexport declare namespace Retry {\n  /**\n   * @since 2.0.0\n   * @category error handling\n   */\n  export type Return<R, E, A, O extends Options<E>> = Effect<\n    A,\n    | (O extends { schedule: Schedule.Schedule<infer _O, infer _I, infer _R> } ? E\n      : O extends { until: Refinement<E, infer E2> } ? E2\n      : E)\n    | (O extends { while: (...args: Array<any>) => Effect<infer _A, infer E, infer _R> } ? E : never)\n    | (O extends { until: (...args: Array<any>) => Effect<infer _A, infer E, infer _R> } ? E : never),\n    | R\n    | (O extends { schedule: Schedule.Schedule<infer _O, infer _I, infer R> } ? R : never)\n    | (O extends { while: (...args: Array<any>) => Effect<infer _A, infer _E, infer R> } ? R : never)\n    | (O extends { until: (...args: Array<any>) => Effect<infer _A, infer _E, infer R> } ? R : never)\n  > extends infer Z ? Z : never\n\n  /**\n   * @since 2.0.0\n   * @category error handling\n   */\n  export interface Options<E> {\n    while?: ((error: E) => boolean | Effect<boolean, any, any>) | undefined\n    until?: ((error: E) => boolean | Effect<boolean, any, any>) | undefined\n    times?: number | undefined\n    schedule?: Schedule.Schedule<any, E, any> | undefined\n  }\n}\n\n/**\n * Retries according to the options provided\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const retry: {\n  /**\n   * Retries according to the options provided\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <E, O extends Retry.Options<E>>(options: O): <A, R>(\n    self: Effect<A, E, R>\n  ) => Retry.Return<R, E, A, O>\n  /**\n   * Retries according to the options provided\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <B, E, R1>(policy: Schedule.Schedule<B, NoInfer<E>, R1>): <A, R>(self: Effect<A, E, R>) => Effect<A, E, R1 | R>\n  /**\n   * Retries according to the options provided\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, O extends Retry.Options<E>>(self: Effect<A, E, R>, options: O): Retry.Return<R, E, A, O>\n  /**\n   * Retries according to the options provided\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, B, R1>(self: Effect<A, E, R>, policy: Schedule.Schedule<B, E, R1>): Effect<A, E, R1 | R>\n} = _schedule.retry_combined\n\n/**\n * Retries with the specified schedule, until it fails, and then both the\n * value produced by the schedule together with the last error are passed to\n * the recovery function.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const retryOrElse: {\n  /**\n   * Retries with the specified schedule, until it fails, and then both the\n   * value produced by the schedule together with the last error are passed to\n   * the recovery function.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A1, E, R1, A2, E2, R2>(\n    policy: Schedule.Schedule<A1, NoInfer<E>, R1>,\n    orElse: (e: NoInfer<E>, out: A1) => Effect<A2, E2, R2>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2, R1 | R2 | R>\n  /**\n   * Retries with the specified schedule, until it fails, and then both the\n   * value produced by the schedule together with the last error are passed to\n   * the recovery function.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, A1, R1, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    policy: Schedule.Schedule<A1, NoInfer<E>, R1>,\n    orElse: (e: NoInfer<E>, out: A1) => Effect<A2, E2, R2>\n  ): Effect<A | A2, E2, R | R1 | R2>\n} = _schedule.retryOrElse_Effect\n\nconst try_: {\n  <A, E>(options: { readonly try: LazyArg<A>; readonly catch: (error: unknown) => E }): Effect<A, E>\n  <A>(thunk: LazyArg<A>): Effect<A, Cause.UnknownException>\n} = effect.try_\n\nexport {\n  /**\n   * Creates an `Effect` that represents a synchronous computation that might fail.\n   *\n   * If the function (`thunk`) throws an error, it is caught and the effect fails with an `UnknownException`.\n   *\n   * **Overload with custom error handling:**\n   *\n   * Creates an `Effect` that represents a synchronous computation that might fail, with custom error mapping.\n   *\n   * If the `try` function throws an error, the `catch` function maps it to an error of type `E`.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  try_ as try\n}\n\n/**\n * Returns an effect whose success is mapped by the specified side effecting\n * `try` function, translating any promise rejections into typed failed effects\n * via the `catch` function.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const tryMap: {\n  /**\n   * Returns an effect whose success is mapped by the specified side effecting\n   * `try` function, translating any promise rejections into typed failed effects\n   * via the `catch` function.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, B, E1>(\n    options: { readonly try: (a: A) => B; readonly catch: (error: unknown) => E1 }\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, E1 | E, R>\n  /**\n   * Returns an effect whose success is mapped by the specified side effecting\n   * `try` function, translating any promise rejections into typed failed effects\n   * via the `catch` function.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, B, E1>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly try: (a: A) => B\n      readonly catch: (error: unknown) => E1\n    }\n  ): Effect<B, E | E1, R>\n} = effect.tryMap\n\n/**\n * Returns an effect whose success is mapped by the specified side effecting\n * `try` function, translating any promise rejections into typed failed effects\n * via the `catch` function.\n *\n * An optional `AbortSignal` can be provided to allow for interruption of the\n * wrapped `Promise` API.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const tryMapPromise: {\n  /**\n   * Returns an effect whose success is mapped by the specified side effecting\n   * `try` function, translating any promise rejections into typed failed effects\n   * via the `catch` function.\n   *\n   * An optional `AbortSignal` can be provided to allow for interruption of the\n   * wrapped `Promise` API.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, B, E1>(\n    options: { readonly try: (a: A, signal: AbortSignal) => PromiseLike<B>; readonly catch: (error: unknown) => E1 }\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, E1 | E, R>\n  /**\n   * Returns an effect whose success is mapped by the specified side effecting\n   * `try` function, translating any promise rejections into typed failed effects\n   * via the `catch` function.\n   *\n   * An optional `AbortSignal` can be provided to allow for interruption of the\n   * wrapped `Promise` API.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, B, E1>(\n    self: Effect<A, E, R>,\n    options: { readonly try: (a: A, signal: AbortSignal) => PromiseLike<B>; readonly catch: (error: unknown) => E1 }\n  ): Effect<B, E | E1, R>\n} = effect.tryMapPromise\n\n/**\n * Creates an `Effect` that represents an asynchronous computation that might fail.\n *\n * If the `Promise` returned by `evaluate` rejects, the error is caught and the effect fails with an `UnknownException`.\n *\n * An optional `AbortSignal` can be provided to allow for interruption of the\n * wrapped `Promise` API.\n *\n * **Overload with custom error handling:**\n *\n * Creates an `Effect` that represents an asynchronous computation that might fail, with custom error mapping.\n *\n * If the `Promise` rejects, the `catch` function maps the error to an error of type `E`.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * // Fetching data from an API that may fail\n * const getTodo = (id: number) => Effect.tryPromise(() =>\n *   fetch(`https://jsonplaceholder.typicode.com/todos/${id}`)\n * )\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const tryPromise: {\n  /**\n   * Creates an `Effect` that represents an asynchronous computation that might fail.\n   *\n   * If the `Promise` returned by `evaluate` rejects, the error is caught and the effect fails with an `UnknownException`.\n   *\n   * An optional `AbortSignal` can be provided to allow for interruption of the\n   * wrapped `Promise` API.\n   *\n   * **Overload with custom error handling:**\n   *\n   * Creates an `Effect` that represents an asynchronous computation that might fail, with custom error mapping.\n   *\n   * If the `Promise` rejects, the `catch` function maps the error to an error of type `E`.\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * // Fetching data from an API that may fail\n   * const getTodo = (id: number) => Effect.tryPromise(() =>\n   *   fetch(`https://jsonplaceholder.typicode.com/todos/${id}`)\n   * )\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E>(\n    options: {\n      readonly try: (signal: AbortSignal) => PromiseLike<A>\n      readonly catch: (error: unknown) => E\n    }\n  ): Effect<A, E>\n  /**\n   * Creates an `Effect` that represents an asynchronous computation that might fail.\n   *\n   * If the `Promise` returned by `evaluate` rejects, the error is caught and the effect fails with an `UnknownException`.\n   *\n   * An optional `AbortSignal` can be provided to allow for interruption of the\n   * wrapped `Promise` API.\n   *\n   * **Overload with custom error handling:**\n   *\n   * Creates an `Effect` that represents an asynchronous computation that might fail, with custom error mapping.\n   *\n   * If the `Promise` rejects, the `catch` function maps the error to an error of type `E`.\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * // Fetching data from an API that may fail\n   * const getTodo = (id: number) => Effect.tryPromise(() =>\n   *   fetch(`https://jsonplaceholder.typicode.com/todos/${id}`)\n   * )\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A>(evaluate: (signal: AbortSignal) => PromiseLike<A>): Effect<A, Cause.UnknownException>\n} = effect.tryPromise\n\n/**\n * The inverse operation `sandbox(effect)`\n *\n * Terminates with exceptions on the `Left` side of the `Either` error, if it\n * exists. Otherwise extracts the contained `Effect<A, E, R>`\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const unsandbox: <A, E, R>(self: Effect<A, Cause.Cause<E>, R>) => Effect<A, E, R> = effect.unsandbox\n\n// -------------------------------------------------------------------------------------\n// interuption\n// -------------------------------------------------------------------------------------\n\n/**\n * This function checks if any fibers are attempting to interrupt the current\n * fiber, and if so, performs self-interruption.\n *\n * Note that this allows for interruption to occur in uninterruptible regions.\n *\n * @returns A new `Effect` value that represents the check for interruption\n * and the potential self-interruption of the current fiber.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const allowInterrupt: Effect<void> = effect.allowInterrupt\n\n/**\n * Checks the interrupt status, and produces the effect returned by the\n * specified callback.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const checkInterruptible: <A, E, R>(f: (isInterruptible: boolean) => Effect<A, E, R>) => Effect<A, E, R> =\n  core.checkInterruptible\n\n/**\n * Returns an effect whose interruption will be disconnected from the\n * fiber's own interruption, being performed in the background without\n * slowing down the fiber's interruption.\n *\n * This method is useful to create \"fast interrupting\" effects. For\n * example, if you call this on a bracketed effect, then even if the\n * effect is \"stuck\" in acquire or release, its interruption will return\n * immediately, while the acquire / release are performed in the\n * background.\n *\n * See timeout and race for other applications.\n *\n * @since 2.0.0\n * @category interruption\n */\nexport const disconnect: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> = fiberRuntime.disconnect\n\n/**\n * @since 2.0.0\n * @category interruption\n */\nexport const interrupt: Effect<never> = core.interrupt\n\n/**\n * @since 2.0.0\n * @category interruption\n */\nexport const interruptWith: (fiberId: FiberId.FiberId) => Effect<never> = core.interruptWith\n\n/**\n * @since 2.0.0\n * @category interruption\n */\nexport const interruptible: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> = core.interruptible\n\n/**\n * @since 2.0.0\n * @category interruption\n */\nexport const interruptibleMask: <A, E, R>(\n  f: (restore: <AX, EX, RX>(effect: Effect<AX, EX, RX>) => Effect<AX, EX, RX>) => Effect<A, E, R>\n) => Effect<A, E, R> = core.interruptibleMask\n\n/**\n * @since 2.0.0\n * @category interruption\n */\nexport const onInterrupt: {\n  /**\n   * @since 2.0.0\n   * @category interruption\n   */\n  <X, R2>(\n    cleanup: (interruptors: HashSet.HashSet<FiberId.FiberId>) => Effect<X, never, R2>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R2 | R>\n  /**\n   * @since 2.0.0\n   * @category interruption\n   */\n  <A, E, R, X, R2>(\n    self: Effect<A, E, R>,\n    cleanup: (interruptors: HashSet.HashSet<FiberId.FiberId>) => Effect<X, never, R2>\n  ): Effect<A, E, R | R2>\n} = core.onInterrupt\n\n/**\n * @since 2.0.0\n * @category interruption\n */\nexport const uninterruptible: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> = core.uninterruptible\n\n/**\n * @since 2.0.0\n * @category interruption\n */\nexport const uninterruptibleMask: <A, E, R>(\n  f: (restore: <AX, EX, RX>(effect: Effect<AX, EX, RX>) => Effect<AX, EX, RX>) => Effect<A, E, R>\n) => Effect<A, E, R> = core.uninterruptibleMask\n\n// -------------------------------------------------------------------------------------\n// lifting\n// -------------------------------------------------------------------------------------\n\n/**\n * Transforms a `Predicate` function into an `Effect` returning the input value if the predicate returns `true`\n * or failing with specified error if the predicate fails\n *\n * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * const isPositive = (n: number): boolean => n > 0\n *\n * // succeeds with `1`\n * Effect.liftPredicate(1, isPositive, n => `${n} is not positive`)\n *\n * // fails with `\"0 is not positive\"`\n * Effect.liftPredicate(0, isPositive, n => `${n} is not positive`)\n *\n * @category lifting\n * @since 3.4.0\n */\nexport const liftPredicate: {\n  // -------------------------------------------------------------------------------------\n  // lifting\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * Transforms a `Predicate` function into an `Effect` returning the input value if the predicate returns `true`\n   * or failing with specified error if the predicate fails\n   *\n   * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   *\n   * // succeeds with `1`\n   * Effect.liftPredicate(1, isPositive, n => `${n} is not positive`)\n   *\n   * // fails with `\"0 is not positive\"`\n   * Effect.liftPredicate(0, isPositive, n => `${n} is not positive`)\n   *\n   * @category lifting\n   * @since 3.4.0\n   */\n  <A, B extends A, E>(refinement: Refinement<NoInfer<A>, B>, orFailWith: (a: NoInfer<A>) => E): (a: A) => Effect<B, E>\n  // -------------------------------------------------------------------------------------\n  // lifting\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * Transforms a `Predicate` function into an `Effect` returning the input value if the predicate returns `true`\n   * or failing with specified error if the predicate fails\n   *\n   * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   *\n   * // succeeds with `1`\n   * Effect.liftPredicate(1, isPositive, n => `${n} is not positive`)\n   *\n   * // fails with `\"0 is not positive\"`\n   * Effect.liftPredicate(0, isPositive, n => `${n} is not positive`)\n   *\n   * @category lifting\n   * @since 3.4.0\n   */\n  <A, E>(predicate: Predicate<NoInfer<A>>, orFailWith: (a: NoInfer<A>) => E): (a: A) => Effect<A, E>\n  // -------------------------------------------------------------------------------------\n  // lifting\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * Transforms a `Predicate` function into an `Effect` returning the input value if the predicate returns `true`\n   * or failing with specified error if the predicate fails\n   *\n   * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   *\n   * // succeeds with `1`\n   * Effect.liftPredicate(1, isPositive, n => `${n} is not positive`)\n   *\n   * // fails with `\"0 is not positive\"`\n   * Effect.liftPredicate(0, isPositive, n => `${n} is not positive`)\n   *\n   * @category lifting\n   * @since 3.4.0\n   */\n  <A, E, B extends A>(self: A, refinement: Refinement<A, B>, orFailWith: (a: A) => E): Effect<B, E>\n  // -------------------------------------------------------------------------------------\n  // lifting\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * Transforms a `Predicate` function into an `Effect` returning the input value if the predicate returns `true`\n   * or failing with specified error if the predicate fails\n   *\n   * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   *\n   * // succeeds with `1`\n   * Effect.liftPredicate(1, isPositive, n => `${n} is not positive`)\n   *\n   * // fails with `\"0 is not positive\"`\n   * Effect.liftPredicate(0, isPositive, n => `${n} is not positive`)\n   *\n   * @category lifting\n   * @since 3.4.0\n   */\n  <A, E>(\n    self: A,\n    predicate: Predicate<NoInfer<A>>,\n    orFailWith: (a: NoInfer<A>) => E\n  ): Effect<A, E>\n} = effect.liftPredicate\n\n// -------------------------------------------------------------------------------------\n// mapping\n// -------------------------------------------------------------------------------------\n\n/**\n * This function maps the success value of an `Effect` value to a specified\n * constant value.\n *\n * @param value - The constant value that the success value of the `Effect`\n * value will be mapped to.\n * @param self - The `Effect` value whose success value will be mapped to the\n * specified constant value.\n *\n * @returns A new `Effect` value that represents the mapping of the success\n * value of the original `Effect` value to the specified constant value.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const as: {\n  // -------------------------------------------------------------------------------------\n  // mapping\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * This function maps the success value of an `Effect` value to a specified\n   * constant value.\n   *\n   * @param value - The constant value that the success value of the `Effect`\n   * value will be mapped to.\n   * @param self - The `Effect` value whose success value will be mapped to the\n   * specified constant value.\n   *\n   * @returns A new `Effect` value that represents the mapping of the success\n   * value of the original `Effect` value to the specified constant value.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <B>(value: B): <A, E, R>(self: Effect<A, E, R>) => Effect<B, E, R>\n  // -------------------------------------------------------------------------------------\n  // mapping\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * This function maps the success value of an `Effect` value to a specified\n   * constant value.\n   *\n   * @param value - The constant value that the success value of the `Effect`\n   * value will be mapped to.\n   * @param self - The `Effect` value whose success value will be mapped to the\n   * specified constant value.\n   *\n   * @returns A new `Effect` value that represents the mapping of the success\n   * value of the original `Effect` value to the specified constant value.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, R, B>(self: Effect<A, E, R>, value: B): Effect<B, E, R>\n} = core.as\n\n/**\n * This function maps the success value of an `Effect` value to a `Some` value\n * in an `Option` value. If the original `Effect` value fails, the returned\n * `Effect` value will also fail.\n *\n * @param self - The `Effect` value whose success value will be mapped to a\n * `Some` value in an `Option` value.\n *\n * @returns A new `Effect` value that represents the mapping of the success\n * value of the original `Effect` value to a `Some` value in an `Option`\n * value. The returned `Effect` value may fail if the original `Effect` value\n * fails.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const asSome: <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, E, R> = effect.asSome\n\n/**\n * This function maps the error value of an `Effect` value to a `Some` value\n * in an `Option` value. If the original `Effect` value succeeds, the returned\n * `Effect` value will also succeed.\n *\n * @param self - The `Effect` value whose error value will be mapped to a\n * `Some` value in an `Option` value.\n *\n * @returns A new `Effect` value that represents the mapping of the error\n * value of the original `Effect` value to a `Some` value in an `Option`\n * value. The returned `Effect` value may succeed if the original `Effect`\n * value succeeds.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const asSomeError: <A, E, R>(self: Effect<A, E, R>) => Effect<A, Option.Option<E>, R> = effect.asSomeError\n\n/**\n * This function maps the success value of an `Effect` value to `void`. If the\n * original `Effect` value succeeds, the returned `Effect` value will also\n * succeed. If the original `Effect` value fails, the returned `Effect` value\n * will fail with the same error.\n *\n * @param self - The `Effect` value whose success value will be mapped to `void`.\n *\n * @returns A new `Effect` value that represents the mapping of the success\n * value of the original `Effect` value to `void`.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const asVoid: <A, E, R>(self: Effect<A, E, R>) => Effect<void, E, R> = core.asVoid\n\n/**\n * Returns an effect that swaps the error/success cases. This allows you to\n * use all methods on the error channel, possibly before flipping back.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const flip: <A, E, R>(self: Effect<A, E, R>) => Effect<E, A, R> = core.flip\n\n/**\n * Swaps the error/value parameters, applies the function `f` and flips the\n * parameters back\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const flipWith: {\n  /**\n   * Swaps the error/value parameters, applies the function `f` and flips the\n   * parameters back\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <E, A, R, E2, A2, R2>(\n    f: (effect: Effect<E, A, R>) => Effect<E2, A2, R2>\n  ): (self: Effect<A, E, R>) => Effect<A2, E2, R2>\n  /**\n   * Swaps the error/value parameters, applies the function `f` and flips the\n   * parameters back\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, R, E2, A2, R2>(self: Effect<A, E, R>, f: (effect: Effect<E, A, R>) => Effect<E2, A2, R2>): Effect<A2, E2, R2>\n} = effect.flipWith\n\n/**\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  /**\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, B>(f: (a: A) => B): <E, R>(self: Effect<A, E, R>) => Effect<B, E, R>\n  /**\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, R, B>(self: Effect<A, E, R>, f: (a: A) => B): Effect<B, E, R>\n} = core.map\n\n/**\n * Statefully and effectfully maps over the elements of this chunk to produce\n * new elements.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapAccum: {\n  /**\n   * Statefully and effectfully maps over the elements of this chunk to produce\n   * new elements.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <S, A, B, E, R, I extends Iterable<A> = Iterable<A>>(\n    zero: S,\n    f: (s: S, a: RA.ReadonlyArray.Infer<I>, i: number) => Effect<readonly [S, B], E, R>\n  ): (elements: I) => Effect<[S, RA.ReadonlyArray.With<I, B>], E, R>\n  /**\n   * Statefully and effectfully maps over the elements of this chunk to produce\n   * new elements.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, S, B, E, R, I extends Iterable<A> = Iterable<A>>(\n    elements: I,\n    zero: S,\n    f: (s: S, a: RA.ReadonlyArray.Infer<I>, i: number) => Effect<readonly [S, B], E, R>\n  ): Effect<[S, RA.ReadonlyArray.With<I, B>], E, R>\n} = effect.mapAccum\n\n/**\n * Returns an effect whose failure and success channels have been mapped by\n * the specified `onFailure` and `onSuccess` functions.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapBoth: {\n  /**\n   * Returns an effect whose failure and success channels have been mapped by\n   * the specified `onFailure` and `onSuccess` functions.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <E, E2, A, A2>(\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): <R>(self: Effect<A, E, R>) => Effect<A2, E2, R>\n  /**\n   * Returns an effect whose failure and success channels have been mapped by\n   * the specified `onFailure` and `onSuccess` functions.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, R, E2, A2>(\n    self: Effect<A, E, R>,\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): Effect<A2, E2, R>\n} = core.mapBoth\n\n/**\n * Returns an effect with its error channel mapped using the specified function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapError: {\n  /**\n   * Returns an effect with its error channel mapped using the specified function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <E, E2>(f: (e: E) => E2): <A, R>(self: Effect<A, E, R>) => Effect<A, E2, R>\n  /**\n   * Returns an effect with its error channel mapped using the specified function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, R, E2>(self: Effect<A, E, R>, f: (e: E) => E2): Effect<A, E2, R>\n} = core.mapError\n\n/**\n * Returns an effect with its full cause of failure mapped using the specified\n * function. This can be used to transform errors while preserving the\n * original structure of `Cause`.\n *\n * See `sandbox`, `catchAllCause` for other functions for dealing\n * with defects.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapErrorCause: {\n  /**\n   * Returns an effect with its full cause of failure mapped using the specified\n   * function. This can be used to transform errors while preserving the\n   * original structure of `Cause`.\n   *\n   * See `sandbox`, `catchAllCause` for other functions for dealing\n   * with defects.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <E, E2>(f: (cause: Cause.Cause<E>) => Cause.Cause<E2>): <A, R>(self: Effect<A, E, R>) => Effect<A, E2, R>\n  /**\n   * Returns an effect with its full cause of failure mapped using the specified\n   * function. This can be used to transform errors while preserving the\n   * original structure of `Cause`.\n   *\n   * See `sandbox`, `catchAllCause` for other functions for dealing\n   * with defects.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, R, E2>(self: Effect<A, E, R>, f: (cause: Cause.Cause<E>) => Cause.Cause<E2>): Effect<A, E2, R>\n} = effect.mapErrorCause\n\n/**\n * Returns a new effect where the error channel has been merged into the\n * success channel to their common combined type.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const merge: <A, E, R>(self: Effect<A, E, R>) => Effect<E | A, never, R> = effect.merge\n\n/**\n * Returns a new effect where boolean value of this effect is negated.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const negate: <E, R>(self: Effect<boolean, E, R>) => Effect<boolean, E, R> = effect.negate\n\n// -------------------------------------------------------------------------------------\n// scoping, resources & finalization\n// -------------------------------------------------------------------------------------\n\n/**\n * This function constructs a scoped resource from an `acquire` and `release`\n * `Effect` value.\n *\n * If the `acquire` `Effect` value successfully completes execution, then the\n * `release` `Effect` value will be added to the finalizers associated with the\n * scope of this `Effect` value, and it is guaranteed to be run when the scope\n * is closed.\n *\n * The `acquire` and `release` `Effect` values will be run uninterruptibly.\n * Additionally, the `release` `Effect` value may depend on the `Exit` value\n * specified when the scope is closed.\n *\n * @param acquire - The `Effect` value that acquires the resource.\n * @param release - The `Effect` value that releases the resource.\n *\n * @returns A new `Effect` value that represents the scoped resource.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const acquireRelease: {\n  // -------------------------------------------------------------------------------------\n  // scoping, resources & finalization\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * This function constructs a scoped resource from an `acquire` and `release`\n   * `Effect` value.\n   *\n   * If the `acquire` `Effect` value successfully completes execution, then the\n   * `release` `Effect` value will be added to the finalizers associated with the\n   * scope of this `Effect` value, and it is guaranteed to be run when the scope\n   * is closed.\n   *\n   * The `acquire` and `release` `Effect` values will be run uninterruptibly.\n   * Additionally, the `release` `Effect` value may depend on the `Exit` value\n   * specified when the scope is closed.\n   *\n   * @param acquire - The `Effect` value that acquires the resource.\n   * @param release - The `Effect` value that releases the resource.\n   *\n   * @returns A new `Effect` value that represents the scoped resource.\n   *\n   * @since 2.0.0\n   * @category scoping, resources & finalization\n   */\n  <A, X, R2>(\n    release: (a: A, exit: Exit.Exit<unknown, unknown>) => Effect<X, never, R2>\n  ): <E, R>(acquire: Effect<A, E, R>) => Effect<A, E, Scope.Scope | R2 | R>\n  // -------------------------------------------------------------------------------------\n  // scoping, resources & finalization\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * This function constructs a scoped resource from an `acquire` and `release`\n   * `Effect` value.\n   *\n   * If the `acquire` `Effect` value successfully completes execution, then the\n   * `release` `Effect` value will be added to the finalizers associated with the\n   * scope of this `Effect` value, and it is guaranteed to be run when the scope\n   * is closed.\n   *\n   * The `acquire` and `release` `Effect` values will be run uninterruptibly.\n   * Additionally, the `release` `Effect` value may depend on the `Exit` value\n   * specified when the scope is closed.\n   *\n   * @param acquire - The `Effect` value that acquires the resource.\n   * @param release - The `Effect` value that releases the resource.\n   *\n   * @returns A new `Effect` value that represents the scoped resource.\n   *\n   * @since 2.0.0\n   * @category scoping, resources & finalization\n   */\n  <A, E, R, X, R2>(\n    acquire: Effect<A, E, R>,\n    release: (a: A, exit: Exit.Exit<unknown, unknown>) => Effect<X, never, R2>\n  ): Effect<A, E, Scope.Scope | R | R2>\n} = fiberRuntime.acquireRelease\n\n/**\n * This function constructs a scoped resource from an `acquire` and `release`\n * `Effect` value.\n *\n * If the `acquire` `Effect` value successfully completes execution, then the\n * `release` `Effect` value will be added to the finalizers associated with the\n * scope of this `Effect` value, and it is guaranteed to be run when the scope\n * is closed.\n *\n * The `acquire` `Effect` values will be run interruptibly.\n * The `release` `Effect` values will be run uninterruptibly.\n *\n * Additionally, the `release` `Effect` value may depend on the `Exit` value\n * specified when the scope is closed.\n *\n * @param acquire - The `Effect` value that acquires the resource.\n * @param release - The `Effect` value that releases the resource.\n *\n * @returns A new `Effect` value that represents the scoped resource.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const acquireReleaseInterruptible: {\n  /**\n   * This function constructs a scoped resource from an `acquire` and `release`\n   * `Effect` value.\n   *\n   * If the `acquire` `Effect` value successfully completes execution, then the\n   * `release` `Effect` value will be added to the finalizers associated with the\n   * scope of this `Effect` value, and it is guaranteed to be run when the scope\n   * is closed.\n   *\n   * The `acquire` `Effect` values will be run interruptibly.\n   * The `release` `Effect` values will be run uninterruptibly.\n   *\n   * Additionally, the `release` `Effect` value may depend on the `Exit` value\n   * specified when the scope is closed.\n   *\n   * @param acquire - The `Effect` value that acquires the resource.\n   * @param release - The `Effect` value that releases the resource.\n   *\n   * @returns A new `Effect` value that represents the scoped resource.\n   *\n   * @since 2.0.0\n   * @category scoping, resources & finalization\n   */\n  <X, R2>(\n    release: (exit: Exit.Exit<unknown, unknown>) => Effect<X, never, R2>\n  ): <A, E, R>(acquire: Effect<A, E, R>) => Effect<A, E, Scope.Scope | R2 | R>\n  /**\n   * This function constructs a scoped resource from an `acquire` and `release`\n   * `Effect` value.\n   *\n   * If the `acquire` `Effect` value successfully completes execution, then the\n   * `release` `Effect` value will be added to the finalizers associated with the\n   * scope of this `Effect` value, and it is guaranteed to be run when the scope\n   * is closed.\n   *\n   * The `acquire` `Effect` values will be run interruptibly.\n   * The `release` `Effect` values will be run uninterruptibly.\n   *\n   * Additionally, the `release` `Effect` value may depend on the `Exit` value\n   * specified when the scope is closed.\n   *\n   * @param acquire - The `Effect` value that acquires the resource.\n   * @param release - The `Effect` value that releases the resource.\n   *\n   * @returns A new `Effect` value that represents the scoped resource.\n   *\n   * @since 2.0.0\n   * @category scoping, resources & finalization\n   */\n  <A, E, R, X, R2>(\n    acquire: Effect<A, E, R>,\n    release: (exit: Exit.Exit<unknown, unknown>) => Effect<X, never, R2>\n  ): Effect<A, E, Scope.Scope | R | R2>\n} = fiberRuntime.acquireReleaseInterruptible\n\n/**\n * This function is used to ensure that an `Effect` value that represents the\n * acquisition of a resource (for example, opening a file, launching a thread,\n * etc.) will not be interrupted, and that the resource will always be released\n * when the `Effect` value completes execution.\n *\n * `acquireUseRelease` does the following:\n *\n *   1. Ensures that the `Effect` value that acquires the resource will not be\n *      interrupted. Note that acquisition may still fail due to internal\n *      reasons (such as an uncaught exception).\n *   2. Ensures that the `release` `Effect` value will not be interrupted,\n *      and will be executed as long as the acquisition `Effect` value\n *      successfully acquires the resource.\n *\n * During the time period between the acquisition and release of the resource,\n * the `use` `Effect` value will be executed.\n *\n * If the `release` `Effect` value fails, then the entire `Effect` value will\n * fail, even if the `use` `Effect` value succeeds. If this fail-fast behavior\n * is not desired, errors produced by the `release` `Effect` value can be caught\n * and ignored.\n *\n * @param acquire - The `Effect` value that acquires the resource.\n * @param use - The `Effect` value that is executed between the acquisition\n * and release of the resource.\n * @param release - The `Effect` value that releases the resource.\n *\n * @returns A new `Effect` value that represents the acquisition, use, and\n * release of the resource.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const acquireUseRelease: {\n  /**\n   * This function is used to ensure that an `Effect` value that represents the\n   * acquisition of a resource (for example, opening a file, launching a thread,\n   * etc.) will not be interrupted, and that the resource will always be released\n   * when the `Effect` value completes execution.\n   *\n   * `acquireUseRelease` does the following:\n   *\n   *   1. Ensures that the `Effect` value that acquires the resource will not be\n   *      interrupted. Note that acquisition may still fail due to internal\n   *      reasons (such as an uncaught exception).\n   *   2. Ensures that the `release` `Effect` value will not be interrupted,\n   *      and will be executed as long as the acquisition `Effect` value\n   *      successfully acquires the resource.\n   *\n   * During the time period between the acquisition and release of the resource,\n   * the `use` `Effect` value will be executed.\n   *\n   * If the `release` `Effect` value fails, then the entire `Effect` value will\n   * fail, even if the `use` `Effect` value succeeds. If this fail-fast behavior\n   * is not desired, errors produced by the `release` `Effect` value can be caught\n   * and ignored.\n   *\n   * @param acquire - The `Effect` value that acquires the resource.\n   * @param use - The `Effect` value that is executed between the acquisition\n   * and release of the resource.\n   * @param release - The `Effect` value that releases the resource.\n   *\n   * @returns A new `Effect` value that represents the acquisition, use, and\n   * release of the resource.\n   *\n   * @since 2.0.0\n   * @category scoping, resources & finalization\n   */\n  <A2, E2, R2, A, X, R3>(\n    use: (a: A) => Effect<A2, E2, R2>,\n    release: (a: A, exit: Exit.Exit<A2, E2>) => Effect<X, never, R3>\n  ): <E, R>(acquire: Effect<A, E, R>) => Effect<A2, E2 | E, R2 | R3 | R>\n  /**\n   * This function is used to ensure that an `Effect` value that represents the\n   * acquisition of a resource (for example, opening a file, launching a thread,\n   * etc.) will not be interrupted, and that the resource will always be released\n   * when the `Effect` value completes execution.\n   *\n   * `acquireUseRelease` does the following:\n   *\n   *   1. Ensures that the `Effect` value that acquires the resource will not be\n   *      interrupted. Note that acquisition may still fail due to internal\n   *      reasons (such as an uncaught exception).\n   *   2. Ensures that the `release` `Effect` value will not be interrupted,\n   *      and will be executed as long as the acquisition `Effect` value\n   *      successfully acquires the resource.\n   *\n   * During the time period between the acquisition and release of the resource,\n   * the `use` `Effect` value will be executed.\n   *\n   * If the `release` `Effect` value fails, then the entire `Effect` value will\n   * fail, even if the `use` `Effect` value succeeds. If this fail-fast behavior\n   * is not desired, errors produced by the `release` `Effect` value can be caught\n   * and ignored.\n   *\n   * @param acquire - The `Effect` value that acquires the resource.\n   * @param use - The `Effect` value that is executed between the acquisition\n   * and release of the resource.\n   * @param release - The `Effect` value that releases the resource.\n   *\n   * @returns A new `Effect` value that represents the acquisition, use, and\n   * release of the resource.\n   *\n   * @since 2.0.0\n   * @category scoping, resources & finalization\n   */\n  <A, E, R, A2, E2, R2, X, R3>(\n    acquire: Effect<A, E, R>,\n    use: (a: A) => Effect<A2, E2, R2>,\n    release: (a: A, exit: Exit.Exit<A2, E2>) => Effect<X, never, R3>\n  ): Effect<A2, E | E2, R | R2 | R3>\n} = core.acquireUseRelease\n\n/**\n * This function adds a finalizer to the scope of the calling `Effect` value.\n * The finalizer is guaranteed to be run when the scope is closed, and it may\n * depend on the `Exit` value that the scope is closed with.\n *\n * @param finalizer - The finalizer to add to the scope of the calling\n * `Effect` value. This function must take an `Exit` value as its parameter,\n * and return a new `Effect` value.\n *\n * @returns A new `Effect` value that represents the addition of the finalizer\n * to the scope of the calling `Effect` value.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const addFinalizer: <X, R>(\n  finalizer: (exit: Exit.Exit<unknown, unknown>) => Effect<X, never, R>\n) => Effect<void, never, Scope.Scope | R> = fiberRuntime.addFinalizer\n\n/**\n * Returns an effect that, if this effect _starts_ execution, then the\n * specified `finalizer` is guaranteed to be executed, whether this effect\n * succeeds, fails, or is interrupted.\n *\n * For use cases that need access to the effect's result, see `onExit`.\n *\n * Finalizers offer very powerful guarantees, but they are low-level, and\n * should generally not be used for releasing resources. For higher-level\n * logic built on `ensuring`, see the `acquireRelease` family of methods.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const ensuring: {\n  /**\n   * Returns an effect that, if this effect _starts_ execution, then the\n   * specified `finalizer` is guaranteed to be executed, whether this effect\n   * succeeds, fails, or is interrupted.\n   *\n   * For use cases that need access to the effect's result, see `onExit`.\n   *\n   * Finalizers offer very powerful guarantees, but they are low-level, and\n   * should generally not be used for releasing resources. For higher-level\n   * logic built on `ensuring`, see the `acquireRelease` family of methods.\n   *\n   * @since 2.0.0\n   * @category scoping, resources & finalization\n   */\n  <X, R1>(finalizer: Effect<X, never, R1>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R1 | R>\n  /**\n   * Returns an effect that, if this effect _starts_ execution, then the\n   * specified `finalizer` is guaranteed to be executed, whether this effect\n   * succeeds, fails, or is interrupted.\n   *\n   * For use cases that need access to the effect's result, see `onExit`.\n   *\n   * Finalizers offer very powerful guarantees, but they are low-level, and\n   * should generally not be used for releasing resources. For higher-level\n   * logic built on `ensuring`, see the `acquireRelease` family of methods.\n   *\n   * @since 2.0.0\n   * @category scoping, resources & finalization\n   */\n  <A, E, R, X, R1>(self: Effect<A, E, R>, finalizer: Effect<X, never, R1>): Effect<A, E, R1 | R>\n} = fiberRuntime.ensuring\n\n/**\n * Runs the specified effect if this effect fails, providing the error to the\n * effect if it exists. The provided effect will not be interrupted.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const onError: {\n  /**\n   * Runs the specified effect if this effect fails, providing the error to the\n   * effect if it exists. The provided effect will not be interrupted.\n   *\n   * @since 2.0.0\n   * @category scoping, resources & finalization\n   */\n  <E, X, R2>(\n    cleanup: (cause: Cause.Cause<E>) => Effect<X, never, R2>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A, E, R2 | R>\n  /**\n   * Runs the specified effect if this effect fails, providing the error to the\n   * effect if it exists. The provided effect will not be interrupted.\n   *\n   * @since 2.0.0\n   * @category scoping, resources & finalization\n   */\n  <A, E, R, X, R2>(\n    self: Effect<A, E, R>,\n    cleanup: (cause: Cause.Cause<E>) => Effect<X, never, R2>\n  ): Effect<A, E, R2 | R>\n} = core.onError\n\n/**\n * Ensures that a cleanup functions runs, whether this effect succeeds, fails,\n * or is interrupted.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const onExit: {\n  /**\n   * Ensures that a cleanup functions runs, whether this effect succeeds, fails,\n   * or is interrupted.\n   *\n   * @since 2.0.0\n   * @category scoping, resources & finalization\n   */\n  <A, E, X, R2>(\n    cleanup: (exit: Exit.Exit<A, E>) => Effect<X, never, R2>\n  ): <R>(self: Effect<A, E, R>) => Effect<A, E, R2 | R>\n  /**\n   * Ensures that a cleanup functions runs, whether this effect succeeds, fails,\n   * or is interrupted.\n   *\n   * @since 2.0.0\n   * @category scoping, resources & finalization\n   */\n  <A, E, R, X, R2>(\n    self: Effect<A, E, R>,\n    cleanup: (exit: Exit.Exit<A, E>) => Effect<X, never, R2>\n  ): Effect<A, E, R | R2>\n} = core.onExit\n\n/**\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const parallelFinalizers: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> = fiberRuntime.parallelFinalizers\n\n/**\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const finalizersMask: (\n  strategy: ExecutionStrategy\n) => <A, E, R>(\n  self: (restore: <A1, E1, R1>(self: Effect<A1, E1, R1>) => Effect<A1, E1, R1>) => Effect<A, E, R>\n) => Effect<A, E, R> = fiberRuntime.finalizersMask\n\n/**\n * Returns a new scoped workflow that runs finalizers added to the scope of\n * this workflow sequentially in the reverse of the order in which they were\n * added. Note that finalizers are run sequentially by default so this only\n * has meaning if used within a scope where finalizers are being run in\n * parallel.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const sequentialFinalizers: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> =\n  fiberRuntime.sequentialFinalizers\n\n/**\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const scope: Effect<Scope.Scope, never, Scope.Scope> = fiberRuntime.scope\n\n/**\n * Accesses the current scope and uses it to perform the specified effect.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const scopeWith: <A, E, R>(f: (scope: Scope.Scope) => Effect<A, E, R>) => Effect<A, E, R | Scope.Scope> =\n  fiberRuntime.scopeWith\n\n/**\n * Scopes all resources used in this workflow to the lifetime of the workflow,\n * ensuring that their finalizers are run as soon as this workflow completes\n * execution, whether by success, failure, or interruption.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const scoped: <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, Exclude<R, Scope.Scope>> =\n  fiberRuntime.scopedEffect\n\n/**\n * Scopes all resources acquired by `resource` to the lifetime of `use`\n * without effecting the scope of any resources acquired by `use`.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const using: {\n  /**\n   * Scopes all resources acquired by `resource` to the lifetime of `use`\n   * without effecting the scope of any resources acquired by `use`.\n   *\n   * @since 2.0.0\n   * @category scoping, resources & finalization\n   */\n  <A, A2, E2, R2>(\n    use: (a: A) => Effect<A2, E2, R2>\n  ): <E, R>(self: Effect<A, E, R>) => Effect<A2, E2 | E, R2 | Exclude<R, Scope.Scope>>\n  /**\n   * Scopes all resources acquired by `resource` to the lifetime of `use`\n   * without effecting the scope of any resources acquired by `use`.\n   *\n   * @since 2.0.0\n   * @category scoping, resources & finalization\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    use: (a: A) => Effect<A2, E2, R2>\n  ): Effect<A2, E | E2, R2 | Exclude<R, Scope.Scope>>\n} = fiberRuntime.using\n\n/**\n * Returns a new scoped workflow that returns the result of this workflow as\n * well as a finalizer that can be run to close the scope of this workflow.\n *\n * @since 2.0.0\n * @category scoping, resources & finalization\n */\nexport const withEarlyRelease: <A, E, R>(\n  self: Effect<A, E, R>\n) => Effect<[Effect<void>, A], E, R | Scope.Scope> = fiberRuntime.withEarlyRelease\n\n// -------------------------------------------------------------------------------------\n// supervision & fibers\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns a new effect that will not succeed with its value before first\n * waiting for the end of all child fibers forked by the effect.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const awaitAllChildren: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> = circular.awaitAllChildren\n\n/**\n * Returns a new workflow that will not supervise any fibers forked by this\n * workflow.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const daemonChildren: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R> = fiberRuntime.daemonChildren\n\n/**\n * Constructs an effect with information about the current `Fiber`.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const descriptor: Effect<Fiber.Fiber.Descriptor> = effect.descriptor\n\n/**\n * Constructs an effect based on information about the current `Fiber`.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const descriptorWith: <A, E, R>(f: (descriptor: Fiber.Fiber.Descriptor) => Effect<A, E, R>) => Effect<A, E, R> =\n  effect.descriptorWith\n\n/**\n * Returns a new workflow that executes this one and captures the changes in\n * `FiberRef` values.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const diffFiberRefs: <A, E, R>(\n  self: Effect<A, E, R>\n) => Effect<[FiberRefsPatch.FiberRefsPatch, A], E, R> = effect.diffFiberRefs\n\n/**\n * Acts on the children of this fiber (collected into a single fiber),\n * guaranteeing the specified callback will be invoked, whether or not this\n * effect succeeds.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const ensuringChild: {\n  /**\n   * Acts on the children of this fiber (collected into a single fiber),\n   * guaranteeing the specified callback will be invoked, whether or not this\n   * effect succeeds.\n   *\n   * @since 2.0.0\n   * @category supervision & fibers\n   */\n  <X, R2>(\n    f: (fiber: Fiber.Fiber<ReadonlyArray<unknown>, any>) => Effect<X, never, R2>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R2 | R>\n  /**\n   * Acts on the children of this fiber (collected into a single fiber),\n   * guaranteeing the specified callback will be invoked, whether or not this\n   * effect succeeds.\n   *\n   * @since 2.0.0\n   * @category supervision & fibers\n   */\n  <A, E, R, X, R2>(\n    self: Effect<A, E, R>,\n    f: (fiber: Fiber.Fiber<ReadonlyArray<unknown>, any>) => Effect<X, never, R2>\n  ): Effect<A, E, R | R2>\n} = circular.ensuringChild\n\n/**\n * Acts on the children of this fiber, guaranteeing the specified callback\n * will be invoked, whether or not this effect succeeds.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const ensuringChildren: {\n  /**\n   * Acts on the children of this fiber, guaranteeing the specified callback\n   * will be invoked, whether or not this effect succeeds.\n   *\n   * @since 2.0.0\n   * @category supervision & fibers\n   */\n  <X, R2>(\n    children: (fibers: ReadonlyArray<Fiber.RuntimeFiber<any, any>>) => Effect<X, never, R2>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R2 | R>\n  /**\n   * Acts on the children of this fiber, guaranteeing the specified callback\n   * will be invoked, whether or not this effect succeeds.\n   *\n   * @since 2.0.0\n   * @category supervision & fibers\n   */\n  <A, E, R, X, R2>(\n    self: Effect<A, E, R>,\n    children: (fibers: ReadonlyArray<Fiber.RuntimeFiber<any, any>>) => Effect<X, never, R2>\n  ): Effect<A, E, R | R2>\n} = circular.ensuringChildren\n\n/**\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const fiberId: Effect<FiberId.FiberId> = core.fiberId\n\n/**\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const fiberIdWith: <A, E, R>(f: (descriptor: FiberId.Runtime) => Effect<A, E, R>) => Effect<A, E, R> =\n  core.fiberIdWith\n\n/**\n * Returns an effect that forks this effect into its own separate fiber,\n * returning the fiber immediately, without waiting for it to begin executing\n * the effect.\n *\n * You can use the `fork` method whenever you want to execute an effect in a\n * new fiber, concurrently and without \"blocking\" the fiber executing other\n * effects. Using fibers can be tricky, so instead of using this method\n * directly, consider other higher-level methods, such as `raceWith`,\n * `zipPar`, and so forth.\n *\n * The fiber returned by this method has methods to interrupt the fiber and to\n * wait for it to finish executing the effect. See `Fiber` for more\n * information.\n *\n * Whenever you use this method to launch a new fiber, the new fiber is\n * attached to the parent fiber's scope. This means when the parent fiber\n * terminates, the child fiber will be terminated as well, ensuring that no\n * fibers leak. This behavior is called \"auto supervision\", and if this\n * behavior is not desired, you may use the `forkDaemon` or `forkIn` methods.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const fork: <A, E, R>(self: Effect<A, E, R>) => Effect<Fiber.RuntimeFiber<A, E>, never, R> = fiberRuntime.fork\n\n/**\n * Forks the effect into a new fiber attached to the global scope. Because the\n * new fiber is attached to the global scope, when the fiber executing the\n * returned effect terminates, the forked fiber will continue running.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const forkDaemon: <A, E, R>(self: Effect<A, E, R>) => Effect<Fiber.RuntimeFiber<A, E>, never, R> =\n  fiberRuntime.forkDaemon\n\n/**\n * Returns an effect that forks all of the specified values, and returns a\n * composite fiber that produces a list of their results, in order.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const forkAll: {\n  /**\n   * Returns an effect that forks all of the specified values, and returns a\n   * composite fiber that produces a list of their results, in order.\n   *\n   * @since 2.0.0\n   * @category supervision & fibers\n   */\n  (options?: { readonly discard?: false | undefined } | undefined): <Eff extends Effect<any, any, any>>(\n    effects: Iterable<Eff>\n  ) => Effect<Fiber.Fiber<Array<Effect.Success<Eff>>, Effect.Error<Eff>>, never, Effect.Context<Eff>>\n  /**\n   * Returns an effect that forks all of the specified values, and returns a\n   * composite fiber that produces a list of their results, in order.\n   *\n   * @since 2.0.0\n   * @category supervision & fibers\n   */\n  (\n    options: { readonly discard: true }\n  ): <Eff extends Effect<any, any, any>>(effects: Iterable<Eff>) => Effect<void, never, Effect.Context<Eff>>\n  /**\n   * Returns an effect that forks all of the specified values, and returns a\n   * composite fiber that produces a list of their results, in order.\n   *\n   * @since 2.0.0\n   * @category supervision & fibers\n   */\n  <Eff extends Effect<any, any, any>>(\n    effects: Iterable<Eff>,\n    options?: { readonly discard?: false | undefined } | undefined\n  ): Effect<Fiber.Fiber<Array<Effect.Success<Eff>>, Effect.Error<Eff>>, never, Effect.Context<Eff>>\n  /**\n   * Returns an effect that forks all of the specified values, and returns a\n   * composite fiber that produces a list of their results, in order.\n   *\n   * @since 2.0.0\n   * @category supervision & fibers\n   */\n  <Eff extends Effect<any, any, any>>(\n    effects: Iterable<Eff>,\n    options: { readonly discard: true }\n  ): Effect<void, never, Effect.Context<Eff>>\n} = circular.forkAll\n\n/**\n * Forks the effect in the specified scope. The fiber will be interrupted\n * when the scope is closed.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const forkIn: {\n  /**\n   * Forks the effect in the specified scope. The fiber will be interrupted\n   * when the scope is closed.\n   *\n   * @since 2.0.0\n   * @category supervision & fibers\n   */\n  (scope: Scope.Scope): <A, E, R>(self: Effect<A, E, R>) => Effect<Fiber.RuntimeFiber<A, E>, never, R>\n  /**\n   * Forks the effect in the specified scope. The fiber will be interrupted\n   * when the scope is closed.\n   *\n   * @since 2.0.0\n   * @category supervision & fibers\n   */\n  <A, E, R>(self: Effect<A, E, R>, scope: Scope.Scope): Effect<Fiber.RuntimeFiber<A, E>, never, R>\n} = circular.forkIn\n\n/**\n * Forks the fiber in a `Scope`, interrupting it when the scope is closed.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const forkScoped: <A, E, R>(self: Effect<A, E, R>) => Effect<Fiber.RuntimeFiber<A, E>, never, Scope.Scope | R> =\n  circular.forkScoped\n\n/**\n * Like fork but handles an error with the provided handler.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const forkWithErrorHandler: {\n  /**\n   * Like fork but handles an error with the provided handler.\n   *\n   * @since 2.0.0\n   * @category supervision & fibers\n   */\n  <E, X>(handler: (e: E) => Effect<X>): <A, R>(self: Effect<A, E, R>) => Effect<Fiber.RuntimeFiber<A, E>, never, R>\n  /**\n   * Like fork but handles an error with the provided handler.\n   *\n   * @since 2.0.0\n   * @category supervision & fibers\n   */\n  <A, E, R, X>(self: Effect<A, E, R>, handler: (e: E) => Effect<X>): Effect<Fiber.RuntimeFiber<A, E>, never, R>\n} = fiberRuntime.forkWithErrorHandler\n\n/**\n * Creates an `Effect` value that represents the exit value of the specified\n * fiber.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const fromFiber: <A, E>(fiber: Fiber.Fiber<A, E>) => Effect<A, E> = circular.fromFiber\n\n/**\n * Creates an `Effect` value that represents the exit value of the specified\n * fiber.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const fromFiberEffect: <A, E, R>(fiber: Effect<Fiber.Fiber<A, E>, E, R>) => Effect<A, E, R> =\n  circular.fromFiberEffect\n\n/**\n * Returns an effect with the behavior of this one, but where all child fibers\n * forked in the effect are reported to the specified supervisor.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const supervised: {\n  /**\n   * Returns an effect with the behavior of this one, but where all child fibers\n   * forked in the effect are reported to the specified supervisor.\n   *\n   * @since 2.0.0\n   * @category supervision & fibers\n   */\n  <X>(supervisor: Supervisor.Supervisor<X>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Returns an effect with the behavior of this one, but where all child fibers\n   * forked in the effect are reported to the specified supervisor.\n   *\n   * @since 2.0.0\n   * @category supervision & fibers\n   */\n  <A, E, R, X>(self: Effect<A, E, R>, supervisor: Supervisor.Supervisor<X>): Effect<A, E, R>\n} = circular.supervised\n\n/**\n * Transplants specified effects so that when those effects fork other\n * effects, the forked effects will be governed by the scope of the fiber that\n * executes this effect.\n *\n * This can be used to \"graft\" deep grandchildren onto a higher-level scope,\n * effectively extending their lifespans into the parent scope.\n *\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const transplant: <A, E, R>(\n  f: (grafter: <A2, E2, R2>(effect: Effect<A2, E2, R2>) => Effect<A2, E2, R2>) => Effect<A, E, R>\n) => Effect<A, E, R> = core.transplant\n\n/**\n * @since 2.0.0\n * @category supervision & fibers\n */\nexport const withConcurrency: {\n  /**\n   * @since 2.0.0\n   * @category supervision & fibers\n   */\n  (concurrency: number | \"unbounded\"): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * @since 2.0.0\n   * @category supervision & fibers\n   */\n  <A, E, R>(self: Effect<A, E, R>, concurrency: number | \"unbounded\"): Effect<A, E, R>\n} = core.withConcurrency\n\n// ---------------------------------------------------------------------------------------\n// scheduler\n// ---------------------------------------------------------------------------------------\n\n/**\n * Sets the provided scheduler for usage in the wrapped effect\n *\n * @since 2.0.0\n * @category scheduler\n */\nexport const withScheduler: {\n  // ---------------------------------------------------------------------------------------\n  // scheduler\n  // ---------------------------------------------------------------------------------------\n\n  /**\n   * Sets the provided scheduler for usage in the wrapped effect\n   *\n   * @since 2.0.0\n   * @category scheduler\n   */\n  (scheduler: Scheduler.Scheduler): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  // ---------------------------------------------------------------------------------------\n  // scheduler\n  // ---------------------------------------------------------------------------------------\n\n  /**\n   * Sets the provided scheduler for usage in the wrapped effect\n   *\n   * @since 2.0.0\n   * @category scheduler\n   */\n  <A, E, R>(self: Effect<A, E, R>, scheduler: Scheduler.Scheduler): Effect<A, E, R>\n} = Scheduler.withScheduler\n\n/**\n * Sets the scheduling priority used when yielding\n *\n * @since 2.0.0\n * @category utils\n */\nexport const withSchedulingPriority: {\n  /**\n   * Sets the scheduling priority used when yielding\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (priority: number): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Sets the scheduling priority used when yielding\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(self: Effect<A, E, R>, priority: number): Effect<A, E, R>\n} = core.withSchedulingPriority\n\n/**\n * Sets the maximum number of operations before yield by the default schedulers\n *\n * @since 2.0.0\n * @category utils\n */\nexport const withMaxOpsBeforeYield: {\n  /**\n   * Sets the maximum number of operations before yield by the default schedulers\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (priority: number): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Sets the maximum number of operations before yield by the default schedulers\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(self: Effect<A, E, R>, priority: number): Effect<A, E, R>\n} = core.withMaxOpsBeforeYield\n\n// ---------------------------------------------------------------------------------------\n// clock\n// ---------------------------------------------------------------------------------------\n\n/**\n * Retreives the `Clock` service from the context\n *\n * @since 2.0.0\n * @category clock\n */\nexport const clock: Effect<Clock.Clock> = effect.clock\n\n/**\n * Retreives the `Clock` service from the context and provides it to the\n * specified effectful function.\n *\n * @since 2.0.0\n * @category clock\n */\nexport const clockWith: <A, E, R>(f: (clock: Clock.Clock) => Effect<A, E, R>) => Effect<A, E, R> = effect.clockWith\n\n/**\n * Sets the implementation of the clock service to the specified value and\n * restores it to its original value when the scope is closed.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const withClockScoped: <A extends Clock.Clock>(value: A) => Effect<void, never, Scope.Scope> =\n  fiberRuntime.withClockScoped\n\n/**\n * Executes the specified workflow with the specified implementation of the\n * clock service.\n *\n * @since 2.0.0\n * @category clock\n */\nexport const withClock: {\n  /**\n   * Executes the specified workflow with the specified implementation of the\n   * clock service.\n   *\n   * @since 2.0.0\n   * @category clock\n   */\n  <X extends Clock.Clock>(value: X): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Executes the specified workflow with the specified implementation of the\n   * clock service.\n   *\n   * @since 2.0.0\n   * @category clock\n   */\n  <X extends Clock.Clock, A, E, R>(effect: Effect<A, E, R>, value: X): Effect<A, E, R>\n} = defaultServices.withClock\n\n// -------------------------------------------------------------------------------------\n// console\n// -------------------------------------------------------------------------------------\n\n/**\n * Retreives the `Console` service from the context\n *\n * @since 2.0.0\n * @category console\n */\nexport const console: Effect<Console> = _console.console\n\n/**\n * Retreives the `Console` service from the context and provides it to the\n * specified effectful function.\n *\n * @since 2.0.0\n * @category console\n */\nexport const consoleWith: <A, E, R>(f: (console: Console) => Effect<A, E, R>) => Effect<A, E, R> = _console.consoleWith\n\n/**\n * Sets the implementation of the console service to the specified value and\n * restores it to its original value when the scope is closed.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const withConsoleScoped: <A extends Console>(console: A) => Effect<void, never, Scope.Scope> =\n  _console.withConsoleScoped\n\n/**\n * Executes the specified workflow with the specified implementation of the\n * console service.\n *\n * @since 2.0.0\n * @category console\n */\nexport const withConsole: {\n  /**\n   * Executes the specified workflow with the specified implementation of the\n   * console service.\n   *\n   * @since 2.0.0\n   * @category console\n   */\n  <C extends Console>(console: C): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Executes the specified workflow with the specified implementation of the\n   * console service.\n   *\n   * @since 2.0.0\n   * @category console\n   */\n  <A, E, R, C extends Console>(effect: Effect<A, E, R>, console: C): Effect<A, E, R>\n} = _console.withConsole\n\n// ---------------------------------------------------------------------------------------\n// delays & timeouts\n// ---------------------------------------------------------------------------------------\n\n/**\n * Returns an effect that is delayed from this effect by the specified\n * `Duration`.\n *\n * @since 2.0.0\n * @category delays & timeouts\n */\nexport const delay: {\n  // ---------------------------------------------------------------------------------------\n  // delays & timeouts\n  // ---------------------------------------------------------------------------------------\n\n  /**\n   * Returns an effect that is delayed from this effect by the specified\n   * `Duration`.\n   *\n   * @since 2.0.0\n   * @category delays & timeouts\n   */\n  (duration: Duration.DurationInput): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  // ---------------------------------------------------------------------------------------\n  // delays & timeouts\n  // ---------------------------------------------------------------------------------------\n\n  /**\n   * Returns an effect that is delayed from this effect by the specified\n   * `Duration`.\n   *\n   * @since 2.0.0\n   * @category delays & timeouts\n   */\n  <A, E, R>(self: Effect<A, E, R>, duration: Duration.DurationInput): Effect<A, E, R>\n} = effect.delay\n\n/**\n * Returns an effect that suspends for the specified duration. This method is\n * asynchronous, and does not actually block the fiber executing the effect.\n *\n * @since 2.0.0\n * @category delays & timeouts\n */\nexport const sleep: (duration: Duration.DurationInput) => Effect<void> = effect.sleep\n\n/**\n * Returns a new effect that executes this one and times the execution.\n *\n * @since 2.0.0\n * @category delays & timeouts\n */\nexport const timed: <A, E, R>(self: Effect<A, E, R>) => Effect<[Duration.Duration, A], E, R> = effect.timed\n\n/**\n * A more powerful variation of `timed` that allows specifying the clock.\n *\n * @since 2.0.0\n * @category delays & timeouts\n */\nexport const timedWith: {\n  /**\n   * A more powerful variation of `timed` that allows specifying the clock.\n   *\n   * @since 2.0.0\n   * @category delays & timeouts\n   */\n  <E1, R1>(\n    nanoseconds: Effect<bigint, E1, R1>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<[Duration.Duration, A], E1 | E, R1 | R>\n  /**\n   * A more powerful variation of `timed` that allows specifying the clock.\n   *\n   * @since 2.0.0\n   * @category delays & timeouts\n   */\n  <A, E, R, E1, R1>(\n    self: Effect<A, E, R>,\n    nanoseconds: Effect<bigint, E1, R1>\n  ): Effect<[Duration.Duration, A], E | E1, R | R1>\n} = effect.timedWith\n\n/**\n * Returns an effect that will timeout this effect, failing with a `Cause.TimeoutException`\n * if the timeout elapses before the effect has produced a value.\n *\n * If the timeout elapses without producing a value, the running effect will\n * be safely interrupted.\n *\n * WARNING: The effect returned by this method will not itself return until\n * the underlying effect is actually interrupted. This leads to more\n * predictable resource utilization. If early return is desired, then instead\n * of using `effect.timeout(d)`, use `effect.disconnect.timeout(d)`, which\n * first disconnects the effect's interruption signal before performing the\n * timeout, resulting in earliest possible return, before an underlying effect\n * has been successfully interrupted.\n *\n * @since 2.0.0\n * @category delays & timeouts\n */\nexport const timeout: {\n  /**\n   * Returns an effect that will timeout this effect, failing with a `Cause.TimeoutException`\n   * if the timeout elapses before the effect has produced a value.\n   *\n   * If the timeout elapses without producing a value, the running effect will\n   * be safely interrupted.\n   *\n   * WARNING: The effect returned by this method will not itself return until\n   * the underlying effect is actually interrupted. This leads to more\n   * predictable resource utilization. If early return is desired, then instead\n   * of using `effect.timeout(d)`, use `effect.disconnect.timeout(d)`, which\n   * first disconnects the effect's interruption signal before performing the\n   * timeout, resulting in earliest possible return, before an underlying effect\n   * has been successfully interrupted.\n   *\n   * @since 2.0.0\n   * @category delays & timeouts\n   */\n  (duration: Duration.DurationInput): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E | Cause.TimeoutException, R>\n  /**\n   * Returns an effect that will timeout this effect, failing with a `Cause.TimeoutException`\n   * if the timeout elapses before the effect has produced a value.\n   *\n   * If the timeout elapses without producing a value, the running effect will\n   * be safely interrupted.\n   *\n   * WARNING: The effect returned by this method will not itself return until\n   * the underlying effect is actually interrupted. This leads to more\n   * predictable resource utilization. If early return is desired, then instead\n   * of using `effect.timeout(d)`, use `effect.disconnect.timeout(d)`, which\n   * first disconnects the effect's interruption signal before performing the\n   * timeout, resulting in earliest possible return, before an underlying effect\n   * has been successfully interrupted.\n   *\n   * @since 2.0.0\n   * @category delays & timeouts\n   */\n  <A, E, R>(self: Effect<A, E, R>, duration: Duration.DurationInput): Effect<A, Cause.TimeoutException | E, R>\n} = circular.timeout\n\n/**\n * Returns an effect that will timeout this effect, returning `None` if the\n * timeout elapses before the effect has produced a value; and returning\n * `Some` of the produced value otherwise.\n *\n * If the timeout elapses without producing a value, the running effect will\n * be safely interrupted.\n *\n * WARNING: The effect returned by this method will not itself return until\n * the underlying effect is actually interrupted. This leads to more\n * predictable resource utilization. If early return is desired, then instead\n * of using `effect.timeout(d)`, use `effect.disconnect.timeout(d)`, which\n * first disconnects the effect's interruption signal before performing the\n * timeout, resulting in earliest possible return, before an underlying effect\n * has been successfully interrupted.\n *\n * @since 3.1.0\n * @category delays & timeouts\n */\nexport const timeoutOption: {\n  /**\n   * Returns an effect that will timeout this effect, returning `None` if the\n   * timeout elapses before the effect has produced a value; and returning\n   * `Some` of the produced value otherwise.\n   *\n   * If the timeout elapses without producing a value, the running effect will\n   * be safely interrupted.\n   *\n   * WARNING: The effect returned by this method will not itself return until\n   * the underlying effect is actually interrupted. This leads to more\n   * predictable resource utilization. If early return is desired, then instead\n   * of using `effect.timeout(d)`, use `effect.disconnect.timeout(d)`, which\n   * first disconnects the effect's interruption signal before performing the\n   * timeout, resulting in earliest possible return, before an underlying effect\n   * has been successfully interrupted.\n   *\n   * @since 3.1.0\n   * @category delays & timeouts\n   */\n  (duration: Duration.DurationInput): <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, E, R>\n  /**\n   * Returns an effect that will timeout this effect, returning `None` if the\n   * timeout elapses before the effect has produced a value; and returning\n   * `Some` of the produced value otherwise.\n   *\n   * If the timeout elapses without producing a value, the running effect will\n   * be safely interrupted.\n   *\n   * WARNING: The effect returned by this method will not itself return until\n   * the underlying effect is actually interrupted. This leads to more\n   * predictable resource utilization. If early return is desired, then instead\n   * of using `effect.timeout(d)`, use `effect.disconnect.timeout(d)`, which\n   * first disconnects the effect's interruption signal before performing the\n   * timeout, resulting in earliest possible return, before an underlying effect\n   * has been successfully interrupted.\n   *\n   * @since 3.1.0\n   * @category delays & timeouts\n   */\n  <A, E, R>(self: Effect<A, E, R>, duration: Duration.DurationInput): Effect<Option.Option<A>, E, R>\n} = circular.timeoutOption\n\n/**\n * The same as `timeout`, but instead of producing a `None` in the event of\n * timeout, it will produce the specified error.\n *\n * @since 2.0.0\n * @category delays & timeouts\n */\nexport const timeoutFail: {\n  /**\n   * The same as `timeout`, but instead of producing a `None` in the event of\n   * timeout, it will produce the specified error.\n   *\n   * @since 2.0.0\n   * @category delays & timeouts\n   */\n  <E1>(\n    options: { readonly onTimeout: LazyArg<E1>; readonly duration: Duration.DurationInput }\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E1 | E, R>\n  /**\n   * The same as `timeout`, but instead of producing a `None` in the event of\n   * timeout, it will produce the specified error.\n   *\n   * @since 2.0.0\n   * @category delays & timeouts\n   */\n  <A, E, R, E1>(\n    self: Effect<A, E, R>,\n    options: { readonly onTimeout: LazyArg<E1>; readonly duration: Duration.DurationInput }\n  ): Effect<A, E | E1, R>\n} = circular.timeoutFail\n\n/**\n * The same as `timeout`, but instead of producing a `None` in the event of\n * timeout, it will produce the specified failure.\n *\n * @since 2.0.0\n * @category delays & timeouts\n */\nexport const timeoutFailCause: {\n  /**\n   * The same as `timeout`, but instead of producing a `None` in the event of\n   * timeout, it will produce the specified failure.\n   *\n   * @since 2.0.0\n   * @category delays & timeouts\n   */\n  <E1>(\n    options: { readonly onTimeout: LazyArg<Cause.Cause<E1>>; readonly duration: Duration.DurationInput }\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E1 | E, R>\n  /**\n   * The same as `timeout`, but instead of producing a `None` in the event of\n   * timeout, it will produce the specified failure.\n   *\n   * @since 2.0.0\n   * @category delays & timeouts\n   */\n  <A, E, R, E1>(\n    self: Effect<A, E, R>,\n    options: { readonly onTimeout: LazyArg<Cause.Cause<E1>>; readonly duration: Duration.DurationInput }\n  ): Effect<A, E | E1, R>\n} = circular.timeoutFailCause\n\n/**\n * Returns an effect that will timeout this effect, returning either the\n * default value if the timeout elapses before the effect has produced a\n * value or returning the result of applying the function `onSuccess` to the\n * success value of the effect.\n *\n * If the timeout elapses without producing a value, the running effect will\n * be safely interrupted.\n *\n * @since 2.0.0\n * @category delays & timeouts\n */\nexport const timeoutTo: {\n  /**\n   * Returns an effect that will timeout this effect, returning either the\n   * default value if the timeout elapses before the effect has produced a\n   * value or returning the result of applying the function `onSuccess` to the\n   * success value of the effect.\n   *\n   * If the timeout elapses without producing a value, the running effect will\n   * be safely interrupted.\n   *\n   * @since 2.0.0\n   * @category delays & timeouts\n   */\n  <A, B, B1>(\n    options: {\n      readonly onTimeout: LazyArg<B1>\n      readonly onSuccess: (a: A) => B\n      readonly duration: Duration.DurationInput\n    }\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B | B1, E, R>\n  /**\n   * Returns an effect that will timeout this effect, returning either the\n   * default value if the timeout elapses before the effect has produced a\n   * value or returning the result of applying the function `onSuccess` to the\n   * success value of the effect.\n   *\n   * If the timeout elapses without producing a value, the running effect will\n   * be safely interrupted.\n   *\n   * @since 2.0.0\n   * @category delays & timeouts\n   */\n  <A, E, R, B1, B>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly onTimeout: LazyArg<B1>\n      readonly onSuccess: (a: A) => B\n      readonly duration: Duration.DurationInput\n    }\n  ): Effect<B1 | B, E, R>\n} = circular.timeoutTo\n\n// -------------------------------------------------------------------------------------\n// config\n// -------------------------------------------------------------------------------------\n\n/**\n * Retrieves the default config provider, and passes it to the specified\n * function, which may return an effect that uses the provider to perform some\n * work or compute some value.\n *\n * @since 2.0.0\n * @category config\n */\nexport const configProviderWith: <A, E, R>(f: (configProvider: ConfigProvider) => Effect<A, E, R>) => Effect<A, E, R> =\n  defaultServices.configProviderWith\n\n/**\n * Executes the specified workflow with the specified configuration provider.\n *\n * @since 2.0.0\n * @category config\n */\nexport const withConfigProvider: {\n  /**\n   * Executes the specified workflow with the specified configuration provider.\n   *\n   * @since 2.0.0\n   * @category config\n   */\n  (value: ConfigProvider): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Executes the specified workflow with the specified configuration provider.\n   *\n   * @since 2.0.0\n   * @category config\n   */\n  <A, E, R>(effect: Effect<A, E, R>, value: ConfigProvider): Effect<A, E, R>\n} = defaultServices.withConfigProvider\n\n/**\n * Sets the configuration provider to the specified value and restores it to its original value\n * when the scope is closed.\n *\n * @since 2.0.0\n * @category config\n */\nexport const withConfigProviderScoped: (value: ConfigProvider) => Effect<void, never, Scope.Scope> =\n  fiberRuntime.withConfigProviderScoped\n\n// -------------------------------------------------------------------------------------\n// context\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const context: <R>() => Effect<Context.Context<R>, never, R> = core.context\n\n/**\n * Accesses the context of the effect.\n *\n * @since 2.0.0\n * @category context\n */\nexport const contextWith: <R, A>(f: (context: Context.Context<R>) => A) => Effect<A, never, R> = effect.contextWith\n\n/**\n * Effectually accesses the context of the effect.\n *\n * @since 2.0.0\n * @category context\n */\nexport const contextWithEffect: <R0, A, E, R>(\n  f: (context: Context.Context<R0>) => Effect<A, E, R>\n) => Effect<A, E, R | R0> = core.contextWithEffect\n\n/**\n * Provides some of the context required to run this effect,\n * leaving the remainder `R0`.\n *\n * @since 2.0.0\n * @category context\n */\nexport const mapInputContext: {\n  /**\n   * Provides some of the context required to run this effect,\n   * leaving the remainder `R0`.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <R0, R>(f: (context: Context.Context<R0>) => Context.Context<R>): <A, E>(self: Effect<A, E, R>) => Effect<A, E, R0>\n  /**\n   * Provides some of the context required to run this effect,\n   * leaving the remainder `R0`.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <A, E, R, R0>(\n    self: Effect<A, E, R>,\n    f: (context: Context.Context<R0>) => Context.Context<R>\n  ): Effect<A, E, R0>\n} = core.mapInputContext\n\n/**\n * Splits the context into two parts, providing one part using the\n * specified layer/context/runtime and leaving the remainder `R0`\n *\n * @since 2.0.0\n * @category context\n */\nexport const provide: {\n  /**\n   * Splits the context into two parts, providing one part using the\n   * specified layer/context/runtime and leaving the remainder `R0`\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <const Layers extends [Layer.Layer.Any, ...Array<Layer.Layer.Any>]>(layers: Layers): <A, E, R>(\n    self: Effect<A, E, R>\n  ) => Effect<\n    A,\n    E | { [k in keyof Layers]: Layer.Layer.Error<Layers[k]> }[number],\n    | { [k in keyof Layers]: Layer.Layer.Context<Layers[k]> }[number]\n    | Exclude<R, { [k in keyof Layers]: Layer.Layer.Success<Layers[k]> }[number]>\n  >\n  /**\n   * Splits the context into two parts, providing one part using the\n   * specified layer/context/runtime and leaving the remainder `R0`\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <ROut, E2, RIn>(\n    layer: Layer.Layer<ROut, E2, RIn>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E | E2, RIn | Exclude<R, ROut>>\n  /**\n   * Splits the context into two parts, providing one part using the\n   * specified layer/context/runtime and leaving the remainder `R0`\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <R2>(context: Context.Context<R2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, Exclude<R, R2>>\n  /**\n   * Splits the context into two parts, providing one part using the\n   * specified layer/context/runtime and leaving the remainder `R0`\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <R2>(runtime: Runtime.Runtime<R2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, Exclude<R, R2>>\n  /**\n   * Splits the context into two parts, providing one part using the\n   * specified layer/context/runtime and leaving the remainder `R0`\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <E2, R2>(\n    managedRuntime: ManagedRuntime.ManagedRuntime<R2, E2>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E | E2, Exclude<R, R2>>\n  /**\n   * Splits the context into two parts, providing one part using the\n   * specified layer/context/runtime and leaving the remainder `R0`\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <A, E, R, const Layers extends [Layer.Layer.Any, ...Array<Layer.Layer.Any>]>(\n    self: Effect<A, E, R>,\n    layers: Layers\n  ): Effect<\n    A,\n    E | { [k in keyof Layers]: Layer.Layer.Error<Layers[k]> }[number],\n    | { [k in keyof Layers]: Layer.Layer.Context<Layers[k]> }[number]\n    | Exclude<R, { [k in keyof Layers]: Layer.Layer.Success<Layers[k]> }[number]>\n  >\n  /**\n   * Splits the context into two parts, providing one part using the\n   * specified layer/context/runtime and leaving the remainder `R0`\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <A, E, R, ROut, E2, RIn>(\n    self: Effect<A, E, R>,\n    layer: Layer.Layer<ROut, E2, RIn>\n  ): Effect<A, E | E2, RIn | Exclude<R, ROut>>\n  /**\n   * Splits the context into two parts, providing one part using the\n   * specified layer/context/runtime and leaving the remainder `R0`\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <A, E, R, R2>(self: Effect<A, E, R>, context: Context.Context<R2>): Effect<A, E, Exclude<R, R2>>\n  /**\n   * Splits the context into two parts, providing one part using the\n   * specified layer/context/runtime and leaving the remainder `R0`\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <A, E, R, R2>(self: Effect<A, E, R>, runtime: Runtime.Runtime<R2>): Effect<A, E, Exclude<R, R2>>\n  /**\n   * Splits the context into two parts, providing one part using the\n   * specified layer/context/runtime and leaving the remainder `R0`\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <A, E, E2, R, R2>(\n    self: Effect<A, E, R>,\n    runtime: ManagedRuntime.ManagedRuntime<R2, E2>\n  ): Effect<A, E | E2, Exclude<R, R2>>\n} = layer.effect_provide\n\n/**\n * Provides the effect with the single service it requires. If the effect\n * requires more than one service use `provide` instead.\n *\n * @since 2.0.0\n * @category context\n */\nexport const provideService: {\n  /**\n   * Provides the effect with the single service it requires. If the effect\n   * requires more than one service use `provide` instead.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    service: Context.Tag.Service<T>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, Exclude<R, Context.Tag.Identifier<T>>>\n  /**\n   * Provides the effect with the single service it requires. If the effect\n   * requires more than one service use `provide` instead.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Effect<A, E, R>,\n    tag: T,\n    service: Context.Tag.Service<T>\n  ): Effect<A, E, Exclude<R, Context.Tag.Identifier<T>>>\n} = effect.provideService\n\n/**\n * Provides the effect with the single service it requires. If the effect\n * requires more than one service use `provide` instead.\n *\n * @since 2.0.0\n * @category context\n */\nexport const provideServiceEffect: {\n  /**\n   * Provides the effect with the single service it requires. If the effect\n   * requires more than one service use `provide` instead.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <T extends Context.Tag<any, any>, E1, R1>(\n    tag: T,\n    effect: Effect<Context.Tag.Service<T>, E1, R1>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E1 | E, R1 | Exclude<R, Context.Tag.Identifier<T>>>\n  /**\n   * Provides the effect with the single service it requires. If the effect\n   * requires more than one service use `provide` instead.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <A, E, R, T extends Context.Tag<any, any>, E1, R1>(\n    self: Effect<A, E, R>,\n    tag: T,\n    effect: Effect<Context.Tag.Service<T>, E1, R1>\n  ): Effect<A, E | E1, R1 | Exclude<R, Context.Tag.Identifier<T>>>\n} = effect.provideServiceEffect\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const serviceFunction: <T extends Effect<any, any, any>, Args extends Array<any>, A>(\n  getService: T,\n  f: (_: Effect.Success<T>) => (...args: Args) => A\n) => (...args: Args) => Effect<A, Effect.Error<T>, Effect.Context<T>> = effect.serviceFunction\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const serviceFunctionEffect: <T extends Effect<any, any, any>, Args extends Array<any>, A, E, R>(\n  getService: T,\n  f: (_: Effect.Success<T>) => (...args: Args) => Effect<A, E, R>\n) => (...args: Args) => Effect<A, E | Effect.Error<T>, R | Effect.Context<T>> = effect.serviceFunctionEffect\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const serviceFunctions: <S, SE, SR>(\n  getService: Effect<S, SE, SR>\n) => {\n  [k in keyof S as S[k] extends (...args: Array<any>) => Effect<any, any, any> ? k : never]: S[k] extends\n    (...args: infer Args) => Effect<infer A, infer E, infer R> ? (...args: Args) => Effect<A, SE | E, SR | R>\n    : never\n} = effect.serviceFunctions as any\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const serviceConstants: <S, SE, SR>(\n  getService: Effect<S, SE, SR>\n) => {\n  [k in { [k in keyof S]: k }[keyof S]]: S[k] extends Effect<infer A, infer E, infer R> ? Effect<A, SE | E, SR | R>\n    : Effect<S[k], SE, SR>\n} = effect.serviceConstants\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const serviceMembers: <S, SE, SR>(\n  getService: Effect<S, SE, SR>\n) => {\n  functions: {\n    [k in keyof S as S[k] extends (...args: Array<any>) => Effect<any, any, any> ? k : never]: S[k] extends\n      (...args: infer Args) => Effect<infer A, infer E, infer R> ? (...args: Args) => Effect<A, SE | E, SR | R>\n      : never\n  }\n  constants: {\n    [k in { [k in keyof S]: k }[keyof S]]: S[k] extends Effect<infer A, infer E, infer R> ? Effect<A, SE | E, SR | R>\n      : Effect<S[k], SE, SR>\n  }\n} = effect.serviceMembers as any\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const serviceOption: <I, S>(tag: Context.Tag<I, S>) => Effect<Option.Option<S>> = effect.serviceOption\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const serviceOptional: <I, S>(tag: Context.Tag<I, S>) => Effect<S, Cause.NoSuchElementException> =\n  effect.serviceOptional\n\n/**\n * Updates the service with the required service entry.\n *\n * @since 2.0.0\n * @category context\n */\nexport const updateService: {\n  /**\n   * Updates the service with the required service entry.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    f: (service: Context.Tag.Service<T>) => Context.Tag.Service<T>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R | Context.Tag.Identifier<T>>\n  /**\n   * Updates the service with the required service entry.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Effect<A, E, R>,\n    tag: T,\n    f: (service: Context.Tag.Service<T>) => Context.Tag.Service<T>\n  ): Effect<A, E, R | Context.Tag.Identifier<T>>\n} = effect.updateService\n\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Effect` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link bind}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @example\n * import { Effect, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Effect.Do,\n *   Effect.bind(\"x\", () => Effect.succeed(2)),\n *   Effect.bind(\"y\", () => Effect.succeed(3)),\n *   Effect.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(Effect.runSync(result), { x: 2, y: 3, sum: 5 })\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const Do: Effect<{}> = effect.Do\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Effect` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link Do}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @example\n * import { Effect, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Effect.Do,\n *   Effect.bind(\"x\", () => Effect.succeed(2)),\n *   Effect.bind(\"y\", () => Effect.succeed(3)),\n *   Effect.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(Effect.runSync(result), { x: 2, y: 3, sum: 5 })\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bind: {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Effect` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link let_ let}\n   *\n   * @example\n   * import { Effect, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Effect.Do,\n   *   Effect.bind(\"x\", () => Effect.succeed(2)),\n   *   Effect.bind(\"y\", () => Effect.succeed(3)),\n   *   Effect.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(Effect.runSync(result), { x: 2, y: 3, sum: 5 })\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  <N extends string, A extends object, B, E2, R2>(\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => Effect<B, E2, R2>\n  ): <E1, R1>(self: Effect<A, E1, R1>) => Effect<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E2 | E1, R2 | R1>\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Effect` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link let_ let}\n   *\n   * @example\n   * import { Effect, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Effect.Do,\n   *   Effect.bind(\"x\", () => Effect.succeed(2)),\n   *   Effect.bind(\"y\", () => Effect.succeed(3)),\n   *   Effect.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(Effect.runSync(result), { x: 2, y: 3, sum: 5 })\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  <A extends object, N extends string, E1, R1, B, E2, R2>(\n    self: Effect<A, E1, R1>,\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => Effect<B, E2, R2>\n  ): Effect<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E1 | E2, R1 | R2>\n} = effect.bind\n\n/**\n * `bindAll` combines `Effect.all` with `Effect.bind`. It is useful\n * when you want to concurrently run multiple effects and then combine their\n * results in a Do notation pipeline.\n *\n * @example\n * import { Effect, Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Effect.Do,\n *   Effect.bind(\"x\", () => Effect.succeed(2)),\n *   Effect.bindAll(({ x }) => ({\n *     a: Effect.succeed(x),\n *     b: Effect.fail(\"oops\"),\n *   }), { concurrency: 2, mode: \"either\" })\n * )\n * assert.deepStrictEqual(Effect.runSync(result), { x: 2, a: Either.right(2), b: Either.left(\"oops\") })\n *\n * @category do notation\n * @since 3.7.0\n */\nexport const bindAll: {\n  /**\n   * `bindAll` combines `Effect.all` with `Effect.bind`. It is useful\n   * when you want to concurrently run multiple effects and then combine their\n   * results in a Do notation pipeline.\n   *\n   * @example\n   * import { Effect, Either, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Effect.Do,\n   *   Effect.bind(\"x\", () => Effect.succeed(2)),\n   *   Effect.bindAll(({ x }) => ({\n   *     a: Effect.succeed(x),\n   *     b: Effect.fail(\"oops\"),\n   *   }), { concurrency: 2, mode: \"either\" })\n   * )\n   * assert.deepStrictEqual(Effect.runSync(result), { x: 2, a: Either.right(2), b: Either.left(\"oops\") })\n   *\n   * @category do notation\n   * @since 3.7.0\n   */\n  <\n    A extends object,\n    X extends Record<string, Effect<any, any, any>>,\n    O extends {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  >(\n    f: (a: NoInfer<A>) => [Extract<keyof X, keyof A>] extends [never] ? X : `Duplicate keys`,\n    options?: undefined | O\n  ): <E1, R1>(\n    self: Effect<A, E1, R1>\n  ) => [All.ReturnObject<X, false, All.ExtractMode<O>>] extends [Effect<infer Success, infer Error, infer Context>]\n    ? Effect<\n      { [K in keyof A | keyof Success]: K extends keyof A ? A[K] : K extends keyof Success ? Success[K] : never },\n      E1 | Error,\n      R1 | Context\n    >\n    : never\n  /**\n   * `bindAll` combines `Effect.all` with `Effect.bind`. It is useful\n   * when you want to concurrently run multiple effects and then combine their\n   * results in a Do notation pipeline.\n   *\n   * @example\n   * import { Effect, Either, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Effect.Do,\n   *   Effect.bind(\"x\", () => Effect.succeed(2)),\n   *   Effect.bindAll(({ x }) => ({\n   *     a: Effect.succeed(x),\n   *     b: Effect.fail(\"oops\"),\n   *   }), { concurrency: 2, mode: \"either\" })\n   * )\n   * assert.deepStrictEqual(Effect.runSync(result), { x: 2, a: Either.right(2), b: Either.left(\"oops\") })\n   *\n   * @category do notation\n   * @since 3.7.0\n   */\n  <\n    A extends object,\n    X extends Record<string, Effect<any, any, any>>,\n    O extends {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    },\n    E1,\n    R1\n  >(\n    self: Effect<A, E1, R1>,\n    f: (a: NoInfer<A>) => [Extract<keyof X, keyof A>] extends [never] ? X : `Duplicate keys`,\n    options?: undefined | {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): [All.ReturnObject<X, false, All.ExtractMode<O>>] extends [Effect<infer Success, infer Error, infer Context>]\n    ? Effect<\n      { [K in keyof A | keyof Success]: K extends keyof A ? A[K] : K extends keyof Success ? Success[K] : never },\n      E1 | Error,\n      R1 | Context\n    >\n    : never\n} = circular.bindAll\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Effect` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link Do}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Effect, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Effect.Do,\n *   Effect.bind(\"x\", () => Effect.succeed(2)),\n *   Effect.bind(\"y\", () => Effect.succeed(3)),\n *   Effect.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(Effect.runSync(result), { x: 2, y: 3, sum: 5 })\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bindTo: {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Effect` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link let_ let}\n   *\n   * @example\n   * import { Effect, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Effect.Do,\n   *   Effect.bind(\"x\", () => Effect.succeed(2)),\n   *   Effect.bind(\"y\", () => Effect.succeed(3)),\n   *   Effect.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(Effect.runSync(result), { x: 2, y: 3, sum: 5 })\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  <N extends string>(name: N): <A, E, R>(self: Effect<A, E, R>) => Effect<{ [K in N]: A }, E, R>\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Effect` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link let_ let}\n   *\n   * @example\n   * import { Effect, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Effect.Do,\n   *   Effect.bind(\"x\", () => Effect.succeed(2)),\n   *   Effect.bind(\"y\", () => Effect.succeed(3)),\n   *   Effect.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(Effect.runSync(result), { x: 2, y: 3, sum: 5 })\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  <A, E, R, N extends string>(self: Effect<A, E, R>, name: N): Effect<{ [K in N]: A }, E, R>\n} = effect.bindTo\n\nconst let_: {\n  <N extends string, A extends object, B>(\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): <E, R>(self: Effect<A, E, R>) => Effect<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E, R>\n  <A extends object, N extends string, E, R, B>(\n    self: Effect<A, E, R>,\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): Effect<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E, R>\n} = effect.let_\n\nexport {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Effect` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link bindTo}\n   *\n   * @example\n   * import { Effect, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Effect.Do,\n   *   Effect.bind(\"x\", () => Effect.succeed(2)),\n   *   Effect.bind(\"y\", () => Effect.succeed(3)),\n   *   Effect.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(Effect.runSync(result), { x: 2, y: 3, sum: 5 })\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  let_ as let\n}\n\n// -------------------------------------------------------------------------------------\n// conversions\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns an effect whose failure and success have been lifted into an\n * `Either`. The resulting effect cannot fail, because the failure case has\n * been exposed as part of the `Either` success case.\n *\n * This method is useful for recovering from effects that may fail.\n *\n * The error parameter of the returned `Effect` is `never`, since it is\n * guaranteed the effect does not model failure.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const either: <A, E, R>(self: Effect<A, E, R>) => Effect<Either.Either<A, E>, never, R> = core.either\n\n/**\n * @since 2.0.0\n * @category conversions\n */\nexport const exit: <A, E, R>(self: Effect<A, E, R>) => Effect<Exit.Exit<A, E>, never, R> = core.exit\n\n/**\n * Returns an effect that will succeed or fail the specified `Deferred` based\n * upon the result of the effect. Also synchronizes interruption, so if the\n * provided effect is interrupted, the specified `Deferred` will be interrupted\n * as well.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const intoDeferred: {\n  /**\n   * Returns an effect that will succeed or fail the specified `Deferred` based\n   * upon the result of the effect. Also synchronizes interruption, so if the\n   * provided effect is interrupted, the specified `Deferred` will be interrupted\n   * as well.\n   *\n   * @since 2.0.0\n   * @category conversions\n   */\n  <A, E>(deferred: Deferred.Deferred<A, E>): <R>(self: Effect<A, E, R>) => Effect<boolean, never, R>\n  /**\n   * Returns an effect that will succeed or fail the specified `Deferred` based\n   * upon the result of the effect. Also synchronizes interruption, so if the\n   * provided effect is interrupted, the specified `Deferred` will be interrupted\n   * as well.\n   *\n   * @since 2.0.0\n   * @category conversions\n   */\n  <A, E, R>(self: Effect<A, E, R>, deferred: Deferred.Deferred<A, E>): Effect<boolean, never, R>\n} = core.intoDeferred\n\n/**\n * Executes this effect, skipping the error but returning optionally the\n * success.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const option: <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, never, R> = effect.option\n\n// -------------------------------------------------------------------------------------\n// filtering & conditionals\n// -------------------------------------------------------------------------------------\n\nconst if_: {\n  <A1, E1, R1, A2, E2, R2>(\n    options: { readonly onTrue: LazyArg<Effect<A1, E1, R1>>; readonly onFalse: LazyArg<Effect<A2, E2, R2>> }\n  ): <E = never, R = never>(self: boolean | Effect<boolean, E, R>) => Effect<A1 | A2, E1 | E2 | E, R1 | R2 | R>\n  <A1, E1, R1, A2, E2, R2, E = never, R = never>(\n    self: boolean | Effect<boolean, E, R>,\n    options: { readonly onTrue: LazyArg<Effect<A1, E1, R1>>; readonly onFalse: LazyArg<Effect<A2, E2, R2>> }\n  ): Effect<A1 | A2, E1 | E2 | E, R1 | R2 | R>\n} = core.if_\n\nexport {\n  /**\n   * Runs `onTrue` if the result of `self` is `true` and `onFalse` otherwise.\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  if_ as if\n}\n\n/**\n * Filter the specified effect with the provided function, dying with specified\n * defect if the predicate fails.\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const filterOrDie: {\n  /**\n   * Filter the specified effect with the provided function, dying with specified\n   * defect if the predicate fails.\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>,\n    orDieWith: (a: NoInfer<A>) => unknown\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, E, R>\n  /**\n   * Filter the specified effect with the provided function, dying with specified\n   * defect if the predicate fails.\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A>(\n    predicate: Predicate<NoInfer<A>>,\n    orDieWith: (a: NoInfer<A>) => unknown\n  ): <E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Filter the specified effect with the provided function, dying with specified\n   * defect if the predicate fails.\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, E, R, B extends A>(\n    self: Effect<A, E, R>,\n    refinement: Refinement<A, B>,\n    orDieWith: (a: A) => unknown\n  ): Effect<B, E, R>\n  /**\n   * Filter the specified effect with the provided function, dying with specified\n   * defect if the predicate fails.\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, E, R>(\n    self: Effect<A, E, R>,\n    predicate: Predicate<A>,\n    orDieWith: (a: A) => unknown\n  ): Effect<A, E, R>\n} = effect.filterOrDie\n\n/**\n * Filter the specified effect with the provided function, dying with specified\n * message if the predicate fails.\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const filterOrDieMessage: {\n  /**\n   * Filter the specified effect with the provided function, dying with specified\n   * message if the predicate fails.\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>,\n    message: string\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, E, R>\n  /**\n   * Filter the specified effect with the provided function, dying with specified\n   * message if the predicate fails.\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A>(predicate: Predicate<NoInfer<A>>, message: string): <E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Filter the specified effect with the provided function, dying with specified\n   * message if the predicate fails.\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, E, R, B extends A>(self: Effect<A, E, R>, refinement: Refinement<A, B>, message: string): Effect<B, E, R>\n  /**\n   * Filter the specified effect with the provided function, dying with specified\n   * message if the predicate fails.\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, E, R>(self: Effect<A, E, R>, predicate: Predicate<A>, message: string): Effect<A, E, R>\n} = effect.filterOrDieMessage\n\n/**\n * Filters the specified effect with the provided function returning the value\n * of the effect if it is successful, otherwise returns the value of `orElse`.\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const filterOrElse: {\n  /**\n   * Filters the specified effect with the provided function returning the value\n   * of the effect if it is successful, otherwise returns the value of `orElse`.\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, B extends A, C, E2, R2>(\n    refinement: Refinement<NoInfer<A>, B>,\n    orElse: (a: NoInfer<A>) => Effect<C, E2, R2>\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B | C, E2 | E, R2 | R>\n  /**\n   * Filters the specified effect with the provided function returning the value\n   * of the effect if it is successful, otherwise returns the value of `orElse`.\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, B, E2, R2>(\n    predicate: Predicate<NoInfer<A>>,\n    orElse: (a: NoInfer<A>) => Effect<B, E2, R2>\n  ): <E, R>(self: Effect<A, E, R>) => Effect<A | B, E2 | E, R2 | R>\n  /**\n   * Filters the specified effect with the provided function returning the value\n   * of the effect if it is successful, otherwise returns the value of `orElse`.\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, E, R, B extends A, C, E2, R2>(\n    self: Effect<A, E, R>,\n    refinement: Refinement<A, B>,\n    orElse: (a: A) => Effect<C, E2, R2>\n  ): Effect<B | C, E | E2, R | R2>\n  /**\n   * Filters the specified effect with the provided function returning the value\n   * of the effect if it is successful, otherwise returns the value of `orElse`.\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, E, R, B, E2, R2>(\n    self: Effect<A, E, R>,\n    predicate: Predicate<A>,\n    orElse: (a: A) => Effect<B, E2, R2>\n  ): Effect<A | B, E | E2, R | R2>\n} = effect.filterOrElse\n\n/**\n * Filter the specified effect with the provided function, failing with specified\n * error if the predicate fails.\n *\n * In addition to the filtering capabilities discussed earlier, you have the option to further\n * refine and narrow down the type of the success channel by providing a\n * [user-defined type guard](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates).\n * Let's explore this concept through an example:\n *\n * @example\n * import { Effect, pipe } from \"effect\"\n *\n * // Define a user interface\n * interface User {\n *   readonly name: string\n * }\n *\n * // Assume an asynchronous authentication function\n * declare const auth: () => Promise<User | null>\n *\n * const program = pipe(\n *   Effect.promise(() => auth()),\n *   Effect.filterOrFail(\n *     // Define a guard to narrow down the type\n *     (user): user is User => user !== null,\n *     () => new Error(\"Unauthorized\")\n *   ),\n *   Effect.map((user) => user.name) // The 'user' here has type `User`, not `User | null`\n * )\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const filterOrFail: {\n  /**\n   * Filter the specified effect with the provided function, failing with specified\n   * error if the predicate fails.\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the option to further\n   * refine and narrow down the type of the success channel by providing a\n   * [user-defined type guard](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates).\n   * Let's explore this concept through an example:\n   *\n   * @example\n   * import { Effect, pipe } from \"effect\"\n   *\n   * // Define a user interface\n   * interface User {\n   *   readonly name: string\n   * }\n   *\n   * // Assume an asynchronous authentication function\n   * declare const auth: () => Promise<User | null>\n   *\n   * const program = pipe(\n   *   Effect.promise(() => auth()),\n   *   Effect.filterOrFail(\n   *     // Define a guard to narrow down the type\n   *     (user): user is User => user !== null,\n   *     () => new Error(\"Unauthorized\")\n   *   ),\n   *   Effect.map((user) => user.name) // The 'user' here has type `User`, not `User | null`\n   * )\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, B extends A, E2>(\n    refinement: Refinement<NoInfer<A>, B>,\n    orFailWith: (a: NoInfer<A>) => E2\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, E2 | E, R>\n  /**\n   * Filter the specified effect with the provided function, failing with specified\n   * error if the predicate fails.\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the option to further\n   * refine and narrow down the type of the success channel by providing a\n   * [user-defined type guard](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates).\n   * Let's explore this concept through an example:\n   *\n   * @example\n   * import { Effect, pipe } from \"effect\"\n   *\n   * // Define a user interface\n   * interface User {\n   *   readonly name: string\n   * }\n   *\n   * // Assume an asynchronous authentication function\n   * declare const auth: () => Promise<User | null>\n   *\n   * const program = pipe(\n   *   Effect.promise(() => auth()),\n   *   Effect.filterOrFail(\n   *     // Define a guard to narrow down the type\n   *     (user): user is User => user !== null,\n   *     () => new Error(\"Unauthorized\")\n   *   ),\n   *   Effect.map((user) => user.name) // The 'user' here has type `User`, not `User | null`\n   * )\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, E2>(\n    predicate: Predicate<NoInfer<A>>,\n    orFailWith: (a: NoInfer<A>) => E2\n  ): <E, R>(self: Effect<A, E, R>) => Effect<A, E2 | E, R>\n  /**\n   * Filter the specified effect with the provided function, failing with specified\n   * error if the predicate fails.\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the option to further\n   * refine and narrow down the type of the success channel by providing a\n   * [user-defined type guard](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates).\n   * Let's explore this concept through an example:\n   *\n   * @example\n   * import { Effect, pipe } from \"effect\"\n   *\n   * // Define a user interface\n   * interface User {\n   *   readonly name: string\n   * }\n   *\n   * // Assume an asynchronous authentication function\n   * declare const auth: () => Promise<User | null>\n   *\n   * const program = pipe(\n   *   Effect.promise(() => auth()),\n   *   Effect.filterOrFail(\n   *     // Define a guard to narrow down the type\n   *     (user): user is User => user !== null,\n   *     () => new Error(\"Unauthorized\")\n   *   ),\n   *   Effect.map((user) => user.name) // The 'user' here has type `User`, not `User | null`\n   * )\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, Cause.NoSuchElementException | E, R>\n  /**\n   * Filter the specified effect with the provided function, failing with specified\n   * error if the predicate fails.\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the option to further\n   * refine and narrow down the type of the success channel by providing a\n   * [user-defined type guard](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates).\n   * Let's explore this concept through an example:\n   *\n   * @example\n   * import { Effect, pipe } from \"effect\"\n   *\n   * // Define a user interface\n   * interface User {\n   *   readonly name: string\n   * }\n   *\n   * // Assume an asynchronous authentication function\n   * declare const auth: () => Promise<User | null>\n   *\n   * const program = pipe(\n   *   Effect.promise(() => auth()),\n   *   Effect.filterOrFail(\n   *     // Define a guard to narrow down the type\n   *     (user): user is User => user !== null,\n   *     () => new Error(\"Unauthorized\")\n   *   ),\n   *   Effect.map((user) => user.name) // The 'user' here has type `User`, not `User | null`\n   * )\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): <E, R>(self: Effect<A, E, R>) => Effect<A, Cause.NoSuchElementException | E, R>\n  /**\n   * Filter the specified effect with the provided function, failing with specified\n   * error if the predicate fails.\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the option to further\n   * refine and narrow down the type of the success channel by providing a\n   * [user-defined type guard](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates).\n   * Let's explore this concept through an example:\n   *\n   * @example\n   * import { Effect, pipe } from \"effect\"\n   *\n   * // Define a user interface\n   * interface User {\n   *   readonly name: string\n   * }\n   *\n   * // Assume an asynchronous authentication function\n   * declare const auth: () => Promise<User | null>\n   *\n   * const program = pipe(\n   *   Effect.promise(() => auth()),\n   *   Effect.filterOrFail(\n   *     // Define a guard to narrow down the type\n   *     (user): user is User => user !== null,\n   *     () => new Error(\"Unauthorized\")\n   *   ),\n   *   Effect.map((user) => user.name) // The 'user' here has type `User`, not `User | null`\n   * )\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, E, R, B extends A, E2>(\n    self: Effect<A, E, R>,\n    refinement: Refinement<A, B>,\n    orFailWith: (a: A) => E2\n  ): Effect<B, E | E2, R>\n  /**\n   * Filter the specified effect with the provided function, failing with specified\n   * error if the predicate fails.\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the option to further\n   * refine and narrow down the type of the success channel by providing a\n   * [user-defined type guard](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates).\n   * Let's explore this concept through an example:\n   *\n   * @example\n   * import { Effect, pipe } from \"effect\"\n   *\n   * // Define a user interface\n   * interface User {\n   *   readonly name: string\n   * }\n   *\n   * // Assume an asynchronous authentication function\n   * declare const auth: () => Promise<User | null>\n   *\n   * const program = pipe(\n   *   Effect.promise(() => auth()),\n   *   Effect.filterOrFail(\n   *     // Define a guard to narrow down the type\n   *     (user): user is User => user !== null,\n   *     () => new Error(\"Unauthorized\")\n   *   ),\n   *   Effect.map((user) => user.name) // The 'user' here has type `User`, not `User | null`\n   * )\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, E, R, E2>(self: Effect<A, E, R>, predicate: Predicate<A>, orFailWith: (a: A) => E2): Effect<A, E | E2, R>\n  /**\n   * Filter the specified effect with the provided function, failing with specified\n   * error if the predicate fails.\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the option to further\n   * refine and narrow down the type of the success channel by providing a\n   * [user-defined type guard](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates).\n   * Let's explore this concept through an example:\n   *\n   * @example\n   * import { Effect, pipe } from \"effect\"\n   *\n   * // Define a user interface\n   * interface User {\n   *   readonly name: string\n   * }\n   *\n   * // Assume an asynchronous authentication function\n   * declare const auth: () => Promise<User | null>\n   *\n   * const program = pipe(\n   *   Effect.promise(() => auth()),\n   *   Effect.filterOrFail(\n   *     // Define a guard to narrow down the type\n   *     (user): user is User => user !== null,\n   *     () => new Error(\"Unauthorized\")\n   *   ),\n   *   Effect.map((user) => user.name) // The 'user' here has type `User`, not `User | null`\n   * )\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, E, R, B extends A>(\n    self: Effect<A, E, R>,\n    refinement: Refinement<A, B>\n  ): Effect<B, E | Cause.NoSuchElementException, R>\n  /**\n   * Filter the specified effect with the provided function, failing with specified\n   * error if the predicate fails.\n   *\n   * In addition to the filtering capabilities discussed earlier, you have the option to further\n   * refine and narrow down the type of the success channel by providing a\n   * [user-defined type guard](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates).\n   * Let's explore this concept through an example:\n   *\n   * @example\n   * import { Effect, pipe } from \"effect\"\n   *\n   * // Define a user interface\n   * interface User {\n   *   readonly name: string\n   * }\n   *\n   * // Assume an asynchronous authentication function\n   * declare const auth: () => Promise<User | null>\n   *\n   * const program = pipe(\n   *   Effect.promise(() => auth()),\n   *   Effect.filterOrFail(\n   *     // Define a guard to narrow down the type\n   *     (user): user is User => user !== null,\n   *     () => new Error(\"Unauthorized\")\n   *   ),\n   *   Effect.map((user) => user.name) // The 'user' here has type `User`, not `User | null`\n   * )\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, E, R>(self: Effect<A, E, R>, predicate: Predicate<A>): Effect<A, E | Cause.NoSuchElementException, R>\n} = effect.filterOrFail\n\n/**\n * The moral equivalent of `if (!p) exp`.\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const unless: {\n  /**\n   * The moral equivalent of `if (!p) exp`.\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  (condition: LazyArg<boolean>): <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, E, R>\n  /**\n   * The moral equivalent of `if (!p) exp`.\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, E, R>(self: Effect<A, E, R>, condition: LazyArg<boolean>): Effect<Option.Option<A>, E, R>\n} = effect.unless\n\n/**\n * The moral equivalent of `if (!p) exp` when `p` has side-effects.\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const unlessEffect: {\n  /**\n   * The moral equivalent of `if (!p) exp` when `p` has side-effects.\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <E2, R2>(\n    condition: Effect<boolean, E2, R2>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, E2 | E, R2 | R>\n  /**\n   * The moral equivalent of `if (!p) exp` when `p` has side-effects.\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, E, R, E2, R2>(self: Effect<A, E, R>, condition: Effect<boolean, E2, R2>): Effect<Option.Option<A>, E | E2, R | R2>\n} = effect.unlessEffect\n\n/**\n * The moral equivalent of `if (p) exp`.\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const when: {\n  /**\n   * The moral equivalent of `if (p) exp`.\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  (condition: LazyArg<boolean>): <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, E, R>\n  /**\n   * The moral equivalent of `if (p) exp`.\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, E, R>(self: Effect<A, E, R>, condition: LazyArg<boolean>): Effect<Option.Option<A>, E, R>\n} = effect.when\n\n/**\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const whenEffect: {\n  /**\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <E, R>(\n    condition: Effect<boolean, E, R>\n  ): <A, E2, R2>(effect: Effect<A, E2, R2>) => Effect<Option.Option<A>, E | E2, R | R2>\n  /**\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, E2, R2, E, R>(self: Effect<A, E2, R2>, condition: Effect<boolean, E, R>): Effect<Option.Option<A>, E2 | E, R2 | R>\n} = core.whenEffect\n\n/**\n * Executes this workflow when value of the specified `FiberRef` satisfies the\n * predicate.\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const whenFiberRef: {\n  /**\n   * Executes this workflow when value of the specified `FiberRef` satisfies the\n   * predicate.\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <S>(\n    fiberRef: FiberRef.FiberRef<S>,\n    predicate: Predicate<S>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<[S, Option.Option<A>], E, R>\n  /**\n   * Executes this workflow when value of the specified `FiberRef` satisfies the\n   * predicate.\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, E, R, S>(\n    self: Effect<A, E, R>,\n    fiberRef: FiberRef.FiberRef<S>,\n    predicate: Predicate<S>\n  ): Effect<[S, Option.Option<A>], E, R>\n} = effect.whenFiberRef\n\n/**\n * Executes this workflow when the value of the `Ref` satisfies the predicate.\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const whenRef: {\n  /**\n   * Executes this workflow when the value of the `Ref` satisfies the predicate.\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <S>(ref: Ref.Ref<S>, predicate: Predicate<S>): <A, E, R>(self: Effect<A, E, R>) => Effect<[S, Option.Option<A>], E, R>\n  /**\n   * Executes this workflow when the value of the `Ref` satisfies the predicate.\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, E, R, S>(self: Effect<A, E, R>, ref: Ref.Ref<S>, predicate: Predicate<S>): Effect<[S, Option.Option<A>], E, R>\n} = effect.whenRef\n\n// -------------------------------------------------------------------------------------\n// sequencing\n// -------------------------------------------------------------------------------------\n\n/**\n * This function is a pipeable operator that maps over an `Effect` value,\n * flattening the result of the mapping function into a new `Effect` value.\n *\n * @param f - The mapping function to apply to the `Effect` value.\n * This function must return another `Effect` value.\n *\n * @returns A new `Effect` value that is the result of flattening the\n * mapped `Effect` value.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  // -------------------------------------------------------------------------------------\n  // sequencing\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * This function is a pipeable operator that maps over an `Effect` value,\n   * flattening the result of the mapping function into a new `Effect` value.\n   *\n   * @param f - The mapping function to apply to the `Effect` value.\n   * This function must return another `Effect` value.\n   *\n   * @returns A new `Effect` value that is the result of flattening the\n   * mapped `Effect` value.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, B, E1, R1>(f: (a: A) => Effect<B, E1, R1>): <E, R>(self: Effect<A, E, R>) => Effect<B, E1 | E, R1 | R>\n  // -------------------------------------------------------------------------------------\n  // sequencing\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * This function is a pipeable operator that maps over an `Effect` value,\n   * flattening the result of the mapping function into a new `Effect` value.\n   *\n   * @param f - The mapping function to apply to the `Effect` value.\n   * This function must return another `Effect` value.\n   *\n   * @returns A new `Effect` value that is the result of flattening the\n   * mapped `Effect` value.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, R, B, E1, R1>(self: Effect<A, E, R>, f: (a: A) => Effect<B, E1, R1>): Effect<B, E | E1, R | R1>\n} = core.flatMap\n\n/**\n * Executes a sequence of two actions, typically two `Effect`s, where the second action can depend on the result of the first action.\n *\n * The `that` action can take various forms:\n *\n * - a value\n * - a function returning a value\n * - a promise\n * - a function returning a promise\n * - an effect\n * - a function returning an effect\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen(1))), 1)\n * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen((s) => s.length))), 2)\n *\n * assert.deepStrictEqual(await Effect.runPromise(Effect.succeed(\"aa\").pipe(Effect.andThen(Promise.resolve(1)))), 1)\n * assert.deepStrictEqual(await Effect.runPromise(Effect.succeed(\"aa\").pipe(Effect.andThen((s) => Promise.resolve(s.length)))), 2)\n *\n * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen(Effect.succeed(1)))), 1)\n * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen((s) => Effect.succeed(s.length)))), 2)\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const andThen: {\n  /**\n   * Executes a sequence of two actions, typically two `Effect`s, where the second action can depend on the result of the first action.\n   *\n   * The `that` action can take various forms:\n   *\n   * - a value\n   * - a function returning a value\n   * - a promise\n   * - a function returning a promise\n   * - an effect\n   * - a function returning an effect\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen(1))), 1)\n   * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen((s) => s.length))), 2)\n   *\n   * assert.deepStrictEqual(await Effect.runPromise(Effect.succeed(\"aa\").pipe(Effect.andThen(Promise.resolve(1)))), 1)\n   * assert.deepStrictEqual(await Effect.runPromise(Effect.succeed(\"aa\").pipe(Effect.andThen((s) => Promise.resolve(s.length)))), 2)\n   *\n   * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen(Effect.succeed(1)))), 1)\n   * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen((s) => Effect.succeed(s.length)))), 2)\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, X>(f: (a: NoInfer<A>) => X): <E, R>(\n    self: Effect<A, E, R>\n  ) => [X] extends [Effect<infer A1, infer E1, infer R1>] ? Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect<A1, E | Cause.UnknownException, R>\n    : Effect<X, E, R>\n  /**\n   * Executes a sequence of two actions, typically two `Effect`s, where the second action can depend on the result of the first action.\n   *\n   * The `that` action can take various forms:\n   *\n   * - a value\n   * - a function returning a value\n   * - a promise\n   * - a function returning a promise\n   * - an effect\n   * - a function returning an effect\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen(1))), 1)\n   * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen((s) => s.length))), 2)\n   *\n   * assert.deepStrictEqual(await Effect.runPromise(Effect.succeed(\"aa\").pipe(Effect.andThen(Promise.resolve(1)))), 1)\n   * assert.deepStrictEqual(await Effect.runPromise(Effect.succeed(\"aa\").pipe(Effect.andThen((s) => Promise.resolve(s.length)))), 2)\n   *\n   * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen(Effect.succeed(1)))), 1)\n   * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen((s) => Effect.succeed(s.length)))), 2)\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <X>(f: NotFunction<X>): <A, E, R>(\n    self: Effect<A, E, R>\n  ) => [X] extends [Effect<infer A1, infer E1, infer R1>] ? Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect<A1, E | Cause.UnknownException, R>\n    : Effect<X, E, R>\n  /**\n   * Executes a sequence of two actions, typically two `Effect`s, where the second action can depend on the result of the first action.\n   *\n   * The `that` action can take various forms:\n   *\n   * - a value\n   * - a function returning a value\n   * - a promise\n   * - a function returning a promise\n   * - an effect\n   * - a function returning an effect\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen(1))), 1)\n   * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen((s) => s.length))), 2)\n   *\n   * assert.deepStrictEqual(await Effect.runPromise(Effect.succeed(\"aa\").pipe(Effect.andThen(Promise.resolve(1)))), 1)\n   * assert.deepStrictEqual(await Effect.runPromise(Effect.succeed(\"aa\").pipe(Effect.andThen((s) => Promise.resolve(s.length)))), 2)\n   *\n   * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen(Effect.succeed(1)))), 1)\n   * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen((s) => Effect.succeed(s.length)))), 2)\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, R, X>(\n    self: Effect<A, E, R>,\n    f: (a: NoInfer<A>) => X\n  ): [X] extends [Effect<infer A1, infer E1, infer R1>] ? Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect<A1, E | Cause.UnknownException, R>\n    : Effect<X, E, R>\n  /**\n   * Executes a sequence of two actions, typically two `Effect`s, where the second action can depend on the result of the first action.\n   *\n   * The `that` action can take various forms:\n   *\n   * - a value\n   * - a function returning a value\n   * - a promise\n   * - a function returning a promise\n   * - an effect\n   * - a function returning an effect\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen(1))), 1)\n   * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen((s) => s.length))), 2)\n   *\n   * assert.deepStrictEqual(await Effect.runPromise(Effect.succeed(\"aa\").pipe(Effect.andThen(Promise.resolve(1)))), 1)\n   * assert.deepStrictEqual(await Effect.runPromise(Effect.succeed(\"aa\").pipe(Effect.andThen((s) => Promise.resolve(s.length)))), 2)\n   *\n   * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen(Effect.succeed(1)))), 1)\n   * assert.deepStrictEqual(Effect.runSync(Effect.succeed(\"aa\").pipe(Effect.andThen((s) => Effect.succeed(s.length)))), 2)\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, R, X>(\n    self: Effect<A, E, R>,\n    f: NotFunction<X>\n  ): [X] extends [Effect<infer A1, infer E1, infer R1>] ? Effect<A1, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer A1>] ? Effect<A1, E | Cause.UnknownException, R>\n    : Effect<X, E, R>\n} = core.andThen\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatten: <A, E1, R1, E, R>(self: Effect<Effect<A, E1, R1>, E, R>) => Effect<A, E | E1, R | R1> =\n  core.flatten\n\n/**\n * Returns an effect that races this effect with all the specified effects,\n * yielding the value of the first effect to succeed with a value. Losers of\n * the race will be interrupted immediately\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const raceAll: <Eff extends Effect<any, any, any>>(\n  all: Iterable<Eff>\n) => Effect<Effect.Success<Eff>, Effect.Error<Eff>, Effect.Context<Eff>> = fiberRuntime.raceAll\n\n/**\n * Returns an effect that races this effect with the specified effect,\n * returning the first successful `A` from the faster side. If one effect\n * succeeds, the other will be interrupted. If neither succeeds, then the\n * effect will fail with some error.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const race: {\n  /**\n   * Returns an effect that races this effect with the specified effect,\n   * returning the first successful `A` from the faster side. If one effect\n   * succeeds, the other will be interrupted. If neither succeeds, then the\n   * effect will fail with some error.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A2, E2, R2>(that: Effect<A2, E2, R2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2 | E, R2 | R>\n  /**\n   * Returns an effect that races this effect with the specified effect,\n   * returning the first successful `A` from the faster side. If one effect\n   * succeeds, the other will be interrupted. If neither succeeds, then the\n   * effect will fail with some error.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, R, A2, E2, R2>(self: Effect<A, E, R>, that: Effect<A2, E2, R2>): Effect<A | A2, E | E2, R | R2>\n} = fiberRuntime.race\n\n/**\n * Returns an effect that races this effect with the specified effect,\n * yielding the first result to complete, whether by success or failure. If\n * neither effect completes, then the composed effect will not complete.\n *\n * WARNING: The raced effect will safely interrupt the \"loser\", but will not\n * resume until the loser has been cleanly terminated. If early return is\n * desired, then instead of performing `l raceFirst r`, perform\n * `l.disconnect raceFirst r.disconnect`, which disconnects left and right\n * interrupt signal, allowing a fast return, with interruption performed\n * in the background.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const raceFirst: {\n  /**\n   * Returns an effect that races this effect with the specified effect,\n   * yielding the first result to complete, whether by success or failure. If\n   * neither effect completes, then the composed effect will not complete.\n   *\n   * WARNING: The raced effect will safely interrupt the \"loser\", but will not\n   * resume until the loser has been cleanly terminated. If early return is\n   * desired, then instead of performing `l raceFirst r`, perform\n   * `l.disconnect raceFirst r.disconnect`, which disconnects left and right\n   * interrupt signal, allowing a fast return, with interruption performed\n   * in the background.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A2, E2, R2>(that: Effect<A2, E2, R2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2 | E, R2 | R>\n  /**\n   * Returns an effect that races this effect with the specified effect,\n   * yielding the first result to complete, whether by success or failure. If\n   * neither effect completes, then the composed effect will not complete.\n   *\n   * WARNING: The raced effect will safely interrupt the \"loser\", but will not\n   * resume until the loser has been cleanly terminated. If early return is\n   * desired, then instead of performing `l raceFirst r`, perform\n   * `l.disconnect raceFirst r.disconnect`, which disconnects left and right\n   * interrupt signal, allowing a fast return, with interruption performed\n   * in the background.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, R, A2, E2, R2>(self: Effect<A, E, R>, that: Effect<A2, E2, R2>): Effect<A | A2, E | E2, R | R2>\n} = circular.raceFirst\n\n/**\n * Returns an effect that races this effect with the specified effect, calling\n * the specified finisher as soon as one result or the other has been computed.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const raceWith: {\n  /**\n   * Returns an effect that races this effect with the specified effect, calling\n   * the specified finisher as soon as one result or the other has been computed.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A1, E1, R1, E, A, A2, E2, R2, A3, E3, R3>(\n    other: Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfDone: (exit: Exit.Exit<A, E>, fiber: Fiber.Fiber<A1, E1>) => Effect<A2, E2, R2>\n      readonly onOtherDone: (exit: Exit.Exit<A1, E1>, fiber: Fiber.Fiber<A, E>) => Effect<A3, E3, R3>\n    }\n  ): <R>(self: Effect<A, E, R>) => Effect<A2 | A3, E2 | E3, R1 | R2 | R3 | R>\n  /**\n   * Returns an effect that races this effect with the specified effect, calling\n   * the specified finisher as soon as one result or the other has been computed.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, R, A1, E1, R1, A2, E2, R2, A3, E3, R3>(\n    self: Effect<A, E, R>,\n    other: Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfDone: (exit: Exit.Exit<A, E>, fiber: Fiber.Fiber<A1, E1>) => Effect<A2, E2, R2>\n      readonly onOtherDone: (exit: Exit.Exit<A1, E1>, fiber: Fiber.Fiber<A, E>) => Effect<A3, E3, R3>\n    }\n  ): Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>\n} = fiberRuntime.raceWith\n\n/**\n * Summarizes a effect by computing some value before and after execution, and\n * then combining the values to produce a summary, together with the result of\n * execution.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const summarized: {\n  /**\n   * Summarizes a effect by computing some value before and after execution, and\n   * then combining the values to produce a summary, together with the result of\n   * execution.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <B, E2, R2, C>(\n    summary: Effect<B, E2, R2>,\n    f: (start: B, end: B) => C\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<[C, A], E2 | E, R2 | R>\n  /**\n   * Summarizes a effect by computing some value before and after execution, and\n   * then combining the values to produce a summary, together with the result of\n   * execution.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, R, B, E2, R2, C>(\n    self: Effect<A, E, R>,\n    summary: Effect<B, E2, R2>,\n    f: (start: B, end: B) => C\n  ): Effect<[C, A], E2 | E, R2 | R>\n} = effect.summarized\n\n/**\n * @since 2.0.0\n * @category sequencing\n */\nexport const tap: {\n  /**\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, X>(f: (a: NoInfer<A>) => X): <E, R>(\n    self: Effect<A, E, R>\n  ) => [X] extends [Effect<infer _A1, infer E1, infer R1>] ? Effect<A, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer _A1>] ? Effect<A, E | Cause.UnknownException, R>\n    : Effect<A, E, R>\n  /**\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, X, E1, R1>(f: (a: NoInfer<A>) => Effect<X, E1, R1>, options: { onlyEffect: true }): <E, R>(\n    self: Effect<A, E, R>\n  ) => Effect<A, E | E1, R | R1>\n  /**\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <X>(f: NotFunction<X>): <A, E, R>(\n    self: Effect<A, E, R>\n  ) => [X] extends [Effect<infer _A1, infer E1, infer R1>] ? Effect<A, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer _A1>] ? Effect<A, E | Cause.UnknownException, R>\n    : Effect<A, E, R>\n  /**\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <X, E1, R1>(f: Effect<X, E1, R1>, options: { onlyEffect: true }): <A, E, R>(\n    self: Effect<A, E, R>\n  ) => Effect<A, E | E1, R | R1>\n  /**\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, R, X>(\n    self: Effect<A, E, R>,\n    f: (a: NoInfer<A>) => X\n  ): [X] extends [Effect<infer _A1, infer E1, infer R1>] ? Effect<A, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer _A1>] ? Effect<A, E | Cause.UnknownException, R>\n    : Effect<A, E, R>\n  /**\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, R, X, E1, R1>(\n    self: Effect<A, E, R>,\n    f: (a: NoInfer<A>) => Effect<X, E1, R1>,\n    options: { onlyEffect: true }\n  ): Effect<A, E | E1, R | R1>\n  /**\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, R, X>(\n    self: Effect<A, E, R>,\n    f: NotFunction<X>\n  ): [X] extends [Effect<infer _A1, infer E1, infer R1>] ? Effect<A, E | E1, R | R1>\n    : [X] extends [PromiseLike<infer _A1>] ? Effect<A, E | Cause.UnknownException, R>\n    : Effect<A, E, R>\n  /**\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, R, X, E1, R1>(\n    self: Effect<A, E, R>,\n    f: Effect<X, E1, R1>,\n    options: { onlyEffect: true }\n  ): Effect<A, E | E1, R | R1>\n} = core.tap\n\n/**\n * Inspects both success and failure outcomes of an effect, performing different actions based on the result.\n *\n * @example\n * import { Effect, Random, Console } from \"effect\"\n *\n * // Simulate an effect that might fail\n * const task = Effect.filterOrFail(\n *   Random.nextRange(-1, 1),\n *   (n) => n >= 0,\n *   () => \"random number is negative\"\n * )\n *\n * // Define an effect that logs both success and failure outcomes of the 'task'\n * const tapping = Effect.tapBoth(task, {\n *   onFailure: (error) => Console.log(`failure: ${error}`),\n *   onSuccess: (randomNumber) => Console.log(`random number: ${randomNumber}`)\n * })\n *\n * Effect.runFork(tapping)\n * // Example Output:\n * // failure: random number is negative\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapBoth: {\n  /**\n   * Inspects both success and failure outcomes of an effect, performing different actions based on the result.\n   *\n   * @example\n   * import { Effect, Random, Console } from \"effect\"\n   *\n   * // Simulate an effect that might fail\n   * const task = Effect.filterOrFail(\n   *   Random.nextRange(-1, 1),\n   *   (n) => n >= 0,\n   *   () => \"random number is negative\"\n   * )\n   *\n   * // Define an effect that logs both success and failure outcomes of the 'task'\n   * const tapping = Effect.tapBoth(task, {\n   *   onFailure: (error) => Console.log(`failure: ${error}`),\n   *   onSuccess: (randomNumber) => Console.log(`random number: ${randomNumber}`)\n   * })\n   *\n   * Effect.runFork(tapping)\n   * // Example Output:\n   * // failure: random number is negative\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <E, X, E2, R2, A, X1, E3, R3>(\n    options: {\n      readonly onFailure: (e: NoInfer<E>) => Effect<X, E2, R2>\n      readonly onSuccess: (a: NoInfer<A>) => Effect<X1, E3, R3>\n    }\n  ): <R>(self: Effect<A, E, R>) => Effect<A, E | E2 | E3, R2 | R3 | R>\n  /**\n   * Inspects both success and failure outcomes of an effect, performing different actions based on the result.\n   *\n   * @example\n   * import { Effect, Random, Console } from \"effect\"\n   *\n   * // Simulate an effect that might fail\n   * const task = Effect.filterOrFail(\n   *   Random.nextRange(-1, 1),\n   *   (n) => n >= 0,\n   *   () => \"random number is negative\"\n   * )\n   *\n   * // Define an effect that logs both success and failure outcomes of the 'task'\n   * const tapping = Effect.tapBoth(task, {\n   *   onFailure: (error) => Console.log(`failure: ${error}`),\n   *   onSuccess: (randomNumber) => Console.log(`random number: ${randomNumber}`)\n   * })\n   *\n   * Effect.runFork(tapping)\n   * // Example Output:\n   * // failure: random number is negative\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, R, X, E2, R2, X1, E3, R3>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => Effect<X, E2, R2>\n      readonly onSuccess: (a: A) => Effect<X1, E3, R3>\n    }\n  ): Effect<A, E | E2 | E3, R | R2 | R3>\n} = effect.tapBoth\n\n/**\n * Specifically inspects non-recoverable failures or defects in an effect (i.e., one or more `Die` causes).\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * // Create an effect that is designed to fail, simulating an occurrence of a network error\n * const task1: Effect.Effect<number, string> = Effect.fail(\"NetworkError\")\n *\n * // this won't log anything because is not a defect\n * const tapping1 = Effect.tapDefect(task1, (cause) =>\n *   Console.log(`defect: ${cause}`)\n * )\n *\n * Effect.runFork(tapping1)\n * // No Output\n *\n * // Simulate a severe failure in the system by causing a defect with a specific message.\n * const task2: Effect.Effect<number, string> = Effect.dieMessage(\n *   \"Something went wrong\"\n * )\n *\n * // This will only log defects, not errors\n * const tapping2 = Effect.tapDefect(task2, (cause) =>\n *   Console.log(`defect: ${cause}`)\n * )\n *\n * Effect.runFork(tapping2)\n * // Output:\n * // defect: RuntimeException: Something went wrong\n * //   ... stack trace ...\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapDefect: {\n  /**\n   * Specifically inspects non-recoverable failures or defects in an effect (i.e., one or more `Die` causes).\n   *\n   * @example\n   * import { Effect, Console } from \"effect\"\n   *\n   * // Create an effect that is designed to fail, simulating an occurrence of a network error\n   * const task1: Effect.Effect<number, string> = Effect.fail(\"NetworkError\")\n   *\n   * // this won't log anything because is not a defect\n   * const tapping1 = Effect.tapDefect(task1, (cause) =>\n   *   Console.log(`defect: ${cause}`)\n   * )\n   *\n   * Effect.runFork(tapping1)\n   * // No Output\n   *\n   * // Simulate a severe failure in the system by causing a defect with a specific message.\n   * const task2: Effect.Effect<number, string> = Effect.dieMessage(\n   *   \"Something went wrong\"\n   * )\n   *\n   * // This will only log defects, not errors\n   * const tapping2 = Effect.tapDefect(task2, (cause) =>\n   *   Console.log(`defect: ${cause}`)\n   * )\n   *\n   * Effect.runFork(tapping2)\n   * // Output:\n   * // defect: RuntimeException: Something went wrong\n   * //   ... stack trace ...\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <X, E2, R2>(\n    f: (cause: Cause.Cause<never>) => Effect<X, E2, R2>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E2 | E, R2 | R>\n  /**\n   * Specifically inspects non-recoverable failures or defects in an effect (i.e., one or more `Die` causes).\n   *\n   * @example\n   * import { Effect, Console } from \"effect\"\n   *\n   * // Create an effect that is designed to fail, simulating an occurrence of a network error\n   * const task1: Effect.Effect<number, string> = Effect.fail(\"NetworkError\")\n   *\n   * // this won't log anything because is not a defect\n   * const tapping1 = Effect.tapDefect(task1, (cause) =>\n   *   Console.log(`defect: ${cause}`)\n   * )\n   *\n   * Effect.runFork(tapping1)\n   * // No Output\n   *\n   * // Simulate a severe failure in the system by causing a defect with a specific message.\n   * const task2: Effect.Effect<number, string> = Effect.dieMessage(\n   *   \"Something went wrong\"\n   * )\n   *\n   * // This will only log defects, not errors\n   * const tapping2 = Effect.tapDefect(task2, (cause) =>\n   *   Console.log(`defect: ${cause}`)\n   * )\n   *\n   * Effect.runFork(tapping2)\n   * // Output:\n   * // defect: RuntimeException: Something went wrong\n   * //   ... stack trace ...\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, R, X, E2, R2>(\n    self: Effect<A, E, R>,\n    f: (cause: Cause.Cause<never>) => Effect<X, E2, R2>\n  ): Effect<A, E | E2, R | R2>\n} = effect.tapDefect\n\n/**\n * Executes an effectful operation to inspect the failure of an effect without altering it.\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * // Create an effect that is designed to fail, simulating an occurrence of a network error\n * const task: Effect.Effect<number, string> = Effect.fail(\"NetworkError\")\n *\n * // Log the error message if the task fails. This function only executes if there is an error,\n * // providing a method to handle or inspect errors without altering the outcome of the original effect.\n * const tapping = Effect.tapError(task, (error) =>\n *   Console.log(`expected error: ${error}`)\n * )\n *\n * Effect.runFork(tapping)\n * // Output:\n * // expected error: NetworkError\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapError: {\n  /**\n   * Executes an effectful operation to inspect the failure of an effect without altering it.\n   *\n   * @example\n   * import { Effect, Console } from \"effect\"\n   *\n   * // Create an effect that is designed to fail, simulating an occurrence of a network error\n   * const task: Effect.Effect<number, string> = Effect.fail(\"NetworkError\")\n   *\n   * // Log the error message if the task fails. This function only executes if there is an error,\n   * // providing a method to handle or inspect errors without altering the outcome of the original effect.\n   * const tapping = Effect.tapError(task, (error) =>\n   *   Console.log(`expected error: ${error}`)\n   * )\n   *\n   * Effect.runFork(tapping)\n   * // Output:\n   * // expected error: NetworkError\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <E, X, E2, R2>(f: (e: NoInfer<E>) => Effect<X, E2, R2>): <A, R>(self: Effect<A, E, R>) => Effect<A, E | E2, R2 | R>\n  /**\n   * Executes an effectful operation to inspect the failure of an effect without altering it.\n   *\n   * @example\n   * import { Effect, Console } from \"effect\"\n   *\n   * // Create an effect that is designed to fail, simulating an occurrence of a network error\n   * const task: Effect.Effect<number, string> = Effect.fail(\"NetworkError\")\n   *\n   * // Log the error message if the task fails. This function only executes if there is an error,\n   * // providing a method to handle or inspect errors without altering the outcome of the original effect.\n   * const tapping = Effect.tapError(task, (error) =>\n   *   Console.log(`expected error: ${error}`)\n   * )\n   *\n   * Effect.runFork(tapping)\n   * // Output:\n   * // expected error: NetworkError\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, R, X, E2, R2>(self: Effect<A, E, R>, f: (e: E) => Effect<X, E2, R2>): Effect<A, E | E2, R | R2>\n} = effect.tapError\n\n/**\n * Specifically inspects a failure with a particular tag, allowing focused error handling.\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * class NetworkError {\n *   readonly _tag = \"NetworkError\"\n *   constructor(readonly statusCode: number) {}\n * }\n * class ValidationError {\n *   readonly _tag = \"ValidationError\"\n *   constructor(readonly field: string) {}\n * }\n *\n * // Create an effect that is designed to fail, simulating an occurrence of a network error\n * const task: Effect.Effect<number, NetworkError | ValidationError> =\n *   Effect.fail(new NetworkError(504))\n *\n * // Apply an error handling function only to errors tagged as \"NetworkError\",\n * // and log the corresponding status code of the error.\n * const tapping = Effect.tapErrorTag(task, \"NetworkError\", (error) =>\n *   Console.log(`expected error: ${error.statusCode}`)\n * )\n *\n * Effect.runFork(tapping)\n * // Output:\n * // expected error: 504\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapErrorTag: {\n  /**\n   * Specifically inspects a failure with a particular tag, allowing focused error handling.\n   *\n   * @example\n   * import { Effect, Console } from \"effect\"\n   *\n   * class NetworkError {\n   *   readonly _tag = \"NetworkError\"\n   *   constructor(readonly statusCode: number) {}\n   * }\n   * class ValidationError {\n   *   readonly _tag = \"ValidationError\"\n   *   constructor(readonly field: string) {}\n   * }\n   *\n   * // Create an effect that is designed to fail, simulating an occurrence of a network error\n   * const task: Effect.Effect<number, NetworkError | ValidationError> =\n   *   Effect.fail(new NetworkError(504))\n   *\n   * // Apply an error handling function only to errors tagged as \"NetworkError\",\n   * // and log the corresponding status code of the error.\n   * const tapping = Effect.tapErrorTag(task, \"NetworkError\", (error) =>\n   *   Console.log(`expected error: ${error.statusCode}`)\n   * )\n   *\n   * Effect.runFork(tapping)\n   * // Output:\n   * // expected error: 504\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <K extends E extends { _tag: string } ? E[\"_tag\"] : never, E, A1, E1, R1>(\n    k: K,\n    f: (e: NoInfer<Extract<E, { _tag: K }>>) => Effect<A1, E1, R1>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A, E | E1, R1 | R>\n  /**\n   * Specifically inspects a failure with a particular tag, allowing focused error handling.\n   *\n   * @example\n   * import { Effect, Console } from \"effect\"\n   *\n   * class NetworkError {\n   *   readonly _tag = \"NetworkError\"\n   *   constructor(readonly statusCode: number) {}\n   * }\n   * class ValidationError {\n   *   readonly _tag = \"ValidationError\"\n   *   constructor(readonly field: string) {}\n   * }\n   *\n   * // Create an effect that is designed to fail, simulating an occurrence of a network error\n   * const task: Effect.Effect<number, NetworkError | ValidationError> =\n   *   Effect.fail(new NetworkError(504))\n   *\n   * // Apply an error handling function only to errors tagged as \"NetworkError\",\n   * // and log the corresponding status code of the error.\n   * const tapping = Effect.tapErrorTag(task, \"NetworkError\", (error) =>\n   *   Console.log(`expected error: ${error.statusCode}`)\n   * )\n   *\n   * Effect.runFork(tapping)\n   * // Output:\n   * // expected error: 504\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, R, K extends E extends { _tag: string } ? E[\"_tag\"] : never, A1, E1, R1>(\n    self: Effect<A, E, R>,\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Effect<A1, E1, R1>\n  ): Effect<A, E | E1, R | R1>\n} = effect.tapErrorTag\n\n/**\n * Inspects the underlying cause of an effect's failure.\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * // Create an effect that is designed to fail, simulating an occurrence of a network error\n * const task1: Effect.Effect<number, string> = Effect.fail(\"NetworkError\")\n *\n * // This will log the cause of any expected error or defect\n * const tapping1 = Effect.tapErrorCause(task1, (cause) =>\n *   Console.log(`error cause: ${cause}`)\n * )\n *\n * Effect.runFork(tapping1)\n * // Output:\n * // error cause: Error: NetworkError\n *\n * // Simulate a severe failure in the system by causing a defect with a specific message.\n * const task2: Effect.Effect<number, string> = Effect.dieMessage(\n *   \"Something went wrong\"\n * )\n *\n * // This will log the cause of any expected error or defect\n * const tapping2 = Effect.tapErrorCause(task2, (cause) =>\n *   Console.log(`error cause: ${cause}`)\n * )\n *\n * Effect.runFork(tapping2)\n * // Output:\n * // error cause: RuntimeException: Something went wrong\n * //   ... stack trace ...\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapErrorCause: {\n  /**\n   * Inspects the underlying cause of an effect's failure.\n   *\n   * @example\n   * import { Effect, Console } from \"effect\"\n   *\n   * // Create an effect that is designed to fail, simulating an occurrence of a network error\n   * const task1: Effect.Effect<number, string> = Effect.fail(\"NetworkError\")\n   *\n   * // This will log the cause of any expected error or defect\n   * const tapping1 = Effect.tapErrorCause(task1, (cause) =>\n   *   Console.log(`error cause: ${cause}`)\n   * )\n   *\n   * Effect.runFork(tapping1)\n   * // Output:\n   * // error cause: Error: NetworkError\n   *\n   * // Simulate a severe failure in the system by causing a defect with a specific message.\n   * const task2: Effect.Effect<number, string> = Effect.dieMessage(\n   *   \"Something went wrong\"\n   * )\n   *\n   * // This will log the cause of any expected error or defect\n   * const tapping2 = Effect.tapErrorCause(task2, (cause) =>\n   *   Console.log(`error cause: ${cause}`)\n   * )\n   *\n   * Effect.runFork(tapping2)\n   * // Output:\n   * // error cause: RuntimeException: Something went wrong\n   * //   ... stack trace ...\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <E, X, E2, R2>(\n    f: (cause: Cause.Cause<NoInfer<E>>) => Effect<X, E2, R2>\n  ): <A, R>(self: Effect<A, E, R>) => Effect<A, E | E2, R2 | R>\n  /**\n   * Inspects the underlying cause of an effect's failure.\n   *\n   * @example\n   * import { Effect, Console } from \"effect\"\n   *\n   * // Create an effect that is designed to fail, simulating an occurrence of a network error\n   * const task1: Effect.Effect<number, string> = Effect.fail(\"NetworkError\")\n   *\n   * // This will log the cause of any expected error or defect\n   * const tapping1 = Effect.tapErrorCause(task1, (cause) =>\n   *   Console.log(`error cause: ${cause}`)\n   * )\n   *\n   * Effect.runFork(tapping1)\n   * // Output:\n   * // error cause: Error: NetworkError\n   *\n   * // Simulate a severe failure in the system by causing a defect with a specific message.\n   * const task2: Effect.Effect<number, string> = Effect.dieMessage(\n   *   \"Something went wrong\"\n   * )\n   *\n   * // This will log the cause of any expected error or defect\n   * const tapping2 = Effect.tapErrorCause(task2, (cause) =>\n   *   Console.log(`error cause: ${cause}`)\n   * )\n   *\n   * Effect.runFork(tapping2)\n   * // Output:\n   * // error cause: RuntimeException: Something went wrong\n   * //   ... stack trace ...\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, R, X, E2, R2>(\n    self: Effect<A, E, R>,\n    f: (cause: Cause.Cause<E>) => Effect<X, E2, R2>\n  ): Effect<A, E | E2, R | R2>\n} = effect.tapErrorCause\n\n// -------------------------------------------------------------------------------------\n// repetition / recursion\n// -------------------------------------------------------------------------------------\n\n/**\n * Repeats this effect forever (until the first error).\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const forever: <A, E, R>(self: Effect<A, E, R>) => Effect<never, E, R> = effect.forever\n\n/**\n * The `Effect.iterate` function allows you to iterate with an effectful operation. It uses an effectful `body` operation to change the state during each iteration and continues the iteration as long as the `while` function evaluates to `true`:\n *\n * ```ts\n * Effect.iterate(initial, options: { while, body })\n * ```\n *\n * We can think of `Effect.iterate` as equivalent to a `while` loop in JavaScript:\n *\n * ```ts\n * let result = initial\n *\n * while (options.while(result)) {\n *   result = options.body(result)\n * }\n *\n * return result\n * ```\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const iterate: {\n  /**\n   * The `Effect.iterate` function allows you to iterate with an effectful operation. It uses an effectful `body` operation to change the state during each iteration and continues the iteration as long as the `while` function evaluates to `true`:\n   *\n   * ```ts\n   * Effect.iterate(initial, options: { while, body })\n   * ```\n   *\n   * We can think of `Effect.iterate` as equivalent to a `while` loop in JavaScript:\n   *\n   * ```ts\n   * let result = initial\n   *\n   * while (options.while(result)) {\n   *   result = options.body(result)\n   * }\n   *\n   * return result\n   * ```\n   *\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  <A, B extends A, R, E>(\n    initial: A,\n    options: {\n      readonly while: Refinement<A, B>\n      readonly body: (b: B) => Effect<A, E, R>\n    }\n  ): Effect<A, E, R>\n  /**\n   * The `Effect.iterate` function allows you to iterate with an effectful operation. It uses an effectful `body` operation to change the state during each iteration and continues the iteration as long as the `while` function evaluates to `true`:\n   *\n   * ```ts\n   * Effect.iterate(initial, options: { while, body })\n   * ```\n   *\n   * We can think of `Effect.iterate` as equivalent to a `while` loop in JavaScript:\n   *\n   * ```ts\n   * let result = initial\n   *\n   * while (options.while(result)) {\n   *   result = options.body(result)\n   * }\n   *\n   * return result\n   * ```\n   *\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  <A, R, E>(\n    initial: A,\n    options: {\n      readonly while: Predicate<A>\n      readonly body: (a: A) => Effect<A, E, R>\n    }\n  ): Effect<A, E, R>\n} = effect.iterate\n\n/**\n * The `Effect.loop` function allows you to repeatedly change the state based on an `step` function until a condition given by the `while` function is evaluated to `true`:\n *\n * ```ts\n * Effect.loop(initial, options: { while, step, body })\n * ```\n *\n * It collects all intermediate states in an array and returns it as the final result.\n *\n * We can think of Effect.loop as equivalent to a while loop in JavaScript:\n *\n * ```ts\n * let state = initial\n * const result = []\n *\n * while (options.while(state)) {\n *   result.push(options.body(state))\n *   state = options.step(state)\n * }\n *\n * return result\n * ```\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const loop: {\n  /**\n   * The `Effect.loop` function allows you to repeatedly change the state based on an `step` function until a condition given by the `while` function is evaluated to `true`:\n   *\n   * ```ts\n   * Effect.loop(initial, options: { while, step, body })\n   * ```\n   *\n   * It collects all intermediate states in an array and returns it as the final result.\n   *\n   * We can think of Effect.loop as equivalent to a while loop in JavaScript:\n   *\n   * ```ts\n   * let state = initial\n   * const result = []\n   *\n   * while (options.while(state)) {\n   *   result.push(options.body(state))\n   *   state = options.step(state)\n   * }\n   *\n   * return result\n   * ```\n   *\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  <A, B extends A, C, E, R>(\n    initial: A,\n    options: {\n      readonly while: Refinement<A, B>\n      readonly step: (b: B) => A\n      readonly body: (b: B) => Effect<C, E, R>\n      readonly discard?: false | undefined\n    }\n  ): Effect<Array<C>, E, R>\n  /**\n   * The `Effect.loop` function allows you to repeatedly change the state based on an `step` function until a condition given by the `while` function is evaluated to `true`:\n   *\n   * ```ts\n   * Effect.loop(initial, options: { while, step, body })\n   * ```\n   *\n   * It collects all intermediate states in an array and returns it as the final result.\n   *\n   * We can think of Effect.loop as equivalent to a while loop in JavaScript:\n   *\n   * ```ts\n   * let state = initial\n   * const result = []\n   *\n   * while (options.while(state)) {\n   *   result.push(options.body(state))\n   *   state = options.step(state)\n   * }\n   *\n   * return result\n   * ```\n   *\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  <A, C, E, R>(\n    initial: A,\n    options: {\n      readonly while: (a: A) => boolean\n      readonly step: (a: A) => A\n      readonly body: (a: A) => Effect<C, E, R>\n      readonly discard?: false | undefined\n    }\n  ): Effect<Array<C>, E, R>\n  /**\n   * The `Effect.loop` function allows you to repeatedly change the state based on an `step` function until a condition given by the `while` function is evaluated to `true`:\n   *\n   * ```ts\n   * Effect.loop(initial, options: { while, step, body })\n   * ```\n   *\n   * It collects all intermediate states in an array and returns it as the final result.\n   *\n   * We can think of Effect.loop as equivalent to a while loop in JavaScript:\n   *\n   * ```ts\n   * let state = initial\n   * const result = []\n   *\n   * while (options.while(state)) {\n   *   result.push(options.body(state))\n   *   state = options.step(state)\n   * }\n   *\n   * return result\n   * ```\n   *\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  <A, B extends A, C, E, R>(\n    initial: A,\n    options: {\n      readonly while: Refinement<A, B>\n      readonly step: (b: B) => A\n      readonly body: (b: B) => Effect<C, E, R>\n      readonly discard: true\n    }\n  ): Effect<void, E, R>\n  /**\n   * The `Effect.loop` function allows you to repeatedly change the state based on an `step` function until a condition given by the `while` function is evaluated to `true`:\n   *\n   * ```ts\n   * Effect.loop(initial, options: { while, step, body })\n   * ```\n   *\n   * It collects all intermediate states in an array and returns it as the final result.\n   *\n   * We can think of Effect.loop as equivalent to a while loop in JavaScript:\n   *\n   * ```ts\n   * let state = initial\n   * const result = []\n   *\n   * while (options.while(state)) {\n   *   result.push(options.body(state))\n   *   state = options.step(state)\n   * }\n   *\n   * return result\n   * ```\n   *\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  <A, C, E, R>(\n    initial: A,\n    options: {\n      readonly while: (a: A) => boolean\n      readonly step: (a: A) => A\n      readonly body: (a: A) => Effect<C, E, R>\n      readonly discard: true\n    }\n  ): Effect<void, E, R>\n} = effect.loop\n\n/**\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport declare namespace Repeat {\n  /**\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  export type Return<R, E, A, O extends Options<A>> = Effect<\n    (O extends { schedule: Schedule.Schedule<infer Out, infer _I, infer _R> } ? Out\n      : O extends { until: Refinement<A, infer B> } ? B\n      : A),\n    | E\n    | (O extends { while: (...args: Array<any>) => Effect<infer _A, infer E, infer _R> } ? E : never)\n    | (O extends { until: (...args: Array<any>) => Effect<infer _A, infer E, infer _R> } ? E : never),\n    | R\n    | (O extends { schedule: Schedule.Schedule<infer _O, infer _I, infer R> } ? R : never)\n    | (O extends { while: (...args: Array<any>) => Effect<infer _A, infer _E, infer R> } ? R : never)\n    | (O extends { until: (...args: Array<any>) => Effect<infer _A, infer _E, infer R> } ? R : never)\n  > extends infer Z ? Z : never\n\n  /**\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  export interface Options<A> {\n    while?: ((_: A) => boolean | Effect<boolean, any, any>) | undefined\n    until?: ((_: A) => boolean | Effect<boolean, any, any>) | undefined\n    times?: number | undefined\n    schedule?: Schedule.Schedule<any, A, any> | undefined\n  }\n}\n\n/**\n * The `repeat` function returns a new effect that repeats the given effect\n * according to a specified schedule or until the first failure. The scheduled\n * recurrences are in addition to the initial execution, so `Effect.repeat(action,\n * Schedule.once)` executes `action` once initially, and if it succeeds, repeats it\n * an additional time.\n *\n * @example\n * // Success Example\n * import { Effect, Schedule, Console } from \"effect\"\n *\n * const action = Console.log(\"success\")\n * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n * const program = Effect.repeat(action, policy)\n *\n * Effect.runPromise(program).then((n) => console.log(`repetitions: ${n}`))\n *\n * @example\n * // Failure Example\n * import { Effect, Schedule } from \"effect\"\n *\n * let count = 0\n *\n * // Define an async effect that simulates an action with possible failures\n * const action = Effect.async<string, string>((resume) => {\n *   if (count > 1) {\n *     console.log(\"failure\")\n *     resume(Effect.fail(\"Uh oh!\"))\n *   } else {\n *     count++\n *     console.log(\"success\")\n *     resume(Effect.succeed(\"yay!\"))\n *   }\n * })\n *\n * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n * const program = Effect.repeat(action, policy)\n *\n * Effect.runPromiseExit(program).then(console.log)\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const repeat: {\n  /**\n   * The `repeat` function returns a new effect that repeats the given effect\n   * according to a specified schedule or until the first failure. The scheduled\n   * recurrences are in addition to the initial execution, so `Effect.repeat(action,\n   * Schedule.once)` executes `action` once initially, and if it succeeds, repeats it\n   * an additional time.\n   *\n   * @example\n   * // Success Example\n   * import { Effect, Schedule, Console } from \"effect\"\n   *\n   * const action = Console.log(\"success\")\n   * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n   * const program = Effect.repeat(action, policy)\n   *\n   * Effect.runPromise(program).then((n) => console.log(`repetitions: ${n}`))\n   *\n   * @example\n   * // Failure Example\n   * import { Effect, Schedule } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Define an async effect that simulates an action with possible failures\n   * const action = Effect.async<string, string>((resume) => {\n   *   if (count > 1) {\n   *     console.log(\"failure\")\n   *     resume(Effect.fail(\"Uh oh!\"))\n   *   } else {\n   *     count++\n   *     console.log(\"success\")\n   *     resume(Effect.succeed(\"yay!\"))\n   *   }\n   * })\n   *\n   * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n   * const program = Effect.repeat(action, policy)\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   *\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  <O extends Repeat.Options<A>, A>(options: O): <E, R>(\n    self: Effect<A, E, R>\n  ) => Repeat.Return<R, E, A, O>\n  /**\n   * The `repeat` function returns a new effect that repeats the given effect\n   * according to a specified schedule or until the first failure. The scheduled\n   * recurrences are in addition to the initial execution, so `Effect.repeat(action,\n   * Schedule.once)` executes `action` once initially, and if it succeeds, repeats it\n   * an additional time.\n   *\n   * @example\n   * // Success Example\n   * import { Effect, Schedule, Console } from \"effect\"\n   *\n   * const action = Console.log(\"success\")\n   * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n   * const program = Effect.repeat(action, policy)\n   *\n   * Effect.runPromise(program).then((n) => console.log(`repetitions: ${n}`))\n   *\n   * @example\n   * // Failure Example\n   * import { Effect, Schedule } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Define an async effect that simulates an action with possible failures\n   * const action = Effect.async<string, string>((resume) => {\n   *   if (count > 1) {\n   *     console.log(\"failure\")\n   *     resume(Effect.fail(\"Uh oh!\"))\n   *   } else {\n   *     count++\n   *     console.log(\"success\")\n   *     resume(Effect.succeed(\"yay!\"))\n   *   }\n   * })\n   *\n   * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n   * const program = Effect.repeat(action, policy)\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   *\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  <B, A, R1>(schedule: Schedule.Schedule<B, A, R1>): <E, R>(self: Effect<A, E, R>) => Effect<B, E, R1 | R>\n  /**\n   * The `repeat` function returns a new effect that repeats the given effect\n   * according to a specified schedule or until the first failure. The scheduled\n   * recurrences are in addition to the initial execution, so `Effect.repeat(action,\n   * Schedule.once)` executes `action` once initially, and if it succeeds, repeats it\n   * an additional time.\n   *\n   * @example\n   * // Success Example\n   * import { Effect, Schedule, Console } from \"effect\"\n   *\n   * const action = Console.log(\"success\")\n   * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n   * const program = Effect.repeat(action, policy)\n   *\n   * Effect.runPromise(program).then((n) => console.log(`repetitions: ${n}`))\n   *\n   * @example\n   * // Failure Example\n   * import { Effect, Schedule } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Define an async effect that simulates an action with possible failures\n   * const action = Effect.async<string, string>((resume) => {\n   *   if (count > 1) {\n   *     console.log(\"failure\")\n   *     resume(Effect.fail(\"Uh oh!\"))\n   *   } else {\n   *     count++\n   *     console.log(\"success\")\n   *     resume(Effect.succeed(\"yay!\"))\n   *   }\n   * })\n   *\n   * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n   * const program = Effect.repeat(action, policy)\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   *\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  <A, E, R, O extends Repeat.Options<A>>(self: Effect<A, E, R>, options: O): Repeat.Return<R, E, A, O>\n  /**\n   * The `repeat` function returns a new effect that repeats the given effect\n   * according to a specified schedule or until the first failure. The scheduled\n   * recurrences are in addition to the initial execution, so `Effect.repeat(action,\n   * Schedule.once)` executes `action` once initially, and if it succeeds, repeats it\n   * an additional time.\n   *\n   * @example\n   * // Success Example\n   * import { Effect, Schedule, Console } from \"effect\"\n   *\n   * const action = Console.log(\"success\")\n   * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n   * const program = Effect.repeat(action, policy)\n   *\n   * Effect.runPromise(program).then((n) => console.log(`repetitions: ${n}`))\n   *\n   * @example\n   * // Failure Example\n   * import { Effect, Schedule } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Define an async effect that simulates an action with possible failures\n   * const action = Effect.async<string, string>((resume) => {\n   *   if (count > 1) {\n   *     console.log(\"failure\")\n   *     resume(Effect.fail(\"Uh oh!\"))\n   *   } else {\n   *     count++\n   *     console.log(\"success\")\n   *     resume(Effect.succeed(\"yay!\"))\n   *   }\n   * })\n   *\n   * const policy = Schedule.addDelay(Schedule.recurs(2), () => \"100 millis\")\n   * const program = Effect.repeat(action, policy)\n   *\n   * Effect.runPromiseExit(program).then(console.log)\n   *\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  <A, E, R, B, R1>(self: Effect<A, E, R>, schedule: Schedule.Schedule<B, A, R1>): Effect<B, E, R | R1>\n} = _schedule.repeat_combined\n\n/**\n * The `repeatN` function returns a new effect that repeats the specified effect a\n * given number of times or until the first failure. The repeats are in addition\n * to the initial execution, so `Effect.repeatN(action, 1)` executes `action` once\n * initially and then repeats it one additional time if it succeeds.\n *\n * @example\n * import { Effect, Console } from \"effect\"\n *\n * const action = Console.log(\"success\")\n * const program = Effect.repeatN(action, 2)\n *\n * Effect.runPromise(program)\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const repeatN: {\n  /**\n   * The `repeatN` function returns a new effect that repeats the specified effect a\n   * given number of times or until the first failure. The repeats are in addition\n   * to the initial execution, so `Effect.repeatN(action, 1)` executes `action` once\n   * initially and then repeats it one additional time if it succeeds.\n   *\n   * @example\n   * import { Effect, Console } from \"effect\"\n   *\n   * const action = Console.log(\"success\")\n   * const program = Effect.repeatN(action, 2)\n   *\n   * Effect.runPromise(program)\n   *\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  (n: number): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * The `repeatN` function returns a new effect that repeats the specified effect a\n   * given number of times or until the first failure. The repeats are in addition\n   * to the initial execution, so `Effect.repeatN(action, 1)` executes `action` once\n   * initially and then repeats it one additional time if it succeeds.\n   *\n   * @example\n   * import { Effect, Console } from \"effect\"\n   *\n   * const action = Console.log(\"success\")\n   * const program = Effect.repeatN(action, 2)\n   *\n   * Effect.runPromise(program)\n   *\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  <A, E, R>(self: Effect<A, E, R>, n: number): Effect<A, E, R>\n} = effect.repeatN\n\n/**\n * The `repeatOrElse` function returns a new effect that repeats the specified\n * effect according to the given schedule or until the first failure. When a\n * failure occurs, the failure value and schedule output are passed to a\n * specified handler. Scheduled recurrences are in addition to the initial\n * execution, so `Effect.repeat(action, Schedule.once)` executes `action` once\n * initially and then repeats it an additional time if it succeeds.\n *\n * @example\n * import { Effect, Schedule } from \"effect\"\n *\n * let count = 0\n *\n * // Define an async effect that simulates an action with possible failures\n * const action = Effect.async<string, string>((resume) => {\n *   if (count > 1) {\n *     console.log(\"failure\")\n *     resume(Effect.fail(\"Uh oh!\"))\n *   } else {\n *     count++\n *     console.log(\"success\")\n *     resume(Effect.succeed(\"yay!\"))\n *   }\n * })\n *\n * const policy = Schedule.addDelay(\n *   Schedule.recurs(2), // Repeat for a maximum of 2 times\n *   () => \"100 millis\" // Add a delay of 100 milliseconds between repetitions\n * )\n *\n * const program = Effect.repeatOrElse(action, policy, () =>\n *   Effect.sync(() => {\n *     console.log(\"orElse\")\n *     return count - 1\n *   })\n * )\n *\n * Effect.runPromise(program).then((n) => console.log(`repetitions: ${n}`))\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const repeatOrElse: {\n  /**\n   * The `repeatOrElse` function returns a new effect that repeats the specified\n   * effect according to the given schedule or until the first failure. When a\n   * failure occurs, the failure value and schedule output are passed to a\n   * specified handler. Scheduled recurrences are in addition to the initial\n   * execution, so `Effect.repeat(action, Schedule.once)` executes `action` once\n   * initially and then repeats it an additional time if it succeeds.\n   *\n   * @example\n   * import { Effect, Schedule } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Define an async effect that simulates an action with possible failures\n   * const action = Effect.async<string, string>((resume) => {\n   *   if (count > 1) {\n   *     console.log(\"failure\")\n   *     resume(Effect.fail(\"Uh oh!\"))\n   *   } else {\n   *     count++\n   *     console.log(\"success\")\n   *     resume(Effect.succeed(\"yay!\"))\n   *   }\n   * })\n   *\n   * const policy = Schedule.addDelay(\n   *   Schedule.recurs(2), // Repeat for a maximum of 2 times\n   *   () => \"100 millis\" // Add a delay of 100 milliseconds between repetitions\n   * )\n   *\n   * const program = Effect.repeatOrElse(action, policy, () =>\n   *   Effect.sync(() => {\n   *     console.log(\"orElse\")\n   *     return count - 1\n   *   })\n   * )\n   *\n   * Effect.runPromise(program).then((n) => console.log(`repetitions: ${n}`))\n   *\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  <R2, A, B, E, E2, R3>(\n    schedule: Schedule.Schedule<B, A, R2>,\n    orElse: (error: E, option: Option.Option<B>) => Effect<B, E2, R3>\n  ): <R>(self: Effect<A, E, R>) => Effect<B, E2, R2 | R3 | R>\n  /**\n   * The `repeatOrElse` function returns a new effect that repeats the specified\n   * effect according to the given schedule or until the first failure. When a\n   * failure occurs, the failure value and schedule output are passed to a\n   * specified handler. Scheduled recurrences are in addition to the initial\n   * execution, so `Effect.repeat(action, Schedule.once)` executes `action` once\n   * initially and then repeats it an additional time if it succeeds.\n   *\n   * @example\n   * import { Effect, Schedule } from \"effect\"\n   *\n   * let count = 0\n   *\n   * // Define an async effect that simulates an action with possible failures\n   * const action = Effect.async<string, string>((resume) => {\n   *   if (count > 1) {\n   *     console.log(\"failure\")\n   *     resume(Effect.fail(\"Uh oh!\"))\n   *   } else {\n   *     count++\n   *     console.log(\"success\")\n   *     resume(Effect.succeed(\"yay!\"))\n   *   }\n   * })\n   *\n   * const policy = Schedule.addDelay(\n   *   Schedule.recurs(2), // Repeat for a maximum of 2 times\n   *   () => \"100 millis\" // Add a delay of 100 milliseconds between repetitions\n   * )\n   *\n   * const program = Effect.repeatOrElse(action, policy, () =>\n   *   Effect.sync(() => {\n   *     console.log(\"orElse\")\n   *     return count - 1\n   *   })\n   * )\n   *\n   * Effect.runPromise(program).then((n) => console.log(`repetitions: ${n}`))\n   *\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  <A, E, R, R2, B, E2, R3>(\n    self: Effect<A, E, R>,\n    schedule: Schedule.Schedule<B, A, R2>,\n    orElse: (error: E, option: Option.Option<B>) => Effect<B, E2, R3>\n  ): Effect<B, E2, R | R2 | R3>\n} = _schedule.repeatOrElse_Effect\n\n/**\n * Runs this effect according to the specified schedule.\n *\n * See `scheduleFrom` for a variant that allows the schedule's decision to\n * depend on the result of this effect.\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const schedule: {\n  /**\n   * Runs this effect according to the specified schedule.\n   *\n   * See `scheduleFrom` for a variant that allows the schedule's decision to\n   * depend on the result of this effect.\n   *\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  <R2, Out>(schedule: Schedule.Schedule<Out, unknown, R2>): <A, E, R>(self: Effect<A, E, R>) => Effect<Out, E, R2 | R>\n  /**\n   * Runs this effect according to the specified schedule.\n   *\n   * See `scheduleFrom` for a variant that allows the schedule's decision to\n   * depend on the result of this effect.\n   *\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  <A, E, R, R2, Out>(self: Effect<A, E, R>, schedule: Schedule.Schedule<Out, unknown, R2>): Effect<Out, E, R | R2>\n} = _schedule.schedule_Effect\n\n/**\n * Runs this effect according to the specified schedule in a new fiber\n * attached to the current scope.\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const scheduleForked: {\n  /**\n   * Runs this effect according to the specified schedule in a new fiber\n   * attached to the current scope.\n   *\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  <Out, R2>(\n    schedule: Schedule.Schedule<Out, unknown, R2>\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<Fiber.RuntimeFiber<Out, E>, never, Scope.Scope | R2 | R>\n  /**\n   * Runs this effect according to the specified schedule in a new fiber\n   * attached to the current scope.\n   *\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  <A, E, R, Out, R2>(\n    self: Effect<A, E, R>,\n    schedule: Schedule.Schedule<Out, unknown, R2>\n  ): Effect<Fiber.RuntimeFiber<Out, E>, never, Scope.Scope | R | R2>\n} = circular.scheduleForked\n\n/**\n * Runs this effect according to the specified schedule starting from the\n * specified input value.\n *\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const scheduleFrom: {\n  /**\n   * Runs this effect according to the specified schedule starting from the\n   * specified input value.\n   *\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  <R2, In, Out>(\n    initial: In,\n    schedule: Schedule.Schedule<Out, In, R2>\n  ): <E, R>(self: Effect<In, E, R>) => Effect<Out, E, R2 | R>\n  /**\n   * Runs this effect according to the specified schedule starting from the\n   * specified input value.\n   *\n   * @since 2.0.0\n   * @category repetition / recursion\n   */\n  <In, E, R, R2, Out>(\n    self: Effect<In, E, R>,\n    initial: In,\n    schedule: Schedule.Schedule<Out, In, R2>\n  ): Effect<Out, E, R | R2>\n} = _schedule.scheduleFrom_Effect\n\n/**\n * @since 2.0.0\n * @category repetition / recursion\n */\nexport const whileLoop: <A, E, R>(\n  options: {\n    readonly while: LazyArg<boolean>\n    readonly body: LazyArg<Effect<A, E, R>>\n    readonly step: (a: A) => void\n  }\n) => Effect<void, E, R> = core.whileLoop\n\n// -------------------------------------------------------------------------------------\n// fiber refs\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns a collection of all `FiberRef` values for the fiber running this\n * effect.\n *\n * @since 2.0.0\n * @category fiber refs\n */\nexport const getFiberRefs: Effect<FiberRefs.FiberRefs> = effect.fiberRefs\n\n/**\n * Inherits values from all `FiberRef` instances into current fiber.\n *\n * @since 2.0.0\n * @category fiber refs\n */\nexport const inheritFiberRefs: (childFiberRefs: FiberRefs.FiberRefs) => Effect<void> = effect.inheritFiberRefs\n\n/**\n * @since 2.0.0\n * @category fiber refs\n */\nexport const locally: {\n  /**\n   * @since 2.0.0\n   * @category fiber refs\n   */\n  <A>(self: FiberRef.FiberRef<A>, value: A): <B, E, R>(use: Effect<B, E, R>) => Effect<B, E, R>\n  /**\n   * @since 2.0.0\n   * @category fiber refs\n   */\n  <B, E, R, A>(use: Effect<B, E, R>, self: FiberRef.FiberRef<A>, value: A): Effect<B, E, R>\n} = core.fiberRefLocally\n\n/**\n * @since 2.0.0\n * @category fiber refs\n */\nexport const locallyWith: {\n  /**\n   * @since 2.0.0\n   * @category fiber refs\n   */\n  <A>(self: FiberRef.FiberRef<A>, f: (a: A) => A): <B, E, R>(use: Effect<B, E, R>) => Effect<B, E, R>\n  /**\n   * @since 2.0.0\n   * @category fiber refs\n   */\n  <B, E, R, A>(use: Effect<B, E, R>, self: FiberRef.FiberRef<A>, f: (a: A) => A): Effect<B, E, R>\n} = core.fiberRefLocallyWith\n\n/**\n * @since 2.0.0\n * @category fiber refs\n */\nexport const locallyScoped: {\n  /**\n   * @since 2.0.0\n   * @category fiber refs\n   */\n  <A>(value: A): (self: FiberRef.FiberRef<A>) => Effect<void, never, Scope.Scope>\n  /**\n   * @since 2.0.0\n   * @category fiber refs\n   */\n  <A>(self: FiberRef.FiberRef<A>, value: A): Effect<void, never, Scope.Scope>\n} = fiberRuntime.fiberRefLocallyScoped\n\n/**\n * @since 2.0.0\n * @category fiber refs\n */\nexport const locallyScopedWith: {\n  /**\n   * @since 2.0.0\n   * @category fiber refs\n   */\n  <A>(f: (a: A) => A): (self: FiberRef.FiberRef<A>) => Effect<void, never, Scope.Scope>\n  /**\n   * @since 2.0.0\n   * @category fiber refs\n   */\n  <A>(self: FiberRef.FiberRef<A>, f: (a: A) => A): Effect<void, never, Scope.Scope>\n} = fiberRuntime.fiberRefLocallyScopedWith\n\n/**\n * Applies the specified changes to the `FiberRef` values for the fiber\n * running this workflow.\n *\n * @since 2.0.0\n * @category fiber refs\n */\nexport const patchFiberRefs: (patch: FiberRefsPatch.FiberRefsPatch) => Effect<void> = effect.patchFiberRefs\n\n/**\n * Sets the `FiberRef` values for the fiber running this effect to the values\n * in the specified collection of `FiberRef` values.\n *\n * @since 2.0.0\n * @category fiber refs\n */\nexport const setFiberRefs: (fiberRefs: FiberRefs.FiberRefs) => Effect<void> = effect.setFiberRefs\n\n/**\n * Updates the `FiberRef` values for the fiber running this effect using the\n * specified function.\n *\n * @since 2.0.0\n * @category fiber refs\n */\nexport const updateFiberRefs: (\n  f: (fiberId: FiberId.Runtime, fiberRefs: FiberRefs.FiberRefs) => FiberRefs.FiberRefs\n) => Effect<void> = effect.updateFiberRefs\n\n// -------------------------------------------------------------------------------------\n// getters & folding\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns `true` if this effect is a failure, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters & folding\n */\nexport const isFailure: <A, E, R>(self: Effect<A, E, R>) => Effect<boolean, never, R> = effect.isFailure\n\n/**\n * Returns `true` if this effect is a success, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters & folding\n */\nexport const isSuccess: <A, E, R>(self: Effect<A, E, R>) => Effect<boolean, never, R> = effect.isSuccess\n\n/**\n * Folds over the failure value or the success value to yield an effect that\n * does not fail, but succeeds with the value returned by the left or right\n * function passed to `match`.\n *\n * @since 2.0.0\n * @category getters & folding\n */\nexport const match: {\n  /**\n   * Folds over the failure value or the success value to yield an effect that\n   * does not fail, but succeeds with the value returned by the left or right\n   * function passed to `match`.\n   *\n   * @since 2.0.0\n   * @category getters & folding\n   */\n  <E, A2, A, A3>(\n    options: {\n      readonly onFailure: (error: E) => A2\n      readonly onSuccess: (value: A) => A3\n    }\n  ): <R>(self: Effect<A, E, R>) => Effect<A2 | A3, never, R>\n  /**\n   * Folds over the failure value or the success value to yield an effect that\n   * does not fail, but succeeds with the value returned by the left or right\n   * function passed to `match`.\n   *\n   * @since 2.0.0\n   * @category getters & folding\n   */\n  <A, E, R, A2, A3>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly onFailure: (error: E) => A2\n      readonly onSuccess: (value: A) => A3\n    }\n  ): Effect<A2 | A3, never, R>\n} = effect.match\n\n/**\n * @since 2.0.0\n * @category getters & folding\n */\nexport const matchCause: {\n  /**\n   * @since 2.0.0\n   * @category getters & folding\n   */\n  <E, A2, A, A3>(\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): <R>(self: Effect<A, E, R>) => Effect<A2 | A3, never, R>\n  /**\n   * @since 2.0.0\n   * @category getters & folding\n   */\n  <A, E, R, A2, A3>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => A2\n      readonly onSuccess: (a: A) => A3\n    }\n  ): Effect<A2 | A3, never, R>\n} = core.matchCause\n\n/**\n * @since 2.0.0\n * @category getters & folding\n */\nexport const matchCauseEffect: {\n  /**\n   * @since 2.0.0\n   * @category getters & folding\n   */\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect<A3, E3, R3>\n    }\n  ): <R>(self: Effect<A, E, R>) => Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n  /**\n   * @since 2.0.0\n   * @category getters & folding\n   */\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect<A3, E3, R3>\n    }\n  ): Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n} = core.matchCauseEffect\n\n/**\n * @since 2.0.0\n * @category getters & folding\n */\nexport const matchEffect: {\n  /**\n   * @since 2.0.0\n   * @category getters & folding\n   */\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (e: E) => Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect<A3, E3, R3>\n    }\n  ): <R>(self: Effect<A, E, R>) => Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n  /**\n   * @since 2.0.0\n   * @category getters & folding\n   */\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Effect<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => Effect<A2, E2, R2>\n      readonly onSuccess: (a: A) => Effect<A3, E3, R3>\n    }\n  ): Effect<A2 | A3, E2 | E3, R2 | R3 | R>\n} = core.matchEffect\n\n// -------------------------------------------------------------------------------------\n// logging\n// -------------------------------------------------------------------------------------\n\n/**\n * Logs one or more messages or error causes at the current log level, which is INFO by default.\n * This function allows logging multiple items at once and can include detailed error information using `Cause` instances.\n *\n * To adjust the log level, use the `Logger.withMinimumLogLevel` function.\n *\n * @example\n * import { Cause, Effect } from \"effect\"\n *\n * const program = Effect.log(\n *   \"message1\",\n *   \"message2\",\n *   Cause.die(\"Oh no!\"),\n *   Cause.die(\"Oh uh!\")\n * )\n *\n * // Effect.runFork(program)\n * // Output:\n * // timestamp=... level=INFO fiber=#0 message=message1 message=message2 cause=\"Error: Oh no!\n * // Error: Oh uh!\"\n *\n * @since 2.0.0\n * @category logging\n */\nexport const log: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.log\n\n/**\n * Logs the specified message or cause at the specified log level.\n *\n * @since 2.0.0\n * @category logging\n */\nexport const logWithLevel = (\n  level: LogLevel,\n  ...message: ReadonlyArray<any>\n): Effect<void> => effect.logWithLevel(level)(...message)\n\n/**\n * Logs the specified message or cause at the Trace log level.\n *\n * @since 2.0.0\n * @category logging\n */\nexport const logTrace: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.logTrace\n\n/**\n * Logs the specified messages at the DEBUG log level.\n * DEBUG messages are not shown by default.\n *\n * To view DEBUG messages, adjust the logging settings using\n * `Logger.withMinimumLogLevel` and set the log level to `LogLevel.Debug`.\n *\n * @example\n * import { Effect, Logger, LogLevel } from \"effect\"\n *\n * const program = Effect.logDebug(\"message1\").pipe(Logger.withMinimumLogLevel(LogLevel.Debug))\n *\n * // Effect.runFork(program)\n * // timestamp=... level=DEBUG fiber=#0 message=message1\n *\n * @since 2.0.0\n * @category logging\n */\nexport const logDebug: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.logDebug\n\n/**\n * Logs the specified message or cause at the Info log level.\n *\n * @since 2.0.0\n * @category logging\n */\nexport const logInfo: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.logInfo\n\n/**\n * Logs the specified message or cause at the Warning log level.\n *\n * @since 2.0.0\n * @category logging\n */\nexport const logWarning: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.logWarning\n\n/**\n * Logs the specified message or cause at the Error log level.\n *\n * @since 2.0.0\n * @category logging\n */\nexport const logError: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.logError\n\n/**\n * Logs the specified message or cause at the Fatal log level.\n *\n * @since 2.0.0\n * @category logging\n */\nexport const logFatal: (...message: ReadonlyArray<any>) => Effect<void, never, never> = effect.logFatal\n\n/**\n * Adds a log span to your effects, which tracks and logs the duration of\n * operations or tasks. This is useful for performance monitoring and debugging\n * time-sensitive processes.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * const program = Effect.gen(function*() {\n *   yield* Effect.sleep(\"1 second\")\n *   yield* Effect.log(\"The job is finished!\")\n * }).pipe(Effect.withLogSpan(\"myspan\"))\n *\n * // Effect.runFork(program)\n * // timestamp=... level=INFO fiber=#0 message=\"The job is finished!\" myspan=1011ms\n *\n * @since 2.0.0\n * @category logging\n */\nexport const withLogSpan: {\n  /**\n   * Adds a log span to your effects, which tracks and logs the duration of\n   * operations or tasks. This is useful for performance monitoring and debugging\n   * time-sensitive processes.\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * const program = Effect.gen(function*() {\n   *   yield* Effect.sleep(\"1 second\")\n   *   yield* Effect.log(\"The job is finished!\")\n   * }).pipe(Effect.withLogSpan(\"myspan\"))\n   *\n   * // Effect.runFork(program)\n   * // timestamp=... level=INFO fiber=#0 message=\"The job is finished!\" myspan=1011ms\n   *\n   * @since 2.0.0\n   * @category logging\n   */\n  (label: string): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Adds a log span to your effects, which tracks and logs the duration of\n   * operations or tasks. This is useful for performance monitoring and debugging\n   * time-sensitive processes.\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * const program = Effect.gen(function*() {\n   *   yield* Effect.sleep(\"1 second\")\n   *   yield* Effect.log(\"The job is finished!\")\n   * }).pipe(Effect.withLogSpan(\"myspan\"))\n   *\n   * // Effect.runFork(program)\n   * // timestamp=... level=INFO fiber=#0 message=\"The job is finished!\" myspan=1011ms\n   *\n   * @since 2.0.0\n   * @category logging\n   */\n  <A, E, R>(effect: Effect<A, E, R>, label: string): Effect<A, E, R>\n} = effect.withLogSpan\n\n/**\n * Augments log outputs by appending custom annotations to log entries generated\n * within an effect. This function provides a way to add more context and detail\n * to log messages, making them more informative and easier to trace.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * const program = Effect.gen(function*() {\n *   yield* Effect.log(\"message1\")\n *   yield* Effect.log(\"message2\")\n * }).pipe(Effect.annotateLogs(\"key\", \"value\")) // Annotation as key/value pair\n *\n * // Effect.runFork(program)\n * // timestamp=... level=INFO fiber=#0 message=message1 key=value\n * // timestamp=... level=INFO fiber=#0 message=message2 key=value\n *\n * @since 2.0.0\n * @category logging\n */\nexport const annotateLogs: {\n  /**\n   * Augments log outputs by appending custom annotations to log entries generated\n   * within an effect. This function provides a way to add more context and detail\n   * to log messages, making them more informative and easier to trace.\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * const program = Effect.gen(function*() {\n   *   yield* Effect.log(\"message1\")\n   *   yield* Effect.log(\"message2\")\n   * }).pipe(Effect.annotateLogs(\"key\", \"value\")) // Annotation as key/value pair\n   *\n   * // Effect.runFork(program)\n   * // timestamp=... level=INFO fiber=#0 message=message1 key=value\n   * // timestamp=... level=INFO fiber=#0 message=message2 key=value\n   *\n   * @since 2.0.0\n   * @category logging\n   */\n  (key: string, value: unknown): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Augments log outputs by appending custom annotations to log entries generated\n   * within an effect. This function provides a way to add more context and detail\n   * to log messages, making them more informative and easier to trace.\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * const program = Effect.gen(function*() {\n   *   yield* Effect.log(\"message1\")\n   *   yield* Effect.log(\"message2\")\n   * }).pipe(Effect.annotateLogs(\"key\", \"value\")) // Annotation as key/value pair\n   *\n   * // Effect.runFork(program)\n   * // timestamp=... level=INFO fiber=#0 message=message1 key=value\n   * // timestamp=... level=INFO fiber=#0 message=message2 key=value\n   *\n   * @since 2.0.0\n   * @category logging\n   */\n  (values: Record<string, unknown>): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Augments log outputs by appending custom annotations to log entries generated\n   * within an effect. This function provides a way to add more context and detail\n   * to log messages, making them more informative and easier to trace.\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * const program = Effect.gen(function*() {\n   *   yield* Effect.log(\"message1\")\n   *   yield* Effect.log(\"message2\")\n   * }).pipe(Effect.annotateLogs(\"key\", \"value\")) // Annotation as key/value pair\n   *\n   * // Effect.runFork(program)\n   * // timestamp=... level=INFO fiber=#0 message=message1 key=value\n   * // timestamp=... level=INFO fiber=#0 message=message2 key=value\n   *\n   * @since 2.0.0\n   * @category logging\n   */\n  <A, E, R>(effect: Effect<A, E, R>, key: string, value: unknown): Effect<A, E, R>\n  /**\n   * Augments log outputs by appending custom annotations to log entries generated\n   * within an effect. This function provides a way to add more context and detail\n   * to log messages, making them more informative and easier to trace.\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * const program = Effect.gen(function*() {\n   *   yield* Effect.log(\"message1\")\n   *   yield* Effect.log(\"message2\")\n   * }).pipe(Effect.annotateLogs(\"key\", \"value\")) // Annotation as key/value pair\n   *\n   * // Effect.runFork(program)\n   * // timestamp=... level=INFO fiber=#0 message=message1 key=value\n   * // timestamp=... level=INFO fiber=#0 message=message2 key=value\n   *\n   * @since 2.0.0\n   * @category logging\n   */\n  <A, E, R>(effect: Effect<A, E, R>, values: Record<string, unknown>): Effect<A, E, R>\n} = effect.annotateLogs\n\n/**\n * Applies log annotations with a limited scope, restricting their appearance to\n * specific sections of your effect computations. Use\n * `Effect.annotateLogsScoped` to add metadata to logs that only appear within a\n * defined `Scope`, making it easier to manage context-specific logging.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * const program = Effect.gen(function*() {\n *   yield* Effect.log(\"no annotations\")\n *   yield* Effect.annotateLogsScoped({ key: \"value\" })\n *   yield* Effect.log(\"message1\") // Annotation is applied to this log\n *   yield* Effect.log(\"message2\") // Annotation is applied to this log\n * }).pipe(Effect.scoped, Effect.andThen(Effect.log(\"no annotations again\")))\n *\n * // Effect.runFork(program)\n * // timestamp=... level=INFO fiber=#0 message=\"no annotations\"\n * // timestamp=... level=INFO fiber=#0 message=message1 key=value\n * // timestamp=... level=INFO fiber=#0 message=message2 key=value\n * // timestamp=... level=INFO fiber=#0 message=\"no annotations again\"\n *\n * @since 3.1.0\n * @category logging\n */\nexport const annotateLogsScoped: {\n  /**\n   * Applies log annotations with a limited scope, restricting their appearance to\n   * specific sections of your effect computations. Use\n   * `Effect.annotateLogsScoped` to add metadata to logs that only appear within a\n   * defined `Scope`, making it easier to manage context-specific logging.\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * const program = Effect.gen(function*() {\n   *   yield* Effect.log(\"no annotations\")\n   *   yield* Effect.annotateLogsScoped({ key: \"value\" })\n   *   yield* Effect.log(\"message1\") // Annotation is applied to this log\n   *   yield* Effect.log(\"message2\") // Annotation is applied to this log\n   * }).pipe(Effect.scoped, Effect.andThen(Effect.log(\"no annotations again\")))\n   *\n   * // Effect.runFork(program)\n   * // timestamp=... level=INFO fiber=#0 message=\"no annotations\"\n   * // timestamp=... level=INFO fiber=#0 message=message1 key=value\n   * // timestamp=... level=INFO fiber=#0 message=message2 key=value\n   * // timestamp=... level=INFO fiber=#0 message=\"no annotations again\"\n   *\n   * @since 3.1.0\n   * @category logging\n   */\n  (key: string, value: unknown): Effect<void, never, Scope.Scope>\n  /**\n   * Applies log annotations with a limited scope, restricting their appearance to\n   * specific sections of your effect computations. Use\n   * `Effect.annotateLogsScoped` to add metadata to logs that only appear within a\n   * defined `Scope`, making it easier to manage context-specific logging.\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * const program = Effect.gen(function*() {\n   *   yield* Effect.log(\"no annotations\")\n   *   yield* Effect.annotateLogsScoped({ key: \"value\" })\n   *   yield* Effect.log(\"message1\") // Annotation is applied to this log\n   *   yield* Effect.log(\"message2\") // Annotation is applied to this log\n   * }).pipe(Effect.scoped, Effect.andThen(Effect.log(\"no annotations again\")))\n   *\n   * // Effect.runFork(program)\n   * // timestamp=... level=INFO fiber=#0 message=\"no annotations\"\n   * // timestamp=... level=INFO fiber=#0 message=message1 key=value\n   * // timestamp=... level=INFO fiber=#0 message=message2 key=value\n   * // timestamp=... level=INFO fiber=#0 message=\"no annotations again\"\n   *\n   * @since 3.1.0\n   * @category logging\n   */\n  (values: Record<string, unknown>): Effect<void, never, Scope.Scope>\n} = fiberRuntime.annotateLogsScoped\n\n/**\n * Retrieves the log annotations associated with the current scope.\n *\n * @since 2.0.0\n * @category logging\n */\nexport const logAnnotations: Effect<HashMap.HashMap<string, unknown>> = effect.logAnnotations\n\n/**\n * Decides wether child fibers will report or not unhandled errors via the logger\n *\n * @since 2.0.0\n * @category logging\n */\nexport const withUnhandledErrorLogLevel: {\n  /**\n   * Decides wether child fibers will report or not unhandled errors via the logger\n   *\n   * @since 2.0.0\n   * @category logging\n   */\n  (level: Option.Option<LogLevel>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Decides wether child fibers will report or not unhandled errors via the logger\n   *\n   * @since 2.0.0\n   * @category logging\n   */\n  <A, E, R>(self: Effect<A, E, R>, level: Option.Option<LogLevel>): Effect<A, E, R>\n} = core.withUnhandledErrorLogLevel\n\n// -------------------------------------------------------------------------------------\n// alternatives\n// -------------------------------------------------------------------------------------\n\n/**\n * Translates effect failure into death of the fiber, making all failures\n * unchecked and not a part of the type of the effect.\n *\n * @since 2.0.0\n * @category alternatives\n */\nexport const orDie: <A, E, R>(self: Effect<A, E, R>) => Effect<A, never, R> = core.orDie\n\n/**\n * Keeps none of the errors, and terminates the fiber with them, using the\n * specified function to convert the `E` into a `Throwable`.\n *\n * @since 2.0.0\n * @category alternatives\n */\nexport const orDieWith: {\n  /**\n   * Keeps none of the errors, and terminates the fiber with them, using the\n   * specified function to convert the `E` into a `Throwable`.\n   *\n   * @since 2.0.0\n   * @category alternatives\n   */\n  <E>(f: (error: E) => unknown): <A, R>(self: Effect<A, E, R>) => Effect<A, never, R>\n  /**\n   * Keeps none of the errors, and terminates the fiber with them, using the\n   * specified function to convert the `E` into a `Throwable`.\n   *\n   * @since 2.0.0\n   * @category alternatives\n   */\n  <A, E, R>(self: Effect<A, E, R>, f: (error: E) => unknown): Effect<A, never, R>\n} = core.orDieWith\n\n/**\n * Executes this effect and returns its value, if it succeeds, but otherwise\n * executes the specified effect.\n *\n * @since 2.0.0\n * @category alternatives\n */\nexport const orElse: {\n  /**\n   * Executes this effect and returns its value, if it succeeds, but otherwise\n   * executes the specified effect.\n   *\n   * @since 2.0.0\n   * @category alternatives\n   */\n  <A2, E2, R2>(that: LazyArg<Effect<A2, E2, R2>>): <A, E, R>(self: Effect<A, E, R>) => Effect<A2 | A, E2, R2 | R>\n  /**\n   * Executes this effect and returns its value, if it succeeds, but otherwise\n   * executes the specified effect.\n   *\n   * @since 2.0.0\n   * @category alternatives\n   */\n  <A, E, R, A2, E2, R2>(self: Effect<A, E, R>, that: LazyArg<Effect<A2, E2, R2>>): Effect<A2 | A, E2, R2 | R>\n} = core.orElse\n\n/**\n * Executes this effect and returns its value, if it succeeds, but otherwise\n * fails with the specified error.\n *\n * @since 2.0.0\n * @category alternatives\n */\nexport const orElseFail: {\n  /**\n   * Executes this effect and returns its value, if it succeeds, but otherwise\n   * fails with the specified error.\n   *\n   * @since 2.0.0\n   * @category alternatives\n   */\n  <E2>(evaluate: LazyArg<E2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E2, R>\n  /**\n   * Executes this effect and returns its value, if it succeeds, but otherwise\n   * fails with the specified error.\n   *\n   * @since 2.0.0\n   * @category alternatives\n   */\n  <A, E, R, E2>(self: Effect<A, E, R>, evaluate: LazyArg<E2>): Effect<A, E2, R>\n} = effect.orElseFail\n\n/**\n * Executes this effect and returns its value, if it succeeds, but\n * otherwise succeeds with the specified value.\n *\n * @since 2.0.0\n * @category alternatives\n */\nexport const orElseSucceed: {\n  /**\n   * Executes this effect and returns its value, if it succeeds, but\n   * otherwise succeeds with the specified value.\n   *\n   * @since 2.0.0\n   * @category alternatives\n   */\n  <A2>(evaluate: LazyArg<A2>): <A, E, R>(self: Effect<A, E, R>) => Effect<A2 | A, never, R>\n  /**\n   * Executes this effect and returns its value, if it succeeds, but\n   * otherwise succeeds with the specified value.\n   *\n   * @since 2.0.0\n   * @category alternatives\n   */\n  <A, E, R, A2>(self: Effect<A, E, R>, evaluate: LazyArg<A2>): Effect<A | A2, never, R>\n} = effect.orElseSucceed\n\n// -------------------------------------------------------------------------------------\n// random\n// -------------------------------------------------------------------------------------\n\n/**\n * Retreives the `Random` service from the context.\n *\n * @since 2.0.0\n * @category random\n */\nexport const random: Effect<Random.Random> = effect.random\n\n/**\n * Retreives the `Random` service from the context and uses it to run the\n * specified workflow.\n *\n * @since 2.0.0\n * @category random\n */\nexport const randomWith: <A, E, R>(f: (random: Random.Random) => Effect<A, E, R>) => Effect<A, E, R> =\n  defaultServices.randomWith\n\n/**\n * Executes the specified workflow with the specified implementation of the\n * random service.\n *\n * @since 2.0.0\n * @category random\n */\nexport const withRandom: {\n  /**\n   * Executes the specified workflow with the specified implementation of the\n   * random service.\n   *\n   * @since 2.0.0\n   * @category random\n   */\n  <X extends Random.Random>(value: X): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Executes the specified workflow with the specified implementation of the\n   * random service.\n   *\n   * @since 2.0.0\n   * @category random\n   */\n  <X extends Random.Random, A, E, R>(effect: Effect<A, E, R>, value: X): Effect<A, E, R>\n} = defaultServices.withRandom\n\n/**\n * Sets the implementation of the random service to the specified value and\n * restores it to its original value when the scope is closed.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const withRandomScoped: <A extends Random.Random>(value: A) => Effect<void, never, Scope.Scope> =\n  fiberRuntime.withRandomScoped\n\n// -------------------------------------------------------------------------------------\n// runtime\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns an effect that accesses the runtime, which can be used to\n * (unsafely) execute tasks. This is useful for integration with legacy code\n * that must call back into Effect code.\n *\n * @since 2.0.0\n * @category runtime\n */\nexport const runtime: <R = never>() => Effect<Runtime.Runtime<R>, never, R> = _runtime.runtime\n\n/**\n * Retrieves an effect that succeeds with the current runtime flags, which\n * govern behavior and features of the runtime system.\n *\n * @since 2.0.0\n * @category runtime\n */\nexport const getRuntimeFlags: Effect<RuntimeFlags.RuntimeFlags> = core.runtimeFlags\n\n/**\n * @since 2.0.0\n * @category runtime\n */\nexport const patchRuntimeFlags: (patch: RuntimeFlagsPatch.RuntimeFlagsPatch) => Effect<void> = core.updateRuntimeFlags\n\n/**\n * @since 2.0.0\n * @category runtime\n */\nexport const withRuntimeFlagsPatch: {\n  /**\n   * @since 2.0.0\n   * @category runtime\n   */\n  (update: RuntimeFlagsPatch.RuntimeFlagsPatch): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * @since 2.0.0\n   * @category runtime\n   */\n  <A, E, R>(self: Effect<A, E, R>, update: RuntimeFlagsPatch.RuntimeFlagsPatch): Effect<A, E, R>\n} = core.withRuntimeFlags\n\n/**\n * @since 2.0.0\n * @category runtime\n */\nexport const withRuntimeFlagsPatchScoped: (\n  update: RuntimeFlagsPatch.RuntimeFlagsPatch\n) => Effect<void, never, Scope.Scope> = fiberRuntime.withRuntimeFlagsScoped\n\n// -------------------------------------------------------------------------------------\n// metrics\n// -------------------------------------------------------------------------------------\n\n/**\n * Tags each metric in this effect with the specific tag.\n *\n * @since 2.0.0\n * @category metrics\n */\nexport const tagMetrics: {\n  // -------------------------------------------------------------------------------------\n  // metrics\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * Tags each metric in this effect with the specific tag.\n   *\n   * @since 2.0.0\n   * @category metrics\n   */\n  (key: string, value: string): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  // -------------------------------------------------------------------------------------\n  // metrics\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * Tags each metric in this effect with the specific tag.\n   *\n   * @since 2.0.0\n   * @category metrics\n   */\n  (values: Record<string, string>): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  // -------------------------------------------------------------------------------------\n  // metrics\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * Tags each metric in this effect with the specific tag.\n   *\n   * @since 2.0.0\n   * @category metrics\n   */\n  <A, E, R>(effect: Effect<A, E, R>, key: string, value: string): Effect<A, E, R>\n  // -------------------------------------------------------------------------------------\n  // metrics\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * Tags each metric in this effect with the specific tag.\n   *\n   * @since 2.0.0\n   * @category metrics\n   */\n  <A, E, R>(effect: Effect<A, E, R>, values: Record<string, string>): Effect<A, E, R>\n} = effect.tagMetrics\n\n/**\n * Tags each metric in this effect with the specific tag.\n *\n * @since 2.0.0\n * @category metrics\n */\nexport const labelMetrics: {\n  /**\n   * Tags each metric in this effect with the specific tag.\n   *\n   * @since 2.0.0\n   * @category metrics\n   */\n  (labels: Iterable<MetricLabel.MetricLabel>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Tags each metric in this effect with the specific tag.\n   *\n   * @since 2.0.0\n   * @category metrics\n   */\n  <A, E, R>(self: Effect<A, E, R>, labels: Iterable<MetricLabel.MetricLabel>): Effect<A, E, R>\n} = effect.labelMetrics\n\n/**\n * Tags each metric in a scope with a the specific tag.\n *\n * @since 2.0.0\n * @category metrics\n */\nexport const tagMetricsScoped: (key: string, value: string) => Effect<void, never, Scope.Scope> =\n  fiberRuntime.tagMetricsScoped\n\n/**\n * Tags each metric in a scope with a the specific tag.\n *\n * @since 2.0.0\n * @category metrics\n */\nexport const labelMetricsScoped: (\n  labels: ReadonlyArray<MetricLabel.MetricLabel>\n) => Effect<void, never, Scope.Scope> = fiberRuntime.labelMetricsScoped\n\n/**\n * Retrieves the metric labels associated with the current scope.\n *\n * @since 2.0.0\n * @category metrics\n */\nexport const metricLabels: Effect<ReadonlyArray<MetricLabel.MetricLabel>> = core.metricLabels\n\n/**\n * @since 2.0.0\n * @category metrics\n */\nexport const withMetric: {\n  /**\n   * @since 2.0.0\n   * @category metrics\n   */\n  <Type, In, Out>(metric: Metric.Metric<Type, In, Out>): <A extends In, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * @since 2.0.0\n   * @category metrics\n   */\n  <A extends In, E, R, Type, In, Out>(self: Effect<A, E, R>, metric: Metric.Metric<Type, In, Out>): Effect<A, E, R>\n} = effect.withMetric\n\n// -------------------------------------------------------------------------------------\n// semaphore\n// -------------------------------------------------------------------------------------\n\n/**\n * @category semaphore\n * @since 2.0.0\n */\nexport interface Permit {\n  readonly index: number\n}\n\n/**\n * @category semaphore\n * @since 2.0.0\n */\nexport interface Semaphore {\n  /** when the given amount of permits are available, run the effect and release the permits when finished */\n  withPermits(permits: number): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /** only if the given permits are available, run the effect and release the permits when finished */\n  withPermitsIfAvailable(permits: number): <A, E, R>(self: Effect<A, E, R>) => Effect<Option.Option<A>, E, R>\n  /** take the given amount of permits, suspending if they are not yet available */\n  take(permits: number): Effect<number>\n  /** release the given amount of permits, and return the resulting available permits */\n  release(permits: number): Effect<number>\n  /** release all the taken permits, and return the resulting available permits */\n  releaseAll: Effect<number>\n}\n\n/**\n * Unsafely creates a new Semaphore\n *\n * @since 2.0.0\n * @category semaphore\n */\nexport const unsafeMakeSemaphore: (permits: number) => Semaphore = circular.unsafeMakeSemaphore\n\n/**\n * Creates a new Semaphore\n *\n * @since 2.0.0\n * @category semaphore\n */\nexport const makeSemaphore: (permits: number) => Effect<Semaphore> = circular.makeSemaphore\n\n// -------------------------------------------------------------------------------------\n// latch\n// -------------------------------------------------------------------------------------\n\n/**\n * @category latch\n * @since 3.8.0\n */\nexport interface Latch extends Effect<void> {\n  /** open the latch, releasing all fibers waiting on it */\n  readonly open: Effect<void>\n  /** release all fibers waiting on the latch, without opening it */\n  readonly release: Effect<void>\n  /** wait for the latch to be opened */\n  readonly await: Effect<void>\n  /** close the latch */\n  readonly close: Effect<void>\n  /** only run the given effect when the latch is open */\n  readonly whenOpen: <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n\n  readonly [Unify.typeSymbol]?: unknown\n  readonly [Unify.unifySymbol]?: LatchUnify<this>\n  readonly [Unify.ignoreSymbol]?: LatchUnifyIgnore\n}\n\n/**\n * @category models\n * @since 3.8.0\n */\nexport interface LatchUnify<A extends { [Unify.typeSymbol]?: any }> extends EffectUnify<A> {\n  Latch?: () => Latch\n}\n\n/**\n * @category models\n * @since 3.8.0\n */\nexport interface LatchUnifyIgnore extends EffectUnifyIgnore {\n  Effect?: true\n}\n\n/**\n * @category latch\n * @since 3.8.0\n */\nexport const unsafeMakeLatch: (open?: boolean | undefined) => Latch = circular.unsafeMakeLatch\n\n/**\n * @category latch\n * @since 3.8.0\n * @example\n * import { Effect } from \"effect\"\n *\n * Effect.gen(function*() {\n *   // Create a latch, starting in the closed state\n *   const latch = yield* Effect.makeLatch(false)\n *\n *   // Fork a fiber that logs \"open sesame\" when the latch is opened\n *   const fiber = yield* Effect.log(\"open sesame\").pipe(\n *     latch.whenOpen,\n *     Effect.fork\n *   )\n *\n *   // Open the latch\n *   yield* latch.open\n *   yield* fiber.await\n * })\n */\nexport const makeLatch: (open?: boolean | undefined) => Effect<Latch, never, never> = circular.makeLatch\n\n// -------------------------------------------------------------------------------------\n// execution\n// -------------------------------------------------------------------------------------\n\n/**\n * Executes an effect and returns a `RuntimeFiber` that represents the running computation.\n *\n * Use `runFork` when you want to start an effect without blocking the current execution flow.\n * It returns a fiber that you can observe, interrupt, or join as needed.\n *\n * @example\n * import { Effect, Console, Schedule, Fiber } from \"effect\"\n *\n * // Define an effect that repeats a message every 200 milliseconds\n * const program = Effect.repeat(\n *   Console.log(\"running...\"),\n *   Schedule.spaced(\"200 millis\")\n * )\n *\n * // Start the effect without blocking\n * const fiber = Effect.runFork(program)\n *\n * // Interrupt the fiber after 500 milliseconds\n * setTimeout(() => {\n *   Effect.runFork(Fiber.interrupt(fiber))\n * }, 500)\n *\n * @since 2.0.0\n * @category execution\n */\nexport const runFork: <A, E>(\n  effect: Effect<A, E>,\n  options?: Runtime.RunForkOptions\n) => Fiber.RuntimeFiber<A, E> = _runtime.unsafeForkEffect\n\n/**\n * @since 2.0.0\n * @category execution\n */\nexport const runCallback: <A, E>(\n  effect: Effect<A, E>,\n  options?: Runtime.RunCallbackOptions<A, E> | undefined\n) => Runtime.Cancel<A, E> = _runtime.unsafeRunEffect\n\n/**\n * Executes an effect and returns a `Promise` that resolves with the result.\n *\n * Use `runPromise` when working with asynchronous effects and you need to integrate with code that uses Promises.\n * If the effect fails, the returned Promise will be rejected with the error.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * // Execute an effect and handle the result with a Promise\n * Effect.runPromise(Effect.succeed(1)).then(console.log) // Output: 1\n *\n * // Execute a failing effect and handle the rejection\n * Effect.runPromise(Effect.fail(\"my error\")).catch((error) => {\n *   console.error(\"Effect failed with error:\", error)\n * })\n *\n * @since 2.0.0\n * @category execution\n */\nexport const runPromise: <A, E>(\n  effect: Effect<A, E, never>,\n  options?: { readonly signal?: AbortSignal } | undefined\n) => Promise<A> = _runtime.unsafeRunPromiseEffect\n\n/**\n * Executes an effect and returns a `Promise` that resolves with an `Exit` describing the result.\n *\n * Use `runPromiseExit` when you need detailed information about the outcome of the effect, including success or failure,\n * and you want to work with Promises.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * // Execute a successful effect and get the Exit result as a Promise\n * Effect.runPromiseExit(Effect.succeed(1)).then(console.log)\n * // Output:\n * // {\n * //   _id: \"Exit\",\n * //   _tag: \"Success\",\n * //   value: 1\n * // }\n *\n * // Execute a failing effect and get the Exit result as a Promise\n * Effect.runPromiseExit(Effect.fail(\"my error\")).then(console.log)\n * // Output:\n * // {\n * //   _id: \"Exit\",\n * //   _tag: \"Failure\",\n * //   cause: {\n * //     _id: \"Cause\",\n * //     _tag: \"Fail\",\n * //     failure: \"my error\"\n * //   }\n * // }\n *\n * @since 2.0.0\n * @category execution\n */\nexport const runPromiseExit: <A, E>(\n  effect: Effect<A, E, never>,\n  options?: { readonly signal?: AbortSignal } | undefined\n) => Promise<Exit.Exit<A, E>> = _runtime.unsafeRunPromiseExitEffect\n\n/**\n * Executes an effect synchronously and returns its result.\n *\n * Use `runSync` when you are certain that the effect is purely synchronous and will not perform any asynchronous operations.\n * If the effect fails or contains asynchronous tasks, it will throw an error.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * // Define a synchronous effect\n * const program = Effect.sync(() => {\n *   console.log(\"Hello, World!\")\n *   return 1\n * })\n *\n * // Execute the effect synchronously\n * const result = Effect.runSync(program)\n * // Output: Hello, World!\n *\n * console.log(result)\n * // Output: 1\n *\n * @since 2.0.0\n * @category execution\n */\nexport const runSync: <A, E>(effect: Effect<A, E>) => A = _runtime.unsafeRunSyncEffect\n\n/**\n * Executes an effect synchronously and returns an `Exit` describing the result.\n *\n * Use `runSyncExit` when you need detailed information about the outcome of the effect,\n * including whether it succeeded or failed, without throwing exceptions.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * // Execute a successful effect and get the Exit result\n * const result1 = Effect.runSyncExit(Effect.succeed(1))\n * console.log(result1)\n * // Output:\n * // {\n * //   _id: \"Exit\",\n * //   _tag: \"Success\",\n * //   value: 1\n * // }\n *\n * // Execute a failing effect and get the Exit result\n * const result2 = Effect.runSyncExit(Effect.fail(\"my error\"))\n * console.log(result2)\n * // Output:\n * // {\n * //   _id: \"Exit\",\n * //   _tag: \"Failure\",\n * //   cause: {\n * //     _id: \"Cause\",\n * //     _tag: \"Fail\",\n * //     failure: \"my error\"\n * //   }\n * // }\n *\n * @since 2.0.0\n * @category execution\n */\nexport const runSyncExit: <A, E>(effect: Effect<A, E>) => Exit.Exit<A, E> = _runtime.unsafeRunSyncExitEffect\n\n// -------------------------------------------------------------------------------------\n// zipping\n// -------------------------------------------------------------------------------------\n\n/**\n * Sequentially zips the this result with the specified result. Combines both\n * `Cause`s when both effects fail.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const validate: {\n  // -------------------------------------------------------------------------------------\n  // zipping\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * Sequentially zips the this result with the specified result. Combines both\n   * `Cause`s when both effects fail.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <B, E1, R1>(\n    that: Effect<B, E1, R1>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    } | undefined\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<[A, B], E1 | E, R1 | R>\n  // -------------------------------------------------------------------------------------\n  // zipping\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * Sequentially zips the this result with the specified result. Combines both\n   * `Cause`s when both effects fail.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, R, B, E1, R1>(\n    self: Effect<A, E, R>,\n    that: Effect<B, E1, R1>,\n    options?:\n      | {\n        readonly concurrent?: boolean | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): Effect<[A, B], E | E1, R | R1>\n} = fiberRuntime.validate\n\n/**\n * Sequentially zips this effect with the specified effect using the specified\n * combiner function. Combines the causes in case both effect fail.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const validateWith: {\n  /**\n   * Sequentially zips this effect with the specified effect using the specified\n   * combiner function. Combines the causes in case both effect fail.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <B, E1, R1, A, C>(\n    that: Effect<B, E1, R1>,\n    f: (a: A, b: B) => C,\n    options?:\n      | {\n        readonly concurrent?: boolean | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): <E, R>(self: Effect<A, E, R>) => Effect<C, E1 | E, R1 | R>\n  /**\n   * Sequentially zips this effect with the specified effect using the specified\n   * combiner function. Combines the causes in case both effect fail.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, R, B, E1, R1, C>(\n    self: Effect<A, E, R>,\n    that: Effect<B, E1, R1>,\n    f: (a: A, b: B) => C,\n    options?:\n      | {\n        readonly concurrent?: boolean | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): Effect<C, E | E1, R | R1>\n} = fiberRuntime.validateWith\n\n/**\n * The `Effect.zip` function allows you to combine two effects into a single\n * effect. This combined effect yields a tuple containing the results of both\n * input effects once they succeed.\n *\n * Note that `Effect.zip` processes effects sequentially: it first completes the\n * effect on the left and then the effect on the right.\n *\n * If you want to run the effects concurrently, you can use the `concurrent` option.\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * const task1 = Effect.succeed(1).pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Effect.log(\"task1 done\"))\n * )\n * const task2 = Effect.succeed(\"hello\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Effect.log(\"task2 done\"))\n * )\n *\n * const task3 = Effect.zip(task1, task2)\n *\n * Effect.runPromise(task3).then(console.log)\n * // Output:\n * // timestamp=... level=INFO fiber=#0 message=\"task1 done\"\n * // timestamp=... level=INFO fiber=#0 message=\"task2 done\"\n * // [ 1, 'hello' ]\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * const task1 = Effect.succeed(1).pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Effect.log(\"task1 done\"))\n * )\n * const task2 = Effect.succeed(\"hello\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Effect.log(\"task2 done\"))\n * )\n *\n * const task3 = Effect.zip(task1, task2, { concurrent: true })\n *\n * Effect.runPromise(task3).then(console.log)\n * // Output:\n * // timestamp=... level=INFO fiber=#0 message=\"task2 done\"\n * // timestamp=... level=INFO fiber=#0 message=\"task1 done\"\n * // [ 1, 'hello' ]\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zip: {\n  /**\n   * The `Effect.zip` function allows you to combine two effects into a single\n   * effect. This combined effect yields a tuple containing the results of both\n   * input effects once they succeed.\n   *\n   * Note that `Effect.zip` processes effects sequentially: it first completes the\n   * effect on the left and then the effect on the right.\n   *\n   * If you want to run the effects concurrently, you can use the `concurrent` option.\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * const task1 = Effect.succeed(1).pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Effect.log(\"task1 done\"))\n   * )\n   * const task2 = Effect.succeed(\"hello\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Effect.log(\"task2 done\"))\n   * )\n   *\n   * const task3 = Effect.zip(task1, task2)\n   *\n   * Effect.runPromise(task3).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#0 message=\"task1 done\"\n   * // timestamp=... level=INFO fiber=#0 message=\"task2 done\"\n   * // [ 1, 'hello' ]\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * const task1 = Effect.succeed(1).pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Effect.log(\"task1 done\"))\n   * )\n   * const task2 = Effect.succeed(\"hello\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Effect.log(\"task2 done\"))\n   * )\n   *\n   * const task3 = Effect.zip(task1, task2, { concurrent: true })\n   *\n   * Effect.runPromise(task3).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#0 message=\"task2 done\"\n   * // timestamp=... level=INFO fiber=#0 message=\"task1 done\"\n   * // [ 1, 'hello' ]\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2, R2>(\n    that: Effect<A2, E2, R2>,\n    options?:\n      | {\n        readonly concurrent?: boolean | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<[A, A2], E2 | E, R2 | R>\n  /**\n   * The `Effect.zip` function allows you to combine two effects into a single\n   * effect. This combined effect yields a tuple containing the results of both\n   * input effects once they succeed.\n   *\n   * Note that `Effect.zip` processes effects sequentially: it first completes the\n   * effect on the left and then the effect on the right.\n   *\n   * If you want to run the effects concurrently, you can use the `concurrent` option.\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * const task1 = Effect.succeed(1).pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Effect.log(\"task1 done\"))\n   * )\n   * const task2 = Effect.succeed(\"hello\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Effect.log(\"task2 done\"))\n   * )\n   *\n   * const task3 = Effect.zip(task1, task2)\n   *\n   * Effect.runPromise(task3).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#0 message=\"task1 done\"\n   * // timestamp=... level=INFO fiber=#0 message=\"task2 done\"\n   * // [ 1, 'hello' ]\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * const task1 = Effect.succeed(1).pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Effect.log(\"task1 done\"))\n   * )\n   * const task2 = Effect.succeed(\"hello\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Effect.log(\"task2 done\"))\n   * )\n   *\n   * const task3 = Effect.zip(task1, task2, { concurrent: true })\n   *\n   * Effect.runPromise(task3).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#0 message=\"task2 done\"\n   * // timestamp=... level=INFO fiber=#0 message=\"task1 done\"\n   * // [ 1, 'hello' ]\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    that: Effect<A2, E2, R2>,\n    options?:\n      | {\n        readonly concurrent?: boolean | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): Effect<[A, A2], E | E2, R | R2>\n} = fiberRuntime.zipOptions\n\n/**\n * Sequentially run this effect with the specified effect, _discarding_ the result\n * of the second effect (`that`) in the chain.\n *\n * `{ concurrent: true }` can be passed to the options to make it a concurrent execution\n * of both effects instead of sequential.\n *\n * @example\n *\n * import { Effect } from 'effect';\n *\n * const effect = Effect.succeed(\"a message\").pipe(\n *   Effect.zipLeft(Effect.succeed(42)),\n * )\n *\n * assert.deepStrictEqual(Effect.runSync(effect), \"a message\");\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipLeft: {\n  /**\n   * Sequentially run this effect with the specified effect, _discarding_ the result\n   * of the second effect (`that`) in the chain.\n   *\n   * `{ concurrent: true }` can be passed to the options to make it a concurrent execution\n   * of both effects instead of sequential.\n   *\n   * @example\n   *\n   * import { Effect } from 'effect';\n   *\n   * const effect = Effect.succeed(\"a message\").pipe(\n   *   Effect.zipLeft(Effect.succeed(42)),\n   * )\n   *\n   * assert.deepStrictEqual(Effect.runSync(effect), \"a message\");\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2, R2>(\n    that: Effect<A2, E2, R2>,\n    options?:\n      | {\n        readonly concurrent?: boolean | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E2 | E, R2 | R>\n  /**\n   * Sequentially run this effect with the specified effect, _discarding_ the result\n   * of the second effect (`that`) in the chain.\n   *\n   * `{ concurrent: true }` can be passed to the options to make it a concurrent execution\n   * of both effects instead of sequential.\n   *\n   * @example\n   *\n   * import { Effect } from 'effect';\n   *\n   * const effect = Effect.succeed(\"a message\").pipe(\n   *   Effect.zipLeft(Effect.succeed(42)),\n   * )\n   *\n   * assert.deepStrictEqual(Effect.runSync(effect), \"a message\");\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    that: Effect<A2, E2, R2>,\n    options?:\n      | {\n        readonly concurrent?: boolean | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n      | undefined\n  ): Effect<A, E | E2, R | R2>\n} = fiberRuntime.zipLeftOptions\n\n/**\n * Sequentially run this effect with the specified effect, _returning_ the result\n * of the second effect (`that`) in the chain.\n *\n * `{ concurrent: true }` can be passed to the options to make it a concurrent execution\n * of both effects instead of sequential.\n *\n * @example\n *\n * import { Effect } from 'effect';\n *\n * const effect = Effect.succeed(\"a message\").pipe(\n *   Effect.zipRight(Effect.succeed(42)),\n * )\n *\n * assert.deepStrictEqual(Effect.runSync(effect), 42);\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipRight: {\n  /**\n   * Sequentially run this effect with the specified effect, _returning_ the result\n   * of the second effect (`that`) in the chain.\n   *\n   * `{ concurrent: true }` can be passed to the options to make it a concurrent execution\n   * of both effects instead of sequential.\n   *\n   * @example\n   *\n   * import { Effect } from 'effect';\n   *\n   * const effect = Effect.succeed(\"a message\").pipe(\n   *   Effect.zipRight(Effect.succeed(42)),\n   * )\n   *\n   * assert.deepStrictEqual(Effect.runSync(effect), 42);\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2, R2>(\n    that: Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A2, E2 | E, R2 | R>\n  /**\n   * Sequentially run this effect with the specified effect, _returning_ the result\n   * of the second effect (`that`) in the chain.\n   *\n   * `{ concurrent: true }` can be passed to the options to make it a concurrent execution\n   * of both effects instead of sequential.\n   *\n   * @example\n   *\n   * import { Effect } from 'effect';\n   *\n   * const effect = Effect.succeed(\"a message\").pipe(\n   *   Effect.zipRight(Effect.succeed(42)),\n   * )\n   *\n   * assert.deepStrictEqual(Effect.runSync(effect), 42);\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Effect<A, E, R>,\n    that: Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect<A2, E2 | E, R2 | R>\n} = fiberRuntime.zipRightOptions\n\n/**\n * The `Effect.zipWith` function operates similarly to {@link zip} by combining\n * two effects. However, instead of returning a tuple, it allows you to apply a\n * function to the results of the combined effects, transforming them into a\n * single value\n *\n * @example\n * import { Effect } from \"effect\"\n *\n * const task1 = Effect.succeed(1).pipe(\n *   Effect.delay(\"200 millis\"),\n *   Effect.tap(Effect.log(\"task1 done\"))\n * )\n * const task2 = Effect.succeed(\"hello\").pipe(\n *   Effect.delay(\"100 millis\"),\n *   Effect.tap(Effect.log(\"task2 done\"))\n * )\n *\n * const task3 = Effect.zipWith(\n *   task1,\n *   task2,\n *   (number, string) => number + string.length\n * )\n *\n * Effect.runPromise(task3).then(console.log)\n * // Output:\n * // timestamp=... level=INFO fiber=#3 message=\"task1 done\"\n * // timestamp=... level=INFO fiber=#2 message=\"task2 done\"\n * // 6\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWith: {\n  /**\n   * The `Effect.zipWith` function operates similarly to {@link zip} by combining\n   * two effects. However, instead of returning a tuple, it allows you to apply a\n   * function to the results of the combined effects, transforming them into a\n   * single value\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * const task1 = Effect.succeed(1).pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Effect.log(\"task1 done\"))\n   * )\n   * const task2 = Effect.succeed(\"hello\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Effect.log(\"task2 done\"))\n   * )\n   *\n   * const task3 = Effect.zipWith(\n   *   task1,\n   *   task2,\n   *   (number, string) => number + string.length\n   * )\n   *\n   * Effect.runPromise(task3).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#3 message=\"task1 done\"\n   * // timestamp=... level=INFO fiber=#2 message=\"task2 done\"\n   * // 6\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2, R2, A, B>(\n    that: Effect<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): <E, R>(self: Effect<A, E, R>) => Effect<B, E2 | E, R2 | R>\n  /**\n   * The `Effect.zipWith` function operates similarly to {@link zip} by combining\n   * two effects. However, instead of returning a tuple, it allows you to apply a\n   * function to the results of the combined effects, transforming them into a\n   * single value\n   *\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * const task1 = Effect.succeed(1).pipe(\n   *   Effect.delay(\"200 millis\"),\n   *   Effect.tap(Effect.log(\"task1 done\"))\n   * )\n   * const task2 = Effect.succeed(\"hello\").pipe(\n   *   Effect.delay(\"100 millis\"),\n   *   Effect.tap(Effect.log(\"task2 done\"))\n   * )\n   *\n   * const task3 = Effect.zipWith(\n   *   task1,\n   *   task2,\n   *   (number, string) => number + string.length\n   * )\n   *\n   * Effect.runPromise(task3).then(console.log)\n   * // Output:\n   * // timestamp=... level=INFO fiber=#3 message=\"task1 done\"\n   * // timestamp=... level=INFO fiber=#2 message=\"task2 done\"\n   * // 6\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, R, A2, E2, R2, B>(\n    self: Effect<A, E, R>,\n    that: Effect<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect<B, E2 | E, R2 | R>\n} = fiberRuntime.zipWithOptions\n\n// -------------------------------------------------------------------------------------\n// applicatives\n// -------------------------------------------------------------------------------------\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const ap: {\n  // -------------------------------------------------------------------------------------\n  // applicatives\n  // -------------------------------------------------------------------------------------\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A, E2, R2>(that: Effect<A, E2, R2>): <B, R, E>(self: Effect<(a: A) => B, E, R>) => Effect<B, E | E2, R | R2>\n  // -------------------------------------------------------------------------------------\n  // applicatives\n  // -------------------------------------------------------------------------------------\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A, B, E, R, E2, R2>(self: Effect<(a: A) => B, E, R>, that: Effect<A, E2, R2>): Effect<B, E | E2, R | R2>\n} = dual(\n  2,\n  <A, B, E, R, E2, R2>(self: Effect<(a: A) => B, E, R>, that: Effect<A, E2, R2>): Effect<B, E | E2, R | R2> =>\n    zipWith(self, that, (f, a) => f(a))\n)\n// -------------------------------------------------------------------------------------\n// requests & batching\n// -------------------------------------------------------------------------------------\n\n/**\n * @category requests & batching\n * @since 2.0.0\n */\nexport const blocked: <A, E>(blockedRequests: RequestBlock, _continue: Effect<A, E>) => Blocked<A, E> = core.blocked\n\n/**\n * @category requests & batching\n * @since 2.0.0\n */\nexport const runRequestBlock: (blockedRequests: RequestBlock) => Effect<void> = core.runRequestBlock\n\n/**\n * @category requests & batching\n * @since 2.0.0\n */\nexport const step: <A, E, R>(self: Effect<A, E, R>) => Effect<Exit.Exit<A, E> | Blocked<A, E>, never, R> = core.step\n\n/**\n * @since 2.0.0\n * @category requests & batching\n */\nexport const request: {\n  /**\n   * @since 2.0.0\n   * @category requests & batching\n   */\n  <A extends Request.Request<any, any>, Ds extends RequestResolver<A> | Effect<RequestResolver<A>, any, any>>(\n    dataSource: Ds\n  ): (\n    self: A\n  ) => Effect<\n    Request.Request.Success<A>,\n    Request.Request.Error<A>,\n    [Ds] extends [Effect<any, any, any>] ? Effect.Context<Ds> : never\n  >\n  /**\n   * @since 2.0.0\n   * @category requests & batching\n   */\n  <\n    Ds extends RequestResolver<A> | Effect<RequestResolver<A>, any, any>,\n    A extends Request.Request<any, any>\n  >(self: A, dataSource: Ds): Effect<\n    Request.Request.Success<A>,\n    Request.Request.Error<A>,\n    [Ds] extends [Effect<any, any, any>] ? Effect.Context<Ds> : never\n  >\n} = dual((args) => Request.isRequest(args[0]), query.fromRequest)\n\n/**\n * @since 2.0.0\n * @category requests & batching\n */\nexport const cacheRequestResult: <A extends Request.Request<any, any>>(\n  request: A,\n  result: Request.Request.Result<A>\n) => Effect<void> = query.cacheRequest\n\n/**\n * @since 2.0.0\n * @category requests & batching\n */\nexport const withRequestBatching: {\n  /**\n   * @since 2.0.0\n   * @category requests & batching\n   */\n  (requestBatching: boolean): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * @since 2.0.0\n   * @category requests & batching\n   */\n  <A, E, R>(self: Effect<A, E, R>, requestBatching: boolean): Effect<A, E, R>\n} = core.withRequestBatching\n\n/**\n * @since 2.0.0\n * @category requests & batching\n */\nexport const withRequestCaching: {\n  /**\n   * @since 2.0.0\n   * @category requests & batching\n   */\n  (strategy: boolean): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * @since 2.0.0\n   * @category requests & batching\n   */\n  <A, E, R>(self: Effect<A, E, R>, strategy: boolean): Effect<A, E, R>\n} = query.withRequestCaching\n\n/**\n * @since 2.0.0\n * @category requests & batching\n */\nexport const withRequestCache: {\n  /**\n   * @since 2.0.0\n   * @category requests & batching\n   */\n  (cache: Request.Cache): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * @since 2.0.0\n   * @category requests & batching\n   */\n  <A, E, R>(self: Effect<A, E, R>, cache: Request.Cache): Effect<A, E, R>\n} = query.withRequestCache\n\n// -------------------------------------------------------------------------------------\n// tracing\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const tracer: Effect<Tracer.Tracer> = effect.tracer\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const tracerWith: <A, E, R>(f: (tracer: Tracer.Tracer) => Effect<A, E, R>) => Effect<A, E, R> =\n  defaultServices.tracerWith\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const withTracer: {\n  /**\n   * @since 2.0.0\n   * @category tracing\n   */\n  (value: Tracer.Tracer): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * @since 2.0.0\n   * @category tracing\n   */\n  <A, E, R>(effect: Effect<A, E, R>, value: Tracer.Tracer): Effect<A, E, R>\n} = defaultServices.withTracer\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const withTracerScoped: (value: Tracer.Tracer) => Effect<void, never, Scope.Scope> =\n  fiberRuntime.withTracerScoped\n\n/**\n * Disable the tracer for the given Effect.\n *\n * @since 2.0.0\n * @category tracing\n * @example\n * import { Effect } from \"effect\"\n *\n * Effect.succeed(42).pipe(\n *   Effect.withSpan(\"my-span\"),\n *   // the span will not be registered with the tracer\n *   Effect.withTracerEnabled(false)\n * )\n */\nexport const withTracerEnabled: {\n  /**\n   * Disable the tracer for the given Effect.\n   *\n   * @since 2.0.0\n   * @category tracing\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * Effect.succeed(42).pipe(\n   *   Effect.withSpan(\"my-span\"),\n   *   // the span will not be registered with the tracer\n   *   Effect.withTracerEnabled(false)\n   * )\n   */\n  (enabled: boolean): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Disable the tracer for the given Effect.\n   *\n   * @since 2.0.0\n   * @category tracing\n   * @example\n   * import { Effect } from \"effect\"\n   *\n   * Effect.succeed(42).pipe(\n   *   Effect.withSpan(\"my-span\"),\n   *   // the span will not be registered with the tracer\n   *   Effect.withTracerEnabled(false)\n   * )\n   */\n  <A, E, R>(effect: Effect<A, E, R>, enabled: boolean): Effect<A, E, R>\n} = core.withTracerEnabled\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const withTracerTiming: {\n  /**\n   * @since 2.0.0\n   * @category tracing\n   */\n  (enabled: boolean): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * @since 2.0.0\n   * @category tracing\n   */\n  <A, E, R>(effect: Effect<A, E, R>, enabled: boolean): Effect<A, E, R>\n} = core.withTracerTiming\n\n/**\n * Adds an annotation to each span in this effect.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const annotateSpans: {\n  /**\n   * Adds an annotation to each span in this effect.\n   *\n   * @since 2.0.0\n   * @category tracing\n   */\n  (key: string, value: unknown): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Adds an annotation to each span in this effect.\n   *\n   * @since 2.0.0\n   * @category tracing\n   */\n  (values: Record<string, unknown>): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Adds an annotation to each span in this effect.\n   *\n   * @since 2.0.0\n   * @category tracing\n   */\n  <A, E, R>(effect: Effect<A, E, R>, key: string, value: unknown): Effect<A, E, R>\n  /**\n   * Adds an annotation to each span in this effect.\n   *\n   * @since 2.0.0\n   * @category tracing\n   */\n  <A, E, R>(effect: Effect<A, E, R>, values: Record<string, unknown>): Effect<A, E, R>\n} = effect.annotateSpans\n\n/**\n * Adds an annotation to the current span if available\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const annotateCurrentSpan: {\n  /**\n   * Adds an annotation to the current span if available\n   *\n   * @since 2.0.0\n   * @category tracing\n   */\n  (key: string, value: unknown): Effect<void>\n  /**\n   * Adds an annotation to the current span if available\n   *\n   * @since 2.0.0\n   * @category tracing\n   */\n  (values: Record<string, unknown>): Effect<void>\n} = effect.annotateCurrentSpan\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const currentSpan: Effect<Tracer.Span, Cause.NoSuchElementException> = effect.currentSpan\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const currentParentSpan: Effect<Tracer.AnySpan, Cause.NoSuchElementException> = effect.currentParentSpan\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const spanAnnotations: Effect<HashMap.HashMap<string, unknown>> = effect.spanAnnotations\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const spanLinks: Effect<Chunk.Chunk<Tracer.SpanLink>> = effect.spanLinks\n\n/**\n * For all spans in this effect, add a link with the provided span.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const linkSpans: {\n  /**\n   * For all spans in this effect, add a link with the provided span.\n   *\n   * @since 2.0.0\n   * @category tracing\n   */\n  (span: Tracer.AnySpan, attributes?: Record<string, unknown>): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * For all spans in this effect, add a link with the provided span.\n   *\n   * @since 2.0.0\n   * @category tracing\n   */\n  <A, E, R>(\n    self: Effect<A, E, R>,\n    span: Tracer.AnySpan,\n    attributes?: Record<string, unknown>\n  ): Effect<A, E, R>\n} = effect.linkSpans\n\n/**\n * Create a new span for tracing.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const makeSpan: (\n  name: string,\n  options?: Tracer.SpanOptions\n) => Effect<Tracer.Span> = effect.makeSpan\n\n/**\n * Create a new span for tracing, and automatically close it when the Scope\n * finalizes.\n *\n * The span is not added to the current span stack, so no child spans will be\n * created for it.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const makeSpanScoped: (\n  name: string,\n  options?: Tracer.SpanOptions | undefined\n) => Effect<Tracer.Span, never, Scope.Scope> = fiberRuntime.makeSpanScoped\n\n/**\n * Create a new span for tracing, and automatically close it when the effect\n * completes.\n *\n * The span is not added to the current span stack, so no child spans will be\n * created for it.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const useSpan: {\n  /**\n   * Create a new span for tracing, and automatically close it when the effect\n   * completes.\n   *\n   * The span is not added to the current span stack, so no child spans will be\n   * created for it.\n   *\n   * @since 2.0.0\n   * @category tracing\n   */\n  <A, E, R>(name: string, evaluate: (span: Tracer.Span) => Effect<A, E, R>): Effect<A, E, R>\n  /**\n   * Create a new span for tracing, and automatically close it when the effect\n   * completes.\n   *\n   * The span is not added to the current span stack, so no child spans will be\n   * created for it.\n   *\n   * @since 2.0.0\n   * @category tracing\n   */\n  <A, E, R>(\n    name: string,\n    options: Tracer.SpanOptions,\n    evaluate: (span: Tracer.Span) => Effect<A, E, R>\n  ): Effect<A, E, R>\n} = effect.useSpan\n\n/**\n * Wraps the effect with a new span for tracing.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const withSpan: {\n  /**\n   * Wraps the effect with a new span for tracing.\n   *\n   * @since 2.0.0\n   * @category tracing\n   */\n  (\n    name: string,\n    options?: Tracer.SpanOptions | undefined\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, Exclude<R, Tracer.ParentSpan>>\n  /**\n   * Wraps the effect with a new span for tracing.\n   *\n   * @since 2.0.0\n   * @category tracing\n   */\n  <A, E, R>(\n    self: Effect<A, E, R>,\n    name: string,\n    options?: Tracer.SpanOptions | undefined\n  ): Effect<A, E, Exclude<R, Tracer.ParentSpan>>\n} = effect.withSpan\n\n/**\n * Wraps a function that returns an effect with a new span for tracing.\n *\n * @since 3.2.0\n * @category models\n */\nexport interface FunctionWithSpanOptions {\n  readonly name: string\n  readonly attributes?: Record<string, unknown> | undefined\n  readonly links?: ReadonlyArray<Tracer.SpanLink> | undefined\n  readonly parent?: Tracer.AnySpan | undefined\n  readonly root?: boolean | undefined\n  readonly context?: Context.Context<never> | undefined\n  readonly kind?: Tracer.SpanKind | undefined\n}\n\n/**\n * Wraps a function that returns an effect with a new span for tracing.\n *\n * @since 3.2.0\n * @category tracing\n * @example\n * import { Effect } from \"effect\"\n *\n * const getTodo = Effect.functionWithSpan({\n *   body: (id: number) => Effect.succeed(`Got todo ${id}!`),\n *   options: (id) => ({\n *     name: `getTodo-${id}`,\n *     attributes: { id }\n *   })\n * })\n */\nexport const functionWithSpan: <Args extends Array<any>, Ret extends Effect<any, any, any>>(\n  options: {\n    readonly body: (...args: Args) => Ret\n    readonly options: FunctionWithSpanOptions | ((...args: Args) => FunctionWithSpanOptions)\n    readonly captureStackTrace?: boolean | undefined\n  }\n) => (...args: Args) => Unify.Unify<Ret> = effect.functionWithSpan\n\n/**\n * Wraps the effect with a new span for tracing.\n *\n * The span is ended when the Scope is finalized.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const withSpanScoped: {\n  /**\n   * Wraps the effect with a new span for tracing.\n   *\n   * The span is ended when the Scope is finalized.\n   *\n   * @since 2.0.0\n   * @category tracing\n   */\n  (\n    name: string,\n    options?: Tracer.SpanOptions\n  ): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, Exclude<R, Tracer.ParentSpan> | Scope.Scope>\n  /**\n   * Wraps the effect with a new span for tracing.\n   *\n   * The span is ended when the Scope is finalized.\n   *\n   * @since 2.0.0\n   * @category tracing\n   */\n  <A, E, R>(\n    self: Effect<A, E, R>,\n    name: string,\n    options?: Tracer.SpanOptions\n  ): Effect<A, E, Exclude<R, Tracer.ParentSpan> | Scope.Scope>\n} = fiberRuntime.withSpanScoped\n\n/**\n * Adds the provided span to the current span stack.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const withParentSpan: {\n  /**\n   * Adds the provided span to the current span stack.\n   *\n   * @since 2.0.0\n   * @category tracing\n   */\n  (span: Tracer.AnySpan): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, Exclude<R, Tracer.ParentSpan>>\n  /**\n   * Adds the provided span to the current span stack.\n   *\n   * @since 2.0.0\n   * @category tracing\n   */\n  <A, E, R>(self: Effect<A, E, R>, span: Tracer.AnySpan): Effect<A, E, Exclude<R, Tracer.ParentSpan>>\n} = effect.withParentSpan\n\n// -------------------------------------------------------------------------------------\n// optionality\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns an effect that errors with `NoSuchElementException` if the value is\n * null or undefined, otherwise succeeds with the value.\n *\n * @since 2.0.0\n * @category optionality\n */\nexport const fromNullable: <A>(value: A) => Effect<NonNullable<A>, Cause.NoSuchElementException> = effect.fromNullable\n\n/**\n * Wraps the success value of this effect with `Option.some`, and maps\n * `Cause.NoSuchElementException` to `Option.none`.\n *\n * @since 2.0.0\n * @category optionality\n */\nexport const optionFromOptional: <A, E, R>(\n  self: Effect<A, E, R>\n) => Effect<Option.Option<A>, Exclude<E, Cause.NoSuchElementException>, R> = effect.optionFromOptional\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport declare namespace Tag {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface ProhibitedType {\n    Service?: `property \"Service\" is forbidden`\n    Identifier?: `property \"Identifier\" is forbidden`\n    _op?: `property \"_op\" is forbidden`\n    of?: `property \"of\" is forbidden`\n    context?: `property \"context\" is forbidden`\n    key?: `property \"key\" is forbidden`\n    stack?: `property \"stack\" is forbidden`\n    name?: `property \"name\" is forbidden`\n    pipe?: `property \"pipe\" is forbidden`\n    use?: `property \"use\" is forbidden`\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export type AllowedType = (Record<PropertyKey, any> & ProhibitedType) | string | number | symbol\n\n  /**\n   * @since 3.9.0\n   * @category models\n   */\n  export type Proxy<Self, Type> = {\n    [\n      k in keyof Type as Type[k] extends ((...args: [...infer Args]) => infer Ret) ?\n        ((...args: Readonly<Args>) => Ret) extends Type[k] ? k : never\n        : k\n    ]: Type[k] extends (...args: [...infer Args]) => Effect<infer A, infer E, infer R> ?\n      (...args: Readonly<Args>) => Effect<A, E, Self | R>\n      : Type[k] extends (...args: [...infer Args]) => infer A ? (...args: Readonly<Args>) => Effect<A, never, Self>\n      : Type[k] extends Effect<infer A, infer E, infer R> ? Effect<A, E, Self | R>\n      : Effect<Type[k], never, Self>\n  }\n}\n\nconst makeTagProxy = (TagClass: Context.Tag<any, any> & Record<PropertyKey, any>) => {\n  const cache = new Map()\n  return new Proxy(TagClass, {\n    get(target: any, prop: any, receiver) {\n      if (prop in target) {\n        return Reflect.get(target, prop, receiver)\n      }\n      if (cache.has(prop)) {\n        return cache.get(prop)\n      }\n      const fn = (...args: Array<any>) =>\n        core.andThen(target, (s: any) => {\n          if (typeof s[prop] === \"function\") {\n            cache.set(prop, (...args: Array<any>) => core.andThen(target, (s: any) => s[prop](...args)))\n            return s[prop](...args)\n          }\n          cache.set(prop, core.andThen(target, (s: any) => s[prop]))\n          return s[prop]\n        })\n      const cn = core.andThen(target, (s: any) => s[prop])\n      Object.assign(fn, cn)\n      Object.setPrototypeOf(fn, Object.getPrototypeOf(cn))\n      cache.set(prop, fn)\n      return fn\n    }\n  })\n}\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const Tag: <const Id extends string>(id: Id) => <\n  Self,\n  Type extends Tag.AllowedType\n>() =>\n  & Context.TagClass<Self, Id, Type>\n  & (Type extends Record<PropertyKey, any> ? Tag.Proxy<Self, Type> : {})\n  & {\n    use: <X>(\n      body: (_: Type) => X\n    ) => X extends Effect<infer A, infer E, infer R> ? Effect<A, E, R | Self> : Effect<X, never, Self>\n  } = (id) => () => {\n    const limit = Error.stackTraceLimit\n    Error.stackTraceLimit = 2\n    const creationError = new Error()\n    Error.stackTraceLimit = limit\n    function TagClass() {}\n    Object.setPrototypeOf(TagClass, TagProto)\n    TagClass.key = id\n    Object.defineProperty(TagClass, \"use\", {\n      get() {\n        return (body: (_: any) => any) => core.andThen(this, body)\n      }\n    })\n    Object.defineProperty(TagClass, \"stack\", {\n      get() {\n        return creationError.stack\n      }\n    })\n    return makeTagProxy(TagClass as any)\n  }\n\n/**\n * @since 3.9.0\n * @category context\n * @experimental might be up for breaking changes\n */\nexport const Service: <Self>() => {\n  <\n    const Key extends string,\n    const Make extends\n      | {\n        readonly scoped: Effect<Service.AllowedType<Key, Make>, any, any>\n        readonly dependencies?: ReadonlyArray<Layer.Layer.Any>\n        readonly accessors?: boolean\n        /** @deprecated */\n        readonly ಠ_ಠ: never\n      }\n      | {\n        readonly effect: Effect<Service.AllowedType<Key, Make>, any, any>\n        readonly dependencies?: ReadonlyArray<Layer.Layer.Any>\n        readonly accessors?: boolean\n        /** @deprecated */\n        readonly ಠ_ಠ: never\n      }\n      | {\n        readonly sync: LazyArg<Service.AllowedType<Key, Make>>\n        readonly dependencies?: ReadonlyArray<Layer.Layer.Any>\n        readonly accessors?: boolean\n        /** @deprecated */\n        readonly ಠ_ಠ: never\n      }\n      | {\n        readonly succeed: Service.AllowedType<Key, Make>\n        readonly dependencies?: ReadonlyArray<Layer.Layer.Any>\n        readonly accessors?: boolean\n        /** @deprecated */\n        readonly ಠ_ಠ: never\n      }\n  >(\n    key: Key,\n    make: Make\n  ): Service.Class<Self, Key, Make>\n  <\n    const Key extends string,\n    const Make extends NoExcessProperties<{\n      readonly scoped: Effect<Service.AllowedType<Key, Make>, any, any>\n      readonly dependencies?: ReadonlyArray<Layer.Layer.Any>\n      readonly accessors?: boolean\n    }, Make>\n  >(\n    key: Key,\n    make: Make\n  ): Service.Class<Self, Key, Make>\n  <\n    const Key extends string,\n    const Make extends NoExcessProperties<{\n      readonly effect: Effect<Service.AllowedType<Key, Make>, any, any>\n      readonly dependencies?: ReadonlyArray<Layer.Layer.Any>\n      readonly accessors?: boolean\n    }, Make>\n  >(\n    key: Key,\n    make: Make\n  ): Service.Class<Self, Key, Make>\n  <\n    const Key extends string,\n    const Make extends NoExcessProperties<{\n      readonly sync: LazyArg<Service.AllowedType<Key, Make>>\n      readonly dependencies?: ReadonlyArray<Layer.Layer.Any>\n      readonly accessors?: boolean\n    }, Make>\n  >(\n    key: Key,\n    make: Make\n  ): Service.Class<Self, Key, Make>\n  <\n    const Key extends string,\n    const Make extends NoExcessProperties<{\n      readonly succeed: Service.AllowedType<Key, Make>\n      readonly dependencies?: ReadonlyArray<Layer.Layer.Any>\n      readonly accessors?: boolean\n    }, Make>\n  >(\n    key: Key,\n    make: Make\n  ): Service.Class<Self, Key, Make>\n} = function() {\n  return function() {\n    const [id, maker] = arguments\n    const proxy = \"accessors\" in maker ? maker[\"accessors\"] : false\n    const limit = Error.stackTraceLimit\n    Error.stackTraceLimit = 2\n    const creationError = new Error()\n    Error.stackTraceLimit = limit\n\n    let patchState: \"unchecked\" | \"plain\" | \"patched\" = \"unchecked\"\n    const TagClass: any = function(this: any, service: any) {\n      if (patchState === \"unchecked\") {\n        const proto = Object.getPrototypeOf(service)\n        if (proto === Object.prototype || proto === null) {\n          patchState = \"plain\"\n        } else {\n          const selfProto = Object.getPrototypeOf(this)\n          Object.setPrototypeOf(selfProto, proto)\n          patchState = \"patched\"\n        }\n      }\n      if (patchState === \"plain\") {\n        Object.assign(this, service)\n      } else if (patchState === \"patched\") {\n        Object.setPrototypeOf(service, Object.getPrototypeOf(this))\n        return service\n      }\n    }\n\n    TagClass.prototype._tag = id\n    Object.defineProperty(TagClass, \"make\", {\n      get() {\n        return (service: any) => new this(service)\n      }\n    })\n    Object.defineProperty(TagClass, \"use\", {\n      get() {\n        return (body: any) => core.andThen(this, body)\n      }\n    })\n    TagClass.key = id\n\n    Object.assign(TagClass, TagProto)\n\n    Object.defineProperty(TagClass, \"stack\", {\n      get() {\n        return creationError.stack\n      }\n    })\n\n    const hasDeps = \"dependencies\" in maker && maker.dependencies.length > 0\n    const layerName = hasDeps ? \"DefaultWithoutDependencies\" : \"Default\"\n    let layerCache: Layer.Layer.Any | undefined\n    if (\"effect\" in maker) {\n      Object.defineProperty(TagClass, layerName, {\n        get(this: any) {\n          return layerCache ??= layer.fromEffect(TagClass, map(maker.effect, (_) => new this(_)))\n        }\n      })\n    } else if (\"scoped\" in maker) {\n      Object.defineProperty(TagClass, layerName, {\n        get(this: any) {\n          return layerCache ??= layer.scoped(TagClass, map(maker.scoped, (_) => new this(_)))\n        }\n      })\n    } else if (\"sync\" in maker) {\n      Object.defineProperty(TagClass, layerName, {\n        get(this: any) {\n          return layerCache ??= layer.sync(TagClass, () => new this(maker.sync()))\n        }\n      })\n    } else {\n      Object.defineProperty(TagClass, layerName, {\n        get(this: any) {\n          return layerCache ??= layer.succeed(TagClass, new this(maker.succeed))\n        }\n      })\n    }\n\n    if (hasDeps) {\n      let layerWithDepsCache: Layer.Layer.Any | undefined\n      Object.defineProperty(TagClass, \"Default\", {\n        get(this: any) {\n          return layerWithDepsCache ??= layer.provide(\n            this.DefaultWithoutDependencies,\n            maker.dependencies\n          )\n        }\n      })\n    }\n\n    return proxy === true ? makeTagProxy(TagClass) : TagClass\n  }\n}\n\n/**\n * @since 3.9.0\n * @category context\n */\nexport declare namespace Service {\n  /**\n   * @since 3.9.0\n   */\n  export interface ProhibitedType {\n    Service?: `property \"Service\" is forbidden`\n    Identifier?: `property \"Identifier\" is forbidden`\n    Default?: `property \"Default\" is forbidden`\n    DefaultWithoutDependencies?: `property \"DefaultWithoutDependencies\" is forbidden`\n    _op_layer?: `property \"_op_layer\" is forbidden`\n    _op?: `property \"_op\" is forbidden`\n    of?: `property \"of\" is forbidden`\n    make?: `property \"make\" is forbidden`\n    context?: `property \"context\" is forbidden`\n    key?: `property \"key\" is forbidden`\n    stack?: `property \"stack\" is forbidden`\n    name?: `property \"name\" is forbidden`\n    pipe?: `property \"pipe\" is forbidden`\n    use?: `property \"use\" is forbidden`\n    _tag?: `property \"_tag\" is forbidden`\n  }\n\n  /**\n   * @since 3.9.0\n   */\n  export type AllowedType<Key extends string, Make> = MakeAccessors<Make> extends true ?\n      & Record<PropertyKey, any>\n      & {\n        readonly [K in Extract<keyof MakeService<Make>, keyof ProhibitedType>]: K extends \"_tag\" ? Key\n          : ProhibitedType[K]\n      }\n    : Record<PropertyKey, any> & { readonly _tag?: Key }\n\n  /**\n   * @since 3.9.0\n   */\n  export type Class<\n    Self,\n    Key extends string,\n    Make\n  > =\n    & {\n      new(_: MakeService<Make>): MakeService<Make> & {\n        readonly _tag: Key\n      }\n      readonly use: <X>(\n        body: (_: Self) => X\n      ) => X extends Effect<infer A, infer E, infer R> ? Effect<A, E, R | Self> : Effect<X, never, Self>\n      readonly make: (_: MakeService<Make>) => Self\n    }\n    & Context.Tag<Self, Self>\n    & (MakeAccessors<Make> extends true ? Tag.Proxy<Self, MakeService<Make>> : {})\n    & (MakeDeps<Make> extends never ? {\n        readonly Default: Layer.Layer<Self, MakeError<Make>, MakeContext<Make>>\n      } :\n      {\n        readonly DefaultWithoutDependencies: Layer.Layer<Self, MakeError<Make>, MakeContext<Make>>\n        readonly Default: Layer.Layer<\n          Self,\n          MakeError<Make> | MakeDepsE<Make>,\n          | Exclude<MakeContext<Make>, MakeDepsOut<Make>>\n          | MakeDepsIn<Make>\n        >\n      })\n\n  /**\n   * @since 3.9.0\n   */\n  export type MakeService<Make> = Make extends { readonly effect: Effect<infer _A, infer _E, infer _R> } ? _A\n    : Make extends { readonly scoped: Effect<infer _A, infer _E, infer _R> } ? _A\n    : Make extends { readonly sync: LazyArg<infer A> } ? A\n    : Make extends { readonly succeed: infer A } ? A\n    : never\n\n  /**\n   * @since 3.9.0\n   */\n  export type MakeError<Make> = Make extends { readonly effect: Effect<infer _A, infer _E, infer _R> } ? _E\n    : Make extends { readonly scoped: Effect<infer _A, infer _E, infer _R> } ? _E\n    : never\n\n  /**\n   * @since 3.9.0\n   */\n  export type MakeContext<Make> = Make extends { readonly effect: Effect<infer _A, infer _E, infer _R> } ? _R\n    : Make extends { readonly scoped: Effect<infer _A, infer _E, infer _R> } ? Exclude<_R, Scope.Scope>\n    : never\n\n  /**\n   * @since 3.9.0\n   */\n  export type MakeDeps<Make> = Make extends { readonly dependencies: ReadonlyArray<Layer.Layer.Any> }\n    ? Make[\"dependencies\"][number]\n    : never\n\n  /**\n   * @since 3.9.0\n   */\n  export type MakeDepsOut<Make> = Contravariant.Type<MakeDeps<Make>[Layer.LayerTypeId][\"_ROut\"]>\n\n  /**\n   * @since 3.9.0\n   */\n  export type MakeDepsE<Make> = Covariant.Type<MakeDeps<Make>[Layer.LayerTypeId][\"_E\"]>\n\n  /**\n   * @since 3.9.0\n   */\n  export type MakeDepsIn<Make> = Covariant.Type<MakeDeps<Make>[Layer.LayerTypeId][\"_RIn\"]>\n\n  /**\n   * @since 3.9.0\n   */\n  export type MakeAccessors<Make> = Make extends { readonly accessors: true } ? true\n    : false\n}\n"],"names":["dual","_console","TagProto","effect","core","defaultServices","circular","fiberRuntime","layer","query","_runtime","_schedule","Request","Scheduler","EffectTypeId","isEffect","cachedWithTTL","cached","cachedInvalidateWithTTL","memoize","cachedFunction","once","all","allWith","allSuccesses","dropUntil","dropWhile","every","exists","filter","filterMap","findFirst","firstSuccessOf","forEach","head","mergeAll","partition","reduce","reduceEffect","reduceRight","reduceWhile","replicate","replicateEffect","takeUntil","takeWhile","validateAll","validateFirst","async","asyncEffect","custom","withFiberRuntime","fail","failSync","failCause","failCauseSync","die","dieMessage","dieSync","gen","never","none","promise","succeed","succeedNone","succeedSome","suspend","sync","_void","void","yieldNow","_catch","catch","catchAll","catchAllCause","catchAllDefect","catchIf","catchSome","catchSomeCause","catchSomeDefect","catchTag","catchTags","cause","eventually","ignore","ignoreLogged","parallelErrors","sandbox","retry","retry_combined","retryOrElse","retryOrElse_Effect","try_","try","tryMap","tryMapPromise","tryPromise","unsandbox","allowInterrupt","checkInterruptible","disconnect","interrupt","interruptWith","interruptible","interruptibleMask","onInterrupt","uninterruptible","uninterruptibleMask","liftPredicate","as","asSome","asSomeError","asVoid","flip","flipWith","map","mapAccum","mapBoth","mapError","mapErrorCause","merge","negate","acquireRelease","acquireReleaseInterruptible","acquireUseRelease","addFinalizer","ensuring","onError","onExit","parallelFinalizers","finalizersMask","sequentialFinalizers","scope","scopeWith","scoped","scopedEffect","using","withEarlyRelease","awaitAllChildren","daemonChildren","descriptor","descriptorWith","diffFiberRefs","ensuringChild","ensuringChildren","fiberId","fiberIdWith","fork","forkDaemon","forkAll","forkIn","forkScoped","forkWithErrorHandler","fromFiber","fromFiberEffect","supervised","transplant","withConcurrency","withScheduler","withSchedulingPriority","withMaxOpsBeforeYield","clock","clockWith","withClockScoped","withClock","console","consoleWith","withConsoleScoped","withConsole","delay","sleep","timed","timedWith","timeout","timeoutOption","timeoutFail","timeoutFailCause","timeoutTo","configProviderWith","withConfigProvider","withConfigProviderScoped","context","contextWith","contextWithEffect","mapInputContext","provide","effect_provide","provideService","provideServiceEffect","serviceFunction","serviceFunctionEffect","serviceFunctions","serviceConstants","serviceMembers","serviceOption","serviceOptional","updateService","Do","bind","bindAll","bindTo","let_","let","either","exit","intoDeferred","option","if_","if","filterOrDie","filterOrDieMessage","filterOrElse","filterOrFail","unless","unlessEffect","when","whenEffect","whenFiberRef","whenRef","flatMap","andThen","flatten","raceAll","race","raceFirst","raceWith","summarized","tap","tapBoth","tapDefect","tapError","tapErrorTag","tapErrorCause","forever","iterate","loop","repeat","repeat_combined","repeatN","repeatOrElse","repeatOrElse_Effect","schedule","schedule_Effect","scheduleForked","scheduleFrom","scheduleFrom_Effect","whileLoop","getFiberRefs","fiberRefs","inheritFiberRefs","locally","fiberRefLocally","locallyWith","fiberRefLocallyWith","locallyScoped","fiberRefLocallyScoped","locallyScopedWith","fiberRefLocallyScopedWith","patchFiberRefs","setFiberRefs","updateFiberRefs","isFailure","isSuccess","match","matchCause","matchCauseEffect","matchEffect","log","logWithLevel","level","message","logTrace","logDebug","logInfo","logWarning","logError","logFatal","withLogSpan","annotateLogs","annotateLogsScoped","logAnnotations","withUnhandledErrorLogLevel","orDie","orDieWith","orElse","orElseFail","orElseSucceed","random","randomWith","withRandom","withRandomScoped","runtime","getRuntimeFlags","runtimeFlags","patchRuntimeFlags","updateRuntimeFlags","withRuntimeFlagsPatch","withRuntimeFlags","withRuntimeFlagsPatchScoped","withRuntimeFlagsScoped","tagMetrics","labelMetrics","tagMetricsScoped","labelMetricsScoped","metricLabels","withMetric","unsafeMakeSemaphore","makeSemaphore","unsafeMakeLatch","makeLatch","runFork","unsafeForkEffect","runCallback","unsafeRunEffect","runPromise","unsafeRunPromiseEffect","runPromiseExit","unsafeRunPromiseExitEffect","runSync","unsafeRunSyncEffect","runSyncExit","unsafeRunSyncExitEffect","validate","validateWith","zip","zipOptions","zipLeft","zipLeftOptions","zipRight","zipRightOptions","zipWith","zipWithOptions","ap","self","that","f","a","blocked","runRequestBlock","step","request","args","isRequest","fromRequest","cacheRequestResult","cacheRequest","withRequestBatching","withRequestCaching","withRequestCache","tracer","tracerWith","withTracer","withTracerScoped","withTracerEnabled","withTracerTiming","annotateSpans","annotateCurrentSpan","currentSpan","currentParentSpan","spanAnnotations","spanLinks","linkSpans","makeSpan","makeSpanScoped","useSpan","withSpan","functionWithSpan","withSpanScoped","withParentSpan","fromNullable","optionFromOptional","makeTagProxy","TagClass","cache","Map","Proxy","get","target","prop","receiver","Reflect","has","fn","s","set","cn","Object","assign","setPrototypeOf","getPrototypeOf","Tag","id","limit","Error","stackTraceLimit","creationError","key","defineProperty","body","stack","Service","maker","arguments","proxy","patchState","service","proto","prototype","selfProto","_tag","hasDeps","dependencies","length","layerName","layerCache","fromEffect","_","layerWithDepsCache","DefaultWithoutDependencies"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 10688, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10694, "column": 0}, "map": {"version":3,"file":"SchemaAST.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/SchemaAST.ts"],"sourcesContent":["/**\n * @since 3.10.0\n */\n\nimport * as Arr from \"./Array.js\"\nimport type { Effect } from \"./Effect.js\"\nimport type { Equivalence } from \"./Equivalence.js\"\nimport { dual, identity } from \"./Function.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport * as errors_ from \"./internal/schema/errors.js\"\nimport * as util_ from \"./internal/schema/util.js\"\nimport * as Number from \"./Number.js\"\nimport * as Option from \"./Option.js\"\nimport * as Order from \"./Order.js\"\nimport type { ParseIssue } from \"./ParseResult.js\"\nimport * as Predicate from \"./Predicate.js\"\nimport * as regexp from \"./RegExp.js\"\nimport type { Concurrency } from \"./Types.js\"\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport type AST =\n  | Declaration\n  | Literal\n  | UniqueSymbol\n  | UndefinedKeyword\n  | VoidKeyword\n  | NeverKeyword\n  | UnknownKeyword\n  | AnyKeyword\n  | StringKeyword\n  | NumberKeyword\n  | BooleanKeyword\n  | BigIntKeyword\n  | SymbolKeyword\n  | ObjectKeyword\n  | Enums\n  | TemplateLiteral\n  // possible transformations\n  | Refinement\n  | TupleType\n  | TypeLiteral\n  | Union\n  | Suspend\n  // transformations\n  | Transformation\n\n// -------------------------------------------------------------------------------------\n// annotations\n// -------------------------------------------------------------------------------------\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type BrandAnnotation = Arr.NonEmptyReadonlyArray<string | symbol>\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const BrandAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Brand\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type SchemaIdAnnotation = string | symbol\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const SchemaIdAnnotationId: unique symbol = Symbol.for(\"effect/annotation/SchemaId\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type MessageAnnotation = (issue: ParseIssue) => string | Effect<string> | {\n  readonly message: string | Effect<string>\n  readonly override: boolean\n}\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const MessageAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Message\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type MissingMessageAnnotation = () => string | Effect<string>\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const MissingMessageAnnotationId: unique symbol = Symbol.for(\"effect/annotation/MissingMessage\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type IdentifierAnnotation = string\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const IdentifierAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Identifier\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type TitleAnnotation = string\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const TitleAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Title\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type DescriptionAnnotation = string\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const DescriptionAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Description\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type ExamplesAnnotation<A> = Arr.NonEmptyReadonlyArray<A>\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const ExamplesAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Examples\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type DefaultAnnotation<A> = A\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const DefaultAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Default\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type JSONSchemaAnnotation = object\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const JSONSchemaAnnotationId: unique symbol = Symbol.for(\"effect/annotation/JSONSchema\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const ArbitraryAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Arbitrary\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const PrettyAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Pretty\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type EquivalenceAnnotation<A, TypeParameters extends ReadonlyArray<any> = readonly []> = (\n  ...equivalences: { readonly [K in keyof TypeParameters]: Equivalence<TypeParameters[K]> }\n) => Equivalence<A>\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const EquivalenceAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Equivalence\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type DocumentationAnnotation = string\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const DocumentationAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Documentation\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type ConcurrencyAnnotation = Concurrency | undefined\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const ConcurrencyAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Concurrency\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type BatchingAnnotation = boolean | \"inherit\" | undefined\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const BatchingAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Batching\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type ParseIssueTitleAnnotation = (issue: ParseIssue) => string | undefined\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const ParseIssueTitleAnnotationId: unique symbol = Symbol.for(\"effect/annotation/ParseIssueTitle\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const ParseOptionsAnnotationId: unique symbol = Symbol.for(\"effect/annotation/ParseOptions\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type DecodingFallbackAnnotation<A> = (issue: ParseIssue) => Effect<A, ParseIssue>\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const DecodingFallbackAnnotationId: unique symbol = Symbol.for(\"effect/annotation/DecodingFallback\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const SurrogateAnnotationId: unique symbol = Symbol.for(\"effect/annotation/Surrogate\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport type SurrogateAnnotation = AST\n\n/** @internal */\nexport const StableFilterAnnotationId: unique symbol = Symbol.for(\"effect/annotation/StableFilter\")\n\n/**\n * A stable filter consistently applies fixed validation rules, such as\n * 'minItems', 'maxItems', and 'itemsCount', to ensure array length complies\n * with set criteria regardless of the input data's content.\n *\n * @internal\n */\nexport type StableFilterAnnotation = boolean\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport interface Annotations {\n  readonly [_: string]: unknown\n  readonly [_: symbol]: unknown\n}\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport interface Annotated {\n  readonly annotations: Annotations\n}\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getAnnotation: {\n  /**\n   * @category annotations\n   * @since 3.10.0\n   */\n  <A>(key: symbol): (annotated: Annotated) => Option.Option<A>\n  /**\n   * @category annotations\n   * @since 3.10.0\n   */\n  <A>(annotated: Annotated, key: symbol): Option.Option<A>\n} = dual(\n  2,\n  <A>(annotated: Annotated, key: symbol): Option.Option<A> =>\n    Object.prototype.hasOwnProperty.call(annotated.annotations, key) ?\n      Option.some(annotated.annotations[key] as any) :\n      Option.none()\n)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getBrandAnnotation = getAnnotation<BrandAnnotation>(BrandAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getMessageAnnotation = getAnnotation<MessageAnnotation>(MessageAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getMissingMessageAnnotation = getAnnotation<MissingMessageAnnotation>(MissingMessageAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getTitleAnnotation = getAnnotation<TitleAnnotation>(TitleAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getIdentifierAnnotation = getAnnotation<IdentifierAnnotation>(IdentifierAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getDescriptionAnnotation = getAnnotation<DescriptionAnnotation>(DescriptionAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getExamplesAnnotation = getAnnotation<ExamplesAnnotation<unknown>>(ExamplesAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getDefaultAnnotation = getAnnotation<DefaultAnnotation<unknown>>(DefaultAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getJSONSchemaAnnotation = getAnnotation<JSONSchemaAnnotation>(JSONSchemaAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getDocumentationAnnotation = getAnnotation<DocumentationAnnotation>(DocumentationAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getConcurrencyAnnotation = getAnnotation<ConcurrencyAnnotation>(ConcurrencyAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getBatchingAnnotation = getAnnotation<BatchingAnnotation>(BatchingAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getParseIssueTitleAnnotation = getAnnotation<ParseIssueTitleAnnotation>(ParseIssueTitleAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getParseOptionsAnnotation = getAnnotation<ParseOptions>(ParseOptionsAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getDecodingFallbackAnnotation = getAnnotation<DecodingFallbackAnnotation<unknown>>(\n  DecodingFallbackAnnotationId\n)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getSurrogateAnnotation = getAnnotation<SurrogateAnnotation>(SurrogateAnnotationId)\n\nconst getStableFilterAnnotation = getAnnotation<StableFilterAnnotation>(StableFilterAnnotationId)\n\n/** @internal */\nexport const hasStableFilter = (annotated: Annotated) =>\n  Option.exists(getStableFilterAnnotation(annotated), (b) => b === true)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const JSONIdentifierAnnotationId: unique symbol = Symbol.for(\"effect/annotation/JSONIdentifier\")\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getJSONIdentifierAnnotation = getAnnotation<IdentifierAnnotation>(JSONIdentifierAnnotationId)\n\n/**\n * @category annotations\n * @since 3.10.0\n */\nexport const getJSONIdentifier = (annotated: Annotated) =>\n  Option.orElse(getJSONIdentifierAnnotation(annotated), () => getIdentifierAnnotation(annotated))\n\n// -------------------------------------------------------------------------------------\n// schema ids\n// -------------------------------------------------------------------------------------\n\n/**\n * @category schema id\n * @since 3.10.0\n */\nexport const ParseJsonSchemaId: unique symbol = Symbol.for(\"effect/schema/ParseJson\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class Declaration implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Declaration\"\n  constructor(\n    readonly typeParameters: ReadonlyArray<AST>,\n    readonly decodeUnknown: (\n      ...typeParameters: ReadonlyArray<AST>\n    ) => (input: unknown, options: ParseOptions, self: Declaration) => Effect<any, ParseIssue, any>,\n    readonly encodeUnknown: (\n      ...typeParameters: ReadonlyArray<AST>\n    ) => (input: unknown, options: ParseOptions, self: Declaration) => Effect<any, ParseIssue, any>,\n    readonly annotations: Annotations = {}\n  ) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return Option.getOrElse(getExpected(this), () => \"<declaration schema>\")\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      typeParameters: this.typeParameters.map((ast) => ast.toJSON()),\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\nconst createASTGuard = <T extends AST[\"_tag\"]>(tag: T) => (ast: AST): ast is Extract<AST, { _tag: T }> =>\n  ast._tag === tag\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isDeclaration: (ast: AST) => ast is Declaration = createASTGuard(\"Declaration\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport type LiteralValue = string | number | boolean | null | bigint\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class Literal implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Literal\"\n  constructor(readonly literal: LiteralValue, readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return Option.getOrElse(getExpected(this), () => util_.formatUnknown(this.literal))\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      literal: Predicate.isBigInt(this.literal) ? String(this.literal) : this.literal,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isLiteral: (ast: AST) => ast is Literal = createASTGuard(\"Literal\")\n\nconst $null = new Literal(null)\n\nexport {\n  /**\n   * @category constructors\n   * @since 3.10.0\n   */\n  $null as null\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class UniqueSymbol implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"UniqueSymbol\"\n  constructor(readonly symbol: symbol, readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return Option.getOrElse(getExpected(this), () => util_.formatUnknown(this.symbol))\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      symbol: String(this.symbol),\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isUniqueSymbol: (ast: AST) => ast is UniqueSymbol = createASTGuard(\"UniqueSymbol\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class UndefinedKeyword implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"UndefinedKeyword\"\n  constructor(readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return formatKeyword(this)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const undefinedKeyword: UndefinedKeyword = new UndefinedKeyword({\n  [TitleAnnotationId]: \"undefined\"\n})\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isUndefinedKeyword: (ast: AST) => ast is UndefinedKeyword = createASTGuard(\"UndefinedKeyword\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class VoidKeyword implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"VoidKeyword\"\n  constructor(readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return formatKeyword(this)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const voidKeyword: VoidKeyword = new VoidKeyword({\n  [TitleAnnotationId]: \"void\"\n})\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isVoidKeyword: (ast: AST) => ast is VoidKeyword = createASTGuard(\"VoidKeyword\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class NeverKeyword implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"NeverKeyword\"\n  constructor(readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return formatKeyword(this)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const neverKeyword: NeverKeyword = new NeverKeyword({\n  [TitleAnnotationId]: \"never\"\n})\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isNeverKeyword: (ast: AST) => ast is NeverKeyword = createASTGuard(\"NeverKeyword\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class UnknownKeyword implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"UnknownKeyword\"\n  constructor(readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return formatKeyword(this)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const unknownKeyword: UnknownKeyword = new UnknownKeyword({\n  [TitleAnnotationId]: \"unknown\"\n})\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isUnknownKeyword: (ast: AST) => ast is UnknownKeyword = createASTGuard(\"UnknownKeyword\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class AnyKeyword implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"AnyKeyword\"\n  constructor(readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return formatKeyword(this)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const anyKeyword: AnyKeyword = new AnyKeyword({\n  [TitleAnnotationId]: \"any\"\n})\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isAnyKeyword: (ast: AST) => ast is AnyKeyword = createASTGuard(\"AnyKeyword\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class StringKeyword implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"StringKeyword\"\n  constructor(readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return formatKeyword(this)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const stringKeyword: StringKeyword = new StringKeyword({\n  [TitleAnnotationId]: \"string\",\n  [DescriptionAnnotationId]: \"a string\"\n})\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isStringKeyword: (ast: AST) => ast is StringKeyword = createASTGuard(\"StringKeyword\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class NumberKeyword implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"NumberKeyword\"\n  constructor(readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return formatKeyword(this)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const numberKeyword: NumberKeyword = new NumberKeyword({\n  [TitleAnnotationId]: \"number\",\n  [DescriptionAnnotationId]: \"a number\"\n})\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isNumberKeyword: (ast: AST) => ast is NumberKeyword = createASTGuard(\"NumberKeyword\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class BooleanKeyword implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"BooleanKeyword\"\n  constructor(readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return formatKeyword(this)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const booleanKeyword: BooleanKeyword = new BooleanKeyword({\n  [TitleAnnotationId]: \"boolean\",\n  [DescriptionAnnotationId]: \"a boolean\"\n})\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isBooleanKeyword: (ast: AST) => ast is BooleanKeyword = createASTGuard(\"BooleanKeyword\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class BigIntKeyword implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"BigIntKeyword\"\n  constructor(readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return formatKeyword(this)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const bigIntKeyword: BigIntKeyword = new BigIntKeyword({\n  [TitleAnnotationId]: \"bigint\",\n  [DescriptionAnnotationId]: \"a bigint\"\n})\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isBigIntKeyword: (ast: AST) => ast is BigIntKeyword = createASTGuard(\"BigIntKeyword\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class SymbolKeyword implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"SymbolKeyword\"\n  constructor(readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return formatKeyword(this)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const symbolKeyword: SymbolKeyword = new SymbolKeyword({\n  [TitleAnnotationId]: \"symbol\",\n  [DescriptionAnnotationId]: \"a symbol\"\n})\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isSymbolKeyword: (ast: AST) => ast is SymbolKeyword = createASTGuard(\"SymbolKeyword\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class ObjectKeyword implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"ObjectKeyword\"\n  constructor(readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return formatKeyword(this)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const objectKeyword: ObjectKeyword = new ObjectKeyword({\n  [TitleAnnotationId]: \"object\",\n  [DescriptionAnnotationId]: \"an object in the TypeScript meaning, i.e. the `object` type\"\n})\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isObjectKeyword: (ast: AST) => ast is ObjectKeyword = createASTGuard(\"ObjectKeyword\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class Enums implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Enums\"\n  constructor(\n    readonly enums: ReadonlyArray<readonly [string, string | number]>,\n    readonly annotations: Annotations = {}\n  ) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return Option.getOrElse(\n      getExpected(this),\n      () => `<enum ${this.enums.length} value(s): ${this.enums.map((_, value) => JSON.stringify(value)).join(\" | \")}>`\n    )\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      enums: this.enums,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isEnums: (ast: AST) => ast is Enums = createASTGuard(\"Enums\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class TemplateLiteralSpan {\n  constructor(readonly type: StringKeyword | NumberKeyword, readonly literal: string) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    const type = \"${\" + String(this.type) + \"}\"\n    return type + this.literal\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      type: this.type.toJSON(),\n      literal: this.literal\n    }\n  }\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class TemplateLiteral implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"TemplateLiteral\"\n  constructor(\n    readonly head: string,\n    readonly spans: Arr.NonEmptyReadonlyArray<TemplateLiteralSpan>,\n    readonly annotations: Annotations = {}\n  ) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return Option.getOrElse(getExpected(this), () => formatTemplateLiteral(this))\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      head: this.head,\n      spans: this.spans.map((span) => span.toJSON()),\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\nconst formatTemplateLiteral = (ast: TemplateLiteral): string =>\n  \"`\" + ast.head + ast.spans.map((span) => String(span)).join(\"\") +\n  \"`\"\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isTemplateLiteral: (ast: AST) => ast is TemplateLiteral = createASTGuard(\"TemplateLiteral\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class Type implements Annotated {\n  constructor(\n    readonly type: AST,\n    readonly annotations: Annotations = {}\n  ) {}\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      type: this.type.toJSON(),\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return String(this.type)\n  }\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class OptionalType extends Type {\n  constructor(\n    type: AST,\n    readonly isOptional: boolean,\n    annotations: Annotations = {}\n  ) {\n    super(type, annotations)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      type: this.type.toJSON(),\n      isOptional: this.isOptional,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return String(this.type) + (this.isOptional ? \"?\" : \"\")\n  }\n}\n\nconst getRestASTs = (rest: ReadonlyArray<Type>): ReadonlyArray<AST> => rest.map((annotatedAST) => annotatedAST.type)\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class TupleType implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"TupleType\"\n  constructor(\n    readonly elements: ReadonlyArray<OptionalType>,\n    readonly rest: ReadonlyArray<Type>,\n    readonly isReadonly: boolean,\n    readonly annotations: Annotations = {}\n  ) {\n    let hasOptionalElement = false\n    let hasIllegalRequiredElement = false\n    for (const e of elements) {\n      if (e.isOptional) {\n        hasOptionalElement = true\n      } else if (hasOptionalElement) {\n        hasIllegalRequiredElement = true\n        break\n      }\n    }\n    if (hasIllegalRequiredElement || (hasOptionalElement && rest.length > 1)) {\n      throw new Error(errors_.getASTRequiredElementFollowinAnOptionalElementErrorMessage)\n    }\n  }\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return Option.getOrElse(getExpected(this), () => formatTuple(this))\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      elements: this.elements.map((e) => e.toJSON()),\n      rest: this.rest.map((ast) => ast.toJSON()),\n      isReadonly: this.isReadonly,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\nconst formatTuple = (ast: TupleType): string => {\n  const formattedElements = ast.elements.map(String)\n    .join(\", \")\n  return Arr.matchLeft(ast.rest, {\n    onEmpty: () => `readonly [${formattedElements}]`,\n    onNonEmpty: (head, tail) => {\n      const formattedHead = String(head)\n      const wrappedHead = formattedHead.includes(\" | \") ? `(${formattedHead})` : formattedHead\n\n      if (tail.length > 0) {\n        const formattedTail = tail.map(String).join(\", \")\n        if (ast.elements.length > 0) {\n          return `readonly [${formattedElements}, ...${wrappedHead}[], ${formattedTail}]`\n        } else {\n          return `readonly [...${wrappedHead}[], ${formattedTail}]`\n        }\n      } else {\n        if (ast.elements.length > 0) {\n          return `readonly [${formattedElements}, ...${wrappedHead}[]]`\n        } else {\n          return `ReadonlyArray<${formattedHead}>`\n        }\n      }\n    }\n  })\n}\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isTupleType: (ast: AST) => ast is TupleType = createASTGuard(\"TupleType\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class PropertySignature extends OptionalType {\n  constructor(\n    readonly name: PropertyKey,\n    type: AST,\n    isOptional: boolean,\n    readonly isReadonly: boolean,\n    annotations?: Annotations\n  ) {\n    super(type, isOptional, annotations)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toString(): string {\n    return (this.isReadonly ? \"readonly \" : \"\") + String(this.name) + (this.isOptional ? \"?\" : \"\") + \": \" +\n      this.type\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      name: String(this.name),\n      type: this.type.toJSON(),\n      isOptional: this.isOptional,\n      isReadonly: this.isReadonly,\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @since 3.10.0\n */\nexport type Parameter = StringKeyword | SymbolKeyword | TemplateLiteral | Refinement<Parameter>\n\n/**\n * @since 3.10.0\n */\nexport const isParameter = (ast: AST): ast is Parameter => {\n  switch (ast._tag) {\n    case \"StringKeyword\":\n    case \"SymbolKeyword\":\n    case \"TemplateLiteral\":\n      return true\n    case \"Refinement\":\n      return isParameter(ast.from)\n  }\n  return false\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class IndexSignature {\n  /**\n   * @since 3.10.0\n   */\n  readonly parameter: Parameter\n  constructor(\n    parameter: AST,\n    readonly type: AST,\n    readonly isReadonly: boolean\n  ) {\n    if (isParameter(parameter)) {\n      this.parameter = parameter\n    } else {\n      throw new Error(errors_.getASTIndexSignatureParameterErrorMessage)\n    }\n  }\n  /**\n   * @since 3.10.0\n   */\n  toString(): string {\n    return (this.isReadonly ? \"readonly \" : \"\") + `[x: ${this.parameter}]: ${this.type}`\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      parameter: this.parameter.toJSON(),\n      type: this.type.toJSON(),\n      isReadonly: this.isReadonly\n    }\n  }\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class TypeLiteral implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"TypeLiteral\"\n  /**\n   * @since 3.10.0\n   */\n  readonly propertySignatures: ReadonlyArray<PropertySignature>\n  /**\n   * @since 3.10.0\n   */\n  readonly indexSignatures: ReadonlyArray<IndexSignature>\n  constructor(\n    propertySignatures: ReadonlyArray<PropertySignature>,\n    indexSignatures: ReadonlyArray<IndexSignature>,\n    readonly annotations: Annotations = {}\n  ) {\n    // check for duplicate property signatures\n    const keys: Record<PropertyKey, null> = {}\n    for (let i = 0; i < propertySignatures.length; i++) {\n      const name = propertySignatures[i].name\n      if (Object.prototype.hasOwnProperty.call(keys, name)) {\n        throw new Error(errors_.getASTDuplicatePropertySignatureErrorMessage(name))\n      }\n      keys[name] = null\n    }\n    // check for duplicate index signatures\n    const parameters = {\n      string: false,\n      symbol: false\n    }\n    for (let i = 0; i < indexSignatures.length; i++) {\n      const parameter = getParameterBase(indexSignatures[i].parameter)\n      if (isStringKeyword(parameter)) {\n        if (parameters.string) {\n          throw new Error(errors_.getASTDuplicateIndexSignatureErrorMessage(\"string\"))\n        }\n        parameters.string = true\n      } else if (isSymbolKeyword(parameter)) {\n        if (parameters.symbol) {\n          throw new Error(errors_.getASTDuplicateIndexSignatureErrorMessage(\"symbol\"))\n        }\n        parameters.symbol = true\n      }\n    }\n\n    this.propertySignatures = propertySignatures\n    this.indexSignatures = indexSignatures\n  }\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return Option.getOrElse(getExpected(this), () => formatTypeLiteral(this))\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      propertySignatures: this.propertySignatures.map((ps) => ps.toJSON()),\n      indexSignatures: this.indexSignatures.map((ps) => ps.toJSON()),\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\nconst formatIndexSignatures = (iss: ReadonlyArray<IndexSignature>): string => iss.map(String).join(\"; \")\n\nconst formatTypeLiteral = (ast: TypeLiteral): string => {\n  if (ast.propertySignatures.length > 0) {\n    const pss = ast.propertySignatures.map(String).join(\"; \")\n    if (ast.indexSignatures.length > 0) {\n      return `{ ${pss}; ${formatIndexSignatures(ast.indexSignatures)} }`\n    } else {\n      return `{ ${pss} }`\n    }\n  } else {\n    if (ast.indexSignatures.length > 0) {\n      return `{ ${formatIndexSignatures(ast.indexSignatures)} }`\n    } else {\n      return \"{}\"\n    }\n  }\n}\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isTypeLiteral: (ast: AST) => ast is TypeLiteral = createASTGuard(\"TypeLiteral\")\n\n/**\n * @since 3.10.0\n */\nexport type Members<A> = readonly [A, A, ...Array<A>]\n\nconst sortCandidates = Arr.sort(\n  Order.mapInput(Number.Order, (ast: AST) => {\n    switch (ast._tag) {\n      case \"AnyKeyword\":\n        return 0\n      case \"UnknownKeyword\":\n        return 1\n      case \"ObjectKeyword\":\n        return 2\n      case \"StringKeyword\":\n      case \"NumberKeyword\":\n      case \"BooleanKeyword\":\n      case \"BigIntKeyword\":\n      case \"SymbolKeyword\":\n        return 3\n    }\n    return 4\n  })\n)\n\nconst literalMap = {\n  string: \"StringKeyword\",\n  number: \"NumberKeyword\",\n  boolean: \"BooleanKeyword\",\n  bigint: \"BigIntKeyword\"\n} as const\n\n/** @internal */\nexport const flatten = (candidates: ReadonlyArray<AST>): Array<AST> =>\n  Arr.flatMap(candidates, (ast) => isUnion(ast) ? flatten(ast.types) : [ast])\n\n/** @internal */\nexport const unify = (candidates: ReadonlyArray<AST>): Array<AST> => {\n  const cs = sortCandidates(candidates)\n  const out: Array<AST> = []\n  const uniques: { [K in AST[\"_tag\"] | \"{}\"]?: AST } = {}\n  const literals: Array<LiteralValue | symbol> = []\n  for (const ast of cs) {\n    switch (ast._tag) {\n      case \"NeverKeyword\":\n        break\n      case \"AnyKeyword\":\n        return [anyKeyword]\n      case \"UnknownKeyword\":\n        return [unknownKeyword]\n      // uniques\n      case \"ObjectKeyword\":\n      case \"UndefinedKeyword\":\n      case \"VoidKeyword\":\n      case \"StringKeyword\":\n      case \"NumberKeyword\":\n      case \"BooleanKeyword\":\n      case \"BigIntKeyword\":\n      case \"SymbolKeyword\": {\n        if (!uniques[ast._tag]) {\n          uniques[ast._tag] = ast\n          out.push(ast)\n        }\n        break\n      }\n      case \"Literal\": {\n        const type = typeof ast.literal\n        switch (type) {\n          case \"string\":\n          case \"number\":\n          case \"bigint\":\n          case \"boolean\": {\n            const _tag = literalMap[type]\n            if (!uniques[_tag] && !literals.includes(ast.literal)) {\n              literals.push(ast.literal)\n              out.push(ast)\n            }\n            break\n          }\n          // null\n          case \"object\": {\n            if (!literals.includes(ast.literal)) {\n              literals.push(ast.literal)\n              out.push(ast)\n            }\n            break\n          }\n        }\n        break\n      }\n      case \"UniqueSymbol\": {\n        if (!uniques[\"SymbolKeyword\"] && !literals.includes(ast.symbol)) {\n          literals.push(ast.symbol)\n          out.push(ast)\n        }\n        break\n      }\n      case \"TupleType\": {\n        if (!uniques[\"ObjectKeyword\"]) {\n          out.push(ast)\n        }\n        break\n      }\n      case \"TypeLiteral\": {\n        if (ast.propertySignatures.length === 0 && ast.indexSignatures.length === 0) {\n          if (!uniques[\"{}\"]) {\n            uniques[\"{}\"] = ast\n            out.push(ast)\n          }\n        } else if (!uniques[\"ObjectKeyword\"]) {\n          out.push(ast)\n        }\n        break\n      }\n      default:\n        out.push(ast)\n    }\n  }\n  return out\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class Union implements Annotated {\n  static make = (types: ReadonlyArray<AST>, annotations?: Annotations): AST => {\n    return isMembers(types) ? new Union(types, annotations) : types.length === 1 ? types[0] : neverKeyword\n  }\n  /** @internal */\n  static unify = (candidates: ReadonlyArray<AST>, annotations?: Annotations): AST => {\n    return Union.make(unify(flatten(candidates)), annotations)\n  }\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Union\"\n  private constructor(readonly types: Members<AST>, readonly annotations: Annotations = {}) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return Option.getOrElse(\n      getExpected(this),\n      () => this.types.map(String).join(\" | \")\n    )\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      types: this.types.map((ast) => ast.toJSON()),\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/** @internal */\nexport const mapMembers = <A, B>(members: Members<A>, f: (a: A) => B): Members<B> => members.map(f) as any\n\n/** @internal */\nexport const isMembers = <A>(as: ReadonlyArray<A>): as is Members<A> => as.length > 1\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isUnion: (ast: AST) => ast is Union = createASTGuard(\"Union\")\n\nconst toJSONMemoMap = globalValue(\n  Symbol.for(\"effect/Schema/AST/toJSONMemoMap\"),\n  () => new WeakMap<AST, object>()\n)\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class Suspend implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Suspend\"\n  constructor(readonly f: () => AST, readonly annotations: Annotations = {}) {\n    this.f = util_.memoizeThunk(f)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return getExpected(this).pipe(\n      Option.orElse(() =>\n        Option.flatMap(\n          Option.liftThrowable(this.f)(),\n          (ast) => getExpected(ast)\n        )\n      ),\n      Option.getOrElse(() => \"<suspended schema>\")\n    )\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    const ast = this.f()\n    let out = toJSONMemoMap.get(ast)\n    if (out) {\n      return out\n    }\n    toJSONMemoMap.set(ast, { _tag: this._tag })\n    out = {\n      _tag: this._tag,\n      ast: ast.toJSON(),\n      annotations: toJSONAnnotations(this.annotations)\n    }\n    toJSONMemoMap.set(ast, out)\n    return out\n  }\n}\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isSuspend: (ast: AST) => ast is Suspend = createASTGuard(\"Suspend\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class Refinement<From extends AST = AST> implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Refinement\"\n  constructor(\n    readonly from: From,\n    readonly filter: (\n      input: any,\n      options: ParseOptions,\n      self: Refinement\n    ) => Option.Option<ParseIssue>,\n    readonly annotations: Annotations = {}\n  ) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return Option.getOrElse(getExpected(this), () => `{ ${this.from} | filter }`)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      from: this.from.toJSON(),\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isRefinement: (ast: AST) => ast is Refinement<AST> = createASTGuard(\"Refinement\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport interface ParseOptions {\n  /**\n   * The `errors` option allows you to receive all parsing errors when\n   * attempting to parse a value using a schema. By default only the first error\n   * is returned, but by setting the `errors` option to `\"all\"`, you can receive\n   * all errors that occurred during the parsing process. This can be useful for\n   * debugging or for providing more comprehensive error messages to the user.\n   *\n   * default: \"first\"\n   *\n   * @since 3.10.0\n   */\n  readonly errors?: \"first\" | \"all\" | undefined\n  /**\n   * When using a `Schema` to parse a value, by default any properties that are\n   * not specified in the `Schema` will be stripped out from the output. This is\n   * because the `Schema` is expecting a specific shape for the parsed value,\n   * and any excess properties do not conform to that shape.\n   *\n   * However, you can use the `onExcessProperty` option (default value:\n   * `\"ignore\"`) to trigger a parsing error. This can be particularly useful in\n   * cases where you need to detect and handle potential errors or unexpected\n   * values.\n   *\n   * If you want to allow excess properties to remain, you can use\n   * `onExcessProperty` set to `\"preserve\"`.\n   *\n   * default: \"ignore\"\n   *\n   * @since 3.10.0\n   */\n  readonly onExcessProperty?: \"ignore\" | \"error\" | \"preserve\" | undefined\n  /**\n   * The `propertyOrder` option provides control over the order of object fields\n   * in the output. This feature is particularly useful when the sequence of\n   * keys is important for the consuming processes or when maintaining the input\n   * order enhances readability and usability.\n   *\n   * By default, the `propertyOrder` option is set to `\"none\"`. This means that\n   * the internal system decides the order of keys to optimize parsing speed.\n   * The order of keys in this mode should not be considered stable, and it's\n   * recommended not to rely on key ordering as it may change in future updates\n   * without notice.\n   *\n   * Setting `propertyOrder` to `\"original\"` ensures that the keys are ordered\n   * as they appear in the input during the decoding/encoding process.\n   *\n   * default: \"none\"\n   *\n   * @since 3.10.0\n   */\n  readonly propertyOrder?: \"none\" | \"original\" | undefined\n  /**\n   * Handles missing properties in data structures. By default, missing\n   * properties are treated as if present with an `undefined` value. To treat\n   * missing properties as errors, set the `exact` option to `true`. This\n   * setting is already enabled by default for `is` and `asserts` functions,\n   * treating absent properties strictly unless overridden.\n   *\n   * default: false\n   *\n   * @since 3.10.0\n   */\n  readonly exact?: boolean | undefined\n}\n\n/**\n * @since 3.10.0\n */\nexport const defaultParseOption: ParseOptions = {}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class Transformation implements Annotated {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Transformation\"\n  constructor(\n    readonly from: AST,\n    readonly to: AST,\n    readonly transformation: TransformationKind,\n    readonly annotations: Annotations = {}\n  ) {}\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return Option.getOrElse(\n      getExpected(this),\n      () => `(${String(this.from)} <-> ${String(this.to)})`\n    )\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON(): object {\n    return {\n      _tag: this._tag,\n      from: this.from.toJSON(),\n      to: this.to.toJSON(),\n      annotations: toJSONAnnotations(this.annotations)\n    }\n  }\n}\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isTransformation: (ast: AST) => ast is Transformation = createASTGuard(\"Transformation\")\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport type TransformationKind =\n  | FinalTransformation\n  | ComposeTransformation\n  | TypeLiteralTransformation\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class FinalTransformation {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"FinalTransformation\"\n  constructor(\n    readonly decode: (\n      fromA: any,\n      options: ParseOptions,\n      self: Transformation,\n      fromI: any\n    ) => Effect<any, ParseIssue, any>,\n    readonly encode: (toI: any, options: ParseOptions, self: Transformation, toA: any) => Effect<any, ParseIssue, any>\n  ) {}\n}\n\nconst createTransformationGuard =\n  <T extends TransformationKind[\"_tag\"]>(tag: T) =>\n  (ast: TransformationKind): ast is Extract<TransformationKind, { _tag: T }> => ast._tag === tag\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isFinalTransformation: (ast: TransformationKind) => ast is FinalTransformation = createTransformationGuard(\n  \"FinalTransformation\"\n)\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class ComposeTransformation {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"ComposeTransformation\"\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const composeTransformation: ComposeTransformation = new ComposeTransformation()\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isComposeTransformation: (ast: TransformationKind) => ast is ComposeTransformation =\n  createTransformationGuard(\n    \"ComposeTransformation\"\n  )\n\n/**\n * Represents a `PropertySignature -> PropertySignature` transformation\n *\n * The semantic of `decode` is:\n * - `none()` represents the absence of the key/value pair\n * - `some(value)` represents the presence of the key/value pair\n *\n * The semantic of `encode` is:\n * - `none()` you don't want to output the key/value pair\n * - `some(value)` you want to output the key/value pair\n *\n * @category model\n * @since 3.10.0\n */\nexport class PropertySignatureTransformation {\n  constructor(\n    readonly from: PropertyKey,\n    readonly to: PropertyKey,\n    readonly decode: (o: Option.Option<any>) => Option.Option<any>,\n    readonly encode: (o: Option.Option<any>) => Option.Option<any>\n  ) {}\n}\n\nconst isRenamingPropertySignatureTransformation = (t: PropertySignatureTransformation) =>\n  t.decode === identity && t.encode === identity\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class TypeLiteralTransformation {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"TypeLiteralTransformation\"\n  constructor(\n    readonly propertySignatureTransformations: ReadonlyArray<\n      PropertySignatureTransformation\n    >\n  ) {\n    // check for duplicate property signature transformations\n    const fromKeys: Record<PropertyKey, true> = {}\n    const toKeys: Record<PropertyKey, true> = {}\n    for (const pst of propertySignatureTransformations) {\n      const from = pst.from\n      if (fromKeys[from]) {\n        throw new Error(errors_.getASTDuplicatePropertySignatureTransformationErrorMessage(from))\n      }\n      fromKeys[from] = true\n      const to = pst.to\n      if (toKeys[to]) {\n        throw new Error(errors_.getASTDuplicatePropertySignatureTransformationErrorMessage(to))\n      }\n      toKeys[to] = true\n    }\n  }\n}\n\n/**\n * @category guards\n * @since 3.10.0\n */\nexport const isTypeLiteralTransformation: (ast: TransformationKind) => ast is TypeLiteralTransformation =\n  createTransformationGuard(\"TypeLiteralTransformation\")\n\n// -------------------------------------------------------------------------------------\n// API\n// -------------------------------------------------------------------------------------\n\n/**\n * Merges a set of new annotations with existing ones, potentially overwriting\n * any duplicates.\n *\n * @since 3.10.0\n */\nexport const annotations = (ast: AST, annotations: Annotations): AST => {\n  const d = Object.getOwnPropertyDescriptors(ast)\n  d.annotations.value = { ...ast.annotations, ...annotations }\n  return Object.create(Object.getPrototypeOf(ast), d)\n}\n\n/**\n * Equivalent at runtime to the TypeScript type-level `keyof` operator.\n *\n * @since 3.10.0\n */\nexport const keyof = (ast: AST): AST => Union.unify(_keyof(ast))\n\nconst STRING_KEYWORD_PATTERN = \".*\"\nconst NUMBER_KEYWORD_PATTERN = \"[+-]?\\\\d*\\\\.?\\\\d+(?:[Ee][+-]?\\\\d+)?\"\n\n/**\n * @since 3.10.0\n */\nexport const getTemplateLiteralRegExp = (ast: TemplateLiteral): RegExp => {\n  let pattern = `^${regexp.escape(ast.head)}`\n\n  for (const span of ast.spans) {\n    if (isStringKeyword(span.type)) {\n      pattern += STRING_KEYWORD_PATTERN\n    } else if (isNumberKeyword(span.type)) {\n      pattern += NUMBER_KEYWORD_PATTERN\n    }\n    pattern += regexp.escape(span.literal)\n  }\n\n  pattern += \"$\"\n  return new RegExp(pattern)\n}\n\n/**\n * @since 3.10.0\n */\nexport const getTemplateLiteralCapturingRegExp = (ast: TemplateLiteral): RegExp => {\n  let pattern = `^`\n  if (ast.head !== \"\") {\n    pattern += `(${regexp.escape(ast.head)})`\n  }\n\n  for (const span of ast.spans) {\n    if (isStringKeyword(span.type)) {\n      pattern += `(${STRING_KEYWORD_PATTERN})`\n    } else if (isNumberKeyword(span.type)) {\n      pattern += `(${NUMBER_KEYWORD_PATTERN})`\n    }\n    if (span.literal !== \"\") {\n      pattern += `(${regexp.escape(span.literal)})`\n    }\n  }\n\n  pattern += \"$\"\n  return new RegExp(pattern)\n}\n\n/**\n * @since 3.10.0\n */\nexport const getPropertySignatures = (ast: AST): Array<PropertySignature> => {\n  switch (ast._tag) {\n    case \"Declaration\": {\n      const annotation = getSurrogateAnnotation(ast)\n      if (Option.isSome(annotation)) {\n        return getPropertySignatures(annotation.value)\n      }\n      break\n    }\n    case \"TypeLiteral\":\n      return ast.propertySignatures.slice()\n    case \"Suspend\":\n      return getPropertySignatures(ast.f())\n  }\n  return getPropertyKeys(ast).map((name) => getPropertyKeyIndexedAccess(ast, name))\n}\n\n/** @internal */\nexport const getNumberIndexedAccess = (ast: AST): AST => {\n  switch (ast._tag) {\n    case \"TupleType\": {\n      let hasOptional = false\n      let out: Array<AST> = []\n      for (const e of ast.elements) {\n        if (e.isOptional) {\n          hasOptional = true\n        }\n        out.push(e.type)\n      }\n      if (hasOptional) {\n        out.push(undefinedKeyword)\n      }\n      out = out.concat(getRestASTs(ast.rest))\n      return Union.make(out)\n    }\n    case \"Refinement\":\n      return getNumberIndexedAccess(ast.from)\n    case \"Union\":\n      return Union.make(ast.types.map(getNumberIndexedAccess))\n    case \"Suspend\":\n      return getNumberIndexedAccess(ast.f())\n  }\n  throw new Error(errors_.getASTUnsupportedSchema(ast))\n}\n\nconst getTypeLiteralPropertySignature = (ast: TypeLiteral, name: PropertyKey): PropertySignature | undefined => {\n  // from property signatures...\n  const ops = Arr.findFirst(ast.propertySignatures, (ps) => ps.name === name)\n  if (Option.isSome(ops)) {\n    return ops.value\n  }\n\n  // from index signatures...\n  if (Predicate.isString(name)) {\n    let out: PropertySignature | undefined = undefined\n    for (const is of ast.indexSignatures) {\n      const parameterBase = getParameterBase(is.parameter)\n      switch (parameterBase._tag) {\n        case \"TemplateLiteral\": {\n          const regex = getTemplateLiteralRegExp(parameterBase)\n          if (regex.test(name)) {\n            return new PropertySignature(name, is.type, false, true)\n          }\n          break\n        }\n        case \"StringKeyword\": {\n          if (out === undefined) {\n            out = new PropertySignature(name, is.type, false, true)\n          }\n        }\n      }\n    }\n    if (out) {\n      return out\n    }\n  } else if (Predicate.isSymbol(name)) {\n    for (const is of ast.indexSignatures) {\n      const parameterBase = getParameterBase(is.parameter)\n      if (isSymbolKeyword(parameterBase)) {\n        return new PropertySignature(name, is.type, false, true)\n      }\n    }\n  }\n}\n\n/** @internal */\nexport const getPropertyKeyIndexedAccess = (ast: AST, name: PropertyKey): PropertySignature => {\n  const annotation = getSurrogateAnnotation(ast)\n  if (Option.isSome(annotation)) {\n    return getPropertyKeyIndexedAccess(annotation.value, name)\n  }\n  switch (ast._tag) {\n    case \"TypeLiteral\": {\n      const ps = getTypeLiteralPropertySignature(ast, name)\n      if (ps) {\n        return ps\n      }\n      break\n    }\n    case \"Union\":\n      return new PropertySignature(\n        name,\n        Union.make(ast.types.map((ast) => getPropertyKeyIndexedAccess(ast, name).type)),\n        false,\n        true\n      )\n    case \"Suspend\":\n      return getPropertyKeyIndexedAccess(ast.f(), name)\n    case \"Refinement\":\n      return getPropertyKeyIndexedAccess(ast.from, name)\n  }\n  throw new Error(errors_.getASTUnsupportedSchema(ast))\n}\n\nconst getPropertyKeys = (ast: AST): Array<PropertyKey> => {\n  const annotation = getSurrogateAnnotation(ast)\n  if (Option.isSome(annotation)) {\n    return getPropertyKeys(annotation.value)\n  }\n  switch (ast._tag) {\n    case \"TypeLiteral\":\n      return ast.propertySignatures.map((ps) => ps.name)\n    case \"Suspend\":\n      return getPropertyKeys(ast.f())\n    case \"Union\":\n      return ast.types.slice(1).reduce(\n        (out: Array<PropertyKey>, ast) => Arr.intersection(out, getPropertyKeys(ast)),\n        getPropertyKeys(ast.types[0])\n      )\n    case \"Transformation\":\n      return getPropertyKeys(ast.to)\n  }\n  return []\n}\n\n/** @internal */\nexport const record = (key: AST, value: AST): {\n  propertySignatures: Array<PropertySignature>\n  indexSignatures: Array<IndexSignature>\n} => {\n  const propertySignatures: Array<PropertySignature> = []\n  const indexSignatures: Array<IndexSignature> = []\n  const go = (key: AST): void => {\n    switch (key._tag) {\n      case \"NeverKeyword\":\n        break\n      case \"StringKeyword\":\n      case \"SymbolKeyword\":\n      case \"TemplateLiteral\":\n      case \"Refinement\":\n        indexSignatures.push(new IndexSignature(key, value, true))\n        break\n      case \"Literal\":\n        if (Predicate.isString(key.literal) || Predicate.isNumber(key.literal)) {\n          propertySignatures.push(new PropertySignature(key.literal, value, false, true))\n        } else {\n          throw new Error(errors_.getASTUnsupportedLiteral(key.literal))\n        }\n        break\n      case \"Enums\": {\n        for (const [_, name] of key.enums) {\n          propertySignatures.push(new PropertySignature(name, value, false, true))\n        }\n        break\n      }\n      case \"UniqueSymbol\":\n        propertySignatures.push(new PropertySignature(key.symbol, value, false, true))\n        break\n      case \"Union\":\n        key.types.forEach(go)\n        break\n      default:\n        throw new Error(errors_.getASTUnsupportedKeySchema(key))\n    }\n  }\n  go(key)\n  return { propertySignatures, indexSignatures }\n}\n\n/**\n * Equivalent at runtime to the built-in TypeScript utility type `Pick`.\n *\n * @since 3.10.0\n */\nexport const pick = (ast: AST, keys: ReadonlyArray<PropertyKey>): TypeLiteral | Transformation => {\n  const annotation = getSurrogateAnnotation(ast)\n  if (Option.isSome(annotation)) {\n    return pick(annotation.value, keys)\n  }\n  switch (ast._tag) {\n    case \"TypeLiteral\": {\n      const pss: Array<PropertySignature> = []\n      const names: Record<PropertyKey, null> = {}\n      for (const ps of ast.propertySignatures) {\n        names[ps.name] = null\n        if (keys.includes(ps.name)) {\n          pss.push(ps)\n        }\n      }\n      for (const key of keys) {\n        if (!(key in names)) {\n          const ps = getTypeLiteralPropertySignature(ast, key)\n          if (ps) {\n            pss.push(ps)\n          }\n        }\n      }\n      return new TypeLiteral(pss, [])\n    }\n    case \"Union\":\n      return new TypeLiteral(keys.map((name) => getPropertyKeyIndexedAccess(ast, name)), [])\n    case \"Suspend\":\n      return pick(ast.f(), keys)\n    case \"Refinement\":\n      return pick(ast.from, keys)\n    case \"Transformation\": {\n      switch (ast.transformation._tag) {\n        case \"ComposeTransformation\":\n          return new Transformation(\n            pick(ast.from, keys),\n            pick(ast.to, keys),\n            composeTransformation\n          )\n        case \"TypeLiteralTransformation\": {\n          const ts: Array<PropertySignatureTransformation> = []\n          const fromKeys: Array<PropertyKey> = []\n          for (const k of keys) {\n            const t = ast.transformation.propertySignatureTransformations.find((t) => t.to === k)\n            if (t) {\n              ts.push(t)\n              fromKeys.push(t.from)\n            } else {\n              fromKeys.push(k)\n            }\n          }\n          return Arr.isNonEmptyReadonlyArray(ts) ?\n            new Transformation(\n              pick(ast.from, fromKeys),\n              pick(ast.to, keys),\n              new TypeLiteralTransformation(ts)\n            ) :\n            pick(ast.from, fromKeys)\n        }\n      }\n    }\n  }\n  throw new Error(errors_.getASTUnsupportedSchema(ast))\n}\n\n/**\n * Equivalent at runtime to the built-in TypeScript utility type `Omit`.\n *\n * @since 3.10.0\n */\nexport const omit = (ast: AST, keys: ReadonlyArray<PropertyKey>): TypeLiteral | Transformation =>\n  pick(ast, getPropertyKeys(ast).filter((name) => !keys.includes(name)))\n\n/** @internal */\nexport const orUndefined = (ast: AST): AST => Union.make([ast, undefinedKeyword])\n\n/**\n * Equivalent at runtime to the built-in TypeScript utility type `Partial`.\n *\n * @since 3.10.0\n */\nexport const partial = (ast: AST, options?: { readonly exact: true }): AST => {\n  const exact = options?.exact === true\n  switch (ast._tag) {\n    case \"TupleType\":\n      return new TupleType(\n        ast.elements.map((e) => new OptionalType(exact ? e.type : orUndefined(e.type), true)),\n        Arr.match(ast.rest, {\n          onEmpty: () => ast.rest,\n          onNonEmpty: (rest) => [new Type(Union.make([...getRestASTs(rest), undefinedKeyword]))]\n        }),\n        ast.isReadonly\n      )\n    case \"TypeLiteral\":\n      return new TypeLiteral(\n        ast.propertySignatures.map((ps) =>\n          new PropertySignature(ps.name, exact ? ps.type : orUndefined(ps.type), true, ps.isReadonly, ps.annotations)\n        ),\n        ast.indexSignatures.map((is) => new IndexSignature(is.parameter, orUndefined(is.type), is.isReadonly))\n      )\n    case \"Union\":\n      return Union.make(ast.types.map((member) => partial(member, options)))\n    case \"Suspend\":\n      return new Suspend(() => partial(ast.f(), options))\n    case \"Declaration\":\n      throw new Error(errors_.getASTUnsupportedSchema(ast))\n    case \"Refinement\":\n      throw new Error(errors_.getASTUnsupportedSchema(ast))\n    case \"Transformation\": {\n      if (\n        isTypeLiteralTransformation(ast.transformation) &&\n        ast.transformation.propertySignatureTransformations.every(isRenamingPropertySignatureTransformation)\n      ) {\n        return new Transformation(partial(ast.from, options), partial(ast.to, options), ast.transformation)\n      }\n      throw new Error(errors_.getASTUnsupportedSchema(ast))\n    }\n  }\n  return ast\n}\n\n/**\n * Equivalent at runtime to the built-in TypeScript utility type `Required`.\n *\n * @since 3.10.0\n */\nexport const required = (ast: AST): AST => {\n  switch (ast._tag) {\n    case \"TupleType\":\n      return new TupleType(\n        ast.elements.map((e) => new OptionalType(e.type, false)),\n        ast.rest,\n        ast.isReadonly\n      )\n    case \"TypeLiteral\":\n      return new TypeLiteral(\n        ast.propertySignatures.map((f) => new PropertySignature(f.name, f.type, false, f.isReadonly, f.annotations)),\n        ast.indexSignatures\n      )\n    case \"Union\":\n      return Union.make(ast.types.map((member) => required(member)))\n    case \"Suspend\":\n      return new Suspend(() => required(ast.f()))\n    case \"Declaration\":\n      throw new Error(errors_.getASTUnsupportedSchema(ast))\n    case \"Refinement\":\n      throw new Error(errors_.getASTUnsupportedSchema(ast))\n    case \"Transformation\": {\n      if (\n        isTypeLiteralTransformation(ast.transformation) &&\n        ast.transformation.propertySignatureTransformations.every(isRenamingPropertySignatureTransformation)\n      ) {\n        return new Transformation(required(ast.from), required(ast.to), ast.transformation)\n      }\n      throw new Error(errors_.getASTUnsupportedSchema(ast))\n    }\n  }\n  return ast\n}\n\n/**\n * Creates a new AST with shallow mutability applied to its properties.\n *\n * @param ast - The original AST to make properties mutable (shallowly).\n *\n * @since 3.10.0\n */\nexport const mutable = (ast: AST): AST => {\n  switch (ast._tag) {\n    case \"TupleType\":\n      return ast.isReadonly === false ? ast : new TupleType(ast.elements, ast.rest, false, ast.annotations)\n    case \"TypeLiteral\": {\n      const propertySignatures = changeMap(\n        ast.propertySignatures,\n        (ps) =>\n          ps.isReadonly === false ? ps : new PropertySignature(ps.name, ps.type, ps.isOptional, false, ps.annotations)\n      )\n      const indexSignatures = changeMap(\n        ast.indexSignatures,\n        (is) => is.isReadonly === false ? is : new IndexSignature(is.parameter, is.type, false)\n      )\n      return propertySignatures === ast.propertySignatures && indexSignatures === ast.indexSignatures ?\n        ast :\n        new TypeLiteral(propertySignatures, indexSignatures, ast.annotations)\n    }\n    case \"Union\": {\n      const types = changeMap(ast.types, mutable)\n      return types === ast.types ? ast : Union.make(types, ast.annotations)\n    }\n    case \"Suspend\":\n      return new Suspend(() => mutable(ast.f()), ast.annotations)\n    case \"Refinement\": {\n      const from = mutable(ast.from)\n      return from === ast.from ? ast : new Refinement(from, ast.filter, ast.annotations)\n    }\n    case \"Transformation\": {\n      const from = mutable(ast.from)\n      const to = mutable(ast.to)\n      return from === ast.from && to === ast.to ?\n        ast :\n        new Transformation(from, to, ast.transformation, ast.annotations)\n    }\n  }\n  return ast\n}\n\n// -------------------------------------------------------------------------------------\n// compiler harness\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 3.10.0\n */\nexport type Compiler<A> = (ast: AST, path: ReadonlyArray<PropertyKey>) => A\n\n/**\n * @since 3.10.0\n */\nexport type Match<A> = {\n  [K in AST[\"_tag\"]]: (ast: Extract<AST, { _tag: K }>, compile: Compiler<A>, path: ReadonlyArray<PropertyKey>) => A\n}\n\n/**\n * @since 3.10.0\n */\nexport const getCompiler = <A>(match: Match<A>): Compiler<A> => {\n  const compile = (ast: AST, path: ReadonlyArray<PropertyKey>): A => match[ast._tag](ast as any, compile, path)\n  return compile\n}\n\n/**\n * @since 3.10.0\n */\nexport const typeAST = (ast: AST): AST => {\n  switch (ast._tag) {\n    case \"Declaration\": {\n      const typeParameters = changeMap(ast.typeParameters, typeAST)\n      return typeParameters === ast.typeParameters ?\n        ast :\n        new Declaration(typeParameters, ast.decodeUnknown, ast.encodeUnknown, ast.annotations)\n    }\n    case \"TupleType\": {\n      const elements = changeMap(ast.elements, (e) => {\n        const type = typeAST(e.type)\n        return type === e.type ? e : new OptionalType(type, e.isOptional)\n      })\n      const restASTs = getRestASTs(ast.rest)\n      const rest = changeMap(restASTs, typeAST)\n      return elements === ast.elements && rest === restASTs ?\n        ast :\n        new TupleType(elements, rest.map((type) => new Type(type)), ast.isReadonly, ast.annotations)\n    }\n    case \"TypeLiteral\": {\n      const propertySignatures = changeMap(ast.propertySignatures, (p) => {\n        const type = typeAST(p.type)\n        return type === p.type ? p : new PropertySignature(p.name, type, p.isOptional, p.isReadonly)\n      })\n      const indexSignatures = changeMap(ast.indexSignatures, (is) => {\n        const type = typeAST(is.type)\n        return type === is.type ? is : new IndexSignature(is.parameter, type, is.isReadonly)\n      })\n      return propertySignatures === ast.propertySignatures && indexSignatures === ast.indexSignatures ?\n        ast :\n        new TypeLiteral(propertySignatures, indexSignatures, ast.annotations)\n    }\n    case \"Union\": {\n      const types = changeMap(ast.types, typeAST)\n      return types === ast.types ? ast : Union.make(types, ast.annotations)\n    }\n    case \"Suspend\":\n      return new Suspend(() => typeAST(ast.f()), ast.annotations)\n    case \"Refinement\": {\n      const from = typeAST(ast.from)\n      return from === ast.from ?\n        ast :\n        new Refinement(from, ast.filter, ast.annotations)\n    }\n    case \"Transformation\":\n      return typeAST(ast.to)\n  }\n  return ast\n}\n\n/** @internal */\nexport const whiteListAnnotations =\n  (annotationIds: ReadonlyArray<symbol>) => (annotated: Annotated): Annotations | undefined => {\n    let out: { [_: symbol]: unknown } | undefined = undefined\n    for (const id of annotationIds) {\n      if (Object.prototype.hasOwnProperty.call(annotated.annotations, id)) {\n        if (out === undefined) {\n          out = {}\n        }\n        out[id] = annotated.annotations[id]\n      }\n    }\n    return out\n  }\n\n/** @internal */\nexport const blackListAnnotations =\n  (annotationIds: ReadonlyArray<symbol>) => (annotated: Annotated): Annotations | undefined => {\n    const out = { ...annotated.annotations }\n    for (const id of annotationIds) {\n      delete out[id]\n    }\n    return out\n  }\n\n// To generate a JSON Schema from a recursive schema, an `identifier` annotation\n// is required. So, when we calculate the encodedAST, we need to preserve the\n// annotation in the form of an internal custom annotation that acts as a\n// surrogate for the identifier, which the JSON Schema compiler can then read.\nconst createJSONIdentifierAnnotation = (annotated: Annotated): Annotations | undefined =>\n  Option.match(getJSONIdentifier(annotated), {\n    onNone: () => undefined,\n    onSome: (identifier) => ({ [JSONIdentifierAnnotationId]: identifier })\n  })\n\nfunction changeMap<A>(\n  as: Arr.NonEmptyReadonlyArray<A>,\n  f: (a: A) => A\n): Arr.NonEmptyReadonlyArray<A>\nfunction changeMap<A>(as: ReadonlyArray<A>, f: (a: A) => A): ReadonlyArray<A>\nfunction changeMap<A>(as: ReadonlyArray<A>, f: (a: A) => A): ReadonlyArray<A> {\n  let changed = false\n  const out = Arr.allocate(as.length) as Array<A>\n  for (let i = 0; i < as.length; i++) {\n    const a = as[i]\n    const fa = f(a)\n    if (fa !== a) {\n      changed = true\n    }\n    out[i] = fa\n  }\n  return changed ? out : as\n}\n\nconst encodedAST_ = (ast: AST, isBound: boolean): AST => {\n  switch (ast._tag) {\n    case \"Declaration\": {\n      const typeParameters = changeMap(ast.typeParameters, (ast) => encodedAST_(ast, isBound))\n      return typeParameters === ast.typeParameters ?\n        ast :\n        new Declaration(typeParameters, ast.decodeUnknown, ast.encodeUnknown, ast.annotations)\n    }\n    case \"TupleType\": {\n      const elements = changeMap(ast.elements, (e) => {\n        const type = encodedAST_(e.type, isBound)\n        return type === e.type ? e : new OptionalType(type, e.isOptional)\n      })\n      const restASTs = getRestASTs(ast.rest)\n      const rest = changeMap(restASTs, (ast) => encodedAST_(ast, isBound))\n      return elements === ast.elements && rest === restASTs ?\n        ast :\n        new TupleType(\n          elements,\n          rest.map((ast) => new Type(ast)),\n          ast.isReadonly,\n          createJSONIdentifierAnnotation(ast)\n        )\n    }\n    case \"TypeLiteral\": {\n      const propertySignatures = changeMap(ast.propertySignatures, (ps) => {\n        const type = encodedAST_(ps.type, isBound)\n        return type === ps.type\n          ? ps\n          : new PropertySignature(ps.name, type, ps.isOptional, ps.isReadonly)\n      })\n      const indexSignatures = changeMap(ast.indexSignatures, (is) => {\n        const type = encodedAST_(is.type, isBound)\n        return type === is.type ? is : new IndexSignature(is.parameter, type, is.isReadonly)\n      })\n      return propertySignatures === ast.propertySignatures && indexSignatures === ast.indexSignatures ?\n        ast :\n        new TypeLiteral(propertySignatures, indexSignatures, createJSONIdentifierAnnotation(ast))\n    }\n    case \"Union\": {\n      const types = changeMap(ast.types, (ast) => encodedAST_(ast, isBound))\n      return types === ast.types ? ast : Union.make(types, createJSONIdentifierAnnotation(ast))\n    }\n    case \"Suspend\":\n      return new Suspend(() => encodedAST_(ast.f(), isBound), createJSONIdentifierAnnotation(ast))\n    case \"Refinement\": {\n      const from = encodedAST_(ast.from, isBound)\n      if (isBound) {\n        if (from === ast.from) {\n          return ast\n        }\n        if (!isTransformation(ast.from) && hasStableFilter(ast)) {\n          return new Refinement(from, ast.filter)\n        }\n      }\n      return from\n    }\n    case \"Transformation\":\n      return encodedAST_(ast.from, isBound)\n  }\n  return ast\n}\n\n/**\n * @since 3.10.0\n */\nexport const encodedAST = (ast: AST): AST => encodedAST_(ast, false)\n\n/**\n * @since 3.10.0\n */\nexport const encodedBoundAST = (ast: AST): AST => encodedAST_(ast, true)\n\nconst toJSONAnnotations = (annotations: Annotations): object => {\n  const out: Record<string, unknown> = {}\n  for (const k of Object.getOwnPropertySymbols(annotations)) {\n    out[String(k)] = annotations[k]\n  }\n  return out\n}\n\n/** @internal */\nexport const getParameterBase = (\n  ast: Parameter\n): StringKeyword | SymbolKeyword | TemplateLiteral => {\n  switch (ast._tag) {\n    case \"StringKeyword\":\n    case \"SymbolKeyword\":\n    case \"TemplateLiteral\":\n      return ast\n    case \"Refinement\":\n      return getParameterBase(ast.from)\n  }\n}\n\nconst equalsTemplateLiteralSpan = Arr.getEquivalence<TemplateLiteralSpan>((self, that) =>\n  self.type._tag === that.type._tag && self.literal === that.literal\n)\n\nconst equalsEnums = Arr.getEquivalence<readonly [string, string | number]>((self, that) =>\n  that[0] === self[0] && that[1] === self[1]\n)\n\nconst equals = (self: AST, that: AST) => {\n  switch (self._tag) {\n    case \"Literal\":\n      return isLiteral(that) && that.literal === self.literal\n    case \"UniqueSymbol\":\n      return isUniqueSymbol(that) && that.symbol === self.symbol\n    case \"UndefinedKeyword\":\n    case \"VoidKeyword\":\n    case \"NeverKeyword\":\n    case \"UnknownKeyword\":\n    case \"AnyKeyword\":\n    case \"StringKeyword\":\n    case \"NumberKeyword\":\n    case \"BooleanKeyword\":\n    case \"BigIntKeyword\":\n    case \"SymbolKeyword\":\n    case \"ObjectKeyword\":\n      return that._tag === self._tag\n    case \"TemplateLiteral\":\n      return isTemplateLiteral(that) && that.head === self.head && equalsTemplateLiteralSpan(that.spans, self.spans)\n    case \"Enums\":\n      return isEnums(that) && equalsEnums(that.enums, self.enums)\n    case \"Refinement\":\n    case \"TupleType\":\n    case \"TypeLiteral\":\n    case \"Union\":\n    case \"Suspend\":\n    case \"Transformation\":\n    case \"Declaration\":\n      return self === that\n  }\n}\n\nconst intersection = Arr.intersectionWith(equals)\n\nconst _keyof = (ast: AST): Array<AST> => {\n  switch (ast._tag) {\n    case \"Declaration\": {\n      const annotation = getSurrogateAnnotation(ast)\n      if (Option.isSome(annotation)) {\n        return _keyof(annotation.value)\n      }\n      break\n    }\n    case \"TypeLiteral\":\n      return ast.propertySignatures.map((p): AST =>\n        Predicate.isSymbol(p.name) ? new UniqueSymbol(p.name) : new Literal(p.name)\n      ).concat(ast.indexSignatures.map((is) => getParameterBase(is.parameter)))\n    case \"Suspend\":\n      return _keyof(ast.f())\n    case \"Union\":\n      return ast.types.slice(1).reduce(\n        (out: Array<AST>, ast) => intersection(out, _keyof(ast)),\n        _keyof(ast.types[0])\n      )\n    case \"Transformation\":\n      return _keyof(ast.to)\n  }\n  throw new Error(errors_.getASTUnsupportedSchema(ast))\n}\n\n/** @internal */\nexport const compose = (ab: AST, cd: AST): AST => new Transformation(ab, cd, composeTransformation)\n\n/** @internal */\nexport const rename = (ast: AST, mapping: { readonly [K in PropertyKey]?: PropertyKey }): AST => {\n  switch (ast._tag) {\n    case \"TypeLiteral\": {\n      const propertySignatureTransformations: Array<PropertySignatureTransformation> = []\n      for (const key of util_.ownKeys(mapping)) {\n        const name = mapping[key]\n        if (name !== undefined) {\n          propertySignatureTransformations.push(\n            new PropertySignatureTransformation(\n              key,\n              name,\n              identity,\n              identity\n            )\n          )\n        }\n      }\n      if (propertySignatureTransformations.length === 0) {\n        return ast\n      }\n      return new Transformation(\n        ast,\n        new TypeLiteral(\n          ast.propertySignatures.map((ps) => {\n            const name = mapping[ps.name]\n            return new PropertySignature(\n              name === undefined ? ps.name : name,\n              typeAST(ps.type),\n              ps.isOptional,\n              ps.isReadonly,\n              ps.annotations\n            )\n          }),\n          ast.indexSignatures\n        ),\n        new TypeLiteralTransformation(propertySignatureTransformations)\n      )\n    }\n    case \"Union\":\n      return Union.make(ast.types.map((ast) => rename(ast, mapping)))\n    case \"Suspend\":\n      return new Suspend(() => rename(ast.f(), mapping))\n    case \"Transformation\":\n      return compose(ast, rename(typeAST(ast), mapping))\n  }\n  throw new Error(errors_.getASTUnsupportedRenameSchema(ast))\n}\n\nconst formatKeyword = (ast: AST): string => Option.getOrElse(getExpected(ast), () => ast._tag)\n\nconst getExpected = (ast: Annotated): Option.Option<string> => {\n  return getIdentifierAnnotation(ast).pipe(\n    Option.orElse(() => getTitleAnnotation(ast)),\n    Option.orElse(() => getDescriptionAnnotation(ast))\n  )\n}\n"],"names":["Arr","dual","identity","globalValue","errors_","util_","Number","Option","Order","Predicate","regexp","BrandAnnotationId","Symbol","for","SchemaIdAnnotationId","MessageAnnotationId","MissingMessageAnnotationId","IdentifierAnnotationId","TitleAnnotationId","DescriptionAnnotationId","ExamplesAnnotationId","DefaultAnnotationId","JSONSchemaAnnotationId","ArbitraryAnnotationId","PrettyAnnotationId","EquivalenceAnnotationId","DocumentationAnnotationId","ConcurrencyAnnotationId","BatchingAnnotationId","ParseIssueTitleAnnotationId","ParseOptionsAnnotationId","DecodingFallbackAnnotationId","SurrogateAnnotationId","StableFilterAnnotationId","getAnnotation","annotated","key","Object","prototype","hasOwnProperty","call","annotations","some","none","getBrandAnnotation","getMessageAnnotation","getMissingMessageAnnotation","getTitleAnnotation","getIdentifierAnnotation","getDescriptionAnnotation","getExamplesAnnotation","getDefaultAnnotation","getJSONSchemaAnnotation","getDocumentationAnnotation","getConcurrencyAnnotation","getBatchingAnnotation","getParseIssueTitleAnnotation","getParseOptionsAnnotation","getDecodingFallbackAnnotation","getSurrogateAnnotation","getStableFilterAnnotation","hasStableFilter","exists","b","JSONIdentifierAnnotationId","getJSONIdentifierAnnotation","getJSONIdentifier","orElse","ParseJsonSchemaId","Declaration","typeParameters","decodeUnknown","encodeUnknown","_tag","constructor","toString","getOrElse","getExpected","toJSON","map","ast","toJSONAnnotations","createASTGuard","tag","isDeclaration","Literal","literal","formatUnknown","isBigInt","String","isLiteral","$null","null","UniqueSymbol","symbol","isUniqueSymbol","UndefinedKeyword","formatKeyword","undefinedKeyword","isUndefinedKeyword","VoidKeyword","voidKeyword","isVoidKeyword","NeverKeyword","neverKeyword","isNeverKeyword","UnknownKeyword","unknownKeyword","isUnknownKeyword","AnyKeyword","anyKeyword","isAnyKeyword","StringKeyword","stringKeyword","isStringKeyword","NumberKeyword","numberKeyword","isNumberKeyword","BooleanKeyword","booleanKeyword","isBooleanKeyword","BigIntKeyword","bigIntKeyword","isBigIntKeyword","SymbolKeyword","symbolKeyword","isSymbolKeyword","ObjectKeyword","objectKeyword","isObjectKeyword","Enums","enums","length","_","value","JSON","stringify","join","isEnums","TemplateLiteralSpan","type","TemplateLiteral","head","spans","formatTemplateLiteral","span","isTemplateLiteral","Type","OptionalType","isOptional","getRestASTs","rest","annotatedAST","TupleType","elements","isReadonly","hasOptionalElement","hasIllegalRequiredElement","e","Error","getASTRequiredElementFollowinAnOptionalElementErrorMessage","formatTuple","formattedElements","matchLeft","onEmpty","onNonEmpty","tail","formattedHead","wrappedHead","includes","formattedTail","isTupleType","PropertySignature","name","isParameter","from","IndexSignature","parameter","getASTIndexSignatureParameterErrorMessage","TypeLiteral","propertySignatures","indexSignatures","keys","i","getASTDuplicatePropertySignatureErrorMessage","parameters","string","getParameterBase","getASTDuplicateIndexSignatureErrorMessage","formatTypeLiteral","ps","formatIndexSignatures","iss","pss","isTypeLiteral","sortCandidates","sort","mapInput","literalMap","number","boolean","bigint","flatten","candidates","flatMap","isUnion","types","unify","cs","out","uniques","literals","push","Union","make","isMembers","mapMembers","members","f","as","toJSONMemoMap","WeakMap","Suspend","memoizeThunk","pipe","liftThrowable","get","set","isSuspend","Refinement","filter","isRefinement","defaultParseOption","Transformation","to","transformation","isTransformation","FinalTransformation","decode","encode","createTransformationGuard","isFinalTransformation","ComposeTransformation","composeTransformation","isComposeTransformation","PropertySignatureTransformation","isRenamingPropertySignatureTransformation","t","TypeLiteralTransformation","propertySignatureTransformations","fromKeys","toKeys","pst","getASTDuplicatePropertySignatureTransformationErrorMessage","isTypeLiteralTransformation","d","getOwnPropertyDescriptors","create","getPrototypeOf","keyof","_keyof","STRING_KEYWORD_PATTERN","NUMBER_KEYWORD_PATTERN","getTemplateLiteralRegExp","pattern","escape","RegExp","getTemplateLiteralCapturingRegExp","getPropertySignatures","annotation","isSome","slice","getPropertyKeys","getPropertyKeyIndexedAccess","getNumberIndexedAccess","hasOptional","concat","getASTUnsupportedSchema","getTypeLiteralPropertySignature","ops","findFirst","isString","undefined","is","parameterBase","regex","test","isSymbol","reduce","intersection","record","go","isNumber","getASTUnsupportedLiteral","forEach","getASTUnsupportedKeySchema","pick","names","ts","k","find","isNonEmptyReadonlyArray","omit","orUndefined","partial","options","exact","match","member","every","required","mutable","changeMap","getCompiler","compile","path","typeAST","restASTs","p","whiteListAnnotations","annotationIds","id","blackListAnnotations","createJSONIdentifierAnnotation","onNone","onSome","identifier","changed","allocate","a","fa","encodedAST_","isBound","encodedAST","encodedBoundAST","getOwnPropertySymbols","equalsTemplateLiteralSpan","getEquivalence","self","that","equalsEnums","equals","intersectionWith","compose","ab","cd","rename","mapping","ownKeys","getASTUnsupportedRenameSchema"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 12539, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12545, "column": 0}, "map": {"version":3,"file":"Data.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Data.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Cause from \"./Cause.js\"\nimport * as core from \"./internal/core.js\"\nimport * as internal from \"./internal/data.js\"\nimport { StructuralPrototype } from \"./internal/effectable.js\"\nimport * as Predicate from \"./Predicate.js\"\nimport type * as Types from \"./Types.js\"\nimport type { Unify } from \"./Unify.js\"\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Case {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Constructor<A, Tag extends keyof A = never> {\n    (\n      args: Types.Equals<Omit<A, Tag>, {}> extends true ? void\n        : { readonly [P in keyof A as P extends Tag ? never : P]: A[P] }\n    ): A\n  }\n}\n\n/**\n * @example\n * import { Data, Equal } from \"effect\"\n *\n * const alice = Data.struct({ name: \"Alice\", age: 30 })\n *\n * const bob = Data.struct({ name: \"Bob\", age: 40 })\n *\n * assert.deepStrictEqual(Equal.equals(alice, alice), true)\n * assert.deepStrictEqual(Equal.equals(alice, Data.struct({ name: \"Alice\", age: 30 })), true)\n *\n * assert.deepStrictEqual(Equal.equals(alice, { name: \"Alice\", age: 30 }), false)\n * assert.deepStrictEqual(Equal.equals(alice, bob), false)\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const struct: <A extends Record<string, any>>(a: A) => { readonly [P in keyof A]: A[P] } = internal.struct\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const unsafeStruct = <A extends Record<string, any>>(as: A): { readonly [P in keyof A]: A[P] } =>\n  Object.setPrototypeOf(as, StructuralPrototype)\n\n/**\n * @example\n * import { Data, Equal } from \"effect\"\n *\n * const alice = Data.tuple(\"Alice\", 30)\n *\n * const bob = Data.tuple(\"Bob\", 40)\n *\n * assert.deepStrictEqual(Equal.equals(alice, alice), true)\n * assert.deepStrictEqual(Equal.equals(alice, Data.tuple(\"Alice\", 30)), true)\n *\n * assert.deepStrictEqual(Equal.equals(alice, [\"Alice\", 30]), false)\n * assert.deepStrictEqual(Equal.equals(alice, bob), false)\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const tuple = <As extends ReadonlyArray<any>>(...as: As): Readonly<As> => unsafeArray(as)\n\n/**\n * @example\n * import { Data, Equal } from \"effect\"\n *\n * const alice = Data.struct({ name: \"Alice\", age: 30 })\n * const bob = Data.struct({ name: \"Bob\", age: 40 })\n *\n * const persons = Data.array([alice, bob])\n *\n * assert.deepStrictEqual(\n *   Equal.equals(\n *     persons,\n *     Data.array([\n *       Data.struct({ name: \"Alice\", age: 30 }),\n *       Data.struct({ name: \"Bob\", age: 40 })\n *     ])\n *   ),\n *   true\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const array = <As extends ReadonlyArray<any>>(as: As): Readonly<As> => unsafeArray(as.slice(0) as unknown as As)\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const unsafeArray = <As extends ReadonlyArray<any>>(as: As): Readonly<As> =>\n  Object.setPrototypeOf(as, internal.ArrayProto)\n\nconst _case = <A>(): Case.Constructor<A> => (args) =>\n  (args === undefined ? Object.create(StructuralPrototype) : struct(args)) as any\n\nexport {\n  /**\n   * Provides a constructor for the specified `Case`.\n   *\n   * @example\n   * import { Data, Equal } from \"effect\"\n   *\n   * interface Person {\n   *   readonly name: string\n   * }\n   *\n   * // Creating a constructor for the specified Case\n   * const Person = Data.case<Person>()\n   *\n   * // Creating instances of Person\n   * const mike1 = Person({ name: \"Mike\" })\n   * const mike2 = Person({ name: \"Mike\" })\n   * const john = Person({ name: \"John\" })\n   *\n   * // Checking equality\n   * assert.deepStrictEqual(Equal.equals(mike1, mike2), true)\n   * assert.deepStrictEqual(Equal.equals(mike1, john), false)\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  _case as case\n}\n\n/**\n * Provides a tagged constructor for the specified `Case`.\n *\n * @example\n * import { Data } from \"effect\"\n *\n * interface Person {\n *   readonly _tag: \"Person\" // the tag\n *   readonly name: string\n * }\n *\n * const Person = Data.tagged<Person>(\"Person\")\n *\n * const mike = Person({ name: \"Mike\" })\n *\n * assert.deepEqual(mike, { _tag: \"Person\", name: \"Mike\" })\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const tagged = <A extends { readonly _tag: string }>(\n  tag: A[\"_tag\"]\n): Case.Constructor<A, \"_tag\"> =>\n(args) => {\n  const value = args === undefined ? Object.create(StructuralPrototype) : struct(args)\n  value._tag = tag\n  return value\n}\n\n/**\n * Provides a constructor for a Case Class.\n *\n * @example\n * import { Data, Equal } from \"effect\"\n *\n * class Person extends Data.Class<{ readonly name: string }> {}\n *\n * // Creating instances of Person\n * const mike1 = new Person({ name: \"Mike\" })\n * const mike2 = new Person({ name: \"Mike\" })\n * const john = new Person({ name: \"John\" })\n *\n * // Checking equality\n * assert.deepStrictEqual(Equal.equals(mike1, mike2), true)\n * assert.deepStrictEqual(Equal.equals(mike1, john), false)\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const Class: new<A extends Record<string, any> = {}>(\n  args: Types.Equals<A, {}> extends true ? void\n    : { readonly [P in keyof A]: A[P] }\n) => Readonly<A> = internal.Structural as any\n\n/**\n * Provides a Tagged constructor for a Case Class.\n *\n * @example\n * import { Data, Equal } from \"effect\"\n *\n * class Person extends Data.TaggedClass(\"Person\")<{ readonly name: string }> {}\n *\n * // Creating instances of Person\n * const mike1 = new Person({ name: \"Mike\" })\n * const mike2 = new Person({ name: \"Mike\" })\n * const john = new Person({ name: \"John\" })\n *\n * // Checking equality\n * assert.deepStrictEqual(Equal.equals(mike1, mike2), true)\n * assert.deepStrictEqual(Equal.equals(mike1, john), false)\n *\n * assert.deepStrictEqual(mike1._tag, \"Person\")\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const TaggedClass = <Tag extends string>(\n  tag: Tag\n): new<A extends Record<string, any> = {}>(\n  args: Types.Equals<A, {}> extends true ? void\n    : { readonly [P in keyof A as P extends \"_tag\" ? never : P]: A[P] }\n) => Readonly<A> & { readonly _tag: Tag } => {\n  class Base extends Class<any> {\n    readonly _tag = tag\n  }\n  return Base as any\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Structural: new<A>(\n  args: Types.Equals<A, {}> extends true ? void\n    : { readonly [P in keyof A]: A[P] }\n) => {} = internal.Structural as any\n\n/**\n * Create a tagged enum data type, which is a union of `Data` structs.\n *\n * ```ts\n * import { Data } from \"effect\"\n *\n * type HttpError = Data.TaggedEnum<{\n *   BadRequest: { readonly status: 400, readonly message: string }\n *   NotFound: { readonly status: 404, readonly message: string }\n * }>\n *\n * // Equivalent to:\n * type HttpErrorPlain =\n *   | {\n *     readonly _tag: \"BadRequest\"\n *     readonly status: 400\n *     readonly message: string\n *   }\n *   | {\n *     readonly _tag: \"NotFound\"\n *     readonly status: 404\n *     readonly message: string\n *   }\n * ```\n *\n * @since 2.0.0\n * @category models\n */\nexport type TaggedEnum<\n  A extends Record<string, Record<string, any>> & UntaggedChildren<A>\n> = keyof A extends infer Tag ?\n  Tag extends keyof A ? Types.Simplify<{ readonly _tag: Tag } & { readonly [K in keyof A[Tag]]: A[Tag][K] }>\n  : never\n  : never\n\ntype ChildrenAreTagged<A> = keyof A extends infer K ? K extends keyof A ? \"_tag\" extends keyof A[K] ? true\n    : false\n  : never\n  : never\n\ntype UntaggedChildren<A> = true extends ChildrenAreTagged<A>\n  ? \"It looks like you're trying to create a tagged enum, but one or more of its members already has a `_tag` property.\"\n  : unknown\n\n/**\n * @since 2.0.0\n */\nexport declare namespace TaggedEnum {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface WithGenerics<Count extends number> {\n    readonly taggedEnum: { readonly _tag: string }\n    readonly numberOfGenerics: Count\n\n    readonly A: unknown\n    readonly B: unknown\n    readonly C: unknown\n    readonly D: unknown\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export type Kind<\n    Z extends WithGenerics<number>,\n    A = unknown,\n    B = unknown,\n    C = unknown,\n    D = unknown\n  > = (Z & {\n    readonly A: A\n    readonly B: B\n    readonly C: C\n    readonly D: D\n  })[\"taggedEnum\"]\n\n  /**\n   * @since 2.0.0\n   */\n  export type Args<\n    A extends { readonly _tag: string },\n    K extends A[\"_tag\"],\n    E = Extract<A, { readonly _tag: K }>\n  > = { readonly [K in keyof E as K extends \"_tag\" ? never : K]: E[K] } extends infer T ? {} extends T ? void : T\n    : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type Value<\n    A extends { readonly _tag: string },\n    K extends A[\"_tag\"]\n  > = Extract<A, { readonly _tag: K }>\n\n  /**\n   * @since 3.1.0\n   */\n  export type Constructor<A extends { readonly _tag: string }> = Types.Simplify<\n    & {\n      readonly [Tag in A[\"_tag\"]]: Case.Constructor<Extract<A, { readonly _tag: Tag }>, \"_tag\">\n    }\n    & {\n      readonly $is: <Tag extends A[\"_tag\"]>(tag: Tag) => (u: unknown) => u is Extract<A, { readonly _tag: Tag }>\n      readonly $match: {\n        <\n          Cases extends {\n            readonly [Tag in A[\"_tag\"]]: (args: Extract<A, { readonly _tag: Tag }>) => any\n          }\n        >(cases: Cases): (value: A) => Unify<ReturnType<Cases[A[\"_tag\"]]>>\n        <\n          Cases extends {\n            readonly [Tag in A[\"_tag\"]]: (args: Extract<A, { readonly _tag: Tag }>) => any\n          }\n        >(value: A, cases: Cases): Unify<ReturnType<Cases[A[\"_tag\"]]>>\n      }\n    }\n  >\n\n  /**\n   * @since 3.2.0\n   */\n  export interface GenericMatchers<Z extends WithGenerics<number>> {\n    readonly $is: <Tag extends Z[\"taggedEnum\"][\"_tag\"]>(\n      tag: Tag\n    ) => {\n      <T extends TaggedEnum.Kind<Z, any, any, any, any>>(\n        u: T\n      ): u is T & { readonly _tag: Tag }\n      (u: unknown): u is Extract<TaggedEnum.Kind<Z>, { readonly _tag: Tag }>\n    }\n    readonly $match: {\n      <\n        A,\n        B,\n        C,\n        D,\n        Cases extends {\n          readonly [Tag in Z[\"taggedEnum\"][\"_tag\"]]: (\n            args: Extract<TaggedEnum.Kind<Z, A, B, C, D>, { readonly _tag: Tag }>\n          ) => any\n        }\n      >(\n        cases: Cases\n      ): (self: TaggedEnum.Kind<Z, A, B, C, D>) => Unify<ReturnType<Cases[Z[\"taggedEnum\"][\"_tag\"]]>>\n      <\n        A,\n        B,\n        C,\n        D,\n        Cases extends {\n          readonly [Tag in Z[\"taggedEnum\"][\"_tag\"]]: (\n            args: Extract<TaggedEnum.Kind<Z, A, B, C, D>, { readonly _tag: Tag }>\n          ) => any\n        }\n      >(\n        self: TaggedEnum.Kind<Z, A, B, C, D>,\n        cases: Cases\n      ): Unify<ReturnType<Cases[Z[\"taggedEnum\"][\"_tag\"]]>>\n    }\n  }\n}\n\n/**\n * Create a constructor for a tagged union of `Data` structs.\n *\n * You can also pass a `TaggedEnum.WithGenerics` if you want to add generics to\n * the constructor.\n *\n * @example\n * import { Data } from \"effect\"\n *\n * const { BadRequest, NotFound } = Data.taggedEnum<\n *   | { readonly _tag: \"BadRequest\"; readonly status: 400; readonly message: string }\n *   | { readonly _tag: \"NotFound\"; readonly status: 404; readonly message: string }\n * >()\n *\n * const notFound = NotFound({ status: 404, message: \"Not Found\" })\n *\n * @example\n * import { Data } from \"effect\"\n *\n * type MyResult<E, A> = Data.TaggedEnum<{\n *   Failure: { readonly error: E }\n *   Success: { readonly value: A }\n * }>\n * interface MyResultDefinition extends Data.TaggedEnum.WithGenerics<2> {\n *   readonly taggedEnum: MyResult<this[\"A\"], this[\"B\"]>\n * }\n * const { Failure, Success } = Data.taggedEnum<MyResultDefinition>()\n *\n * const success = Success({ value: 1 })\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const taggedEnum: {\n  /**\n   * Create a constructor for a tagged union of `Data` structs.\n   *\n   * You can also pass a `TaggedEnum.WithGenerics` if you want to add generics to\n   * the constructor.\n   *\n   * @example\n   * import { Data } from \"effect\"\n   *\n   * const { BadRequest, NotFound } = Data.taggedEnum<\n   *   | { readonly _tag: \"BadRequest\"; readonly status: 400; readonly message: string }\n   *   | { readonly _tag: \"NotFound\"; readonly status: 404; readonly message: string }\n   * >()\n   *\n   * const notFound = NotFound({ status: 404, message: \"Not Found\" })\n   *\n   * @example\n   * import { Data } from \"effect\"\n   *\n   * type MyResult<E, A> = Data.TaggedEnum<{\n   *   Failure: { readonly error: E }\n   *   Success: { readonly value: A }\n   * }>\n   * interface MyResultDefinition extends Data.TaggedEnum.WithGenerics<2> {\n   *   readonly taggedEnum: MyResult<this[\"A\"], this[\"B\"]>\n   * }\n   * const { Failure, Success } = Data.taggedEnum<MyResultDefinition>()\n   *\n   * const success = Success({ value: 1 })\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <Z extends TaggedEnum.WithGenerics<1>>(): Types.Simplify<\n    {\n      readonly [Tag in Z[\"taggedEnum\"][\"_tag\"]]: <A>(\n        args: TaggedEnum.Args<\n          TaggedEnum.Kind<Z, A>,\n          Tag,\n          Extract<TaggedEnum.Kind<Z, A>, { readonly _tag: Tag }>\n        >\n      ) => TaggedEnum.Value<TaggedEnum.Kind<Z, A>, Tag>\n    } & TaggedEnum.GenericMatchers<Z>\n  >\n\n  /**\n   * Create a constructor for a tagged union of `Data` structs.\n   *\n   * You can also pass a `TaggedEnum.WithGenerics` if you want to add generics to\n   * the constructor.\n   *\n   * @example\n   * import { Data } from \"effect\"\n   *\n   * const { BadRequest, NotFound } = Data.taggedEnum<\n   *   | { readonly _tag: \"BadRequest\"; readonly status: 400; readonly message: string }\n   *   | { readonly _tag: \"NotFound\"; readonly status: 404; readonly message: string }\n   * >()\n   *\n   * const notFound = NotFound({ status: 404, message: \"Not Found\" })\n   *\n   * @example\n   * import { Data } from \"effect\"\n   *\n   * type MyResult<E, A> = Data.TaggedEnum<{\n   *   Failure: { readonly error: E }\n   *   Success: { readonly value: A }\n   * }>\n   * interface MyResultDefinition extends Data.TaggedEnum.WithGenerics<2> {\n   *   readonly taggedEnum: MyResult<this[\"A\"], this[\"B\"]>\n   * }\n   * const { Failure, Success } = Data.taggedEnum<MyResultDefinition>()\n   *\n   * const success = Success({ value: 1 })\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <Z extends TaggedEnum.WithGenerics<2>>(): Types.Simplify<\n    {\n      readonly [Tag in Z[\"taggedEnum\"][\"_tag\"]]: <A, B>(\n        args: TaggedEnum.Args<\n          TaggedEnum.Kind<Z, A, B>,\n          Tag,\n          Extract<TaggedEnum.Kind<Z, A, B>, { readonly _tag: Tag }>\n        >\n      ) => TaggedEnum.Value<TaggedEnum.Kind<Z, A, B>, Tag>\n    } & TaggedEnum.GenericMatchers<Z>\n  >\n\n  /**\n   * Create a constructor for a tagged union of `Data` structs.\n   *\n   * You can also pass a `TaggedEnum.WithGenerics` if you want to add generics to\n   * the constructor.\n   *\n   * @example\n   * import { Data } from \"effect\"\n   *\n   * const { BadRequest, NotFound } = Data.taggedEnum<\n   *   | { readonly _tag: \"BadRequest\"; readonly status: 400; readonly message: string }\n   *   | { readonly _tag: \"NotFound\"; readonly status: 404; readonly message: string }\n   * >()\n   *\n   * const notFound = NotFound({ status: 404, message: \"Not Found\" })\n   *\n   * @example\n   * import { Data } from \"effect\"\n   *\n   * type MyResult<E, A> = Data.TaggedEnum<{\n   *   Failure: { readonly error: E }\n   *   Success: { readonly value: A }\n   * }>\n   * interface MyResultDefinition extends Data.TaggedEnum.WithGenerics<2> {\n   *   readonly taggedEnum: MyResult<this[\"A\"], this[\"B\"]>\n   * }\n   * const { Failure, Success } = Data.taggedEnum<MyResultDefinition>()\n   *\n   * const success = Success({ value: 1 })\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <Z extends TaggedEnum.WithGenerics<3>>(): Types.Simplify<\n    {\n      readonly [Tag in Z[\"taggedEnum\"][\"_tag\"]]: <A, B, C>(\n        args: TaggedEnum.Args<\n          TaggedEnum.Kind<Z, A, B, C>,\n          Tag,\n          Extract<TaggedEnum.Kind<Z, A, B, C>, { readonly _tag: Tag }>\n        >\n      ) => TaggedEnum.Value<TaggedEnum.Kind<Z, A, B, C>, Tag>\n    } & TaggedEnum.GenericMatchers<Z>\n  >\n\n  /**\n   * Create a constructor for a tagged union of `Data` structs.\n   *\n   * You can also pass a `TaggedEnum.WithGenerics` if you want to add generics to\n   * the constructor.\n   *\n   * @example\n   * import { Data } from \"effect\"\n   *\n   * const { BadRequest, NotFound } = Data.taggedEnum<\n   *   | { readonly _tag: \"BadRequest\"; readonly status: 400; readonly message: string }\n   *   | { readonly _tag: \"NotFound\"; readonly status: 404; readonly message: string }\n   * >()\n   *\n   * const notFound = NotFound({ status: 404, message: \"Not Found\" })\n   *\n   * @example\n   * import { Data } from \"effect\"\n   *\n   * type MyResult<E, A> = Data.TaggedEnum<{\n   *   Failure: { readonly error: E }\n   *   Success: { readonly value: A }\n   * }>\n   * interface MyResultDefinition extends Data.TaggedEnum.WithGenerics<2> {\n   *   readonly taggedEnum: MyResult<this[\"A\"], this[\"B\"]>\n   * }\n   * const { Failure, Success } = Data.taggedEnum<MyResultDefinition>()\n   *\n   * const success = Success({ value: 1 })\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <Z extends TaggedEnum.WithGenerics<4>>(): Types.Simplify<\n    {\n      readonly [Tag in Z[\"taggedEnum\"][\"_tag\"]]: <A, B, C, D>(\n        args: TaggedEnum.Args<\n          TaggedEnum.Kind<Z, A, B, C, D>,\n          Tag,\n          Extract<TaggedEnum.Kind<Z, A, B, C, D>, { readonly _tag: Tag }>\n        >\n      ) => TaggedEnum.Value<TaggedEnum.Kind<Z, A, B, C, D>, Tag>\n    } & TaggedEnum.GenericMatchers<Z>\n  >\n\n  /**\n   * Create a constructor for a tagged union of `Data` structs.\n   *\n   * You can also pass a `TaggedEnum.WithGenerics` if you want to add generics to\n   * the constructor.\n   *\n   * @example\n   * import { Data } from \"effect\"\n   *\n   * const { BadRequest, NotFound } = Data.taggedEnum<\n   *   | { readonly _tag: \"BadRequest\"; readonly status: 400; readonly message: string }\n   *   | { readonly _tag: \"NotFound\"; readonly status: 404; readonly message: string }\n   * >()\n   *\n   * const notFound = NotFound({ status: 404, message: \"Not Found\" })\n   *\n   * @example\n   * import { Data } from \"effect\"\n   *\n   * type MyResult<E, A> = Data.TaggedEnum<{\n   *   Failure: { readonly error: E }\n   *   Success: { readonly value: A }\n   * }>\n   * interface MyResultDefinition extends Data.TaggedEnum.WithGenerics<2> {\n   *   readonly taggedEnum: MyResult<this[\"A\"], this[\"B\"]>\n   * }\n   * const { Failure, Success } = Data.taggedEnum<MyResultDefinition>()\n   *\n   * const success = Success({ value: 1 })\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A extends { readonly _tag: string }>(): TaggedEnum.Constructor<A>\n} = () =>\n  new Proxy({}, {\n    get(_target, tag, _receiver) {\n      if (tag === \"$is\") {\n        return Predicate.isTagged\n      } else if (tag === \"$match\") {\n        return taggedMatch\n      }\n      return tagged(tag as string)\n    }\n  }) as any\n\nfunction taggedMatch<\n  A extends { readonly _tag: string },\n  Cases extends {\n    readonly [K in A[\"_tag\"]]: (args: Extract<A, { readonly _tag: K }>) => any\n  }\n>(self: A, cases: Cases): ReturnType<Cases[A[\"_tag\"]]>\nfunction taggedMatch<\n  A extends { readonly _tag: string },\n  Cases extends {\n    readonly [K in A[\"_tag\"]]: (args: Extract<A, { readonly _tag: K }>) => any\n  }\n>(cases: Cases): (value: A) => ReturnType<Cases[A[\"_tag\"]]>\nfunction taggedMatch<\n  A extends { readonly _tag: string },\n  Cases extends {\n    readonly [K in A[\"_tag\"]]: (args: Extract<A, { readonly _tag: K }>) => any\n  }\n>(): any {\n  if (arguments.length === 1) {\n    const cases = arguments[0] as Cases\n    return function(value: A): ReturnType<Cases[A[\"_tag\"]]> {\n      return cases[value._tag as A[\"_tag\"]](value as any)\n    }\n  }\n  const value = arguments[0] as A\n  const cases = arguments[1] as Cases\n  return cases[value._tag as A[\"_tag\"]](value as any)\n}\n\n/**\n * Provides a constructor for a Case Class.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const Error: new<A extends Record<string, any> = {}>(\n  args: Types.Equals<A, {}> extends true ? void\n    : { readonly [P in keyof A]: A[P] }\n) => Cause.YieldableError & Readonly<A> = (function() {\n  const plainArgsSymbol = Symbol.for(\"effect/Data/Error/plainArgs\")\n  return class Base extends core.YieldableError {\n    constructor(args: any) {\n      super(args?.message, args?.cause ? { cause: args.cause } : undefined)\n      if (args) {\n        Object.assign(this, args)\n        Object.defineProperty(this, plainArgsSymbol, { value: args, enumerable: false })\n      }\n    }\n    toJSON() {\n      return { ...(this as any)[plainArgsSymbol], ...this }\n    }\n  } as any\n})()\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const TaggedError = <Tag extends string>(tag: Tag): new<A extends Record<string, any> = {}>(\n  args: Types.Equals<A, {}> extends true ? void\n    : { readonly [P in keyof A as P extends \"_tag\" ? never : P]: A[P] }\n) => Cause.YieldableError & { readonly _tag: Tag } & Readonly<A> => {\n  class Base extends Error<{}> {\n    readonly _tag = tag\n  }\n  ;(Base.prototype as any).name = tag\n  return Base as any\n}\n"],"names":["core","internal","StructuralPrototype","Predicate","struct","unsafeStruct","as","Object","setPrototypeOf","tuple","unsafeArray","array","slice","ArrayProto","_case","args","undefined","create","case","tagged","tag","value","_tag","Class","Structural","TaggedClass","Base","taggedEnum","Proxy","get","_target","_receiver","isTagged","taggedMatch","arguments","length","cases","Error","plainArgsSymbol","Symbol","for","YieldableError","constructor","message","cause","assign","defineProperty","enumerable","toJSON","TaggedError","prototype","name"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 12640, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12646, "column": 0}, "map": {"version":3,"file":"ParseResult.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/ParseResult.ts"],"sourcesContent":["/**\n * @since 3.10.0\n */\n\nimport * as array_ from \"./Array.js\"\nimport type * as cause_ from \"./Cause.js\"\nimport { TaggedError } from \"./Data.js\"\nimport * as Effect from \"./Effect.js\"\nimport * as Either from \"./Either.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { dual } from \"./Function.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport * as Inspectable from \"./Inspectable.js\"\nimport * as util_ from \"./internal/schema/util.js\"\nimport * as Option from \"./Option.js\"\nimport * as Predicate from \"./Predicate.js\"\nimport type * as Schema from \"./Schema.js\"\nimport * as AST from \"./SchemaAST.js\"\nimport type { Concurrency } from \"./Types.js\"\n\n/**\n * `ParseIssue` is a type that represents the different types of errors that can occur when decoding/encoding a value.\n *\n * @category model\n * @since 3.10.0\n */\nexport type ParseIssue =\n  // leaf\n  | Type\n  | Missing\n  | Unexpected\n  | Forbidden\n  // composite\n  | Pointer\n  | Refinement\n  | Transformation\n  | Composite\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport type SingleOrNonEmpty<A> = A | array_.NonEmptyReadonlyArray<A>\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport type Path = SingleOrNonEmpty<PropertyKey>\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport class Pointer {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Pointer\"\n  constructor(\n    readonly path: Path,\n    readonly actual: unknown,\n    readonly issue: ParseIssue\n  ) {}\n}\n\n/**\n * Error that occurs when an unexpected key or index is present.\n *\n * @category model\n * @since 3.10.0\n */\nexport class Unexpected {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Unexpected\"\n  constructor(\n    readonly actual: unknown,\n    /**\n     * @since 3.10.0\n     */\n    readonly message?: string\n  ) {}\n}\n\n/**\n * Error that occurs when a required key or index is missing.\n *\n * @category model\n * @since 3.10.0\n */\nexport class Missing {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Missing\"\n  /**\n   * @since 3.10.0\n   */\n  readonly actual = undefined\n  constructor(\n    /**\n     * @since 3.10.0\n     */\n    readonly ast: AST.Type,\n    /**\n     * @since 3.10.0\n     */\n    readonly message?: string\n  ) {}\n}\n\n/**\n * Error that contains multiple issues.\n *\n * @category model\n * @since 3.10.0\n */\nexport class Composite {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Composite\"\n  constructor(\n    readonly ast: AST.AST,\n    readonly actual: unknown,\n    readonly issues: SingleOrNonEmpty<ParseIssue>,\n    readonly output?: unknown\n  ) {}\n}\n\n/**\n * Error that occurs when a refinement has an error.\n *\n * @category model\n * @since 3.10.0\n */\nexport class Refinement {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Refinement\"\n  constructor(\n    readonly ast: AST.Refinement,\n    readonly actual: unknown,\n    readonly kind: \"From\" | \"Predicate\",\n    readonly issue: ParseIssue\n  ) {}\n}\n\n/**\n * Error that occurs when a transformation has an error.\n *\n * @category model\n * @since 3.10.0\n */\nexport class Transformation {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Transformation\"\n  constructor(\n    readonly ast: AST.Transformation,\n    readonly actual: unknown,\n    readonly kind: \"Encoded\" | \"Transformation\" | \"Type\",\n    readonly issue: ParseIssue\n  ) {}\n}\n\n/**\n * The `Type` variant of the `ParseIssue` type represents an error that occurs when the `actual` value is not of the expected type.\n * The `ast` field specifies the expected type, and the `actual` field contains the value that caused the error.\n *\n * @category model\n * @since 3.10.0\n */\nexport class Type {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Type\"\n  constructor(\n    readonly ast: AST.AST,\n    readonly actual: unknown,\n    readonly message?: string\n  ) {}\n}\n\n/**\n * The `Forbidden` variant of the `ParseIssue` type represents a forbidden operation, such as when encountering an Effect that is not allowed to execute (e.g., using `runSync`).\n *\n * @category model\n * @since 3.10.0\n */\nexport class Forbidden {\n  /**\n   * @since 3.10.0\n   */\n  readonly _tag = \"Forbidden\"\n  constructor(\n    readonly ast: AST.AST,\n    readonly actual: unknown,\n    readonly message?: string\n  ) {}\n}\n\n/**\n * @category type id\n * @since 3.10.0\n */\nexport const ParseErrorTypeId: unique symbol = Symbol.for(\"effect/Schema/ParseErrorTypeId\")\n\n/**\n * @category type id\n * @since 3.10.0\n */\nexport type ParseErrorTypeId = typeof ParseErrorTypeId\n\n/**\n * @since 3.10.0\n */\nexport const isParseError = (u: unknown): u is ParseError => Predicate.hasProperty(u, ParseErrorTypeId)\n\n/**\n * @since 3.10.0\n */\nexport class ParseError extends TaggedError(\"ParseError\")<{ readonly issue: ParseIssue }> {\n  /**\n   * @since 3.10.0\n   */\n  readonly [ParseErrorTypeId] = ParseErrorTypeId\n\n  get message() {\n    return this.toString()\n  }\n  /**\n   * @since 3.10.0\n   */\n  toString() {\n    return TreeFormatter.formatIssueSync(this.issue)\n  }\n  /**\n   * @since 3.10.0\n   */\n  toJSON() {\n    return {\n      _id: \"ParseError\",\n      message: this.toString()\n    }\n  }\n  /**\n   * @since 3.10.0\n   */\n  [Inspectable.NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const parseError = (issue: ParseIssue): ParseError => new ParseError({ issue })\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const succeed: <A>(a: A) => Either.Either<A, ParseIssue> = Either.right\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const fail: (issue: ParseIssue) => Either.Either<never, ParseIssue> = Either.left\n\nconst _try: <A>(options: {\n  try: LazyArg<A>\n  catch: (e: unknown) => ParseIssue\n}) => Either.Either<A, ParseIssue> = Either.try\n\nexport {\n  /**\n   * @category constructors\n   * @since 3.10.0\n   */\n  _try as try\n}\n\n/**\n * @category constructors\n * @since 3.10.0\n */\nexport const fromOption: {\n  /**\n   * @category constructors\n   * @since 3.10.0\n   */\n  (onNone: () => ParseIssue): <A>(self: Option.Option<A>) => Either.Either<A, ParseIssue>\n  /**\n   * @category constructors\n   * @since 3.10.0\n   */\n  <A>(self: Option.Option<A>, onNone: () => ParseIssue): Either.Either<A, ParseIssue>\n} = Either.fromOption\n\n/**\n * @category optimisation\n * @since 3.10.0\n */\nexport const flatMap: {\n  /**\n   * @category optimisation\n   * @since 3.10.0\n   */\n  <A, B, E1, R1>(\n    f: (a: A) => Effect.Effect<B, E1, R1>\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E1 | E, R1 | R>\n  /**\n   * @category optimisation\n   * @since 3.10.0\n   */\n  <A, E, R, B, E1, R1>(\n    self: Effect.Effect<A, E, R>,\n    f: (a: A) => Effect.Effect<B, E1, R1>\n  ): Effect.Effect<B, E | E1, R | R1>\n} = dual(2, <A, E, R, B, E1, R1>(\n  self: Effect.Effect<A, E, R>,\n  f: (a: A) => Effect.Effect<B, E1, R1>\n): Effect.Effect<B, E | E1, R | R1> => {\n  const s: any = self\n  if (s[\"_tag\"] === \"Left\") {\n    return s\n  }\n  if (s[\"_tag\"] === \"Right\") {\n    return f(s.right)\n  }\n  return Effect.flatMap(self, f)\n})\n\n/**\n * @category optimisation\n * @since 3.10.0\n */\nexport const map: {\n  /**\n   * @category optimisation\n   * @since 3.10.0\n   */\n  <A, B>(f: (a: A) => B): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E, R>\n  /**\n   * @category optimisation\n   * @since 3.10.0\n   */\n  <A, E, R, B>(self: Effect.Effect<A, E, R>, f: (a: A) => B): Effect.Effect<B, E, R>\n} = dual(2, <A, E, R, B>(self: Effect.Effect<A, E, R>, f: (a: A) => B): Effect.Effect<B, E, R> => {\n  const s: any = self\n  if (s[\"_tag\"] === \"Left\") {\n    return s\n  }\n  if (s[\"_tag\"] === \"Right\") {\n    return Either.right(f(s.right))\n  }\n  return Effect.map(self, f)\n})\n\n/**\n * @category optimisation\n * @since 3.10.0\n */\nexport const mapError: {\n  /**\n   * @category optimisation\n   * @since 3.10.0\n   */\n  <E, E2>(f: (e: E) => E2): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E2, R>\n  /**\n   * @category optimisation\n   * @since 3.10.0\n   */\n  <A, E, R, E2>(self: Effect.Effect<A, E, R>, f: (e: E) => E2): Effect.Effect<A, E2, R>\n} = dual(2, <A, E, R, E2>(self: Effect.Effect<A, E, R>, f: (e: E) => E2): Effect.Effect<A, E2, R> => {\n  const s: any = self\n  if (s[\"_tag\"] === \"Left\") {\n    return Either.left(f(s.left))\n  }\n  if (s[\"_tag\"] === \"Right\") {\n    return s\n  }\n  return Effect.mapError(self, f)\n})\n\n/**\n * @category optimisation\n * @since 3.10.0\n */\nexport const eitherOrUndefined = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Either.Either<A, E> | undefined => {\n  const s: any = self\n  if (s[\"_tag\"] === \"Left\" || s[\"_tag\"] === \"Right\") {\n    return s\n  }\n}\n\n/**\n * @category optimisation\n * @since 3.10.0\n */\nexport const mapBoth: {\n  /**\n   * @category optimisation\n   * @since 3.10.0\n   */\n  <E, E2, A, A2>(\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2, E2, R>\n  /**\n   * @category optimisation\n   * @since 3.10.0\n   */\n  <A, E, R, E2, A2>(\n    self: Effect.Effect<A, E, R>,\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): Effect.Effect<A2, E2, R>\n} = dual(2, <A, E, R, E2, A2>(\n  self: Effect.Effect<A, E, R>,\n  options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n): Effect.Effect<A2, E2, R> => {\n  const s: any = self\n  if (s[\"_tag\"] === \"Left\") {\n    return Either.left(options.onFailure(s.left))\n  }\n  if (s[\"_tag\"] === \"Right\") {\n    return Either.right(options.onSuccess(s.right))\n  }\n  return Effect.mapBoth(self, options)\n})\n\n/**\n * @category optimisation\n * @since 3.10.0\n */\nexport const orElse: {\n  /**\n   * @category optimisation\n   * @since 3.10.0\n   */\n  <E, A2, E2, R2>(\n    f: (e: E) => Effect.Effect<A2, E2, R2>\n  ): <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A, E2, R2 | R>\n  /**\n   * @category optimisation\n   * @since 3.10.0\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    f: (e: E) => Effect.Effect<A2, E2, R2>\n  ): Effect.Effect<A2 | A, E2, R2 | R>\n} = dual(2, <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  f: (e: E) => Effect.Effect<A2, E2, R2>\n): Effect.Effect<A2 | A, E2, R2 | R> => {\n  const s: any = self\n  if (s[\"_tag\"] === \"Left\") {\n    return f(s.left)\n  }\n  if (s[\"_tag\"] === \"Right\") {\n    return s\n  }\n  return Effect.catchAll(self, f)\n})\n\n/**\n * @since 3.10.0\n */\nexport type DecodeUnknown<Out, R> = (u: unknown, options?: AST.ParseOptions) => Effect.Effect<Out, ParseIssue, R>\n\n/**\n * @since 3.10.0\n */\nexport type DeclarationDecodeUnknown<Out, R> = (\n  u: unknown,\n  options: AST.ParseOptions,\n  ast: AST.Declaration\n) => Effect.Effect<Out, ParseIssue, R>\n\n/** @internal */\nexport const mergeInternalOptions = (\n  options: InternalOptions | undefined,\n  overrideOptions: InternalOptions | number | undefined\n): InternalOptions | undefined => {\n  if (overrideOptions === undefined || Predicate.isNumber(overrideOptions)) {\n    return options\n  }\n  if (options === undefined) {\n    return overrideOptions\n  }\n  return { ...options, ...overrideOptions }\n}\n\nconst getEither = (ast: AST.AST, isDecoding: boolean, options?: AST.ParseOptions) => {\n  const parser = goMemo(ast, isDecoding)\n  return (u: unknown, overrideOptions?: AST.ParseOptions): Either.Either<any, ParseIssue> =>\n    parser(u, mergeInternalOptions(options, overrideOptions)) as any\n}\n\nconst getSync = (ast: AST.AST, isDecoding: boolean, options?: AST.ParseOptions) => {\n  const parser = getEither(ast, isDecoding, options)\n  return (input: unknown, overrideOptions?: AST.ParseOptions) =>\n    Either.getOrThrowWith(parser(input, overrideOptions), parseError)\n}\n\nconst getOption = (ast: AST.AST, isDecoding: boolean, options?: AST.ParseOptions) => {\n  const parser = getEither(ast, isDecoding, options)\n  return (input: unknown, overrideOptions?: AST.ParseOptions): Option.Option<any> =>\n    Option.getRight(parser(input, overrideOptions))\n}\n\nconst getEffect = <R>(ast: AST.AST, isDecoding: boolean, options?: AST.ParseOptions) => {\n  const parser = goMemo(ast, isDecoding)\n  return (input: unknown, overrideOptions?: AST.ParseOptions): Effect.Effect<any, ParseIssue, R> =>\n    parser(input, { ...mergeInternalOptions(options, overrideOptions), isEffectAllowed: true })\n}\n\n/**\n * @throws `ParseError`\n * @category decoding\n * @since 3.10.0\n */\nexport const decodeUnknownSync = <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n): (u: unknown, overrideOptions?: AST.ParseOptions) => A => getSync(schema.ast, true, options)\n\n/**\n * @category decoding\n * @since 3.10.0\n */\nexport const decodeUnknownOption = <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n): (u: unknown, overrideOptions?: AST.ParseOptions) => Option.Option<A> => getOption(schema.ast, true, options)\n\n/**\n * @category decoding\n * @since 3.10.0\n */\nexport const decodeUnknownEither = <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n): (u: unknown, overrideOptions?: AST.ParseOptions) => Either.Either<A, ParseIssue> =>\n  getEither(schema.ast, true, options)\n\n/**\n * @category decoding\n * @since 3.10.0\n */\nexport const decodeUnknownPromise = <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n) => {\n  const parser = decodeUnknown(schema, options)\n  return (u: unknown, overrideOptions?: AST.ParseOptions): Promise<A> => Effect.runPromise(parser(u, overrideOptions))\n}\n\n/**\n * @category decoding\n * @since 3.10.0\n */\nexport const decodeUnknown = <A, I, R>(\n  schema: Schema.Schema<A, I, R>,\n  options?: AST.ParseOptions\n): (u: unknown, overrideOptions?: AST.ParseOptions) => Effect.Effect<A, ParseIssue, R> =>\n  getEffect(schema.ast, true, options)\n\n/**\n * @throws `ParseError`\n * @category encoding\n * @since 3.10.0\n */\nexport const encodeUnknownSync = <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n): (u: unknown, overrideOptions?: AST.ParseOptions) => I => getSync(schema.ast, false, options)\n\n/**\n * @category encoding\n * @since 3.10.0\n */\nexport const encodeUnknownOption = <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n): (u: unknown, overrideOptions?: AST.ParseOptions) => Option.Option<I> => getOption(schema.ast, false, options)\n\n/**\n * @category encoding\n * @since 3.10.0\n */\nexport const encodeUnknownEither = <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n): (u: unknown, overrideOptions?: AST.ParseOptions) => Either.Either<I, ParseIssue> =>\n  getEither(schema.ast, false, options)\n\n/**\n * @category encoding\n * @since 3.10.0\n */\nexport const encodeUnknownPromise = <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n) => {\n  const parser = encodeUnknown(schema, options)\n  return (u: unknown, overrideOptions?: AST.ParseOptions): Promise<I> => Effect.runPromise(parser(u, overrideOptions))\n}\n\n/**\n * @category encoding\n * @since 3.10.0\n */\nexport const encodeUnknown = <A, I, R>(\n  schema: Schema.Schema<A, I, R>,\n  options?: AST.ParseOptions\n): (u: unknown, overrideOptions?: AST.ParseOptions) => Effect.Effect<I, ParseIssue, R> =>\n  getEffect(schema.ast, false, options)\n\n/**\n * @category decoding\n * @since 3.10.0\n */\nexport const decodeSync: <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n) => (i: I, overrideOptions?: AST.ParseOptions) => A = decodeUnknownSync\n\n/**\n * @category decoding\n * @since 3.10.0\n */\nexport const decodeOption: <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n) => (i: I, overrideOptions?: AST.ParseOptions) => Option.Option<A> = decodeUnknownOption\n\n/**\n * @category decoding\n * @since 3.10.0\n */\nexport const decodeEither: <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n) => (i: I, overrideOptions?: AST.ParseOptions) => Either.Either<A, ParseIssue> = decodeUnknownEither\n\n/**\n * @category decoding\n * @since 3.10.0\n */\nexport const decodePromise: <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n) => (i: I, overrideOptions?: AST.ParseOptions) => Promise<A> = decodeUnknownPromise\n\n/**\n * @category decoding\n * @since 3.10.0\n */\nexport const decode: <A, I, R>(\n  schema: Schema.Schema<A, I, R>,\n  options?: AST.ParseOptions\n) => (i: I, overrideOptions?: AST.ParseOptions) => Effect.Effect<A, ParseIssue, R> = decodeUnknown\n\n/**\n * @throws `ParseError`\n * @category validation\n * @since 3.10.0\n */\nexport const validateSync = <A, I, R>(\n  schema: Schema.Schema<A, I, R>,\n  options?: AST.ParseOptions\n): (u: unknown, overrideOptions?: AST.ParseOptions) => A => getSync(AST.typeAST(schema.ast), true, options)\n\n/**\n * @category validation\n * @since 3.10.0\n */\nexport const validateOption = <A, I, R>(\n  schema: Schema.Schema<A, I, R>,\n  options?: AST.ParseOptions\n): (u: unknown, overrideOptions?: AST.ParseOptions) => Option.Option<A> =>\n  getOption(AST.typeAST(schema.ast), true, options)\n\n/**\n * @category validation\n * @since 3.10.0\n */\nexport const validateEither = <A, I, R>(\n  schema: Schema.Schema<A, I, R>,\n  options?: AST.ParseOptions\n): (u: unknown, overrideOptions?: AST.ParseOptions) => Either.Either<A, ParseIssue> =>\n  getEither(AST.typeAST(schema.ast), true, options)\n\n/**\n * @category validation\n * @since 3.10.0\n */\nexport const validatePromise = <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n) => {\n  const parser = validate(schema, options)\n  return (u: unknown, overrideOptions?: AST.ParseOptions): Promise<A> => Effect.runPromise(parser(u, overrideOptions))\n}\n\n/**\n * @category validation\n * @since 3.10.0\n */\nexport const validate = <A, I, R>(\n  schema: Schema.Schema<A, I, R>,\n  options?: AST.ParseOptions\n): (a: unknown, overrideOptions?: AST.ParseOptions) => Effect.Effect<A, ParseIssue, R> =>\n  getEffect(AST.typeAST(schema.ast), true, options)\n\n/**\n * By default the option `exact` is set to `true`.\n *\n * @category validation\n * @since 3.10.0\n */\nexport const is = <A, I, R>(schema: Schema.Schema<A, I, R>, options?: AST.ParseOptions) => {\n  const parser = goMemo(AST.typeAST(schema.ast), true)\n  return (u: unknown, overrideOptions?: AST.ParseOptions | number): u is A =>\n    Either.isRight(parser(u, { exact: true, ...mergeInternalOptions(options, overrideOptions) }) as any)\n}\n\n/**\n * By default the option `exact` is set to `true`.\n *\n * @throws `ParseError`\n * @category validation\n * @since 3.10.0\n */\nexport const asserts = <A, I, R>(schema: Schema.Schema<A, I, R>, options?: AST.ParseOptions) => {\n  const parser = goMemo(AST.typeAST(schema.ast), true)\n  return (u: unknown, overrideOptions?: AST.ParseOptions): asserts u is A => {\n    const result: Either.Either<any, ParseIssue> = parser(u, {\n      exact: true,\n      ...mergeInternalOptions(options, overrideOptions)\n    }) as any\n    if (Either.isLeft(result)) {\n      throw parseError(result.left)\n    }\n  }\n}\n\n/**\n * @category encoding\n * @since 3.10.0\n */\nexport const encodeSync: <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n) => (a: A, overrideOptions?: AST.ParseOptions) => I = encodeUnknownSync\n\n/**\n * @category encoding\n * @since 3.10.0\n */\nexport const encodeOption: <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n) => (input: A, overrideOptions?: AST.ParseOptions) => Option.Option<I> = encodeUnknownOption\n\n/**\n * @category encoding\n * @since 3.10.0\n */\nexport const encodeEither: <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n) => (a: A, overrideOptions?: AST.ParseOptions) => Either.Either<I, ParseIssue> = encodeUnknownEither\n\n/**\n * @category encoding\n * @since 3.10.0\n */\nexport const encodePromise: <A, I>(\n  schema: Schema.Schema<A, I, never>,\n  options?: AST.ParseOptions\n) => (a: A, overrideOptions?: AST.ParseOptions) => Promise<I> = encodeUnknownPromise\n\n/**\n * @category encoding\n * @since 3.10.0\n */\nexport const encode: <A, I, R>(\n  schema: Schema.Schema<A, I, R>,\n  options?: AST.ParseOptions\n) => (a: A, overrideOptions?: AST.ParseOptions) => Effect.Effect<I, ParseIssue, R> = encodeUnknown\n\ninterface InternalOptions extends AST.ParseOptions {\n  readonly isEffectAllowed?: boolean\n}\n\ninterface Parser {\n  (i: any, options?: InternalOptions): Effect.Effect<any, ParseIssue, any>\n}\n\nconst decodeMemoMap = globalValue(\n  Symbol.for(\"effect/Schema/Parser/decodeMemoMap\"),\n  () => new WeakMap<AST.AST, Parser>()\n)\nconst encodeMemoMap = globalValue(\n  Symbol.for(\"effect/Schema/Parser/encodeMemoMap\"),\n  () => new WeakMap<AST.AST, Parser>()\n)\n\nconst goMemo = (ast: AST.AST, isDecoding: boolean): Parser => {\n  const memoMap = isDecoding ? decodeMemoMap : encodeMemoMap\n  const memo = memoMap.get(ast)\n  if (memo) {\n    return memo\n  }\n  const raw = go(ast, isDecoding)\n  const parseOptionsAnnotation = AST.getParseOptionsAnnotation(ast)\n  const parserWithOptions: Parser = Option.isSome(parseOptionsAnnotation)\n    ? (i, options) => raw(i, mergeInternalOptions(options, parseOptionsAnnotation.value))\n    : raw\n  const decodingFallbackAnnotation = AST.getDecodingFallbackAnnotation(ast)\n  const parser: Parser = isDecoding && Option.isSome(decodingFallbackAnnotation)\n    ? (i, options) =>\n      handleForbidden(orElse(parserWithOptions(i, options), decodingFallbackAnnotation.value), ast, i, options)\n    : parserWithOptions\n  memoMap.set(ast, parser)\n  return parser\n}\n\nconst getConcurrency = (ast: AST.AST): Concurrency | undefined =>\n  Option.getOrUndefined(AST.getConcurrencyAnnotation(ast))\n\nconst getBatching = (ast: AST.AST): boolean | \"inherit\" | undefined =>\n  Option.getOrUndefined(AST.getBatchingAnnotation(ast))\n\nconst go = (ast: AST.AST, isDecoding: boolean): Parser => {\n  switch (ast._tag) {\n    case \"Refinement\": {\n      if (isDecoding) {\n        const from = goMemo(ast.from, true)\n        return (i, options) => {\n          options = options ?? AST.defaultParseOption\n          const allErrors = options?.errors === \"all\"\n          const result = flatMap(\n            orElse(from(i, options), (ef) => {\n              const issue = new Refinement(ast, i, \"From\", ef)\n              if (allErrors && AST.hasStableFilter(ast)) {\n                return Option.match(\n                  ast.filter(i, options, ast),\n                  {\n                    onNone: () => Either.left<ParseIssue>(issue),\n                    onSome: (ep) => Either.left(new Composite(ast, i, [issue, new Refinement(ast, i, \"Predicate\", ep)]))\n                  }\n                )\n              }\n              return Either.left(issue)\n            }),\n            (a) =>\n              Option.match(\n                ast.filter(a, options, ast),\n                {\n                  onNone: () => Either.right(a),\n                  onSome: (ep) => Either.left(new Refinement(ast, i, \"Predicate\", ep))\n                }\n              )\n          )\n          return handleForbidden(result, ast, i, options)\n        }\n      } else {\n        const from = goMemo(AST.typeAST(ast), true)\n        const to = goMemo(dropRightRefinement(ast.from), false)\n        return (i, options) => handleForbidden(flatMap(from(i, options), (a) => to(a, options)), ast, i, options)\n      }\n    }\n    case \"Transformation\": {\n      const transform = getFinalTransformation(ast.transformation, isDecoding)\n      const from = isDecoding ? goMemo(ast.from, true) : goMemo(ast.to, false)\n      const to = isDecoding ? goMemo(ast.to, true) : goMemo(ast.from, false)\n      return (i, options) =>\n        handleForbidden(\n          flatMap(\n            mapError(\n              from(i, options),\n              (e) => new Transformation(ast, i, isDecoding ? \"Encoded\" : \"Type\", e)\n            ),\n            (a) =>\n              flatMap(\n                mapError(\n                  transform(a, options ?? AST.defaultParseOption, ast, i),\n                  (e) => new Transformation(ast, i, \"Transformation\", e)\n                ),\n                (i2) =>\n                  mapError(\n                    to(i2, options),\n                    (e) => new Transformation(ast, i, isDecoding ? \"Type\" : \"Encoded\", e)\n                  )\n              )\n          ),\n          ast,\n          i,\n          options\n        )\n    }\n    case \"Declaration\": {\n      const parse = isDecoding\n        ? ast.decodeUnknown(...ast.typeParameters)\n        : ast.encodeUnknown(...ast.typeParameters)\n      return (i, options) => handleForbidden(parse(i, options ?? AST.defaultParseOption, ast), ast, i, options)\n    }\n    case \"Literal\":\n      return fromRefinement(ast, (u): u is typeof ast.literal => u === ast.literal)\n    case \"UniqueSymbol\":\n      return fromRefinement(ast, (u): u is typeof ast.symbol => u === ast.symbol)\n    case \"UndefinedKeyword\":\n      return fromRefinement(ast, Predicate.isUndefined)\n    case \"NeverKeyword\":\n      return fromRefinement(ast, Predicate.isNever)\n    case \"UnknownKeyword\":\n    case \"AnyKeyword\":\n    case \"VoidKeyword\":\n      return Either.right\n    case \"StringKeyword\":\n      return fromRefinement(ast, Predicate.isString)\n    case \"NumberKeyword\":\n      return fromRefinement(ast, Predicate.isNumber)\n    case \"BooleanKeyword\":\n      return fromRefinement(ast, Predicate.isBoolean)\n    case \"BigIntKeyword\":\n      return fromRefinement(ast, Predicate.isBigInt)\n    case \"SymbolKeyword\":\n      return fromRefinement(ast, Predicate.isSymbol)\n    case \"ObjectKeyword\":\n      return fromRefinement(ast, Predicate.isObject)\n    case \"Enums\":\n      return fromRefinement(ast, (u): u is any => ast.enums.some(([_, value]) => value === u))\n    case \"TemplateLiteral\": {\n      const regex = AST.getTemplateLiteralRegExp(ast)\n      return fromRefinement(ast, (u): u is any => Predicate.isString(u) && regex.test(u))\n    }\n    case \"TupleType\": {\n      const elements = ast.elements.map((e) => goMemo(e.type, isDecoding))\n      const rest = ast.rest.map((annotatedAST) => goMemo(annotatedAST.type, isDecoding))\n      let requiredTypes: Array<AST.Type> = ast.elements.filter((e) => !e.isOptional)\n      if (ast.rest.length > 0) {\n        requiredTypes = requiredTypes.concat(ast.rest.slice(1))\n      }\n      const requiredLen = requiredTypes.length\n      const expectedIndexes = ast.elements.length > 0 ? ast.elements.map((_, i) => i).join(\" | \") : \"never\"\n      const concurrency = getConcurrency(ast)\n      const batching = getBatching(ast)\n      return (input: unknown, options) => {\n        if (!array_.isArray(input)) {\n          return Either.left(new Type(ast, input))\n        }\n        const allErrors = options?.errors === \"all\"\n        const es: Array<[number, ParseIssue]> = []\n        let stepKey = 0\n        const output: Array<[number, any]> = []\n        // ---------------------------------------------\n        // handle missing indexes\n        // ---------------------------------------------\n        const len = input.length\n        for (let i = len; i <= requiredLen - 1; i++) {\n          const e = new Pointer(i, input, new Missing(requiredTypes[i - len]))\n          if (allErrors) {\n            es.push([stepKey++, e])\n            continue\n          } else {\n            return Either.left(new Composite(ast, input, e, output))\n          }\n        }\n\n        // ---------------------------------------------\n        // handle excess indexes\n        // ---------------------------------------------\n        if (ast.rest.length === 0) {\n          for (let i = ast.elements.length; i <= len - 1; i++) {\n            const e = new Pointer(i, input, new Unexpected(input[i], `is unexpected, expected: ${expectedIndexes}`))\n            if (allErrors) {\n              es.push([stepKey++, e])\n              continue\n            } else {\n              return Either.left(new Composite(ast, input, e, output))\n            }\n          }\n        }\n\n        let i = 0\n        type State = {\n          es: typeof es\n          output: typeof output\n        }\n        let queue:\n          | Array<(_: State) => Effect.Effect<void, ParseIssue, any>>\n          | undefined = undefined\n\n        // ---------------------------------------------\n        // handle elements\n        // ---------------------------------------------\n        for (; i < elements.length; i++) {\n          if (len < i + 1) {\n            if (ast.elements[i].isOptional) {\n              // the input element is missing\n              continue\n            }\n          } else {\n            const parser = elements[i]\n            const te = parser(input[i], options)\n            const eu = eitherOrUndefined(te)\n            if (eu) {\n              if (Either.isLeft(eu)) {\n                // the input element is present but is not valid\n                const e = new Pointer(i, input, eu.left)\n                if (allErrors) {\n                  es.push([stepKey++, e])\n                  continue\n                } else {\n                  return Either.left(new Composite(ast, input, e, sortByIndex(output)))\n                }\n              }\n              output.push([stepKey++, eu.right])\n            } else {\n              const nk = stepKey++\n              const index = i\n              if (!queue) {\n                queue = []\n              }\n              queue.push(({ es, output }: State) =>\n                Effect.flatMap(Effect.either(te), (t) => {\n                  if (Either.isLeft(t)) {\n                    // the input element is present but is not valid\n                    const e = new Pointer(index, input, t.left)\n                    if (allErrors) {\n                      es.push([nk, e])\n                      return Effect.void\n                    } else {\n                      return Either.left(new Composite(ast, input, e, sortByIndex(output)))\n                    }\n                  }\n                  output.push([nk, t.right])\n                  return Effect.void\n                })\n              )\n            }\n          }\n        }\n        // ---------------------------------------------\n        // handle rest element\n        // ---------------------------------------------\n        if (array_.isNonEmptyReadonlyArray(rest)) {\n          const [head, ...tail] = rest\n          for (; i < len - tail.length; i++) {\n            const te = head(input[i], options)\n            const eu = eitherOrUndefined(te)\n            if (eu) {\n              if (Either.isLeft(eu)) {\n                const e = new Pointer(i, input, eu.left)\n                if (allErrors) {\n                  es.push([stepKey++, e])\n                  continue\n                } else {\n                  return Either.left(new Composite(ast, input, e, sortByIndex(output)))\n                }\n              } else {\n                output.push([stepKey++, eu.right])\n              }\n            } else {\n              const nk = stepKey++\n              const index = i\n              if (!queue) {\n                queue = []\n              }\n              queue.push(\n                ({ es, output }: State) =>\n                  Effect.flatMap(Effect.either(te), (t) => {\n                    if (Either.isLeft(t)) {\n                      const e = new Pointer(index, input, t.left)\n                      if (allErrors) {\n                        es.push([nk, e])\n                        return Effect.void\n                      } else {\n                        return Either.left(new Composite(ast, input, e, sortByIndex(output)))\n                      }\n                    } else {\n                      output.push([nk, t.right])\n                      return Effect.void\n                    }\n                  })\n              )\n            }\n          }\n          // ---------------------------------------------\n          // handle post rest elements\n          // ---------------------------------------------\n          for (let j = 0; j < tail.length; j++) {\n            i += j\n            if (len < i + 1) {\n              continue\n            } else {\n              const te = tail[j](input[i], options)\n              const eu = eitherOrUndefined(te)\n              if (eu) {\n                if (Either.isLeft(eu)) {\n                  // the input element is present but is not valid\n                  const e = new Pointer(i, input, eu.left)\n                  if (allErrors) {\n                    es.push([stepKey++, e])\n                    continue\n                  } else {\n                    return Either.left(new Composite(ast, input, e, sortByIndex(output)))\n                  }\n                }\n                output.push([stepKey++, eu.right])\n              } else {\n                const nk = stepKey++\n                const index = i\n                if (!queue) {\n                  queue = []\n                }\n                queue.push(\n                  ({ es, output }: State) =>\n                    Effect.flatMap(Effect.either(te), (t) => {\n                      if (Either.isLeft(t)) {\n                        // the input element is present but is not valid\n                        const e = new Pointer(index, input, t.left)\n                        if (allErrors) {\n                          es.push([nk, e])\n                          return Effect.void\n                        } else {\n                          return Either.left(new Composite(ast, input, e, sortByIndex(output)))\n                        }\n                      }\n                      output.push([nk, t.right])\n                      return Effect.void\n                    })\n                )\n              }\n            }\n          }\n        }\n\n        // ---------------------------------------------\n        // compute result\n        // ---------------------------------------------\n        const computeResult = ({ es, output }: State) =>\n          array_.isNonEmptyArray(es) ?\n            Either.left(new Composite(ast, input, sortByIndex(es), sortByIndex(output))) :\n            Either.right(sortByIndex(output))\n        if (queue && queue.length > 0) {\n          const cqueue = queue\n          return Effect.suspend(() => {\n            const state: State = {\n              es: array_.copy(es),\n              output: array_.copy(output)\n            }\n            return Effect.flatMap(\n              Effect.forEach(cqueue, (f) => f(state), { concurrency, batching, discard: true }),\n              () => computeResult(state)\n            )\n          })\n        }\n        return computeResult({ output, es })\n      }\n    }\n    case \"TypeLiteral\": {\n      if (ast.propertySignatures.length === 0 && ast.indexSignatures.length === 0) {\n        return fromRefinement(ast, Predicate.isNotNullable)\n      }\n\n      const propertySignatures: Array<readonly [Parser, AST.PropertySignature]> = []\n      const expectedKeysMap: Record<PropertyKey, null> = {}\n      const expectedKeys: Array<PropertyKey> = []\n      for (const ps of ast.propertySignatures) {\n        propertySignatures.push([goMemo(ps.type, isDecoding), ps])\n        expectedKeysMap[ps.name] = null\n        expectedKeys.push(ps.name)\n      }\n\n      const indexSignatures = ast.indexSignatures.map((is) =>\n        [\n          goMemo(is.parameter, isDecoding),\n          goMemo(is.type, isDecoding),\n          is.parameter\n        ] as const\n      )\n      const expectedAST = AST.Union.make(\n        ast.indexSignatures.map((is): AST.AST => is.parameter).concat(\n          expectedKeys.map((key) => Predicate.isSymbol(key) ? new AST.UniqueSymbol(key) : new AST.Literal(key))\n        )\n      )\n      const expected = goMemo(expectedAST, isDecoding)\n      const concurrency = getConcurrency(ast)\n      const batching = getBatching(ast)\n      return (input: unknown, options) => {\n        if (!Predicate.isRecord(input)) {\n          return Either.left(new Type(ast, input))\n        }\n        const allErrors = options?.errors === \"all\"\n        const es: Array<[number, ParseIssue]> = []\n        let stepKey = 0\n\n        // ---------------------------------------------\n        // handle excess properties\n        // ---------------------------------------------\n        const onExcessPropertyError = options?.onExcessProperty === \"error\"\n        const onExcessPropertyPreserve = options?.onExcessProperty === \"preserve\"\n        const output: Record<PropertyKey, unknown> = {}\n        let inputKeys: Array<PropertyKey> | undefined\n        if (onExcessPropertyError || onExcessPropertyPreserve) {\n          inputKeys = util_.ownKeys(input)\n          for (const key of inputKeys) {\n            const eu = eitherOrUndefined(expected(key, options))!\n            if (Either.isLeft(eu)) {\n              // key is unexpected\n              if (onExcessPropertyError) {\n                const e = new Pointer(\n                  key,\n                  input,\n                  new Unexpected(input[key], `is unexpected, expected: ${String(expectedAST)}`)\n                )\n                if (allErrors) {\n                  es.push([stepKey++, e])\n                  continue\n                } else {\n                  return Either.left(new Composite(ast, input, e, output))\n                }\n              } else {\n                // preserve key\n                output[key] = input[key]\n              }\n            }\n          }\n        }\n\n        // ---------------------------------------------\n        // handle property signatures\n        // ---------------------------------------------\n        type State = {\n          es: typeof es\n          output: typeof output\n        }\n        let queue:\n          | Array<(state: State) => Effect.Effect<void, ParseIssue, any>>\n          | undefined = undefined\n\n        const isExact = options?.exact === true\n        for (let i = 0; i < propertySignatures.length; i++) {\n          const ps = propertySignatures[i][1]\n          const name = ps.name\n          const hasKey = Object.prototype.hasOwnProperty.call(input, name)\n          if (!hasKey) {\n            if (ps.isOptional) {\n              continue\n            } else if (isExact) {\n              const e = new Pointer(name, input, new Missing(ps))\n              if (allErrors) {\n                es.push([stepKey++, e])\n                continue\n              } else {\n                return Either.left(new Composite(ast, input, e, output))\n              }\n            }\n          }\n          const parser = propertySignatures[i][0]\n          const te = parser(input[name], options)\n          const eu = eitherOrUndefined(te)\n          if (eu) {\n            if (Either.isLeft(eu)) {\n              const e = new Pointer(name, input, hasKey ? eu.left : new Missing(ps))\n              if (allErrors) {\n                es.push([stepKey++, e])\n                continue\n              } else {\n                return Either.left(new Composite(ast, input, e, output))\n              }\n            }\n            output[name] = eu.right\n          } else {\n            const nk = stepKey++\n            const index = name\n            if (!queue) {\n              queue = []\n            }\n            queue.push(\n              ({ es, output }: State) =>\n                Effect.flatMap(Effect.either(te), (t) => {\n                  if (Either.isLeft(t)) {\n                    const e = new Pointer(index, input, hasKey ? t.left : new Missing(ps))\n                    if (allErrors) {\n                      es.push([nk, e])\n                      return Effect.void\n                    } else {\n                      return Either.left(new Composite(ast, input, e, output))\n                    }\n                  }\n                  output[index] = t.right\n                  return Effect.void\n                })\n            )\n          }\n        }\n\n        // ---------------------------------------------\n        // handle index signatures\n        // ---------------------------------------------\n        for (let i = 0; i < indexSignatures.length; i++) {\n          const indexSignature = indexSignatures[i]\n          const parameter = indexSignature[0]\n          const type = indexSignature[1]\n          const keys = util_.getKeysForIndexSignature(input, indexSignature[2])\n          for (const key of keys) {\n            // ---------------------------------------------\n            // handle keys\n            // ---------------------------------------------\n            const keu = eitherOrUndefined(parameter(key, options))\n            if (keu && Either.isRight(keu)) {\n              // ---------------------------------------------\n              // handle values\n              // ---------------------------------------------\n              const vpr = type(input[key], options)\n              const veu = eitherOrUndefined(vpr)\n              if (veu) {\n                if (Either.isLeft(veu)) {\n                  const e = new Pointer(key, input, veu.left)\n                  if (allErrors) {\n                    es.push([stepKey++, e])\n                    continue\n                  } else {\n                    return Either.left(new Composite(ast, input, e, output))\n                  }\n                } else {\n                  if (!Object.prototype.hasOwnProperty.call(expectedKeysMap, key)) {\n                    output[key] = veu.right\n                  }\n                }\n              } else {\n                const nk = stepKey++\n                const index = key\n                if (!queue) {\n                  queue = []\n                }\n                queue.push(\n                  ({ es, output }: State) =>\n                    Effect.flatMap(\n                      Effect.either(vpr),\n                      (tv) => {\n                        if (Either.isLeft(tv)) {\n                          const e = new Pointer(index, input, tv.left)\n                          if (allErrors) {\n                            es.push([nk, e])\n                            return Effect.void\n                          } else {\n                            return Either.left(new Composite(ast, input, e, output))\n                          }\n                        } else {\n                          if (!Object.prototype.hasOwnProperty.call(expectedKeysMap, key)) {\n                            output[key] = tv.right\n                          }\n                          return Effect.void\n                        }\n                      }\n                    )\n                )\n              }\n            }\n          }\n        }\n        // ---------------------------------------------\n        // compute result\n        // ---------------------------------------------\n        const computeResult = ({ es, output }: State) => {\n          if (array_.isNonEmptyArray(es)) {\n            return Either.left(new Composite(ast, input, sortByIndex(es), output))\n          }\n          if (options?.propertyOrder === \"original\") {\n            // preserve input keys order\n            const keys = inputKeys || util_.ownKeys(input)\n            for (const name of expectedKeys) {\n              if (keys.indexOf(name) === -1) {\n                keys.push(name)\n              }\n            }\n            const out: any = {}\n            for (const key of keys) {\n              if (Object.prototype.hasOwnProperty.call(output, key)) {\n                out[key] = output[key]\n              }\n            }\n            return Either.right(out)\n          }\n          return Either.right(output)\n        }\n        if (queue && queue.length > 0) {\n          const cqueue = queue\n          return Effect.suspend(() => {\n            const state: State = {\n              es: array_.copy(es),\n              output: Object.assign({}, output)\n            }\n            return Effect.flatMap(\n              Effect.forEach(cqueue, (f) => f(state), { concurrency, batching, discard: true }),\n              () => computeResult(state)\n            )\n          })\n        }\n        return computeResult({ es, output })\n      }\n    }\n    case \"Union\": {\n      const searchTree = getSearchTree(ast.types, isDecoding)\n      const ownKeys = util_.ownKeys(searchTree.keys)\n      const len = ownKeys.length\n      const map = new Map<any, Parser>()\n      for (let i = 0; i < ast.types.length; i++) {\n        map.set(ast.types[i], goMemo(ast.types[i], isDecoding))\n      }\n      const concurrency = getConcurrency(ast) ?? 1\n      const batching = getBatching(ast)\n      return (input, options) => {\n        const es: Array<[number, ParseIssue]> = []\n        let stepKey = 0\n        let candidates: Array<AST.AST> = []\n        if (len > 0) {\n          if (Predicate.isRecordOrArray(input)) {\n            for (let i = 0; i < len; i++) {\n              const name = ownKeys[i]\n              const buckets = searchTree.keys[name].buckets\n              // for each property that should contain a literal, check if the input contains that property\n              if (Object.prototype.hasOwnProperty.call(input, name)) {\n                const literal = String(input[name])\n                // check that the value obtained from the input for the property corresponds to an existing bucket\n                if (Object.prototype.hasOwnProperty.call(buckets, literal)) {\n                  // retrive the minimal set of candidates for decoding\n                  candidates = candidates.concat(buckets[literal])\n                } else {\n                  const literals = AST.Union.make(searchTree.keys[name].literals)\n                  es.push([\n                    stepKey++,\n                    new Composite(\n                      new AST.TypeLiteral([\n                        new AST.PropertySignature(name, literals, false, true)\n                      ], []),\n                      input,\n                      new Pointer(name, input, new Type(literals, input[name]))\n                    )\n                  ])\n                }\n              } else {\n                const literals = AST.Union.make(searchTree.keys[name].literals)\n                const fakeps = new AST.PropertySignature(name, literals, false, true)\n                es.push([\n                  stepKey++,\n                  new Composite(\n                    new AST.TypeLiteral([fakeps], []),\n                    input,\n                    new Pointer(name, input, new Missing(fakeps))\n                  )\n                ])\n              }\n            }\n          } else {\n            es.push([stepKey++, new Type(ast, input)])\n          }\n        }\n        if (searchTree.otherwise.length > 0) {\n          candidates = candidates.concat(searchTree.otherwise)\n        }\n\n        let queue:\n          | Array<(state: State) => Effect.Effect<unknown, ParseIssue, any>>\n          | undefined = undefined\n\n        type State = {\n          finalResult?: any\n          es: typeof es\n        }\n\n        for (let i = 0; i < candidates.length; i++) {\n          const candidate = candidates[i]\n          const pr = map.get(candidate)!(input, options)\n          // the members of a union are ordered based on which one should be decoded first,\n          // therefore if one member has added a task, all subsequent members must\n          // also add a task to the queue even if they are synchronous\n          const eu = !queue || queue.length === 0 ? eitherOrUndefined(pr) : undefined\n          if (eu) {\n            if (Either.isRight(eu)) {\n              return eu\n            } else {\n              es.push([stepKey++, eu.left])\n            }\n          } else {\n            const nk = stepKey++\n            if (!queue) {\n              queue = []\n            }\n            queue.push(\n              (state) =>\n                Effect.suspend(() => {\n                  if (\"finalResult\" in state) {\n                    return Effect.void\n                  } else {\n                    return Effect.flatMap(Effect.either(pr), (t) => {\n                      if (Either.isRight(t)) {\n                        state.finalResult = t\n                      } else {\n                        state.es.push([nk, t.left])\n                      }\n                      return Effect.void\n                    })\n                  }\n                })\n            )\n          }\n        }\n\n        // ---------------------------------------------\n        // compute result\n        // ---------------------------------------------\n        const computeResult = (es: State[\"es\"]) =>\n          array_.isNonEmptyArray(es) ?\n            es.length === 1 && es[0][1]._tag === \"Type\" ?\n              Either.left(es[0][1]) :\n              Either.left(new Composite(ast, input, sortByIndex(es))) :\n            // this should never happen\n            Either.left(new Type(ast, input))\n\n        if (queue && queue.length > 0) {\n          const cqueue = queue\n          return Effect.suspend(() => {\n            const state: State = { es: array_.copy(es) }\n            return Effect.flatMap(\n              Effect.forEach(cqueue, (f) => f(state), { concurrency, batching, discard: true }),\n              () => {\n                if (\"finalResult\" in state) {\n                  return state.finalResult\n                }\n                return computeResult(state.es)\n              }\n            )\n          })\n        }\n        return computeResult(es)\n      }\n    }\n    case \"Suspend\": {\n      const get = util_.memoizeThunk(() => goMemo(AST.annotations(ast.f(), ast.annotations), isDecoding))\n      return (a, options) => get()(a, options)\n    }\n  }\n}\n\nconst fromRefinement = <A>(ast: AST.AST, refinement: (u: unknown) => u is A): Parser => (u) =>\n  refinement(u) ? Either.right(u) : Either.left(new Type(ast, u))\n\n/** @internal */\nexport const getLiterals = (\n  ast: AST.AST,\n  isDecoding: boolean\n): ReadonlyArray<[PropertyKey, AST.Literal]> => {\n  switch (ast._tag) {\n    case \"Declaration\": {\n      const annotation = AST.getSurrogateAnnotation(ast)\n      if (Option.isSome(annotation)) {\n        return getLiterals(annotation.value, isDecoding)\n      }\n      break\n    }\n    case \"TypeLiteral\": {\n      const out: Array<[PropertyKey, AST.Literal]> = []\n      for (let i = 0; i < ast.propertySignatures.length; i++) {\n        const propertySignature = ast.propertySignatures[i]\n        const type = isDecoding ? AST.encodedAST(propertySignature.type) : AST.typeAST(propertySignature.type)\n        if (AST.isLiteral(type) && !propertySignature.isOptional) {\n          out.push([propertySignature.name, type])\n        }\n      }\n      return out\n    }\n    case \"TupleType\": {\n      const out: Array<[PropertyKey, AST.Literal]> = []\n      for (let i = 0; i < ast.elements.length; i++) {\n        const element = ast.elements[i]\n        const type = isDecoding ? AST.encodedAST(element.type) : AST.typeAST(element.type)\n        if (AST.isLiteral(type) && !element.isOptional) {\n          out.push([i, type])\n        }\n      }\n      return out\n    }\n    case \"Refinement\":\n      return getLiterals(ast.from, isDecoding)\n    case \"Suspend\":\n      return getLiterals(ast.f(), isDecoding)\n    case \"Transformation\":\n      return getLiterals(isDecoding ? ast.from : ast.to, isDecoding)\n  }\n  return []\n}\n\n/**\n * The purpose of the algorithm is to narrow down the pool of possible candidates for decoding as much as possible.\n *\n * This function separates the schemas into two groups, `keys` and `otherwise`:\n *\n * - `keys`: the schema has at least one property with a literal value\n * - `otherwise`: the schema has no properties with a literal value\n *\n * If a schema has at least one property with a literal value, so it ends up in `keys`, first a namespace is created for\n * the name of the property containing the literal, and then within this namespace a \"bucket\" is created for the literal\n * value in which to store all the schemas that have the same property and literal value.\n *\n * @internal\n */\nexport const getSearchTree = (\n  members: ReadonlyArray<AST.AST>,\n  isDecoding: boolean\n): {\n  keys: {\n    readonly [key: PropertyKey]: {\n      buckets: { [literal: string]: ReadonlyArray<AST.AST> }\n      literals: ReadonlyArray<AST.Literal> // this is for error messages\n    }\n  }\n  otherwise: ReadonlyArray<AST.AST>\n} => {\n  const keys: {\n    [key: PropertyKey]: {\n      buckets: { [literal: string]: Array<AST.AST> }\n      literals: Array<AST.Literal>\n    }\n  } = {}\n  const otherwise: Array<AST.AST> = []\n  for (let i = 0; i < members.length; i++) {\n    const member = members[i]\n    const tags = getLiterals(member, isDecoding)\n    if (tags.length > 0) {\n      for (let j = 0; j < tags.length; j++) {\n        const [key, literal] = tags[j]\n        const hash = String(literal.literal)\n        keys[key] = keys[key] || { buckets: {}, literals: [] }\n        const buckets = keys[key].buckets\n        if (Object.prototype.hasOwnProperty.call(buckets, hash)) {\n          if (j < tags.length - 1) {\n            continue\n          }\n          buckets[hash].push(member)\n          keys[key].literals.push(literal)\n        } else {\n          buckets[hash] = [member]\n          keys[key].literals.push(literal)\n          break\n        }\n      }\n    } else {\n      otherwise.push(member)\n    }\n  }\n  return { keys, otherwise }\n}\n\nconst dropRightRefinement = (ast: AST.AST): AST.AST => AST.isRefinement(ast) ? dropRightRefinement(ast.from) : ast\n\nconst handleForbidden = <A, R>(\n  effect: Effect.Effect<A, ParseIssue, R>,\n  ast: AST.AST,\n  actual: unknown,\n  options: InternalOptions | undefined\n): Effect.Effect<A, ParseIssue, R> => {\n  const eu = eitherOrUndefined(effect)\n  if (eu) {\n    return eu\n  }\n  if (options?.isEffectAllowed === true) {\n    return effect\n  }\n  try {\n    return Effect.runSync(Effect.either(effect as Effect.Effect<A, ParseIssue>))\n  } catch (e) {\n    return Either.left(\n      new Forbidden(\n        ast,\n        actual,\n        \"cannot be be resolved synchronously, this is caused by using runSync on an effect that performs async work\"\n      )\n    )\n  }\n}\n\nconst compare = ([a]: [number, ...Array<unknown>], [b]: [number, ...Array<unknown>]) => a > b ? 1 : a < b ? -1 : 0\n\nfunction sortByIndex<T>(\n  es: array_.NonEmptyArray<[number, T]>\n): array_.NonEmptyArray<T>\nfunction sortByIndex<T>(es: Array<[number, T]>): Array<T>\nfunction sortByIndex(es: Array<[number, any]>) {\n  return es.sort(compare).map((t) => t[1])\n}\n\n// -------------------------------------------------------------------------------------\n// transformations interpreter\n// -------------------------------------------------------------------------------------\n\n/** @internal */\nexport const getFinalTransformation = (\n  transformation: AST.TransformationKind,\n  isDecoding: boolean\n): (\n  fromA: any,\n  options: AST.ParseOptions,\n  self: AST.Transformation,\n  fromI: any\n) => Effect.Effect<any, ParseIssue, any> => {\n  switch (transformation._tag) {\n    case \"FinalTransformation\":\n      return isDecoding ? transformation.decode : transformation.encode\n    case \"ComposeTransformation\":\n      return Either.right\n    case \"TypeLiteralTransformation\":\n      return (input) => {\n        let out: Effect.Effect<any, ParseIssue, any> = Either.right(input)\n\n        // ---------------------------------------------\n        // handle property signature transformations\n        // ---------------------------------------------\n        for (const pst of transformation.propertySignatureTransformations) {\n          const [from, to] = isDecoding ?\n            [pst.from, pst.to] :\n            [pst.to, pst.from]\n          const transformation = isDecoding ? pst.decode : pst.encode\n          const f = (input: any) => {\n            const o = transformation(\n              Object.prototype.hasOwnProperty.call(input, from) ?\n                Option.some(input[from]) :\n                Option.none()\n            )\n            delete input[from]\n            if (Option.isSome(o)) {\n              input[to] = o.value\n            }\n            return input\n          }\n          out = map(out, f)\n        }\n        return out\n      }\n  }\n}\n\n// ----------------\n// Formatters\n// ----------------\n\ninterface Forest<A> extends ReadonlyArray<Tree<A>> {}\n\ninterface Tree<A> {\n  readonly value: A\n  readonly forest: Forest<A>\n}\n\nconst makeTree = <A>(value: A, forest: Forest<A> = []): Tree<A> => ({\n  value,\n  forest\n})\n\n/**\n * @category formatting\n * @since 3.10.0\n */\nexport interface ParseResultFormatter<A> {\n  readonly formatIssue: (issue: ParseIssue) => Effect.Effect<A>\n  readonly formatIssueSync: (issue: ParseIssue) => A\n  readonly formatError: (error: ParseError) => Effect.Effect<A>\n  readonly formatErrorSync: (error: ParseError) => A\n}\n\n/**\n * @category formatting\n * @since 3.10.0\n */\nexport const TreeFormatter: ParseResultFormatter<string> = {\n  formatIssue: (issue) => Effect.map(formatTree(issue), drawTree),\n  formatIssueSync: (issue) => Effect.runSync(TreeFormatter.formatIssue(issue)),\n  formatError: (error) => TreeFormatter.formatIssue(error.issue),\n  formatErrorSync: (error) => TreeFormatter.formatIssueSync(error.issue)\n}\n\nconst drawTree = (tree: Tree<string>): string => tree.value + draw(\"\\n\", tree.forest)\n\nconst draw = (indentation: string, forest: Forest<string>): string => {\n  let r = \"\"\n  const len = forest.length\n  let tree: Tree<string>\n  for (let i = 0; i < len; i++) {\n    tree = forest[i]\n    const isLast = i === len - 1\n    r += indentation + (isLast ? \"└\" : \"├\") + \"─ \" + tree.value\n    r += draw(indentation + (len > 1 && !isLast ? \"│  \" : \"   \"), tree.forest)\n  }\n  return r\n}\n\nconst formatTransformationKind = (kind: Transformation[\"kind\"]): string => {\n  switch (kind) {\n    case \"Encoded\":\n      return \"Encoded side transformation failure\"\n    case \"Transformation\":\n      return \"Transformation process failure\"\n    case \"Type\":\n      return \"Type side transformation failure\"\n  }\n}\n\nconst formatRefinementKind = (kind: Refinement[\"kind\"]): string => {\n  switch (kind) {\n    case \"From\":\n      return \"From side refinement failure\"\n    case \"Predicate\":\n      return \"Predicate refinement failure\"\n  }\n}\n\nconst getAnnotated = (issue: ParseIssue): Option.Option<AST.Annotated> =>\n  \"ast\" in issue ? Option.some(issue.ast) : Option.none()\n\ninterface CurrentMessage {\n  readonly message: string\n  readonly override: boolean\n}\n\nconst getCurrentMessage = (\n  issue: ParseIssue\n): Effect.Effect<CurrentMessage, cause_.NoSuchElementException> =>\n  getAnnotated(issue).pipe(\n    Option.flatMap(AST.getMessageAnnotation),\n    Effect.flatMap((annotation) => {\n      const out = annotation(issue)\n      return Predicate.isString(out)\n        ? Effect.succeed({ message: out, override: false })\n        : Effect.isEffect(out)\n        ? Effect.map(out, (message) => ({ message, override: false }))\n        : Predicate.isString(out.message)\n        ? Effect.succeed({ message: out.message, override: out.override })\n        : Effect.map(out.message, (message) => ({ message, override: out.override }))\n    })\n  )\n\nconst createParseIssueGuard =\n  <T extends ParseIssue[\"_tag\"]>(tag: T) => (issue: ParseIssue): issue is Extract<ParseIssue, { _tag: T }> =>\n    issue._tag === tag\n\n/**\n * Returns `true` if the value is a `Composite`.\n *\n * @category guards\n * @since 3.10.0\n */\nexport const isComposite = createParseIssueGuard(\"Composite\")\n\nconst isRefinement = createParseIssueGuard(\"Refinement\")\nconst isTransformation = createParseIssueGuard(\"Transformation\")\n\nconst getMessage: (\n  issue: ParseIssue\n) => Effect.Effect<string, cause_.NoSuchElementException> = (issue: ParseIssue) =>\n  getCurrentMessage(issue).pipe(\n    Effect.flatMap((currentMessage) => {\n      const useInnerMessage = !currentMessage.override && (\n        isComposite(issue) ||\n        (isRefinement(issue) && issue.kind === \"From\") ||\n        (isTransformation(issue) && issue.kind !== \"Transformation\")\n      )\n      return useInnerMessage\n        ? isTransformation(issue) || isRefinement(issue) ? getMessage(issue.issue) : Option.none()\n        : Effect.succeed(currentMessage.message)\n    })\n  )\n\nconst getParseIssueTitleAnnotation = (issue: ParseIssue): Option.Option<string> =>\n  getAnnotated(issue).pipe(\n    Option.flatMap(AST.getParseIssueTitleAnnotation),\n    Option.filterMap(\n      (annotation) => Option.fromNullable(annotation(issue))\n    )\n  )\n\nconst formatTypeMessage = (e: Type): Effect.Effect<string> =>\n  getMessage(e).pipe(\n    Effect.orElse(() => getParseIssueTitleAnnotation(e)),\n    Effect.catchAll(() =>\n      Effect.succeed(e.message ?? `Expected ${String(e.ast)}, actual ${util_.formatUnknown(e.actual)}`)\n    )\n  )\n\nconst getParseIssueTitle = (\n  issue: Forbidden | Transformation | Refinement | Composite\n): string => Option.getOrElse(getParseIssueTitleAnnotation(issue), () => String(issue.ast))\n\nconst formatForbiddenMessage = (e: Forbidden): string => e.message ?? \"is forbidden\"\n\nconst formatUnexpectedMessage = (e: Unexpected): string => e.message ?? \"is unexpected\"\n\nconst formatMissingMessage = (e: Missing): Effect.Effect<string> =>\n  AST.getMissingMessageAnnotation(e.ast).pipe(\n    Effect.flatMap((annotation) => {\n      const out = annotation()\n      return Predicate.isString(out) ? Effect.succeed(out) : out\n    }),\n    Effect.catchAll(() => Effect.succeed(e.message ?? \"is missing\"))\n  )\n\nconst getTree = (issue: ParseIssue, onFailure: () => Effect.Effect<Tree<string>>) =>\n  Effect.matchEffect(getMessage(issue), {\n    onFailure,\n    onSuccess: (message) => Effect.succeed(makeTree(message))\n  })\n\nconst formatTree = (\n  e: ParseIssue | Pointer\n): Effect.Effect<Tree<string>> => {\n  switch (e._tag) {\n    case \"Type\":\n      return Effect.map(formatTypeMessage(e), makeTree)\n    case \"Forbidden\":\n      return Effect.succeed(makeTree(getParseIssueTitle(e), [makeTree(formatForbiddenMessage(e))]))\n    case \"Unexpected\":\n      return Effect.succeed(makeTree(formatUnexpectedMessage(e)))\n    case \"Missing\":\n      return Effect.map(formatMissingMessage(e), makeTree)\n    case \"Transformation\":\n      return getTree(e, () =>\n        Effect.map(\n          formatTree(e.issue),\n          (tree) => makeTree(getParseIssueTitle(e), [makeTree(formatTransformationKind(e.kind), [tree])])\n        ))\n    case \"Refinement\":\n      return getTree(\n        e,\n        () =>\n          Effect.map(\n            formatTree(e.issue),\n            (tree) => makeTree(getParseIssueTitle(e), [makeTree(formatRefinementKind(e.kind), [tree])])\n          )\n      )\n    case \"Pointer\":\n      return Effect.map(formatTree(e.issue), (tree) => makeTree(util_.formatPath(e.path), [tree]))\n    case \"Composite\": {\n      const parseIssueTitle = getParseIssueTitle(e)\n      return getTree(\n        e,\n        () =>\n          util_.isNonEmpty(e.issues)\n            ? Effect.map(Effect.forEach(e.issues, formatTree), (forest) => makeTree(parseIssueTitle, forest))\n            : Effect.map(formatTree(e.issues), (tree) => makeTree(parseIssueTitle, [tree]))\n      )\n    }\n  }\n}\n\n/**\n * @category model\n * @since 3.10.0\n */\nexport interface ArrayFormatterIssue {\n  readonly _tag: ParseIssue[\"_tag\"]\n  readonly path: ReadonlyArray<PropertyKey>\n  readonly message: string\n}\n\n/**\n * @category formatting\n * @since 3.10.0\n */\nexport const ArrayFormatter: ParseResultFormatter<Array<ArrayFormatterIssue>> = {\n  formatIssue: (issue) => formatArray(issue),\n  formatIssueSync: (issue) => Effect.runSync(ArrayFormatter.formatIssue(issue)),\n  formatError: (error) => ArrayFormatter.formatIssue(error.issue),\n  formatErrorSync: (error) => ArrayFormatter.formatIssueSync(error.issue)\n}\n\nconst succeedArrayFormatterIssue = (issue: ArrayFormatterIssue) => Effect.succeed([issue])\n\nconst getArray = (\n  issue: ParseIssue,\n  path: ReadonlyArray<PropertyKey>,\n  onFailure: () => Effect.Effect<Array<ArrayFormatterIssue>>\n) =>\n  Effect.matchEffect(getMessage(issue), {\n    onFailure,\n    onSuccess: (message) => succeedArrayFormatterIssue({ _tag: issue._tag, path, message })\n  })\n\nconst formatArray = (\n  e: ParseIssue | Pointer,\n  path: ReadonlyArray<PropertyKey> = []\n): Effect.Effect<Array<ArrayFormatterIssue>> => {\n  const _tag = e._tag\n  switch (_tag) {\n    case \"Type\":\n      return Effect.map(formatTypeMessage(e), (message) => [{ _tag, path, message }])\n    case \"Forbidden\":\n      return succeedArrayFormatterIssue({ _tag, path, message: formatForbiddenMessage(e) })\n    case \"Unexpected\":\n      return succeedArrayFormatterIssue({ _tag, path, message: formatUnexpectedMessage(e) })\n    case \"Missing\":\n      return Effect.map(formatMissingMessage(e), (message) => [{ _tag, path, message }])\n    case \"Pointer\":\n      return formatArray(e.issue, path.concat(e.path))\n    case \"Composite\":\n      return getArray(e, path, () =>\n        util_.isNonEmpty(e.issues)\n          ? Effect.map(Effect.forEach(e.issues, (issue) => formatArray(issue, path)), array_.flatten)\n          : formatArray(e.issues, path))\n    case \"Refinement\":\n    case \"Transformation\":\n      return getArray(e, path, () => formatArray(e.issue, path))\n  }\n}\n"],"names":["array_","TaggedError","Effect","Either","dual","globalValue","Inspectable","util_","Option","Predicate","AST","Pointer","path","actual","issue","_tag","constructor","Unexpected","message","Missing","ast","undefined","Composite","issues","output","Refinement","kind","Transformation","Type","Forbidden","ParseErrorTypeId","Symbol","for","isParseError","u","hasProperty","ParseError","toString","TreeFormatter","formatIssueSync","toJSON","_id","NodeInspectSymbol","parseError","succeed","right","fail","left","_try","try","fromOption","flatMap","self","f","s","map","mapError","eitherOrUndefined","mapBoth","options","onFailure","onSuccess","orElse","catchAll","mergeInternalOptions","overrideOptions","isNumber","getEither","isDecoding","parser","goMemo","getSync","input","getOrThrowWith","getOption","getRight","getEffect","isEffectAllowed","decodeUnknownSync","schema","decodeUnknownOption","decodeUnknownEither","decodeUnknownPromise","decodeUnknown","runPromise","encodeUnknownSync","encodeUnknownOption","encodeUnknownEither","encodeUnknownPromise","encodeUnknown","decodeSync","decodeOption","decodeEither","decodePromise","decode","validateSync","typeAST","validateOption","validateEither","validatePromise","validate","is","isRight","exact","asserts","result","isLeft","encodeSync","encodeOption","encodeEither","encodePromise","encode","decodeMemoMap","WeakMap","encodeMemoMap","memoMap","memo","get","raw","go","parseOptionsAnnotation","getParseOptionsAnnotation","parserWithOptions","isSome","i","value","decodingFallbackAnnotation","getDecodingFallbackAnnotation","handleForbidden","set","getConcurrency","getOrUndefined","getConcurrencyAnnotation","getBatching","getBatchingAnnotation","from","defaultParseOption","allErrors","errors","ef","hasStableFilter","match","filter","onNone","onSome","ep","a","to","dropRightRefinement","transform","getFinalTransformation","transformation","e","i2","parse","typeParameters","fromRefinement","literal","symbol","isUndefined","isNever","isString","isBoolean","isBigInt","isSymbol","isObject","enums","some","_","regex","getTemplateLiteralRegExp","test","elements","type","rest","annotatedAST","requiredTypes","isOptional","length","concat","slice","requiredLen","expectedIndexes","join","concurrency","batching","isArray","es","stepKey","len","push","queue","te","eu","sortByIndex","nk","index","either","t","void","isNonEmptyReadonlyArray","head","tail","j","computeResult","isNonEmptyArray","cqueue","suspend","state","copy","forEach","discard","propertySignatures","indexSignatures","isNotNullable","expectedKeysMap","expectedKeys","ps","name","parameter","expectedAST","Union","make","key","UniqueSymbol","Literal","expected","isRecord","onExcessPropertyError","onExcessProperty","onExcessPropertyPreserve","inputKeys","ownKeys","String","isExact","hasKey","Object","prototype","hasOwnProperty","call","indexSignature","keys","getKeysForIndexSignature","keu","vpr","veu","tv","propertyOrder","indexOf","out","assign","searchTree","getSearchTree","types","Map","candidates","isRecordOrArray","buckets","literals","TypeLiteral","PropertySignature","fakeps","otherwise","candidate","pr","finalResult","memoizeThunk","annotations","refinement","getLiterals","annotation","getSurrogateAnnotation","propertySignature","encodedAST","isLiteral","element","members","member","tags","hash","isRefinement","effect","runSync","compare","b","sort","pst","propertySignatureTransformations","o","none","makeTree","forest","formatIssue","formatTree","drawTree","formatError","error","formatErrorSync","tree","draw","indentation","r","isLast","formatTransformationKind","formatRefinementKind","getAnnotated","getCurrentMessage","pipe","getMessageAnnotation","override","isEffect","createParseIssueGuard","tag","isComposite","isTransformation","getMessage","currentMessage","useInnerMessage","getParseIssueTitleAnnotation","filterMap","fromNullable","formatTypeMessage","formatUnknown","getParseIssueTitle","getOrElse","formatForbiddenMessage","formatUnexpectedMessage","formatMissingMessage","getMissingMessageAnnotation","getTree","matchEffect","formatPath","parseIssueTitle","isNonEmpty","ArrayFormatter","formatArray","succeedArrayFormatterIssue","getArray","flatten"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 14045, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 14051, "column": 0}, "map": {"version":3,"file":"ConfigError.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/ConfigError.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Cause from \"./Cause.js\"\nimport * as internal from \"./internal/configError.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const ConfigErrorTypeId: unique symbol = internal.ConfigErrorTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type ConfigErrorTypeId = typeof ConfigErrorTypeId\n\n/**\n * The possible ways that loading configuration data may fail.\n *\n * @since 2.0.0\n * @category models\n */\nexport type ConfigError =\n  | And\n  | Or\n  | InvalidData\n  | MissingData\n  | SourceUnavailable\n  | Unsupported\n\n/**\n * @since 2.0.0\n */\nexport declare namespace ConfigError {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Proto {\n    readonly _tag: \"ConfigError\"\n    readonly [ConfigErrorTypeId]: ConfigErrorTypeId\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export type Reducer<C, Z> = ConfigErrorReducer<C, Z>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface ConfigErrorReducer<in C, in out Z> {\n  andCase(context: C, left: Z, right: Z): Z\n  orCase(context: C, left: Z, right: Z): Z\n  invalidDataCase(context: C, path: Array<string>, message: string): Z\n  missingDataCase(context: C, path: Array<string>, message: string): Z\n  sourceUnavailableCase(\n    context: C,\n    path: Array<string>,\n    message: string,\n    cause: Cause.Cause<unknown>\n  ): Z\n  unsupportedCase(context: C, path: Array<string>, message: string): Z\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface And extends ConfigError.Proto {\n  readonly _op: \"And\"\n  readonly left: ConfigError\n  readonly right: ConfigError\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Or extends ConfigError.Proto {\n  readonly _op: \"Or\"\n  readonly left: ConfigError\n  readonly right: ConfigError\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface InvalidData extends ConfigError.Proto {\n  readonly _op: \"InvalidData\"\n  readonly path: Array<string>\n  readonly message: string\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface MissingData extends ConfigError.Proto {\n  readonly _op: \"MissingData\"\n  readonly path: Array<string>\n  readonly message: string\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface SourceUnavailable extends ConfigError.Proto {\n  readonly _op: \"SourceUnavailable\"\n  readonly path: Array<string>\n  readonly message: string\n  readonly cause: Cause.Cause<unknown>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Unsupported extends ConfigError.Proto {\n  readonly _op: \"Unsupported\"\n  readonly path: Array<string>\n  readonly message: string\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Options {\n  readonly pathDelim: string\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const And: (self: ConfigError, that: ConfigError) => ConfigError = internal.And\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Or: (self: ConfigError, that: ConfigError) => ConfigError = internal.Or\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const MissingData: (path: Array<string>, message: string, options?: Options) => ConfigError =\n  internal.MissingData\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const InvalidData: (path: Array<string>, message: string, options?: Options) => ConfigError =\n  internal.InvalidData\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const SourceUnavailable: (\n  path: Array<string>,\n  message: string,\n  cause: Cause.Cause<unknown>,\n  options?: Options\n) => ConfigError = internal.SourceUnavailable\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Unsupported: (path: Array<string>, message: string, options?: Options) => ConfigError =\n  internal.Unsupported\n\n/**\n * Returns `true` if the specified value is a `ConfigError`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isConfigError: (u: unknown) => u is ConfigError = internal.isConfigError\n\n/**\n * Returns `true` if the specified `ConfigError` is an `And`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isAnd: (self: ConfigError) => self is And = internal.isAnd\n\n/**\n * Returns `true` if the specified `ConfigError` is an `Or`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isOr: (self: ConfigError) => self is Or = internal.isOr\n\n/**\n * Returns `true` if the specified `ConfigError` is an `InvalidData`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isInvalidData: (self: ConfigError) => self is InvalidData = internal.isInvalidData\n\n/**\n * Returns `true` if the specified `ConfigError` is an `MissingData`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isMissingData: (self: ConfigError) => self is MissingData = internal.isMissingData\n\n/**\n * Returns `true` if the specified `ConfigError` contains only `MissingData` errors, `false` otherwise.\n *\n * @since 2.0.0\n * @categer getters\n */\nexport const isMissingDataOnly: (self: ConfigError) => boolean = internal.isMissingDataOnly\n\n/**\n * Returns `true` if the specified `ConfigError` is a `SourceUnavailable`,\n * `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isSourceUnavailable: (self: ConfigError) => self is SourceUnavailable = internal.isSourceUnavailable\n\n/**\n * Returns `true` if the specified `ConfigError` is an `Unsupported`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isUnsupported: (self: ConfigError) => self is Unsupported = internal.isUnsupported\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const prefixed: {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  (prefix: Array<string>): (self: ConfigError) => ConfigError\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: ConfigError, prefix: Array<string>): ConfigError\n} = internal.prefixed\n\n/**\n * @since 2.0.0\n * @category folding\n */\nexport const reduceWithContext: {\n  /**\n   * @since 2.0.0\n   * @category folding\n   */\n  <C, Z>(context: C, reducer: ConfigErrorReducer<C, Z>): (self: ConfigError) => Z\n  /**\n   * @since 2.0.0\n   * @category folding\n   */\n  <C, Z>(self: ConfigError, context: C, reducer: ConfigErrorReducer<C, Z>): Z\n} = internal.reduceWithContext\n"],"names":["internal","ConfigErrorTypeId","And","Or","MissingData","InvalidData","SourceUnavailable","Unsupported","isConfigError","isAnd","isOr","isInvalidData","isMissingData","isMissingDataOnly","isSourceUnavailable","isUnsupported","prefixed","reduceWithContext"],"mappings":";;;;;;;;;;;;;;;;;;;AAIA,OAAO,KAAKA,QAAQ,MAAM,2BAA2B;;AAM9C,MAAMC,iBAAiB,GAAkBD,QAAQ,+MAACC,iBAAiB;AAqInE,MAAMC,GAAG,GAA0DF,QAAQ,+MAACE,GAAG;AAM/E,MAAMC,EAAE,GAA0DH,QAAQ,+MAACG,EAAE;AAM7E,MAAMC,WAAW,GACtBJ,QAAQ,+MAACI,WAAW;AAMf,MAAMC,WAAW,GACtBL,QAAQ,+MAACK,WAAW;AAMf,MAAMC,iBAAiB,GAKXN,QAAQ,+MAACM,iBAAiB;AAMtC,MAAMC,WAAW,GACtBP,QAAQ,+MAACO,WAAW;AAQf,MAAMC,aAAa,GAAqCR,QAAQ,+MAACQ,aAAa;AAQ9E,MAAMC,KAAK,GAAuCT,QAAQ,+MAACS,KAAK;AAQhE,MAAMC,IAAI,GAAsCV,QAAQ,+MAACU,IAAI;AAS7D,MAAMC,aAAa,GAA+CX,QAAQ,+MAACW,aAAa;AASxF,MAAMC,aAAa,GAA+CZ,QAAQ,+MAACY,aAAa;AAQxF,MAAMC,iBAAiB,GAAmCb,QAAQ,+MAACa,iBAAiB;AASpF,MAAMC,mBAAmB,GAAqDd,QAAQ,+MAACc,mBAAmB;AAS1G,MAAMC,aAAa,GAA+Cf,QAAQ,+MAACe,aAAa;AAMxF,MAAMC,QAAQ,GAWjBhB,QAAQ,+MAACgB,QAAQ;AAMd,MAAMC,iBAAiB,GAW1BjB,QAAQ,+MAACiB,iBAAiB","ignoreList":[0]}},
    {"offset": {"line": 14089, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 14095, "column": 0}, "map": {"version":3,"file":"Config.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Config.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Chunk from \"./Chunk.js\"\nimport type * as ConfigError from \"./ConfigError.js\"\nimport type * as Duration from \"./Duration.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Either from \"./Either.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport type * as HashMap from \"./HashMap.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport * as internal from \"./internal/config.js\"\nimport type * as LogLevel from \"./LogLevel.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport type * as Redacted from \"./Redacted.js\"\nimport type * as Secret from \"./Secret.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const ConfigTypeId: unique symbol = internal.ConfigTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type ConfigTypeId = typeof ConfigTypeId\n\n/**\n * A `Config` describes the structure of some configuration data.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Config<out A> extends Config.Variance<A>, Effect.Effect<A, ConfigError.ConfigError> {}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Config {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<out A> {\n    readonly [ConfigTypeId]: {\n      readonly _A: Types.Covariant<A>\n    }\n  }\n\n  /**\n   * @since 2.5.0\n   * @category models\n   */\n  export type Success<T extends Config<any>> = [T] extends [Config<infer _A>] ? _A : never\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Primitive<out A> extends Config<A> {\n    readonly description: string\n    parse(text: string): Either.Either<A, ConfigError.ConfigError>\n  }\n\n  /**\n   * Wraps a nested structure, converting all primitives to a `Config`.\n   *\n   * `Config.Wrap<{ key: string }>` becomes `{ key: Config<string> }`\n   *\n   * To create the resulting config, use the `unwrap` constructor.\n   *\n   * @since 2.0.0\n   * @category models\n   */\n  export type Wrap<A> = [NonNullable<A>] extends [infer T] ? [IsPlainObject<T>] extends [true] ?\n        | { readonly [K in keyof A]: Wrap<A[K]> }\n        | Config<A>\n    : Config<A>\n    : Config<A>\n\n  type IsPlainObject<A> = [A] extends [Record<string, any>]\n    ? [keyof A] extends [never] ? false : [keyof A] extends [string] ? true : false\n    : false\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type LiteralValue = string | number | boolean | null | bigint\n\n/**\n * Constructs a config from a tuple / struct / arguments of configs.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const all: <const Arg extends Iterable<Config<any>> | Record<string, Config<any>>>(\n  arg: Arg\n) => Config<\n  [Arg] extends [ReadonlyArray<Config<any>>] ? {\n      -readonly [K in keyof Arg]: [Arg[K]] extends [Config<infer A>] ? A : never\n    }\n    : [Arg] extends [Iterable<Config<infer A>>] ? Array<A>\n    : [Arg] extends [Record<string, Config<any>>] ? {\n        -readonly [K in keyof Arg]: [Arg[K]] extends [Config<infer A>] ? A : never\n      }\n    : never\n> = internal.all\n\n/**\n * Constructs a config for an array of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const array: <A>(config: Config<A>, name?: string) => Config<Array<A>> = internal.array\n\n/**\n * Constructs a config for a boolean value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const boolean: (name?: string) => Config<boolean> = internal.boolean\n\n/**\n * Constructs a config for a sequence of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const chunk: <A>(config: Config<A>, name?: string) => Config<Chunk.Chunk<A>> = internal.chunk\n\n/**\n * Constructs a config for a date value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const date: (name?: string) => Config<Date> = internal.date\n\n/**\n * Constructs a config that fails with the specified message.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fail: (message: string) => Config<never> = internal.fail\n\n/**\n * Constructs a config for a float value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const number: (name?: string) => Config<number> = internal.number\n\n/**\n * Constructs a config for a integer value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const integer: (name?: string) => Config<number> = internal.integer\n\n/**\n * Constructs a config for a literal value.\n *\n * @example\n * import { Config } from \"effect\"\n *\n * const config = Config.literal(\"http\", \"https\")(\"PROTOCOL\")\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const literal: <Literals extends ReadonlyArray<LiteralValue>>(...literals: Literals) => (\n  name?: string\n) => Config<Literals[number]> = internal.literal\n\n/**\n * Constructs a config for a `LogLevel` value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const logLevel: (name?: string) => Config<LogLevel.LogLevel> = internal.logLevel\n\n/**\n * Constructs a config for a duration value.\n *\n * @since 2.5.0\n * @category constructors\n */\nexport const duration: (name?: string) => Config<Duration.Duration> = internal.duration\n\n/**\n * This function returns `true` if the specified value is an `Config` value,\n * `false` otherwise.\n *\n * This function can be useful for checking the type of a value before\n * attempting to operate on it as an `Config` value. For example, you could\n * use `isConfig` to check the type of a value before using it as an\n * argument to a function that expects an `Config` value.\n *\n * @param u - The value to check for being a `Config` value.\n *\n * @returns `true` if the specified value is a `Config` value, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isConfig: (u: unknown) => u is Config<unknown> = internal.isConfig\n\n/**\n * Returns a  config whose structure is the same as this one, but which produces\n * a different value, constructed using the specified function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  /**\n   * Returns a  config whose structure is the same as this one, but which produces\n   * a different value, constructed using the specified function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, B>(f: (a: A) => B): (self: Config<A>) => Config<B>\n  /**\n   * Returns a  config whose structure is the same as this one, but which produces\n   * a different value, constructed using the specified function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, B>(self: Config<A>, f: (a: A) => B): Config<B>\n} = internal.map\n\n/**\n * Returns a config whose structure is the same as this one, but which may\n * produce a different value, constructed using the specified function, which\n * may throw exceptions that will be translated into validation errors.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const mapAttempt: {\n  /**\n   * Returns a config whose structure is the same as this one, but which may\n   * produce a different value, constructed using the specified function, which\n   * may throw exceptions that will be translated into validation errors.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, B>(f: (a: A) => B): (self: Config<A>) => Config<B>\n  /**\n   * Returns a config whose structure is the same as this one, but which may\n   * produce a different value, constructed using the specified function, which\n   * may throw exceptions that will be translated into validation errors.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, B>(self: Config<A>, f: (a: A) => B): Config<B>\n} = internal.mapAttempt\n\n/**\n * Returns a new config whose structure is the samea as this one, but which\n * may produce a different value, constructed using the specified fallible\n * function.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const mapOrFail: {\n  /**\n   * Returns a new config whose structure is the samea as this one, but which\n   * may produce a different value, constructed using the specified fallible\n   * function.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, B>(f: (a: A) => Either.Either<B, ConfigError.ConfigError>): (self: Config<A>) => Config<B>\n  /**\n   * Returns a new config whose structure is the samea as this one, but which\n   * may produce a different value, constructed using the specified fallible\n   * function.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, B>(self: Config<A>, f: (a: A) => Either.Either<B, ConfigError.ConfigError>): Config<B>\n} = internal.mapOrFail\n\n/**\n * Returns a config that has this configuration nested as a property of the\n * specified name.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const nested: {\n  /**\n   * Returns a config that has this configuration nested as a property of the\n   * specified name.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (name: string): <A>(self: Config<A>) => Config<A>\n  /**\n   * Returns a config that has this configuration nested as a property of the\n   * specified name.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: Config<A>, name: string): Config<A>\n} = internal.nested\n\n/**\n * Returns a config whose structure is preferentially described by this\n * config, but which falls back to the specified config if there is an issue\n * reading from this config.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const orElse: {\n  /**\n   * Returns a config whose structure is preferentially described by this\n   * config, but which falls back to the specified config if there is an issue\n   * reading from this config.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A2>(that: LazyArg<Config<A2>>): <A>(self: Config<A>) => Config<A2 | A>\n  /**\n   * Returns a config whose structure is preferentially described by this\n   * config, but which falls back to the specified config if there is an issue\n   * reading from this config.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, A2>(self: Config<A>, that: LazyArg<Config<A2>>): Config<A | A2>\n} = internal.orElse\n\n/**\n * Returns configuration which reads from this configuration, but which falls\n * back to the specified configuration if reading from this configuration\n * fails with an error satisfying the specified predicate.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const orElseIf: {\n  /**\n   * Returns configuration which reads from this configuration, but which falls\n   * back to the specified configuration if reading from this configuration\n   * fails with an error satisfying the specified predicate.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A2>(\n    options: {\n      readonly if: Predicate<ConfigError.ConfigError>\n      readonly orElse: LazyArg<Config<A2>>\n    }\n  ): <A>(self: Config<A>) => Config<A>\n  /**\n   * Returns configuration which reads from this configuration, but which falls\n   * back to the specified configuration if reading from this configuration\n   * fails with an error satisfying the specified predicate.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, A2>(\n    self: Config<A>,\n    options: {\n      readonly if: Predicate<ConfigError.ConfigError>\n      readonly orElse: LazyArg<Config<A2>>\n    }\n  ): Config<A>\n} = internal.orElseIf\n\n/**\n * Returns an optional version of this config, which will be `None` if the\n * data is missing from configuration, and `Some` otherwise.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const option: <A>(self: Config<A>) => Config<Option.Option<A>> = internal.option\n\n/**\n * Constructs a new primitive config.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const primitive: <A>(\n  description: string,\n  parse: (text: string) => Either.Either<A, ConfigError.ConfigError>\n) => Config<A> = internal.primitive\n\n/**\n * Returns a config that describes a sequence of values, each of which has the\n * structure of this config.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const repeat: <A>(self: Config<A>) => Config<Array<A>> = internal.repeat\n\n/**\n * Constructs a config for a secret value.\n *\n * @since 2.0.0\n * @category constructors\n * @deprecated\n */\nexport const secret: (name?: string) => Config<Secret.Secret> = internal.secret\n\n/**\n * Constructs a config for a redacted value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const redacted: (name?: string) => Config<Redacted.Redacted> = internal.redacted\n\n/**\n * Constructs a config for a sequence of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const hashSet: <A>(config: Config<A>, name?: string) => Config<HashSet.HashSet<A>> = internal.hashSet\n\n/**\n * Constructs a config for a string value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const string: (name?: string) => Config<string> = internal.string\n\n/**\n * Constructs a config for a non-empty string value.\n *\n * @since 3.7.0\n * @category constructors\n */\nexport const nonEmptyString: (name?: string) => Config<string> = internal.nonEmptyString\n\n/**\n * Constructs a config which contains the specified value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeed: <A>(value: A) => Config<A> = internal.succeed\n\n/**\n * Lazily constructs a config.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const suspend: <A>(config: LazyArg<Config<A>>) => Config<A> = internal.suspend\n\n/**\n * Constructs a config which contains the specified lazy value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const sync: <A>(value: LazyArg<A>) => Config<A> = internal.sync\n\n/**\n * Constructs a config for a sequence of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const hashMap: <A>(config: Config<A>, name?: string) => Config<HashMap.HashMap<string, A>> = internal.hashMap\n\n/**\n * Constructs a config from some configuration wrapped with the `Wrap<A>` utility type.\n *\n * For example:\n *\n * ```\n * import { Config, unwrap } from \"./Config\"\n *\n * interface Options { key: string }\n *\n * const makeConfig = (config: Config.Wrap<Options>): Config<Options> => unwrap(config)\n * ```\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const unwrap: <A>(wrapped: Config.Wrap<A>) => Config<A> = internal.unwrap\n\n/**\n * Returns a config that describes the same structure as this one, but which\n * performs validation during loading.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const validate: {\n  /**\n   * Returns a config that describes the same structure as this one, but which\n   * performs validation during loading.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, B extends A>(\n    options: {\n      readonly message: string\n      readonly validation: Refinement<A, B>\n    }\n  ): (self: Config<A>) => Config<B>\n  /**\n   * Returns a config that describes the same structure as this one, but which\n   * performs validation during loading.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(\n    options: {\n      readonly message: string\n      readonly validation: Predicate<A>\n    }\n  ): (self: Config<A>) => Config<A>\n  /**\n   * Returns a config that describes the same structure as this one, but which\n   * performs validation during loading.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, B extends A>(\n    self: Config<A>,\n    options: {\n      readonly message: string\n      readonly validation: Refinement<A, B>\n    }\n  ): Config<B>\n  /**\n   * Returns a config that describes the same structure as this one, but which\n   * performs validation during loading.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(\n    self: Config<A>,\n    options: {\n      readonly message: string\n      readonly validation: Predicate<A>\n    }\n  ): Config<A>\n} = internal.validate\n\n/**\n * Returns a config that describes the same structure as this one, but has the\n * specified default value in case the information cannot be found.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const withDefault: {\n  /**\n   * Returns a config that describes the same structure as this one, but has the\n   * specified default value in case the information cannot be found.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <const A2>(def: A2): <A>(self: Config<A>) => Config<A2 | A>\n  /**\n   * Returns a config that describes the same structure as this one, but has the\n   * specified default value in case the information cannot be found.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, const A2>(self: Config<A>, def: A2): Config<A | A2>\n} = internal.withDefault\n\n/**\n * Adds a description to this configuration, which is intended for humans.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const withDescription: {\n  /**\n   * Adds a description to this configuration, which is intended for humans.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (description: string): <A>(self: Config<A>) => Config<A>\n  /**\n   * Adds a description to this configuration, which is intended for humans.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: Config<A>, description: string): Config<A>\n} = internal.withDescription\n\n/**\n * Returns a config that is the composition of this config and the specified\n * config.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zip: {\n  /**\n   * Returns a config that is the composition of this config and the specified\n   * config.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <B>(that: Config<B>): <A>(self: Config<A>) => Config<[A, B]>\n  /**\n   * Returns a config that is the composition of this config and the specified\n   * config.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, B>(self: Config<A>, that: Config<B>): Config<[A, B]>\n} = internal.zip\n\n/**\n * Returns a config that is the composes this config and the specified config\n * using the provided function.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWith: {\n  /**\n   * Returns a config that is the composes this config and the specified config\n   * using the provided function.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <B, A, C>(that: Config<B>, f: (a: A, b: B) => C): (self: Config<A>) => Config<C>\n  /**\n   * Returns a config that is the composes this config and the specified config\n   * using the provided function.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, B, C>(self: Config<A>, that: Config<B>, f: (a: A, b: B) => C): Config<C>\n} = internal.zipWith\n"],"names":["internal","ConfigTypeId","all","array","boolean","chunk","date","fail","number","integer","literal","logLevel","duration","isConfig","map","mapAttempt","mapOrFail","nested","orElse","orElseIf","option","primitive","repeat","secret","redacted","hashSet","string","nonEmptyString","succeed","suspend","sync","hashMap","unwrap","validate","withDefault","withDescription","zip","zipWith"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,OAAO,KAAKA,QAAQ,MAAM,sBAAsB;;AAYzC,MAAMC,YAAY,GAAkBD,QAAQ,0MAACC,YAAY;AA8EzD,MAAMC,GAAG,GAWZF,QAAQ,0MAACE,GAAG;AAQT,MAAMC,KAAK,GAA8DH,QAAQ,0MAACG,KAAK;AAQvF,MAAMC,OAAO,GAAuCJ,QAAQ,0MAACI,OAAO;AAQpE,MAAMC,KAAK,GAAoEL,QAAQ,0MAACK,KAAK;AAQ7F,MAAMC,IAAI,GAAoCN,QAAQ,0MAACM,IAAI;AAQ3D,MAAMC,IAAI,GAAuCP,QAAQ,0MAACO,IAAI;AAQ9D,MAAMC,MAAM,GAAsCR,QAAQ,0MAACQ,MAAM;AAQjE,MAAMC,OAAO,GAAsCT,QAAQ,0MAACS,OAAO;AAanE,MAAMC,OAAO,GAEYV,QAAQ,0MAACU,OAAO;AAQzC,MAAMC,QAAQ,GAAiDX,QAAQ,0MAACW,QAAQ;AAQhF,MAAMC,QAAQ,GAAiDZ,QAAQ,0MAACY,QAAQ;AAmBhF,MAAMC,QAAQ,GAAyCb,QAAQ,0MAACa,QAAQ;AASxE,MAAMC,GAAG,GAiBZd,QAAQ,0MAACc,GAAG;AAUT,MAAMC,UAAU,GAmBnBf,QAAQ,0MAACe,UAAU;AAUhB,MAAMC,SAAS,GAmBlBhB,QAAQ,0MAACgB,SAAS;AASf,MAAMC,MAAM,GAiBfjB,QAAQ,0MAACiB,MAAM;AAUZ,MAAMC,MAAM,GAmBflB,QAAQ,0MAACkB,MAAM;AAUZ,MAAMC,QAAQ,GA8BjBnB,QAAQ,0MAACmB,QAAQ;AASd,MAAMC,MAAM,GAAqDpB,QAAQ,0MAACoB,MAAM;AAQhF,MAAMC,SAAS,GAGLrB,QAAQ,0MAACqB,SAAS;AAS5B,MAAMC,MAAM,GAA6CtB,QAAQ,0MAACsB,MAAM;AASxE,MAAMC,MAAM,GAA6CvB,QAAQ,0MAACuB,MAAM;AAQxE,MAAMC,QAAQ,GAAiDxB,QAAQ,0MAACwB,QAAQ;AAQhF,MAAMC,OAAO,GAAwEzB,QAAQ,0MAACyB,OAAO;AAQrG,MAAMC,MAAM,GAAsC1B,QAAQ,0MAAC0B,MAAM;AAQjE,MAAMC,cAAc,GAAsC3B,QAAQ,0MAAC2B,cAAc;AAQjF,MAAMC,OAAO,GAA+B5B,QAAQ,0MAAC4B,OAAO;AAQ5D,MAAMC,OAAO,GAAiD7B,QAAQ,0MAAC6B,OAAO;AAQ9E,MAAMC,IAAI,GAAwC9B,QAAQ,0MAAC8B,IAAI;AAQ/D,MAAMC,OAAO,GAAgF/B,QAAQ,0MAAC+B,OAAO;AAkB7G,MAAMC,MAAM,GAA8ChC,QAAQ,0MAACgC,MAAM;AASzE,MAAMC,QAAQ,GAuDjBjC,QAAQ,0MAACiC,QAAQ;AASd,MAAMC,WAAW,GAiBpBlC,QAAQ,0MAACkC,WAAW;AAQjB,MAAMC,eAAe,GAexBnC,QAAQ,0MAACmC,eAAe;AASrB,MAAMC,GAAG,GAiBZpC,QAAQ,0MAACoC,GAAG;AAST,MAAMC,OAAO,GAiBhBrC,QAAQ,0MAACqC,OAAO","ignoreList":[0]}},
    {"offset": {"line": 14173, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 14179, "column": 0}, "map": {"version":3,"file":"Struct.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Struct.ts"],"sourcesContent":["/**\n * This module provides utility functions for working with structs in TypeScript.\n *\n * @since 2.0.0\n */\n\nimport * as Equivalence from \"./Equivalence.js\"\nimport { dual } from \"./Function.js\"\nimport * as order from \"./Order.js\"\nimport * as Predicate from \"./Predicate.js\"\nimport type { MatchRecord, Simplify } from \"./Types.js\"\n\n/**\n * Create a new object by picking properties of an existing object.\n *\n * @example\n * import { pipe, Struct } from \"effect\"\n *\n * assert.deepStrictEqual(pipe({ a: \"a\", b: 1, c: true }, Struct.pick(\"a\", \"b\")), { a: \"a\", b: 1 })\n * assert.deepStrictEqual(Struct.pick({ a: \"a\", b: 1, c: true }, \"a\", \"b\"), { a: \"a\", b: 1 })\n *\n * @since 2.0.0\n */\nexport const pick: {\n  /**\n   * Create a new object by picking properties of an existing object.\n   *\n   * @example\n   * import { pipe, Struct } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe({ a: \"a\", b: 1, c: true }, Struct.pick(\"a\", \"b\")), { a: \"a\", b: 1 })\n   * assert.deepStrictEqual(Struct.pick({ a: \"a\", b: 1, c: true }, \"a\", \"b\"), { a: \"a\", b: 1 })\n   *\n   * @since 2.0.0\n   */\n  <Keys extends Array<PropertyKey>>(...keys: Keys): <S extends { [K in Keys[number]]?: any }>(\n    s: S\n  ) => MatchRecord<S, { [K in Keys[number]]?: S[K] }, Simplify<Pick<S, Keys[number]>>>\n  /**\n   * Create a new object by picking properties of an existing object.\n   *\n   * @example\n   * import { pipe, Struct } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe({ a: \"a\", b: 1, c: true }, Struct.pick(\"a\", \"b\")), { a: \"a\", b: 1 })\n   * assert.deepStrictEqual(Struct.pick({ a: \"a\", b: 1, c: true }, \"a\", \"b\"), { a: \"a\", b: 1 })\n   *\n   * @since 2.0.0\n   */\n  <S extends object, Keys extends Array<keyof S>>(\n    s: S,\n    ...keys: Keys\n  ): MatchRecord<S, { [K in Keys[number]]?: S[K] }, Simplify<Pick<S, Keys[number]>>>\n} = dual(\n  (args) => Predicate.isObject(args[0]),\n  <S extends object, Keys extends Array<keyof S>>(s: S, ...keys: Keys) => {\n    const out: any = {}\n    for (const k of keys) {\n      if (k in s) {\n        out[k] = (s as any)[k]\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Create a new object by omitting properties of an existing object.\n *\n * @example\n * import { pipe, Struct } from \"effect\"\n *\n * assert.deepStrictEqual(pipe({ a: \"a\", b: 1, c: true }, Struct.omit(\"c\")), { a: \"a\", b: 1 })\n * assert.deepStrictEqual(Struct.omit({ a: \"a\", b: 1, c: true }, \"c\"), { a: \"a\", b: 1 })\n *\n * @since 2.0.0\n */\nexport const omit: {\n  /**\n   * Create a new object by omitting properties of an existing object.\n   *\n   * @example\n   * import { pipe, Struct } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe({ a: \"a\", b: 1, c: true }, Struct.omit(\"c\")), { a: \"a\", b: 1 })\n   * assert.deepStrictEqual(Struct.omit({ a: \"a\", b: 1, c: true }, \"c\"), { a: \"a\", b: 1 })\n   *\n   * @since 2.0.0\n   */\n  <Keys extends Array<PropertyKey>>(\n    ...keys: Keys\n  ): <S extends { [K in Keys[number]]?: any }>(s: S) => Simplify<Omit<S, Keys[number]>>\n  /**\n   * Create a new object by omitting properties of an existing object.\n   *\n   * @example\n   * import { pipe, Struct } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe({ a: \"a\", b: 1, c: true }, Struct.omit(\"c\")), { a: \"a\", b: 1 })\n   * assert.deepStrictEqual(Struct.omit({ a: \"a\", b: 1, c: true }, \"c\"), { a: \"a\", b: 1 })\n   *\n   * @since 2.0.0\n   */\n  <S extends object, Keys extends Array<keyof S>>(s: S, ...keys: Keys): Simplify<Omit<S, Keys[number]>>\n} = dual(\n  (args) => Predicate.isObject(args[0]),\n  <S extends object, Keys extends Array<keyof S>>(s: S, ...keys: Keys) => {\n    const out: any = { ...s }\n    for (const k of keys) {\n      delete out[k]\n    }\n    return out\n  }\n)\n\n/**\n * Given a struct of `Equivalence`s returns a new `Equivalence` that compares values of a struct\n * by applying each `Equivalence` to the corresponding property of the struct.\n *\n * Alias of {@link Equivalence.struct}.\n *\n * @example\n * import { Struct, String, Number } from \"effect\"\n *\n * const PersonEquivalence = Struct.getEquivalence({\n *   name: String.Equivalence,\n *   age: Number.Equivalence\n * })\n *\n * assert.deepStrictEqual(\n *   PersonEquivalence({ name: \"John\", age: 25 }, { name: \"John\", age: 25 }),\n *   true\n * )\n * assert.deepStrictEqual(\n *   PersonEquivalence({ name: \"John\", age: 25 }, { name: \"John\", age: 40 }),\n *   false\n * )\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const getEquivalence: <R extends Record<string, Equivalence.Equivalence<any>>>(\n  isEquivalents: R\n) => Equivalence.Equivalence<\n  { readonly [K in keyof R]: [R[K]] extends [Equivalence.Equivalence<infer A>] ? A : never }\n> = Equivalence.struct\n\n/**\n * This function creates and returns a new `Order` for a struct of values based on the given `Order`s\n * for each property in the struct.\n *\n * Alias of {@link order.struct}.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const getOrder: <R extends { readonly [x: string]: order.Order<any> }>(\n  fields: R\n) => order.Order<{ [K in keyof R]: [R[K]] extends [order.Order<infer A>] ? A : never }> = order.struct\n\ntype Transformed<O, T> =\n  & unknown\n  & {\n    [K in keyof O]: K extends keyof T ? (T[K] extends (...a: any) => any ? ReturnType<T[K]> : O[K]) : O[K]\n  }\ntype PartialTransform<O, T> = {\n  [K in keyof T]: T[K] extends (a: O[K & keyof O]) => any ? T[K] : (a: O[K & keyof O]) => unknown\n}\n/**\n * Transforms the values of a Struct provided a transformation function for each key.\n * If no transformation function is provided for a key, it will return the origional value for that key.\n *\n * @example\n * import { pipe, Struct } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     { a: 'a', b: 1, c: 3 },\n *     Struct.evolve({\n *       a: (a) => a.length,\n *       b: (b) => b * 2\n *     })\n *   ),\n *   { a: 1, b: 2, c: 3 }\n * )\n *\n * @since 2.0.0\n */\nexport const evolve: {\n  /**\n   * Transforms the values of a Struct provided a transformation function for each key.\n   * If no transformation function is provided for a key, it will return the origional value for that key.\n   *\n   * @example\n   * import { pipe, Struct } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     { a: 'a', b: 1, c: 3 },\n   *     Struct.evolve({\n   *       a: (a) => a.length,\n   *       b: (b) => b * 2\n   *     })\n   *   ),\n   *   { a: 1, b: 2, c: 3 }\n   * )\n   *\n   * @since 2.0.0\n   */\n  <O, T>(t: PartialTransform<O, T>): (obj: O) => Transformed<O, T>\n  /**\n   * Transforms the values of a Struct provided a transformation function for each key.\n   * If no transformation function is provided for a key, it will return the origional value for that key.\n   *\n   * @example\n   * import { pipe, Struct } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     { a: 'a', b: 1, c: 3 },\n   *     Struct.evolve({\n   *       a: (a) => a.length,\n   *       b: (b) => b * 2\n   *     })\n   *   ),\n   *   { a: 1, b: 2, c: 3 }\n   * )\n   *\n   * @since 2.0.0\n   */\n  <O, T>(obj: O, t: PartialTransform<O, T>): Transformed<O, T>\n} = dual(\n  2,\n  <O, T>(obj: O, t: PartialTransform<O, T>): Transformed<O, T> => {\n    const out = { ...obj }\n    for (const k in t) {\n      if (Object.prototype.hasOwnProperty.call(obj, k)) {\n        // @ts-expect-error\n        out[k] = t[k](obj[k])\n      }\n    }\n    return out as any\n  }\n)\n\n/**\n * Retrieves the value associated with the specified key from a struct.\n *\n * @example\n * import { pipe, Struct } from \"effect\"\n *\n * const value = pipe({ a: 1, b: 2 }, Struct.get(\"a\"))\n *\n * assert.deepStrictEqual(value, 1)\n *\n * @since 2.0.0\n */\nexport const get =\n  <K extends PropertyKey>(key: K) => <S extends { [P in K]?: any }>(s: S): MatchRecord<S, S[K] | undefined, S[K]> =>\n    s[key]\n\n/**\n * Retrieves the object keys that are strings in a typed manner\n *\n * @example\n * import { Struct } from \"effect\"\n *\n * const symbol: unique symbol = Symbol()\n *\n * const value = {\n *   a: 1,\n *   b: 2,\n *   [symbol]: 3\n * }\n *\n * const keys: Array<\"a\" | \"b\"> = Struct.keys(value)\n *\n * assert.deepStrictEqual(keys, [\"a\", \"b\"])\n *\n * @since 3.6.0\n */\nexport const keys = <T extends {}>(o: T): Array<(keyof T) & string> => Object.keys(o) as Array<(keyof T) & string>\n"],"names":["Equivalence","dual","order","Predicate","pick","args","isObject","s","keys","out","k","omit","getEquivalence","struct","getOrder","evolve","obj","t","Object","prototype","hasOwnProperty","call","get","key","o"],"mappings":"AAAA;;;;;;;;;;;;;AAOA,SAASC,IAAI,QAAQ,eAAe;AAEpC,OAAO,KAAKE,SAAS,MAAM,gBAAgB;AAH3C,OAAO,KAAKH,WAAW,MAAM,kBAAkB;AAE/C,OAAO,KAAKE,KAAK,MAAM,YAAY;;;;;AAe5B,MAAME,IAAI,GAAA,WAAA,+MA8BbH,OAAAA,AAAI,GACLI,IAAI,GAAKF,SAAS,gMAACG,QAAQ,CAACD,IAAI,CAAC,CAAC,CAAC,CAAC,EACrC,CAAgDE,CAAI,EAAE,GAAGC,IAAU,KAAI;IACrE,MAAMC,GAAG,GAAQ,CAAA,CAAE;IACnB,KAAK,MAAMC,CAAC,IAAIF,IAAI,CAAE;QACpB,IAAIE,CAAC,IAAIH,CAAC,EAAE;YACVE,GAAG,CAACC,CAAC,CAAC,GAAIH,CAAS,CAACG,CAAC,CAAC;QACxB;IACF;IACA,OAAOD,GAAG;AACZ,CAAC,CACF;AAaM,MAAME,IAAI,GAAA,WAAA,+MA2BbV,OAAAA,AAAI,GACLI,IAAI,GAAKF,SAAS,gMAACG,QAAQ,CAACD,IAAI,CAAC,CAAC,CAAC,CAAC,EACrC,CAAgDE,CAAI,EAAE,GAAGC,IAAU,KAAI;IACrE,MAAMC,GAAG,GAAQ;QAAE,GAAGF,CAAAA;IAAC,CAAE;IACzB,KAAK,MAAMG,CAAC,IAAIF,IAAI,CAAE;QACpB,OAAOC,GAAG,CAACC,CAAC,CAAC;IACf;IACA,OAAOD,GAAG;AACZ,CAAC,CACF;AA4BM,MAAMG,cAAc,GAIvBZ,WAAW,gMAACa,MAAM;AAWf,MAAMC,QAAQ,GAEqEZ,KAAK,gMAACW,MAAM;AA8B/F,MAAME,MAAM,GAAA,WAAA,+MA2Cfd,OAAAA,AAAI,EACN,CAAC,EACD,CAAOe,GAAM,EAAEC,CAAyB,KAAuB;IAC7D,MAAMR,GAAG,GAAG;QAAE,GAAGO,GAAAA;IAAG,CAAE;IACtB,IAAK,MAAMN,CAAC,IAAIO,CAAC,CAAE;QACjB,IAAIC,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACL,GAAG,EAAEN,CAAC,CAAC,EAAE;YAChD,mBAAA;YACAD,GAAG,CAACC,CAAC,CAAC,GAAGO,CAAC,CAACP,CAAC,CAAC,CAACM,GAAG,CAACN,CAAC,CAAC,CAAC;QACvB;IACF;IACA,OAAOD,GAAU;AACnB,CAAC,CACF;AAcM,MAAMa,GAAG,IACUC,GAAM,IAAoChB,CAAI,GACpEA,CAAC,CAACgB,GAAG,CAAC;AAsBH,MAAMf,IAAI,IAAkBgB,CAAI,GAAgCN,MAAM,CAACV,IAAI,CAACgB,CAAC,CAA8B","ignoreList":[0]}},
    {"offset": {"line": 14234, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 14240, "column": 0}, "map": {"version":3,"file":"BigInt.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/BigInt.ts"],"sourcesContent":["/**\n * This module provides utility functions and type class instances for working with the `bigint` type in TypeScript.\n * It includes functions for basic arithmetic operations, as well as type class instances for\n * `Equivalence` and `Order`.\n *\n * @since 2.0.0\n */\n\nimport * as equivalence from \"./Equivalence.js\"\nimport { dual } from \"./Function.js\"\nimport * as Option from \"./Option.js\"\nimport * as order from \"./Order.js\"\nimport type { Ordering } from \"./Ordering.js\"\nimport * as predicate from \"./Predicate.js\"\n\nconst bigint0 = BigInt(0)\nconst bigint1 = BigInt(1)\nconst bigint2 = BigInt(2)\n\n/**\n * Tests if a value is a `bigint`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isBigInt } from \"effect/BigInt\"\n *\n * assert.deepStrictEqual(isBigInt(1n), true)\n * assert.deepStrictEqual(isBigInt(1), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isBigInt: (u: unknown) => u is bigint = predicate.isBigInt\n\n/**\n * Provides an addition operation on `bigint`s.\n *\n * @param self - The first operand.\n * @param that - The second operand.\n *\n * @example\n * import { sum } from \"effect/BigInt\"\n *\n * assert.deepStrictEqual(sum(2n, 3n), 5n)\n *\n * @category math\n * @since 2.0.0\n */\nexport const sum: {\n  /**\n   * Provides an addition operation on `bigint`s.\n   *\n   * @param self - The first operand.\n   * @param that - The second operand.\n   *\n   * @example\n   * import { sum } from \"effect/BigInt\"\n   *\n   * assert.deepStrictEqual(sum(2n, 3n), 5n)\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (that: bigint): (self: bigint) => bigint\n  /**\n   * Provides an addition operation on `bigint`s.\n   *\n   * @param self - The first operand.\n   * @param that - The second operand.\n   *\n   * @example\n   * import { sum } from \"effect/BigInt\"\n   *\n   * assert.deepStrictEqual(sum(2n, 3n), 5n)\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (self: bigint, that: bigint): bigint\n} = dual(2, (self: bigint, that: bigint): bigint => self + that)\n\n/**\n * Provides a multiplication operation on `bigint`s.\n *\n * @param self - The first operand.\n * @param that - The second operand.\n *\n * @example\n * import { multiply } from \"effect/BigInt\"\n *\n * assert.deepStrictEqual(multiply(2n, 3n), 6n)\n *\n * @category math\n * @since 2.0.0\n */\nexport const multiply: {\n  /**\n   * Provides a multiplication operation on `bigint`s.\n   *\n   * @param self - The first operand.\n   * @param that - The second operand.\n   *\n   * @example\n   * import { multiply } from \"effect/BigInt\"\n   *\n   * assert.deepStrictEqual(multiply(2n, 3n), 6n)\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (that: bigint): (self: bigint) => bigint\n  /**\n   * Provides a multiplication operation on `bigint`s.\n   *\n   * @param self - The first operand.\n   * @param that - The second operand.\n   *\n   * @example\n   * import { multiply } from \"effect/BigInt\"\n   *\n   * assert.deepStrictEqual(multiply(2n, 3n), 6n)\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (self: bigint, that: bigint): bigint\n} = dual(2, (self: bigint, that: bigint): bigint => self * that)\n\n/**\n * Provides a subtraction operation on `bigint`s.\n *\n * @param self - The first operand.\n * @param that - The second operand.\n *\n * @example\n * import { subtract } from \"effect/BigInt\"\n *\n * assert.deepStrictEqual(subtract(2n, 3n), -1n)\n *\n * @category math\n * @since 2.0.0\n */\nexport const subtract: {\n  /**\n   * Provides a subtraction operation on `bigint`s.\n   *\n   * @param self - The first operand.\n   * @param that - The second operand.\n   *\n   * @example\n   * import { subtract } from \"effect/BigInt\"\n   *\n   * assert.deepStrictEqual(subtract(2n, 3n), -1n)\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (that: bigint): (self: bigint) => bigint\n  /**\n   * Provides a subtraction operation on `bigint`s.\n   *\n   * @param self - The first operand.\n   * @param that - The second operand.\n   *\n   * @example\n   * import { subtract } from \"effect/BigInt\"\n   *\n   * assert.deepStrictEqual(subtract(2n, 3n), -1n)\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (self: bigint, that: bigint): bigint\n} = dual(2, (self: bigint, that: bigint): bigint => self - that)\n\n/**\n * Provides a division operation on `bigint`s.\n *\n * If the dividend is not a multiple of the divisor the result will be a `bigint` value\n * which represents the integer division rounded down to the nearest integer.\n *\n * Returns `None` if the divisor is `0n`.\n *\n * @param self - The dividend operand.\n * @param that - The divisor operand.\n *\n * @example\n * import { BigInt, Option } from \"effect\"\n *\n * assert.deepStrictEqual(BigInt.divide(6n, 3n), Option.some(2n))\n * assert.deepStrictEqual(BigInt.divide(6n, 0n), Option.none())\n *\n * @category math\n * @since 2.0.0\n */\nexport const divide: {\n  /**\n   * Provides a division operation on `bigint`s.\n   *\n   * If the dividend is not a multiple of the divisor the result will be a `bigint` value\n   * which represents the integer division rounded down to the nearest integer.\n   *\n   * Returns `None` if the divisor is `0n`.\n   *\n   * @param self - The dividend operand.\n   * @param that - The divisor operand.\n   *\n   * @example\n   * import { BigInt, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(BigInt.divide(6n, 3n), Option.some(2n))\n   * assert.deepStrictEqual(BigInt.divide(6n, 0n), Option.none())\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (that: bigint): (self: bigint) => Option.Option<bigint>\n  /**\n   * Provides a division operation on `bigint`s.\n   *\n   * If the dividend is not a multiple of the divisor the result will be a `bigint` value\n   * which represents the integer division rounded down to the nearest integer.\n   *\n   * Returns `None` if the divisor is `0n`.\n   *\n   * @param self - The dividend operand.\n   * @param that - The divisor operand.\n   *\n   * @example\n   * import { BigInt, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(BigInt.divide(6n, 3n), Option.some(2n))\n   * assert.deepStrictEqual(BigInt.divide(6n, 0n), Option.none())\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (self: bigint, that: bigint): Option.Option<bigint>\n} = dual(\n  2,\n  (self: bigint, that: bigint): Option.Option<bigint> => that === bigint0 ? Option.none() : Option.some(self / that)\n)\n\n/**\n * Provides a division operation on `bigint`s.\n *\n * If the dividend is not a multiple of the divisor the result will be a `bigint` value\n * which represents the integer division rounded down to the nearest integer.\n *\n * Throws a `RangeError` if the divisor is `0n`.\n *\n * @param self - The dividend operand.\n * @param that - The divisor operand.\n *\n * @example\n * import { unsafeDivide } from \"effect/BigInt\"\n *\n * assert.deepStrictEqual(unsafeDivide(6n, 3n), 2n)\n * assert.deepStrictEqual(unsafeDivide(6n, 4n), 1n)\n *\n * @category math\n * @since 2.0.0\n */\nexport const unsafeDivide: {\n  /**\n   * Provides a division operation on `bigint`s.\n   *\n   * If the dividend is not a multiple of the divisor the result will be a `bigint` value\n   * which represents the integer division rounded down to the nearest integer.\n   *\n   * Throws a `RangeError` if the divisor is `0n`.\n   *\n   * @param self - The dividend operand.\n   * @param that - The divisor operand.\n   *\n   * @example\n   * import { unsafeDivide } from \"effect/BigInt\"\n   *\n   * assert.deepStrictEqual(unsafeDivide(6n, 3n), 2n)\n   * assert.deepStrictEqual(unsafeDivide(6n, 4n), 1n)\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (that: bigint): (self: bigint) => bigint\n  /**\n   * Provides a division operation on `bigint`s.\n   *\n   * If the dividend is not a multiple of the divisor the result will be a `bigint` value\n   * which represents the integer division rounded down to the nearest integer.\n   *\n   * Throws a `RangeError` if the divisor is `0n`.\n   *\n   * @param self - The dividend operand.\n   * @param that - The divisor operand.\n   *\n   * @example\n   * import { unsafeDivide } from \"effect/BigInt\"\n   *\n   * assert.deepStrictEqual(unsafeDivide(6n, 3n), 2n)\n   * assert.deepStrictEqual(unsafeDivide(6n, 4n), 1n)\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (self: bigint, that: bigint): bigint\n} = dual(2, (self: bigint, that: bigint): bigint => self / that)\n\n/**\n * Returns the result of adding `1n` to a given number.\n *\n * @param n - A `bigint` to be incremented.\n *\n * @example\n * import { increment } from \"effect/BigInt\"\n *\n * assert.deepStrictEqual(increment(2n), 3n)\n *\n * @category math\n * @since 2.0.0\n */\nexport const increment = (n: bigint): bigint => n + bigint1\n\n/**\n * Decrements a number by `1n`.\n *\n * @param n - A `bigint` to be decremented.\n *\n * @example\n * import { decrement } from \"effect/BigInt\"\n *\n * assert.deepStrictEqual(decrement(3n), 2n)\n *\n * @category math\n * @since 2.0.0\n */\nexport const decrement = (n: bigint): bigint => n - bigint1\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Equivalence: equivalence.Equivalence<bigint> = equivalence.bigint\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Order: order.Order<bigint> = order.bigint\n\n/**\n * Returns `true` if the first argument is less than the second, otherwise `false`.\n *\n * @param self - The first argument.\n * @param that - The second argument.\n *\n * @example\n * import { lessThan } from \"effect/BigInt\"\n *\n * assert.deepStrictEqual(lessThan(2n, 3n), true)\n * assert.deepStrictEqual(lessThan(3n, 3n), false)\n * assert.deepStrictEqual(lessThan(4n, 3n), false)\n *\n * @category predicates\n * @since 2.0.0\n */\nexport const lessThan: {\n  /**\n   * Returns `true` if the first argument is less than the second, otherwise `false`.\n   *\n   * @param self - The first argument.\n   * @param that - The second argument.\n   *\n   * @example\n   * import { lessThan } from \"effect/BigInt\"\n   *\n   * assert.deepStrictEqual(lessThan(2n, 3n), true)\n   * assert.deepStrictEqual(lessThan(3n, 3n), false)\n   * assert.deepStrictEqual(lessThan(4n, 3n), false)\n   *\n   * @category predicates\n   * @since 2.0.0\n   */\n  (that: bigint): (self: bigint) => boolean\n  /**\n   * Returns `true` if the first argument is less than the second, otherwise `false`.\n   *\n   * @param self - The first argument.\n   * @param that - The second argument.\n   *\n   * @example\n   * import { lessThan } from \"effect/BigInt\"\n   *\n   * assert.deepStrictEqual(lessThan(2n, 3n), true)\n   * assert.deepStrictEqual(lessThan(3n, 3n), false)\n   * assert.deepStrictEqual(lessThan(4n, 3n), false)\n   *\n   * @category predicates\n   * @since 2.0.0\n   */\n  (self: bigint, that: bigint): boolean\n} = order.lessThan(Order)\n\n/**\n * Returns a function that checks if a given `bigint` is less than or equal to the provided one.\n *\n * @param self - The first `bigint` to compare with.\n * @param that - The second `bigint` to compare with.\n *\n * @example\n * import { lessThanOrEqualTo } from \"effect/BigInt\"\n *\n * assert.deepStrictEqual(lessThanOrEqualTo(2n, 3n), true)\n * assert.deepStrictEqual(lessThanOrEqualTo(3n, 3n), true)\n * assert.deepStrictEqual(lessThanOrEqualTo(4n, 3n), false)\n *\n * @category predicates\n * @since 2.0.0\n */\nexport const lessThanOrEqualTo: {\n  /**\n   * Returns a function that checks if a given `bigint` is less than or equal to the provided one.\n   *\n   * @param self - The first `bigint` to compare with.\n   * @param that - The second `bigint` to compare with.\n   *\n   * @example\n   * import { lessThanOrEqualTo } from \"effect/BigInt\"\n   *\n   * assert.deepStrictEqual(lessThanOrEqualTo(2n, 3n), true)\n   * assert.deepStrictEqual(lessThanOrEqualTo(3n, 3n), true)\n   * assert.deepStrictEqual(lessThanOrEqualTo(4n, 3n), false)\n   *\n   * @category predicates\n   * @since 2.0.0\n   */\n  (that: bigint): (self: bigint) => boolean\n  /**\n   * Returns a function that checks if a given `bigint` is less than or equal to the provided one.\n   *\n   * @param self - The first `bigint` to compare with.\n   * @param that - The second `bigint` to compare with.\n   *\n   * @example\n   * import { lessThanOrEqualTo } from \"effect/BigInt\"\n   *\n   * assert.deepStrictEqual(lessThanOrEqualTo(2n, 3n), true)\n   * assert.deepStrictEqual(lessThanOrEqualTo(3n, 3n), true)\n   * assert.deepStrictEqual(lessThanOrEqualTo(4n, 3n), false)\n   *\n   * @category predicates\n   * @since 2.0.0\n   */\n  (self: bigint, that: bigint): boolean\n} = order.lessThanOrEqualTo(Order)\n\n/**\n * Returns `true` if the first argument is greater than the second, otherwise `false`.\n *\n * @param self - The first argument.\n * @param that - The second argument.\n *\n * @example\n * import { greaterThan } from \"effect/BigInt\"\n *\n * assert.deepStrictEqual(greaterThan(2n, 3n), false)\n * assert.deepStrictEqual(greaterThan(3n, 3n), false)\n * assert.deepStrictEqual(greaterThan(4n, 3n), true)\n *\n * @category predicates\n * @since 2.0.0\n */\nexport const greaterThan: {\n  /**\n   * Returns `true` if the first argument is greater than the second, otherwise `false`.\n   *\n   * @param self - The first argument.\n   * @param that - The second argument.\n   *\n   * @example\n   * import { greaterThan } from \"effect/BigInt\"\n   *\n   * assert.deepStrictEqual(greaterThan(2n, 3n), false)\n   * assert.deepStrictEqual(greaterThan(3n, 3n), false)\n   * assert.deepStrictEqual(greaterThan(4n, 3n), true)\n   *\n   * @category predicates\n   * @since 2.0.0\n   */\n  (that: bigint): (self: bigint) => boolean\n  /**\n   * Returns `true` if the first argument is greater than the second, otherwise `false`.\n   *\n   * @param self - The first argument.\n   * @param that - The second argument.\n   *\n   * @example\n   * import { greaterThan } from \"effect/BigInt\"\n   *\n   * assert.deepStrictEqual(greaterThan(2n, 3n), false)\n   * assert.deepStrictEqual(greaterThan(3n, 3n), false)\n   * assert.deepStrictEqual(greaterThan(4n, 3n), true)\n   *\n   * @category predicates\n   * @since 2.0.0\n   */\n  (self: bigint, that: bigint): boolean\n} = order.greaterThan(Order)\n\n/**\n * Returns a function that checks if a given `bigint` is greater than or equal to the provided one.\n *\n * @param self - The first `bigint` to compare with.\n * @param that - The second `bigint` to compare with.\n *\n * @example\n * import { greaterThanOrEqualTo } from \"effect/BigInt\"\n *\n * assert.deepStrictEqual(greaterThanOrEqualTo(2n, 3n), false)\n * assert.deepStrictEqual(greaterThanOrEqualTo(3n, 3n), true)\n * assert.deepStrictEqual(greaterThanOrEqualTo(4n, 3n), true)\n *\n * @category predicates\n * @since 2.0.0\n */\nexport const greaterThanOrEqualTo: {\n  /**\n   * Returns a function that checks if a given `bigint` is greater than or equal to the provided one.\n   *\n   * @param self - The first `bigint` to compare with.\n   * @param that - The second `bigint` to compare with.\n   *\n   * @example\n   * import { greaterThanOrEqualTo } from \"effect/BigInt\"\n   *\n   * assert.deepStrictEqual(greaterThanOrEqualTo(2n, 3n), false)\n   * assert.deepStrictEqual(greaterThanOrEqualTo(3n, 3n), true)\n   * assert.deepStrictEqual(greaterThanOrEqualTo(4n, 3n), true)\n   *\n   * @category predicates\n   * @since 2.0.0\n   */\n  (that: bigint): (self: bigint) => boolean\n  /**\n   * Returns a function that checks if a given `bigint` is greater than or equal to the provided one.\n   *\n   * @param self - The first `bigint` to compare with.\n   * @param that - The second `bigint` to compare with.\n   *\n   * @example\n   * import { greaterThanOrEqualTo } from \"effect/BigInt\"\n   *\n   * assert.deepStrictEqual(greaterThanOrEqualTo(2n, 3n), false)\n   * assert.deepStrictEqual(greaterThanOrEqualTo(3n, 3n), true)\n   * assert.deepStrictEqual(greaterThanOrEqualTo(4n, 3n), true)\n   *\n   * @category predicates\n   * @since 2.0.0\n   */\n  (self: bigint, that: bigint): boolean\n} = order.greaterThanOrEqualTo(Order)\n\n/**\n * Checks if a `bigint` is between a `minimum` and `maximum` value (inclusive).\n *\n * @param self - The `number` to check.\n * @param minimum - The `minimum` value to check.\n * @param maximum - The `maximum` value to check.\n *\n * @example\n * import { BigInt } from \"effect\"\n *\n * const between = BigInt.between({ minimum: 0n, maximum: 5n })\n *\n * assert.deepStrictEqual(between(3n), true)\n * assert.deepStrictEqual(between(-1n), false)\n * assert.deepStrictEqual(between(6n), false)\n *\n * @category predicates\n * @since 2.0.0\n */\nexport const between: {\n  /**\n   * Checks if a `bigint` is between a `minimum` and `maximum` value (inclusive).\n   *\n   * @param self - The `number` to check.\n   * @param minimum - The `minimum` value to check.\n   * @param maximum - The `maximum` value to check.\n   *\n   * @example\n   * import { BigInt } from \"effect\"\n   *\n   * const between = BigInt.between({ minimum: 0n, maximum: 5n })\n   *\n   * assert.deepStrictEqual(between(3n), true)\n   * assert.deepStrictEqual(between(-1n), false)\n   * assert.deepStrictEqual(between(6n), false)\n   *\n   * @category predicates\n   * @since 2.0.0\n   */\n  (\n    options: {\n      minimum: bigint\n      maximum: bigint\n    }\n  ): (self: bigint) => boolean\n  /**\n   * Checks if a `bigint` is between a `minimum` and `maximum` value (inclusive).\n   *\n   * @param self - The `number` to check.\n   * @param minimum - The `minimum` value to check.\n   * @param maximum - The `maximum` value to check.\n   *\n   * @example\n   * import { BigInt } from \"effect\"\n   *\n   * const between = BigInt.between({ minimum: 0n, maximum: 5n })\n   *\n   * assert.deepStrictEqual(between(3n), true)\n   * assert.deepStrictEqual(between(-1n), false)\n   * assert.deepStrictEqual(between(6n), false)\n   *\n   * @category predicates\n   * @since 2.0.0\n   */\n  (\n    self: bigint,\n    options: {\n      minimum: bigint\n      maximum: bigint\n    }\n  ): boolean\n} = order.between(Order)\n\n/**\n * Restricts the given `bigint` to be within the range specified by the `minimum` and `maximum` values.\n *\n * - If the `bigint` is less than the `minimum` value, the function returns the `minimum` value.\n * - If the `bigint` is greater than the `maximum` value, the function returns the `maximum` value.\n * - Otherwise, it returns the original `bigint`.\n *\n * @param self - The `bigint` to be clamped.\n * @param minimum - The lower end of the range.\n * @param maximum - The upper end of the range.\n *\n * @example\n * import { BigInt } from \"effect\"\n *\n * const clamp = BigInt.clamp({ minimum: 1n, maximum: 5n })\n *\n * assert.equal(clamp(3n), 3n)\n * assert.equal(clamp(0n), 1n)\n * assert.equal(clamp(6n), 5n)\n *\n * @since 2.0.0\n */\nexport const clamp: {\n  /**\n   * Restricts the given `bigint` to be within the range specified by the `minimum` and `maximum` values.\n   *\n   * - If the `bigint` is less than the `minimum` value, the function returns the `minimum` value.\n   * - If the `bigint` is greater than the `maximum` value, the function returns the `maximum` value.\n   * - Otherwise, it returns the original `bigint`.\n   *\n   * @param self - The `bigint` to be clamped.\n   * @param minimum - The lower end of the range.\n   * @param maximum - The upper end of the range.\n   *\n   * @example\n   * import { BigInt } from \"effect\"\n   *\n   * const clamp = BigInt.clamp({ minimum: 1n, maximum: 5n })\n   *\n   * assert.equal(clamp(3n), 3n)\n   * assert.equal(clamp(0n), 1n)\n   * assert.equal(clamp(6n), 5n)\n   *\n   * @since 2.0.0\n   */\n  (\n    options: {\n      minimum: bigint\n      maximum: bigint\n    }\n  ): (self: bigint) => bigint\n  /**\n   * Restricts the given `bigint` to be within the range specified by the `minimum` and `maximum` values.\n   *\n   * - If the `bigint` is less than the `minimum` value, the function returns the `minimum` value.\n   * - If the `bigint` is greater than the `maximum` value, the function returns the `maximum` value.\n   * - Otherwise, it returns the original `bigint`.\n   *\n   * @param self - The `bigint` to be clamped.\n   * @param minimum - The lower end of the range.\n   * @param maximum - The upper end of the range.\n   *\n   * @example\n   * import { BigInt } from \"effect\"\n   *\n   * const clamp = BigInt.clamp({ minimum: 1n, maximum: 5n })\n   *\n   * assert.equal(clamp(3n), 3n)\n   * assert.equal(clamp(0n), 1n)\n   * assert.equal(clamp(6n), 5n)\n   *\n   * @since 2.0.0\n   */\n  (\n    self: bigint,\n    options: {\n      minimum: bigint\n      maximum: bigint\n    }\n  ): bigint\n} = order.clamp(Order)\n\n/**\n * Returns the minimum between two `bigint`s.\n *\n * @param self - The first `bigint`.\n * @param that - The second `bigint`.\n *\n * @example\n * import { min } from \"effect/BigInt\"\n *\n * assert.deepStrictEqual(min(2n, 3n), 2n)\n *\n * @since 2.0.0\n */\nexport const min: {\n  /**\n   * Returns the minimum between two `bigint`s.\n   *\n   * @param self - The first `bigint`.\n   * @param that - The second `bigint`.\n   *\n   * @example\n   * import { min } from \"effect/BigInt\"\n   *\n   * assert.deepStrictEqual(min(2n, 3n), 2n)\n   *\n   * @since 2.0.0\n   */\n  (that: bigint): (self: bigint) => bigint\n  /**\n   * Returns the minimum between two `bigint`s.\n   *\n   * @param self - The first `bigint`.\n   * @param that - The second `bigint`.\n   *\n   * @example\n   * import { min } from \"effect/BigInt\"\n   *\n   * assert.deepStrictEqual(min(2n, 3n), 2n)\n   *\n   * @since 2.0.0\n   */\n  (self: bigint, that: bigint): bigint\n} = order.min(Order)\n\n/**\n * Returns the maximum between two `bigint`s.\n *\n * @param self - The first `bigint`.\n * @param that - The second `bigint`.\n *\n * @example\n * import { max } from \"effect/BigInt\"\n *\n * assert.deepStrictEqual(max(2n, 3n), 3n)\n *\n * @since 2.0.0\n */\nexport const max: {\n  /**\n   * Returns the maximum between two `bigint`s.\n   *\n   * @param self - The first `bigint`.\n   * @param that - The second `bigint`.\n   *\n   * @example\n   * import { max } from \"effect/BigInt\"\n   *\n   * assert.deepStrictEqual(max(2n, 3n), 3n)\n   *\n   * @since 2.0.0\n   */\n  (that: bigint): (self: bigint) => bigint\n  /**\n   * Returns the maximum between two `bigint`s.\n   *\n   * @param self - The first `bigint`.\n   * @param that - The second `bigint`.\n   *\n   * @example\n   * import { max } from \"effect/BigInt\"\n   *\n   * assert.deepStrictEqual(max(2n, 3n), 3n)\n   *\n   * @since 2.0.0\n   */\n  (self: bigint, that: bigint): bigint\n} = order.max(Order)\n\n/**\n * Determines the sign of a given `bigint`.\n *\n * @param n - The `bigint` to determine the sign of.\n *\n * @example\n * import { sign } from \"effect/BigInt\"\n *\n * assert.deepStrictEqual(sign(-5n), -1)\n * assert.deepStrictEqual(sign(0n), 0)\n * assert.deepStrictEqual(sign(5n), 1)\n *\n * @category math\n * @since 2.0.0\n */\nexport const sign = (n: bigint): Ordering => Order(n, bigint0)\n\n/**\n * Determines the absolute value of a given `bigint`.\n *\n * @param n - The `bigint` to determine the absolute value of.\n *\n * @example\n * import { abs } from \"effect/BigInt\"\n *\n * assert.deepStrictEqual(abs(-5n), 5n)\n * assert.deepStrictEqual(abs(0n), 0n)\n * assert.deepStrictEqual(abs(5n), 5n)\n *\n * @category math\n * @since 2.0.0\n */\nexport const abs = (n: bigint): bigint => (n < bigint0 ? -n : n)\n\n/**\n * Determines the greatest common divisor of two `bigint`s.\n *\n * @param a - The first `bigint`.\n * @param b - The second `bigint`.\n *\n * @example\n * import { gcd } from \"effect/BigInt\"\n *\n * assert.deepStrictEqual(gcd(2n, 3n), 1n)\n * assert.deepStrictEqual(gcd(2n, 4n), 2n)\n * assert.deepStrictEqual(gcd(16n, 24n), 8n)\n *\n * @category math\n * @since 2.0.0\n */\nexport const gcd: {\n  /**\n   * Determines the greatest common divisor of two `bigint`s.\n   *\n   * @param a - The first `bigint`.\n   * @param b - The second `bigint`.\n   *\n   * @example\n   * import { gcd } from \"effect/BigInt\"\n   *\n   * assert.deepStrictEqual(gcd(2n, 3n), 1n)\n   * assert.deepStrictEqual(gcd(2n, 4n), 2n)\n   * assert.deepStrictEqual(gcd(16n, 24n), 8n)\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (that: bigint): (self: bigint) => bigint\n  /**\n   * Determines the greatest common divisor of two `bigint`s.\n   *\n   * @param a - The first `bigint`.\n   * @param b - The second `bigint`.\n   *\n   * @example\n   * import { gcd } from \"effect/BigInt\"\n   *\n   * assert.deepStrictEqual(gcd(2n, 3n), 1n)\n   * assert.deepStrictEqual(gcd(2n, 4n), 2n)\n   * assert.deepStrictEqual(gcd(16n, 24n), 8n)\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (self: bigint, that: bigint): bigint\n} = dual(2, (self: bigint, that: bigint): bigint => {\n  while (that !== bigint0) {\n    const t = that\n    that = self % that\n    self = t\n  }\n  return self\n})\n\n/**\n * Determines the least common multiple of two `bigint`s.\n *\n * @param a - The first `bigint`.\n * @param b - The second `bigint`.\n *\n * @example\n * import { lcm } from \"effect/BigInt\"\n *\n * assert.deepStrictEqual(lcm(2n, 3n), 6n)\n * assert.deepStrictEqual(lcm(2n, 4n), 4n)\n * assert.deepStrictEqual(lcm(16n, 24n), 48n)\n *\n * @category math\n * @since 2.0.0\n */\nexport const lcm: {\n  /**\n   * Determines the least common multiple of two `bigint`s.\n   *\n   * @param a - The first `bigint`.\n   * @param b - The second `bigint`.\n   *\n   * @example\n   * import { lcm } from \"effect/BigInt\"\n   *\n   * assert.deepStrictEqual(lcm(2n, 3n), 6n)\n   * assert.deepStrictEqual(lcm(2n, 4n), 4n)\n   * assert.deepStrictEqual(lcm(16n, 24n), 48n)\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (that: bigint): (self: bigint) => bigint\n  /**\n   * Determines the least common multiple of two `bigint`s.\n   *\n   * @param a - The first `bigint`.\n   * @param b - The second `bigint`.\n   *\n   * @example\n   * import { lcm } from \"effect/BigInt\"\n   *\n   * assert.deepStrictEqual(lcm(2n, 3n), 6n)\n   * assert.deepStrictEqual(lcm(2n, 4n), 4n)\n   * assert.deepStrictEqual(lcm(16n, 24n), 48n)\n   *\n   * @category math\n   * @since 2.0.0\n   */\n  (self: bigint, that: bigint): bigint\n} = dual(2, (self: bigint, that: bigint): bigint => (self * that) / gcd(self, that))\n\n/**\n * Determines the square root of a given `bigint` unsafely. Throws if the given `bigint` is negative.\n *\n * @param n - The `bigint` to determine the square root of.\n *\n * @example\n * import { unsafeSqrt } from \"effect/BigInt\"\n *\n * assert.deepStrictEqual(unsafeSqrt(4n), 2n)\n * assert.deepStrictEqual(unsafeSqrt(9n), 3n)\n * assert.deepStrictEqual(unsafeSqrt(16n), 4n)\n *\n * @category math\n * @since 2.0.0\n */\nexport const unsafeSqrt = (n: bigint): bigint => {\n  if (n < bigint0) {\n    throw new RangeError(\"Cannot take the square root of a negative number\")\n  }\n  if (n < bigint2) {\n    return n\n  }\n  let x = n / bigint2\n  while (x * x > n) {\n    x = ((n / x) + x) / bigint2\n  }\n  return x\n}\n\n/**\n * Determines the square root of a given `bigint` safely. Returns `none` if the given `bigint` is negative.\n *\n * @param n - The `bigint` to determine the square root of.\n *\n * @example\n * import { BigInt, Option } from \"effect\"\n *\n * assert.deepStrictEqual(BigInt.sqrt(4n), Option.some(2n))\n * assert.deepStrictEqual(BigInt.sqrt(9n), Option.some(3n))\n * assert.deepStrictEqual(BigInt.sqrt(16n), Option.some(4n))\n * assert.deepStrictEqual(BigInt.sqrt(-1n), Option.none())\n *\n * @category math\n * @since 2.0.0\n */\nexport const sqrt = (n: bigint): Option.Option<bigint> =>\n  greaterThanOrEqualTo(n, bigint0) ? Option.some(unsafeSqrt(n)) : Option.none<bigint>()\n\n/**\n * Takes an `Iterable` of `bigint`s and returns their sum as a single `bigint\n *\n * @param collection - The collection of `bigint`s to sum.\n *\n * @example\n * import { sumAll } from \"effect/BigInt\"\n *\n * assert.deepStrictEqual(sumAll([2n, 3n, 4n]), 9n)\n *\n * @category math\n * @since 2.0.0\n */\nexport const sumAll = (collection: Iterable<bigint>): bigint => {\n  let out = bigint0\n  for (const n of collection) {\n    out += n\n  }\n  return out\n}\n\n/**\n * Takes an `Iterable` of `bigint`s and returns their multiplication as a single `number`.\n *\n * @param collection - The collection of `bigint`s to multiply.\n *\n * @example\n * import { multiplyAll } from \"effect/BigInt\"\n *\n * assert.deepStrictEqual(multiplyAll([2n, 3n, 4n]), 24n)\n *\n * @category math\n * @since 2.0.0\n */\nexport const multiplyAll = (collection: Iterable<bigint>): bigint => {\n  let out = bigint1\n  for (const n of collection) {\n    if (n === bigint0) {\n      return bigint0\n    }\n    out *= n\n  }\n  return out\n}\n\n/**\n * Takes a `bigint` and returns an `Option` of `number`.\n *\n * If the `bigint` is outside the safe integer range for JavaScript (`Number.MAX_SAFE_INTEGER`\n * and `Number.MIN_SAFE_INTEGER`), it returns `Option.none()`. Otherwise, it converts the `bigint`\n * to a number and returns `Option.some(number)`.\n *\n * @param b - The `bigint` to be converted to a `number`.\n *\n * @example\n * import { BigInt as BI, Option } from \"effect\"\n *\n * assert.deepStrictEqual(BI.toNumber(BigInt(42)), Option.some(42))\n * assert.deepStrictEqual(BI.toNumber(BigInt(Number.MAX_SAFE_INTEGER) + BigInt(1)), Option.none())\n * assert.deepStrictEqual(BI.toNumber(BigInt(Number.MIN_SAFE_INTEGER) - BigInt(1)), Option.none())\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const toNumber = (b: bigint): Option.Option<number> => {\n  if (b > BigInt(Number.MAX_SAFE_INTEGER) || b < BigInt(Number.MIN_SAFE_INTEGER)) {\n    return Option.none()\n  }\n  return Option.some(Number(b))\n}\n\n/**\n * Takes a string and returns an `Option` of `bigint`.\n *\n * If the string is empty or contains characters that cannot be converted into a `bigint`,\n * it returns `Option.none()`, otherwise, it returns `Option.some(bigint)`.\n *\n * @param s - The string to be converted to a `bigint`.\n *\n * @example\n * import { BigInt as BI, Option } from \"effect\"\n *\n * assert.deepStrictEqual(BI.fromString(\"42\"), Option.some(BigInt(42)))\n * assert.deepStrictEqual(BI.fromString(\" \"), Option.none())\n * assert.deepStrictEqual(BI.fromString(\"a\"), Option.none())\n *\n * @category conversions\n * @since 2.4.12\n */\nexport const fromString = (s: string): Option.Option<bigint> => {\n  try {\n    return s.trim() === \"\"\n      ? Option.none()\n      : Option.some(BigInt(s))\n  } catch (_) {\n    return Option.none()\n  }\n}\n\n/**\n * Takes a number and returns an `Option` of `bigint`.\n *\n * If the number is outside the safe integer range for JavaScript (`Number.MAX_SAFE_INTEGER`\n * and `Number.MIN_SAFE_INTEGER`), it returns `Option.none()`. Otherwise, it attempts to\n * convert the number to a `bigint` and returns `Option.some(bigint)`.\n *\n * @param n - The number to be converted to a `bigint`.\n *\n * @example\n * import { BigInt as BI, Option } from \"effect\"\n *\n * assert.deepStrictEqual(BI.fromNumber(42), Option.some(BigInt(42)))\n * assert.deepStrictEqual(BI.fromNumber(Number.MAX_SAFE_INTEGER + 1), Option.none())\n * assert.deepStrictEqual(BI.fromNumber(Number.MIN_SAFE_INTEGER - 1), Option.none())\n *\n * @category conversions\n * @since 2.4.12\n */\nexport const fromNumber = (n: number): Option.Option<bigint> => {\n  if (n > Number.MAX_SAFE_INTEGER || n < Number.MIN_SAFE_INTEGER) {\n    return Option.none()\n  }\n\n  try {\n    return Option.some(BigInt(n))\n  } catch (_) {\n    return Option.none()\n  }\n}\n"],"names":["equivalence","dual","Option","order","predicate","bigint0","BigInt","bigint1","bigint2","isBigInt","sum","self","that","multiply","subtract","divide","none","some","unsafeDivide","increment","n","decrement","Equivalence","bigint","Order","lessThan","lessThanOrEqualTo","greaterThan","greaterThanOrEqualTo","between","clamp","min","max","sign","abs","gcd","t","lcm","unsafeSqrt","RangeError","x","sqrt","sumAll","collection","out","multiplyAll","toNumber","b","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","fromString","s","trim","_","fromNumber"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 14373, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 14379, "column": 0}, "map": {"version":3,"file":"Layer.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Layer.ts"],"sourcesContent":["/**\n * A `Layer<ROut, E, RIn>` describes how to build one or more services in your\n * application. Services can be injected into effects via\n * `Effect.provideService`. Effects can require services via `Effect.service`.\n *\n * Layer can be thought of as recipes for producing bundles of services, given\n * their dependencies (other services).\n *\n * Construction of services can be effectful and utilize resources that must be\n * acquired and safely released when the services are done being utilized.\n *\n * By default layers are shared, meaning that if the same layer is used twice\n * the layer will only be allocated a single time.\n *\n * Because of their excellent composition properties, layers are the idiomatic\n * way in Effect-TS to create services that depend on other services.\n *\n * @since 2.0.0\n */\nimport type * as Cause from \"./Cause.js\"\nimport type * as Clock from \"./Clock.js\"\nimport type { ConfigProvider } from \"./ConfigProvider.js\"\nimport * as Context from \"./Context.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Exit from \"./Exit.js\"\nimport type { FiberRef } from \"./FiberRef.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { clockTag } from \"./internal/clock.js\"\nimport * as core from \"./internal/core.js\"\nimport * as defaultServices from \"./internal/defaultServices.js\"\nimport * as fiberRuntime from \"./internal/fiberRuntime.js\"\nimport * as internal from \"./internal/layer.js\"\nimport * as circularLayer from \"./internal/layer/circular.js\"\nimport * as query from \"./internal/query.js\"\nimport type { LogLevel } from \"./LogLevel.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type * as Request from \"./Request.js\"\nimport type * as Runtime from \"./Runtime.js\"\nimport type * as Schedule from \"./Schedule.js\"\nimport * as Scheduler from \"./Scheduler.js\"\nimport type * as Scope from \"./Scope.js\"\nimport type * as Tracer from \"./Tracer.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const LayerTypeId: unique symbol = internal.LayerTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type LayerTypeId = typeof LayerTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Layer<in ROut, out E = never, out RIn = never> extends Layer.Variance<ROut, E, RIn>, Pipeable {}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Layer {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<in ROut, out E, out RIn> {\n    readonly [LayerTypeId]: {\n      readonly _ROut: Types.Contravariant<ROut>\n      readonly _E: Types.Covariant<E>\n      readonly _RIn: Types.Covariant<RIn>\n    }\n  }\n  /**\n   * @since 3.9.0\n   * @category type-level\n   */\n  export interface Any {\n    readonly [LayerTypeId]: {\n      readonly _ROut: any\n      readonly _E: any\n      readonly _RIn: any\n    }\n  }\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Context<T extends Any> = [T] extends [Layer<infer _ROut, infer _E, infer _RIn>] ? _RIn\n    : never\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Error<T extends Any> = [T] extends [Layer<infer _ROut, infer _E, infer _RIn>] ? _E\n    : never\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Success<T extends Any> = [T] extends [Layer<infer _ROut, infer _E, infer _RIn>] ? _ROut\n    : never\n}\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const MemoMapTypeId: unique symbol = internal.MemoMapTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type MemoMapTypeId = typeof MemoMapTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface MemoMap {\n  readonly [MemoMapTypeId]: MemoMapTypeId\n\n  /** @internal */\n  readonly getOrElseMemoize: <RIn, E, ROut>(\n    layer: Layer<ROut, E, RIn>,\n    scope: Scope.Scope\n  ) => Effect.Effect<Context.Context<ROut>, E, RIn>\n}\n\n/**\n * Returns `true` if the specified value is a `Layer`, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isLayer: (u: unknown) => u is Layer<unknown, unknown, unknown> = internal.isLayer\n\n/**\n * Returns `true` if the specified `Layer` is a fresh version that will not be\n * shared, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isFresh: <RIn, E, ROut>(self: Layer<ROut, E, RIn>) => boolean = internal.isFresh\n\n/**\n * @since 3.3.0\n * @category tracing\n */\nexport const annotateLogs: {\n  /**\n   * @since 3.3.0\n   * @category tracing\n   */\n  (key: string, value: unknown): <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, R>\n  /**\n   * @since 3.3.0\n   * @category tracing\n   */\n  (values: Record<string, unknown>): <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, R>\n  /**\n   * @since 3.3.0\n   * @category tracing\n   */\n  <A, E, R>(self: Layer<A, E, R>, key: string, value: unknown): Layer<A, E, R>\n  /**\n   * @since 3.3.0\n   * @category tracing\n   */\n  <A, E, R>(self: Layer<A, E, R>, values: Record<string, unknown>): Layer<A, E, R>\n} = internal.annotateLogs\n\n/**\n * @since 3.3.0\n * @category tracing\n */\nexport const annotateSpans: {\n  /**\n   * @since 3.3.0\n   * @category tracing\n   */\n  (key: string, value: unknown): <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, R>\n  /**\n   * @since 3.3.0\n   * @category tracing\n   */\n  (values: Record<string, unknown>): <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, R>\n  /**\n   * @since 3.3.0\n   * @category tracing\n   */\n  <A, E, R>(self: Layer<A, E, R>, key: string, value: unknown): Layer<A, E, R>\n  /**\n   * @since 3.3.0\n   * @category tracing\n   */\n  <A, E, R>(self: Layer<A, E, R>, values: Record<string, unknown>): Layer<A, E, R>\n} = internal.annotateSpans\n\n/**\n * Builds a layer into a scoped value.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const build: <RIn, E, ROut>(\n  self: Layer<ROut, E, RIn>\n) => Effect.Effect<Context.Context<ROut>, E, Scope.Scope | RIn> = internal.build\n\n/**\n * Builds a layer into an `Effect` value. Any resources associated with this\n * layer will be released when the specified scope is closed unless their scope\n * has been extended. This allows building layers where the lifetime of some of\n * the services output by the layer exceed the lifetime of the effect the\n * layer is provided to.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const buildWithScope: {\n  /**\n   * Builds a layer into an `Effect` value. Any resources associated with this\n   * layer will be released when the specified scope is closed unless their scope\n   * has been extended. This allows building layers where the lifetime of some of\n   * the services output by the layer exceed the lifetime of the effect the\n   * layer is provided to.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  (scope: Scope.Scope): <RIn, E, ROut>(self: Layer<ROut, E, RIn>) => Effect.Effect<Context.Context<ROut>, E, RIn>\n  /**\n   * Builds a layer into an `Effect` value. Any resources associated with this\n   * layer will be released when the specified scope is closed unless their scope\n   * has been extended. This allows building layers where the lifetime of some of\n   * the services output by the layer exceed the lifetime of the effect the\n   * layer is provided to.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <RIn, E, ROut>(self: Layer<ROut, E, RIn>, scope: Scope.Scope): Effect.Effect<Context.Context<ROut>, E, RIn>\n} = internal.buildWithScope\n\n/**\n * Recovers from all errors.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchAll: {\n  /**\n   * Recovers from all errors.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <E, RIn2, E2, ROut2>(\n    onError: (error: E) => Layer<ROut2, E2, RIn2>\n  ): <RIn, ROut>(self: Layer<ROut, E, RIn>) => Layer<ROut & ROut2, E2, RIn2 | RIn>\n  /**\n   * Recovers from all errors.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <RIn, E, ROut, RIn2, E2, ROut2>(\n    self: Layer<ROut, E, RIn>,\n    onError: (error: E) => Layer<ROut2, E2, RIn2>\n  ): Layer<ROut & ROut2, E2, RIn | RIn2>\n} = internal.catchAll\n\n/**\n * Recovers from all errors.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchAllCause: {\n  /**\n   * Recovers from all errors.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <E, RIn2, E2, ROut2>(\n    onError: (cause: Cause.Cause<E>) => Layer<ROut2, E2, RIn2>\n  ): <RIn, ROut>(self: Layer<ROut, E, RIn>) => Layer<ROut & ROut2, E2, RIn2 | RIn>\n  /**\n   * Recovers from all errors.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <RIn, E, ROut, RIn2, E2, ROut22>(\n    self: Layer<ROut, E, RIn>,\n    onError: (cause: Cause.Cause<E>) => Layer<ROut22, E2, RIn2>\n  ): Layer<ROut & ROut22, E2, RIn | RIn2>\n} = internal.catchAllCause\n\n/**\n * Constructs a `Layer` that passes along the specified context as an\n * output.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const context: <R>() => Layer<R, never, R> = internal.context\n\n/**\n * Constructs a layer that dies with the specified defect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const die: (defect: unknown) => Layer<unknown> = internal.die\n\n/**\n * Constructs a layer that dies with the specified defect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const dieSync: (evaluate: LazyArg<unknown>) => Layer<unknown> = internal.dieSync\n\n/**\n * Replaces the layer's output with `void` and includes the layer only for its\n * side-effects.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const discard: <RIn, E, ROut>(self: Layer<ROut, E, RIn>) => Layer<never, E, RIn> = internal.discard\n\n/**\n * Constructs a layer from the specified effect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const effect: {\n  /**\n   * Constructs a layer from the specified effect.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <T extends Context.Tag<any, any>>(\n    tag: T\n  ): <E, R>(effect: Effect.Effect<Context.Tag.Service<T>, E, R>) => Layer<Context.Tag.Identifier<T>, E, R>\n  /**\n   * Constructs a layer from the specified effect.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <T extends Context.Tag<any, any>, E, R>(\n    tag: T,\n    effect: Effect.Effect<Context.Tag.Service<T>, E, R>\n  ): Layer<Context.Tag.Identifier<T>, E, R>\n} = internal.fromEffect\n\n/**\n * Constructs a layer from the specified effect discarding it's output.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const effectDiscard: <X, E, R>(effect: Effect.Effect<X, E, R>) => Layer<never, E, R> = internal.fromEffectDiscard\n\n/**\n * Constructs a layer from the specified effect, which must return one or more\n * services.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const effectContext: <A, E, R>(effect: Effect.Effect<Context.Context<A>, E, R>) => Layer<A, E, R> =\n  internal.fromEffectContext\n\n/**\n * A Layer that constructs an empty Context.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: Layer<never> = internal.empty\n\n/**\n * Extends the scope of this layer, returning a new layer that when provided\n * to an effect will not immediately release its associated resources when\n * that effect completes execution but instead when the scope the resulting\n * effect depends on is closed.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const extendScope: <RIn, E, ROut>(self: Layer<ROut, E, RIn>) => Layer<ROut, E, Scope.Scope | RIn> =\n  internal.extendScope\n\n/**\n * Constructs a layer that fails with the specified error.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fail: <E>(error: E) => Layer<unknown, E> = internal.fail\n\n/**\n * Constructs a layer that fails with the specified error.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const failSync: <E>(evaluate: LazyArg<E>) => Layer<unknown, E> = internal.failSync\n\n/**\n * Constructs a layer that fails with the specified cause.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const failCause: <E>(cause: Cause.Cause<E>) => Layer<unknown, E> = internal.failCause\n\n/**\n * Constructs a layer that fails with the specified cause.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const failCauseSync: <E>(evaluate: LazyArg<Cause.Cause<E>>) => Layer<unknown, E> = internal.failCauseSync\n\n/**\n * Constructs a layer dynamically based on the output of this layer.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  /**\n   * Constructs a layer dynamically based on the output of this layer.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, A2, E2, R2>(\n    f: (context: Context.Context<A>) => Layer<A2, E2, R2>\n  ): <E, R>(self: Layer<A, E, R>) => Layer<A2, E2 | E, R2 | R>\n  /**\n   * Constructs a layer dynamically based on the output of this layer.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Layer<A, E, R>,\n    f: (context: Context.Context<A>) => Layer<A2, E2, R2>\n  ): Layer<A2, E | E2, R | R2>\n} = internal.flatMap\n\n/**\n * Flattens layers nested in the context of an effect.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatten: {\n  /**\n   * Flattens layers nested in the context of an effect.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <I, A, E2, R2>(tag: Context.Tag<I, Layer<A, E2, R2>>): <E, R>(self: Layer<I, E, R>) => Layer<A, E2 | E, R2 | R>\n  /**\n   * Flattens layers nested in the context of an effect.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <I, E, R, A, E2, R2>(self: Layer<I, E, R>, tag: Context.Tag<I, Layer<A, E2, R2>>): Layer<A, E | E2, R | R2>\n} = internal.flatten\n\n/**\n * Creates a fresh version of this layer that will not be shared.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const fresh: <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, R> = internal.fresh\n\nconst fromFunction: <A extends Context.Tag<any, any>, B extends Context.Tag<any, any>>(\n  tagA: A,\n  tagB: B,\n  f: (a: Context.Tag.Service<A>) => Context.Tag.Service<B>\n) => Layer<Context.Tag.Identifier<B>, never, Context.Tag.Identifier<A>> = internal.fromFunction\n\nexport {\n  /**\n   * Constructs a layer from the context using the specified function.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  fromFunction as function\n}\n\n/**\n * Builds this layer and uses it until it is interrupted. This is useful when\n * your entire application is a layer, such as an HTTP server.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const launch: <RIn, E, ROut>(self: Layer<ROut, E, RIn>) => Effect.Effect<never, E, RIn> = internal.launch\n\n/**\n * Returns a new layer whose output is mapped by the specified function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  /**\n   * Returns a new layer whose output is mapped by the specified function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, B>(f: (context: Context.Context<A>) => Context.Context<B>): <E, R>(self: Layer<A, E, R>) => Layer<B, E, R>\n  /**\n   * Returns a new layer whose output is mapped by the specified function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, R, B>(\n    self: Layer<A, E, R>,\n    f: (context: Context.Context<A>) => Context.Context<B>\n  ): Layer<B, E, R>\n} = internal.map\n\n/**\n * Returns a layer with its error channel mapped using the specified function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapError: {\n  /**\n   * Returns a layer with its error channel mapped using the specified function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <E, E2>(f: (error: E) => E2): <A, R>(self: Layer<A, E, R>) => Layer<A, E2, R>\n  /**\n   * Returns a layer with its error channel mapped using the specified function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, R, E2>(self: Layer<A, E, R>, f: (error: E) => E2): Layer<A, E2, R>\n} = internal.mapError\n\n/**\n * Feeds the error or output services of this layer into the input of either\n * the specified `failure` or `success` layers, resulting in a new layer with\n * the inputs of this layer, and the error or outputs of the specified layer.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const match: {\n  /**\n   * Feeds the error or output services of this layer into the input of either\n   * the specified `failure` or `success` layers, resulting in a new layer with\n   * the inputs of this layer, and the error or outputs of the specified layer.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (error: E) => Layer<A2, E2, R2>\n      readonly onSuccess: (context: Context.Context<A>) => Layer<A3, E3, R3>\n    }\n  ): <R>(self: Layer<A, E, R>) => Layer<A2 & A3, E2 | E3, R2 | R3 | R>\n  /**\n   * Feeds the error or output services of this layer into the input of either\n   * the specified `failure` or `success` layers, resulting in a new layer with\n   * the inputs of this layer, and the error or outputs of the specified layer.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Layer<A, E, R>,\n    options: {\n      readonly onFailure: (error: E) => Layer<A2, E2, R2>\n      readonly onSuccess: (context: Context.Context<A>) => Layer<A3, E3, R3>\n    }\n  ): Layer<A2 & A3, E2 | E3, R | R2 | R3>\n} = internal.match\n\n/**\n * Feeds the error or output services of this layer into the input of either\n * the specified `failure` or `success` layers, resulting in a new layer with\n * the inputs of this layer, and the error or outputs of the specified layer.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const matchCause: {\n  /**\n   * Feeds the error or output services of this layer into the input of either\n   * the specified `failure` or `success` layers, resulting in a new layer with\n   * the inputs of this layer, and the error or outputs of the specified layer.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Layer<A2, E2, R2>\n      readonly onSuccess: (context: Context.Context<A>) => Layer<A3, E3, R3>\n    }\n  ): <R>(self: Layer<A, E, R>) => Layer<A2 & A3, E2 | E3, R2 | R3 | R>\n  /**\n   * Feeds the error or output services of this layer into the input of either\n   * the specified `failure` or `success` layers, resulting in a new layer with\n   * the inputs of this layer, and the error or outputs of the specified layer.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Layer<A, E, R>,\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Layer<A2, E2, R2>\n      readonly onSuccess: (context: Context.Context<A>) => Layer<A3, E3, R3>\n    }\n  ): Layer<A2 & A3, E2 | E3, R | R2 | R3>\n} = internal.matchCause\n\n/**\n * Returns a scoped effect that, if evaluated, will return the lazily computed\n * result of this layer.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const memoize: <RIn, E, ROut>(\n  self: Layer<ROut, E, RIn>\n) => Effect.Effect<Layer<ROut, E, RIn>, never, Scope.Scope> = internal.memoize\n\n/**\n * Merges this layer with the specified layer concurrently, producing a new layer with combined input and output types.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const merge: {\n  /**\n   * Merges this layer with the specified layer concurrently, producing a new layer with combined input and output types.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <RIn2, E2, ROut2>(\n    that: Layer<ROut2, E2, RIn2>\n  ): <RIn, E1, ROut>(self: Layer<ROut, E1, RIn>) => Layer<ROut2 | ROut, E2 | E1, RIn2 | RIn>\n  /**\n   * Merges this layer with the specified layer concurrently, producing a new layer with combined input and output types.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <RIn, E1, ROut, RIn2, E2, ROut2>(\n    self: Layer<ROut, E1, RIn>,\n    that: Layer<ROut2, E2, RIn2>\n  ): Layer<ROut | ROut2, E1 | E2, RIn | RIn2>\n} = internal.merge\n\n/**\n * Combines all the provided layers concurrently, creating a new layer with merged input, error, and output types.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const mergeAll: <Layers extends [Layer<never, any, any>, ...Array<Layer<never, any, any>>]>(\n  ...layers: Layers\n) => Layer<\n  { [k in keyof Layers]: Layer.Success<Layers[k]> }[number],\n  { [k in keyof Layers]: Layer.Error<Layers[k]> }[number],\n  { [k in keyof Layers]: Layer.Context<Layers[k]> }[number]\n> = internal.mergeAll\n\n/**\n * Translates effect failure into death of the fiber, making all failures\n * unchecked and not a part of the type of the layer.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const orDie: <A, E, R>(self: Layer<A, E, R>) => Layer<A, never, R> = internal.orDie\n\n/**\n * Executes this layer and returns its output, if it succeeds, but otherwise\n * executes the specified layer.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const orElse: {\n  /**\n   * Executes this layer and returns its output, if it succeeds, but otherwise\n   * executes the specified layer.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A2, E2, R2>(that: LazyArg<Layer<A2, E2, R2>>): <A, E, R>(self: Layer<A, E, R>) => Layer<A & A2, E2 | E, R2 | R>\n  /**\n   * Executes this layer and returns its output, if it succeeds, but otherwise\n   * executes the specified layer.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, A2, E2, R2>(self: Layer<A, E, R>, that: LazyArg<Layer<A2, E2, R2>>): Layer<A & A2, E | E2, R | R2>\n} = internal.orElse\n\n/**\n * Returns a new layer that produces the outputs of this layer but also\n * passes through the inputs.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const passthrough: <RIn, E, ROut>(self: Layer<ROut, E, RIn>) => Layer<RIn | ROut, E, RIn> = internal.passthrough\n\n/**\n * Projects out part of one of the services output by this layer using the\n * specified function.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const project: {\n  /**\n   * Projects out part of one of the services output by this layer using the\n   * specified function.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A extends Context.Tag<any, any>, B extends Context.Tag<any, any>>(\n    tagA: A,\n    tagB: B,\n    f: (a: Context.Tag.Service<A>) => Context.Tag.Service<B>\n  ): <RIn, E>(self: Layer<Context.Tag.Identifier<A>, E, RIn>) => Layer<Context.Tag.Identifier<B>, E, RIn>\n  /**\n   * Projects out part of one of the services output by this layer using the\n   * specified function.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <RIn, E, A extends Context.Tag<any, any>, B extends Context.Tag<any, any>>(\n    self: Layer<Context.Tag.Identifier<A>, E, RIn>,\n    tagA: A,\n    tagB: B,\n    f: (a: Context.Tag.Service<A>) => Context.Tag.Service<B>\n  ): Layer<Context.Tag.Identifier<B>, E, RIn>\n} = internal.project\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const locallyEffect: {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <RIn, E, ROut, RIn2, E2, ROut2>(\n    f: (_: Effect.Effect<RIn, E, Context.Context<ROut>>) => Effect.Effect<RIn2, E2, Context.Context<ROut2>>\n  ): (self: Layer<ROut, E, RIn>) => Layer<ROut2, E2, RIn2>\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <RIn, E, ROut, RIn2, E2, ROut2>(\n    self: Layer<ROut, E, RIn>,\n    f: (_: Effect.Effect<RIn, E, Context.Context<ROut>>) => Effect.Effect<RIn2, E2, Context.Context<ROut2>>\n  ): Layer<ROut2, E2, RIn2>\n} = internal.locallyEffect\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const locally: {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <X>(ref: FiberRef<X>, value: X): <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, R>\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, X>(self: Layer<A, E, R>, ref: FiberRef<X>, value: X): Layer<A, E, R>\n} = internal.fiberRefLocally\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const locallyWith: {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <X>(ref: FiberRef<X>, value: (_: X) => X): <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, R>\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, X>(self: Layer<A, E, R>, ref: FiberRef<X>, value: (_: X) => X): Layer<A, E, R>\n} = internal.fiberRefLocallyWith\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const locallyScoped: <A>(self: FiberRef<A>, value: A) => Layer<never> = internal.fiberRefLocallyScoped\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const fiberRefLocallyScopedWith: <A>(self: FiberRef<A>, value: (_: A) => A) => Layer<never> =\n  internal.fiberRefLocallyScopedWith\n\n/**\n * Retries constructing this layer according to the specified schedule.\n *\n * @since 2.0.0\n * @category retrying\n */\nexport const retry: {\n  /**\n   * Retries constructing this layer according to the specified schedule.\n   *\n   * @since 2.0.0\n   * @category retrying\n   */\n  <X, E, RIn2>(\n    schedule: Schedule.Schedule<X, E, RIn2>\n  ): <ROut, RIn>(self: Layer<ROut, E, RIn>) => Layer<ROut, E, RIn2 | RIn>\n  /**\n   * Retries constructing this layer according to the specified schedule.\n   *\n   * @since 2.0.0\n   * @category retrying\n   */\n  <ROut, E, RIn, X, RIn2>(\n    self: Layer<ROut, E, RIn>,\n    schedule: Schedule.Schedule<X, E, RIn2>\n  ): Layer<ROut, E, RIn | RIn2>\n} = internal.retry\n\n/**\n * A layer that constructs a scope and closes it when the workflow the layer\n * is provided to completes execution, whether by success, failure, or\n * interruption. This can be used to close a scope when providing a layer to a\n * workflow.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const scope: Layer<Scope.CloseableScope> = internal.scope\n\n/**\n * Constructs a layer from the specified scoped effect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const scoped: {\n  /**\n   * Constructs a layer from the specified scoped effect.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <T extends Context.Tag<any, any>>(tag: T): <E, R>(\n    effect: Effect.Effect<Context.Tag.Service<T>, E, R>\n  ) => Layer<Context.Tag.Identifier<T>, E, Exclude<R, Scope.Scope>>\n  /**\n   * Constructs a layer from the specified scoped effect.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <T extends Context.Tag<any, any>, E, R>(\n    tag: T,\n    effect: Effect.Effect<Context.Tag.Service<T>, E, R>\n  ): Layer<Context.Tag.Identifier<T>, E, Exclude<R, Scope.Scope>>\n} = internal.scoped\n\n/**\n * Constructs a layer from the specified scoped effect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const scopedDiscard: <X, E, R>(effect: Effect.Effect<X, E, R>) => Layer<never, E, Exclude<R, Scope.Scope>> =\n  internal.scopedDiscard\n\n/**\n * Constructs a layer from the specified scoped effect, which must return one\n * or more services.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const scopedContext: <A, E, R>(\n  effect: Effect.Effect<Context.Context<A>, E, R>\n) => Layer<A, E, Exclude<R, Scope.Scope>> = internal.scopedContext\n\n/**\n * Constructs a layer that accesses and returns the specified service from the\n * context.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const service: <T extends Context.Tag<any, any>>(\n  tag: T\n) => Layer<Context.Tag.Identifier<T>, never, Context.Tag.Identifier<T>> = internal.service\n\n/**\n * Constructs a layer from the specified value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeed: {\n  /**\n   * Constructs a layer from the specified value.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <T extends Context.Tag<any, any>>(tag: T): (resource: Context.Tag.Service<T>) => Layer<Context.Tag.Identifier<T>>\n  /**\n   * Constructs a layer from the specified value.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <T extends Context.Tag<any, any>>(tag: T, resource: Context.Tag.Service<T>): Layer<Context.Tag.Identifier<T>>\n} = internal.succeed\n\n/**\n * Constructs a layer from the specified value, which must return one or more\n * services.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeedContext: <A>(context: Context.Context<A>) => Layer<A> = internal.succeedContext\n\n/**\n * Lazily constructs a layer. This is useful to avoid infinite recursion when\n * creating layers that refer to themselves.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const suspend: <RIn, E, ROut>(evaluate: LazyArg<Layer<ROut, E, RIn>>) => Layer<ROut, E, RIn> = internal.suspend\n\n/**\n * Lazily constructs a layer from the specified value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const sync: {\n  /**\n   * Lazily constructs a layer from the specified value.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <T extends Context.Tag<any, any>>(\n    tag: T\n  ): (evaluate: LazyArg<Context.Tag.Service<T>>) => Layer<Context.Tag.Identifier<T>>\n  /**\n   * Lazily constructs a layer from the specified value.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <T extends Context.Tag<any, any>>(tag: T, evaluate: LazyArg<Context.Tag.Service<T>>): Layer<Context.Tag.Identifier<T>>\n} = internal.sync\n\n/**\n * Lazily constructs a layer from the specified value, which must return one or more\n * services.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const syncContext: <A>(evaluate: LazyArg<Context.Context<A>>) => Layer<A> = internal.syncContext\n\n/**\n * Performs the specified effect if this layer succeeds.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tap: {\n  /**\n   * Performs the specified effect if this layer succeeds.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <ROut, XR extends ROut, RIn2, E2, X>(\n    f: (context: Context.Context<XR>) => Effect.Effect<X, E2, RIn2>\n  ): <RIn, E>(self: Layer<ROut, E, RIn>) => Layer<ROut, E2 | E, RIn2 | RIn>\n  /**\n   * Performs the specified effect if this layer succeeds.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <RIn, E, ROut, XR extends ROut, RIn2, E2, X>(\n    self: Layer<ROut, E, RIn>,\n    f: (context: Context.Context<XR>) => Effect.Effect<X, E2, RIn2>\n  ): Layer<ROut, E | E2, RIn | RIn2>\n} = internal.tap\n\n/**\n * Performs the specified effect if this layer fails.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapError: {\n  /**\n   * Performs the specified effect if this layer fails.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <E, XE extends E, RIn2, E2, X>(\n    f: (e: XE) => Effect.Effect<X, E2, RIn2>\n  ): <RIn, ROut>(self: Layer<ROut, E, RIn>) => Layer<ROut, E | E2, RIn2 | RIn>\n  /**\n   * Performs the specified effect if this layer fails.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <RIn, E, XE extends E, ROut, RIn2, E2, X>(\n    self: Layer<ROut, E, RIn>,\n    f: (e: XE) => Effect.Effect<X, E2, RIn2>\n  ): Layer<ROut, E | E2, RIn | RIn2>\n} = internal.tapError\n\n/**\n * Performs the specified effect if this layer fails.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapErrorCause: {\n  /**\n   * Performs the specified effect if this layer fails.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <E, XE extends E, RIn2, E2, X>(\n    f: (cause: Cause.Cause<XE>) => Effect.Effect<X, E2, RIn2>\n  ): <RIn, ROut>(self: Layer<ROut, E, RIn>) => Layer<ROut, E | E2, RIn2 | RIn>\n  /**\n   * Performs the specified effect if this layer fails.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <RIn, E, XE extends E, ROut, RIn2, E2, X>(\n    self: Layer<ROut, E, RIn>,\n    f: (cause: Cause.Cause<XE>) => Effect.Effect<X, E2, RIn2>\n  ): Layer<ROut, E | E2, RIn | RIn2>\n} = internal.tapErrorCause\n\n/**\n * Converts a layer that requires no services into a scoped runtime, which can\n * be used to execute effects.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const toRuntime: <RIn, E, ROut>(\n  self: Layer<ROut, E, RIn>\n) => Effect.Effect<Runtime.Runtime<ROut>, E, Scope.Scope | RIn> = internal.toRuntime\n\n/**\n * Converts a layer that requires no services into a scoped runtime, which can\n * be used to execute effects.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const toRuntimeWithMemoMap: {\n  /**\n   * Converts a layer that requires no services into a scoped runtime, which can\n   * be used to execute effects.\n   *\n   * @since 2.0.0\n   * @category conversions\n   */\n  (\n    memoMap: MemoMap\n  ): <RIn, E, ROut>(self: Layer<ROut, E, RIn>) => Effect.Effect<Runtime.Runtime<ROut>, E, Scope.Scope | RIn>\n  /**\n   * Converts a layer that requires no services into a scoped runtime, which can\n   * be used to execute effects.\n   *\n   * @since 2.0.0\n   * @category conversions\n   */\n  <RIn, E, ROut>(\n    self: Layer<ROut, E, RIn>,\n    memoMap: MemoMap\n  ): Effect.Effect<Runtime.Runtime<ROut>, E, Scope.Scope | RIn>\n} = internal.toRuntimeWithMemoMap\n\n/**\n * Feeds the output services of this builder into the input of the specified\n * builder, resulting in a new builder with the inputs of this builder as\n * well as any leftover inputs, and the outputs of the specified builder.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const provide: {\n  /**\n   * Feeds the output services of this builder into the input of the specified\n   * builder, resulting in a new builder with the inputs of this builder as\n   * well as any leftover inputs, and the outputs of the specified builder.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <RIn, E, ROut>(\n    that: Layer<ROut, E, RIn>\n  ): <RIn2, E2, ROut2>(self: Layer<ROut2, E2, RIn2>) => Layer<ROut2, E | E2, RIn | Exclude<RIn2, ROut>>\n  /**\n   * Feeds the output services of this builder into the input of the specified\n   * builder, resulting in a new builder with the inputs of this builder as\n   * well as any leftover inputs, and the outputs of the specified builder.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <const Layers extends [Layer.Any, ...Array<Layer.Any>]>(that: Layers): <A, E, R>(\n    self: Layer<A, E, R>\n  ) => Layer<\n    A,\n    E | { [k in keyof Layers]: Layer.Error<Layers[k]> }[number],\n    | { [k in keyof Layers]: Layer.Context<Layers[k]> }[number]\n    | Exclude<R, { [k in keyof Layers]: Layer.Success<Layers[k]> }[number]>\n  >\n  /**\n   * Feeds the output services of this builder into the input of the specified\n   * builder, resulting in a new builder with the inputs of this builder as\n   * well as any leftover inputs, and the outputs of the specified builder.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <RIn2, E2, ROut2, RIn, E, ROut>(\n    self: Layer<ROut2, E2, RIn2>,\n    that: Layer<ROut, E, RIn>\n  ): Layer<ROut2, E | E2, RIn | Exclude<RIn2, ROut>>\n  /**\n   * Feeds the output services of this builder into the input of the specified\n   * builder, resulting in a new builder with the inputs of this builder as\n   * well as any leftover inputs, and the outputs of the specified builder.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, const Layers extends [Layer.Any, ...Array<Layer.Any>]>(self: Layer<A, E, R>, that: Layers): Layer<\n    A,\n    E | { [k in keyof Layers]: Layer.Error<Layers[k]> }[number],\n    | { [k in keyof Layers]: Layer.Context<Layers[k]> }[number]\n    | Exclude<R, { [k in keyof Layers]: Layer.Success<Layers[k]> }[number]>\n  >\n} = internal.provide\n\n/**\n * Feeds the output services of this layer into the input of the specified\n * layer, resulting in a new layer with the inputs of this layer, and the\n * outputs of both layers.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const provideMerge: {\n  /**\n   * Feeds the output services of this layer into the input of the specified\n   * layer, resulting in a new layer with the inputs of this layer, and the\n   * outputs of both layers.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <RIn, E, ROut>(\n    self: Layer<ROut, E, RIn>\n  ): <RIn2, E2, ROut2>(that: Layer<ROut2, E2, RIn2>) => Layer<ROut | ROut2, E | E2, RIn | Exclude<RIn2, ROut>>\n  /**\n   * Feeds the output services of this layer into the input of the specified\n   * layer, resulting in a new layer with the inputs of this layer, and the\n   * outputs of both layers.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <RIn2, E2, ROut2, RIn, E, ROut>(\n    that: Layer<ROut2, E2, RIn2>,\n    self: Layer<ROut, E, RIn>\n  ): Layer<ROut2 | ROut, E2 | E, RIn | Exclude<RIn2, ROut>>\n} = internal.provideMerge\n\n/**\n * Combines this layer with the specified layer concurrently, creating a new layer with merged input types and\n * combined output types using the provided function.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWith: {\n  /**\n   * Combines this layer with the specified layer concurrently, creating a new layer with merged input types and\n   * combined output types using the provided function.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <B, E2, R2, A, C>(\n    that: Layer<B, E2, R2>,\n    f: (a: Context.Context<A>, b: Context.Context<B>) => Context.Context<C>\n  ): <E, R>(self: Layer<A, E, R>) => Layer<C, E2 | E, R2 | R>\n  /**\n   * Combines this layer with the specified layer concurrently, creating a new layer with merged input types and\n   * combined output types using the provided function.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, R, B, E2, R2, C>(\n    self: Layer<A, E, R>,\n    that: Layer<B, E2, R2>,\n    f: (a: Context.Context<A>, b: Context.Context<B>) => Context.Context<C>\n  ): Layer<C, E | E2, R | R2>\n} = internal.zipWith\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const unwrapEffect: <A, E1, R1, E, R>(self: Effect.Effect<Layer<A, E1, R1>, E, R>) => Layer<A, E | E1, R | R1> =\n  internal.unwrapEffect\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const unwrapScoped: <A, E1, R1, E, R>(\n  self: Effect.Effect<Layer<A, E1, R1>, E, R>\n) => Layer<A, E | E1, R1 | Exclude<R, Scope.Scope>> = internal.unwrapScoped\n\n/**\n * @since 2.0.0\n * @category clock\n */\nexport const setClock: <A extends Clock.Clock>(clock: A) => Layer<never> = <A extends Clock.Clock>(\n  clock: A\n): Layer<never> =>\n  scopedDiscard(\n    fiberRuntime.fiberRefLocallyScopedWith(defaultServices.currentServices, Context.add(clockTag, clock))\n  )\n\n/**\n * Sets the current `ConfigProvider`.\n *\n * @since 2.0.0\n * @category config\n */\nexport const setConfigProvider: (configProvider: ConfigProvider) => Layer<never> = circularLayer.setConfigProvider\n\n/**\n * Adds the provided span to the span stack.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const parentSpan: (span: Tracer.AnySpan) => Layer<Tracer.ParentSpan> = circularLayer.parentSpan\n\n/**\n * @since 2.0.0\n * @category requests & batching\n */\nexport const setRequestBatching: (requestBatching: boolean) => Layer<never> = (\n  requestBatching: boolean\n) =>\n  scopedDiscard(\n    fiberRuntime.fiberRefLocallyScoped(core.currentRequestBatching, requestBatching)\n  )\n\n/**\n * @since 2.0.0\n * @category requests & batching\n */\nexport const setRequestCaching: (requestCaching: boolean) => Layer<never> = (\n  requestCaching: boolean\n) =>\n  scopedDiscard(\n    fiberRuntime.fiberRefLocallyScoped(query.currentCacheEnabled, requestCaching)\n  )\n\n/**\n * @since 2.0.0\n * @category requests & batching\n */\nexport const setRequestCache: {\n  /**\n   * @since 2.0.0\n   * @category requests & batching\n   */\n  <E, R>(cache: Effect.Effect<Request.Cache, E, R>): Layer<never, E, Exclude<R, Scope.Scope>>\n  /**\n   * @since 2.0.0\n   * @category requests & batching\n   */\n  (cache: Request.Cache): Layer<never>\n} = (<E, R>(cache: Request.Cache | Effect.Effect<Request.Cache, E, R>) =>\n  scopedDiscard(\n    core.isEffect(cache) ?\n      core.flatMap(cache, (x) => fiberRuntime.fiberRefLocallyScoped(query.currentCache as any, x)) :\n      fiberRuntime.fiberRefLocallyScoped(query.currentCache as any, cache)\n  )) as any\n\n/**\n * @since 2.0.0\n * @category scheduler\n */\nexport const setScheduler: (scheduler: Scheduler.Scheduler) => Layer<never> = (\n  scheduler: Scheduler.Scheduler\n): Layer<never> =>\n  scopedDiscard(\n    fiberRuntime.fiberRefLocallyScoped(Scheduler.currentScheduler, scheduler)\n  )\n\n/**\n * Create and add a span to the current span stack.\n *\n * The span is ended when the Layer is released.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const span: (\n  name: string,\n  options?: Tracer.SpanOptions & {\n    readonly onEnd?:\n      | ((span: Tracer.Span, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<void>)\n      | undefined\n  }\n) => Layer<Tracer.ParentSpan> = circularLayer.span\n\n/**\n * Create a Layer that sets the current Tracer\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const setTracer: (tracer: Tracer.Tracer) => Layer<never> = circularLayer.setTracer\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const setTracerEnabled: (enabled: boolean) => Layer<never> = (enabled: boolean) =>\n  scopedDiscard(\n    fiberRuntime.fiberRefLocallyScoped(core.currentTracerEnabled, enabled)\n  )\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const setTracerTiming: (enabled: boolean) => Layer<never> = (enabled: boolean) =>\n  scopedDiscard(\n    fiberRuntime.fiberRefLocallyScoped(core.currentTracerTimingEnabled, enabled)\n  )\n\n/**\n * @since 2.0.0\n * @category logging\n */\nexport const setUnhandledErrorLogLevel: (level: Option.Option<LogLevel>) => Layer<never> = (\n  level: Option.Option<LogLevel>\n): Layer<never> =>\n  scopedDiscard(\n    fiberRuntime.fiberRefLocallyScoped(core.currentUnhandledErrorLogLevel, level)\n  )\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const withSpan: {\n  /**\n   * @since 2.0.0\n   * @category tracing\n   */\n  (\n    name: string,\n    options?: Tracer.SpanOptions & {\n      readonly onEnd?:\n        | ((span: Tracer.Span, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<void>)\n        | undefined\n    }\n  ): <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, Exclude<R, Tracer.ParentSpan>>\n  /**\n   * @since 2.0.0\n   * @category tracing\n   */\n  <A, E, R>(\n    self: Layer<A, E, R>,\n    name: string,\n    options?: Tracer.SpanOptions & {\n      readonly onEnd?:\n        | ((span: Tracer.Span, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<void>)\n        | undefined\n    }\n  ): Layer<A, E, Exclude<R, Tracer.ParentSpan>>\n} = internal.withSpan\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const withParentSpan: {\n  /**\n   * @since 2.0.0\n   * @category tracing\n   */\n  (span: Tracer.AnySpan): <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, Exclude<R, Tracer.ParentSpan>>\n  /**\n   * @since 2.0.0\n   * @category tracing\n   */\n  <A, E, R>(self: Layer<A, E, R>, span: Tracer.AnySpan): Layer<A, E, Exclude<R, Tracer.ParentSpan>>\n} = internal.withParentSpan\n\n// -----------------------------------------------------------------------------\n// memo map\n// -----------------------------------------------------------------------------\n\n/**\n * Constructs a `MemoMap` that can be used to build additional layers.\n *\n * @since 2.0.0\n * @category memo map\n */\nexport const makeMemoMap: Effect.Effect<MemoMap> = internal.makeMemoMap\n\n/**\n * Builds a layer into an `Effect` value, using the specified `MemoMap` to memoize\n * the layer construction.\n *\n * @since 2.0.0\n * @category memo map\n */\nexport const buildWithMemoMap: {\n  /**\n   * Builds a layer into an `Effect` value, using the specified `MemoMap` to memoize\n   * the layer construction.\n   *\n   * @since 2.0.0\n   * @category memo map\n   */\n  (\n    memoMap: MemoMap,\n    scope: Scope.Scope\n  ): <RIn, E, ROut>(self: Layer<ROut, E, RIn>) => Effect.Effect<Context.Context<ROut>, E, RIn>\n  /**\n   * Builds a layer into an `Effect` value, using the specified `MemoMap` to memoize\n   * the layer construction.\n   *\n   * @since 2.0.0\n   * @category memo map\n   */\n  <RIn, E, ROut>(\n    self: Layer<ROut, E, RIn>,\n    memoMap: MemoMap,\n    scope: Scope.Scope\n  ): Effect.Effect<Context.Context<ROut>, E, RIn>\n} = internal.buildWithMemoMap\n"],"names":["Context","clockTag","core","defaultServices","fiberRuntime","internal","circularLayer","query","Scheduler","LayerTypeId","MemoMapTypeId","isLayer","isFresh","annotateLogs","annotateSpans","build","buildWithScope","catchAll","catchAllCause","context","die","dieSync","discard","effect","fromEffect","effectDiscard","fromEffectDiscard","effectContext","fromEffectContext","empty","extendScope","fail","failSync","failCause","failCauseSync","flatMap","flatten","fresh","fromFunction","function","launch","map","mapError","match","matchCause","memoize","merge","mergeAll","orDie","orElse","passthrough","project","locallyEffect","locally","fiberRefLocally","locallyWith","fiberRefLocallyWith","locallyScoped","fiberRefLocallyScoped","fiberRefLocallyScopedWith","retry","scope","scoped","scopedDiscard","scopedContext","service","succeed","succeedContext","suspend","sync","syncContext","tap","tapError","tapErrorCause","toRuntime","toRuntimeWithMemoMap","provide","provideMerge","zipWith","unwrapEffect","unwrapScoped","setClock","clock","currentServices","add","setConfigProvider","parentSpan","setRequestBatching","requestBatching","currentRequestBatching","setRequestCaching","requestCaching","currentCacheEnabled","setRequestCache","cache","isEffect","x","currentCache","setScheduler","scheduler","currentScheduler","span","setTracer","setTracerEnabled","enabled","currentTracerEnabled","setTracerTiming","currentTracerTimingEnabled","setUnhandledErrorLogLevel","level","currentUnhandledErrorLogLevel","withSpan","withParentSpan","makeMemoMap","buildWithMemoMap"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 14562, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 14568, "column": 0}, "map": {"version":3,"file":"DateTime.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/DateTime.ts"],"sourcesContent":["/**\n * @since 3.6.0\n */\nimport { IllegalArgumentException } from \"./Cause.js\"\nimport * as Clock from \"./Clock.js\"\nimport * as Context from \"./Context.js\"\nimport * as Duration from \"./Duration.js\"\nimport * as Effect from \"./Effect.js\"\nimport * as Either from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport * as Equivalence_ from \"./Equivalence.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { dual, pipe } from \"./Function.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport * as Hash from \"./Hash.js\"\nimport * as Inspectable from \"./Inspectable.js\"\nimport * as Layer from \"./Layer.js\"\nimport * as Option from \"./Option.js\"\nimport * as order from \"./Order.js\"\nimport { type Pipeable, pipeArguments } from \"./Pipeable.js\"\nimport * as Predicate from \"./Predicate.js\"\nimport type { Mutable } from \"./Types.js\"\n\n/**\n * @since 3.6.0\n * @category type ids\n */\nexport const TypeId: unique symbol = Symbol.for(\"effect/DateTime\")\n\n/**\n * @since 3.6.0\n * @category type ids\n */\nexport type TypeId = typeof TypeId\n\n/**\n * A `DateTime` represents a point in time. It can optionally have a time zone\n * associated with it.\n *\n * @since 3.6.0\n * @category models\n */\nexport type DateTime = Utc | Zoned\n\n/**\n * @since 3.6.0\n * @category models\n */\nexport interface Utc extends DateTime.Proto {\n  readonly _tag: \"Utc\"\n  readonly epochMillis: number\n  /** @internal */\n  partsUtc: DateTime.PartsWithWeekday\n}\n\n/**\n * @since 3.6.0\n * @category models\n */\nexport interface Zoned extends DateTime.Proto {\n  readonly _tag: \"Zoned\"\n  readonly epochMillis: number\n  readonly zone: TimeZone\n  /** @internal */\n  adjustedEpochMillis?: number\n  /** @internal */\n  partsAdjusted?: DateTime.PartsWithWeekday\n  /** @internal */\n  partsUtc?: DateTime.PartsWithWeekday\n}\n\n/**\n * @since 3.6.0\n * @category models\n */\nexport declare namespace DateTime {\n  /**\n   * @since 3.6.0\n   * @category models\n   */\n  export type Input = DateTime | Partial<Parts> | Date | number | string\n\n  /**\n   * @since 3.6.0\n   * @category models\n   */\n  export type PreserveZone<A extends DateTime.Input> = A extends Zoned ? Zoned : Utc\n\n  /**\n   * @since 3.6.0\n   * @category models\n   */\n  export type Unit = UnitSingular | UnitPlural\n\n  /**\n   * @since 3.6.0\n   * @category models\n   */\n  export type UnitSingular =\n    | \"milli\"\n    | \"second\"\n    | \"minute\"\n    | \"hour\"\n    | \"day\"\n    | \"week\"\n    | \"month\"\n    | \"year\"\n\n  /**\n   * @since 3.6.0\n   * @category models\n   */\n  export type UnitPlural =\n    | \"millis\"\n    | \"seconds\"\n    | \"minutes\"\n    | \"hours\"\n    | \"days\"\n    | \"weeks\"\n    | \"months\"\n    | \"years\"\n\n  /**\n   * @since 3.6.0\n   * @category models\n   */\n  export interface PartsWithWeekday {\n    readonly millis: number\n    readonly seconds: number\n    readonly minutes: number\n    readonly hours: number\n    readonly day: number\n    readonly weekDay: number\n    readonly month: number\n    readonly year: number\n  }\n\n  /**\n   * @since 3.6.0\n   * @category models\n   */\n  export interface Parts {\n    readonly millis: number\n    readonly seconds: number\n    readonly minutes: number\n    readonly hours: number\n    readonly day: number\n    readonly month: number\n    readonly year: number\n  }\n\n  /**\n   * @since 3.6.0\n   * @category models\n   */\n  export interface PartsForMath {\n    readonly millis: number\n    readonly seconds: number\n    readonly minutes: number\n    readonly hours: number\n    readonly days: number\n    readonly weeks: number\n    readonly months: number\n    readonly years: number\n  }\n\n  /**\n   * @since 3.6.0\n   * @category models\n   */\n  export interface Proto extends Pipeable, Inspectable.Inspectable {\n    readonly [TypeId]: TypeId\n  }\n}\n\n/**\n * @since 3.6.0\n * @category type ids\n */\nexport const TimeZoneTypeId: unique symbol = Symbol.for(\"effect/DateTime/TimeZone\")\n\n/**\n * @since 3.6.0\n * @category type ids\n */\nexport type TimeZoneTypeId = typeof TimeZoneTypeId\n\n/**\n * @since 3.6.0\n * @category models\n */\nexport type TimeZone = TimeZone.Offset | TimeZone.Named\n\n/**\n * @since 3.6.0\n * @category models\n */\nexport declare namespace TimeZone {\n  /**\n   * @since 3.6.0\n   * @category models\n   */\n  export interface Proto extends Inspectable.Inspectable {\n    readonly [TimeZoneTypeId]: TimeZoneTypeId\n  }\n\n  /**\n   * @since 3.6.0\n   * @category models\n   */\n  export interface Offset extends Proto {\n    readonly _tag: \"Offset\"\n    readonly offset: number\n  }\n\n  /**\n   * @since 3.6.0\n   * @category models\n   */\n  export interface Named extends Proto {\n    readonly _tag: \"Named\"\n    readonly id: string\n    /** @internal */\n    readonly format: Intl.DateTimeFormat\n  }\n}\n\nconst Proto = {\n  [TypeId]: TypeId,\n  pipe() {\n    return pipeArguments(this, arguments)\n  },\n  [Inspectable.NodeInspectSymbol](this: DateTime) {\n    return this.toString()\n  },\n  toJSON(this: DateTime) {\n    return toDateUtc(this).toJSON()\n  }\n}\n\nconst ProtoUtc = {\n  ...Proto,\n  _tag: \"Utc\",\n  [Hash.symbol](this: Utc) {\n    return Hash.cached(this, Hash.number(this.epochMillis))\n  },\n  [Equal.symbol](this: Utc, that: unknown) {\n    return isDateTime(that) && that._tag === \"Utc\" && this.epochMillis === that.epochMillis\n  },\n  toString(this: Utc) {\n    return `DateTime.Utc(${toDateUtc(this).toJSON()})`\n  }\n}\n\nconst ProtoZoned = {\n  ...Proto,\n  _tag: \"Zoned\",\n  [Hash.symbol](this: Zoned) {\n    return pipe(\n      Hash.number(this.epochMillis),\n      Hash.combine(Hash.hash(this.zone)),\n      Hash.cached(this)\n    )\n  },\n  [Equal.symbol](this: Zoned, that: unknown) {\n    return isDateTime(that) && that._tag === \"Zoned\" && this.epochMillis === that.epochMillis &&\n      Equal.equals(this.zone, that.zone)\n  },\n  toString(this: Zoned) {\n    return `DateTime.Zoned(${formatIsoZoned(this)})`\n  }\n}\n\nconst ProtoTimeZone = {\n  [TimeZoneTypeId]: TimeZoneTypeId,\n  [Inspectable.NodeInspectSymbol](this: TimeZone) {\n    return this.toString()\n  }\n}\n\nconst ProtoTimeZoneNamed = {\n  ...ProtoTimeZone,\n  _tag: \"Named\",\n  [Hash.symbol](this: TimeZone.Named) {\n    return Hash.cached(this, Hash.string(`Named:${this.id}`))\n  },\n  [Equal.symbol](this: TimeZone.Named, that: unknown) {\n    return isTimeZone(that) && that._tag === \"Named\" && this.id === that.id\n  },\n  toString(this: TimeZone.Named) {\n    return `TimeZone.Named(${this.id})`\n  },\n  toJSON(this: TimeZone.Named) {\n    return {\n      _id: \"TimeZone\",\n      _tag: \"Named\",\n      id: this.id\n    }\n  }\n}\n\nconst ProtoTimeZoneOffset = {\n  ...ProtoTimeZone,\n  _tag: \"Offset\",\n  [Hash.symbol](this: TimeZone.Offset) {\n    return Hash.cached(this, Hash.string(`Offset:${this.offset}`))\n  },\n  [Equal.symbol](this: TimeZone.Offset, that: unknown) {\n    return isTimeZone(that) && that._tag === \"Offset\" && this.offset === that.offset\n  },\n  toString(this: TimeZone.Offset) {\n    return `TimeZone.Offset(${offsetToString(this.offset)})`\n  },\n  toJSON(this: TimeZone.Offset) {\n    return {\n      _id: \"TimeZone\",\n      _tag: \"Offset\",\n      offset: this.offset\n    }\n  }\n}\n\nconst makeZonedProto = (epochMillis: number, zone: TimeZone, partsUtc?: DateTime.PartsWithWeekday): Zoned => {\n  const self = Object.create(ProtoZoned)\n  self.epochMillis = epochMillis\n  self.zone = zone\n  self.partsUtc = partsUtc\n  return self\n}\n\n// =============================================================================\n// guards\n// =============================================================================\n\n/**\n * @since 3.6.0\n * @category guards\n */\nexport const isDateTime = (u: unknown): u is DateTime => Predicate.hasProperty(u, TypeId)\n\nconst isDateTimeArgs = (args: IArguments) => isDateTime(args[0])\n\n/**\n * @since 3.6.0\n * @category guards\n */\nexport const isTimeZone = (u: unknown): u is TimeZone => Predicate.hasProperty(u, TimeZoneTypeId)\n\n/**\n * @since 3.6.0\n * @category guards\n */\nexport const isTimeZoneOffset = (u: unknown): u is TimeZone.Offset => isTimeZone(u) && u._tag === \"Offset\"\n\n/**\n * @since 3.6.0\n * @category guards\n */\nexport const isTimeZoneNamed = (u: unknown): u is TimeZone.Named => isTimeZone(u) && u._tag === \"Named\"\n\n/**\n * @since 3.6.0\n * @category guards\n */\nexport const isUtc = (self: DateTime): self is Utc => self._tag === \"Utc\"\n\n/**\n * @since 3.6.0\n * @category guards\n */\nexport const isZoned = (self: DateTime): self is Zoned => self._tag === \"Zoned\"\n\n// =============================================================================\n// instances\n// =============================================================================\n\n/**\n * @since 3.6.0\n * @category instances\n */\nexport const Equivalence: Equivalence_.Equivalence<DateTime> = Equivalence_.make((a, b) =>\n  a.epochMillis === b.epochMillis\n)\n\n/**\n * @since 3.6.0\n * @category instances\n */\nexport const Order: order.Order<DateTime> = order.make((self, that) =>\n  self.epochMillis < that.epochMillis ? -1 : self.epochMillis > that.epochMillis ? 1 : 0\n)\n\n/**\n * @since 3.6.0\n */\nexport const clamp: {\n  /**\n   * @since 3.6.0\n   */\n  (options: { minimum: DateTime; maximum: DateTime }): (self: DateTime) => DateTime\n  /**\n   * @since 3.6.0\n   */\n  (self: DateTime, options: { minimum: DateTime; maximum: DateTime }): DateTime\n} = order.clamp(Order)\n\n// =============================================================================\n// constructors\n// =============================================================================\n\nconst makeUtc = (epochMillis: number): Utc => {\n  const self = Object.create(ProtoUtc)\n  self.epochMillis = epochMillis\n  return self\n}\n\n/**\n * Create a `DateTime` from a `Date`.\n *\n * If the `Date` is invalid, an `IllegalArgumentException` will be thrown.\n *\n * @since 3.6.0\n * @category constructors\n */\nexport const unsafeFromDate = (date: Date): Utc => {\n  const epochMillis = date.getTime()\n  if (Number.isNaN(epochMillis)) {\n    throw new IllegalArgumentException(\"Invalid date\")\n  }\n  return makeUtc(epochMillis)\n}\n\n/**\n * Create a `DateTime` from one of the following:\n *\n * - A `DateTime`\n * - A `Date` instance (invalid dates will throw an `IllegalArgumentException`)\n * - The `number` of milliseconds since the Unix epoch\n * - An object with the parts of a date\n * - A `string` that can be parsed by `Date.parse`\n *\n * @since 3.6.0\n * @category constructors\n * @example\n * import { DateTime } from \"effect\"\n *\n * // from Date\n * DateTime.unsafeMake(new Date())\n *\n * // from parts\n * DateTime.unsafeMake({ year: 2024 })\n *\n * // from string\n * DateTime.unsafeMake(\"2024-01-01\")\n */\nexport const unsafeMake = <A extends DateTime.Input>(input: A): DateTime.PreserveZone<A> => {\n  if (isDateTime(input)) {\n    return input as DateTime.PreserveZone<A>\n  } else if (input instanceof Date) {\n    return unsafeFromDate(input) as DateTime.PreserveZone<A>\n  } else if (typeof input === \"object\") {\n    const date = new Date(0)\n    setPartsDate(date, input)\n    return unsafeFromDate(date) as DateTime.PreserveZone<A>\n  }\n  return unsafeFromDate(new Date(input)) as DateTime.PreserveZone<A>\n}\n\n/**\n * Create a `DateTime.Zoned` using `DateTime.unsafeMake` and a time zone.\n *\n * The input is treated as UTC and then the time zone is attached, unless\n * `adjustForTimeZone` is set to `true`. In that case, the input is treated as\n * already in the time zone.\n *\n * @since 3.6.0\n * @category constructors\n * @example\n * import { DateTime } from \"effect\"\n *\n * DateTime.unsafeMakeZoned(new Date(), { timeZone: \"Europe/London\" })\n */\nexport const unsafeMakeZoned = (input: DateTime.Input, options: {\n  readonly timeZone: number | string | TimeZone\n  readonly adjustForTimeZone?: boolean | undefined\n}): Zoned => {\n  const self = unsafeMake(input)\n  let zone: TimeZone\n  if (isTimeZone(options.timeZone)) {\n    zone = options.timeZone\n  } else if (typeof options.timeZone === \"number\") {\n    zone = zoneMakeOffset(options.timeZone)\n  } else {\n    const parsedZone = zoneFromString(options.timeZone)\n    if (Option.isNone(parsedZone)) {\n      throw new IllegalArgumentException(`Invalid time zone: ${options.timeZone}`)\n    }\n    zone = parsedZone.value\n  }\n  if (options.adjustForTimeZone !== true) {\n    return makeZonedProto(self.epochMillis, zone, self.partsUtc)\n  }\n  return makeZonedFromAdjusted(self.epochMillis, zone)\n}\n\n/**\n * Create a `DateTime.Zoned` using `DateTime.make` and a time zone.\n *\n * The input is treated as UTC and then the time zone is attached.\n *\n * If the date time input or time zone is invalid, `None` will be returned.\n *\n * @since 3.6.0\n * @category constructors\n * @example\n * import { DateTime } from \"effect\"\n *\n * DateTime.makeZoned(new Date(), { timeZone: \"Europe/London\" })\n */\nexport const makeZoned: (\n  input: DateTime.Input,\n  options: {\n    readonly timeZone: number | string | TimeZone\n    readonly adjustForTimeZone?: boolean | undefined\n  }\n) => Option.Option<Zoned> = Option\n  .liftThrowable(unsafeMakeZoned)\n\n/**\n * Create a `DateTime` from one of the following:\n *\n * - A `DateTime`\n * - A `Date` instance (invalid dates will throw an `IllegalArgumentException`)\n * - The `number` of milliseconds since the Unix epoch\n * - An object with the parts of a date\n * - A `string` that can be parsed by `Date.parse`\n *\n * If the input is invalid, `None` will be returned.\n *\n * @since 3.6.0\n * @category constructors\n * @example\n * import { DateTime } from \"effect\"\n *\n * // from Date\n * DateTime.make(new Date())\n *\n * // from parts\n * DateTime.make({ year: 2024 })\n *\n * // from string\n * DateTime.make(\"2024-01-01\")\n */\nexport const make: <A extends DateTime.Input>(input: A) => Option.Option<DateTime.PreserveZone<A>> = Option\n  .liftThrowable(unsafeMake)\n\nconst zonedStringRegex = /^(.{17,35})\\[(.+)\\]$/\n\n/**\n * Create a `DateTime.Zoned` from a string.\n *\n * It uses the format: `YYYY-MM-DDTHH:mm:ss.sss+HH:MM[Time/Zone]`.\n *\n * @since 3.6.0\n * @category constructors\n */\nexport const makeZonedFromString = (input: string): Option.Option<Zoned> => {\n  const match = zonedStringRegex.exec(input)\n  if (match === null) {\n    const offset = parseOffset(input)\n    return offset !== null ? makeZoned(input, { timeZone: offset }) : Option.none()\n  }\n  const [, isoString, timeZone] = match\n  return makeZoned(isoString, { timeZone })\n}\n\n/**\n * Get the current time using the `Clock` service and convert it to a `DateTime`.\n *\n * @since 3.6.0\n * @category constructors\n * @example\n * import { DateTime, Effect } from \"effect\"\n *\n * Effect.gen(function* () {\n *   const now = yield* DateTime.now\n * })\n */\nexport const now: Effect.Effect<Utc> = Effect.map(Clock.currentTimeMillis, makeUtc)\n\n/**\n * Get the current time using `Date.now`.\n *\n * @since 3.6.0\n * @category constructors\n */\nexport const unsafeNow: LazyArg<Utc> = () => makeUtc(Date.now())\n\n// =============================================================================\n// time zones\n// =============================================================================\n\n/**\n * Set the time zone of a `DateTime`, returning a new `DateTime.Zoned`.\n *\n * @since 3.6.0\n * @category time zones\n * @example\n * import { DateTime, Effect } from \"effect\"\n *\n * Effect.gen(function* () {\n *   const now = yield* DateTime.now\n *   const zone = DateTime.zoneUnsafeMakeNamed(\"Europe/London\")\n *\n *   // set the time zone\n *   const zoned: DateTime.Zoned = DateTime.setZone(now, zone)\n * })\n */\nexport const setZone: {\n  // =============================================================================\n  // time zones\n  // =============================================================================\n\n  /**\n   * Set the time zone of a `DateTime`, returning a new `DateTime.Zoned`.\n   *\n   * @since 3.6.0\n   * @category time zones\n   * @example\n   * import { DateTime, Effect } from \"effect\"\n   *\n   * Effect.gen(function* () {\n   *   const now = yield* DateTime.now\n   *   const zone = DateTime.zoneUnsafeMakeNamed(\"Europe/London\")\n   *\n   *   // set the time zone\n   *   const zoned: DateTime.Zoned = DateTime.setZone(now, zone)\n   * })\n   */\n  (\n    zone: TimeZone,\n    options?: {\n      readonly adjustForTimeZone?: boolean | undefined\n    }\n  ): (self: DateTime) => Zoned\n  // =============================================================================\n  // time zones\n  // =============================================================================\n\n  /**\n   * Set the time zone of a `DateTime`, returning a new `DateTime.Zoned`.\n   *\n   * @since 3.6.0\n   * @category time zones\n   * @example\n   * import { DateTime, Effect } from \"effect\"\n   *\n   * Effect.gen(function* () {\n   *   const now = yield* DateTime.now\n   *   const zone = DateTime.zoneUnsafeMakeNamed(\"Europe/London\")\n   *\n   *   // set the time zone\n   *   const zoned: DateTime.Zoned = DateTime.setZone(now, zone)\n   * })\n   */\n  (\n    self: DateTime,\n    zone: TimeZone,\n    options?: {\n      readonly adjustForTimeZone?: boolean | undefined\n    }\n  ): Zoned\n} = dual(isDateTimeArgs, (self: DateTime, zone: TimeZone, options?: {\n  readonly adjustForTimeZone?: boolean | undefined\n}): Zoned =>\n  options?.adjustForTimeZone === true\n    ? makeZonedFromAdjusted(self.epochMillis, zone)\n    : makeZonedProto(self.epochMillis, zone, self.partsUtc))\n\n/**\n * Add a fixed offset time zone to a `DateTime`.\n *\n * The offset is in milliseconds.\n *\n * @since 3.6.0\n * @category time zones\n * @example\n * import { DateTime, Effect } from \"effect\"\n *\n * Effect.gen(function* () {\n *   const now = yield* DateTime.now\n *\n *   // set the offset time zone in milliseconds\n *   const zoned: DateTime.Zoned = DateTime.setZoneOffset(now, 3 * 60 * 60 * 1000)\n * })\n */\nexport const setZoneOffset: {\n  /**\n   * Add a fixed offset time zone to a `DateTime`.\n   *\n   * The offset is in milliseconds.\n   *\n   * @since 3.6.0\n   * @category time zones\n   * @example\n   * import { DateTime, Effect } from \"effect\"\n   *\n   * Effect.gen(function* () {\n   *   const now = yield* DateTime.now\n   *\n   *   // set the offset time zone in milliseconds\n   *   const zoned: DateTime.Zoned = DateTime.setZoneOffset(now, 3 * 60 * 60 * 1000)\n   * })\n   */\n  (\n    offset: number,\n    options?: {\n      readonly adjustForTimeZone?: boolean | undefined\n    }\n  ): (self: DateTime) => Zoned\n  /**\n   * Add a fixed offset time zone to a `DateTime`.\n   *\n   * The offset is in milliseconds.\n   *\n   * @since 3.6.0\n   * @category time zones\n   * @example\n   * import { DateTime, Effect } from \"effect\"\n   *\n   * Effect.gen(function* () {\n   *   const now = yield* DateTime.now\n   *\n   *   // set the offset time zone in milliseconds\n   *   const zoned: DateTime.Zoned = DateTime.setZoneOffset(now, 3 * 60 * 60 * 1000)\n   * })\n   */\n  (\n    self: DateTime,\n    offset: number,\n    options?: {\n      readonly adjustForTimeZone?: boolean | undefined\n    }\n  ): Zoned\n} = dual(isDateTimeArgs, (self: DateTime, offset: number, options?: {\n  readonly adjustForTimeZone?: boolean | undefined\n}): Zoned => setZone(self, zoneMakeOffset(offset), options))\n\nconst validZoneCache = globalValue(\"effect/DateTime/validZoneCache\", () => new Map<string, TimeZone.Named>())\n\nconst formatOptions: Intl.DateTimeFormatOptions = {\n  day: \"numeric\",\n  month: \"numeric\",\n  year: \"numeric\",\n  hour: \"numeric\",\n  minute: \"numeric\",\n  second: \"numeric\",\n  timeZoneName: \"longOffset\",\n  fractionalSecondDigits: 3,\n  hourCycle: \"h23\"\n}\n\nconst zoneMakeIntl = (format: Intl.DateTimeFormat): TimeZone.Named => {\n  const zoneId = format.resolvedOptions().timeZone\n  if (validZoneCache.has(zoneId)) {\n    return validZoneCache.get(zoneId)!\n  }\n  const zone = Object.create(ProtoTimeZoneNamed)\n  zone.id = zoneId\n  zone.format = format\n  validZoneCache.set(zoneId, zone)\n  return zone\n}\n\n/**\n * Attempt to create a named time zone from a IANA time zone identifier.\n *\n * If the time zone is invalid, an `IllegalArgumentException` will be thrown.\n *\n * @since 3.6.0\n * @category time zones\n */\nexport const zoneUnsafeMakeNamed = (zoneId: string): TimeZone.Named => {\n  if (validZoneCache.has(zoneId)) {\n    return validZoneCache.get(zoneId)!\n  }\n  try {\n    return zoneMakeIntl(\n      new Intl.DateTimeFormat(\"en-US\", {\n        ...formatOptions,\n        timeZone: zoneId\n      })\n    )\n  } catch (_) {\n    throw new IllegalArgumentException(`Invalid time zone: ${zoneId}`)\n  }\n}\n\n/**\n * Create a fixed offset time zone.\n *\n * @since 3.6.0\n * @category time zones\n */\nexport const zoneMakeOffset = (offset: number): TimeZone.Offset => {\n  const zone = Object.create(ProtoTimeZoneOffset)\n  zone.offset = offset\n  return zone\n}\n\n/**\n * Create a named time zone from a IANA time zone identifier. If the time zone\n * is invalid, `None` will be returned.\n *\n * @since 3.6.0\n * @category time zones\n */\nexport const zoneMakeNamed: (zoneId: string) => Option.Option<TimeZone.Named> = Option.liftThrowable(\n  zoneUnsafeMakeNamed\n)\n\n/**\n * Create a named time zone from a IANA time zone identifier. If the time zone\n * is invalid, it will fail with an `IllegalArgumentException`.\n *\n * @since 3.6.0\n * @category time zones\n */\nexport const zoneMakeNamedEffect = (zoneId: string): Effect.Effect<TimeZone.Named, IllegalArgumentException> =>\n  Effect.try({\n    try: () => zoneUnsafeMakeNamed(zoneId),\n    catch: (e) => e as IllegalArgumentException\n  })\n\n/**\n * Create a named time zone from the system's local time zone.\n *\n * @since 3.6.0\n * @category time zones\n */\nexport const zoneMakeLocal = (): TimeZone.Named => zoneMakeIntl(new Intl.DateTimeFormat(\"en-US\", formatOptions))\n\nconst offsetZoneRegex = /^(?:GMT|[+-])/\n\n/**\n * Try parse a TimeZone from a string\n *\n * @since 3.6.0\n * @category time zones\n */\nexport const zoneFromString = (zone: string): Option.Option<TimeZone> => {\n  if (offsetZoneRegex.test(zone)) {\n    const offset = parseOffset(zone)\n    return offset === null ? Option.none() : Option.some(zoneMakeOffset(offset))\n  }\n  return zoneMakeNamed(zone)\n}\n\n/**\n * Format a `TimeZone` as a string.\n *\n * @since 3.6.0\n * @category time zones\n * @example\n * import { DateTime, Effect } from \"effect\"\n *\n * // Outputs \"+03:00\"\n * DateTime.zoneToString(DateTime.zoneMakeOffset(3 * 60 * 60 * 1000))\n *\n * // Outputs \"Europe/London\"\n * DateTime.zoneToString(DateTime.zoneUnsafeMakeNamed(\"Europe/London\"))\n */\nexport const zoneToString = (self: TimeZone): string => {\n  if (self._tag === \"Offset\") {\n    return offsetToString(self.offset)\n  }\n  return self.id\n}\n\n/**\n * Set the time zone of a `DateTime` from an IANA time zone identifier. If the\n * time zone is invalid, `None` will be returned.\n *\n * @since 3.6.0\n * @category time zones\n * @example\n * import { DateTime, Effect } from \"effect\"\n *\n * Effect.gen(function* () {\n *   const now = yield* DateTime.now\n *   // set the time zone, returns an Option\n *   DateTime.setZoneNamed(now, \"Europe/London\")\n * })\n */\nexport const setZoneNamed: {\n  /**\n   * Set the time zone of a `DateTime` from an IANA time zone identifier. If the\n   * time zone is invalid, `None` will be returned.\n   *\n   * @since 3.6.0\n   * @category time zones\n   * @example\n   * import { DateTime, Effect } from \"effect\"\n   *\n   * Effect.gen(function* () {\n   *   const now = yield* DateTime.now\n   *   // set the time zone, returns an Option\n   *   DateTime.setZoneNamed(now, \"Europe/London\")\n   * })\n   */\n  (\n    zoneId: string,\n    options?: {\n      readonly adjustForTimeZone?: boolean | undefined\n    }\n  ): (self: DateTime) => Option.Option<Zoned>\n  /**\n   * Set the time zone of a `DateTime` from an IANA time zone identifier. If the\n   * time zone is invalid, `None` will be returned.\n   *\n   * @since 3.6.0\n   * @category time zones\n   * @example\n   * import { DateTime, Effect } from \"effect\"\n   *\n   * Effect.gen(function* () {\n   *   const now = yield* DateTime.now\n   *   // set the time zone, returns an Option\n   *   DateTime.setZoneNamed(now, \"Europe/London\")\n   * })\n   */\n  (\n    self: DateTime,\n    zoneId: string,\n    options?: {\n      readonly adjustForTimeZone?: boolean | undefined\n    }\n  ): Option.Option<Zoned>\n} = dual(\n  isDateTimeArgs,\n  (self: DateTime, zoneId: string, options?: {\n    readonly adjustForTimeZone?: boolean | undefined\n  }): Option.Option<Zoned> => Option.map(zoneMakeNamed(zoneId), (zone) => setZone(self, zone, options))\n)\n\n/**\n * Set the time zone of a `DateTime` from an IANA time zone identifier. If the\n * time zone is invalid, an `IllegalArgumentException` will be thrown.\n *\n * @since 3.6.0\n * @category time zones\n * @example\n * import { DateTime, Effect } from \"effect\"\n *\n * Effect.gen(function* () {\n *   const now = yield* DateTime.now\n *   // set the time zone\n *   DateTime.unsafeSetZoneNamed(now, \"Europe/London\")\n * })\n */\nexport const unsafeSetZoneNamed: {\n  /**\n   * Set the time zone of a `DateTime` from an IANA time zone identifier. If the\n   * time zone is invalid, an `IllegalArgumentException` will be thrown.\n   *\n   * @since 3.6.0\n   * @category time zones\n   * @example\n   * import { DateTime, Effect } from \"effect\"\n   *\n   * Effect.gen(function* () {\n   *   const now = yield* DateTime.now\n   *   // set the time zone\n   *   DateTime.unsafeSetZoneNamed(now, \"Europe/London\")\n   * })\n   */\n  (\n    zoneId: string,\n    options?: {\n      readonly adjustForTimeZone?: boolean | undefined\n    }\n  ): (self: DateTime) => Zoned\n  /**\n   * Set the time zone of a `DateTime` from an IANA time zone identifier. If the\n   * time zone is invalid, an `IllegalArgumentException` will be thrown.\n   *\n   * @since 3.6.0\n   * @category time zones\n   * @example\n   * import { DateTime, Effect } from \"effect\"\n   *\n   * Effect.gen(function* () {\n   *   const now = yield* DateTime.now\n   *   // set the time zone\n   *   DateTime.unsafeSetZoneNamed(now, \"Europe/London\")\n   * })\n   */\n  (\n    self: DateTime,\n    zoneId: string,\n    options?: {\n      readonly adjustForTimeZone?: boolean | undefined\n    }\n  ): Zoned\n} = dual(isDateTimeArgs, (self: DateTime, zoneId: string, options?: {\n  readonly adjustForTimeZone?: boolean | undefined\n}): Zoned => setZone(self, zoneUnsafeMakeNamed(zoneId), options))\n\n// =============================================================================\n// comparisons\n// =============================================================================\n\n/**\n * Calulate the difference between two `DateTime` values, returning the number\n * of milliseconds the `other` DateTime is from `self`.\n *\n * If `other` is *after* `self`, the result will be a positive number.\n *\n * @since 3.6.0\n * @category comparisons\n * @example\n * import { DateTime, Effect } from \"effect\"\n *\n * Effect.gen(function* () {\n *   const now = yield* DateTime.now\n *   const other = DateTime.add(now, { minutes: 1 })\n *\n *   // returns 60000\n *   DateTime.distance(now, other)\n * })\n */\nexport const distance: {\n  // =============================================================================\n  // comparisons\n  // =============================================================================\n\n  /**\n   * Calulate the difference between two `DateTime` values, returning the number\n   * of milliseconds the `other` DateTime is from `self`.\n   *\n   * If `other` is *after* `self`, the result will be a positive number.\n   *\n   * @since 3.6.0\n   * @category comparisons\n   * @example\n   * import { DateTime, Effect } from \"effect\"\n   *\n   * Effect.gen(function* () {\n   *   const now = yield* DateTime.now\n   *   const other = DateTime.add(now, { minutes: 1 })\n   *\n   *   // returns 60000\n   *   DateTime.distance(now, other)\n   * })\n   */\n  (other: DateTime): (self: DateTime) => number\n  // =============================================================================\n  // comparisons\n  // =============================================================================\n\n  /**\n   * Calulate the difference between two `DateTime` values, returning the number\n   * of milliseconds the `other` DateTime is from `self`.\n   *\n   * If `other` is *after* `self`, the result will be a positive number.\n   *\n   * @since 3.6.0\n   * @category comparisons\n   * @example\n   * import { DateTime, Effect } from \"effect\"\n   *\n   * Effect.gen(function* () {\n   *   const now = yield* DateTime.now\n   *   const other = DateTime.add(now, { minutes: 1 })\n   *\n   *   // returns 60000\n   *   DateTime.distance(now, other)\n   * })\n   */\n  (self: DateTime, other: DateTime): number\n} = dual(2, (self: DateTime, other: DateTime): number => toEpochMillis(other) - toEpochMillis(self))\n\n/**\n * Calulate the difference between two `DateTime` values.\n *\n * If the `other` DateTime is before `self`, the result will be a negative\n * `Duration`, returned as a `Left`.\n *\n * If the `other` DateTime is after `self`, the result will be a positive\n * `Duration`, returned as a `Right`.\n *\n * @since 3.6.0\n * @category comparisons\n * @example\n * import { DateTime, Effect } from \"effect\"\n *\n * Effect.gen(function* () {\n *   const now = yield* DateTime.now\n *   const other = DateTime.add(now, { minutes: 1 })\n *\n *   // returns Either.right(Duration.minutes(1))\n *   DateTime.distanceDurationEither(now, other)\n *\n *   // returns Either.left(Duration.minutes(1))\n *   DateTime.distanceDurationEither(other, now)\n * })\n */\nexport const distanceDurationEither: {\n  /**\n   * Calulate the difference between two `DateTime` values.\n   *\n   * If the `other` DateTime is before `self`, the result will be a negative\n   * `Duration`, returned as a `Left`.\n   *\n   * If the `other` DateTime is after `self`, the result will be a positive\n   * `Duration`, returned as a `Right`.\n   *\n   * @since 3.6.0\n   * @category comparisons\n   * @example\n   * import { DateTime, Effect } from \"effect\"\n   *\n   * Effect.gen(function* () {\n   *   const now = yield* DateTime.now\n   *   const other = DateTime.add(now, { minutes: 1 })\n   *\n   *   // returns Either.right(Duration.minutes(1))\n   *   DateTime.distanceDurationEither(now, other)\n   *\n   *   // returns Either.left(Duration.minutes(1))\n   *   DateTime.distanceDurationEither(other, now)\n   * })\n   */\n  (other: DateTime): (self: DateTime) => Either.Either<Duration.Duration, Duration.Duration>\n  /**\n   * Calulate the difference between two `DateTime` values.\n   *\n   * If the `other` DateTime is before `self`, the result will be a negative\n   * `Duration`, returned as a `Left`.\n   *\n   * If the `other` DateTime is after `self`, the result will be a positive\n   * `Duration`, returned as a `Right`.\n   *\n   * @since 3.6.0\n   * @category comparisons\n   * @example\n   * import { DateTime, Effect } from \"effect\"\n   *\n   * Effect.gen(function* () {\n   *   const now = yield* DateTime.now\n   *   const other = DateTime.add(now, { minutes: 1 })\n   *\n   *   // returns Either.right(Duration.minutes(1))\n   *   DateTime.distanceDurationEither(now, other)\n   *\n   *   // returns Either.left(Duration.minutes(1))\n   *   DateTime.distanceDurationEither(other, now)\n   * })\n   */\n  (self: DateTime, other: DateTime): Either.Either<Duration.Duration, Duration.Duration>\n} = dual(2, (self: DateTime, other: DateTime): Either.Either<Duration.Duration, Duration.Duration> => {\n  const diffMillis = distance(self, other)\n  return diffMillis > 0\n    ? Either.right(Duration.millis(diffMillis))\n    : Either.left(Duration.millis(-diffMillis))\n})\n\n/**\n * Calulate the distance between two `DateTime` values.\n *\n * @since 3.6.0\n * @category comparisons\n * @example\n * import { DateTime, Effect } from \"effect\"\n *\n * Effect.gen(function* () {\n *   const now = yield* DateTime.now\n *   const other = DateTime.add(now, { minutes: 1 })\n *\n *   // returns Duration.minutes(1)\n *   DateTime.distanceDuration(now, other)\n * })\n */\nexport const distanceDuration: {\n  /**\n   * Calulate the distance between two `DateTime` values.\n   *\n   * @since 3.6.0\n   * @category comparisons\n   * @example\n   * import { DateTime, Effect } from \"effect\"\n   *\n   * Effect.gen(function* () {\n   *   const now = yield* DateTime.now\n   *   const other = DateTime.add(now, { minutes: 1 })\n   *\n   *   // returns Duration.minutes(1)\n   *   DateTime.distanceDuration(now, other)\n   * })\n   */\n  (other: DateTime): (self: DateTime) => Duration.Duration\n  /**\n   * Calulate the distance between two `DateTime` values.\n   *\n   * @since 3.6.0\n   * @category comparisons\n   * @example\n   * import { DateTime, Effect } from \"effect\"\n   *\n   * Effect.gen(function* () {\n   *   const now = yield* DateTime.now\n   *   const other = DateTime.add(now, { minutes: 1 })\n   *\n   *   // returns Duration.minutes(1)\n   *   DateTime.distanceDuration(now, other)\n   * })\n   */\n  (self: DateTime, other: DateTime): Duration.Duration\n} = dual(\n  2,\n  (self: DateTime, other: DateTime): Duration.Duration => Duration.millis(Math.abs(distance(self, other)))\n)\n\n/**\n * @since 3.6.0\n * @category comparisons\n */\nexport const min: {\n  /**\n   * @since 3.6.0\n   * @category comparisons\n   */\n  (that: DateTime): (self: DateTime) => DateTime\n  /**\n   * @since 3.6.0\n   * @category comparisons\n   */\n  (self: DateTime, that: DateTime): DateTime\n} = order.min(Order)\n\n/**\n * @since 3.6.0\n * @category comparisons\n */\nexport const max: {\n  /**\n   * @since 3.6.0\n   * @category comparisons\n   */\n  (that: DateTime): (self: DateTime) => DateTime\n  /**\n   * @since 3.6.0\n   * @category comparisons\n   */\n  (self: DateTime, that: DateTime): DateTime\n} = order.max(Order)\n\n/**\n * @since 3.6.0\n * @category comparisons\n */\nexport const greaterThan: {\n  /**\n   * @since 3.6.0\n   * @category comparisons\n   */\n  (that: DateTime): (self: DateTime) => boolean\n  /**\n   * @since 3.6.0\n   * @category comparisons\n   */\n  (self: DateTime, that: DateTime): boolean\n} = order.greaterThan(Order)\n\n/**\n * @since 3.6.0\n * @category comparisons\n */\nexport const greaterThanOrEqualTo: {\n  /**\n   * @since 3.6.0\n   * @category comparisons\n   */\n  (that: DateTime): (self: DateTime) => boolean\n  /**\n   * @since 3.6.0\n   * @category comparisons\n   */\n  (self: DateTime, that: DateTime): boolean\n} = order.greaterThanOrEqualTo(Order)\n\n/**\n * @since 3.6.0\n * @category comparisons\n */\nexport const lessThan: {\n  /**\n   * @since 3.6.0\n   * @category comparisons\n   */\n  (that: DateTime): (self: DateTime) => boolean\n  /**\n   * @since 3.6.0\n   * @category comparisons\n   */\n  (self: DateTime, that: DateTime): boolean\n} = order.lessThan(Order)\n\n/**\n * @since 3.6.0\n * @category comparisons\n */\nexport const lessThanOrEqualTo: {\n  /**\n   * @since 3.6.0\n   * @category comparisons\n   */\n  (that: DateTime): (self: DateTime) => boolean\n  /**\n   * @since 3.6.0\n   * @category comparisons\n   */\n  (self: DateTime, that: DateTime): boolean\n} = order.lessThanOrEqualTo(Order)\n\n/**\n * @since 3.6.0\n * @category comparisons\n */\nexport const between: {\n  /**\n   * @since 3.6.0\n   * @category comparisons\n   */\n  (options: { minimum: DateTime; maximum: DateTime }): (self: DateTime) => boolean\n  /**\n   * @since 3.6.0\n   * @category comparisons\n   */\n  (self: DateTime, options: { minimum: DateTime; maximum: DateTime }): boolean\n} = order.between(Order)\n\n/**\n * @since 3.6.0\n * @category comparisons\n */\nexport const isFuture = (self: DateTime): Effect.Effect<boolean> => Effect.map(now, lessThan(self))\n\n/**\n * @since 3.6.0\n * @category comparisons\n */\nexport const unsafeIsFuture = (self: DateTime): boolean => lessThan(unsafeNow(), self)\n\n/**\n * @since 3.6.0\n * @category comparisons\n */\nexport const isPast = (self: DateTime): Effect.Effect<boolean> => Effect.map(now, greaterThan(self))\n\n/**\n * @since 3.6.0\n * @category comparisons\n */\nexport const unsafeIsPast = (self: DateTime): boolean => greaterThan(unsafeNow(), self)\n\n// =============================================================================\n// conversions\n// =============================================================================\n\n/**\n * Get the UTC `Date` of a `DateTime`.\n *\n * @since 3.6.0\n * @category conversions\n */\nexport const toDateUtc = (self: DateTime): Date => new Date(self.epochMillis)\n\n/**\n * Convert a `DateTime` to a `Date`, applying the time zone first.\n *\n * @since 3.6.0\n * @category conversions\n */\nexport const toDate = (self: DateTime): Date => {\n  if (self._tag === \"Utc\") {\n    return new Date(self.epochMillis)\n  } else if (self.zone._tag === \"Offset\") {\n    return new Date(self.epochMillis + self.zone.offset)\n  } else if (self.adjustedEpochMillis !== undefined) {\n    return new Date(self.adjustedEpochMillis)\n  }\n  const parts = self.zone.format.formatToParts(self.epochMillis).filter((_) => _.type !== \"literal\")\n  const date = new Date(0)\n  date.setUTCFullYear(\n    Number(parts[2].value),\n    Number(parts[0].value) - 1,\n    Number(parts[1].value)\n  )\n  date.setUTCHours(\n    Number(parts[3].value),\n    Number(parts[4].value),\n    Number(parts[5].value),\n    Number(parts[6].value)\n  )\n  self.adjustedEpochMillis = date.getTime()\n  return date\n}\n\n/**\n * Calculate the time zone offset of a `DateTime.Zoned` in milliseconds.\n *\n * @since 3.6.0\n * @category conversions\n */\nexport const zonedOffset = (self: Zoned): number => {\n  const date = toDate(self)\n  return date.getTime() - toEpochMillis(self)\n}\n\nconst offsetToString = (offset: number): string => {\n  const abs = Math.abs(offset)\n  const hours = Math.floor(abs / (60 * 60 * 1000))\n  const minutes = Math.round((abs % (60 * 60 * 1000)) / (60 * 1000))\n  return `${offset < 0 ? \"-\" : \"+\"}${String(hours).padStart(2, \"0\")}:${String(minutes).padStart(2, \"0\")}`\n}\n\n/**\n * Calculate the time zone offset of a `DateTime` in milliseconds.\n *\n * The offset is formatted as \"±HH:MM\".\n *\n * @since 3.6.0\n * @category conversions\n */\nexport const zonedOffsetIso = (self: Zoned): string => offsetToString(zonedOffset(self))\n\n/**\n * Get the milliseconds since the Unix epoch of a `DateTime`.\n *\n * @since 3.6.0\n * @category conversions\n */\nexport const toEpochMillis = (self: DateTime): number => self.epochMillis\n\n/**\n * Remove the time aspect of a `DateTime`, first adjusting for the time\n * zone. It will return a `DateTime.Utc` only containing the date.\n *\n * @since 3.6.0\n * @category conversions\n * @example\n * import { DateTime } from \"effect\"\n *\n * // returns \"2024-01-01T00:00:00Z\"\n * DateTime.unsafeMakeZoned(\"2024-01-01T05:00:00Z\", {\n *   timeZone: \"Pacific/Auckland\",\n *   adjustForTimeZone: true\n * }).pipe(\n *   DateTime.removeTime,\n *   DateTime.formatIso\n * )\n */\nexport const removeTime = (self: DateTime): Utc =>\n  withDate(self, (date) => {\n    date.setUTCHours(0, 0, 0, 0)\n    return makeUtc(date.getTime())\n  })\n\n// =============================================================================\n// parts\n// =============================================================================\n\nconst dateToParts = (date: Date): DateTime.PartsWithWeekday => ({\n  millis: date.getUTCMilliseconds(),\n  seconds: date.getUTCSeconds(),\n  minutes: date.getUTCMinutes(),\n  hours: date.getUTCHours(),\n  day: date.getUTCDate(),\n  weekDay: date.getUTCDay(),\n  month: date.getUTCMonth() + 1,\n  year: date.getUTCFullYear()\n})\n\n/**\n * Get the different parts of a `DateTime` as an object.\n *\n * The parts will be time zone adjusted.\n *\n * @since 3.6.0\n * @category parts\n */\nexport const toParts = (self: DateTime): DateTime.PartsWithWeekday => {\n  if (self._tag === \"Utc\") {\n    return toPartsUtc(self)\n  } else if (self.partsAdjusted !== undefined) {\n    return self.partsAdjusted\n  }\n  self.partsAdjusted = withDate(self, dateToParts)\n  return self.partsAdjusted\n}\n\n/**\n * Get the different parts of a `DateTime` as an object.\n *\n * The parts will be in UTC.\n *\n * @since 3.6.0\n * @category parts\n */\nexport const toPartsUtc = (self: DateTime): DateTime.PartsWithWeekday => {\n  if (self.partsUtc !== undefined) {\n    return self.partsUtc\n  }\n  self.partsUtc = withDateUtc(self, dateToParts)\n  return self.partsUtc\n}\n\n/**\n * Get a part of a `DateTime` as a number.\n *\n * The part will be in the UTC time zone.\n *\n * @since 3.6.0\n * @category parts\n * @example\n * import { DateTime } from \"effect\"\n *\n * const now = DateTime.unsafeMake({ year: 2024 })\n * const year = DateTime.getPartUtc(now, \"year\")\n * assert.strictEqual(year, 2024)\n */\nexport const getPartUtc: {\n  /**\n   * Get a part of a `DateTime` as a number.\n   *\n   * The part will be in the UTC time zone.\n   *\n   * @since 3.6.0\n   * @category parts\n   * @example\n   * import { DateTime } from \"effect\"\n   *\n   * const now = DateTime.unsafeMake({ year: 2024 })\n   * const year = DateTime.getPartUtc(now, \"year\")\n   * assert.strictEqual(year, 2024)\n   */\n  (part: keyof DateTime.PartsWithWeekday): (self: DateTime) => number\n  /**\n   * Get a part of a `DateTime` as a number.\n   *\n   * The part will be in the UTC time zone.\n   *\n   * @since 3.6.0\n   * @category parts\n   * @example\n   * import { DateTime } from \"effect\"\n   *\n   * const now = DateTime.unsafeMake({ year: 2024 })\n   * const year = DateTime.getPartUtc(now, \"year\")\n   * assert.strictEqual(year, 2024)\n   */\n  (self: DateTime, part: keyof DateTime.PartsWithWeekday): number\n} = dual(2, (self: DateTime, part: keyof DateTime.PartsWithWeekday): number => toPartsUtc(self)[part])\n\n/**\n * Get a part of a `DateTime` as a number.\n *\n * The part will be time zone adjusted.\n *\n * @since 3.6.0\n * @category parts\n * @example\n * import { DateTime } from \"effect\"\n *\n * const now = DateTime.unsafeMakeZoned({ year: 2024 }, { timeZone: \"Europe/London\" })\n * const year = DateTime.getPart(now, \"year\")\n * assert.strictEqual(year, 2024)\n */\nexport const getPart: {\n  /**\n   * Get a part of a `DateTime` as a number.\n   *\n   * The part will be time zone adjusted.\n   *\n   * @since 3.6.0\n   * @category parts\n   * @example\n   * import { DateTime } from \"effect\"\n   *\n   * const now = DateTime.unsafeMakeZoned({ year: 2024 }, { timeZone: \"Europe/London\" })\n   * const year = DateTime.getPart(now, \"year\")\n   * assert.strictEqual(year, 2024)\n   */\n  (part: keyof DateTime.PartsWithWeekday): (self: DateTime) => number\n  /**\n   * Get a part of a `DateTime` as a number.\n   *\n   * The part will be time zone adjusted.\n   *\n   * @since 3.6.0\n   * @category parts\n   * @example\n   * import { DateTime } from \"effect\"\n   *\n   * const now = DateTime.unsafeMakeZoned({ year: 2024 }, { timeZone: \"Europe/London\" })\n   * const year = DateTime.getPart(now, \"year\")\n   * assert.strictEqual(year, 2024)\n   */\n  (self: DateTime, part: keyof DateTime.PartsWithWeekday): number\n} = dual(2, (self: DateTime, part: keyof DateTime.PartsWithWeekday): number => toParts(self)[part])\n\nconst setPartsDate = (date: Date, parts: Partial<DateTime.PartsWithWeekday>): void => {\n  if (parts.year !== undefined) {\n    date.setUTCFullYear(parts.year)\n  }\n  if (parts.month !== undefined) {\n    date.setUTCMonth(parts.month - 1)\n  }\n  if (parts.day !== undefined) {\n    date.setUTCDate(parts.day)\n  }\n  if (parts.weekDay !== undefined) {\n    const diff = parts.weekDay - date.getUTCDay()\n    date.setUTCDate(date.getUTCDate() + diff)\n  }\n  if (parts.hours !== undefined) {\n    date.setUTCHours(parts.hours)\n  }\n  if (parts.minutes !== undefined) {\n    date.setUTCMinutes(parts.minutes)\n  }\n  if (parts.seconds !== undefined) {\n    date.setUTCSeconds(parts.seconds)\n  }\n  if (parts.millis !== undefined) {\n    date.setUTCMilliseconds(parts.millis)\n  }\n}\n\n/**\n * Set the different parts of a `DateTime` as an object.\n *\n * The Date will be time zone adjusted.\n *\n * @since 3.6.0\n * @category parts\n */\nexport const setParts: {\n  /**\n   * Set the different parts of a `DateTime` as an object.\n   *\n   * The Date will be time zone adjusted.\n   *\n   * @since 3.6.0\n   * @category parts\n   */\n  (parts: Partial<DateTime.PartsWithWeekday>): <A extends DateTime>(self: A) => DateTime.PreserveZone<A>\n  /**\n   * Set the different parts of a `DateTime` as an object.\n   *\n   * The Date will be time zone adjusted.\n   *\n   * @since 3.6.0\n   * @category parts\n   */\n  <A extends DateTime>(self: A, parts: Partial<DateTime.PartsWithWeekday>): DateTime.PreserveZone<A>\n} = dual(\n  2,\n  (self: DateTime, parts: Partial<DateTime.PartsWithWeekday>): DateTime =>\n    mutate(self, (date) => setPartsDate(date, parts))\n)\n\n/**\n * Set the different parts of a `DateTime` as an object.\n *\n * @since 3.6.0\n * @category parts\n */\nexport const setPartsUtc: {\n  /**\n   * Set the different parts of a `DateTime` as an object.\n   *\n   * @since 3.6.0\n   * @category parts\n   */\n  (parts: Partial<DateTime.PartsWithWeekday>): <A extends DateTime>(self: A) => DateTime.PreserveZone<A>\n  /**\n   * Set the different parts of a `DateTime` as an object.\n   *\n   * @since 3.6.0\n   * @category parts\n   */\n  <A extends DateTime>(self: A, parts: Partial<DateTime.PartsWithWeekday>): DateTime.PreserveZone<A>\n} = dual(\n  2,\n  (self: DateTime, parts: Partial<DateTime.PartsWithWeekday>): DateTime =>\n    mutateUtc(self, (date) => setPartsDate(date, parts))\n)\n\n// =============================================================================\n// current time zone\n// =============================================================================\n\n/**\n * @since 3.6.0\n * @category current time zone\n */\nexport class CurrentTimeZone extends Context.Tag(\"effect/DateTime/CurrentTimeZone\")<\n  CurrentTimeZone,\n  TimeZone\n>() {}\n\n/**\n * Set the time zone of a `DateTime` to the current time zone, which is\n * determined by the `CurrentTimeZone` service.\n *\n * @since 3.6.0\n * @category current time zone\n * @example\n * import { DateTime, Effect } from \"effect\"\n *\n * Effect.gen(function* () {\n *   const now = yield* DateTime.now\n *\n *   // set the time zone to \"Europe/London\"\n *   const zoned = yield* DateTime.setZoneCurrent(now)\n * }).pipe(DateTime.withCurrentZoneNamed(\"Europe/London\"))\n */\nexport const setZoneCurrent = (self: DateTime): Effect.Effect<Zoned, never, CurrentTimeZone> =>\n  Effect.map(CurrentTimeZone, (zone) => setZone(self, zone))\n\n/**\n * Provide the `CurrentTimeZone` to an effect.\n *\n * @since 3.6.0\n * @category current time zone\n * @example\n * import { DateTime, Effect } from \"effect\"\n *\n * const zone = DateTime.zoneUnsafeMakeNamed(\"Europe/London\")\n *\n * Effect.gen(function* () {\n *   const now = yield* DateTime.nowInCurrentZone\n * }).pipe(DateTime.withCurrentZone(zone))\n */\nexport const withCurrentZone: {\n  /**\n   * Provide the `CurrentTimeZone` to an effect.\n   *\n   * @since 3.6.0\n   * @category current time zone\n   * @example\n   * import { DateTime, Effect } from \"effect\"\n   *\n   * const zone = DateTime.zoneUnsafeMakeNamed(\"Europe/London\")\n   *\n   * Effect.gen(function* () {\n   *   const now = yield* DateTime.nowInCurrentZone\n   * }).pipe(DateTime.withCurrentZone(zone))\n   */\n  (zone: TimeZone): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, CurrentTimeZone>>\n  /**\n   * Provide the `CurrentTimeZone` to an effect.\n   *\n   * @since 3.6.0\n   * @category current time zone\n   * @example\n   * import { DateTime, Effect } from \"effect\"\n   *\n   * const zone = DateTime.zoneUnsafeMakeNamed(\"Europe/London\")\n   *\n   * Effect.gen(function* () {\n   *   const now = yield* DateTime.nowInCurrentZone\n   * }).pipe(DateTime.withCurrentZone(zone))\n   */\n  <A, E, R>(effect: Effect.Effect<A, E, R>, zone: TimeZone): Effect.Effect<A, E, Exclude<R, CurrentTimeZone>>\n} = dual(\n  2,\n  <A, E, R>(effect: Effect.Effect<A, E, R>, zone: TimeZone): Effect.Effect<A, E, Exclude<R, CurrentTimeZone>> =>\n    Effect.provideService(effect, CurrentTimeZone, zone)\n)\n\n/**\n * Provide the `CurrentTimeZone` to an effect, using the system's local time\n * zone.\n *\n * @since 3.6.0\n * @category current time zone\n * @example\n * import { DateTime, Effect } from \"effect\"\n *\n * Effect.gen(function* () {\n *   // will use the system's local time zone\n *   const now = yield* DateTime.nowInCurrentZone\n * }).pipe(DateTime.withCurrentZoneLocal)\n */\nexport const withCurrentZoneLocal = <A, E, R>(\n  effect: Effect.Effect<A, E, R>\n): Effect.Effect<A, E, Exclude<R, CurrentTimeZone>> =>\n  Effect.provideServiceEffect(effect, CurrentTimeZone, Effect.sync(zoneMakeLocal))\n\n/**\n * Provide the `CurrentTimeZone` to an effect, using a offset.\n *\n * @since 3.6.0\n * @category current time zone\n * @example\n * import { DateTime, Effect } from \"effect\"\n *\n * Effect.gen(function* () {\n *   // will use the system's local time zone\n *   const now = yield* DateTime.nowInCurrentZone\n * }).pipe(DateTime.withCurrentZoneOffset(3 * 60 * 60 * 1000))\n */\nexport const withCurrentZoneOffset: {\n  /**\n   * Provide the `CurrentTimeZone` to an effect, using a offset.\n   *\n   * @since 3.6.0\n   * @category current time zone\n   * @example\n   * import { DateTime, Effect } from \"effect\"\n   *\n   * Effect.gen(function* () {\n   *   // will use the system's local time zone\n   *   const now = yield* DateTime.nowInCurrentZone\n   * }).pipe(DateTime.withCurrentZoneOffset(3 * 60 * 60 * 1000))\n   */\n  (offset: number): <A, E, R>(\n    effect: Effect.Effect<A, E, R>\n  ) => Effect.Effect<A, E, Exclude<R, CurrentTimeZone>>\n  /**\n   * Provide the `CurrentTimeZone` to an effect, using a offset.\n   *\n   * @since 3.6.0\n   * @category current time zone\n   * @example\n   * import { DateTime, Effect } from \"effect\"\n   *\n   * Effect.gen(function* () {\n   *   // will use the system's local time zone\n   *   const now = yield* DateTime.nowInCurrentZone\n   * }).pipe(DateTime.withCurrentZoneOffset(3 * 60 * 60 * 1000))\n   */\n  <A, E, R>(effect: Effect.Effect<A, E, R>, offset: number): Effect.Effect<A, E, Exclude<R, CurrentTimeZone>>\n} = dual(\n  2,\n  <A, E, R>(effect: Effect.Effect<A, E, R>, offset: number): Effect.Effect<A, E, Exclude<R, CurrentTimeZone>> =>\n    Effect.provideService(effect, CurrentTimeZone, zoneMakeOffset(offset))\n)\n\n/**\n * Provide the `CurrentTimeZone` to an effect using an IANA time zone\n * identifier.\n *\n * If the time zone is invalid, it will fail with an `IllegalArgumentException`.\n *\n * @since 3.6.0\n * @category current time zone\n * @example\n * import { DateTime, Effect } from \"effect\"\n *\n * Effect.gen(function* () {\n *   // will use the \"Europe/London\" time zone\n *   const now = yield* DateTime.nowInCurrentZone\n * }).pipe(DateTime.withCurrentZoneNamed(\"Europe/London\"))\n */\nexport const withCurrentZoneNamed: {\n  /**\n   * Provide the `CurrentTimeZone` to an effect using an IANA time zone\n   * identifier.\n   *\n   * If the time zone is invalid, it will fail with an `IllegalArgumentException`.\n   *\n   * @since 3.6.0\n   * @category current time zone\n   * @example\n   * import { DateTime, Effect } from \"effect\"\n   *\n   * Effect.gen(function* () {\n   *   // will use the \"Europe/London\" time zone\n   *   const now = yield* DateTime.nowInCurrentZone\n   * }).pipe(DateTime.withCurrentZoneNamed(\"Europe/London\"))\n   */\n  (zone: string): <A, E, R>(\n    effect: Effect.Effect<A, E, R>\n  ) => Effect.Effect<A, E | IllegalArgumentException, Exclude<R, CurrentTimeZone>>\n  /**\n   * Provide the `CurrentTimeZone` to an effect using an IANA time zone\n   * identifier.\n   *\n   * If the time zone is invalid, it will fail with an `IllegalArgumentException`.\n   *\n   * @since 3.6.0\n   * @category current time zone\n   * @example\n   * import { DateTime, Effect } from \"effect\"\n   *\n   * Effect.gen(function* () {\n   *   // will use the \"Europe/London\" time zone\n   *   const now = yield* DateTime.nowInCurrentZone\n   * }).pipe(DateTime.withCurrentZoneNamed(\"Europe/London\"))\n   */\n  <A, E, R>(\n    effect: Effect.Effect<A, E, R>,\n    zone: string\n  ): Effect.Effect<A, E | IllegalArgumentException, Exclude<R, CurrentTimeZone>>\n} = dual(\n  2,\n  <A, E, R>(\n    effect: Effect.Effect<A, E, R>,\n    zone: string\n  ): Effect.Effect<A, E | IllegalArgumentException, Exclude<R, CurrentTimeZone>> =>\n    Effect.provideServiceEffect(effect, CurrentTimeZone, zoneMakeNamedEffect(zone))\n)\n\n/**\n * Get the current time as a `DateTime.Zoned`, using the `CurrentTimeZone`.\n *\n * @since 3.6.0\n * @category current time zone\n * @example\n * import { DateTime, Effect } from \"effect\"\n *\n * Effect.gen(function* () {\n *   // will use the \"Europe/London\" time zone\n *   const now = yield* DateTime.nowInCurrentZone\n * }).pipe(DateTime.withCurrentZoneNamed(\"Europe/London\"))\n */\nexport const nowInCurrentZone: Effect.Effect<Zoned, never, CurrentTimeZone> = Effect.flatMap(\n  now,\n  setZoneCurrent\n)\n\n/**\n * Create a Layer from the given time zone.\n *\n * @since 3.6.0\n * @category current time zone\n */\nexport const layerCurrentZone = (zone: TimeZone): Layer.Layer<CurrentTimeZone> => Layer.succeed(CurrentTimeZone, zone)\n\n/**\n * Create a Layer from the given time zone offset.\n *\n * @since 3.6.0\n * @category current time zone\n */\nexport const layerCurrentZoneOffset = (offset: number): Layer.Layer<CurrentTimeZone> =>\n  Layer.succeed(CurrentTimeZone, zoneMakeOffset(offset))\n\n/**\n * Create a Layer from the given IANA time zone identifier.\n *\n * @since 3.6.0\n * @category current time zone\n */\nexport const layerCurrentZoneNamed = (zoneId: string): Layer.Layer<CurrentTimeZone, IllegalArgumentException> =>\n  Layer.effect(CurrentTimeZone, zoneMakeNamedEffect(zoneId))\n\n/**\n * Create a Layer from the systems local time zone.\n *\n * @since 3.6.0\n * @category current time zone\n */\nexport const layerCurrentZoneLocal: Layer.Layer<CurrentTimeZone> = Layer.sync(\n  CurrentTimeZone,\n  zoneMakeLocal\n)\n\n// =============================================================================\n// mapping\n// =============================================================================\n\nconst makeZonedFromAdjusted = (adjustedMillis: number, zone: TimeZone): Zoned => {\n  const offset = zone._tag === \"Offset\" ? zone.offset : calculateNamedOffset(adjustedMillis, zone)\n  return makeZonedProto(adjustedMillis - offset, zone)\n}\n\nconst offsetRegex = /([+-])(\\d{2}):(\\d{2})$/\nconst parseOffset = (offset: string): number | null => {\n  const match = offsetRegex.exec(offset)\n  if (match === null) {\n    return null\n  }\n  const [, sign, hours, minutes] = match\n  return (sign === \"+\" ? 1 : -1) * (Number(hours) * 60 + Number(minutes)) * 60 * 1000\n}\n\nconst calculateNamedOffset = (adjustedMillis: number, zone: TimeZone.Named): number => {\n  const offset = zone.format.formatToParts(adjustedMillis).find((_) => _.type === \"timeZoneName\")?.value ?? \"\"\n  if (offset === \"GMT\") {\n    return 0\n  }\n  const result = parseOffset(offset)\n  if (result === null) {\n    // fallback to using the adjusted date\n    return zonedOffset(makeZonedProto(adjustedMillis, zone))\n  }\n  return result\n}\n\n/**\n * Modify a `DateTime` by applying a function to a cloned `Date` instance.\n *\n * The `Date` will first have the time zone applied if possible, and then be\n * converted back to a `DateTime` within the same time zone.\n *\n * @since 3.6.0\n * @category mapping\n */\nexport const mutate: {\n  /**\n   * Modify a `DateTime` by applying a function to a cloned `Date` instance.\n   *\n   * The `Date` will first have the time zone applied if possible, and then be\n   * converted back to a `DateTime` within the same time zone.\n   *\n   * @since 3.6.0\n   * @category mapping\n   */\n  (f: (date: Date) => void): <A extends DateTime>(self: A) => DateTime.PreserveZone<A>\n  /**\n   * Modify a `DateTime` by applying a function to a cloned `Date` instance.\n   *\n   * The `Date` will first have the time zone applied if possible, and then be\n   * converted back to a `DateTime` within the same time zone.\n   *\n   * @since 3.6.0\n   * @category mapping\n   */\n  <A extends DateTime>(self: A, f: (date: Date) => void): DateTime.PreserveZone<A>\n} = dual(2, (self: DateTime, f: (date: Date) => void): DateTime => {\n  if (self._tag === \"Utc\") {\n    const date = toDateUtc(self)\n    f(date)\n    return makeUtc(date.getTime())\n  }\n  const adjustedDate = toDate(self)\n  const newAdjustedDate = new Date(adjustedDate.getTime())\n  f(newAdjustedDate)\n  return makeZonedFromAdjusted(newAdjustedDate.getTime(), self.zone)\n})\n\n/**\n * Modify a `DateTime` by applying a function to a cloned UTC `Date` instance.\n *\n * @since 3.6.0\n * @category mapping\n */\nexport const mutateUtc: {\n  /**\n   * Modify a `DateTime` by applying a function to a cloned UTC `Date` instance.\n   *\n   * @since 3.6.0\n   * @category mapping\n   */\n  (f: (date: Date) => void): <A extends DateTime>(self: A) => DateTime.PreserveZone<A>\n  /**\n   * Modify a `DateTime` by applying a function to a cloned UTC `Date` instance.\n   *\n   * @since 3.6.0\n   * @category mapping\n   */\n  <A extends DateTime>(self: A, f: (date: Date) => void): DateTime.PreserveZone<A>\n} = dual(2, (self: DateTime, f: (date: Date) => void): DateTime =>\n  mapEpochMillis(self, (millis) => {\n    const date = new Date(millis)\n    f(date)\n    return date.getTime()\n  }))\n\n/**\n * Transform a `DateTime` by applying a function to the number of milliseconds\n * since the Unix epoch.\n *\n * @since 3.6.0\n * @category mapping\n * @example\n * import { DateTime } from \"effect\"\n *\n * // add 10 milliseconds\n * DateTime.unsafeMake(0).pipe(\n *   DateTime.mapEpochMillis((millis) => millis + 10)\n * )\n */\nexport const mapEpochMillis: {\n  /**\n   * Transform a `DateTime` by applying a function to the number of milliseconds\n   * since the Unix epoch.\n   *\n   * @since 3.6.0\n   * @category mapping\n   * @example\n   * import { DateTime } from \"effect\"\n   *\n   * // add 10 milliseconds\n   * DateTime.unsafeMake(0).pipe(\n   *   DateTime.mapEpochMillis((millis) => millis + 10)\n   * )\n   */\n  (f: (millis: number) => number): <A extends DateTime>(self: A) => DateTime.PreserveZone<A>\n  /**\n   * Transform a `DateTime` by applying a function to the number of milliseconds\n   * since the Unix epoch.\n   *\n   * @since 3.6.0\n   * @category mapping\n   * @example\n   * import { DateTime } from \"effect\"\n   *\n   * // add 10 milliseconds\n   * DateTime.unsafeMake(0).pipe(\n   *   DateTime.mapEpochMillis((millis) => millis + 10)\n   * )\n   */\n  <A extends DateTime>(self: A, f: (millis: number) => number): DateTime.PreserveZone<A>\n} = dual(2, (self: DateTime, f: (millis: number) => number): DateTime => {\n  const millis = f(toEpochMillis(self))\n  return self._tag === \"Utc\" ? makeUtc(millis) : makeZonedProto(millis, self.zone)\n})\n\n/**\n * Using the time zone adjusted `Date`, apply a function to the `Date` and\n * return the result.\n *\n * @since 3.6.0\n * @category mapping\n * @example\n * import { DateTime } from \"effect\"\n *\n * // get the time zone adjusted date in milliseconds\n * DateTime.unsafeMakeZoned(0, { timeZone: \"Europe/London\" }).pipe(\n *   DateTime.withDate((date) => date.getTime())\n * )\n */\nexport const withDate: {\n  /**\n   * Using the time zone adjusted `Date`, apply a function to the `Date` and\n   * return the result.\n   *\n   * @since 3.6.0\n   * @category mapping\n   * @example\n   * import { DateTime } from \"effect\"\n   *\n   * // get the time zone adjusted date in milliseconds\n   * DateTime.unsafeMakeZoned(0, { timeZone: \"Europe/London\" }).pipe(\n   *   DateTime.withDate((date) => date.getTime())\n   * )\n   */\n  <A>(f: (date: Date) => A): (self: DateTime) => A\n  /**\n   * Using the time zone adjusted `Date`, apply a function to the `Date` and\n   * return the result.\n   *\n   * @since 3.6.0\n   * @category mapping\n   * @example\n   * import { DateTime } from \"effect\"\n   *\n   * // get the time zone adjusted date in milliseconds\n   * DateTime.unsafeMakeZoned(0, { timeZone: \"Europe/London\" }).pipe(\n   *   DateTime.withDate((date) => date.getTime())\n   * )\n   */\n  <A>(self: DateTime, f: (date: Date) => A): A\n} = dual(2, <A>(self: DateTime, f: (date: Date) => A): A => f(toDate(self)))\n\n/**\n * Using the time zone adjusted `Date`, apply a function to the `Date` and\n * return the result.\n *\n * @since 3.6.0\n * @category mapping\n * @example\n * import { DateTime } from \"effect\"\n *\n * // get the date in milliseconds\n * DateTime.unsafeMake(0).pipe(\n *   DateTime.withDateUtc((date) => date.getTime())\n * )\n */\nexport const withDateUtc: {\n  /**\n   * Using the time zone adjusted `Date`, apply a function to the `Date` and\n   * return the result.\n   *\n   * @since 3.6.0\n   * @category mapping\n   * @example\n   * import { DateTime } from \"effect\"\n   *\n   * // get the date in milliseconds\n   * DateTime.unsafeMake(0).pipe(\n   *   DateTime.withDateUtc((date) => date.getTime())\n   * )\n   */\n  <A>(f: (date: Date) => A): (self: DateTime) => A\n  /**\n   * Using the time zone adjusted `Date`, apply a function to the `Date` and\n   * return the result.\n   *\n   * @since 3.6.0\n   * @category mapping\n   * @example\n   * import { DateTime } from \"effect\"\n   *\n   * // get the date in milliseconds\n   * DateTime.unsafeMake(0).pipe(\n   *   DateTime.withDateUtc((date) => date.getTime())\n   * )\n   */\n  <A>(self: DateTime, f: (date: Date) => A): A\n} = dual(2, <A>(self: DateTime, f: (date: Date) => A): A => f(toDateUtc(self)))\n\n/**\n * @since 3.6.0\n * @category mapping\n */\nexport const match: {\n  /**\n   * @since 3.6.0\n   * @category mapping\n   */\n  <A, B>(\n    options: {\n      readonly onUtc: (_: Utc) => A\n      readonly onZoned: (_: Zoned) => B\n    }\n  ): (self: DateTime) => A | B\n  /**\n   * @since 3.6.0\n   * @category mapping\n   */\n  <A, B>(\n    self: DateTime,\n    options: {\n      readonly onUtc: (_: Utc) => A\n      readonly onZoned: (_: Zoned) => B\n    }\n  ): A | B\n} = dual(2, <A, B>(self: DateTime, options: {\n  readonly onUtc: (_: Utc) => A\n  readonly onZoned: (_: Zoned) => B\n}): A | B => self._tag === \"Utc\" ? options.onUtc(self) : options.onZoned(self))\n\n// =============================================================================\n// math\n// =============================================================================\n\n/**\n * Add the given `Duration` to a `DateTime`.\n *\n * @since 3.6.0\n * @category math\n * @example\n * import { DateTime } from \"effect\"\n *\n * // add 5 minutes\n * DateTime.unsafeMake(0).pipe(\n *   DateTime.addDuration(\"5 minutes\")\n * )\n */\nexport const addDuration: {\n  // =============================================================================\n  // math\n  // =============================================================================\n\n  /**\n   * Add the given `Duration` to a `DateTime`.\n   *\n   * @since 3.6.0\n   * @category math\n   * @example\n   * import { DateTime } from \"effect\"\n   *\n   * // add 5 minutes\n   * DateTime.unsafeMake(0).pipe(\n   *   DateTime.addDuration(\"5 minutes\")\n   * )\n   */\n  (duration: Duration.DurationInput): <A extends DateTime>(self: A) => DateTime.PreserveZone<A>\n  // =============================================================================\n  // math\n  // =============================================================================\n\n  /**\n   * Add the given `Duration` to a `DateTime`.\n   *\n   * @since 3.6.0\n   * @category math\n   * @example\n   * import { DateTime } from \"effect\"\n   *\n   * // add 5 minutes\n   * DateTime.unsafeMake(0).pipe(\n   *   DateTime.addDuration(\"5 minutes\")\n   * )\n   */\n  <A extends DateTime>(self: A, duration: Duration.DurationInput): DateTime.PreserveZone<A>\n} = dual(\n  2,\n  (self: DateTime, duration: Duration.DurationInput): DateTime =>\n    mapEpochMillis(self, (millis) => millis + Duration.toMillis(duration))\n)\n\n/**\n * Subtract the given `Duration` from a `DateTime`.\n *\n * @since 3.6.0\n * @category math\n * @example\n * import { DateTime } from \"effect\"\n *\n * // subtract 5 minutes\n * DateTime.unsafeMake(0).pipe(\n *   DateTime.subtractDuration(\"5 minutes\")\n * )\n */\nexport const subtractDuration: {\n  /**\n   * Subtract the given `Duration` from a `DateTime`.\n   *\n   * @since 3.6.0\n   * @category math\n   * @example\n   * import { DateTime } from \"effect\"\n   *\n   * // subtract 5 minutes\n   * DateTime.unsafeMake(0).pipe(\n   *   DateTime.subtractDuration(\"5 minutes\")\n   * )\n   */\n  (duration: Duration.DurationInput): <A extends DateTime>(self: A) => DateTime.PreserveZone<A>\n  /**\n   * Subtract the given `Duration` from a `DateTime`.\n   *\n   * @since 3.6.0\n   * @category math\n   * @example\n   * import { DateTime } from \"effect\"\n   *\n   * // subtract 5 minutes\n   * DateTime.unsafeMake(0).pipe(\n   *   DateTime.subtractDuration(\"5 minutes\")\n   * )\n   */\n  <A extends DateTime>(self: A, duration: Duration.DurationInput): DateTime.PreserveZone<A>\n} = dual(\n  2,\n  (self: DateTime, duration: Duration.DurationInput): DateTime =>\n    mapEpochMillis(self, (millis) => millis - Duration.toMillis(duration))\n)\n\nconst addMillis = (date: Date, amount: number): void => {\n  date.setTime(date.getTime() + amount)\n}\n\n/**\n * Add the given `amount` of `unit`'s to a `DateTime`.\n *\n * The time zone is taken into account when adding days, weeks, months, and\n * years.\n *\n * @since 3.6.0\n * @category math\n * @example\n * import { DateTime } from \"effect\"\n *\n * // add 5 minutes\n * DateTime.unsafeMake(0).pipe(\n *   DateTime.add({ minutes: 5 })\n * )\n */\nexport const add: {\n  /**\n   * Add the given `amount` of `unit`'s to a `DateTime`.\n   *\n   * The time zone is taken into account when adding days, weeks, months, and\n   * years.\n   *\n   * @since 3.6.0\n   * @category math\n   * @example\n   * import { DateTime } from \"effect\"\n   *\n   * // add 5 minutes\n   * DateTime.unsafeMake(0).pipe(\n   *   DateTime.add({ minutes: 5 })\n   * )\n   */\n  (parts: Partial<DateTime.PartsForMath>): <A extends DateTime>(self: A) => DateTime.PreserveZone<A>\n  /**\n   * Add the given `amount` of `unit`'s to a `DateTime`.\n   *\n   * The time zone is taken into account when adding days, weeks, months, and\n   * years.\n   *\n   * @since 3.6.0\n   * @category math\n   * @example\n   * import { DateTime } from \"effect\"\n   *\n   * // add 5 minutes\n   * DateTime.unsafeMake(0).pipe(\n   *   DateTime.add({ minutes: 5 })\n   * )\n   */\n  <A extends DateTime>(self: A, parts: Partial<DateTime.PartsForMath>): DateTime.PreserveZone<A>\n} = dual(2, (self: DateTime, parts: Partial<DateTime.PartsForMath>): DateTime =>\n  mutate(self, (date) => {\n    if (parts.millis) {\n      addMillis(date, parts.millis)\n    }\n    if (parts.seconds) {\n      addMillis(date, parts.seconds * 1000)\n    }\n    if (parts.minutes) {\n      addMillis(date, parts.minutes * 60 * 1000)\n    }\n    if (parts.hours) {\n      addMillis(date, parts.hours * 60 * 60 * 1000)\n    }\n    if (parts.days) {\n      date.setUTCDate(date.getUTCDate() + parts.days)\n    }\n    if (parts.weeks) {\n      date.setUTCDate(date.getUTCDate() + parts.weeks * 7)\n    }\n    if (parts.months) {\n      const day = date.getUTCDate()\n      date.setUTCMonth(date.getUTCMonth() + parts.months + 1, 0)\n      if (day < date.getUTCDate()) {\n        date.setUTCDate(day)\n      }\n    }\n    if (parts.years) {\n      const day = date.getUTCDate()\n      const month = date.getUTCMonth()\n      date.setUTCFullYear(\n        date.getUTCFullYear() + parts.years,\n        month + 1,\n        0\n      )\n      if (day < date.getUTCDate()) {\n        date.setUTCDate(day)\n      }\n    }\n  }))\n\n/**\n * Subtract the given `amount` of `unit`'s from a `DateTime`.\n *\n * @since 3.6.0\n * @category math\n * @example\n * import { DateTime } from \"effect\"\n *\n * // subtract 5 minutes\n * DateTime.unsafeMake(0).pipe(\n *   DateTime.subtract({ minutes: 5 })\n * )\n */\nexport const subtract: {\n  /**\n   * Subtract the given `amount` of `unit`'s from a `DateTime`.\n   *\n   * @since 3.6.0\n   * @category math\n   * @example\n   * import { DateTime } from \"effect\"\n   *\n   * // subtract 5 minutes\n   * DateTime.unsafeMake(0).pipe(\n   *   DateTime.subtract({ minutes: 5 })\n   * )\n   */\n  (parts: Partial<DateTime.PartsForMath>): <A extends DateTime>(self: A) => DateTime.PreserveZone<A>\n  /**\n   * Subtract the given `amount` of `unit`'s from a `DateTime`.\n   *\n   * @since 3.6.0\n   * @category math\n   * @example\n   * import { DateTime } from \"effect\"\n   *\n   * // subtract 5 minutes\n   * DateTime.unsafeMake(0).pipe(\n   *   DateTime.subtract({ minutes: 5 })\n   * )\n   */\n  <A extends DateTime>(self: A, parts: Partial<DateTime.PartsForMath>): DateTime.PreserveZone<A>\n} = dual(2, (self: DateTime, parts: Partial<DateTime.PartsForMath>): DateTime => {\n  const newParts = {} as Partial<Mutable<DateTime.PartsForMath>>\n  for (const key in parts) {\n    newParts[key as keyof DateTime.PartsForMath] = -1 * parts[key as keyof DateTime.PartsForMath]!\n  }\n  return add(self, newParts)\n})\n\nfunction startOfDate(date: Date, part: DateTime.UnitSingular, options?: {\n  readonly weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | undefined\n}) {\n  switch (part) {\n    case \"second\": {\n      date.setUTCMilliseconds(0)\n      break\n    }\n    case \"minute\": {\n      date.setUTCSeconds(0, 0)\n      break\n    }\n    case \"hour\": {\n      date.setUTCMinutes(0, 0, 0)\n      break\n    }\n    case \"day\": {\n      date.setUTCHours(0, 0, 0, 0)\n      break\n    }\n    case \"week\": {\n      const weekStartsOn = options?.weekStartsOn ?? 0\n      const day = date.getUTCDay()\n      const diff = (day - weekStartsOn + 7) % 7\n      date.setUTCDate(date.getUTCDate() - diff)\n      date.setUTCHours(0, 0, 0, 0)\n      break\n    }\n    case \"month\": {\n      date.setUTCDate(1)\n      date.setUTCHours(0, 0, 0, 0)\n      break\n    }\n    case \"year\": {\n      date.setUTCMonth(0, 1)\n      date.setUTCHours(0, 0, 0, 0)\n      break\n    }\n  }\n}\n\n/**\n * Converts a `DateTime` to the start of the given `part`.\n *\n * If the part is `week`, the `weekStartsOn` option can be used to specify the\n * day of the week that the week starts on. The default is 0 (Sunday).\n *\n * @since 3.6.0\n * @category math\n * @example\n * import { DateTime } from \"effect\"\n *\n * // returns \"2024-01-01T00:00:00Z\"\n * DateTime.unsafeMake(\"2024-01-01T12:00:00Z\").pipe(\n *   DateTime.startOf(\"day\"),\n *   DateTime.formatIso\n * )\n */\nexport const startOf: {\n  /**\n   * Converts a `DateTime` to the start of the given `part`.\n   *\n   * If the part is `week`, the `weekStartsOn` option can be used to specify the\n   * day of the week that the week starts on. The default is 0 (Sunday).\n   *\n   * @since 3.6.0\n   * @category math\n   * @example\n   * import { DateTime } from \"effect\"\n   *\n   * // returns \"2024-01-01T00:00:00Z\"\n   * DateTime.unsafeMake(\"2024-01-01T12:00:00Z\").pipe(\n   *   DateTime.startOf(\"day\"),\n   *   DateTime.formatIso\n   * )\n   */\n  (\n    part: DateTime.UnitSingular,\n    options?: {\n      readonly weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | undefined\n    }\n  ): <A extends DateTime>(self: A) => DateTime.PreserveZone<A>\n  /**\n   * Converts a `DateTime` to the start of the given `part`.\n   *\n   * If the part is `week`, the `weekStartsOn` option can be used to specify the\n   * day of the week that the week starts on. The default is 0 (Sunday).\n   *\n   * @since 3.6.0\n   * @category math\n   * @example\n   * import { DateTime } from \"effect\"\n   *\n   * // returns \"2024-01-01T00:00:00Z\"\n   * DateTime.unsafeMake(\"2024-01-01T12:00:00Z\").pipe(\n   *   DateTime.startOf(\"day\"),\n   *   DateTime.formatIso\n   * )\n   */\n  <A extends DateTime>(\n    self: A,\n    part: DateTime.UnitSingular,\n    options?: {\n      readonly weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | undefined\n    }\n  ): DateTime.PreserveZone<A>\n} = dual(isDateTimeArgs, (self: DateTime, part: DateTime.UnitSingular, options?: {\n  readonly weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | undefined\n}): DateTime => mutate(self, (date) => startOfDate(date, part, options)))\n\nfunction endOfDate(date: Date, part: DateTime.UnitSingular, options?: {\n  readonly weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | undefined\n}) {\n  switch (part) {\n    case \"second\": {\n      date.setUTCMilliseconds(999)\n      break\n    }\n    case \"minute\": {\n      date.setUTCSeconds(59, 999)\n      break\n    }\n    case \"hour\": {\n      date.setUTCMinutes(59, 59, 999)\n      break\n    }\n    case \"day\": {\n      date.setUTCHours(23, 59, 59, 999)\n      break\n    }\n    case \"week\": {\n      const weekStartsOn = options?.weekStartsOn ?? 0\n      const day = date.getUTCDay()\n      const diff = (day - weekStartsOn + 7) % 7\n      date.setUTCDate(date.getUTCDate() - diff + 6)\n      date.setUTCHours(23, 59, 59, 999)\n      break\n    }\n    case \"month\": {\n      date.setUTCMonth(date.getUTCMonth() + 1, 0)\n      date.setUTCHours(23, 59, 59, 999)\n      break\n    }\n    case \"year\": {\n      date.setUTCMonth(11, 31)\n      date.setUTCHours(23, 59, 59, 999)\n      break\n    }\n  }\n}\n\n/**\n * Converts a `DateTime` to the end of the given `part`.\n *\n * If the part is `week`, the `weekStartsOn` option can be used to specify the\n * day of the week that the week starts on. The default is 0 (Sunday).\n *\n * @since 3.6.0\n * @category math\n * @example\n * import { DateTime } from \"effect\"\n *\n * // returns \"2024-01-01T23:59:59.999Z\"\n * DateTime.unsafeMake(\"2024-01-01T12:00:00Z\").pipe(\n *   DateTime.endOf(\"day\"),\n *   DateTime.formatIso\n * )\n */\nexport const endOf: {\n  /**\n   * Converts a `DateTime` to the end of the given `part`.\n   *\n   * If the part is `week`, the `weekStartsOn` option can be used to specify the\n   * day of the week that the week starts on. The default is 0 (Sunday).\n   *\n   * @since 3.6.0\n   * @category math\n   * @example\n   * import { DateTime } from \"effect\"\n   *\n   * // returns \"2024-01-01T23:59:59.999Z\"\n   * DateTime.unsafeMake(\"2024-01-01T12:00:00Z\").pipe(\n   *   DateTime.endOf(\"day\"),\n   *   DateTime.formatIso\n   * )\n   */\n  (\n    part: DateTime.UnitSingular,\n    options?: {\n      readonly weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | undefined\n    }\n  ): <A extends DateTime>(self: A) => DateTime.PreserveZone<A>\n  /**\n   * Converts a `DateTime` to the end of the given `part`.\n   *\n   * If the part is `week`, the `weekStartsOn` option can be used to specify the\n   * day of the week that the week starts on. The default is 0 (Sunday).\n   *\n   * @since 3.6.0\n   * @category math\n   * @example\n   * import { DateTime } from \"effect\"\n   *\n   * // returns \"2024-01-01T23:59:59.999Z\"\n   * DateTime.unsafeMake(\"2024-01-01T12:00:00Z\").pipe(\n   *   DateTime.endOf(\"day\"),\n   *   DateTime.formatIso\n   * )\n   */\n  <A extends DateTime>(\n    self: A,\n    part: DateTime.UnitSingular,\n    options?: {\n      readonly weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | undefined\n    }\n  ): DateTime.PreserveZone<A>\n} = dual(isDateTimeArgs, (self: DateTime, part: DateTime.UnitSingular, options?: {\n  readonly weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | undefined\n}): DateTime => mutate(self, (date) => endOfDate(date, part, options)))\n\n/**\n * Converts a `DateTime` to the nearest given `part`.\n *\n * If the part is `week`, the `weekStartsOn` option can be used to specify the\n * day of the week that the week starts on. The default is 0 (Sunday).\n *\n * @since 3.6.0\n * @category math\n * @example\n * import { DateTime } from \"effect\"\n *\n * // returns \"2024-01-02T00:00:00Z\"\n * DateTime.unsafeMake(\"2024-01-01T12:01:00Z\").pipe(\n *   DateTime.nearest(\"day\"),\n *   DateTime.formatIso\n * )\n */\nexport const nearest: {\n  /**\n   * Converts a `DateTime` to the nearest given `part`.\n   *\n   * If the part is `week`, the `weekStartsOn` option can be used to specify the\n   * day of the week that the week starts on. The default is 0 (Sunday).\n   *\n   * @since 3.6.0\n   * @category math\n   * @example\n   * import { DateTime } from \"effect\"\n   *\n   * // returns \"2024-01-02T00:00:00Z\"\n   * DateTime.unsafeMake(\"2024-01-01T12:01:00Z\").pipe(\n   *   DateTime.nearest(\"day\"),\n   *   DateTime.formatIso\n   * )\n   */\n  (\n    part: DateTime.UnitSingular,\n    options?: {\n      readonly weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | undefined\n    }\n  ): <A extends DateTime>(self: A) => DateTime.PreserveZone<A>\n  /**\n   * Converts a `DateTime` to the nearest given `part`.\n   *\n   * If the part is `week`, the `weekStartsOn` option can be used to specify the\n   * day of the week that the week starts on. The default is 0 (Sunday).\n   *\n   * @since 3.6.0\n   * @category math\n   * @example\n   * import { DateTime } from \"effect\"\n   *\n   * // returns \"2024-01-02T00:00:00Z\"\n   * DateTime.unsafeMake(\"2024-01-01T12:01:00Z\").pipe(\n   *   DateTime.nearest(\"day\"),\n   *   DateTime.formatIso\n   * )\n   */\n  <A extends DateTime>(\n    self: A,\n    part: DateTime.UnitSingular,\n    options?: {\n      readonly weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | undefined\n    }\n  ): DateTime.PreserveZone<A>\n} = dual(isDateTimeArgs, (self: DateTime, part: DateTime.UnitSingular, options?: {\n  readonly weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | undefined\n}): DateTime =>\n  mutate(self, (date) => {\n    if (part === \"milli\") return\n    const millis = date.getTime()\n    const start = new Date(millis)\n    startOfDate(start, part, options)\n    const startMillis = start.getTime()\n    const end = new Date(millis)\n    endOfDate(end, part, options)\n    const endMillis = end.getTime() + 1\n    const diffStart = millis - startMillis\n    const diffEnd = endMillis - millis\n    if (diffStart < diffEnd) {\n      date.setTime(startMillis)\n    } else {\n      date.setTime(endMillis)\n    }\n  }))\n\n// =============================================================================\n// formatting\n// =============================================================================\n\nconst intlTimeZone = (self: TimeZone): string => {\n  if (self._tag === \"Named\") {\n    return self.id\n  }\n  return offsetToString(self.offset)\n}\n\n/**\n * Format a `DateTime` as a string using the `DateTimeFormat` API.\n *\n * The `timeZone` option is set to the offset of the time zone.\n *\n * Note: On Node versions < 22, fixed \"Offset\" zones will set the time zone to\n * \"UTC\" and use the adjusted `Date`.\n *\n * @since 3.6.0\n * @category formatting\n */\nexport const format: {\n  /**\n   * Format a `DateTime` as a string using the `DateTimeFormat` API.\n   *\n   * The `timeZone` option is set to the offset of the time zone.\n   *\n   * Note: On Node versions < 22, fixed \"Offset\" zones will set the time zone to\n   * \"UTC\" and use the adjusted `Date`.\n   *\n   * @since 3.6.0\n   * @category formatting\n   */\n  (\n    options?:\n      | Intl.DateTimeFormatOptions & {\n        readonly locale?: string | undefined\n      }\n      | undefined\n  ): (self: DateTime) => string\n  /**\n   * Format a `DateTime` as a string using the `DateTimeFormat` API.\n   *\n   * The `timeZone` option is set to the offset of the time zone.\n   *\n   * Note: On Node versions < 22, fixed \"Offset\" zones will set the time zone to\n   * \"UTC\" and use the adjusted `Date`.\n   *\n   * @since 3.6.0\n   * @category formatting\n   */\n  (\n    self: DateTime,\n    options?:\n      | Intl.DateTimeFormatOptions & {\n        readonly locale?: string | undefined\n      }\n      | undefined\n  ): string\n} = dual(isDateTimeArgs, (\n  self: DateTime,\n  options?:\n    | Intl.DateTimeFormatOptions & {\n      readonly locale?: string | undefined\n    }\n    | undefined\n): string => {\n  try {\n    return new Intl.DateTimeFormat(options?.locale, {\n      timeZone: self._tag === \"Utc\" ? \"UTC\" : intlTimeZone(self.zone),\n      ...options\n    }).format(self.epochMillis)\n  } catch (_) {\n    return new Intl.DateTimeFormat(options?.locale, {\n      timeZone: \"UTC\",\n      ...options\n    }).format(toDate(self))\n  }\n})\n\n/**\n * Format a `DateTime` as a string using the `DateTimeFormat` API.\n *\n * It will use the system's local time zone & locale.\n *\n * @since 3.6.0\n * @category formatting\n */\nexport const formatLocal: {\n  /**\n   * Format a `DateTime` as a string using the `DateTimeFormat` API.\n   *\n   * It will use the system's local time zone & locale.\n   *\n   * @since 3.6.0\n   * @category formatting\n   */\n  (\n    options?:\n      | Intl.DateTimeFormatOptions & {\n        readonly locale?: string | undefined\n      }\n      | undefined\n  ): (self: DateTime) => string\n  /**\n   * Format a `DateTime` as a string using the `DateTimeFormat` API.\n   *\n   * It will use the system's local time zone & locale.\n   *\n   * @since 3.6.0\n   * @category formatting\n   */\n  (\n    self: DateTime,\n    options?:\n      | Intl.DateTimeFormatOptions & {\n        readonly locale?: string | undefined\n      }\n      | undefined\n  ): string\n} = dual(isDateTimeArgs, (\n  self: DateTime,\n  options?:\n    | Intl.DateTimeFormatOptions & {\n      readonly locale?: string | undefined\n    }\n    | undefined\n): string => new Intl.DateTimeFormat(options?.locale, options).format(self.epochMillis))\n\n/**\n * Format a `DateTime` as a string using the `DateTimeFormat` API.\n *\n * This forces the time zone to be UTC.\n *\n * @since 3.6.0\n * @category formatting\n */\nexport const formatUtc: {\n  /**\n   * Format a `DateTime` as a string using the `DateTimeFormat` API.\n   *\n   * This forces the time zone to be UTC.\n   *\n   * @since 3.6.0\n   * @category formatting\n   */\n  (\n    options?:\n      | Intl.DateTimeFormatOptions & {\n        readonly locale?: string | undefined\n      }\n      | undefined\n  ): (self: DateTime) => string\n  /**\n   * Format a `DateTime` as a string using the `DateTimeFormat` API.\n   *\n   * This forces the time zone to be UTC.\n   *\n   * @since 3.6.0\n   * @category formatting\n   */\n  (\n    self: DateTime,\n    options?:\n      | Intl.DateTimeFormatOptions & {\n        readonly locale?: string | undefined\n      }\n      | undefined\n  ): string\n} = dual(isDateTimeArgs, (\n  self: DateTime,\n  options?:\n    | Intl.DateTimeFormatOptions & {\n      readonly locale?: string | undefined\n    }\n    | undefined\n): string =>\n  new Intl.DateTimeFormat(options?.locale, {\n    ...options,\n    timeZone: \"UTC\"\n  }).format(self.epochMillis))\n\n/**\n * Format a `DateTime` as a string using the `DateTimeFormat` API.\n *\n * @since 3.6.0\n * @category formatting\n */\nexport const formatIntl: {\n  /**\n   * Format a `DateTime` as a string using the `DateTimeFormat` API.\n   *\n   * @since 3.6.0\n   * @category formatting\n   */\n  (format: Intl.DateTimeFormat): (self: DateTime) => string\n  /**\n   * Format a `DateTime` as a string using the `DateTimeFormat` API.\n   *\n   * @since 3.6.0\n   * @category formatting\n   */\n  (self: DateTime, format: Intl.DateTimeFormat): string\n} = dual(2, (self: DateTime, format: Intl.DateTimeFormat): string => format.format(self.epochMillis))\n\n/**\n * Format a `DateTime` as a UTC ISO string.\n *\n * @since 3.6.0\n * @category formatting\n */\nexport const formatIso = (self: DateTime): string => toDateUtc(self).toISOString()\n\n/**\n * Format a `DateTime` as a time zone adjusted ISO date string.\n *\n * @since 3.6.0\n * @category formatting\n */\nexport const formatIsoDate = (self: DateTime): string => toDate(self).toISOString().slice(0, 10)\n\n/**\n * Format a `DateTime` as a UTC ISO date string.\n *\n * @since 3.6.0\n * @category formatting\n */\nexport const formatIsoDateUtc = (self: DateTime): string => toDateUtc(self).toISOString().slice(0, 10)\n\n/**\n * Format a `DateTime.Zoned` as a ISO string with an offset.\n *\n * @since 3.6.0\n * @category formatting\n */\nexport const formatIsoOffset = (self: DateTime): string => {\n  const date = toDate(self)\n  return self._tag === \"Utc\" ? date.toISOString() : `${date.toISOString().slice(0, -1)}${zonedOffsetIso(self)}`\n}\n\n/**\n * Format a `DateTime.Zoned` as a string.\n *\n * It uses the format: `YYYY-MM-DDTHH:mm:ss.sss+HH:MM[Time/Zone]`.\n *\n * @since 3.6.0\n * @category formatting\n */\nexport const formatIsoZoned = (self: Zoned): string =>\n  self.zone._tag === \"Offset\" ? formatIsoOffset(self) : `${formatIsoOffset(self)}[${self.zone.id}]`\n"],"names":["IllegalArgumentException","Clock","Context","Duration","Effect","Either","Equal","Equivalence_","dual","pipe","globalValue","Hash","Inspectable","Layer","Option","order","pipeArguments","Predicate","TypeId","Symbol","for","TimeZoneTypeId","Proto","arguments","NodeInspectSymbol","toString","toJSON","toDateUtc","ProtoUtc","_tag","symbol","cached","number","epochMillis","that","isDateTime","ProtoZoned","combine","hash","zone","equals","formatIsoZoned","ProtoTimeZone","ProtoTimeZoneNamed","string","id","isTimeZone","_id","ProtoTimeZoneOffset","offset","offsetToString","makeZonedProto","partsUtc","self","Object","create","u","hasProperty","isDateTimeArgs","args","isTimeZoneOffset","isTimeZoneNamed","isUtc","isZoned","Equivalence","make","a","b","Order","clamp","makeUtc","unsafeFromDate","date","getTime","Number","isNaN","unsafeMake","input","Date","setPartsDate","unsafeMakeZoned","options","timeZone","zoneMakeOffset","parsedZone","zoneFromString","isNone","value","adjustForTimeZone","makeZonedFromAdjusted","makeZoned","liftThrowable","zonedStringRegex","makeZonedFromString","match","exec","parseOffset","none","isoString","now","map","currentTimeMillis","unsafeNow","setZone","setZoneOffset","validZoneCache","Map","formatOptions","day","month","year","hour","minute","second","timeZoneName","fractionalSecondDigits","hourCycle","zoneMakeIntl","format","zoneId","resolvedOptions","has","get","set","zoneUnsafeMakeNamed","Intl","DateTimeFormat","_","zoneMakeNamed","zoneMakeNamedEffect","try","catch","e","zoneMakeLocal","offsetZoneRegex","test","some","zoneToString","setZoneNamed","unsafeSetZoneNamed","distance","other","toEpochMillis","distanceDurationEither","diffMillis","right","millis","left","distanceDuration","Math","abs","min","max","greaterThan","greaterThanOrEqualTo","lessThan","lessThanOrEqualTo","between","isFuture","unsafeIsFuture","isPast","unsafeIsPast","toDate","adjustedEpochMillis","undefined","parts","formatToParts","filter","type","setUTCFullYear","setUTCHours","zonedOffset","hours","floor","minutes","round","String","padStart","zonedOffsetIso","removeTime","withDate","dateToParts","getUTCMilliseconds","seconds","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","weekDay","getUTCDay","getUTCMonth","getUTCFullYear","toParts","toPartsUtc","partsAdjusted","withDateUtc","getPartUtc","part","getPart","setUTCMonth","setUTCDate","diff","setUTCMinutes","setUTCSeconds","setUTCMilliseconds","setParts","mutate","setPartsUtc","mutateUtc","CurrentTimeZone","Tag","setZoneCurrent","withCurrentZone","effect","provideService","withCurrentZoneLocal","provideServiceEffect","sync","withCurrentZoneOffset","withCurrentZoneNamed","nowInCurrentZone","flatMap","layerCurrentZone","succeed","layerCurrentZoneOffset","layerCurrentZoneNamed","layerCurrentZoneLocal","adjustedMillis","calculateNamedOffset","offsetRegex","sign","find","result","f","adjustedDate","newAdjustedDate","mapEpochMillis","onUtc","onZoned","addDuration","duration","toMillis","subtractDuration","addMillis","amount","setTime","add","days","weeks","months","years","subtract","newParts","key","startOfDate","weekStartsOn","startOf","endOfDate","endOf","nearest","start","startMillis","end","endMillis","diffStart","diffEnd","intlTimeZone","locale","formatLocal","formatUtc","formatIntl","formatIso","toISOString","formatIsoDate","slice","formatIsoDateUtc","formatIsoOffset"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 15291, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15297, "column": 0}, "map": {"version":3,"file":"BigDecimal.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/BigDecimal.ts"],"sourcesContent":["/**\n * This module provides utility functions and type class instances for working with the `BigDecimal` type in TypeScript.\n * It includes functions for basic arithmetic operations, as well as type class instances for `Equivalence` and `Order`.\n *\n * A `BigDecimal` allows storing any real number to arbitrary precision; which avoids common floating point errors\n * (such as 0.1 + 0.2 ≠ 0.3) at the cost of complexity.\n *\n * Internally, `BigDecimal` uses a `BigInt` object, paired with a 64-bit integer which determines the position of the\n * decimal point. Therefore, the precision *is not* actually arbitrary, but limited to 2<sup>63</sup> decimal places.\n *\n * It is not recommended to convert a floating point number to a decimal directly, as the floating point representation\n * may be unexpected.\n *\n * @since 2.0.0\n */\n\nimport * as Equal from \"./Equal.js\"\nimport * as equivalence from \"./Equivalence.js\"\nimport { dual, pipe } from \"./Function.js\"\nimport * as Hash from \"./Hash.js\"\nimport { type Inspectable, NodeInspectSymbol } from \"./Inspectable.js\"\nimport * as Option from \"./Option.js\"\nimport * as order from \"./Order.js\"\nimport type { Ordering } from \"./Ordering.js\"\nimport { type Pipeable, pipeArguments } from \"./Pipeable.js\"\nimport { hasProperty } from \"./Predicate.js\"\n\nconst DEFAULT_PRECISION = 100\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const TypeId: unique symbol = Symbol.for(\"effect/BigDecimal\")\n\n/**\n * @since 2.0.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface BigDecimal extends Equal.Equal, Pipeable, Inspectable {\n  readonly [TypeId]: TypeId\n  readonly value: bigint\n  readonly scale: number\n  /** @internal */\n  normalized?: BigDecimal\n}\n\nconst BigDecimalProto: Omit<BigDecimal, \"value\" | \"scale\" | \"normalized\"> = {\n  [TypeId]: TypeId,\n  [Hash.symbol](this: BigDecimal): number {\n    const normalized = normalize(this)\n    return pipe(\n      Hash.hash(normalized.value),\n      Hash.combine(Hash.number(normalized.scale)),\n      Hash.cached(this)\n    )\n  },\n  [Equal.symbol](this: BigDecimal, that: unknown): boolean {\n    return isBigDecimal(that) && equals(this, that)\n  },\n  toString(this: BigDecimal) {\n    return `BigDecimal(${format(this)})`\n  },\n  toJSON(this: BigDecimal) {\n    return {\n      _id: \"BigDecimal\",\n      value: String(this.value),\n      scale: this.scale\n    }\n  },\n  [NodeInspectSymbol](this: BigDecimal) {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n} as const\n\n/**\n * Checks if a given value is a `BigDecimal`.\n *\n * @param u - The value to check.\n *\n * @since 2.0.0\n * @category guards\n */\nexport const isBigDecimal = (u: unknown): u is BigDecimal => hasProperty(u, TypeId)\n\n/**\n * Creates a `BigDecimal` from a `bigint` value and a scale.\n *\n * @param value - The `bigint` value to create a `BigDecimal` from.\n * @param scale - The scale of the `BigDecimal`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make = (value: bigint, scale: number): BigDecimal => {\n  const o = Object.create(BigDecimalProto)\n  o.value = value\n  o.scale = scale\n  return o\n}\n\n/**\n * Internal function used to create pre-normalized `BigDecimal`s.\n *\n * @internal\n */\nexport const unsafeMakeNormalized = (value: bigint, scale: number): BigDecimal => {\n  if (value !== bigint0 && value % bigint10 === bigint0) {\n    throw new RangeError(\"Value must be normalized\")\n  }\n\n  const o = make(value, scale)\n  o.normalized = o\n  return o\n}\n\nconst bigint0 = BigInt(0)\nconst bigint1 = BigInt(1)\nconst bigint10 = BigInt(10)\nconst zero = unsafeMakeNormalized(bigint0, 0)\n\n/**\n * Normalizes a given `BigDecimal` by removing trailing zeros.\n *\n * @param self - The `BigDecimal` to normalize.\n *\n * @example\n * import { normalize, make, unsafeFromString } from \"effect/BigDecimal\"\n *\n * assert.deepStrictEqual(normalize(unsafeFromString(\"123.00000\")), normalize(make(123n, 0)))\n * assert.deepStrictEqual(normalize(unsafeFromString(\"12300000\")), normalize(make(123n, -5)))\n *\n * @since 2.0.0\n * @category scaling\n */\nexport const normalize = (self: BigDecimal): BigDecimal => {\n  if (self.normalized === undefined) {\n    if (self.value === bigint0) {\n      self.normalized = zero\n    } else {\n      const digits = `${self.value}`\n\n      let trail = 0\n      for (let i = digits.length - 1; i >= 0; i--) {\n        if (digits[i] === \"0\") {\n          trail++\n        } else {\n          break\n        }\n      }\n\n      if (trail === 0) {\n        self.normalized = self\n      }\n\n      const value = BigInt(digits.substring(0, digits.length - trail))\n      const scale = self.scale - trail\n      self.normalized = unsafeMakeNormalized(value, scale)\n    }\n  }\n\n  return self.normalized\n}\n\n/**\n * Scales a given `BigDecimal` to the specified scale.\n *\n * If the given scale is smaller than the current scale, the value will be rounded down to\n * the nearest integer.\n *\n * @param self - The `BigDecimal` to scale.\n * @param scale - The scale to scale to.\n *\n * @since 2.0.0\n * @category scaling\n */\nexport const scale: {\n  /**\n   * Scales a given `BigDecimal` to the specified scale.\n   *\n   * If the given scale is smaller than the current scale, the value will be rounded down to\n   * the nearest integer.\n   *\n   * @param self - The `BigDecimal` to scale.\n   * @param scale - The scale to scale to.\n   *\n   * @since 2.0.0\n   * @category scaling\n   */\n  (scale: number): (self: BigDecimal) => BigDecimal\n  /**\n   * Scales a given `BigDecimal` to the specified scale.\n   *\n   * If the given scale is smaller than the current scale, the value will be rounded down to\n   * the nearest integer.\n   *\n   * @param self - The `BigDecimal` to scale.\n   * @param scale - The scale to scale to.\n   *\n   * @since 2.0.0\n   * @category scaling\n   */\n  (self: BigDecimal, scale: number): BigDecimal\n} = dual(2, (self: BigDecimal, scale: number): BigDecimal => {\n  if (scale > self.scale) {\n    return make(self.value * bigint10 ** BigInt(scale - self.scale), scale)\n  }\n\n  if (scale < self.scale) {\n    return make(self.value / bigint10 ** BigInt(self.scale - scale), scale)\n  }\n\n  return self\n})\n\n/**\n * Provides an addition operation on `BigDecimal`s.\n *\n * @param self - The first operand.\n * @param that - The second operand.\n *\n * @example\n * import { sum, unsafeFromString } from \"effect/BigDecimal\"\n *\n * assert.deepStrictEqual(sum(unsafeFromString(\"2\"), unsafeFromString(\"3\")), unsafeFromString(\"5\"))\n *\n * @since 2.0.0\n * @category math\n */\nexport const sum: {\n  /**\n   * Provides an addition operation on `BigDecimal`s.\n   *\n   * @param self - The first operand.\n   * @param that - The second operand.\n   *\n   * @example\n   * import { sum, unsafeFromString } from \"effect/BigDecimal\"\n   *\n   * assert.deepStrictEqual(sum(unsafeFromString(\"2\"), unsafeFromString(\"3\")), unsafeFromString(\"5\"))\n   *\n   * @since 2.0.0\n   * @category math\n   */\n  (that: BigDecimal): (self: BigDecimal) => BigDecimal\n  /**\n   * Provides an addition operation on `BigDecimal`s.\n   *\n   * @param self - The first operand.\n   * @param that - The second operand.\n   *\n   * @example\n   * import { sum, unsafeFromString } from \"effect/BigDecimal\"\n   *\n   * assert.deepStrictEqual(sum(unsafeFromString(\"2\"), unsafeFromString(\"3\")), unsafeFromString(\"5\"))\n   *\n   * @since 2.0.0\n   * @category math\n   */\n  (self: BigDecimal, that: BigDecimal): BigDecimal\n} = dual(2, (self: BigDecimal, that: BigDecimal): BigDecimal => {\n  if (that.value === bigint0) {\n    return self\n  }\n\n  if (self.value === bigint0) {\n    return that\n  }\n\n  if (self.scale > that.scale) {\n    return make(scale(that, self.scale).value + self.value, self.scale)\n  }\n\n  if (self.scale < that.scale) {\n    return make(scale(self, that.scale).value + that.value, that.scale)\n  }\n\n  return make(self.value + that.value, self.scale)\n})\n\n/**\n * Provides a multiplication operation on `BigDecimal`s.\n *\n * @param self - The first operand.\n * @param that - The second operand.\n *\n * @example\n * import { multiply, unsafeFromString } from \"effect/BigDecimal\"\n *\n * assert.deepStrictEqual(multiply(unsafeFromString(\"2\"), unsafeFromString(\"3\")), unsafeFromString(\"6\"))\n *\n * @since 2.0.0\n * @category math\n */\nexport const multiply: {\n  /**\n   * Provides a multiplication operation on `BigDecimal`s.\n   *\n   * @param self - The first operand.\n   * @param that - The second operand.\n   *\n   * @example\n   * import { multiply, unsafeFromString } from \"effect/BigDecimal\"\n   *\n   * assert.deepStrictEqual(multiply(unsafeFromString(\"2\"), unsafeFromString(\"3\")), unsafeFromString(\"6\"))\n   *\n   * @since 2.0.0\n   * @category math\n   */\n  (that: BigDecimal): (self: BigDecimal) => BigDecimal\n  /**\n   * Provides a multiplication operation on `BigDecimal`s.\n   *\n   * @param self - The first operand.\n   * @param that - The second operand.\n   *\n   * @example\n   * import { multiply, unsafeFromString } from \"effect/BigDecimal\"\n   *\n   * assert.deepStrictEqual(multiply(unsafeFromString(\"2\"), unsafeFromString(\"3\")), unsafeFromString(\"6\"))\n   *\n   * @since 2.0.0\n   * @category math\n   */\n  (self: BigDecimal, that: BigDecimal): BigDecimal\n} = dual(2, (self: BigDecimal, that: BigDecimal): BigDecimal => {\n  if (that.value === bigint0 || self.value === bigint0) {\n    return zero\n  }\n\n  return make(self.value * that.value, self.scale + that.scale)\n})\n\n/**\n * Provides a subtraction operation on `BigDecimal`s.\n *\n * @param self - The first operand.\n * @param that - The second operand.\n *\n * @example\n * import { subtract, unsafeFromString } from \"effect/BigDecimal\"\n *\n * assert.deepStrictEqual(subtract(unsafeFromString(\"2\"), unsafeFromString(\"3\")), unsafeFromString(\"-1\"))\n *\n * @since 2.0.0\n * @category math\n */\nexport const subtract: {\n  /**\n   * Provides a subtraction operation on `BigDecimal`s.\n   *\n   * @param self - The first operand.\n   * @param that - The second operand.\n   *\n   * @example\n   * import { subtract, unsafeFromString } from \"effect/BigDecimal\"\n   *\n   * assert.deepStrictEqual(subtract(unsafeFromString(\"2\"), unsafeFromString(\"3\")), unsafeFromString(\"-1\"))\n   *\n   * @since 2.0.0\n   * @category math\n   */\n  (that: BigDecimal): (self: BigDecimal) => BigDecimal\n  /**\n   * Provides a subtraction operation on `BigDecimal`s.\n   *\n   * @param self - The first operand.\n   * @param that - The second operand.\n   *\n   * @example\n   * import { subtract, unsafeFromString } from \"effect/BigDecimal\"\n   *\n   * assert.deepStrictEqual(subtract(unsafeFromString(\"2\"), unsafeFromString(\"3\")), unsafeFromString(\"-1\"))\n   *\n   * @since 2.0.0\n   * @category math\n   */\n  (self: BigDecimal, that: BigDecimal): BigDecimal\n} = dual(2, (self: BigDecimal, that: BigDecimal): BigDecimal => {\n  if (that.value === bigint0) {\n    return self\n  }\n\n  if (self.value === bigint0) {\n    return make(-that.value, that.scale)\n  }\n\n  if (self.scale > that.scale) {\n    return make(self.value - scale(that, self.scale).value, self.scale)\n  }\n\n  if (self.scale < that.scale) {\n    return make(scale(self, that.scale).value - that.value, that.scale)\n  }\n\n  return make(self.value - that.value, self.scale)\n})\n\n/**\n * Internal function used for arbitrary precision division.\n */\nconst divideWithPrecision = (\n  num: bigint,\n  den: bigint,\n  scale: number,\n  precision: number\n): BigDecimal => {\n  const numNegative = num < bigint0\n  const denNegative = den < bigint0\n  const negateResult = numNegative !== denNegative\n\n  num = numNegative ? -num : num\n  den = denNegative ? -den : den\n\n  // Shift digits until numerator is larger than denominator (set scale appropriately).\n  while (num < den) {\n    num *= bigint10\n    scale++\n  }\n\n  // First division.\n  let quotient = num / den\n  let remainder = num % den\n\n  if (remainder === bigint0) {\n    // No remainder, return immediately.\n    return make(negateResult ? -quotient : quotient, scale)\n  }\n\n  // The quotient is guaranteed to be non-negative at this point. No need to consider sign.\n  let count = `${quotient}`.length\n\n  // Shift the remainder by 1 decimal; The quotient will be 1 digit upon next division.\n  remainder *= bigint10\n  while (remainder !== bigint0 && count < precision) {\n    const q = remainder / den\n    const r = remainder % den\n    quotient = quotient * bigint10 + q\n    remainder = r * bigint10\n\n    count++\n    scale++\n  }\n\n  if (remainder !== bigint0) {\n    // Round final number with remainder.\n    quotient += roundTerminal(remainder / den)\n  }\n\n  return make(negateResult ? -quotient : quotient, scale)\n}\n\n/**\n * Internal function used for rounding.\n *\n * Returns 1 if the most significant digit is >= 5, otherwise 0.\n *\n * This is used after dividing a number by a power of ten and rounding the last digit.\n *\n * @internal\n */\nexport const roundTerminal = (n: bigint): bigint => {\n  const pos = n >= bigint0 ? 0 : 1\n  return Number(`${n}`[pos]) < 5 ? bigint0 : bigint1\n}\n\n/**\n * Provides a division operation on `BigDecimal`s.\n *\n * If the dividend is not a multiple of the divisor the result will be a `BigDecimal` value\n * which represents the integer division rounded down to the nearest integer.\n *\n * If the divisor is `0`, the result will be `None`.\n *\n * @param self - The dividend operand.\n * @param that - The divisor operand.\n *\n * @example\n * import { BigDecimal, Option } from \"effect\"\n *\n * assert.deepStrictEqual(BigDecimal.divide(BigDecimal.unsafeFromString(\"6\"), BigDecimal.unsafeFromString(\"3\")), Option.some(BigDecimal.unsafeFromString(\"2\")))\n * assert.deepStrictEqual(BigDecimal.divide(BigDecimal.unsafeFromString(\"6\"), BigDecimal.unsafeFromString(\"4\")), Option.some(BigDecimal.unsafeFromString(\"1.5\")))\n * assert.deepStrictEqual(BigDecimal.divide(BigDecimal.unsafeFromString(\"6\"), BigDecimal.unsafeFromString(\"0\")), Option.none())\n *\n * @since 2.0.0\n * @category math\n */\nexport const divide: {\n  /**\n   * Provides a division operation on `BigDecimal`s.\n   *\n   * If the dividend is not a multiple of the divisor the result will be a `BigDecimal` value\n   * which represents the integer division rounded down to the nearest integer.\n   *\n   * If the divisor is `0`, the result will be `None`.\n   *\n   * @param self - The dividend operand.\n   * @param that - The divisor operand.\n   *\n   * @example\n   * import { BigDecimal, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(BigDecimal.divide(BigDecimal.unsafeFromString(\"6\"), BigDecimal.unsafeFromString(\"3\")), Option.some(BigDecimal.unsafeFromString(\"2\")))\n   * assert.deepStrictEqual(BigDecimal.divide(BigDecimal.unsafeFromString(\"6\"), BigDecimal.unsafeFromString(\"4\")), Option.some(BigDecimal.unsafeFromString(\"1.5\")))\n   * assert.deepStrictEqual(BigDecimal.divide(BigDecimal.unsafeFromString(\"6\"), BigDecimal.unsafeFromString(\"0\")), Option.none())\n   *\n   * @since 2.0.0\n   * @category math\n   */\n  (that: BigDecimal): (self: BigDecimal) => Option.Option<BigDecimal>\n  /**\n   * Provides a division operation on `BigDecimal`s.\n   *\n   * If the dividend is not a multiple of the divisor the result will be a `BigDecimal` value\n   * which represents the integer division rounded down to the nearest integer.\n   *\n   * If the divisor is `0`, the result will be `None`.\n   *\n   * @param self - The dividend operand.\n   * @param that - The divisor operand.\n   *\n   * @example\n   * import { BigDecimal, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(BigDecimal.divide(BigDecimal.unsafeFromString(\"6\"), BigDecimal.unsafeFromString(\"3\")), Option.some(BigDecimal.unsafeFromString(\"2\")))\n   * assert.deepStrictEqual(BigDecimal.divide(BigDecimal.unsafeFromString(\"6\"), BigDecimal.unsafeFromString(\"4\")), Option.some(BigDecimal.unsafeFromString(\"1.5\")))\n   * assert.deepStrictEqual(BigDecimal.divide(BigDecimal.unsafeFromString(\"6\"), BigDecimal.unsafeFromString(\"0\")), Option.none())\n   *\n   * @since 2.0.0\n   * @category math\n   */\n  (self: BigDecimal, that: BigDecimal): Option.Option<BigDecimal>\n} = dual(2, (self: BigDecimal, that: BigDecimal): Option.Option<BigDecimal> => {\n  if (that.value === bigint0) {\n    return Option.none()\n  }\n\n  if (self.value === bigint0) {\n    return Option.some(zero)\n  }\n\n  const scale = self.scale - that.scale\n  if (self.value === that.value) {\n    return Option.some(make(bigint1, scale))\n  }\n\n  return Option.some(divideWithPrecision(self.value, that.value, scale, DEFAULT_PRECISION))\n})\n\n/**\n * Provides an unsafe division operation on `BigDecimal`s.\n *\n * If the dividend is not a multiple of the divisor the result will be a `BigDecimal` value\n * which represents the integer division rounded down to the nearest integer.\n *\n * Throws a `RangeError` if the divisor is `0`.\n *\n * @param self - The dividend operand.\n * @param that - The divisor operand.as\n *\n * @example\n * import { unsafeDivide, unsafeFromString } from \"effect/BigDecimal\"\n *\n * assert.deepStrictEqual(unsafeDivide(unsafeFromString(\"6\"), unsafeFromString(\"3\")), unsafeFromString(\"2\"))\n * assert.deepStrictEqual(unsafeDivide(unsafeFromString(\"6\"), unsafeFromString(\"4\")), unsafeFromString(\"1.5\"))\n *\n * @since 2.0.0\n * @category math\n */\nexport const unsafeDivide: {\n  /**\n   * Provides an unsafe division operation on `BigDecimal`s.\n   *\n   * If the dividend is not a multiple of the divisor the result will be a `BigDecimal` value\n   * which represents the integer division rounded down to the nearest integer.\n   *\n   * Throws a `RangeError` if the divisor is `0`.\n   *\n   * @param self - The dividend operand.\n   * @param that - The divisor operand.as\n   *\n   * @example\n   * import { unsafeDivide, unsafeFromString } from \"effect/BigDecimal\"\n   *\n   * assert.deepStrictEqual(unsafeDivide(unsafeFromString(\"6\"), unsafeFromString(\"3\")), unsafeFromString(\"2\"))\n   * assert.deepStrictEqual(unsafeDivide(unsafeFromString(\"6\"), unsafeFromString(\"4\")), unsafeFromString(\"1.5\"))\n   *\n   * @since 2.0.0\n   * @category math\n   */\n  (that: BigDecimal): (self: BigDecimal) => BigDecimal\n  /**\n   * Provides an unsafe division operation on `BigDecimal`s.\n   *\n   * If the dividend is not a multiple of the divisor the result will be a `BigDecimal` value\n   * which represents the integer division rounded down to the nearest integer.\n   *\n   * Throws a `RangeError` if the divisor is `0`.\n   *\n   * @param self - The dividend operand.\n   * @param that - The divisor operand.as\n   *\n   * @example\n   * import { unsafeDivide, unsafeFromString } from \"effect/BigDecimal\"\n   *\n   * assert.deepStrictEqual(unsafeDivide(unsafeFromString(\"6\"), unsafeFromString(\"3\")), unsafeFromString(\"2\"))\n   * assert.deepStrictEqual(unsafeDivide(unsafeFromString(\"6\"), unsafeFromString(\"4\")), unsafeFromString(\"1.5\"))\n   *\n   * @since 2.0.0\n   * @category math\n   */\n  (self: BigDecimal, that: BigDecimal): BigDecimal\n} = dual(2, (self: BigDecimal, that: BigDecimal): BigDecimal => {\n  if (that.value === bigint0) {\n    throw new RangeError(\"Division by zero\")\n  }\n\n  if (self.value === bigint0) {\n    return zero\n  }\n\n  const scale = self.scale - that.scale\n  if (self.value === that.value) {\n    return make(bigint1, scale)\n  }\n  return divideWithPrecision(self.value, that.value, scale, DEFAULT_PRECISION)\n})\n\n/**\n * @since 2.0.0\n * @category instances\n */\nexport const Order: order.Order<BigDecimal> = order.make((self, that) => {\n  const scmp = order.number(sign(self), sign(that))\n  if (scmp !== 0) {\n    return scmp\n  }\n\n  if (self.scale > that.scale) {\n    return order.bigint(self.value, scale(that, self.scale).value)\n  }\n\n  if (self.scale < that.scale) {\n    return order.bigint(scale(self, that.scale).value, that.value)\n  }\n\n  return order.bigint(self.value, that.value)\n})\n\n/**\n * Returns `true` if the first argument is less than the second, otherwise `false`.\n *\n * @param self - The first argument.\n * @param that - The second argument.\n *\n * @example\n * import { lessThan, unsafeFromString } from \"effect/BigDecimal\"\n *\n * assert.deepStrictEqual(lessThan(unsafeFromString(\"2\"), unsafeFromString(\"3\")), true)\n * assert.deepStrictEqual(lessThan(unsafeFromString(\"3\"), unsafeFromString(\"3\")), false)\n * assert.deepStrictEqual(lessThan(unsafeFromString(\"4\"), unsafeFromString(\"3\")), false)\n *\n * @since 2.0.0\n * @category predicates\n */\nexport const lessThan: {\n  /**\n   * Returns `true` if the first argument is less than the second, otherwise `false`.\n   *\n   * @param self - The first argument.\n   * @param that - The second argument.\n   *\n   * @example\n   * import { lessThan, unsafeFromString } from \"effect/BigDecimal\"\n   *\n   * assert.deepStrictEqual(lessThan(unsafeFromString(\"2\"), unsafeFromString(\"3\")), true)\n   * assert.deepStrictEqual(lessThan(unsafeFromString(\"3\"), unsafeFromString(\"3\")), false)\n   * assert.deepStrictEqual(lessThan(unsafeFromString(\"4\"), unsafeFromString(\"3\")), false)\n   *\n   * @since 2.0.0\n   * @category predicates\n   */\n  (that: BigDecimal): (self: BigDecimal) => boolean\n  /**\n   * Returns `true` if the first argument is less than the second, otherwise `false`.\n   *\n   * @param self - The first argument.\n   * @param that - The second argument.\n   *\n   * @example\n   * import { lessThan, unsafeFromString } from \"effect/BigDecimal\"\n   *\n   * assert.deepStrictEqual(lessThan(unsafeFromString(\"2\"), unsafeFromString(\"3\")), true)\n   * assert.deepStrictEqual(lessThan(unsafeFromString(\"3\"), unsafeFromString(\"3\")), false)\n   * assert.deepStrictEqual(lessThan(unsafeFromString(\"4\"), unsafeFromString(\"3\")), false)\n   *\n   * @since 2.0.0\n   * @category predicates\n   */\n  (self: BigDecimal, that: BigDecimal): boolean\n} = order.lessThan(Order)\n\n/**\n * Checks if a given `BigDecimal` is less than or equal to the provided one.\n *\n * @param self - The first `BigDecimal` to compare with.\n * @param that - The second `BigDecimal` to compare with.\n *\n * @example\n * import { lessThanOrEqualTo, unsafeFromString } from \"effect/BigDecimal\"\n *\n * assert.deepStrictEqual(lessThanOrEqualTo(unsafeFromString(\"2\"), unsafeFromString(\"3\")), true)\n * assert.deepStrictEqual(lessThanOrEqualTo(unsafeFromString(\"3\"), unsafeFromString(\"3\")), true)\n * assert.deepStrictEqual(lessThanOrEqualTo(unsafeFromString(\"4\"), unsafeFromString(\"3\")), false)\n *\n * @since 2.0.0\n * @category predicates\n */\nexport const lessThanOrEqualTo: {\n  /**\n   * Checks if a given `BigDecimal` is less than or equal to the provided one.\n   *\n   * @param self - The first `BigDecimal` to compare with.\n   * @param that - The second `BigDecimal` to compare with.\n   *\n   * @example\n   * import { lessThanOrEqualTo, unsafeFromString } from \"effect/BigDecimal\"\n   *\n   * assert.deepStrictEqual(lessThanOrEqualTo(unsafeFromString(\"2\"), unsafeFromString(\"3\")), true)\n   * assert.deepStrictEqual(lessThanOrEqualTo(unsafeFromString(\"3\"), unsafeFromString(\"3\")), true)\n   * assert.deepStrictEqual(lessThanOrEqualTo(unsafeFromString(\"4\"), unsafeFromString(\"3\")), false)\n   *\n   * @since 2.0.0\n   * @category predicates\n   */\n  (that: BigDecimal): (self: BigDecimal) => boolean\n  /**\n   * Checks if a given `BigDecimal` is less than or equal to the provided one.\n   *\n   * @param self - The first `BigDecimal` to compare with.\n   * @param that - The second `BigDecimal` to compare with.\n   *\n   * @example\n   * import { lessThanOrEqualTo, unsafeFromString } from \"effect/BigDecimal\"\n   *\n   * assert.deepStrictEqual(lessThanOrEqualTo(unsafeFromString(\"2\"), unsafeFromString(\"3\")), true)\n   * assert.deepStrictEqual(lessThanOrEqualTo(unsafeFromString(\"3\"), unsafeFromString(\"3\")), true)\n   * assert.deepStrictEqual(lessThanOrEqualTo(unsafeFromString(\"4\"), unsafeFromString(\"3\")), false)\n   *\n   * @since 2.0.0\n   * @category predicates\n   */\n  (self: BigDecimal, that: BigDecimal): boolean\n} = order.lessThanOrEqualTo(Order)\n\n/**\n * Returns `true` if the first argument is greater than the second, otherwise `false`.\n *\n * @param self - The first argument.\n * @param that - The second argument.\n *\n * @example\n * import { greaterThan, unsafeFromString } from \"effect/BigDecimal\"\n *\n * assert.deepStrictEqual(greaterThan(unsafeFromString(\"2\"), unsafeFromString(\"3\")), false)\n * assert.deepStrictEqual(greaterThan(unsafeFromString(\"3\"), unsafeFromString(\"3\")), false)\n * assert.deepStrictEqual(greaterThan(unsafeFromString(\"4\"), unsafeFromString(\"3\")), true)\n *\n * @since 2.0.0\n * @category predicates\n */\nexport const greaterThan: {\n  /**\n   * Returns `true` if the first argument is greater than the second, otherwise `false`.\n   *\n   * @param self - The first argument.\n   * @param that - The second argument.\n   *\n   * @example\n   * import { greaterThan, unsafeFromString } from \"effect/BigDecimal\"\n   *\n   * assert.deepStrictEqual(greaterThan(unsafeFromString(\"2\"), unsafeFromString(\"3\")), false)\n   * assert.deepStrictEqual(greaterThan(unsafeFromString(\"3\"), unsafeFromString(\"3\")), false)\n   * assert.deepStrictEqual(greaterThan(unsafeFromString(\"4\"), unsafeFromString(\"3\")), true)\n   *\n   * @since 2.0.0\n   * @category predicates\n   */\n  (that: BigDecimal): (self: BigDecimal) => boolean\n  /**\n   * Returns `true` if the first argument is greater than the second, otherwise `false`.\n   *\n   * @param self - The first argument.\n   * @param that - The second argument.\n   *\n   * @example\n   * import { greaterThan, unsafeFromString } from \"effect/BigDecimal\"\n   *\n   * assert.deepStrictEqual(greaterThan(unsafeFromString(\"2\"), unsafeFromString(\"3\")), false)\n   * assert.deepStrictEqual(greaterThan(unsafeFromString(\"3\"), unsafeFromString(\"3\")), false)\n   * assert.deepStrictEqual(greaterThan(unsafeFromString(\"4\"), unsafeFromString(\"3\")), true)\n   *\n   * @since 2.0.0\n   * @category predicates\n   */\n  (self: BigDecimal, that: BigDecimal): boolean\n} = order.greaterThan(Order)\n\n/**\n * Checks if a given `BigDecimal` is greater than or equal to the provided one.\n *\n * @param self - The first `BigDecimal` to compare with.\n * @param that - The second `BigDecimal` to compare with.\n *\n * @example\n * import { greaterThanOrEqualTo, unsafeFromString } from \"effect/BigDecimal\"\n *\n * assert.deepStrictEqual(greaterThanOrEqualTo(unsafeFromString(\"2\"), unsafeFromString(\"3\")), false)\n * assert.deepStrictEqual(greaterThanOrEqualTo(unsafeFromString(\"3\"), unsafeFromString(\"3\")), true)\n * assert.deepStrictEqual(greaterThanOrEqualTo(unsafeFromString(\"4\"), unsafeFromString(\"3\")), true)\n *\n * @since 2.0.0\n * @category predicates\n */\nexport const greaterThanOrEqualTo: {\n  /**\n   * Checks if a given `BigDecimal` is greater than or equal to the provided one.\n   *\n   * @param self - The first `BigDecimal` to compare with.\n   * @param that - The second `BigDecimal` to compare with.\n   *\n   * @example\n   * import { greaterThanOrEqualTo, unsafeFromString } from \"effect/BigDecimal\"\n   *\n   * assert.deepStrictEqual(greaterThanOrEqualTo(unsafeFromString(\"2\"), unsafeFromString(\"3\")), false)\n   * assert.deepStrictEqual(greaterThanOrEqualTo(unsafeFromString(\"3\"), unsafeFromString(\"3\")), true)\n   * assert.deepStrictEqual(greaterThanOrEqualTo(unsafeFromString(\"4\"), unsafeFromString(\"3\")), true)\n   *\n   * @since 2.0.0\n   * @category predicates\n   */\n  (that: BigDecimal): (self: BigDecimal) => boolean\n  /**\n   * Checks if a given `BigDecimal` is greater than or equal to the provided one.\n   *\n   * @param self - The first `BigDecimal` to compare with.\n   * @param that - The second `BigDecimal` to compare with.\n   *\n   * @example\n   * import { greaterThanOrEqualTo, unsafeFromString } from \"effect/BigDecimal\"\n   *\n   * assert.deepStrictEqual(greaterThanOrEqualTo(unsafeFromString(\"2\"), unsafeFromString(\"3\")), false)\n   * assert.deepStrictEqual(greaterThanOrEqualTo(unsafeFromString(\"3\"), unsafeFromString(\"3\")), true)\n   * assert.deepStrictEqual(greaterThanOrEqualTo(unsafeFromString(\"4\"), unsafeFromString(\"3\")), true)\n   *\n   * @since 2.0.0\n   * @category predicates\n   */\n  (self: BigDecimal, that: BigDecimal): boolean\n} = order.greaterThanOrEqualTo(Order)\n\n/**\n * Checks if a `BigDecimal` is between a `minimum` and `maximum` value (inclusive).\n *\n * @param self - The `number` to check.\n * @param minimum - The `minimum` value to check.\n * @param maximum - The `maximum` value to check.\n *\n * @example\n * import { BigDecimal } from \"effect\"\n *\n * const between = BigDecimal.between({\n *   minimum: BigDecimal.unsafeFromString(\"1\"),\n *   maximum: BigDecimal.unsafeFromString(\"5\") }\n * )\n *\n * assert.deepStrictEqual(between(BigDecimal.unsafeFromString(\"3\")), true)\n * assert.deepStrictEqual(between(BigDecimal.unsafeFromString(\"0\")), false)\n * assert.deepStrictEqual(between(BigDecimal.unsafeFromString(\"6\")), false)\n *\n * @since 2.0.0\n * @category predicates\n */\nexport const between: {\n  /**\n   * Checks if a `BigDecimal` is between a `minimum` and `maximum` value (inclusive).\n   *\n   * @param self - The `number` to check.\n   * @param minimum - The `minimum` value to check.\n   * @param maximum - The `maximum` value to check.\n   *\n   * @example\n   * import { BigDecimal } from \"effect\"\n   *\n   * const between = BigDecimal.between({\n   *   minimum: BigDecimal.unsafeFromString(\"1\"),\n   *   maximum: BigDecimal.unsafeFromString(\"5\") }\n   * )\n   *\n   * assert.deepStrictEqual(between(BigDecimal.unsafeFromString(\"3\")), true)\n   * assert.deepStrictEqual(between(BigDecimal.unsafeFromString(\"0\")), false)\n   * assert.deepStrictEqual(between(BigDecimal.unsafeFromString(\"6\")), false)\n   *\n   * @since 2.0.0\n   * @category predicates\n   */\n  (\n    options: {\n      minimum: BigDecimal\n      maximum: BigDecimal\n    }\n  ): (self: BigDecimal) => boolean\n  /**\n   * Checks if a `BigDecimal` is between a `minimum` and `maximum` value (inclusive).\n   *\n   * @param self - The `number` to check.\n   * @param minimum - The `minimum` value to check.\n   * @param maximum - The `maximum` value to check.\n   *\n   * @example\n   * import { BigDecimal } from \"effect\"\n   *\n   * const between = BigDecimal.between({\n   *   minimum: BigDecimal.unsafeFromString(\"1\"),\n   *   maximum: BigDecimal.unsafeFromString(\"5\") }\n   * )\n   *\n   * assert.deepStrictEqual(between(BigDecimal.unsafeFromString(\"3\")), true)\n   * assert.deepStrictEqual(between(BigDecimal.unsafeFromString(\"0\")), false)\n   * assert.deepStrictEqual(between(BigDecimal.unsafeFromString(\"6\")), false)\n   *\n   * @since 2.0.0\n   * @category predicates\n   */\n  (\n    self: BigDecimal,\n    options: {\n      minimum: BigDecimal\n      maximum: BigDecimal\n    }\n  ): boolean\n} = order.between(Order)\n\n/**\n * Restricts the given `BigDecimal` to be within the range specified by the `minimum` and `maximum` values.\n *\n * - If the `BigDecimal` is less than the `minimum` value, the function returns the `minimum` value.\n * - If the `BigDecimal` is greater than the `maximum` value, the function returns the `maximum` value.\n * - Otherwise, it returns the original `BigDecimal`.\n *\n * @param self - The `BigDecimal` to be clamped.\n * @param minimum - The lower end of the range.\n * @param maximum - The upper end of the range.\n *\n * @example\n * import { BigDecimal } from \"effect\"\n *\n * const clamp = BigDecimal.clamp({\n *   minimum: BigDecimal.unsafeFromString(\"1\"),\n *   maximum: BigDecimal.unsafeFromString(\"5\") }\n * )\n *\n * assert.deepStrictEqual(clamp(BigDecimal.unsafeFromString(\"3\")), BigDecimal.unsafeFromString(\"3\"))\n * assert.deepStrictEqual(clamp(BigDecimal.unsafeFromString(\"0\")), BigDecimal.unsafeFromString(\"1\"))\n * assert.deepStrictEqual(clamp(BigDecimal.unsafeFromString(\"6\")), BigDecimal.unsafeFromString(\"5\"))\n *\n * @since 2.0.0\n * @category math\n */\nexport const clamp: {\n  /**\n   * Restricts the given `BigDecimal` to be within the range specified by the `minimum` and `maximum` values.\n   *\n   * - If the `BigDecimal` is less than the `minimum` value, the function returns the `minimum` value.\n   * - If the `BigDecimal` is greater than the `maximum` value, the function returns the `maximum` value.\n   * - Otherwise, it returns the original `BigDecimal`.\n   *\n   * @param self - The `BigDecimal` to be clamped.\n   * @param minimum - The lower end of the range.\n   * @param maximum - The upper end of the range.\n   *\n   * @example\n   * import { BigDecimal } from \"effect\"\n   *\n   * const clamp = BigDecimal.clamp({\n   *   minimum: BigDecimal.unsafeFromString(\"1\"),\n   *   maximum: BigDecimal.unsafeFromString(\"5\") }\n   * )\n   *\n   * assert.deepStrictEqual(clamp(BigDecimal.unsafeFromString(\"3\")), BigDecimal.unsafeFromString(\"3\"))\n   * assert.deepStrictEqual(clamp(BigDecimal.unsafeFromString(\"0\")), BigDecimal.unsafeFromString(\"1\"))\n   * assert.deepStrictEqual(clamp(BigDecimal.unsafeFromString(\"6\")), BigDecimal.unsafeFromString(\"5\"))\n   *\n   * @since 2.0.0\n   * @category math\n   */\n  (\n    options: {\n      minimum: BigDecimal\n      maximum: BigDecimal\n    }\n  ): (self: BigDecimal) => BigDecimal\n  /**\n   * Restricts the given `BigDecimal` to be within the range specified by the `minimum` and `maximum` values.\n   *\n   * - If the `BigDecimal` is less than the `minimum` value, the function returns the `minimum` value.\n   * - If the `BigDecimal` is greater than the `maximum` value, the function returns the `maximum` value.\n   * - Otherwise, it returns the original `BigDecimal`.\n   *\n   * @param self - The `BigDecimal` to be clamped.\n   * @param minimum - The lower end of the range.\n   * @param maximum - The upper end of the range.\n   *\n   * @example\n   * import { BigDecimal } from \"effect\"\n   *\n   * const clamp = BigDecimal.clamp({\n   *   minimum: BigDecimal.unsafeFromString(\"1\"),\n   *   maximum: BigDecimal.unsafeFromString(\"5\") }\n   * )\n   *\n   * assert.deepStrictEqual(clamp(BigDecimal.unsafeFromString(\"3\")), BigDecimal.unsafeFromString(\"3\"))\n   * assert.deepStrictEqual(clamp(BigDecimal.unsafeFromString(\"0\")), BigDecimal.unsafeFromString(\"1\"))\n   * assert.deepStrictEqual(clamp(BigDecimal.unsafeFromString(\"6\")), BigDecimal.unsafeFromString(\"5\"))\n   *\n   * @since 2.0.0\n   * @category math\n   */\n  (\n    self: BigDecimal,\n    options: {\n      minimum: BigDecimal\n      maximum: BigDecimal\n    }\n  ): BigDecimal\n} = order.clamp(Order)\n\n/**\n * Returns the minimum between two `BigDecimal`s.\n *\n * @param self - The first `BigDecimal`.\n * @param that - The second `BigDecimal`.\n *\n * @example\n * import { min, unsafeFromString } from \"effect/BigDecimal\"\n *\n * assert.deepStrictEqual(min(unsafeFromString(\"2\"), unsafeFromString(\"3\")), unsafeFromString(\"2\"))\n *\n * @since 2.0.0\n * @category math\n */\nexport const min: {\n  /**\n   * Returns the minimum between two `BigDecimal`s.\n   *\n   * @param self - The first `BigDecimal`.\n   * @param that - The second `BigDecimal`.\n   *\n   * @example\n   * import { min, unsafeFromString } from \"effect/BigDecimal\"\n   *\n   * assert.deepStrictEqual(min(unsafeFromString(\"2\"), unsafeFromString(\"3\")), unsafeFromString(\"2\"))\n   *\n   * @since 2.0.0\n   * @category math\n   */\n  (that: BigDecimal): (self: BigDecimal) => BigDecimal\n  /**\n   * Returns the minimum between two `BigDecimal`s.\n   *\n   * @param self - The first `BigDecimal`.\n   * @param that - The second `BigDecimal`.\n   *\n   * @example\n   * import { min, unsafeFromString } from \"effect/BigDecimal\"\n   *\n   * assert.deepStrictEqual(min(unsafeFromString(\"2\"), unsafeFromString(\"3\")), unsafeFromString(\"2\"))\n   *\n   * @since 2.0.0\n   * @category math\n   */\n  (self: BigDecimal, that: BigDecimal): BigDecimal\n} = order.min(Order)\n\n/**\n * Returns the maximum between two `BigDecimal`s.\n *\n * @param self - The first `BigDecimal`.\n * @param that - The second `BigDecimal`.\n *\n * @example\n * import { max, unsafeFromString } from \"effect/BigDecimal\"\n *\n * assert.deepStrictEqual(max(unsafeFromString(\"2\"), unsafeFromString(\"3\")), unsafeFromString(\"3\"))\n *\n * @since 2.0.0\n * @category math\n */\nexport const max: {\n  /**\n   * Returns the maximum between two `BigDecimal`s.\n   *\n   * @param self - The first `BigDecimal`.\n   * @param that - The second `BigDecimal`.\n   *\n   * @example\n   * import { max, unsafeFromString } from \"effect/BigDecimal\"\n   *\n   * assert.deepStrictEqual(max(unsafeFromString(\"2\"), unsafeFromString(\"3\")), unsafeFromString(\"3\"))\n   *\n   * @since 2.0.0\n   * @category math\n   */\n  (that: BigDecimal): (self: BigDecimal) => BigDecimal\n  /**\n   * Returns the maximum between two `BigDecimal`s.\n   *\n   * @param self - The first `BigDecimal`.\n   * @param that - The second `BigDecimal`.\n   *\n   * @example\n   * import { max, unsafeFromString } from \"effect/BigDecimal\"\n   *\n   * assert.deepStrictEqual(max(unsafeFromString(\"2\"), unsafeFromString(\"3\")), unsafeFromString(\"3\"))\n   *\n   * @since 2.0.0\n   * @category math\n   */\n  (self: BigDecimal, that: BigDecimal): BigDecimal\n} = order.max(Order)\n\n/**\n * Determines the sign of a given `BigDecimal`.\n *\n * @param n - The `BigDecimal` to determine the sign of.\n *\n * @example\n * import { sign, unsafeFromString } from \"effect/BigDecimal\"\n *\n * assert.deepStrictEqual(sign(unsafeFromString(\"-5\")), -1)\n * assert.deepStrictEqual(sign(unsafeFromString(\"0\")), 0)\n * assert.deepStrictEqual(sign(unsafeFromString(\"5\")), 1)\n *\n * @since 2.0.0\n * @category math\n */\nexport const sign = (n: BigDecimal): Ordering => n.value === bigint0 ? 0 : n.value < bigint0 ? -1 : 1\n\n/**\n * Determines the absolute value of a given `BigDecimal`.\n *\n * @param n - The `BigDecimal` to determine the absolute value of.\n *\n * @example\n * import { abs, unsafeFromString } from \"effect/BigDecimal\"\n *\n * assert.deepStrictEqual(abs(unsafeFromString(\"-5\")), unsafeFromString(\"5\"))\n * assert.deepStrictEqual(abs(unsafeFromString(\"0\")), unsafeFromString(\"0\"))\n * assert.deepStrictEqual(abs(unsafeFromString(\"5\")), unsafeFromString(\"5\"))\n *\n * @since 2.0.0\n * @category math\n */\nexport const abs = (n: BigDecimal): BigDecimal => n.value < bigint0 ? make(-n.value, n.scale) : n\n\n/**\n * Provides a negate operation on `BigDecimal`s.\n *\n * @param n - The `BigDecimal` to negate.\n *\n * @example\n * import { negate, unsafeFromString } from \"effect/BigDecimal\"\n *\n * assert.deepStrictEqual(negate(unsafeFromString(\"3\")), unsafeFromString(\"-3\"))\n * assert.deepStrictEqual(negate(unsafeFromString(\"-6\")), unsafeFromString(\"6\"))\n *\n * @since 2.0.0\n * @category math\n */\nexport const negate = (n: BigDecimal): BigDecimal => make(-n.value, n.scale)\n\n/**\n * Returns the remainder left over when one operand is divided by a second operand.\n *\n * If the divisor is `0`, the result will be `None`.\n *\n * @param self - The dividend.\n * @param divisor - The divisor.\n *\n * @example\n * import { BigDecimal, Option } from \"effect\"\n *\n * assert.deepStrictEqual(BigDecimal.remainder(BigDecimal.unsafeFromString(\"2\"), BigDecimal.unsafeFromString(\"2\")), Option.some(BigDecimal.unsafeFromString(\"0\")))\n * assert.deepStrictEqual(BigDecimal.remainder(BigDecimal.unsafeFromString(\"3\"), BigDecimal.unsafeFromString(\"2\")), Option.some(BigDecimal.unsafeFromString(\"1\")))\n * assert.deepStrictEqual(BigDecimal.remainder(BigDecimal.unsafeFromString(\"-4\"), BigDecimal.unsafeFromString(\"2\")), Option.some(BigDecimal.unsafeFromString(\"0\")))\n *\n * @since 2.0.0\n * @category math\n */\nexport const remainder: {\n  /**\n   * Returns the remainder left over when one operand is divided by a second operand.\n   *\n   * If the divisor is `0`, the result will be `None`.\n   *\n   * @param self - The dividend.\n   * @param divisor - The divisor.\n   *\n   * @example\n   * import { BigDecimal, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(BigDecimal.remainder(BigDecimal.unsafeFromString(\"2\"), BigDecimal.unsafeFromString(\"2\")), Option.some(BigDecimal.unsafeFromString(\"0\")))\n   * assert.deepStrictEqual(BigDecimal.remainder(BigDecimal.unsafeFromString(\"3\"), BigDecimal.unsafeFromString(\"2\")), Option.some(BigDecimal.unsafeFromString(\"1\")))\n   * assert.deepStrictEqual(BigDecimal.remainder(BigDecimal.unsafeFromString(\"-4\"), BigDecimal.unsafeFromString(\"2\")), Option.some(BigDecimal.unsafeFromString(\"0\")))\n   *\n   * @since 2.0.0\n   * @category math\n   */\n  (divisor: BigDecimal): (self: BigDecimal) => Option.Option<BigDecimal>\n  /**\n   * Returns the remainder left over when one operand is divided by a second operand.\n   *\n   * If the divisor is `0`, the result will be `None`.\n   *\n   * @param self - The dividend.\n   * @param divisor - The divisor.\n   *\n   * @example\n   * import { BigDecimal, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(BigDecimal.remainder(BigDecimal.unsafeFromString(\"2\"), BigDecimal.unsafeFromString(\"2\")), Option.some(BigDecimal.unsafeFromString(\"0\")))\n   * assert.deepStrictEqual(BigDecimal.remainder(BigDecimal.unsafeFromString(\"3\"), BigDecimal.unsafeFromString(\"2\")), Option.some(BigDecimal.unsafeFromString(\"1\")))\n   * assert.deepStrictEqual(BigDecimal.remainder(BigDecimal.unsafeFromString(\"-4\"), BigDecimal.unsafeFromString(\"2\")), Option.some(BigDecimal.unsafeFromString(\"0\")))\n   *\n   * @since 2.0.0\n   * @category math\n   */\n  (self: BigDecimal, divisor: BigDecimal): Option.Option<BigDecimal>\n} = dual(2, (self: BigDecimal, divisor: BigDecimal): Option.Option<BigDecimal> => {\n  if (divisor.value === bigint0) {\n    return Option.none()\n  }\n\n  const max = Math.max(self.scale, divisor.scale)\n  return Option.some(make(scale(self, max).value % scale(divisor, max).value, max))\n})\n\n/**\n * Returns the remainder left over when one operand is divided by a second operand.\n *\n * Throws a `RangeError` if the divisor is `0`.\n *\n * @param self - The dividend.\n * @param divisor - The divisor.\n *\n * @example\n * import { unsafeRemainder, unsafeFromString } from \"effect/BigDecimal\"\n *\n * assert.deepStrictEqual(unsafeRemainder(unsafeFromString(\"2\"), unsafeFromString(\"2\")), unsafeFromString(\"0\"))\n * assert.deepStrictEqual(unsafeRemainder(unsafeFromString(\"3\"), unsafeFromString(\"2\")), unsafeFromString(\"1\"))\n * assert.deepStrictEqual(unsafeRemainder(unsafeFromString(\"-4\"), unsafeFromString(\"2\")), unsafeFromString(\"0\"))\n *\n * @since 2.0.0\n * @category math\n */\nexport const unsafeRemainder: {\n  /**\n   * Returns the remainder left over when one operand is divided by a second operand.\n   *\n   * Throws a `RangeError` if the divisor is `0`.\n   *\n   * @param self - The dividend.\n   * @param divisor - The divisor.\n   *\n   * @example\n   * import { unsafeRemainder, unsafeFromString } from \"effect/BigDecimal\"\n   *\n   * assert.deepStrictEqual(unsafeRemainder(unsafeFromString(\"2\"), unsafeFromString(\"2\")), unsafeFromString(\"0\"))\n   * assert.deepStrictEqual(unsafeRemainder(unsafeFromString(\"3\"), unsafeFromString(\"2\")), unsafeFromString(\"1\"))\n   * assert.deepStrictEqual(unsafeRemainder(unsafeFromString(\"-4\"), unsafeFromString(\"2\")), unsafeFromString(\"0\"))\n   *\n   * @since 2.0.0\n   * @category math\n   */\n  (divisor: BigDecimal): (self: BigDecimal) => BigDecimal\n  /**\n   * Returns the remainder left over when one operand is divided by a second operand.\n   *\n   * Throws a `RangeError` if the divisor is `0`.\n   *\n   * @param self - The dividend.\n   * @param divisor - The divisor.\n   *\n   * @example\n   * import { unsafeRemainder, unsafeFromString } from \"effect/BigDecimal\"\n   *\n   * assert.deepStrictEqual(unsafeRemainder(unsafeFromString(\"2\"), unsafeFromString(\"2\")), unsafeFromString(\"0\"))\n   * assert.deepStrictEqual(unsafeRemainder(unsafeFromString(\"3\"), unsafeFromString(\"2\")), unsafeFromString(\"1\"))\n   * assert.deepStrictEqual(unsafeRemainder(unsafeFromString(\"-4\"), unsafeFromString(\"2\")), unsafeFromString(\"0\"))\n   *\n   * @since 2.0.0\n   * @category math\n   */\n  (self: BigDecimal, divisor: BigDecimal): BigDecimal\n} = dual(2, (self: BigDecimal, divisor: BigDecimal): BigDecimal => {\n  if (divisor.value === bigint0) {\n    throw new RangeError(\"Division by zero\")\n  }\n\n  const max = Math.max(self.scale, divisor.scale)\n  return make(scale(self, max).value % scale(divisor, max).value, max)\n})\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Equivalence: equivalence.Equivalence<BigDecimal> = equivalence.make((self, that) => {\n  if (self.scale > that.scale) {\n    return scale(that, self.scale).value === self.value\n  }\n\n  if (self.scale < that.scale) {\n    return scale(self, that.scale).value === that.value\n  }\n\n  return self.value === that.value\n})\n\n/**\n * Checks if two `BigDecimal`s are equal.\n *\n * @since 2.0.0\n * @category predicates\n */\nexport const equals: {\n  /**\n   * Checks if two `BigDecimal`s are equal.\n   *\n   * @since 2.0.0\n   * @category predicates\n   */\n  (that: BigDecimal): (self: BigDecimal) => boolean\n  /**\n   * Checks if two `BigDecimal`s are equal.\n   *\n   * @since 2.0.0\n   * @category predicates\n   */\n  (self: BigDecimal, that: BigDecimal): boolean\n} = dual(2, (self: BigDecimal, that: BigDecimal): boolean => Equivalence(self, that))\n\n/**\n * Creates a `BigDecimal` from a `bigint` value.\n *\n * @param value - The `bigint` value to create a `BigDecimal` from.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromBigInt = (n: bigint): BigDecimal => make(n, 0)\n\n/**\n * Creates a `BigDecimal` from a `number` value.\n *\n * It is not recommended to convert a floating point number to a decimal directly,\n * as the floating point representation may be unexpected.\n *\n * @param value - The `number` value to create a `BigDecimal` from.\n *\n * @example\n * import { fromNumber, make } from \"effect/BigDecimal\"\n *\n * assert.deepStrictEqual(fromNumber(123), make(123n, 0))\n * assert.deepStrictEqual(fromNumber(123.456), make(123456n, 3))\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromNumber = (n: number): BigDecimal => {\n  const [lead, trail = \"\"] = `${n}`.split(\".\")\n  return make(BigInt(`${lead}${trail}`), trail.length)\n}\n\n/**\n * Parses a numerical `string` into a `BigDecimal`.\n *\n * @param s - The `string` to parse.\n *\n * @example\n * import { BigDecimal, Option } from \"effect\"\n *\n * assert.deepStrictEqual(BigDecimal.fromString(\"123\"), Option.some(BigDecimal.make(123n, 0)))\n * assert.deepStrictEqual(BigDecimal.fromString(\"123.456\"), Option.some(BigDecimal.make(123456n, 3)))\n * assert.deepStrictEqual(BigDecimal.fromString(\"123.abc\"), Option.none())\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromString = (s: string): Option.Option<BigDecimal> => {\n  let digits: string\n  let scale: number\n\n  const dot = s.search(/\\./)\n  if (dot !== -1) {\n    const lead = s.slice(0, dot)\n    const trail = s.slice(dot + 1)\n    digits = `${lead}${trail}`\n    scale = trail.length\n  } else {\n    digits = s\n    scale = 0\n  }\n\n  if (digits === \"\") {\n    // TODO: This mimics the BigInt constructor behavior. Should this be `Option.none()`?\n    return Option.some(zero)\n  }\n\n  if (!/^(?:\\+|-)?\\d+$/.test(digits)) {\n    return Option.none()\n  }\n\n  return Option.some(make(BigInt(digits), scale))\n}\n\n/**\n * Parses a numerical `string` into a `BigDecimal`.\n *\n * @param s - The `string` to parse.\n *\n * @example\n * import { unsafeFromString, make } from \"effect/BigDecimal\"\n *\n * assert.deepStrictEqual(unsafeFromString(\"123\"), make(123n, 0))\n * assert.deepStrictEqual(unsafeFromString(\"123.456\"), make(123456n, 3))\n * assert.throws(() => unsafeFromString(\"123.abc\"))\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const unsafeFromString = (s: string): BigDecimal =>\n  Option.getOrThrowWith(fromString(s), () => new Error(\"Invalid numerical string\"))\n\n/**\n * Formats a given `BigDecimal` as a `string`.\n *\n * @param normalized - The `BigDecimal` to format.\n *\n * @example\n * import { format, unsafeFromString } from \"effect/BigDecimal\"\n *\n * assert.deepStrictEqual(format(unsafeFromString(\"-5\")), \"-5\")\n * assert.deepStrictEqual(format(unsafeFromString(\"123.456\")), \"123.456\")\n * assert.deepStrictEqual(format(unsafeFromString(\"-0.00000123\")), \"-0.00000123\")\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const format = (n: BigDecimal): string => {\n  const negative = n.value < bigint0\n  const absolute = negative ? `${n.value}`.substring(1) : `${n.value}`\n\n  let before: string\n  let after: string\n\n  if (n.scale >= absolute.length) {\n    before = \"0\"\n    after = \"0\".repeat(n.scale - absolute.length) + absolute\n  } else {\n    const location = absolute.length - n.scale\n    if (location > absolute.length) {\n      const zeros = location - absolute.length\n      before = `${absolute}${\"0\".repeat(zeros)}`\n      after = \"\"\n    } else {\n      after = absolute.slice(location)\n      before = absolute.slice(0, location)\n    }\n  }\n\n  const complete = after === \"\" ? before : `${before}.${after}`\n  return negative ? `-${complete}` : complete\n}\n\n/**\n * Converts a `BigDecimal` to a `number`.\n *\n * This function will produce incorrect results if the `BigDecimal` exceeds the 64-bit range of a `number`.\n *\n * @param n - The `BigDecimal` to convert.\n *\n * @example\n * import { unsafeToNumber, unsafeFromString } from \"effect/BigDecimal\"\n *\n * assert.deepStrictEqual(unsafeToNumber(unsafeFromString(\"123.456\")), 123.456)\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const unsafeToNumber = (n: BigDecimal): number => Number(format(n))\n\n/**\n * Checks if a given `BigDecimal` is an integer.\n *\n * @param n - The `BigDecimal` to check.\n *\n * @example\n * import { isInteger, unsafeFromString } from \"effect/BigDecimal\"\n *\n * assert.deepStrictEqual(isInteger(unsafeFromString(\"0\")), true)\n * assert.deepStrictEqual(isInteger(unsafeFromString(\"1\")), true)\n * assert.deepStrictEqual(isInteger(unsafeFromString(\"1.1\")), false)\n *\n * @since 2.0.0\n * @category predicates\n */\nexport const isInteger = (n: BigDecimal): boolean => normalize(n).scale <= 0\n\n/**\n * Checks if a given `BigDecimal` is `0`.\n *\n * @param n - The `BigDecimal` to check.\n *\n * @example\n * import { isZero, unsafeFromString } from \"effect/BigDecimal\"\n *\n * assert.deepStrictEqual(isZero(unsafeFromString(\"0\")), true)\n * assert.deepStrictEqual(isZero(unsafeFromString(\"1\")), false)\n *\n * @since 2.0.0\n * @category predicates\n */\nexport const isZero = (n: BigDecimal): boolean => n.value === bigint0\n\n/**\n * Checks if a given `BigDecimal` is negative.\n *\n * @param n - The `BigDecimal` to check.\n *\n * @example\n * import { isNegative, unsafeFromString } from \"effect/BigDecimal\"\n *\n * assert.deepStrictEqual(isNegative(unsafeFromString(\"-1\")), true)\n * assert.deepStrictEqual(isNegative(unsafeFromString(\"0\")), false)\n * assert.deepStrictEqual(isNegative(unsafeFromString(\"1\")), false)\n *\n * @since 2.0.0\n * @category predicates\n */\nexport const isNegative = (n: BigDecimal): boolean => n.value < bigint0\n\n/**\n * Checks if a given `BigDecimal` is positive.\n *\n * @param n - The `BigDecimal` to check.\n *\n * @example\n * import { isPositive, unsafeFromString } from \"effect/BigDecimal\"\n *\n * assert.deepStrictEqual(isPositive(unsafeFromString(\"-1\")), false)\n * assert.deepStrictEqual(isPositive(unsafeFromString(\"0\")), false)\n * assert.deepStrictEqual(isPositive(unsafeFromString(\"1\")), true)\n *\n * @since 2.0.0\n * @category predicates\n */\nexport const isPositive = (n: BigDecimal): boolean => n.value > bigint0\n"],"names":["Equal","equivalence","dual","pipe","Hash","NodeInspectSymbol","Option","order","pipeArguments","hasProperty","DEFAULT_PRECISION","TypeId","Symbol","for","BigDecimalProto","symbol","normalized","normalize","hash","value","combine","number","scale","cached","that","isBigDecimal","equals","toString","format","toJSON","_id","String","arguments","u","make","o","Object","create","unsafeMakeNormalized","bigint0","bigint10","RangeError","BigInt","bigint1","zero","self","undefined","digits","trail","i","length","substring","sum","multiply","subtract","divideWithPrecision","num","den","precision","numNegative","denNegative","negateResult","quotient","remainder","count","q","r","roundTerminal","n","pos","Number","divide","none","some","unsafeDivide","Order","scmp","sign","bigint","lessThan","lessThanOrEqualTo","greaterThan","greaterThanOrEqualTo","between","clamp","min","max","abs","negate","divisor","Math","unsafeRemainder","Equivalence","fromBigInt","fromNumber","lead","split","fromString","s","dot","search","slice","test","unsafeFromString","getOrThrowWith","Error","negative","absolute","before","after","repeat","location","zeros","complete","unsafeToNumber","isInteger","isZero","isNegative","isPositive"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,KAAKI,IAAI,MAAM,WAAW;AADjC,SAASF,IAAI,EAAEC,IAAI,QAAQ,eAAe;AAF1C,OAAO,KAAKH,KAAK,MAAM,YAAY;AAInC,SAA2BK,iBAAiB,QAAQ,kBAAkB;AAItE,SAAwBG,aAAa,QAAQ,eAAe;AAC5D,SAASC,WAAW,QAAQ,gBAAgB;AAJ5C,OAAO,KAAKH,MAAM,MAAM,aAAa;AACrC,OAAO,KAAKC,KAAK,MAAM,YAAY;AALnC,OAAO,KAAKN,WAAW,MAAM,kBAAkB;;;;;;;;;;AAU/C,MAAMS,iBAAiB,GAAG,GAAG;AAMtB,MAAMC,MAAM,GAAA,WAAA,GAAkBC,MAAM,CAACC,GAAG,CAAC,mBAAmB,CAAC;AAoBpE,MAAMC,eAAe,GAAuD;IAC1E,CAACH,MAAM,CAAA,EAAGA,MAAM;IAChB,CAACP,IAAI,gMAACW,MAAM,CAAA,GAAC;QACX,MAAMC,UAAU,GAAGC,SAAS,CAAC,IAAI,CAAC;QAClC,mNAAOd,OAAAA,AAAI,EACTC,IAAI,gMAACc,IAAI,CAACF,UAAU,CAACG,KAAK,CAAC,EAC3Bf,IAAI,gMAACgB,OAAO,CAAChB,IAAI,gMAACiB,MAAM,CAACL,UAAU,CAACM,KAAK,CAAC,CAAC,EAC3ClB,IAAI,gMAACmB,MAAM,CAAC,IAAI,CAAC,CAClB;IACH,CAAC;IACD,CAACvB,KAAK,gMAACe,MAAM,CAAA,EAAoBS,IAAa;QAC5C,OAAOC,YAAY,CAACD,IAAI,CAAC,IAAIE,MAAM,CAAC,IAAI,EAAEF,IAAI,CAAC;IACjD,CAAC;IACDG,QAAQA,CAAA;QACN,OAAO,CAAA,WAAA,EAAcC,MAAM,CAAC,IAAI,CAAC,CAAA,CAAA,CAAG;IACtC,CAAC;IACDC,MAAMA,CAAA;QACJ,OAAO;YACLC,GAAG,EAAE,YAAY;YACjBX,KAAK,EAAEY,MAAM,CAAC,IAAI,CAACZ,KAAK,CAAC;YACzBG,KAAK,EAAE,IAAI,CAACA,KAAAA;SACb;IACH,CAAC;IACD,2MAACjB,qBAAiB,CAAA,GAAC;QACjB,OAAO,IAAI,CAACwB,MAAM,EAAE;IACtB,CAAC;IACD1B,IAAIA,CAAA;QACF,mNAAOK,gBAAa,AAAbA,EAAc,IAAI,EAAEwB,SAAS,CAAC;IACvC;CACQ;AAUH,MAAMP,YAAY,IAAIQ,CAAU,gNAAsBxB,cAAAA,AAAW,EAACwB,CAAC,EAAEtB,MAAM,CAAC;AAW5E,MAAMuB,IAAI,GAAGA,CAACf,KAAa,EAAEG,KAAa,KAAgB;IAC/D,MAAMa,CAAC,GAAGC,MAAM,CAACC,MAAM,CAACvB,eAAe,CAAC;IACxCqB,CAAC,CAAChB,KAAK,GAAGA,KAAK;IACfgB,CAAC,CAACb,KAAK,GAAGA,KAAK;IACf,OAAOa,CAAC;AACV,CAAC;AAOM,MAAMG,oBAAoB,GAAGA,CAACnB,KAAa,EAAEG,KAAa,KAAgB;IAC/E,IAAIH,KAAK,KAAKoB,OAAO,IAAIpB,KAAK,GAAGqB,QAAQ,KAAKD,OAAO,EAAE;QACrD,MAAM,IAAIE,UAAU,CAAC,0BAA0B,CAAC;IAClD;IAEA,MAAMN,CAAC,GAAGD,IAAI,CAACf,KAAK,EAAEG,KAAK,CAAC;IAC5Ba,CAAC,CAACnB,UAAU,GAAGmB,CAAC;IAChB,OAAOA,CAAC;AACV,CAAC;AAED,MAAMI,OAAO,GAAA,WAAA,GAAGG,MAAM,CAAC,CAAC,CAAC;AACzB,MAAMC,OAAO,GAAA,WAAA,GAAGD,MAAM,CAAC,CAAC,CAAC;AACzB,MAAMF,QAAQ,GAAA,WAAA,GAAGE,MAAM,CAAC,EAAE,CAAC;AAC3B,MAAME,IAAI,GAAA,WAAA,GAAGN,oBAAoB,CAACC,OAAO,EAAE,CAAC,CAAC;AAgBtC,MAAMtB,SAAS,IAAI4B,IAAgB,IAAgB;IACxD,IAAIA,IAAI,CAAC7B,UAAU,KAAK8B,SAAS,EAAE;QACjC,IAAID,IAAI,CAAC1B,KAAK,KAAKoB,OAAO,EAAE;YAC1BM,IAAI,CAAC7B,UAAU,GAAG4B,IAAI;QACxB,CAAC,MAAM;YACL,MAAMG,MAAM,GAAG,GAAGF,IAAI,CAAC1B,KAAK,EAAE;YAE9B,IAAI6B,KAAK,GAAG,CAAC;YACb,IAAK,IAAIC,CAAC,GAAGF,MAAM,CAACG,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,CAAE;gBAC3C,IAAIF,MAAM,CAACE,CAAC,CAAC,KAAK,GAAG,EAAE;oBACrBD,KAAK,EAAE;gBACT,CAAC,MAAM;oBACL;gBACF;YACF;YAEA,IAAIA,KAAK,KAAK,CAAC,EAAE;gBACfH,IAAI,CAAC7B,UAAU,GAAG6B,IAAI;YACxB;YAEA,MAAM1B,KAAK,GAAGuB,MAAM,CAACK,MAAM,CAACI,SAAS,CAAC,CAAC,EAAEJ,MAAM,CAACG,MAAM,GAAGF,KAAK,CAAC,CAAC;YAChE,MAAM1B,KAAK,GAAGuB,IAAI,CAACvB,KAAK,GAAG0B,KAAK;YAChCH,IAAI,CAAC7B,UAAU,GAAGsB,oBAAoB,CAACnB,KAAK,EAAEG,KAAK,CAAC;QACtD;IACF;IAEA,OAAOuB,IAAI,CAAC7B,UAAU;AACxB,CAAC;AAcM,MAAMM,KAAK,GAAA,WAAA,+MA2BdpB,OAAAA,AAAI,EAAC,CAAC,EAAE,CAAC2C,IAAgB,EAAEvB,KAAa,KAAgB;IAC1D,IAAIA,KAAK,GAAGuB,IAAI,CAACvB,KAAK,EAAE;QACtB,OAAOY,IAAI,CAACW,IAAI,CAAC1B,KAAK,GAAGqB,QAAQ,IAAIE,MAAM,CAACpB,KAAK,GAAGuB,IAAI,CAACvB,KAAK,CAAC,EAAEA,KAAK,CAAC;IACzE;IAEA,IAAIA,KAAK,GAAGuB,IAAI,CAACvB,KAAK,EAAE;QACtB,OAAOY,IAAI,CAACW,IAAI,CAAC1B,KAAK,GAAGqB,QAAQ,IAAIE,MAAM,CAACG,IAAI,CAACvB,KAAK,GAAGA,KAAK,CAAC,EAAEA,KAAK,CAAC;IACzE;IAEA,OAAOuB,IAAI;AACb,CAAC,CAAC;AAgBK,MAAMO,GAAG,GAAA,WAAA,+MA+BZlD,OAAI,AAAJA,EAAK,CAAC,EAAE,CAAC2C,IAAgB,EAAErB,IAAgB,KAAgB;IAC7D,IAAIA,IAAI,CAACL,KAAK,KAAKoB,OAAO,EAAE;QAC1B,OAAOM,IAAI;IACb;IAEA,IAAIA,IAAI,CAAC1B,KAAK,KAAKoB,OAAO,EAAE;QAC1B,OAAOf,IAAI;IACb;IAEA,IAAIqB,IAAI,CAACvB,KAAK,GAAGE,IAAI,CAACF,KAAK,EAAE;QAC3B,OAAOY,IAAI,CAACZ,KAAK,CAACE,IAAI,EAAEqB,IAAI,CAACvB,KAAK,CAAC,CAACH,KAAK,GAAG0B,IAAI,CAAC1B,KAAK,EAAE0B,IAAI,CAACvB,KAAK,CAAC;IACrE;IAEA,IAAIuB,IAAI,CAACvB,KAAK,GAAGE,IAAI,CAACF,KAAK,EAAE;QAC3B,OAAOY,IAAI,CAACZ,KAAK,CAACuB,IAAI,EAAErB,IAAI,CAACF,KAAK,CAAC,CAACH,KAAK,GAAGK,IAAI,CAACL,KAAK,EAAEK,IAAI,CAACF,KAAK,CAAC;IACrE;IAEA,OAAOY,IAAI,CAACW,IAAI,CAAC1B,KAAK,GAAGK,IAAI,CAACL,KAAK,EAAE0B,IAAI,CAACvB,KAAK,CAAC;AAClD,CAAC,CAAC;AAgBK,MAAM+B,QAAQ,GAAA,WAAA,OA+BjBnD,+MAAAA,AAAI,EAAC,CAAC,EAAE,CAAC2C,IAAgB,EAAErB,IAAgB,KAAgB;IAC7D,IAAIA,IAAI,CAACL,KAAK,KAAKoB,OAAO,IAAIM,IAAI,CAAC1B,KAAK,KAAKoB,OAAO,EAAE;QACpD,OAAOK,IAAI;IACb;IAEA,OAAOV,IAAI,CAACW,IAAI,CAAC1B,KAAK,GAAGK,IAAI,CAACL,KAAK,EAAE0B,IAAI,CAACvB,KAAK,GAAGE,IAAI,CAACF,KAAK,CAAC;AAC/D,CAAC,CAAC;AAgBK,MAAMgC,QAAQ,GAAA,WAAA,+MA+BjBpD,OAAAA,AAAI,EAAC,CAAC,EAAE,CAAC2C,IAAgB,EAAErB,IAAgB,KAAgB;IAC7D,IAAIA,IAAI,CAACL,KAAK,KAAKoB,OAAO,EAAE;QAC1B,OAAOM,IAAI;IACb;IAEA,IAAIA,IAAI,CAAC1B,KAAK,KAAKoB,OAAO,EAAE;QAC1B,OAAOL,IAAI,CAAC,CAACV,IAAI,CAACL,KAAK,EAAEK,IAAI,CAACF,KAAK,CAAC;IACtC;IAEA,IAAIuB,IAAI,CAACvB,KAAK,GAAGE,IAAI,CAACF,KAAK,EAAE;QAC3B,OAAOY,IAAI,CAACW,IAAI,CAAC1B,KAAK,GAAGG,KAAK,CAACE,IAAI,EAAEqB,IAAI,CAACvB,KAAK,CAAC,CAACH,KAAK,EAAE0B,IAAI,CAACvB,KAAK,CAAC;IACrE;IAEA,IAAIuB,IAAI,CAACvB,KAAK,GAAGE,IAAI,CAACF,KAAK,EAAE;QAC3B,OAAOY,IAAI,CAACZ,KAAK,CAACuB,IAAI,EAAErB,IAAI,CAACF,KAAK,CAAC,CAACH,KAAK,GAAGK,IAAI,CAACL,KAAK,EAAEK,IAAI,CAACF,KAAK,CAAC;IACrE;IAEA,OAAOY,IAAI,CAACW,IAAI,CAAC1B,KAAK,GAAGK,IAAI,CAACL,KAAK,EAAE0B,IAAI,CAACvB,KAAK,CAAC;AAClD,CAAC,CAAC;AAEF;;IAGA,MAAMiC,mBAAmB,GAAGA,CAC1BC,GAAW,EACXC,GAAW,EACXnC,KAAa,EACboC,SAAiB,KACH;IACd,MAAMC,WAAW,GAAGH,GAAG,GAAGjB,OAAO;IACjC,MAAMqB,WAAW,GAAGH,GAAG,GAAGlB,OAAO;IACjC,MAAMsB,YAAY,GAAGF,WAAW,KAAKC,WAAW;IAEhDJ,GAAG,GAAGG,WAAW,GAAG,CAACH,GAAG,GAAGA,GAAG;IAC9BC,GAAG,GAAGG,WAAW,GAAG,CAACH,GAAG,GAAGA,GAAG;IAE9B,qFAAA;IACA,MAAOD,GAAG,GAAGC,GAAG,CAAE;QAChBD,GAAG,IAAIhB,QAAQ;QACflB,KAAK,EAAE;IACT;IAEA,kBAAA;IACA,IAAIwC,QAAQ,GAAGN,GAAG,GAAGC,GAAG;IACxB,IAAIM,SAAS,GAAGP,GAAG,GAAGC,GAAG;IAEzB,IAAIM,SAAS,KAAKxB,OAAO,EAAE;QACzB,oCAAA;QACA,OAAOL,IAAI,CAAC2B,YAAY,GAAG,CAACC,QAAQ,GAAGA,QAAQ,EAAExC,KAAK,CAAC;IACzD;IAEA,yFAAA;IACA,IAAI0C,KAAK,GAAG,GAAGF,QAAQ,EAAE,CAACZ,MAAM;IAEhC,qFAAA;IACAa,SAAS,IAAIvB,QAAQ;IACrB,MAAOuB,SAAS,KAAKxB,OAAO,IAAIyB,KAAK,GAAGN,SAAS,CAAE;QACjD,MAAMO,CAAC,GAAGF,SAAS,GAAGN,GAAG;QACzB,MAAMS,CAAC,GAAGH,SAAS,GAAGN,GAAG;QACzBK,QAAQ,GAAGA,QAAQ,GAAGtB,QAAQ,GAAGyB,CAAC;QAClCF,SAAS,GAAGG,CAAC,GAAG1B,QAAQ;QAExBwB,KAAK,EAAE;QACP1C,KAAK,EAAE;IACT;IAEA,IAAIyC,SAAS,KAAKxB,OAAO,EAAE;QACzB,qCAAA;QACAuB,QAAQ,IAAIK,aAAa,CAACJ,SAAS,GAAGN,GAAG,CAAC;IAC5C;IAEA,OAAOvB,IAAI,CAAC2B,YAAY,GAAG,CAACC,QAAQ,GAAGA,QAAQ,EAAExC,KAAK,CAAC;AACzD,CAAC;AAWM,MAAM6C,aAAa,IAAIC,CAAS,IAAY;IACjD,MAAMC,GAAG,GAAGD,CAAC,IAAI7B,OAAO,GAAG,CAAC,GAAG,CAAC;IAChC,OAAO+B,MAAM,CAAC,GAAGF,CAAC,EAAE,CAACC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG9B,OAAO,GAAGI,OAAO;AACpD,CAAC;AAuBM,MAAM4B,MAAM,GAAA,WAAA,+MA6CfrE,OAAI,AAAJA,EAAK,CAAC,EAAE,CAAC2C,IAAgB,EAAErB,IAAgB,KAA+B;IAC5E,IAAIA,IAAI,CAACL,KAAK,KAAKoB,OAAO,EAAE;QAC1B,OAAOjC,MAAM,gMAACkE,IAAI,EAAE;IACtB;IAEA,IAAI3B,IAAI,CAAC1B,KAAK,KAAKoB,OAAO,EAAE;QAC1B,OAAOjC,MAAM,gMAACmE,IAAI,CAAC7B,IAAI,CAAC;IAC1B;IAEA,MAAMtB,KAAK,GAAGuB,IAAI,CAACvB,KAAK,GAAGE,IAAI,CAACF,KAAK;IACrC,IAAIuB,IAAI,CAAC1B,KAAK,KAAKK,IAAI,CAACL,KAAK,EAAE;QAC7B,OAAOb,MAAM,gMAACmE,IAAI,CAACvC,IAAI,CAACS,OAAO,EAAErB,KAAK,CAAC,CAAC;IAC1C;IAEA,OAAOhB,MAAM,gMAACmE,IAAI,CAAClB,mBAAmB,CAACV,IAAI,CAAC1B,KAAK,EAAEK,IAAI,CAACL,KAAK,EAAEG,KAAK,EAAEZ,iBAAiB,CAAC,CAAC;AAC3F,CAAC,CAAC;AAsBK,MAAMgE,YAAY,GAAA,WAAA,IA2CrBxE,kNAAAA,AAAI,EAAC,CAAC,EAAE,CAAC2C,IAAgB,EAAErB,IAAgB,KAAgB;IAC7D,IAAIA,IAAI,CAACL,KAAK,KAAKoB,OAAO,EAAE;QAC1B,MAAM,IAAIE,UAAU,CAAC,kBAAkB,CAAC;IAC1C;IAEA,IAAII,IAAI,CAAC1B,KAAK,KAAKoB,OAAO,EAAE;QAC1B,OAAOK,IAAI;IACb;IAEA,MAAMtB,KAAK,GAAGuB,IAAI,CAACvB,KAAK,GAAGE,IAAI,CAACF,KAAK;IACrC,IAAIuB,IAAI,CAAC1B,KAAK,KAAKK,IAAI,CAACL,KAAK,EAAE;QAC7B,OAAOe,IAAI,CAACS,OAAO,EAAErB,KAAK,CAAC;IAC7B;IACA,OAAOiC,mBAAmB,CAACV,IAAI,CAAC1B,KAAK,EAAEK,IAAI,CAACL,KAAK,EAAEG,KAAK,EAAEZ,iBAAiB,CAAC;AAC9E,CAAC,CAAC;AAMK,MAAMiE,KAAK,GAAA,WAAA,GAA4BpE,KAAK,gMAAC2B,IAAI,CAAC,CAACW,IAAI,EAAErB,IAAI,KAAI;IACtE,MAAMoD,IAAI,GAAGrE,KAAK,gMAACc,MAAM,CAACwD,IAAI,CAAChC,IAAI,CAAC,EAAEgC,IAAI,CAACrD,IAAI,CAAC,CAAC;IACjD,IAAIoD,IAAI,KAAK,CAAC,EAAE;QACd,OAAOA,IAAI;IACb;IAEA,IAAI/B,IAAI,CAACvB,KAAK,GAAGE,IAAI,CAACF,KAAK,EAAE;QAC3B,OAAOf,KAAK,gMAACuE,MAAM,CAACjC,IAAI,CAAC1B,KAAK,EAAEG,KAAK,CAACE,IAAI,EAAEqB,IAAI,CAACvB,KAAK,CAAC,CAACH,KAAK,CAAC;IAChE;IAEA,IAAI0B,IAAI,CAACvB,KAAK,GAAGE,IAAI,CAACF,KAAK,EAAE;QAC3B,OAAOf,KAAK,gMAACuE,MAAM,CAACxD,KAAK,CAACuB,IAAI,EAAErB,IAAI,CAACF,KAAK,CAAC,CAACH,KAAK,EAAEK,IAAI,CAACL,KAAK,CAAC;IAChE;IAEA,OAAOZ,KAAK,gMAACuE,MAAM,CAACjC,IAAI,CAAC1B,KAAK,EAAEK,IAAI,CAACL,KAAK,CAAC;AAC7C,CAAC,CAAC;AAkBK,MAAM4D,QAAQ,GAAA,WAAA,GAmCjBxE,KAAK,gMAACwE,QAAQ,CAACJ,KAAK,CAAC;AAkBlB,MAAMK,iBAAiB,GAAA,WAAA,GAmC1BzE,KAAK,gMAACyE,iBAAiB,CAACL,KAAK,CAAC;AAkB3B,MAAMM,WAAW,GAAA,WAAA,GAmCpB1E,KAAK,gMAAC0E,WAAW,CAACN,KAAK,CAAC;AAkBrB,MAAMO,oBAAoB,GAAA,WAAA,GAmC7B3E,KAAK,gMAAC2E,oBAAoB,CAACP,KAAK,CAAC;AAwB9B,MAAMQ,OAAO,GAAA,WAAA,GA0DhB5E,KAAK,gMAAC4E,OAAO,CAACR,KAAK,CAAC;AA4BjB,MAAMS,KAAK,GAAA,WAAA,GAkEd7E,KAAK,gMAAC6E,KAAK,CAACT,KAAK,CAAC;AAgBf,MAAMU,GAAG,GAAA,WAAA,GA+BZ9E,KAAK,gMAAC8E,GAAG,CAACV,KAAK,CAAC;AAgBb,MAAMW,GAAG,GAAA,WAAA,GA+BZ/E,KAAK,gMAAC+E,GAAG,CAACX,KAAK,CAAC;AAiBb,MAAME,IAAI,IAAIT,CAAa,GAAeA,CAAC,CAACjD,KAAK,KAAKoB,OAAO,GAAG,CAAC,GAAG6B,CAAC,CAACjD,KAAK,GAAGoB,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC;AAiB9F,MAAMgD,GAAG,IAAInB,CAAa,GAAiBA,CAAC,CAACjD,KAAK,GAAGoB,OAAO,GAAGL,IAAI,CAAC,CAACkC,CAAC,CAACjD,KAAK,EAAEiD,CAAC,CAAC9C,KAAK,CAAC,GAAG8C,CAAC;AAgB1F,MAAMoB,MAAM,IAAIpB,CAAa,GAAiBlC,IAAI,CAAC,CAACkC,CAAC,CAACjD,KAAK,EAAEiD,CAAC,CAAC9C,KAAK,CAAC;AAoBrE,MAAMyC,SAAS,GAAA,WAAA,IAuClB7D,kNAAAA,AAAI,EAAC,CAAC,EAAE,CAAC2C,IAAgB,EAAE4C,OAAmB,KAA+B;IAC/E,IAAIA,OAAO,CAACtE,KAAK,KAAKoB,OAAO,EAAE;QAC7B,OAAOjC,MAAM,gMAACkE,IAAI,EAAE;IACtB;IAEA,MAAMc,GAAG,GAAGI,IAAI,CAACJ,GAAG,CAACzC,IAAI,CAACvB,KAAK,EAAEmE,OAAO,CAACnE,KAAK,CAAC;IAC/C,OAAOhB,MAAM,gMAACmE,IAAI,CAACvC,IAAI,CAACZ,KAAK,CAACuB,IAAI,EAAEyC,GAAG,CAAC,CAACnE,KAAK,GAAGG,KAAK,CAACmE,OAAO,EAAEH,GAAG,CAAC,CAACnE,KAAK,EAAEmE,GAAG,CAAC,CAAC;AACnF,CAAC,CAAC;AAoBK,MAAMK,eAAe,GAAA,WAAA,GAuCxBzF,mNAAAA,AAAI,EAAC,CAAC,EAAE,CAAC2C,IAAgB,EAAE4C,OAAmB,KAAgB;IAChE,IAAIA,OAAO,CAACtE,KAAK,KAAKoB,OAAO,EAAE;QAC7B,MAAM,IAAIE,UAAU,CAAC,kBAAkB,CAAC;IAC1C;IAEA,MAAM6C,GAAG,GAAGI,IAAI,CAACJ,GAAG,CAACzC,IAAI,CAACvB,KAAK,EAAEmE,OAAO,CAACnE,KAAK,CAAC;IAC/C,OAAOY,IAAI,CAACZ,KAAK,CAACuB,IAAI,EAAEyC,GAAG,CAAC,CAACnE,KAAK,GAAGG,KAAK,CAACmE,OAAO,EAAEH,GAAG,CAAC,CAACnE,KAAK,EAAEmE,GAAG,CAAC;AACtE,CAAC,CAAC;AAMK,MAAMM,WAAW,GAAA,WAAA,GAAwC3F,WAAW,gMAACiC,IAAI,CAAC,CAACW,IAAI,EAAErB,IAAI,KAAI;IAC9F,IAAIqB,IAAI,CAACvB,KAAK,GAAGE,IAAI,CAACF,KAAK,EAAE;QAC3B,OAAOA,KAAK,CAACE,IAAI,EAAEqB,IAAI,CAACvB,KAAK,CAAC,CAACH,KAAK,KAAK0B,IAAI,CAAC1B,KAAK;IACrD;IAEA,IAAI0B,IAAI,CAACvB,KAAK,GAAGE,IAAI,CAACF,KAAK,EAAE;QAC3B,OAAOA,KAAK,CAACuB,IAAI,EAAErB,IAAI,CAACF,KAAK,CAAC,CAACH,KAAK,KAAKK,IAAI,CAACL,KAAK;IACrD;IAEA,OAAO0B,IAAI,CAAC1B,KAAK,KAAKK,IAAI,CAACL,KAAK;AAClC,CAAC,CAAC;AAQK,MAAMO,MAAM,GAAA,WAAA,+MAefxB,OAAAA,AAAI,EAAC,CAAC,EAAE,CAAC2C,IAAgB,EAAErB,IAAgB,GAAcoE,WAAW,CAAC/C,IAAI,EAAErB,IAAI,CAAC,CAAC;AAU9E,MAAMqE,UAAU,IAAIzB,CAAS,GAAiBlC,IAAI,CAACkC,CAAC,EAAE,CAAC,CAAC;AAmBxD,MAAM0B,UAAU,IAAI1B,CAAS,IAAgB;IAClD,MAAM,CAAC2B,IAAI,EAAE/C,KAAK,GAAG,EAAE,CAAC,GAAG,GAAGoB,CAAC,EAAE,CAAC4B,KAAK,CAAC,GAAG,CAAC;IAC5C,OAAO9D,IAAI,CAACQ,MAAM,CAAC,GAAGqD,IAAI,GAAG/C,KAAK,EAAE,CAAC,EAAEA,KAAK,CAACE,MAAM,CAAC;AACtD,CAAC;AAiBM,MAAM+C,UAAU,IAAIC,CAAS,IAA+B;IACjE,IAAInD,MAAc;IAClB,IAAIzB,KAAa;IAEjB,MAAM6E,GAAG,GAAGD,CAAC,CAACE,MAAM,CAAC,IAAI,CAAC;IAC1B,IAAID,GAAG,KAAK,CAAC,CAAC,EAAE;QACd,MAAMJ,IAAI,GAAGG,CAAC,CAACG,KAAK,CAAC,CAAC,EAAEF,GAAG,CAAC;QAC5B,MAAMnD,KAAK,GAAGkD,CAAC,CAACG,KAAK,CAACF,GAAG,GAAG,CAAC,CAAC;QAC9BpD,MAAM,GAAG,GAAGgD,IAAI,GAAG/C,KAAK,EAAE;QAC1B1B,KAAK,GAAG0B,KAAK,CAACE,MAAM;IACtB,CAAC,MAAM;QACLH,MAAM,GAAGmD,CAAC;QACV5E,KAAK,GAAG,CAAC;IACX;IAEA,IAAIyB,MAAM,KAAK,EAAE,EAAE;QACjB,qFAAA;QACA,OAAOzC,MAAM,gMAACmE,IAAI,CAAC7B,IAAI,CAAC;IAC1B;IAEA,IAAI,CAAC,gBAAgB,CAAC0D,IAAI,CAACvD,MAAM,CAAC,EAAE;QAClC,OAAOzC,MAAM,gMAACkE,IAAI,EAAE;IACtB;IAEA,OAAOlE,MAAM,gMAACmE,IAAI,CAACvC,IAAI,CAACQ,MAAM,CAACK,MAAM,CAAC,EAAEzB,KAAK,CAAC,CAAC;AACjD,CAAC;AAiBM,MAAMiF,gBAAgB,IAAIL,CAAS,GACxC5F,MAAM,gMAACkG,cAAc,CAACP,UAAU,CAACC,CAAC,CAAC,EAAE,IAAM,IAAIO,KAAK,CAAC,0BAA0B,CAAC,CAAC;AAiB5E,MAAM7E,MAAM,IAAIwC,CAAa,IAAY;IAC9C,MAAMsC,QAAQ,GAAGtC,CAAC,CAACjD,KAAK,GAAGoB,OAAO;IAClC,MAAMoE,QAAQ,GAAGD,QAAQ,GAAG,GAAGtC,CAAC,CAACjD,KAAK,EAAE,CAACgC,SAAS,CAAC,CAAC,CAAC,GAAG,GAAGiB,CAAC,CAACjD,KAAK,EAAE;IAEpE,IAAIyF,MAAc;IAClB,IAAIC,KAAa;IAEjB,IAAIzC,CAAC,CAAC9C,KAAK,IAAIqF,QAAQ,CAACzD,MAAM,EAAE;QAC9B0D,MAAM,GAAG,GAAG;QACZC,KAAK,GAAG,GAAG,CAACC,MAAM,CAAC1C,CAAC,CAAC9C,KAAK,GAAGqF,QAAQ,CAACzD,MAAM,CAAC,GAAGyD,QAAQ;IAC1D,CAAC,MAAM;QACL,MAAMI,QAAQ,GAAGJ,QAAQ,CAACzD,MAAM,GAAGkB,CAAC,CAAC9C,KAAK;QAC1C,IAAIyF,QAAQ,GAAGJ,QAAQ,CAACzD,MAAM,EAAE;YAC9B,MAAM8D,KAAK,GAAGD,QAAQ,GAAGJ,QAAQ,CAACzD,MAAM;YACxC0D,MAAM,GAAG,GAAGD,QAAQ,GAAG,GAAG,CAACG,MAAM,CAACE,KAAK,CAAC,EAAE;YAC1CH,KAAK,GAAG,EAAE;QACZ,CAAC,MAAM;YACLA,KAAK,GAAGF,QAAQ,CAACN,KAAK,CAACU,QAAQ,CAAC;YAChCH,MAAM,GAAGD,QAAQ,CAACN,KAAK,CAAC,CAAC,EAAEU,QAAQ,CAAC;QACtC;IACF;IAEA,MAAME,QAAQ,GAAGJ,KAAK,KAAK,EAAE,GAAGD,MAAM,GAAG,GAAGA,MAAM,CAAA,CAAA,EAAIC,KAAK,EAAE;IAC7D,OAAOH,QAAQ,GAAG,CAAA,CAAA,EAAIO,QAAQ,EAAE,GAAGA,QAAQ;AAC7C,CAAC;AAiBM,MAAMC,cAAc,IAAI9C,CAAa,GAAaE,MAAM,CAAC1C,MAAM,CAACwC,CAAC,CAAC,CAAC;AAiBnE,MAAM+C,SAAS,IAAI/C,CAAa,GAAcnD,SAAS,CAACmD,CAAC,CAAC,CAAC9C,KAAK,IAAI,CAAC;AAgBrE,MAAM8F,MAAM,IAAIhD,CAAa,GAAcA,CAAC,CAACjD,KAAK,KAAKoB,OAAO;AAiB9D,MAAM8E,UAAU,IAAIjD,CAAa,GAAcA,CAAC,CAACjD,KAAK,GAAGoB,OAAO;AAiBhE,MAAM+E,UAAU,IAAIlD,CAAa,GAAcA,CAAC,CAACjD,KAAK,GAAGoB,OAAO","ignoreList":[0]}},
    {"offset": {"line": 15656, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 15662, "column": 0}, "map": {"version":3,"file":"FastCheck.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/FastCheck.ts"],"sourcesContent":["/**\n * @since 3.10.0\n */\n\n/**\n * @category re-exports\n * @since 3.10.0\n */\nexport * from \"fast-check\"\n"],"names":[],"mappings":"AAAA;;IAIA","ignoreList":[0]}},
    {"offset": {"line": 15670, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16729, "column": 0}, "map": {"version":3,"file":"ConfigProvider.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/ConfigProvider.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Config from \"./Config.js\"\nimport type * as ConfigError from \"./ConfigError.js\"\nimport type * as PathPatch from \"./ConfigProviderPathPatch.js\"\nimport type * as Context from \"./Context.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport * as internal from \"./internal/configProvider.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const ConfigProviderTypeId: unique symbol = internal.ConfigProviderTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type ConfigProviderTypeId = typeof ConfigProviderTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const FlatConfigProviderTypeId: unique symbol = internal.FlatConfigProviderTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type FlatConfigProviderTypeId = typeof FlatConfigProviderTypeId\n\n/**\n * A ConfigProvider is a service that provides configuration given a description\n * of the structure of that configuration.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface ConfigProvider extends ConfigProvider.Proto, Pipeable {\n  /**\n   * Loads the specified configuration, or fails with a config error.\n   */\n  load<A>(config: Config.Config<A>): Effect.Effect<A, ConfigError.ConfigError>\n  /**\n   * Flattens this config provider into a simplified config provider that knows\n   * only how to deal with flat (key/value) properties.\n   */\n  readonly flattened: ConfigProvider.Flat\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace ConfigProvider {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Proto {\n    readonly [ConfigProviderTypeId]: ConfigProviderTypeId\n  }\n\n  /**\n   * A simplified config provider that knows only how to deal with flat\n   * (key/value) properties. Because these providers are common, there is\n   * special support for implementing them.\n   *\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Flat {\n    readonly [FlatConfigProviderTypeId]: FlatConfigProviderTypeId\n    readonly patch: PathPatch.PathPatch\n    load<A>(\n      path: ReadonlyArray<string>,\n      config: Config.Config.Primitive<A>,\n      split?: boolean\n    ): Effect.Effect<Array<A>, ConfigError.ConfigError>\n    enumerateChildren(\n      path: ReadonlyArray<string>\n    ): Effect.Effect<HashSet.HashSet<string>, ConfigError.ConfigError>\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface FromMapConfig {\n    readonly pathDelim: string\n    readonly seqDelim: string\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface FromEnvConfig {\n    readonly pathDelim: string\n    readonly seqDelim: string\n  }\n\n  /**\n   * @since 1.0.0\n   * @category models\n   */\n  export type KeyComponent = KeyName | KeyIndex\n\n  /**\n   * @since 1.0.0\n   * @category models\n   */\n  export interface KeyName {\n    readonly _tag: \"KeyName\"\n    readonly name: string\n  }\n\n  /**\n   * @since 1.0.0\n   * @category models\n   */\n  export interface KeyIndex {\n    readonly _tag: \"KeyIndex\"\n    readonly index: number\n  }\n}\n\n/**\n * The service tag for `ConfigProvider`.\n *\n * @since 2.0.0\n * @category context\n */\nexport const ConfigProvider: Context.Tag<ConfigProvider, ConfigProvider> = internal.configProviderTag\n\n/**\n * Creates a new config provider.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (\n  options: {\n    readonly load: <A>(config: Config.Config<A>) => Effect.Effect<A, ConfigError.ConfigError>\n    readonly flattened: ConfigProvider.Flat\n  }\n) => ConfigProvider = internal.make\n\n/**\n * Creates a new flat config provider.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const makeFlat: (options: {\n  readonly load: <A>(\n    path: ReadonlyArray<string>,\n    config: Config.Config.Primitive<A>,\n    split: boolean\n  ) => Effect.Effect<Array<A>, ConfigError.ConfigError>\n  readonly enumerateChildren: (\n    path: ReadonlyArray<string>\n  ) => Effect.Effect<HashSet.HashSet<string>, ConfigError.ConfigError>\n  readonly patch: PathPatch.PathPatch\n}) => ConfigProvider.Flat = internal.makeFlat\n\n/**\n * A config provider that loads configuration from context variables,\n * using the default System service.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromEnv: (config?: ConfigProvider.FromEnvConfig) => ConfigProvider = internal.fromEnv\n\n/**\n * Constructs a new `ConfigProvider` from a key/value (flat) provider, where\n * nesting is embedded into the string keys.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromFlat: (flat: ConfigProvider.Flat) => ConfigProvider = internal.fromFlat\n\n/**\n * Constructs a new `ConfigProvider` from a JSON object.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromJson: (json: unknown) => ConfigProvider = internal.fromJson\n\n/**\n * Constructs a ConfigProvider using a map and the specified delimiter string,\n * which determines how to split the keys in the map into path segments.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromMap: (map: Map<string, string>, config?: Partial<ConfigProvider.FromMapConfig>) => ConfigProvider =\n  internal.fromMap\n\n/**\n * Returns a new config provider that will automatically convert all property\n * names to constant case. This can be utilized to adapt the names of\n * configuration properties from the default naming convention of camel case\n * to the naming convention of a config provider.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const constantCase: (self: ConfigProvider) => ConfigProvider = internal.constantCase\n\n/**\n * Returns a new config provider that will automatically tranform all path\n * configuration names with the specified function. This can be utilized to\n * adapt the names of configuration properties from one naming convention to\n * another.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const mapInputPath: {\n  /**\n   * Returns a new config provider that will automatically tranform all path\n   * configuration names with the specified function. This can be utilized to\n   * adapt the names of configuration properties from one naming convention to\n   * another.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (f: (path: string) => string): (self: ConfigProvider) => ConfigProvider\n  /**\n   * Returns a new config provider that will automatically tranform all path\n   * configuration names with the specified function. This can be utilized to\n   * adapt the names of configuration properties from one naming convention to\n   * another.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: ConfigProvider, f: (path: string) => string): ConfigProvider\n} = internal.mapInputPath\n\n/**\n * Returns a new config provider that will automatically convert all property\n * names to kebab case. This can be utilized to adapt the names of\n * configuration properties from the default naming convention of camel case\n * to the naming convention of a config provider.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const kebabCase: (self: ConfigProvider) => ConfigProvider = internal.kebabCase\n\n/**\n * Returns a new config provider that will automatically convert all property\n * names to lower case. This can be utilized to adapt the names of\n * configuration properties from the default naming convention of camel case\n * to the naming convention of a config provider.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const lowerCase: (self: ConfigProvider) => ConfigProvider = internal.lowerCase\n\n/**\n * Returns a new config provider that will automatically nest all\n * configuration under the specified property name. This can be utilized to\n * aggregate separate configuration sources that are all required to load a\n * single configuration value.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const nested: {\n  /**\n   * Returns a new config provider that will automatically nest all\n   * configuration under the specified property name. This can be utilized to\n   * aggregate separate configuration sources that are all required to load a\n   * single configuration value.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (name: string): (self: ConfigProvider) => ConfigProvider\n  /**\n   * Returns a new config provider that will automatically nest all\n   * configuration under the specified property name. This can be utilized to\n   * aggregate separate configuration sources that are all required to load a\n   * single configuration value.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: ConfigProvider, name: string): ConfigProvider\n} = internal.nested\n\n/**\n * Returns a new config provider that preferentially loads configuration data\n * from this one, but which will fall back to the specified alternate provider\n * if there are any issues loading the configuration from this provider.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const orElse: {\n  /**\n   * Returns a new config provider that preferentially loads configuration data\n   * from this one, but which will fall back to the specified alternate provider\n   * if there are any issues loading the configuration from this provider.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (that: LazyArg<ConfigProvider>): (self: ConfigProvider) => ConfigProvider\n  /**\n   * Returns a new config provider that preferentially loads configuration data\n   * from this one, but which will fall back to the specified alternate provider\n   * if there are any issues loading the configuration from this provider.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: ConfigProvider, that: LazyArg<ConfigProvider>): ConfigProvider\n} = internal.orElse\n\n/**\n * Returns a new config provider that will automatically un-nest all\n * configuration under the specified property name. This can be utilized to\n * de-aggregate separate configuration sources that are all required to load a\n * single configuration value.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const unnested: {\n  /**\n   * Returns a new config provider that will automatically un-nest all\n   * configuration under the specified property name. This can be utilized to\n   * de-aggregate separate configuration sources that are all required to load a\n   * single configuration value.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (name: string): (self: ConfigProvider) => ConfigProvider\n  /**\n   * Returns a new config provider that will automatically un-nest all\n   * configuration under the specified property name. This can be utilized to\n   * de-aggregate separate configuration sources that are all required to load a\n   * single configuration value.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: ConfigProvider, name: string): ConfigProvider\n} = internal.unnested\n\n/**\n * Returns a new config provider that will automatically convert all property\n * names to upper case. This can be utilized to adapt the names of\n * configuration properties from the default naming convention of camel case\n * to the naming convention of a config provider.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const snakeCase: (self: ConfigProvider) => ConfigProvider = internal.snakeCase\n\n/**\n * Returns a new config provider that will automatically convert all property\n * names to upper case. This can be utilized to adapt the names of\n * configuration properties from the default naming convention of camel case\n * to the naming convention of a config provider.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const upperCase: (self: ConfigProvider) => ConfigProvider = internal.upperCase\n\n/**\n * Returns a new config provider that transforms the config provider with the\n * specified function within the specified path.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const within: {\n  /**\n   * Returns a new config provider that transforms the config provider with the\n   * specified function within the specified path.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  (path: ReadonlyArray<string>, f: (self: ConfigProvider) => ConfigProvider): (self: ConfigProvider) => ConfigProvider\n  /**\n   * Returns a new config provider that transforms the config provider with the\n   * specified function within the specified path.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  (\n    self: ConfigProvider,\n    path: ReadonlyArray<string>,\n    f: (self: ConfigProvider) => ConfigProvider\n  ): ConfigProvider\n} = internal.within\n"],"names":["internal","ConfigProviderTypeId","FlatConfigProviderTypeId","ConfigProvider","configProviderTag","make","makeFlat","fromEnv","fromFlat","fromJson","fromMap","constantCase","mapInputPath","kebabCase","lowerCase","nested","orElse","unnested","snakeCase","upperCase","within"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAUA,OAAO,KAAKA,QAAQ,MAAM,8BAA8B;;AAOjD,MAAMC,oBAAoB,GAAkBD,QAAQ,kNAACC,oBAAoB;AAYzE,MAAMC,wBAAwB,GAAkBF,QAAQ,kNAACE,wBAAwB;AA6GjF,MAAMC,cAAc,GAAgDH,QAAQ,kNAACI,iBAAiB;AAQ9F,MAAMC,IAAI,GAKKL,QAAQ,kNAACK,IAAI;AAQ5B,MAAMC,QAAQ,GAUON,QAAQ,kNAACM,QAAQ;AAStC,MAAMC,OAAO,GAA8DP,QAAQ,kNAACO,OAAO;AAS3F,MAAMC,QAAQ,GAAkDR,QAAQ,kNAACQ,QAAQ;AAQjF,MAAMC,QAAQ,GAAsCT,QAAQ,kNAACS,QAAQ;AASrE,MAAMC,OAAO,GAClBV,QAAQ,kNAACU,OAAO;AAWX,MAAMC,YAAY,GAA6CX,QAAQ,kNAACW,YAAY;AAWpF,MAAMC,YAAY,GAqBrBZ,QAAQ,kNAACY,YAAY;AAWlB,MAAMC,SAAS,GAA6Cb,QAAQ,kNAACa,SAAS;AAW9E,MAAMC,SAAS,GAA6Cd,QAAQ,kNAACc,SAAS;AAW9E,MAAMC,MAAM,GAqBff,QAAQ,kNAACe,MAAM;AAUZ,MAAMC,MAAM,GAmBfhB,QAAQ,kNAACgB,MAAM;AAWZ,MAAMC,QAAQ,GAqBjBjB,QAAQ,kNAACiB,QAAQ;AAWd,MAAMC,SAAS,GAA6ClB,QAAQ,kNAACkB,SAAS;AAW9E,MAAMC,SAAS,GAA6CnB,QAAQ,kNAACmB,SAAS;AAS9E,MAAMC,MAAM,GAqBfpB,QAAQ,kNAACoB,MAAM","ignoreList":[0]}},
    {"offset": {"line": 16771, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16777, "column": 0}, "map": {"version":3,"file":"Schedule.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Schedule.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Cause from \"./Cause.js\"\nimport type * as Chunk from \"./Chunk.js\"\nimport type * as Context from \"./Context.js\"\nimport type * as Cron from \"./Cron.js\"\nimport type * as Duration from \"./Duration.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Either from \"./Either.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport * as internal from \"./internal/schedule.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate } from \"./Predicate.js\"\nimport type * as ScheduleDecision from \"./ScheduleDecision.js\"\nimport type * as Intervals from \"./ScheduleIntervals.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const ScheduleTypeId: unique symbol = internal.ScheduleTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type ScheduleTypeId = typeof ScheduleTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const ScheduleDriverTypeId: unique symbol = internal.ScheduleDriverTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type ScheduleDriverTypeId = typeof ScheduleDriverTypeId\n\n/**\n * A `Schedule<Out, In, R>` defines a recurring schedule, which consumes\n * values of type `In`, and which returns values of type `Out`.\n *\n * Schedules are defined as a possibly infinite set of intervals spread out over\n * time. Each interval defines a window in which recurrence is possible.\n *\n * When schedules are used to repeat or retry effects, the starting boundary of\n * each interval produced by a schedule is used as the moment when the effect\n * will be executed again.\n *\n * Schedules compose in the following primary ways:\n *\n * - Union: performs the union of the intervals of two schedules\n * - Intersection: performs the intersection of the intervals of two schedules\n * - Sequence: concatenates the intervals of one schedule onto another\n *\n * In addition, schedule inputs and outputs can be transformed, filtered (to\n * terminate a schedule early in response to some input or output), and so\n * forth.\n *\n * A variety of other operators exist for transforming and combining schedules,\n * and the companion object for `Schedule` contains all common types of\n * schedules, both for performing retrying, as well as performing repetition.\n *\n * @category model\n * @since 2.0.0\n */\nexport interface Schedule<out Out, in In = unknown, out R = never> extends Schedule.Variance<Out, In, R>, Pipeable {\n  /**\n   * Initial State\n   */\n  readonly initial: any\n  /**\n   * Schedule Step\n   */\n  step(\n    now: number,\n    input: In,\n    state: any\n  ): Effect.Effect<readonly [any, Out, ScheduleDecision.ScheduleDecision], never, R>\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Schedule {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<out Out, in In, out R> {\n    readonly [ScheduleTypeId]: {\n      readonly _Out: Types.Covariant<Out>\n      readonly _In: Types.Contravariant<In>\n      readonly _R: Types.Covariant<R>\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  export interface DriverVariance<out Out, in In, out R> {\n    readonly [ScheduleDriverTypeId]: {\n      readonly _Out: Types.Covariant<Out>\n      readonly _In: Types.Contravariant<In>\n      readonly _R: Types.Covariant<R>\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface ScheduleDriver<out Out, in In = unknown, out R = never> extends Schedule.DriverVariance<Out, In, R> {\n  readonly state: Effect.Effect<unknown>\n  readonly last: Effect.Effect<Out, Cause.NoSuchElementException>\n  readonly reset: Effect.Effect<void>\n  next(input: In): Effect.Effect<Out, Option.Option<never>, R>\n}\n\n/**\n * Constructs a new `Schedule` with the specified `initial` state and the\n * specified `step` function.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const makeWithState: <S, In, Out, R = never>(\n  initial: S,\n  step: (\n    now: number,\n    input: In,\n    state: S\n  ) => Effect.Effect<readonly [S, Out, ScheduleDecision.ScheduleDecision], never, R>\n) => Schedule<Out, In, R> = internal.makeWithState\n\n/**\n * Returns a new schedule with the given delay added to every interval defined\n * by this schedule.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const addDelay: {\n  /**\n   * Returns a new schedule with the given delay added to every interval defined\n   * by this schedule.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out>(f: (out: Out) => Duration.DurationInput): <In, R>(self: Schedule<Out, In, R>) => Schedule<Out, In, R>\n  /**\n   * Returns a new schedule with the given delay added to every interval defined\n   * by this schedule.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, In, R>(self: Schedule<Out, In, R>, f: (out: Out) => Duration.DurationInput): Schedule<Out, In, R>\n} = internal.addDelay\n\n/**\n * Returns a new schedule with the given effectfully computed delay added to\n * every interval defined by this schedule.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const addDelayEffect: {\n  /**\n   * Returns a new schedule with the given effectfully computed delay added to\n   * every interval defined by this schedule.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, R2>(\n    f: (out: Out) => Effect.Effect<Duration.DurationInput, never, R2>\n  ): <In, R>(self: Schedule<Out, In, R>) => Schedule<Out, In, R2 | R>\n  /**\n   * Returns a new schedule with the given effectfully computed delay added to\n   * every interval defined by this schedule.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, In, R, R2>(\n    self: Schedule<Out, In, R>,\n    f: (out: Out) => Effect.Effect<Duration.DurationInput, never, R2>\n  ): Schedule<Out, In, R | R2>\n} = internal.addDelayEffect\n\n/**\n * The same as `andThenEither`, but merges the output.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const andThen: {\n  /**\n   * The same as `andThenEither`, but merges the output.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <Out2, In2, R2>(\n    that: Schedule<Out2, In2, R2>\n  ): <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<Out2 | Out, In & In2, R2 | R>\n  /**\n   * The same as `andThenEither`, but merges the output.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule<Out, In, R>,\n    that: Schedule<Out2, In2, R2>\n  ): Schedule<Out | Out2, In & In2, R | R2>\n} = internal.andThen\n\n/**\n * Returns a new schedule that first executes this schedule to completion, and\n * then executes the specified schedule to completion.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const andThenEither: {\n  /**\n   * Returns a new schedule that first executes this schedule to completion, and\n   * then executes the specified schedule to completion.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <Out2, In2, R2>(\n    that: Schedule<Out2, In2, R2>\n  ): <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<Either.Either<Out2, Out>, In & In2, R2 | R>\n  /**\n   * Returns a new schedule that first executes this schedule to completion, and\n   * then executes the specified schedule to completion.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule<Out, In, R>,\n    that: Schedule<Out2, In2, R2>\n  ): Schedule<Either.Either<Out2, Out>, In & In2, R | R2>\n} = internal.andThenEither\n\n/**\n * Returns a new schedule that maps this schedule to a constant output.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const as: {\n  /**\n   * Returns a new schedule that maps this schedule to a constant output.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <Out2>(out: Out2): <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<Out2, In, R>\n  /**\n   * Returns a new schedule that maps this schedule to a constant output.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <Out, In, R, Out2>(self: Schedule<Out, In, R>, out: Out2): Schedule<Out2, In, R>\n} = internal.as\n\n/**\n * Returns a new schedule that maps the output of this schedule to unit.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const asVoid: <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<void, In, R> = internal.asVoid\n\n/**\n * Returns a new schedule that has both the inputs and outputs of this and the\n * specified schedule.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const bothInOut: {\n  /**\n   * Returns a new schedule that has both the inputs and outputs of this and the\n   * specified schedule.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out2, In2, R2>(\n    that: Schedule<Out2, In2, R2>\n  ): <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<[Out, Out2], readonly [In, In2], R2 | R>\n  /**\n   * Returns a new schedule that has both the inputs and outputs of this and the\n   * specified schedule.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule<Out, In, R>,\n    that: Schedule<Out2, In2, R2>\n  ): Schedule<[Out, Out2], readonly [In, In2], R | R2>\n} = internal.bothInOut\n\n/**\n * Returns a new schedule that passes each input and output of this schedule\n * to the specified function, and then determines whether or not to continue\n * based on the return value of the function.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const check: {\n  /**\n   * Returns a new schedule that passes each input and output of this schedule\n   * to the specified function, and then determines whether or not to continue\n   * based on the return value of the function.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <In, Out>(test: (input: In, output: Out) => boolean): <R>(self: Schedule<Out, In, R>) => Schedule<Out, In, R>\n  /**\n   * Returns a new schedule that passes each input and output of this schedule\n   * to the specified function, and then determines whether or not to continue\n   * based on the return value of the function.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, In, R>(self: Schedule<Out, In, R>, test: (input: In, output: Out) => boolean): Schedule<Out, In, R>\n} = internal.check\n\n/**\n * Returns a new schedule that passes each input and output of this schedule\n * to the specified function, and then determines whether or not to continue\n * based on the return value of the function.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const checkEffect: {\n  /**\n   * Returns a new schedule that passes each input and output of this schedule\n   * to the specified function, and then determines whether or not to continue\n   * based on the return value of the function.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <In, Out, R2>(\n    test: (input: In, output: Out) => Effect.Effect<boolean, never, R2>\n  ): <R>(self: Schedule<Out, In, R>) => Schedule<Out, In, R2 | R>\n  /**\n   * Returns a new schedule that passes each input and output of this schedule\n   * to the specified function, and then determines whether or not to continue\n   * based on the return value of the function.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, In, R, R2>(\n    self: Schedule<Out, In, R>,\n    test: (input: In, output: Out) => Effect.Effect<boolean, never, R2>\n  ): Schedule<Out, In, R | R2>\n} = internal.checkEffect\n\n/**\n * A schedule that recurs anywhere, collecting all inputs into a `Chunk`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const collectAllInputs: <A>() => Schedule<Chunk.Chunk<A>, A> = internal.collectAllInputs\n\n/**\n * Returns a new schedule that collects the outputs of this one into a chunk.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const collectAllOutputs: <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<Chunk.Chunk<Out>, In, R> =\n  internal.collectAllOutputs\n\n/**\n * A schedule that recurs until the condition f fails, collecting all inputs\n * into a list.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const collectUntil: <A>(f: Predicate<A>) => Schedule<Chunk.Chunk<A>, A> = internal.collectUntil\n\n/**\n * A schedule that recurs until the effectful condition f fails, collecting\n * all inputs into a list.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const collectUntilEffect: <A, R>(\n  f: (a: A) => Effect.Effect<boolean, never, R>\n) => Schedule<Chunk.Chunk<A>, A, R> = internal.collectUntilEffect\n\n/**\n * A schedule that recurs as long as the condition f holds, collecting all\n * inputs into a list.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const collectWhile: <A>(f: Predicate<A>) => Schedule<Chunk.Chunk<A>, A> = internal.collectWhile\n\n/**\n * A schedule that recurs as long as the effectful condition holds, collecting\n * all inputs into a list.\n *\n * @category utils\n * @since 2.0.0\n */\nexport const collectWhileEffect: <A, R>(\n  f: (a: A) => Effect.Effect<boolean, never, R>\n) => Schedule<Chunk.Chunk<A>, A, R> = internal.collectWhileEffect\n\n/**\n * Returns the composition of this schedule and the specified schedule, by\n * piping the output of this one into the input of the other. Effects\n * described by this schedule will always be executed before the effects\n * described by the second schedule.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const compose: {\n  /**\n   * Returns the composition of this schedule and the specified schedule, by\n   * piping the output of this one into the input of the other. Effects\n   * described by this schedule will always be executed before the effects\n   * described by the second schedule.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out2, Out, R2>(that: Schedule<Out2, Out, R2>): <In, R>(self: Schedule<Out, In, R>) => Schedule<Out2, In, R2 | R>\n  /**\n   * Returns the composition of this schedule and the specified schedule, by\n   * piping the output of this one into the input of the other. Effects\n   * described by this schedule will always be executed before the effects\n   * described by the second schedule.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, In, R, Out2, R2>(self: Schedule<Out, In, R>, that: Schedule<Out2, Out, R2>): Schedule<Out2, In, R | R2>\n} = internal.compose\n\n/**\n * Returns a new schedule that deals with a narrower class of inputs than this\n * schedule.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapInput: {\n  /**\n   * Returns a new schedule that deals with a narrower class of inputs than this\n   * schedule.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <In, In2>(f: (in2: In2) => In): <Out, R>(self: Schedule<Out, In, R>) => Schedule<Out, In2, R>\n  /**\n   * Returns a new schedule that deals with a narrower class of inputs than this\n   * schedule.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <Out, In, R, In2>(self: Schedule<Out, In, R>, f: (in2: In2) => In): Schedule<Out, In2, R>\n} = internal.mapInput\n\n/**\n * Transforms the context being provided to this schedule with the\n * specified function.\n *\n * @since 2.0.0\n * @category context\n */\nexport const mapInputContext: {\n  /**\n   * Transforms the context being provided to this schedule with the\n   * specified function.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <R0, R>(\n    f: (env0: Context.Context<R0>) => Context.Context<R>\n  ): <Out, In>(self: Schedule<Out, In, R>) => Schedule<Out, In, R0>\n  /**\n   * Transforms the context being provided to this schedule with the\n   * specified function.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <Out, In, R, R0>(\n    self: Schedule<Out, In, R>,\n    f: (env0: Context.Context<R0>) => Context.Context<R>\n  ): Schedule<Out, In, R0>\n} = internal.mapInputContext\n\n/**\n * Returns a new schedule that deals with a narrower class of inputs than this\n * schedule.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapInputEffect: {\n  /**\n   * Returns a new schedule that deals with a narrower class of inputs than this\n   * schedule.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <In2, In, R2>(\n    f: (in2: In2) => Effect.Effect<In, never, R2>\n  ): <Out, R>(self: Schedule<Out, In, R>) => Schedule<Out, In2, R2 | R>\n  /**\n   * Returns a new schedule that deals with a narrower class of inputs than this\n   * schedule.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <Out, In, R, In2, R2>(\n    self: Schedule<Out, In, R>,\n    f: (in2: In2) => Effect.Effect<In, never, R2>\n  ): Schedule<Out, In2, R | R2>\n} = internal.mapInputEffect\n\n/**\n * A schedule that always recurs, which counts the number of recurrences.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const count: Schedule<number> = internal.count\n\n/**\n * Cron schedule that recurs every `minute` that matches the schedule.\n *\n * It triggers at zero second of the minute. Producing the timestamps of the cron window.\n *\n * NOTE: `expression` parameter is validated lazily. Must be a valid cron expression.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const cron: (expression: string | Cron.Cron) => Schedule<[number, number]> = internal.cron\n\n/**\n * Cron-like schedule that recurs every specified `day` of month. Won't recur\n * on months containing less days than specified in `day` param.\n *\n * It triggers at zero hour of the day. Producing a count of repeats: 0, 1, 2.\n *\n * NOTE: `day` parameter is validated lazily. Must be in range 1...31.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const dayOfMonth: (day: number) => Schedule<number> = internal.dayOfMonth\n\n/**\n * Cron-like schedule that recurs every specified `day` of each week. It\n * triggers at zero hour of the week. Producing a count of repeats: 0, 1, 2.\n *\n * NOTE: `day` parameter is validated lazily. Must be in range 1 (Monday)...7\n * (Sunday).\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const dayOfWeek: (day: number) => Schedule<number> = internal.dayOfWeek\n\n/**\n * Returns a new schedule with the specified effectfully computed delay added\n * before the start of each interval produced by this schedule.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const delayed: {\n  /**\n   * Returns a new schedule with the specified effectfully computed delay added\n   * before the start of each interval produced by this schedule.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (\n    f: (duration: Duration.Duration) => Duration.DurationInput\n  ): <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<Out, In, R>\n  /**\n   * Returns a new schedule with the specified effectfully computed delay added\n   * before the start of each interval produced by this schedule.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, In, R>(\n    self: Schedule<Out, In, R>,\n    f: (duration: Duration.Duration) => Duration.DurationInput\n  ): Schedule<Out, In, R>\n} = internal.delayed\n\n/**\n * Returns a new schedule with the specified effectfully computed delay added\n * before the start of each interval produced by this schedule.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const delayedEffect: {\n  /**\n   * Returns a new schedule with the specified effectfully computed delay added\n   * before the start of each interval produced by this schedule.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <R2>(\n    f: (duration: Duration.Duration) => Effect.Effect<Duration.DurationInput, never, R2>\n  ): <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<Out, In, R2 | R>\n  /**\n   * Returns a new schedule with the specified effectfully computed delay added\n   * before the start of each interval produced by this schedule.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <Out, In, R, R2>(\n    self: Schedule<Out, In, R>,\n    f: (duration: Duration.Duration) => Effect.Effect<Duration.DurationInput, never, R2>\n  ): Schedule<Out, In, R | R2>\n} = internal.delayedEffect\n\n/**\n * Takes a schedule that produces a delay, and returns a new schedule that\n * uses this delay to further delay intervals in the resulting schedule.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const delayedSchedule: <In, R>(\n  schedule: Schedule<Duration.Duration, In, R>\n) => Schedule<Duration.Duration, In, R> = internal.delayedSchedule\n\n/**\n * Returns a new schedule that outputs the delay between each occurence.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const delays: <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<Duration.Duration, In, R> = internal.delays\n\n/**\n * Returns a new schedule that maps both the input and output.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapBoth: {\n  /**\n   * Returns a new schedule that maps both the input and output.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <In2, In, Out, Out2>(\n    options: { readonly onInput: (in2: In2) => In; readonly onOutput: (out: Out) => Out2 }\n  ): <R>(self: Schedule<Out, In, R>) => Schedule<Out2, In2, R>\n  /**\n   * Returns a new schedule that maps both the input and output.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <Out, In, R, In2, Out2>(\n    self: Schedule<Out, In, R>,\n    options: { readonly onInput: (in2: In2) => In; readonly onOutput: (out: Out) => Out2 }\n  ): Schedule<Out2, In2, R>\n} = internal.mapBoth\n\n/**\n * Returns a new schedule that maps both the input and output.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapBothEffect: {\n  /**\n   * Returns a new schedule that maps both the input and output.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <In2, In, R2, Out, R3, Out2>(\n    options: {\n      readonly onInput: (input: In2) => Effect.Effect<In, never, R2>\n      readonly onOutput: (out: Out) => Effect.Effect<Out2, never, R3>\n    }\n  ): <R>(self: Schedule<Out, In, R>) => Schedule<Out2, In2, R2 | R3 | R>\n  /**\n   * Returns a new schedule that maps both the input and output.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <Out, In, R, In2, R2, Out2, R3>(\n    self: Schedule<Out, In, R>,\n    options: {\n      readonly onInput: (input: In2) => Effect.Effect<In, never, R2>\n      readonly onOutput: (out: Out) => Effect.Effect<Out2, never, R3>\n    }\n  ): Schedule<Out2, In2, R | R2 | R3>\n} = internal.mapBothEffect\n\n/**\n * Returns a driver that can be used to step the schedule, appropriately\n * handling sleeping.\n *\n * @since 2.0.0\n * @category getter\n */\nexport const driver: <Out, In, R>(\n  self: Schedule<Out, In, R>\n) => Effect.Effect<ScheduleDriver<Out, In, R>> = internal.driver\n\n/**\n * A schedule that can recur one time, the specified amount of time into the\n * future.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const duration: (duration: Duration.DurationInput) => Schedule<Duration.Duration> = internal.duration\n\n/**\n * Returns a new schedule that performs a geometric union on the intervals\n * defined by both schedules.\n *\n * @since 2.0.0\n * @category alternatives\n */\nexport const either: {\n  /**\n   * Returns a new schedule that performs a geometric union on the intervals\n   * defined by both schedules.\n   *\n   * @since 2.0.0\n   * @category alternatives\n   */\n  <Out2, In2, R2>(\n    that: Schedule<Out2, In2, R2>\n  ): <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<[Out, Out2], In & In2, R2 | R>\n  /**\n   * Returns a new schedule that performs a geometric union on the intervals\n   * defined by both schedules.\n   *\n   * @since 2.0.0\n   * @category alternatives\n   */\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule<Out, In, R>,\n    that: Schedule<Out2, In2, R2>\n  ): Schedule<[Out, Out2], In & In2, R | R2>\n} = internal.either\n\n/**\n * The same as `either` followed by `map`.\n *\n * @since 2.0.0\n * @category alternatives\n */\nexport const eitherWith: {\n  /**\n   * The same as `either` followed by `map`.\n   *\n   * @since 2.0.0\n   * @category alternatives\n   */\n  <Out2, In2, R2>(\n    that: Schedule<Out2, In2, R2>,\n    f: (x: Intervals.Intervals, y: Intervals.Intervals) => Intervals.Intervals\n  ): <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<[Out, Out2], In & In2, R2 | R>\n  /**\n   * The same as `either` followed by `map`.\n   *\n   * @since 2.0.0\n   * @category alternatives\n   */\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule<Out, In, R>,\n    that: Schedule<Out2, In2, R2>,\n    f: (x: Intervals.Intervals, y: Intervals.Intervals) => Intervals.Intervals\n  ): Schedule<[Out, Out2], In & In2, R | R2>\n} = internal.eitherWith\n\n/**\n * A schedule that occurs everywhere, which returns the total elapsed duration\n * since the first step.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const elapsed: Schedule<Duration.Duration> = internal.elapsed\n\n/**\n * Returns a new schedule that will run the specified finalizer as soon as the\n * schedule is complete. Note that unlike `Effect.ensuring`, this method does not\n * guarantee the finalizer will be run. The `Schedule` may not initialize or\n * the driver of the schedule may not run to completion. However, if the\n * `Schedule` ever decides not to continue, then the finalizer will be run.\n *\n * @since 2.0.0\n * @category finalization\n */\nexport const ensuring: {\n  /**\n   * Returns a new schedule that will run the specified finalizer as soon as the\n   * schedule is complete. Note that unlike `Effect.ensuring`, this method does not\n   * guarantee the finalizer will be run. The `Schedule` may not initialize or\n   * the driver of the schedule may not run to completion. However, if the\n   * `Schedule` ever decides not to continue, then the finalizer will be run.\n   *\n   * @since 2.0.0\n   * @category finalization\n   */\n  <X>(finalizer: Effect.Effect<X, never, never>): <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<Out, In, R>\n  /**\n   * Returns a new schedule that will run the specified finalizer as soon as the\n   * schedule is complete. Note that unlike `Effect.ensuring`, this method does not\n   * guarantee the finalizer will be run. The `Schedule` may not initialize or\n   * the driver of the schedule may not run to completion. However, if the\n   * `Schedule` ever decides not to continue, then the finalizer will be run.\n   *\n   * @since 2.0.0\n   * @category finalization\n   */\n  <Out, In, R, X>(self: Schedule<Out, In, R>, finalizer: Effect.Effect<X, never, never>): Schedule<Out, In, R>\n} = internal.ensuring\n\n/**\n * A schedule that always recurs, but will wait a certain amount between\n * repetitions, given by `base * factor.pow(n)`, where `n` is the number of\n * repetitions so far. Returns the current duration between recurrences.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const exponential: (\n  base: Duration.DurationInput,\n  factor?: number\n) => Schedule<Duration.Duration> = internal.exponential\n\n/**\n * A schedule that always recurs, increasing delays by summing the preceding\n * two delays (similar to the fibonacci sequence). Returns the current\n * duration between recurrences.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fibonacci: (one: Duration.DurationInput) => Schedule<Duration.Duration> = internal.fibonacci\n\n/**\n * A schedule that recurs on a fixed interval. Returns the number of\n * repetitions of the schedule so far.\n *\n * If the action run between updates takes longer than the interval, then the\n * action will be run immediately, but re-runs will not \"pile up\".\n *\n * ```\n * |-----interval-----|-----interval-----|-----interval-----|\n * |---------action--------||action|-----|action|-----------|\n * ```\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fixed: (interval: Duration.DurationInput) => Schedule<number> = internal.fixed\n\n/**\n * A schedule that always recurs, producing a count of repeats: 0, 1, 2.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const forever: Schedule<number> = internal.forever\n\n/**\n * A schedule that recurs once with the specified delay.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromDelay: (delay: Duration.DurationInput) => Schedule<Duration.Duration> = internal.fromDelay\n\n/**\n * A schedule that recurs once for each of the specified durations, delaying\n * each time for the length of the specified duration. Returns the length of\n * the current duration between recurrences.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromDelays: (\n  delay: Duration.DurationInput,\n  ...delays: Array<Duration.DurationInput>\n) => Schedule<Duration.Duration> = internal.fromDelays\n\n/**\n * A schedule that always recurs, mapping input values through the specified\n * function.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromFunction: <A, B>(f: (a: A) => B) => Schedule<B, A> = internal.fromFunction\n\n/**\n * Cron-like schedule that recurs every specified `hour` of each day. It\n * triggers at zero minute of the hour. Producing a count of repeats: 0, 1, 2.\n *\n * NOTE: `hour` parameter is validated lazily. Must be in range 0...23.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const hourOfDay: (hour: number) => Schedule<number> = internal.hourOfDay\n\n/**\n * A schedule that always recurs, which returns inputs as outputs.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const identity: <A>() => Schedule<A, A> = internal.identity\n\n/**\n * Returns a new schedule that performs a geometric intersection on the\n * intervals defined by both schedules.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const intersect: {\n  /**\n   * Returns a new schedule that performs a geometric intersection on the\n   * intervals defined by both schedules.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out2, In2, R2>(\n    that: Schedule<Out2, In2, R2>\n  ): <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<[Out, Out2], In & In2, R2 | R>\n  /**\n   * Returns a new schedule that performs a geometric intersection on the\n   * intervals defined by both schedules.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule<Out, In, R>,\n    that: Schedule<Out2, In2, R2>\n  ): Schedule<[Out, Out2], In & In2, R | R2>\n} = internal.intersect\n\n/**\n * Returns a new schedule that combines this schedule with the specified\n * schedule, continuing as long as both schedules want to continue and merging\n * the next intervals according to the specified merge function.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const intersectWith: {\n  /**\n   * Returns a new schedule that combines this schedule with the specified\n   * schedule, continuing as long as both schedules want to continue and merging\n   * the next intervals according to the specified merge function.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out2, In2, R2>(\n    that: Schedule<Out2, In2, R2>,\n    f: (x: Intervals.Intervals, y: Intervals.Intervals) => Intervals.Intervals\n  ): <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<[Out, Out2], In & In2, R2 | R>\n  /**\n   * Returns a new schedule that combines this schedule with the specified\n   * schedule, continuing as long as both schedules want to continue and merging\n   * the next intervals according to the specified merge function.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule<Out, In, R>,\n    that: Schedule<Out2, In2, R2>,\n    f: (x: Intervals.Intervals, y: Intervals.Intervals) => Intervals.Intervals\n  ): Schedule<[Out, Out2], In & In2, R | R2>\n} = internal.intersectWith\n\n/**\n * Returns a new schedule that randomly modifies the size of the intervals of\n * this schedule.\n *\n * Defaults `min` to `0.8` and `max` to `1.2`.\n *\n * The new interval size is between `min * old interval size` and `max * old\n * interval size`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const jittered: <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<Out, In, R> = internal.jittered\n\n/**\n * Returns a new schedule that randomly modifies the size of the intervals of\n * this schedule.\n *\n * The new interval size is between `min * old interval size` and `max * old\n * interval size`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const jitteredWith: {\n  /**\n   * Returns a new schedule that randomly modifies the size of the intervals of\n   * this schedule.\n   *\n   * The new interval size is between `min * old interval size` and `max * old\n   * interval size`.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  (\n    options: { min?: number | undefined; max?: number | undefined }\n  ): <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<Out, In, R>\n  /**\n   * Returns a new schedule that randomly modifies the size of the intervals of\n   * this schedule.\n   *\n   * The new interval size is between `min * old interval size` and `max * old\n   * interval size`.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <Out, In, R>(\n    self: Schedule<Out, In, R>,\n    options: { min?: number | undefined; max?: number | undefined }\n  ): Schedule<Out, In, R>\n} = internal.jitteredWith\n\n/**\n * A schedule that always recurs, but will repeat on a linear time interval,\n * given by `base * n` where `n` is the number of repetitions so far. Returns\n * the current duration between recurrences.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const linear: (base: Duration.DurationInput) => Schedule<Duration.Duration> = internal.linear\n\n/**\n * Returns a new schedule that maps the output of this schedule through the\n * specified function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  /**\n   * Returns a new schedule that maps the output of this schedule through the\n   * specified function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <Out, Out2>(f: (out: Out) => Out2): <In, R>(self: Schedule<Out, In, R>) => Schedule<Out2, In, R>\n  /**\n   * Returns a new schedule that maps the output of this schedule through the\n   * specified function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <Out, In, R, Out2>(self: Schedule<Out, In, R>, f: (out: Out) => Out2): Schedule<Out2, In, R>\n} = internal.map\n\n/**\n * Returns a new schedule that maps the output of this schedule through the\n * specified effectful function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapEffect: {\n  /**\n   * Returns a new schedule that maps the output of this schedule through the\n   * specified effectful function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <Out, Out2, R2>(\n    f: (out: Out) => Effect.Effect<Out2, never, R2>\n  ): <In, R>(self: Schedule<Out, In, R>) => Schedule<Out2, In, R2 | R>\n  /**\n   * Returns a new schedule that maps the output of this schedule through the\n   * specified effectful function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <Out, In, R, Out2, R2>(\n    self: Schedule<Out, In, R>,\n    f: (out: Out) => Effect.Effect<Out2, never, R2>\n  ): Schedule<Out2, In, R | R2>\n} = internal.mapEffect\n\n/**\n * Cron-like schedule that recurs every specified `minute` of each hour. It\n * triggers at zero second of the minute. Producing a count of repeats: 0, 1,\n * 2.\n *\n * NOTE: `minute` parameter is validated lazily. Must be in range 0...59.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const minuteOfHour: (minute: number) => Schedule<number> = internal.minuteOfHour\n\n/**\n * Returns a new schedule that modifies the delay using the specified\n * function.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const modifyDelay: {\n  /**\n   * Returns a new schedule that modifies the delay using the specified\n   * function.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out>(\n    f: (out: Out, duration: Duration.Duration) => Duration.DurationInput\n  ): <In, R>(self: Schedule<Out, In, R>) => Schedule<Out, In, R>\n  /**\n   * Returns a new schedule that modifies the delay using the specified\n   * function.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, In, R>(\n    self: Schedule<Out, In, R>,\n    f: (out: Out, duration: Duration.Duration) => Duration.DurationInput\n  ): Schedule<Out, In, R>\n} = internal.modifyDelay\n\n/**\n * Returns a new schedule that modifies the delay using the specified\n * effectual function.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const modifyDelayEffect: {\n  /**\n   * Returns a new schedule that modifies the delay using the specified\n   * effectual function.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, R2>(\n    f: (out: Out, duration: Duration.Duration) => Effect.Effect<Duration.DurationInput, never, R2>\n  ): <In, R>(self: Schedule<Out, In, R>) => Schedule<Out, In, R2 | R>\n  /**\n   * Returns a new schedule that modifies the delay using the specified\n   * effectual function.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, In, R, R2>(\n    self: Schedule<Out, In, R>,\n    f: (out: Out, duration: Duration.Duration) => Effect.Effect<Duration.DurationInput, never, R2>\n  ): Schedule<Out, In, R | R2>\n} = internal.modifyDelayEffect\n\n/**\n * Returns a new schedule that applies the current one but runs the specified\n * effect for every decision of this schedule. This can be used to create\n * schedules that log failures, decisions, or computed values.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const onDecision: {\n  /**\n   * Returns a new schedule that applies the current one but runs the specified\n   * effect for every decision of this schedule. This can be used to create\n   * schedules that log failures, decisions, or computed values.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, X, R2>(\n    f: (out: Out, decision: ScheduleDecision.ScheduleDecision) => Effect.Effect<X, never, R2>\n  ): <In, R>(self: Schedule<Out, In, R>) => Schedule<Out, In, R2 | R>\n  /**\n   * Returns a new schedule that applies the current one but runs the specified\n   * effect for every decision of this schedule. This can be used to create\n   * schedules that log failures, decisions, or computed values.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, In, R, X, R2>(\n    self: Schedule<Out, In, R>,\n    f: (out: Out, decision: ScheduleDecision.ScheduleDecision) => Effect.Effect<X, never, R2>\n  ): Schedule<Out, In, R | R2>\n} = internal.onDecision\n\n/**\n * A schedule that recurs one time.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const once: Schedule<void> = internal.once\n\n/**\n * Returns a new schedule that passes through the inputs of this schedule.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const passthrough: <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<In, In, R> = internal.passthrough\n\n/**\n * Returns a new schedule with its context provided to it, so the\n * resulting schedule does not require any context.\n *\n * @since 2.0.0\n * @category context\n */\nexport const provideContext: {\n  /**\n   * Returns a new schedule with its context provided to it, so the\n   * resulting schedule does not require any context.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <R>(context: Context.Context<R>): <Out, In>(self: Schedule<Out, In, R>) => Schedule<Out, In, never>\n  /**\n   * Returns a new schedule with its context provided to it, so the\n   * resulting schedule does not require any context.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <Out, In, R>(self: Schedule<Out, In, R>, context: Context.Context<R>): Schedule<Out, In, never>\n} = internal.provideContext\n\n/**\n * Returns a new schedule with the single service it requires provided to it.\n * If the schedule requires multiple services use `provideContext`\n * instead.\n *\n * @since 2.0.0\n * @category context\n */\nexport const provideService: {\n  /**\n   * Returns a new schedule with the single service it requires provided to it.\n   * If the schedule requires multiple services use `provideContext`\n   * instead.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    service: Context.Tag.Service<T>\n  ): <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<Out, In, Exclude<R, Context.Tag.Identifier<T>>>\n  /**\n   * Returns a new schedule with the single service it requires provided to it.\n   * If the schedule requires multiple services use `provideContext`\n   * instead.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <Out, In, R, T extends Context.Tag<any, any>>(\n    self: Schedule<Out, In, R>,\n    tag: T,\n    service: Context.Tag.Service<T>\n  ): Schedule<Out, In, Exclude<R, Context.Tag.Identifier<T>>>\n} = internal.provideService\n\n/**\n * A schedule that recurs for until the predicate evaluates to true.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const recurUntil: <A>(f: Predicate<A>) => Schedule<A, A> = internal.recurUntil\n\n/**\n * A schedule that recurs for until the predicate evaluates to true.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const recurUntilEffect: <A, R>(f: (a: A) => Effect.Effect<boolean, never, R>) => Schedule<A, A, R> =\n  internal.recurUntilEffect\n\n/**\n * A schedule that recurs for until the input value becomes applicable to\n * partial function and then map that value with given function.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const recurUntilOption: <A, B>(pf: (a: A) => Option.Option<B>) => Schedule<Option.Option<B>, A> =\n  internal.recurUntilOption\n\n/**\n * A schedule that recurs during the given duration.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const recurUpTo: (duration: Duration.DurationInput) => Schedule<Duration.Duration> = internal.recurUpTo\n\n/**\n * A schedule that recurs for as long as the predicate evaluates to true.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const recurWhile: <A>(f: Predicate<A>) => Schedule<A, A> = internal.recurWhile\n\n/**\n * A schedule that recurs for as long as the effectful predicate evaluates to\n * true.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const recurWhileEffect: <A, R>(f: (a: A) => Effect.Effect<boolean, never, R>) => Schedule<A, A, R> =\n  internal.recurWhileEffect\n\n/**\n * A schedule spanning all time, which can be stepped only the specified\n * number of times before it terminates.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const recurs: (n: number) => Schedule<number> = internal.recurs\n\n/**\n * Returns a new schedule that folds over the outputs of this one.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduce: {\n  /**\n   * Returns a new schedule that folds over the outputs of this one.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <Out, Z>(zero: Z, f: (z: Z, out: Out) => Z): <In, R>(self: Schedule<Out, In, R>) => Schedule<Z, In, R>\n  /**\n   * Returns a new schedule that folds over the outputs of this one.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <Out, In, R, Z>(self: Schedule<Out, In, R>, zero: Z, f: (z: Z, out: Out) => Z): Schedule<Z, In, R>\n} = internal.reduce\n\n/**\n * Returns a new schedule that effectfully folds over the outputs of this one.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const reduceEffect: {\n  /**\n   * Returns a new schedule that effectfully folds over the outputs of this one.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <Z, Out, R2>(\n    zero: Z,\n    f: (z: Z, out: Out) => Effect.Effect<Z, never, R2>\n  ): <In, R>(self: Schedule<Out, In, R>) => Schedule<Z, In, R2 | R>\n  /**\n   * Returns a new schedule that effectfully folds over the outputs of this one.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <Out, In, R, Z, R2>(\n    self: Schedule<Out, In, R>,\n    zero: Z,\n    f: (z: Z, out: Out) => Effect.Effect<Z, never, R2>\n  ): Schedule<Z, In, R | R2>\n} = internal.reduceEffect\n\n/**\n * Returns a new schedule that loops this one continuously, resetting the\n * state when this schedule is done.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const repeatForever: Schedule<number> = internal.forever\n\n/**\n * Returns a new schedule that outputs the number of repetitions of this one.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const repetitions: <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<number, In, R> = internal.repetitions\n\n/**\n * Return a new schedule that automatically resets the schedule to its initial\n * state after some time of inactivity defined by `duration`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const resetAfter: {\n  /**\n   * Return a new schedule that automatically resets the schedule to its initial\n   * state after some time of inactivity defined by `duration`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (duration: Duration.DurationInput): <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<Out, In, R>\n  /**\n   * Return a new schedule that automatically resets the schedule to its initial\n   * state after some time of inactivity defined by `duration`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, In, R>(self: Schedule<Out, In, R>, duration: Duration.DurationInput): Schedule<Out, In, R>\n} = internal.resetAfter\n\n/**\n * Resets the schedule when the specified predicate on the schedule output\n * evaluates to true.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const resetWhen: {\n  /**\n   * Resets the schedule when the specified predicate on the schedule output\n   * evaluates to true.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out>(f: Predicate<Out>): <In, R>(self: Schedule<Out, In, R>) => Schedule<Out, In, R>\n  /**\n   * Resets the schedule when the specified predicate on the schedule output\n   * evaluates to true.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, In, R>(self: Schedule<Out, In, R>, f: Predicate<Out>): Schedule<Out, In, R>\n} = internal.resetWhen\n\n/**\n * Runs a schedule using the provided inputs, and collects all outputs.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const run: {\n  /**\n   * Runs a schedule using the provided inputs, and collects all outputs.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <In>(\n    now: number,\n    input: Iterable<In>\n  ): <Out, R>(self: Schedule<Out, In, R>) => Effect.Effect<Chunk.Chunk<Out>, never, R>\n  /**\n   * Runs a schedule using the provided inputs, and collects all outputs.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <Out, In, R>(self: Schedule<Out, In, R>, now: number, input: Iterable<In>): Effect.Effect<Chunk.Chunk<Out>, never, R>\n} = internal.run\n\n/**\n * Cron-like schedule that recurs every specified `second` of each minute. It\n * triggers at zero nanosecond of the second. Producing a count of repeats: 0,\n * 1, 2.\n *\n * NOTE: `second` parameter is validated lazily. Must be in range 0...59.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const secondOfMinute: (second: number) => Schedule<number> = internal.secondOfMinute\n\n/**\n * Returns a schedule that recurs continuously, each repetition spaced the\n * specified duration from the last run.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const spaced: (duration: Duration.DurationInput) => Schedule<number> = internal.spaced\n\n/**\n * A schedule that does not recur, it just stops.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const stop: Schedule<void> = internal.stop\n\n/**\n * Returns a schedule that repeats one time, producing the specified constant\n * value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeed: <A>(value: A) => Schedule<A> = internal.succeed\n\n/**\n * Returns a schedule that repeats one time, producing the specified constant\n * value.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const sync: <A>(evaluate: LazyArg<A>) => Schedule<A> = internal.sync\n\n/**\n * Returns a new schedule that effectfully processes every input to this\n * schedule.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapInput: {\n  /**\n   * Returns a new schedule that effectfully processes every input to this\n   * schedule.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <In2, X, R2>(\n    f: (input: In2) => Effect.Effect<X, never, R2>\n  ): <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<Out, In & In2, R2 | R>\n  /**\n   * Returns a new schedule that effectfully processes every input to this\n   * schedule.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <Out, In, R, In2, X, R2>(\n    self: Schedule<Out, In, R>,\n    f: (input: In2) => Effect.Effect<X, never, R2>\n  ): Schedule<Out, In & In2, R | R2>\n} = internal.tapInput\n\n/**\n * Returns a new schedule that effectfully processes every output from this\n * schedule.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapOutput: {\n  /**\n   * Returns a new schedule that effectfully processes every output from this\n   * schedule.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <XO extends Out, X, R2, Out>(\n    f: (out: XO) => Effect.Effect<X, never, R2>\n  ): <In, R>(self: Schedule<Out, In, R>) => Schedule<Out, In, R2 | R>\n  /**\n   * Returns a new schedule that effectfully processes every output from this\n   * schedule.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <Out, In, R, XO extends Out, X, R2>(\n    self: Schedule<Out, In, R>,\n    f: (out: XO) => Effect.Effect<X, never, R2>\n  ): Schedule<Out, In, R | R2>\n} = internal.tapOutput\n\n/**\n * Unfolds a schedule that repeats one time from the specified state and\n * iterator.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const unfold: <A>(initial: A, f: (a: A) => A) => Schedule<A> = internal.unfold\n\n/**\n * Returns a new schedule that performs a geometric union on the intervals\n * defined by both schedules.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const union: {\n  /**\n   * Returns a new schedule that performs a geometric union on the intervals\n   * defined by both schedules.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out2, In2, R2>(\n    that: Schedule<Out2, In2, R2>\n  ): <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<[Out, Out2], In & In2, R2 | R>\n  /**\n   * Returns a new schedule that performs a geometric union on the intervals\n   * defined by both schedules.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule<Out, In, R>,\n    that: Schedule<Out2, In2, R2>\n  ): Schedule<[Out, Out2], In & In2, R | R2>\n} = internal.union\n\n/**\n * Returns a new schedule that combines this schedule with the specified\n * schedule, continuing as long as either schedule wants to continue and\n * merging the next intervals according to the specified merge function.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const unionWith: {\n  /**\n   * Returns a new schedule that combines this schedule with the specified\n   * schedule, continuing as long as either schedule wants to continue and\n   * merging the next intervals according to the specified merge function.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out2, In2, R2>(\n    that: Schedule<Out2, In2, R2>,\n    f: (x: Intervals.Intervals, y: Intervals.Intervals) => Intervals.Intervals\n  ): <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<[Out, Out2], In & In2, R2 | R>\n  /**\n   * Returns a new schedule that combines this schedule with the specified\n   * schedule, continuing as long as either schedule wants to continue and\n   * merging the next intervals according to the specified merge function.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule<Out, In, R>,\n    that: Schedule<Out2, In2, R2>,\n    f: (x: Intervals.Intervals, y: Intervals.Intervals) => Intervals.Intervals\n  ): Schedule<[Out, Out2], In & In2, R | R2>\n} = internal.unionWith\n\n/**\n * Returns a new schedule that continues until the specified predicate on the\n * input evaluates to true.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const untilInput: {\n  /**\n   * Returns a new schedule that continues until the specified predicate on the\n   * input evaluates to true.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <In>(f: Predicate<In>): <Out, R>(self: Schedule<Out, In, R>) => Schedule<Out, In, R>\n  /**\n   * Returns a new schedule that continues until the specified predicate on the\n   * input evaluates to true.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, In, R>(self: Schedule<Out, In, R>, f: Predicate<In>): Schedule<Out, In, R>\n} = internal.untilInput\n\n/**\n * Returns a new schedule that continues until the specified effectful\n * predicate on the input evaluates to true.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const untilInputEffect: {\n  /**\n   * Returns a new schedule that continues until the specified effectful\n   * predicate on the input evaluates to true.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <In, R2>(\n    f: (input: In) => Effect.Effect<boolean, never, R2>\n  ): <Out, R>(self: Schedule<Out, In, R>) => Schedule<Out, In, R2 | R>\n  /**\n   * Returns a new schedule that continues until the specified effectful\n   * predicate on the input evaluates to true.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, In, R, R2>(\n    self: Schedule<Out, In, R>,\n    f: (input: In) => Effect.Effect<boolean, never, R2>\n  ): Schedule<Out, In, R | R2>\n} = internal.untilInputEffect\n\n/**\n * Returns a new schedule that continues until the specified predicate on the\n * output evaluates to true.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const untilOutput: {\n  /**\n   * Returns a new schedule that continues until the specified predicate on the\n   * output evaluates to true.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out>(f: Predicate<Out>): <In, R>(self: Schedule<Out, In, R>) => Schedule<Out, In, R>\n  /**\n   * Returns a new schedule that continues until the specified predicate on the\n   * output evaluates to true.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, In, R>(self: Schedule<Out, In, R>, f: Predicate<Out>): Schedule<Out, In, R>\n} = internal.untilOutput\n\n/**\n * Returns a new schedule that continues until the specified effectful\n * predicate on the output evaluates to true.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const untilOutputEffect: {\n  /**\n   * Returns a new schedule that continues until the specified effectful\n   * predicate on the output evaluates to true.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, R2>(\n    f: (out: Out) => Effect.Effect<boolean, never, R2>\n  ): <In, R>(self: Schedule<Out, In, R>) => Schedule<Out, In, R2 | R>\n  /**\n   * Returns a new schedule that continues until the specified effectful\n   * predicate on the output evaluates to true.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, In, R, R2>(\n    self: Schedule<Out, In, R>,\n    f: (out: Out) => Effect.Effect<boolean, never, R2>\n  ): Schedule<Out, In, R | R2>\n} = internal.untilOutputEffect\n\n/**\n * A schedule that recurs during the given duration.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const upTo: {\n  /**\n   * A schedule that recurs during the given duration.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (duration: Duration.DurationInput): <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<Out, In, R>\n  /**\n   * A schedule that recurs during the given duration.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, In, R>(self: Schedule<Out, In, R>, duration: Duration.DurationInput): Schedule<Out, In, R>\n} = internal.upTo\n\n/**\n * Returns a new schedule that continues for as long as the specified predicate\n * on the input evaluates to true.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const whileInput: {\n  /**\n   * Returns a new schedule that continues for as long as the specified predicate\n   * on the input evaluates to true.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <In>(f: Predicate<In>): <Out, R>(self: Schedule<Out, In, R>) => Schedule<Out, In, R>\n  /**\n   * Returns a new schedule that continues for as long as the specified predicate\n   * on the input evaluates to true.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, In, R>(self: Schedule<Out, In, R>, f: Predicate<In>): Schedule<Out, In, R>\n} = internal.whileInput\n\n/**\n * Returns a new schedule that continues for as long as the specified effectful\n * predicate on the input evaluates to true.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const whileInputEffect: {\n  /**\n   * Returns a new schedule that continues for as long as the specified effectful\n   * predicate on the input evaluates to true.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <In, R2>(\n    f: (input: In) => Effect.Effect<boolean, never, R2>\n  ): <Out, R>(self: Schedule<Out, In, R>) => Schedule<Out, In, R2 | R>\n  /**\n   * Returns a new schedule that continues for as long as the specified effectful\n   * predicate on the input evaluates to true.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, In, R, R2>(\n    self: Schedule<Out, In, R>,\n    f: (input: In) => Effect.Effect<boolean, never, R2>\n  ): Schedule<Out, In, R | R2>\n} = internal.whileInputEffect\n\n/**\n * Returns a new schedule that continues for as long the specified predicate\n * on the output evaluates to true.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const whileOutput: {\n  /**\n   * Returns a new schedule that continues for as long the specified predicate\n   * on the output evaluates to true.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out>(f: Predicate<Out>): <In, R>(self: Schedule<Out, In, R>) => Schedule<Out, In, R>\n  /**\n   * Returns a new schedule that continues for as long the specified predicate\n   * on the output evaluates to true.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, In, R>(self: Schedule<Out, In, R>, f: Predicate<Out>): Schedule<Out, In, R>\n} = internal.whileOutput\n\n/**\n * Returns a new schedule that continues for as long the specified effectful\n * predicate on the output evaluates to true.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const whileOutputEffect: {\n  /**\n   * Returns a new schedule that continues for as long the specified effectful\n   * predicate on the output evaluates to true.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, R2>(\n    f: (out: Out) => Effect.Effect<boolean, never, R2>\n  ): <In, R>(self: Schedule<Out, In, R>) => Schedule<Out, In, R2 | R>\n  /**\n   * Returns a new schedule that continues for as long the specified effectful\n   * predicate on the output evaluates to true.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Out, In, R, R2>(\n    self: Schedule<Out, In, R>,\n    f: (out: Out) => Effect.Effect<boolean, never, R2>\n  ): Schedule<Out, In, R | R2>\n} = internal.whileOutputEffect\n\n/**\n * A schedule that divides the timeline to `interval`-long windows, and sleeps\n * until the nearest window boundary every time it recurs.\n *\n * For example, `windowed(Duration.seconds(10))` would produce a schedule as\n * follows:\n *\n * ```\n *      10s        10s        10s       10s\n * |----------|----------|----------|----------|\n * |action------|sleep---|act|-sleep|action----|\n * ```\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const windowed: (interval: Duration.DurationInput) => Schedule<number> = internal.windowed\n\n/**\n * The same as `intersect` but ignores the right output.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipLeft: {\n  /**\n   * The same as `intersect` but ignores the right output.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <Out2, In2, R2>(\n    that: Schedule<Out2, In2, R2>\n  ): <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<Out, In & In2, R2 | R>\n  /**\n   * The same as `intersect` but ignores the right output.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule<Out, In, R>,\n    that: Schedule<Out2, In2, R2>\n  ): Schedule<Out, In & In2, R | R2>\n} = internal.zipLeft\n\n/**\n * The same as `intersect` but ignores the left output.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipRight: {\n  /**\n   * The same as `intersect` but ignores the left output.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <Out2, In2, R2>(\n    that: Schedule<Out2, In2, R2>\n  ): <Out, In, R>(self: Schedule<Out, In, R>) => Schedule<Out2, In & In2, R2 | R>\n  /**\n   * The same as `intersect` but ignores the left output.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <Out, In, R, Out2, In2, R2>(\n    self: Schedule<Out, In, R>,\n    that: Schedule<Out2, In2, R2>\n  ): Schedule<Out2, In & In2, R | R2>\n} = internal.zipRight\n\n/**\n * Equivalent to `intersect` followed by `map`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWith: {\n  /**\n   * Equivalent to `intersect` followed by `map`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <Out2, In2, R2, Out, Out3>(\n    that: Schedule<Out2, In2, R2>,\n    f: (out: Out, out2: Out2) => Out3\n  ): <In, R>(self: Schedule<Out, In, R>) => Schedule<Out3, In & In2, R2 | R>\n  /**\n   * Equivalent to `intersect` followed by `map`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <Out, In, R, Out2, In2, R2, Out3>(\n    self: Schedule<Out, In, R>,\n    that: Schedule<Out2, In2, R2>,\n    f: (out: Out, out2: Out2) => Out3\n  ): Schedule<Out3, In & In2, R | R2>\n} = internal.zipWith\n"],"names":["internal","ScheduleTypeId","ScheduleDriverTypeId","makeWithState","addDelay","addDelayEffect","andThen","andThenEither","as","asVoid","bothInOut","check","checkEffect","collectAllInputs","collectAllOutputs","collectUntil","collectUntilEffect","collectWhile","collectWhileEffect","compose","mapInput","mapInputContext","mapInputEffect","count","cron","dayOfMonth","dayOfWeek","delayed","delayedEffect","delayedSchedule","delays","mapBoth","mapBothEffect","driver","duration","either","eitherWith","elapsed","ensuring","exponential","fibonacci","fixed","forever","fromDelay","fromDelays","fromFunction","hourOfDay","identity","intersect","intersectWith","jittered","jitteredWith","linear","map","mapEffect","minuteOfHour","modifyDelay","modifyDelayEffect","onDecision","once","passthrough","provideContext","provideService","recurUntil","recurUntilEffect","recurUntilOption","recurUpTo","recurWhile","recurWhileEffect","recurs","reduce","reduceEffect","repeatForever","repetitions","resetAfter","resetWhen","run","secondOfMinute","spaced","stop","succeed","sync","tapInput","tapOutput","unfold","union","unionWith","untilInput","untilInputEffect","untilOutput","untilOutputEffect","upTo","whileInput","whileInputEffect","whileOutput","whileOutputEffect","windowed","zipLeft","zipRight","zipWith"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 16979, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16985, "column": 0}, "map": {"version":3,"file":"PubSub.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/PubSub.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Effect from \"./Effect.js\"\nimport * as internal from \"./internal/pubsub.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type * as Queue from \"./Queue.js\"\nimport type * as Scope from \"./Scope.js\"\n\n/**\n * A `PubSub<A>` is an asynchronous message hub into which publishers can publish\n * messages of type `A` and subscribers can subscribe to take messages of type\n * `A`.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface PubSub<in out A> extends Queue.Enqueue<A>, Pipeable {\n  /**\n   * Publishes a message to the `PubSub`, returning whether the message was published\n   * to the `PubSub`.\n   */\n  publish(value: A): Effect.Effect<boolean>\n\n  /**\n   * Publishes all of the specified messages to the `PubSub`, returning whether they\n   * were published to the `PubSub`.\n   */\n  publishAll(elements: Iterable<A>): Effect.Effect<boolean>\n\n  /**\n   * Subscribes to receive messages from the `PubSub`. The resulting subscription can\n   * be evaluated multiple times within the scope to take a message from the `PubSub`\n   * each time.\n   */\n  readonly subscribe: Effect.Effect<Queue.Dequeue<A>, never, Scope.Scope>\n}\n\n/**\n * Creates a bounded `PubSub` with the back pressure strategy. The `PubSub` will retain\n * messages until they have been taken by all subscribers, applying back\n * pressure to publishers if the `PubSub` is at capacity.\n *\n * For best performance use capacities that are powers of two.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const bounded: <A>(\n  capacity: number | { readonly capacity: number; readonly replay?: number | undefined }\n) => Effect.Effect<PubSub<A>> = internal.bounded\n\n/**\n * Creates a bounded `PubSub` with the dropping strategy. The `PubSub` will drop new\n * messages if the `PubSub` is at capacity.\n *\n * For best performance use capacities that are powers of two.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const dropping: <A>(\n  capacity: number | { readonly capacity: number; readonly replay?: number | undefined }\n) => Effect.Effect<PubSub<A>> = internal.dropping\n\n/**\n * Creates a bounded `PubSub` with the sliding strategy. The `PubSub` will add new\n * messages and drop old messages if the `PubSub` is at capacity.\n *\n * For best performance use capacities that are powers of two.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const sliding: <A>(\n  capacity: number | { readonly capacity: number; readonly replay?: number | undefined }\n) => Effect.Effect<PubSub<A>> = internal.sliding\n\n/**\n * Creates an unbounded `PubSub`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const unbounded: <A>(options?: { readonly replay?: number | undefined }) => Effect.Effect<PubSub<A>> =\n  internal.unbounded\n\n/**\n *  Returns the number of elements the queue can hold.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const capacity: <A>(self: PubSub<A>) => number = internal.capacity\n\n/**\n * Retrieves the size of the queue, which is equal to the number of elements\n * in the queue. This may be negative if fibers are suspended waiting for\n * elements to be added to the queue.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const size: <A>(self: PubSub<A>) => Effect.Effect<number> = internal.size\n\n/**\n * Returns `true` if the `Queue` contains at least one element, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isFull: <A>(self: PubSub<A>) => Effect.Effect<boolean> = internal.isFull\n\n/**\n * Returns `true` if the `Queue` contains zero elements, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isEmpty: <A>(self: PubSub<A>) => Effect.Effect<boolean> = internal.isEmpty\n\n/**\n * Interrupts any fibers that are suspended on `offer` or `take`. Future calls\n * to `offer*` and `take*` will be interrupted immediately.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const shutdown: <A>(self: PubSub<A>) => Effect.Effect<void> = internal.shutdown\n\n/**\n * Returns `true` if `shutdown` has been called, otherwise returns `false`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isShutdown: <A>(self: PubSub<A>) => Effect.Effect<boolean> = internal.isShutdown\n\n/**\n * Waits until the queue is shutdown. The `Effect` returned by this method will\n * not resume until the queue has been shutdown. If the queue is already\n * shutdown, the `Effect` will resume right away.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const awaitShutdown: <A>(self: PubSub<A>) => Effect.Effect<void> = internal.awaitShutdown\n\n/**\n * Publishes a message to the `PubSub`, returning whether the message was published\n * to the `PubSub`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const publish: {\n  /**\n   * Publishes a message to the `PubSub`, returning whether the message was published\n   * to the `PubSub`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(value: A): (self: PubSub<A>) => Effect.Effect<boolean>\n  /**\n   * Publishes a message to the `PubSub`, returning whether the message was published\n   * to the `PubSub`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: PubSub<A>, value: A): Effect.Effect<boolean>\n} = internal.publish\n\n/**\n * Publishes all of the specified messages to the `PubSub`, returning whether they\n * were published to the `PubSub`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const publishAll: {\n  /**\n   * Publishes all of the specified messages to the `PubSub`, returning whether they\n   * were published to the `PubSub`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(elements: Iterable<A>): (self: PubSub<A>) => Effect.Effect<boolean>\n  /**\n   * Publishes all of the specified messages to the `PubSub`, returning whether they\n   * were published to the `PubSub`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: PubSub<A>, elements: Iterable<A>): Effect.Effect<boolean>\n} = internal.publishAll\n\n/**\n * Subscribes to receive messages from the `PubSub`. The resulting subscription can\n * be evaluated multiple times within the scope to take a message from the `PubSub`\n * each time.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const subscribe: <A>(self: PubSub<A>) => Effect.Effect<Queue.Dequeue<A>, never, Scope.Scope> = internal.subscribe\n"],"names":["internal","bounded","dropping","sliding","unbounded","capacity","size","isFull","isEmpty","shutdown","isShutdown","awaitShutdown","publish","publishAll","subscribe"],"mappings":";;;;;;;;;;;;;;;;AAIA,OAAO,KAAKA,QAAQ,MAAM,sBAAsB;;AA4CzC,MAAMC,OAAO,GAEYD,QAAQ,0MAACC,OAAO;AAWzC,MAAMC,QAAQ,GAEWF,QAAQ,0MAACE,QAAQ;AAW1C,MAAMC,OAAO,GAEYH,QAAQ,0MAACG,OAAO;AAQzC,MAAMC,SAAS,GACpBJ,QAAQ,0MAACI,SAAS;AAQb,MAAMC,QAAQ,GAAmCL,QAAQ,0MAACK,QAAQ;AAUlE,MAAMC,IAAI,GAAkDN,QAAQ,0MAACM,IAAI;AASzE,MAAMC,MAAM,GAAmDP,QAAQ,0MAACO,MAAM;AAQ9E,MAAMC,OAAO,GAAmDR,QAAQ,0MAACQ,OAAO;AAShF,MAAMC,QAAQ,GAAgDT,QAAQ,0MAACS,QAAQ;AAQ/E,MAAMC,UAAU,GAAmDV,QAAQ,0MAACU,UAAU;AAUtF,MAAMC,aAAa,GAAgDX,QAAQ,0MAACW,aAAa;AASzF,MAAMC,OAAO,GAiBhBZ,QAAQ,0MAACY,OAAO;AASb,MAAMC,UAAU,GAiBnBb,QAAQ,0MAACa,UAAU;AAUhB,MAAMC,SAAS,GAAgFd,QAAQ,0MAACc,SAAS","ignoreList":[0]}},
    {"offset": {"line": 17017, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17023, "column": 0}, "map": {"version":3,"file":"Queue.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Queue.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Chunk from \"./Chunk.js\"\nimport type * as Deferred from \"./Deferred.js\"\nimport type * as Effect from \"./Effect.js\"\nimport * as internal from \"./internal/queue.js\"\nimport type * as MutableQueue from \"./MutableQueue.js\"\nimport type * as MutableRef from \"./MutableRef.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type * as Types from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const EnqueueTypeId: unique symbol = internal.EnqueueTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type EnqueueTypeId = typeof EnqueueTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const DequeueTypeId: unique symbol = internal.DequeueTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type DequeueTypeId = typeof DequeueTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const QueueStrategyTypeId: unique symbol = internal.QueueStrategyTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type QueueStrategyTypeId = typeof QueueStrategyTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const BackingQueueTypeId: unique symbol = internal.BackingQueueTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type BackingQueueTypeId = typeof BackingQueueTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Queue<in out A> extends Enqueue<A>, Dequeue<A> {\n  /** @internal */\n  readonly queue: BackingQueue<A>\n  /** @internal */\n  readonly takers: MutableQueue.MutableQueue<Deferred.Deferred<A>>\n  /** @internal */\n  readonly shutdownHook: Deferred.Deferred<void>\n  /** @internal */\n  readonly shutdownFlag: MutableRef.MutableRef<boolean>\n  /** @internal */\n  readonly strategy: Strategy<A>\n\n  readonly [Unify.typeSymbol]?: unknown\n  readonly [Unify.unifySymbol]?: QueueUnify<this>\n  readonly [Unify.ignoreSymbol]?: QueueUnifyIgnore\n}\n\n/**\n * @category models\n * @since 3.8.0\n */\nexport interface QueueUnify<A extends { [Unify.typeSymbol]?: any }> extends DequeueUnify<A> {\n  Queue?: () => Extract<A[Unify.typeSymbol], Queue<any>>\n}\n\n/**\n * @category models\n * @since 3.8.0\n */\nexport interface QueueUnifyIgnore extends DequeueUnifyIgnore {\n  Dequeue?: true\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Enqueue<in A> extends Queue.EnqueueVariance<A>, BaseQueue, Pipeable {\n  /**\n   * Places one value in the queue.\n   */\n  offer(value: A): Effect.Effect<boolean>\n\n  /**\n   * Places one value in the queue when possible without needing the fiber runtime.\n   */\n  unsafeOffer(value: A): boolean\n\n  /**\n   * For Bounded Queue: uses the `BackPressure` Strategy, places the values in\n   * the queue and always returns true. If the queue has reached capacity, then\n   * the fiber performing the `offerAll` will be suspended until there is room\n   * in the queue.\n   *\n   * For Unbounded Queue: Places all values in the queue and returns true.\n   *\n   * For Sliding Queue: uses `Sliding` Strategy If there is room in the queue,\n   * it places the values otherwise it removes the old elements and enqueues the\n   * new ones. Always returns true.\n   *\n   * For Dropping Queue: uses `Dropping` Strategy, It places the values in the\n   * queue but if there is no room it will not enqueue them and return false.\n   */\n  offerAll(iterable: Iterable<A>): Effect.Effect<boolean>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Dequeue<out A> extends Effect.Effect<A>, Queue.DequeueVariance<A>, BaseQueue {\n  /**\n   * Takes the oldest value in the queue. If the queue is empty, this will return\n   * a computation that resumes when an item has been added to the queue.\n   */\n  readonly take: Effect.Effect<A>\n\n  /**\n   * Takes all the values in the queue and returns the values. If the queue is\n   * empty returns an empty collection.\n   */\n  readonly takeAll: Effect.Effect<Chunk.Chunk<A>>\n\n  /**\n   * Takes up to max number of values from the queue.\n   */\n  takeUpTo(max: number): Effect.Effect<Chunk.Chunk<A>>\n\n  /**\n   * Takes a number of elements from the queue between the specified minimum and\n   * maximum. If there are fewer than the minimum number of elements available,\n   * suspends until at least the minimum number of elements have been collected.\n   */\n  takeBetween(min: number, max: number): Effect.Effect<Chunk.Chunk<A>>\n\n  readonly [Unify.typeSymbol]?: unknown\n  readonly [Unify.unifySymbol]?: DequeueUnify<this>\n  readonly [Unify.ignoreSymbol]?: DequeueUnifyIgnore\n}\n\n/**\n * @category models\n * @since 3.8.0\n */\nexport interface DequeueUnify<A extends { [Unify.typeSymbol]?: any }> extends Effect.EffectUnify<A> {\n  Dequeue?: () => A[Unify.typeSymbol] extends Dequeue<infer A0> | infer _ ? Dequeue<A0> : never\n}\n\n/**\n * @category models\n * @since 3.8.0\n */\nexport interface DequeueUnifyIgnore extends Effect.EffectUnifyIgnore {\n  Effect?: true\n}\n\n/**\n * The base interface that all `Queue`s must implement.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface BaseQueue {\n  /**\n   * Returns the number of elements the queue can hold.\n   */\n  capacity(): number\n\n  /**\n   * Returns false if shutdown has been called.\n   */\n  isActive(): boolean\n\n  /**\n   * Retrieves the size of the queue, which is equal to the number of elements\n   * in the queue. This may be negative if fibers are suspended waiting for\n   * elements to be added to the queue.\n   */\n  readonly size: Effect.Effect<number>\n\n  /**\n   * Retrieves the size of the queue, which is equal to the number of elements\n   * in the queue. This may be negative if fibers are suspended waiting for\n   * elements to be added to the queue. Returns None if shutdown has been called\n   */\n  unsafeSize(): Option.Option<number>\n\n  /**\n   * Returns `true` if the `Queue` contains at least one element, `false`\n   * otherwise.\n   */\n  readonly isFull: Effect.Effect<boolean>\n\n  /**\n   * Returns `true` if the `Queue` contains zero elements, `false` otherwise.\n   */\n  readonly isEmpty: Effect.Effect<boolean>\n\n  /**\n   * Interrupts any fibers that are suspended on `offer` or `take`. Future calls\n   * to `offer*` and `take*` will be interrupted immediately.\n   */\n  readonly shutdown: Effect.Effect<void>\n\n  /**\n   * Returns `true` if `shutdown` has been called, otherwise returns `false`.\n   */\n  readonly isShutdown: Effect.Effect<boolean>\n\n  /**\n   * Waits until the queue is shutdown. The `Effect` returned by this method will\n   * not resume until the queue has been shutdown. If the queue is already\n   * shutdown, the `Effect` will resume right away.\n   */\n  readonly awaitShutdown: Effect.Effect<void>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Strategy<in out A> extends Queue.StrategyVariance<A> {\n  /**\n   * Returns the number of surplus values that were unable to be added to the\n   * `Queue`\n   */\n  surplusSize(): number\n\n  /**\n   * Determines how the `Queue.Strategy` should shut down when the `Queue` is\n   * shut down.\n   */\n  readonly shutdown: Effect.Effect<void>\n\n  /**\n   * Determines the behavior of the `Queue.Strategy` when there are surplus\n   * values that could not be added to the `Queue` following an `offer`\n   * operation.\n   */\n  handleSurplus(\n    iterable: Iterable<A>,\n    queue: BackingQueue<A>,\n    takers: MutableQueue.MutableQueue<Deferred.Deferred<A>>,\n    isShutdown: MutableRef.MutableRef<boolean>\n  ): Effect.Effect<boolean>\n\n  /**\n   * It is called when the backing queue is empty but there are some\n   * takers that can be completed\n   */\n  onCompleteTakersWithEmptyQueue(\n    takers: MutableQueue.MutableQueue<Deferred.Deferred<A>>\n  ): void\n\n  /**\n   * Determines the behavior of the `Queue.Strategy` when the `Queue` has empty\n   * slots following a `take` operation.\n   */\n  unsafeOnQueueEmptySpace(\n    queue: BackingQueue<A>,\n    takers: MutableQueue.MutableQueue<Deferred.Deferred<A>>\n  ): void\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface BackingQueue<in out A> extends Queue.BackingQueueVariance<A> {\n  /**\n   * Dequeues an element from the queue.\n   * Returns either an element from the queue, or the `def` param.\n   */\n  poll<Def>(def: Def): A | Def\n  /**\n   * Dequeues up to `limit` elements from the queue.\n   */\n  pollUpTo(limit: number): Chunk.Chunk<A>\n  /**\n   * Enqueues a collection of values into the queue.\n   *\n   * Returns a `Chunk` of the values that were **not** able to be enqueued.\n   */\n  offerAll(elements: Iterable<A>): Chunk.Chunk<A>\n  /**\n   * Offers an element to the queue.\n   *\n   * Returns whether the enqueue was successful or not.\n   */\n  offer(element: A): boolean\n  /**\n   * The **maximum** number of elements that a queue can hold.\n   *\n   * **Note**: unbounded queues can still implement this interface with\n   * `capacity = Infinity`.\n   */\n  capacity(): number\n  /**\n   * Returns the number of elements currently in the queue\n   */\n  length(): number\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Queue {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface EnqueueVariance<in A> {\n    readonly [EnqueueTypeId]: {\n      readonly _In: Types.Contravariant<A>\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface DequeueVariance<out A> {\n    readonly [DequeueTypeId]: {\n      readonly _Out: Types.Covariant<A>\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface StrategyVariance<in out A> {\n    readonly [QueueStrategyTypeId]: {\n      readonly _A: Types.Invariant<A>\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface BackingQueueVariance<in out A> {\n    readonly [BackingQueueTypeId]: {\n      readonly _A: Types.Invariant<A>\n    }\n  }\n}\n\n/**\n * Returns `true` if the specified value is a `Queue`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isQueue: (u: unknown) => u is Queue<unknown> = internal.isQueue\n\n/**\n * Returns `true` if the specified value is a `Dequeue`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isDequeue: (u: unknown) => u is Dequeue<unknown> = internal.isDequeue\n\n/**\n * Returns `true` if the specified value is a `Enqueue`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isEnqueue: (u: unknown) => u is Enqueue<unknown> = internal.isEnqueue\n\n/**\n * @since 2.0.0\n * @category strategies\n */\nexport const backPressureStrategy: <A>() => Strategy<A> = internal.backPressureStrategy\n\n/**\n * @since 2.0.0\n * @category strategies\n */\nexport const droppingStrategy: <A>() => Strategy<A> = internal.droppingStrategy\n\n/**\n * @since 2.0.0\n * @category strategies\n */\nexport const slidingStrategy: <A>() => Strategy<A> = internal.slidingStrategy\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <A>(queue: BackingQueue<A>, strategy: Strategy<A>) => Effect.Effect<Queue<A>> = internal.make\n\n/**\n * Makes a new bounded `Queue`. When the capacity of the queue is reached, any\n * additional calls to `offer` will be suspended until there is more room in\n * the queue.\n *\n * **Note**: When possible use only power of 2 capacities; this will provide\n * better performance by utilising an optimised version of the underlying\n * `RingBuffer`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const bounded: <A>(requestedCapacity: number) => Effect.Effect<Queue<A>> = internal.bounded\n\n/**\n * Makes a new bounded `Queue` with the dropping strategy.\n *\n * When the capacity of the queue is reached, new elements will be dropped and the\n * old elements will remain.\n *\n * **Note**: When possible use only power of 2 capacities; this will provide\n * better performance by utilising an optimised version of the underlying\n * `RingBuffer`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const dropping: <A>(requestedCapacity: number) => Effect.Effect<Queue<A>> = internal.dropping\n\n/**\n * Makes a new bounded `Queue` with the sliding strategy.\n *\n * When the capacity of the queue is reached, new elements will be added and the\n * old elements will be dropped.\n *\n * **Note**: When possible use only power of 2 capacities; this will provide\n * better performance by utilising an optimised version of the underlying\n * `RingBuffer`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const sliding: <A>(requestedCapacity: number) => Effect.Effect<Queue<A>> = internal.sliding\n\n/**\n * Creates a new unbounded `Queue`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const unbounded: <A>() => Effect.Effect<Queue<A>> = internal.unbounded\n\n/**\n * Returns the number of elements the queue can hold.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const capacity: <A>(self: Dequeue<A> | Enqueue<A>) => number = internal.capacity\n\n/**\n * Retrieves the size of the queue, which is equal to the number of elements\n * in the queue. This may be negative if fibers are suspended waiting for\n * elements to be added to the queue.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const size: <A>(self: Dequeue<A> | Enqueue<A>) => Effect.Effect<number> = internal.size\n\n/**\n * Returns `true` if the `Queue` contains zero elements, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isEmpty: <A>(self: Dequeue<A> | Enqueue<A>) => Effect.Effect<boolean> = internal.isEmpty\n\n/**\n * Returns `true` if the `Queue` contains at least one element, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isFull: <A>(self: Dequeue<A> | Enqueue<A>) => Effect.Effect<boolean> = internal.isFull\n\n/**\n * Returns `true` if `shutdown` has been called, otherwise returns `false`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isShutdown: <A>(self: Dequeue<A> | Enqueue<A>) => Effect.Effect<boolean> = internal.isShutdown\n\n/**\n * Waits until the queue is shutdown. The `Effect` returned by this method will\n * not resume until the queue has been shutdown. If the queue is already\n * shutdown, the `Effect` will resume right away.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const awaitShutdown: <A>(self: Dequeue<A> | Enqueue<A>) => Effect.Effect<void> = internal.awaitShutdown\n\n/**\n * Interrupts any fibers that are suspended on `offer` or `take`. Future calls\n * to `offer*` and `take*` will be interrupted immediately.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const shutdown: <A>(self: Dequeue<A> | Enqueue<A>) => Effect.Effect<void> = internal.shutdown\n\n/**\n * Places one value in the queue.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const offer: {\n  /**\n   * Places one value in the queue.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(value: A): (self: Enqueue<A>) => Effect.Effect<boolean>\n  /**\n   * Places one value in the queue.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: Enqueue<A>, value: A): Effect.Effect<boolean>\n} = internal.offer\n\n/**\n * Places one value in the queue.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const unsafeOffer: {\n  /**\n   * Places one value in the queue.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(value: A): (self: Enqueue<A>) => boolean\n  /**\n   * Places one value in the queue.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: Enqueue<A>, value: A): boolean\n} = internal.unsafeOffer\n\n/**\n * For Bounded Queue: uses the `BackPressure` Strategy, places the values in\n * the queue and always returns true. If the queue has reached capacity, then\n * the fiber performing the `offerAll` will be suspended until there is room\n * in the queue.\n *\n * For Unbounded Queue: Places all values in the queue and returns true.\n *\n * For Sliding Queue: uses `Sliding` Strategy If there is room in the queue,\n * it places the values otherwise it removes the old elements and enqueues the\n * new ones. Always returns true.\n *\n * For Dropping Queue: uses `Dropping` Strategy, It places the values in the\n * queue but if there is no room it will not enqueue them and return false.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const offerAll: {\n  /**\n   * For Bounded Queue: uses the `BackPressure` Strategy, places the values in\n   * the queue and always returns true. If the queue has reached capacity, then\n   * the fiber performing the `offerAll` will be suspended until there is room\n   * in the queue.\n   *\n   * For Unbounded Queue: Places all values in the queue and returns true.\n   *\n   * For Sliding Queue: uses `Sliding` Strategy If there is room in the queue,\n   * it places the values otherwise it removes the old elements and enqueues the\n   * new ones. Always returns true.\n   *\n   * For Dropping Queue: uses `Dropping` Strategy, It places the values in the\n   * queue but if there is no room it will not enqueue them and return false.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(iterable: Iterable<A>): (self: Enqueue<A>) => Effect.Effect<boolean>\n  /**\n   * For Bounded Queue: uses the `BackPressure` Strategy, places the values in\n   * the queue and always returns true. If the queue has reached capacity, then\n   * the fiber performing the `offerAll` will be suspended until there is room\n   * in the queue.\n   *\n   * For Unbounded Queue: Places all values in the queue and returns true.\n   *\n   * For Sliding Queue: uses `Sliding` Strategy If there is room in the queue,\n   * it places the values otherwise it removes the old elements and enqueues the\n   * new ones. Always returns true.\n   *\n   * For Dropping Queue: uses `Dropping` Strategy, It places the values in the\n   * queue but if there is no room it will not enqueue them and return false.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: Enqueue<A>, iterable: Iterable<A>): Effect.Effect<boolean>\n} = internal.offerAll\n\n/**\n * Returns the first value in the `Queue` as a `Some<A>`, or `None` if the queue\n * is empty.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const poll: <A>(self: Dequeue<A>) => Effect.Effect<Option.Option<A>> = internal.poll\n\n/**\n * Takes the oldest value in the queue. If the queue is empty, this will return\n * a computation that resumes when an item has been added to the queue.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const take: <A>(self: Dequeue<A>) => Effect.Effect<A> = internal.take\n\n/**\n * Takes all the values in the queue and returns the values. If the queue is\n * empty returns an empty collection.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const takeAll: <A>(self: Dequeue<A>) => Effect.Effect<Chunk.Chunk<A>> = internal.takeAll\n\n/**\n * Takes up to max number of values from the queue.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const takeUpTo: {\n  /**\n   * Takes up to max number of values from the queue.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (max: number): <A>(self: Dequeue<A>) => Effect.Effect<Chunk.Chunk<A>>\n  /**\n   * Takes up to max number of values from the queue.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: Dequeue<A>, max: number): Effect.Effect<Chunk.Chunk<A>>\n} = internal.takeUpTo\n\n/**\n * Takes a number of elements from the queue between the specified minimum and\n * maximum. If there are fewer than the minimum number of elements available,\n * suspends until at least the minimum number of elements have been collected.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const takeBetween: {\n  /**\n   * Takes a number of elements from the queue between the specified minimum and\n   * maximum. If there are fewer than the minimum number of elements available,\n   * suspends until at least the minimum number of elements have been collected.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (min: number, max: number): <A>(self: Dequeue<A>) => Effect.Effect<Chunk.Chunk<A>>\n  /**\n   * Takes a number of elements from the queue between the specified minimum and\n   * maximum. If there are fewer than the minimum number of elements available,\n   * suspends until at least the minimum number of elements have been collected.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: Dequeue<A>, min: number, max: number): Effect.Effect<Chunk.Chunk<A>>\n} = internal.takeBetween\n\n/**\n * Takes the specified number of elements from the queue. If there are fewer\n * than the specified number of elements available, it suspends until they\n * become available.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const takeN: {\n  /**\n   * Takes the specified number of elements from the queue. If there are fewer\n   * than the specified number of elements available, it suspends until they\n   * become available.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (n: number): <A>(self: Dequeue<A>) => Effect.Effect<Chunk.Chunk<A>>\n  /**\n   * Takes the specified number of elements from the queue. If there are fewer\n   * than the specified number of elements available, it suspends until they\n   * become available.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: Dequeue<A>, n: number): Effect.Effect<Chunk.Chunk<A>>\n} = internal.takeN\n"],"names":["internal","EnqueueTypeId","DequeueTypeId","QueueStrategyTypeId","BackingQueueTypeId","isQueue","isDequeue","isEnqueue","backPressureStrategy","droppingStrategy","slidingStrategy","make","bounded","dropping","sliding","unbounded","capacity","size","isEmpty","isFull","isShutdown","awaitShutdown","shutdown","offer","unsafeOffer","offerAll","poll","take","takeAll","takeUpTo","takeBetween","takeN"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,OAAO,KAAKA,QAAQ,MAAM,qBAAqB;;AAYxC,MAAMC,aAAa,GAAkBD,QAAQ,yMAACC,aAAa;AAY3D,MAAMC,aAAa,GAAkBF,QAAQ,yMAACE,aAAa;AAY3D,MAAMC,mBAAmB,GAAkBH,QAAQ,yMAACG,mBAAmB;AAYvE,MAAMC,kBAAkB,GAAkBJ,QAAQ,yMAACI,kBAAkB;AAsUrE,MAAMC,OAAO,GAAwCL,QAAQ,yMAACK,OAAO;AAQrE,MAAMC,SAAS,GAA0CN,QAAQ,yMAACM,SAAS;AAQ3E,MAAMC,SAAS,GAA0CP,QAAQ,yMAACO,SAAS;AAM3E,MAAMC,oBAAoB,GAAyBR,QAAQ,yMAACQ,oBAAoB;AAMhF,MAAMC,gBAAgB,GAAyBT,QAAQ,yMAACS,gBAAgB;AAMxE,MAAMC,eAAe,GAAyBV,QAAQ,yMAACU,eAAe;AAMtE,MAAMC,IAAI,GAAkFX,QAAQ,yMAACW,IAAI;AAczG,MAAMC,OAAO,GAA8DZ,QAAQ,yMAACY,OAAO;AAe3F,MAAMC,QAAQ,GAA8Db,QAAQ,yMAACa,QAAQ;AAe7F,MAAMC,OAAO,GAA8Dd,QAAQ,yMAACc,OAAO;AAQ3F,MAAMC,SAAS,GAAqCf,QAAQ,yMAACe,SAAS;AAQtE,MAAMC,QAAQ,GAAiDhB,QAAQ,yMAACgB,QAAQ;AAUhF,MAAMC,IAAI,GAAgEjB,QAAQ,yMAACiB,IAAI;AAQvF,MAAMC,OAAO,GAAiElB,QAAQ,yMAACkB,OAAO;AAS9F,MAAMC,MAAM,GAAiEnB,QAAQ,yMAACmB,MAAM;AAQ5F,MAAMC,UAAU,GAAiEpB,QAAQ,yMAACoB,UAAU;AAUpG,MAAMC,aAAa,GAA8DrB,QAAQ,yMAACqB,aAAa;AASvG,MAAMC,QAAQ,GAA8DtB,QAAQ,yMAACsB,QAAQ;AAQ7F,MAAMC,KAAK,GAedvB,QAAQ,yMAACuB,KAAK;AAQX,MAAMC,WAAW,GAepBxB,QAAQ,yMAACwB,WAAW;AAoBjB,MAAMC,QAAQ,GAuCjBzB,QAAQ,yMAACyB,QAAQ;AASd,MAAMC,IAAI,GAA6D1B,QAAQ,yMAAC0B,IAAI;AASpF,MAAMC,IAAI,GAA8C3B,QAAQ,yMAAC2B,IAAI;AASrE,MAAMC,OAAO,GAA2D5B,QAAQ,yMAAC4B,OAAO;AAQxF,MAAMC,QAAQ,GAejB7B,QAAQ,yMAAC6B,QAAQ;AAUd,MAAMC,WAAW,GAmBpB9B,QAAQ,yMAAC8B,WAAW;AAUjB,MAAMC,KAAK,GAmBd/B,QAAQ,yMAAC+B,KAAK","ignoreList":[0]}},
    {"offset": {"line": 17089, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17095, "column": 0}, "map": {"version":3,"file":"FiberRef.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/FiberRef.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Cause from \"./Cause.js\"\nimport type * as Chunk from \"./Chunk.js\"\nimport type * as Context from \"./Context.js\"\nimport type * as Differ from \"./Differ.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport type * as HashMap from \"./HashMap.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport * as core from \"./internal/core.js\"\nimport * as fiberRuntime from \"./internal/fiberRuntime.js\"\nimport * as query from \"./internal/query.js\"\nimport type * as List from \"./List.js\"\nimport type * as Logger from \"./Logger.js\"\nimport type * as LogLevel from \"./LogLevel.js\"\nimport type * as LogSpan from \"./LogSpan.js\"\nimport type * as MetricLabel from \"./MetricLabel.js\"\nimport type * as Option from \"./Option.js\"\nimport type * as Request from \"./Request.js\"\nimport type * as RuntimeFlags from \"./RuntimeFlags.js\"\nimport * as Scheduler from \"./Scheduler.js\"\nimport type * as Scope from \"./Scope.js\"\nimport type * as Supervisor from \"./Supervisor.js\"\nimport type * as Tracer from \"./Tracer.js\"\nimport type * as Types from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const FiberRefTypeId: unique symbol = core.FiberRefTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type FiberRefTypeId = typeof FiberRefTypeId\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface FiberRef<in out A> extends Effect.Effect<A>, Variance<A> {\n  /** @internal */\n  readonly initial: A\n  /** @internal */\n  diff(oldValue: A, newValue: A): unknown\n  /** @internal */\n  combine(first: unknown, second: unknown): unknown\n  /** @internal */\n  patch(patch: unknown): (oldValue: A) => A\n  /** @internal */\n  readonly fork: unknown\n  /** @internal */\n  join(oldValue: A, newValue: A): A\n  readonly [Unify.typeSymbol]?: unknown\n  readonly [Unify.unifySymbol]?: FiberRefUnify<this>\n  readonly [Unify.ignoreSymbol]?: FiberRefUnifyIgnore\n}\n\n/**\n * @category models\n * @since 3.8.0\n */\nexport interface FiberRefUnify<A extends { [Unify.typeSymbol]?: any }> extends Effect.EffectUnify<A> {\n  FiberRef?: () => Extract<A[Unify.typeSymbol], FiberRef<any>>\n}\n\n/**\n * @category models\n * @since 3.8.0\n */\nexport interface FiberRefUnifyIgnore extends Effect.EffectUnifyIgnore {\n  Effect?: true\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Variance<in out A> {\n  readonly [FiberRefTypeId]: {\n    readonly _A: Types.Invariant<A>\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <A>(\n  initial: A,\n  options?: {\n    readonly fork?: ((a: A) => A) | undefined\n    readonly join?: ((left: A, right: A) => A) | undefined\n  }\n) => Effect.Effect<FiberRef<A>, never, Scope.Scope> = fiberRuntime.fiberRefMake\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const makeWith: <Value>(ref: LazyArg<FiberRef<Value>>) => Effect.Effect<FiberRef<Value>, never, Scope.Scope> =\n  fiberRuntime.fiberRefMakeWith\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const makeContext: <A>(\n  initial: Context.Context<A>\n) => Effect.Effect<FiberRef<Context.Context<A>>, never, Scope.Scope> = fiberRuntime.fiberRefMakeContext\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const makeRuntimeFlags: (\n  initial: RuntimeFlags.RuntimeFlags\n) => Effect.Effect<FiberRef<RuntimeFlags.RuntimeFlags>, never, Scope.Scope> = fiberRuntime.fiberRefMakeRuntimeFlags\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const unsafeMake: <Value>(\n  initial: Value,\n  options?: {\n    readonly fork?: ((a: Value) => Value) | undefined\n    readonly join?: ((left: Value, right: Value) => Value) | undefined\n  }\n) => FiberRef<Value> = core.fiberRefUnsafeMake\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const unsafeMakeHashSet: <A>(initial: HashSet.HashSet<A>) => FiberRef<HashSet.HashSet<A>> =\n  core.fiberRefUnsafeMakeHashSet\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const unsafeMakeContext: <A>(initial: Context.Context<A>) => FiberRef<Context.Context<A>> =\n  core.fiberRefUnsafeMakeContext\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const unsafeMakeSupervisor: (initial: Supervisor.Supervisor<any>) => FiberRef<Supervisor.Supervisor<any>> =\n  fiberRuntime.fiberRefUnsafeMakeSupervisor\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const unsafeMakePatch: <Value, Patch>(\n  initial: Value,\n  options: {\n    readonly differ: Differ.Differ<Value, Patch>\n    readonly fork: Patch\n    readonly join?: ((oldV: Value, newV: Value) => Value) | undefined\n  }\n) => FiberRef<Value> = core.fiberRefUnsafeMakePatch\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const get: <A>(self: FiberRef<A>) => Effect.Effect<A> = core.fiberRefGet\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const getAndSet: {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(value: A): (self: FiberRef<A>) => Effect.Effect<A>\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: FiberRef<A>, value: A): Effect.Effect<A>\n} = core.fiberRefGetAndSet\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const getAndUpdate: {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(f: (a: A) => A): (self: FiberRef<A>) => Effect.Effect<A>\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: FiberRef<A>, f: (a: A) => A): Effect.Effect<A>\n} = core.fiberRefGetAndUpdate\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const getAndUpdateSome: {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(pf: (a: A) => Option.Option<A>): (self: FiberRef<A>) => Effect.Effect<A>\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: FiberRef<A>, pf: (a: A) => Option.Option<A>): Effect.Effect<A>\n} = core.fiberRefGetAndUpdateSome\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const getWith: {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, B, E, R>(f: (a: A) => Effect.Effect<B, E, R>): (self: FiberRef<A>) => Effect.Effect<B, E, R>\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, B, E, R>(self: FiberRef<A>, f: (a: A) => Effect.Effect<B, E, R>): Effect.Effect<B, E, R>\n} = core.fiberRefGetWith\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const set: {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(value: A): (self: FiberRef<A>) => Effect.Effect<void>\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: FiberRef<A>, value: A): Effect.Effect<void>\n} = core.fiberRefSet\n\nconst _delete: <A>(self: FiberRef<A>) => Effect.Effect<void> = core.fiberRefDelete\n\nexport {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  _delete as delete\n}\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const reset: <A>(self: FiberRef<A>) => Effect.Effect<void> = core.fiberRefReset\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const modify: {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, B>(f: (a: A) => readonly [B, A]): (self: FiberRef<A>) => Effect.Effect<B>\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, B>(self: FiberRef<A>, f: (a: A) => readonly [B, A]): Effect.Effect<B>\n} = core.fiberRefModify\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const modifySome: <A, B>(\n  self: FiberRef<A>,\n  def: B,\n  f: (a: A) => Option.Option<readonly [B, A]>\n) => Effect.Effect<B> = core.fiberRefModifySome\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const update: {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(f: (a: A) => A): (self: FiberRef<A>) => Effect.Effect<void>\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: FiberRef<A>, f: (a: A) => A): Effect.Effect<void>\n} = core.fiberRefUpdate\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateSome: {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(pf: (a: A) => Option.Option<A>): (self: FiberRef<A>) => Effect.Effect<void>\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: FiberRef<A>, pf: (a: A) => Option.Option<A>): Effect.Effect<void>\n} = core.fiberRefUpdateSome\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateAndGet: {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(f: (a: A) => A): (self: FiberRef<A>) => Effect.Effect<A>\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: FiberRef<A>, f: (a: A) => A): Effect.Effect<A>\n} = core.fiberRefUpdateAndGet\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateSomeAndGet: {\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(pf: (a: A) => Option.Option<A>): (self: FiberRef<A>) => Effect.Effect<A>\n  /**\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(self: FiberRef<A>, pf: (a: A) => Option.Option<A>): Effect.Effect<A>\n} = core.fiberRefUpdateSomeAndGet\n\n/**\n * @since 2.0.0\n * @category fiberRefs\n */\nexport const currentConcurrency: FiberRef<number | \"unbounded\"> = core.currentConcurrency\n\n/**\n * @since 2.0.0\n * @category fiberRefs\n */\nexport const currentRequestBatchingEnabled: FiberRef<boolean> = core.currentRequestBatching\n\n/**\n * @since 2.0.0\n * @category fiberRefs\n */\nexport const currentRequestCache: FiberRef<Request.Cache> = query.currentCache as any\n\n/**\n * @since 2.0.0\n * @category fiberRefs\n */\nexport const currentRequestCacheEnabled: FiberRef<boolean> = query.currentCacheEnabled\n\n/**\n * @since 2.0.0\n * @category fiberRefs\n */\nexport const currentContext: FiberRef<Context.Context<never>> = core.currentContext\n\n/**\n * @since 2.0.0\n * @category fiberRefs\n */\nexport const currentSchedulingPriority: FiberRef<number> = core.currentSchedulingPriority\n\n/**\n * @since 2.0.0\n * @category fiberRefs\n */\nexport const currentMaxOpsBeforeYield: FiberRef<number> = core.currentMaxOpsBeforeYield\n\n/**\n * @since 2.0.0\n * @category fiberRefs\n */\nexport const unhandledErrorLogLevel: FiberRef<Option.Option<LogLevel.LogLevel>> = core.currentUnhandledErrorLogLevel\n\n/**\n * @since 2.0.0\n * @category fiberRefs\n */\nexport const currentLogAnnotations: FiberRef<HashMap.HashMap<string, unknown>> = core.currentLogAnnotations\n\n/**\n * @since 2.0.0\n * @category fiberRefs\n */\nexport const currentLoggers: FiberRef<HashSet.HashSet<Logger.Logger<unknown, any>>> = fiberRuntime.currentLoggers\n\n/**\n * @since 2.0.0\n * @category fiberRefs\n */\nexport const currentLogLevel: FiberRef<LogLevel.LogLevel> = core.currentLogLevel\n\n/**\n * @since 2.0.0\n * @category fiberRefs\n */\nexport const currentMinimumLogLevel: FiberRef<LogLevel.LogLevel> = fiberRuntime.currentMinimumLogLevel\n\n/**\n * @since 2.0.0\n * @category fiberRefs\n */\nexport const currentLogSpan: FiberRef<List.List<LogSpan.LogSpan>> = core.currentLogSpan\n\n/**\n * @since 2.0.0\n * @category fiberRefs\n */\nexport const currentRuntimeFlags: FiberRef<RuntimeFlags.RuntimeFlags> = fiberRuntime.currentRuntimeFlags\n\n/**\n * @since 2.0.0\n * @category fiberRefs\n */\nexport const currentScheduler: FiberRef<Scheduler.Scheduler> = Scheduler.currentScheduler\n\n/**\n * @since 2.0.0\n * @category fiberRefs\n */\nexport const currentSupervisor: FiberRef<Supervisor.Supervisor<any>> = fiberRuntime.currentSupervisor\n\n/**\n * @since 2.0.0\n * @category fiberRefs\n */\nexport const currentMetricLabels: FiberRef<ReadonlyArray<MetricLabel.MetricLabel>> = core.currentMetricLabels\n\n/**\n * @since 2.0.0\n * @category fiberRefs\n */\nexport const currentTracerEnabled: FiberRef<boolean> = core.currentTracerEnabled\n\n/**\n * @since 2.0.0\n * @category fiberRefs\n */\nexport const currentTracerTimingEnabled: FiberRef<boolean> = core.currentTracerTimingEnabled\n\n/**\n * @since 2.0.0\n * @category fiberRefs\n */\nexport const currentTracerSpanAnnotations: FiberRef<HashMap.HashMap<string, unknown>> =\n  core.currentTracerSpanAnnotations\n\n/**\n * @since 2.0.0\n * @category fiberRefs\n */\nexport const currentTracerSpanLinks: FiberRef<Chunk.Chunk<Tracer.SpanLink>> = core.currentTracerSpanLinks\n\n/**\n * @since 2.0.0\n * @category fiberRefs\n */\nexport const interruptedCause: FiberRef<Cause.Cause<never>> = core.currentInterruptedCause\n"],"names":["core","fiberRuntime","query","Scheduler","FiberRefTypeId","make","fiberRefMake","makeWith","fiberRefMakeWith","makeContext","fiberRefMakeContext","makeRuntimeFlags","fiberRefMakeRuntimeFlags","unsafeMake","fiberRefUnsafeMake","unsafeMakeHashSet","fiberRefUnsafeMakeHashSet","unsafeMakeContext","fiberRefUnsafeMakeContext","unsafeMakeSupervisor","fiberRefUnsafeMakeSupervisor","unsafeMakePatch","fiberRefUnsafeMakePatch","get","fiberRefGet","getAndSet","fiberRefGetAndSet","getAndUpdate","fiberRefGetAndUpdate","getAndUpdateSome","fiberRefGetAndUpdateSome","getWith","fiberRefGetWith","set","fiberRefSet","_delete","fiberRefDelete","delete","reset","fiberRefReset","modify","fiberRefModify","modifySome","fiberRefModifySome","update","fiberRefUpdate","updateSome","fiberRefUpdateSome","updateAndGet","fiberRefUpdateAndGet","updateSomeAndGet","fiberRefUpdateSomeAndGet","currentConcurrency","currentRequestBatchingEnabled","currentRequestBatching","currentRequestCache","currentCache","currentRequestCacheEnabled","currentCacheEnabled","currentContext","currentSchedulingPriority","currentMaxOpsBeforeYield","unhandledErrorLogLevel","currentUnhandledErrorLogLevel","currentLogAnnotations","currentLoggers","currentLogLevel","currentMinimumLogLevel","currentLogSpan","currentRuntimeFlags","currentScheduler","currentSupervisor","currentMetricLabels","currentTracerEnabled","currentTracerTimingEnabled","currentTracerSpanAnnotations","currentTracerSpanLinks","interruptedCause","currentInterruptedCause"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 17198, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17204, "column": 0}, "map": {"version":3,"file":"Runtime.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Runtime.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type { Cause } from \"./Cause.js\"\nimport type * as Context from \"./Context.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Exit from \"./Exit.js\"\nimport type * as Fiber from \"./Fiber.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport type * as FiberRef from \"./FiberRef.js\"\nimport type * as FiberRefs from \"./FiberRefs.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as internal from \"./internal/runtime.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type * as RuntimeFlags from \"./RuntimeFlags.js\"\nimport type { Scheduler } from \"./Scheduler.js\"\nimport type { Scope } from \"./Scope.js\"\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface AsyncFiberException<out A, out E = never> {\n  readonly _tag: \"AsyncFiberException\"\n  readonly fiber: Fiber.RuntimeFiber<A, E>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Cancel<out A, out E = never> {\n  (fiberId?: FiberId.FiberId, options?: RunCallbackOptions<A, E> | undefined): void\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Runtime<in R> extends Pipeable {\n  /**\n   * The context used as initial for forks\n   */\n  readonly context: Context.Context<R>\n  /**\n   * The runtime flags used as initial for forks\n   */\n  readonly runtimeFlags: RuntimeFlags.RuntimeFlags\n  /**\n   * The fiber references used as initial for forks\n   */\n  readonly fiberRefs: FiberRefs.FiberRefs\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface RunForkOptions {\n  readonly scheduler?: Scheduler | undefined\n  readonly updateRefs?: ((refs: FiberRefs.FiberRefs, fiberId: FiberId.Runtime) => FiberRefs.FiberRefs) | undefined\n  readonly immediate?: boolean\n  readonly scope?: Scope\n}\n\n/**\n * Executes the effect using the provided Scheduler or using the global\n * Scheduler if not provided\n *\n * @since 2.0.0\n * @category execution\n */\nexport const runFork: <R>(\n  runtime: Runtime<R>\n) => <A, E>(self: Effect.Effect<A, E, R>, options?: RunForkOptions) => Fiber.RuntimeFiber<A, E> = internal.unsafeFork\n\n/**\n * Executes the effect synchronously returning the exit.\n *\n * This method is effectful and should only be invoked at the edges of your\n * program.\n *\n * @since 2.0.0\n * @category execution\n */\nexport const runSyncExit: <R>(runtime: Runtime<R>) => <A, E>(effect: Effect.Effect<A, E, R>) => Exit.Exit<A, E> =\n  internal.unsafeRunSyncExit\n\n/**\n * Executes the effect synchronously throwing in case of errors or async boundaries.\n *\n * This method is effectful and should only be invoked at the edges of your\n * program.\n *\n * @since 2.0.0\n * @category execution\n */\nexport const runSync: <R>(runtime: Runtime<R>) => <A, E>(effect: Effect.Effect<A, E, R>) => A = internal.unsafeRunSync\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface RunCallbackOptions<in A, in E = never> extends RunForkOptions {\n  readonly onExit?: ((exit: Exit.Exit<A, E>) => void) | undefined\n}\n\n/**\n * Executes the effect asynchronously, eventually passing the exit value to\n * the specified callback.\n *\n * This method is effectful and should only be invoked at the edges of your\n * program.\n *\n * @since 2.0.0\n * @category execution\n */\nexport const runCallback: <R>(\n  runtime: Runtime<R>\n) => <A, E>(\n  effect: Effect.Effect<A, E, R>,\n  options?: RunCallbackOptions<A, E> | undefined\n) => (fiberId?: FiberId.FiberId | undefined, options?: RunCallbackOptions<A, E> | undefined) => void =\n  internal.unsafeRunCallback\n\n/**\n * Runs the `Effect`, returning a JavaScript `Promise` that will be resolved\n * with the value of the effect once the effect has been executed, or will be\n * rejected with the first error or exception throw by the effect.\n *\n * This method is effectful and should only be used at the edges of your\n * program.\n *\n * @since 2.0.0\n * @category execution\n */\nexport const runPromise: <R>(\n  runtime: Runtime<R>\n) => <A, E>(effect: Effect.Effect<A, E, R>, options?: { readonly signal?: AbortSignal } | undefined) => Promise<A> =\n  internal.unsafeRunPromise\n\n/**\n * Runs the `Effect`, returning a JavaScript `Promise` that will be resolved\n * with the `Exit` state of the effect once the effect has been executed.\n *\n * This method is effectful and should only be used at the edges of your\n * program.\n *\n * @since 2.0.0\n * @category execution\n */\nexport const runPromiseExit: <R>(\n  runtime: Runtime<R>\n) => <A, E>(\n  effect: Effect.Effect<A, E, R>,\n  options?: { readonly signal?: AbortSignal } | undefined\n) => Promise<Exit.Exit<A, E>> = internal.unsafeRunPromiseExit\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const defaultRuntime: Runtime<never> = internal.defaultRuntime\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const defaultRuntimeFlags: RuntimeFlags.RuntimeFlags = internal.defaultRuntimeFlags\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <R>(\n  options: {\n    readonly context: Context.Context<R>\n    readonly runtimeFlags: RuntimeFlags.RuntimeFlags\n    readonly fiberRefs: FiberRefs.FiberRefs\n  }\n) => Runtime<R> = internal.make\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const FiberFailureId = Symbol.for(\"effect/Runtime/FiberFailure\")\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type FiberFailureId = typeof FiberFailureId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const FiberFailureCauseId: unique symbol = internal.FiberFailureCauseId\n\n/**\n * @since 2.0.0\n * @category exports\n */\nexport type FiberFailureCauseId = typeof FiberFailureCauseId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface FiberFailure extends Error, Inspectable {\n  readonly [FiberFailureId]: FiberFailureId\n  readonly [FiberFailureCauseId]: Cause<unknown>\n}\n\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isAsyncFiberException: (u: unknown) => u is AsyncFiberException<unknown, unknown> =\n  internal.isAsyncFiberException\n\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isFiberFailure: (u: unknown) => u is FiberFailure = internal.isFiberFailure\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const makeFiberFailure: <E>(cause: Cause<E>) => FiberFailure = internal.fiberFailure\n\n/**\n * @since 2.0.0\n * @category runtime flags\n */\nexport const updateRuntimeFlags: {\n  /**\n   * @since 2.0.0\n   * @category runtime flags\n   */\n  (f: (flags: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags): <R>(self: Runtime<R>) => Runtime<R>\n  /**\n   * @since 2.0.0\n   * @category runtime flags\n   */\n  <R>(\n    self: Runtime<R>,\n    f: (flags: RuntimeFlags.RuntimeFlags) => RuntimeFlags.RuntimeFlags\n  ): Runtime<R>\n} = internal.updateRuntimeFlags\n\n/**\n * @since 2.0.0\n * @category runtime flags\n */\nexport const enableRuntimeFlag: {\n  /**\n   * @since 2.0.0\n   * @category runtime flags\n   */\n  (flag: RuntimeFlags.RuntimeFlag): <R>(self: Runtime<R>) => Runtime<R>\n  /**\n   * @since 2.0.0\n   * @category runtime flags\n   */\n  <R>(self: Runtime<R>, flag: RuntimeFlags.RuntimeFlag): Runtime<R>\n} = internal.enableRuntimeFlag\n\n/**\n * @since 2.0.0\n * @category runtime flags\n */\nexport const disableRuntimeFlag: {\n  /**\n   * @since 2.0.0\n   * @category runtime flags\n   */\n  (flag: RuntimeFlags.RuntimeFlag): <R>(self: Runtime<R>) => Runtime<R>\n  /**\n   * @since 2.0.0\n   * @category runtime flags\n   */\n  <R>(self: Runtime<R>, flag: RuntimeFlags.RuntimeFlag): Runtime<R>\n} = internal.disableRuntimeFlag\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const updateContext: {\n  /**\n   * @since 2.0.0\n   * @category context\n   */\n  <R, R2>(f: (context: Context.Context<R>) => Context.Context<R2>): (self: Runtime<R>) => Runtime<R2>\n  /**\n   * @since 2.0.0\n   * @category context\n   */\n  <R, R2>(self: Runtime<R>, f: (context: Context.Context<R>) => Context.Context<R2>): Runtime<R2>\n} = internal.updateContext\n\n/**\n * @since 2.0.0\n * @category context\n * @example\n * import { Context, Runtime } from \"effect\"\n *\n * class Name extends Context.Tag(\"Name\")<Name, string>() {}\n *\n * const runtime: Runtime.Runtime<Name> = Runtime.defaultRuntime.pipe(\n *   Runtime.provideService(Name, \"John\")\n * )\n */\nexport const provideService: {\n  /**\n   * @since 2.0.0\n   * @category context\n   * @example\n   * import { Context, Runtime } from \"effect\"\n   *\n   * class Name extends Context.Tag(\"Name\")<Name, string>() {}\n   *\n   * const runtime: Runtime.Runtime<Name> = Runtime.defaultRuntime.pipe(\n   *   Runtime.provideService(Name, \"John\")\n   * )\n   */\n  <I, S>(tag: Context.Tag<I, S>, service: S): <R>(self: Runtime<R>) => Runtime<I | R>\n  /**\n   * @since 2.0.0\n   * @category context\n   * @example\n   * import { Context, Runtime } from \"effect\"\n   *\n   * class Name extends Context.Tag(\"Name\")<Name, string>() {}\n   *\n   * const runtime: Runtime.Runtime<Name> = Runtime.defaultRuntime.pipe(\n   *   Runtime.provideService(Name, \"John\")\n   * )\n   */\n  <R, I, S>(self: Runtime<R>, tag: Context.Tag<I, S>, service: S): Runtime<R | I>\n} = internal.provideService\n\n/**\n * @since 2.0.0\n * @category fiber refs\n */\nexport const updateFiberRefs: {\n  /**\n   * @since 2.0.0\n   * @category fiber refs\n   */\n  (f: (fiberRefs: FiberRefs.FiberRefs) => FiberRefs.FiberRefs): <R>(self: Runtime<R>) => Runtime<R>\n  /**\n   * @since 2.0.0\n   * @category fiber refs\n   */\n  <R>(\n    self: Runtime<R>,\n    f: (fiberRefs: FiberRefs.FiberRefs) => FiberRefs.FiberRefs\n  ): Runtime<R>\n} = internal.updateFiberRefs\n\n/**\n * @since 2.0.0\n * @category fiber refs\n * @example\n * import { Effect, FiberRef, Runtime } from \"effect\"\n *\n * const ref = FiberRef.unsafeMake(0)\n *\n * const updatedRuntime = Runtime.defaultRuntime.pipe(\n *   Runtime.setFiberRef(ref, 1)\n * )\n *\n * // returns 1\n * const result = Runtime.runSync(updatedRuntime)(FiberRef.get(ref))\n */\nexport const setFiberRef: {\n  /**\n   * @since 2.0.0\n   * @category fiber refs\n   * @example\n   * import { Effect, FiberRef, Runtime } from \"effect\"\n   *\n   * const ref = FiberRef.unsafeMake(0)\n   *\n   * const updatedRuntime = Runtime.defaultRuntime.pipe(\n   *   Runtime.setFiberRef(ref, 1)\n   * )\n   *\n   * // returns 1\n   * const result = Runtime.runSync(updatedRuntime)(FiberRef.get(ref))\n   */\n  <A>(fiberRef: FiberRef.FiberRef<A>, value: A): <R>(self: Runtime<R>) => Runtime<R>\n  /**\n   * @since 2.0.0\n   * @category fiber refs\n   * @example\n   * import { Effect, FiberRef, Runtime } from \"effect\"\n   *\n   * const ref = FiberRef.unsafeMake(0)\n   *\n   * const updatedRuntime = Runtime.defaultRuntime.pipe(\n   *   Runtime.setFiberRef(ref, 1)\n   * )\n   *\n   * // returns 1\n   * const result = Runtime.runSync(updatedRuntime)(FiberRef.get(ref))\n   */\n  <R, A>(self: Runtime<R>, fiberRef: FiberRef.FiberRef<A>, value: A): Runtime<R>\n} = internal.setFiberRef\n\n/**\n * @since 2.0.0\n * @category fiber refs\n * @example\n * import { Effect, FiberRef, Runtime } from \"effect\"\n *\n * const ref = FiberRef.unsafeMake(0)\n *\n * const updatedRuntime = Runtime.defaultRuntime.pipe(\n *   Runtime.setFiberRef(ref, 1),\n *   Runtime.deleteFiberRef(ref)\n * )\n *\n * // returns 0\n * const result = Runtime.runSync(updatedRuntime)(FiberRef.get(ref))\n */\nexport const deleteFiberRef: {\n  /**\n   * @since 2.0.0\n   * @category fiber refs\n   * @example\n   * import { Effect, FiberRef, Runtime } from \"effect\"\n   *\n   * const ref = FiberRef.unsafeMake(0)\n   *\n   * const updatedRuntime = Runtime.defaultRuntime.pipe(\n   *   Runtime.setFiberRef(ref, 1),\n   *   Runtime.deleteFiberRef(ref)\n   * )\n   *\n   * // returns 0\n   * const result = Runtime.runSync(updatedRuntime)(FiberRef.get(ref))\n   */\n  <A>(fiberRef: FiberRef.FiberRef<A>): <R>(self: Runtime<R>) => Runtime<R>\n  /**\n   * @since 2.0.0\n   * @category fiber refs\n   * @example\n   * import { Effect, FiberRef, Runtime } from \"effect\"\n   *\n   * const ref = FiberRef.unsafeMake(0)\n   *\n   * const updatedRuntime = Runtime.defaultRuntime.pipe(\n   *   Runtime.setFiberRef(ref, 1),\n   *   Runtime.deleteFiberRef(ref)\n   * )\n   *\n   * // returns 0\n   * const result = Runtime.runSync(updatedRuntime)(FiberRef.get(ref))\n   */\n  <R, A>(self: Runtime<R>, fiberRef: FiberRef.FiberRef<A>): Runtime<R>\n} = internal.deleteFiberRef\n"],"names":["internal","runFork","unsafeFork","runSyncExit","unsafeRunSyncExit","runSync","unsafeRunSync","runCallback","unsafeRunCallback","runPromise","unsafeRunPromise","runPromiseExit","unsafeRunPromiseExit","defaultRuntime","defaultRuntimeFlags","make","FiberFailureId","Symbol","for","FiberFailureCauseId","isAsyncFiberException","isFiberFailure","makeFiberFailure","fiberFailure","updateRuntimeFlags","enableRuntimeFlag","disableRuntimeFlag","updateContext","provideService","updateFiberRefs","setFiberRef","deleteFiberRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAYA,OAAO,KAAKA,QAAQ,MAAM,uBAAuB;;AA4D1C,MAAMC,OAAO,GAE8ED,QAAQ,2MAACE,UAAU;AAW9G,MAAMC,WAAW,GACtBH,QAAQ,2MAACI,iBAAiB;AAWrB,MAAMC,OAAO,GAA4EL,QAAQ,2MAACM,aAAa;AAoB/G,MAAMC,WAAW,GAMtBP,QAAQ,2MAACQ,iBAAiB;AAarB,MAAMC,UAAU,GAGrBT,QAAQ,2MAACU,gBAAgB;AAYpB,MAAMC,cAAc,GAKKX,QAAQ,2MAACY,oBAAoB;AAMtD,MAAMC,cAAc,GAAmBb,QAAQ,2MAACa,cAAc;AAM9D,MAAMC,mBAAmB,GAA8Bd,QAAQ,2MAACc,mBAAmB;AAMnF,MAAMC,IAAI,GAMCf,QAAQ,2MAACe,IAAI;AAMxB,MAAMC,cAAc,GAAA,WAAA,GAAGC,MAAM,CAACC,GAAG,CAAC,6BAA6B,CAAC;AAWhE,MAAMC,mBAAmB,GAAkBnB,QAAQ,2MAACmB,mBAAmB;AAqBvE,MAAMC,qBAAqB,GAChCpB,QAAQ,2MAACoB,qBAAqB;AAMzB,MAAMC,cAAc,GAAsCrB,QAAQ,2MAACqB,cAAc;AAMjF,MAAMC,gBAAgB,GAAyCtB,QAAQ,2MAACuB,YAAY;AAMpF,MAAMC,kBAAkB,GAc3BxB,QAAQ,2MAACwB,kBAAkB;AAMxB,MAAMC,iBAAiB,GAW1BzB,QAAQ,2MAACyB,iBAAiB;AAMvB,MAAMC,kBAAkB,GAW3B1B,QAAQ,2MAAC0B,kBAAkB;AAMxB,MAAMC,aAAa,GAWtB3B,QAAQ,2MAAC2B,aAAa;AAcnB,MAAMC,cAAc,GA2BvB5B,QAAQ,2MAAC4B,cAAc;AAMpB,MAAMC,eAAe,GAcxB7B,QAAQ,2MAAC6B,eAAe;AAiBrB,MAAMC,WAAW,GAiCpB9B,QAAQ,2MAAC8B,WAAW;AAkBjB,MAAMC,cAAc,GAmCvB/B,QAAQ,2MAAC+B,cAAc","ignoreList":[0]}},
    {"offset": {"line": 17252, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17258, "column": 0}, "map": {"version":3,"file":"RcRef.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/RcRef.ts"],"sourcesContent":["/**\n * @since 3.5.0\n */\nimport type * as Duration from \"./Duration.js\"\nimport type * as Effect from \"./Effect.js\"\nimport * as internal from \"./internal/rcRef.js\"\nimport type * as Readable from \"./Readable.js\"\nimport type * as Scope from \"./Scope.js\"\nimport type * as Types from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\n\n/**\n * @since 3.5.0\n * @category type ids\n */\nexport const TypeId: unique symbol = internal.TypeId\n\n/**\n * @since 3.5.0\n * @category type ids\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 3.5.0\n * @category models\n */\nexport interface RcRef<out A, out E = never>\n  extends Effect.Effect<A, E, Scope.Scope>, Readable.Readable<A, E, Scope.Scope>\n{\n  readonly [TypeId]: RcRef.Variance<A, E>\n  readonly [Unify.typeSymbol]?: unknown\n  readonly [Unify.unifySymbol]?: RcRefUnify<this>\n  readonly [Unify.ignoreSymbol]?: RcRefUnifyIgnore\n}\n\n/**\n * @category models\n * @since 3.8.0\n */\nexport interface RcRefUnify<A extends { [Unify.typeSymbol]?: any }> extends Effect.EffectUnify<A> {\n  RcRef?: () => A[Unify.typeSymbol] extends RcRef<infer A0, infer E0> | infer _ ? RcRef<A0, E0>\n    : never\n}\n\n/**\n * @category models\n * @since 3.8.0\n */\nexport interface RcRefUnifyIgnore extends Effect.EffectUnifyIgnore {\n  Effect?: true\n}\n/**\n * @since 3.5.0\n * @category models\n */\nexport declare namespace RcRef {\n  /**\n   * @since 3.5.0\n   * @category models\n   */\n  export interface Variance<A, E> {\n    readonly _A: Types.Covariant<A>\n    readonly _E: Types.Covariant<E>\n  }\n}\n\n/**\n * Create an `RcRef` from an acquire `Effect`.\n *\n * An RcRef wraps a reference counted resource that can be acquired and released\n * multiple times.\n *\n * The resource is lazily acquired on the first call to `get` and released when\n * the last reference is released.\n *\n * @since 3.5.0\n * @category constructors\n * @example\n * import { Effect, RcRef } from \"effect\"\n *\n * Effect.gen(function*() {\n *   const ref = yield* RcRef.make({\n *     acquire: Effect.acquireRelease(\n *       Effect.succeed(\"foo\"),\n *       () => Effect.log(\"release foo\")\n *     )\n *   })\n *\n *   // will only acquire the resource once, and release it\n *   // when the scope is closed\n *   yield* RcRef.get(ref).pipe(\n *     Effect.andThen(RcRef.get(ref)),\n *     Effect.scoped\n *   )\n * })\n */\nexport const make: <A, E, R>(\n  options: {\n    readonly acquire: Effect.Effect<A, E, R>\n    /**\n     * When the reference count reaches zero, the resource will be released\n     * after this duration.\n     */\n    readonly idleTimeToLive?: Duration.DurationInput | undefined\n  }\n) => Effect.Effect<RcRef<A, E>, never, R | Scope.Scope> = internal.make\n\n/**\n * @since 3.5.0\n * @category combinators\n */\nexport const get: <A, E>(self: RcRef<A, E>) => Effect.Effect<A, E, Scope.Scope> = internal.get\n"],"names":["internal","TypeId","make","get"],"mappings":";;;;;AAKA,OAAO,KAAKA,QAAQ,MAAM,qBAAqB;;AAUxC,MAAMC,MAAM,GAAkBD,QAAQ,yMAACC,MAAM;AAkF7C,MAAMC,IAAI,GASyCF,QAAQ,yMAACE,IAAI;AAMhE,MAAMC,GAAG,GAAkEH,QAAQ,yMAACG,GAAG","ignoreList":[0]}},
    {"offset": {"line": 17268, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17274, "column": 0}, "map": {"version":3,"file":"TPubSub.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/TPubSub.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Effect from \"./Effect.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport * as internal from \"./internal/stm/tPubSub.js\"\nimport type * as tQueue from \"./internal/stm/tQueue.js\"\nimport type * as Scope from \"./Scope.js\"\nimport type * as STM from \"./STM.js\"\nimport type * as TQueue from \"./TQueue.js\"\nimport type * as TRef from \"./TRef.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const TPubSubTypeId: unique symbol = internal.TPubSubTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type TPubSubTypeId = typeof TPubSubTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface TPubSub<in out A> extends TQueue.TEnqueue<A> {\n  readonly [TPubSubTypeId]: {\n    readonly _A: Types.Invariant<A>\n  }\n}\n/**\n * @internal\n * @since 2.0.0\n */\nexport interface TPubSub<in out A> {\n  /** @internal */\n  readonly pubsubSize: TRef.TRef<number>\n  /** @internal */\n  readonly publisherHead: TRef.TRef<TRef.TRef<internal.Node<A> | undefined>>\n  /** @internal */\n  readonly publisherTail: TRef.TRef<TRef.TRef<internal.Node<A> | undefined> | undefined>\n  /** @internal */\n  readonly requestedCapacity: number\n  /** @internal */\n  readonly strategy: tQueue.TQueueStrategy\n  /** @internal */\n  readonly subscriberCount: TRef.TRef<number>\n  /** @internal */\n  readonly subscribers: TRef.TRef<HashSet.HashSet<TRef.TRef<TRef.TRef<internal.Node<A>> | undefined>>>\n}\n\n/**\n * Waits until the `TPubSub` is shutdown. The `STM` returned by this method will\n * not resume until the queue has been shutdown. If the `TPubSub` is already\n * shutdown, the `STM` will resume right away.\n *\n * @since 2.0.0\n * @category mutations\n */\nexport const awaitShutdown: <A>(self: TPubSub<A>) => STM.STM<void> = internal.awaitShutdown\n\n/**\n * Creates a bounded `TPubSub` with the back pressure strategy. The `TPubSub` will retain\n * messages until they have been taken by all subscribers, applying back\n * pressure to publishers if the `TPubSub` is at capacity.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const bounded: <A>(requestedCapacity: number) => STM.STM<TPubSub<A>> = internal.bounded\n\n/**\n * Returns the number of elements the `TPubSub` can hold.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const capacity: <A>(self: TPubSub<A>) => number = internal.capacity\n\n/**\n * Creates a bounded `TPubSub` with the dropping strategy. The `TPubSub` will drop new\n * messages if the `TPubSub` is at capacity.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const dropping: <A>(requestedCapacity: number) => STM.STM<TPubSub<A>> = internal.dropping\n\n/**\n * Returns `true` if the `TPubSub` contains zero elements, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isEmpty: <A>(self: TPubSub<A>) => STM.STM<boolean> = internal.isEmpty\n\n/**\n * Returns `true` if the `TPubSub` contains at least one element, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isFull: <A>(self: TPubSub<A>) => STM.STM<boolean> = internal.isFull\n\n/**\n * Interrupts any fibers that are suspended on `offer` or `take`. Future calls\n * to `offer*` and `take*` will be interrupted immediately.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const shutdown: <A>(self: TPubSub<A>) => STM.STM<void> = internal.shutdown\n\n/**\n * Returns `true` if `shutdown` has been called, otherwise returns `false`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isShutdown: <A>(self: TPubSub<A>) => STM.STM<boolean> = internal.isShutdown\n\n/**\n * Publishes a message to the `TPubSub`, returning whether the message was published\n * to the `TPubSub`.\n *\n * @since 2.0.0\n * @category mutations\n */\nexport const publish: {\n  /**\n   * Publishes a message to the `TPubSub`, returning whether the message was published\n   * to the `TPubSub`.\n   *\n   * @since 2.0.0\n   * @category mutations\n   */\n  <A>(value: A): (self: TPubSub<A>) => STM.STM<boolean>\n  /**\n   * Publishes a message to the `TPubSub`, returning whether the message was published\n   * to the `TPubSub`.\n   *\n   * @since 2.0.0\n   * @category mutations\n   */\n  <A>(self: TPubSub<A>, value: A): STM.STM<boolean>\n} = internal.publish\n\n/**\n * Publishes all of the specified messages to the `TPubSub`, returning whether they\n * were published to the `TPubSub`.\n *\n * @since 2.0.0\n * @category mutations\n */\nexport const publishAll: {\n  /**\n   * Publishes all of the specified messages to the `TPubSub`, returning whether they\n   * were published to the `TPubSub`.\n   *\n   * @since 2.0.0\n   * @category mutations\n   */\n  <A>(iterable: Iterable<A>): (self: TPubSub<A>) => STM.STM<boolean>\n  /**\n   * Publishes all of the specified messages to the `TPubSub`, returning whether they\n   * were published to the `TPubSub`.\n   *\n   * @since 2.0.0\n   * @category mutations\n   */\n  <A>(self: TPubSub<A>, iterable: Iterable<A>): STM.STM<boolean>\n} = internal.publishAll\n\n/**\n * Retrieves the size of the `TPubSub`, which is equal to the number of elements\n * in the `TPubSub`. This may be negative if fibers are suspended waiting for\n * elements to be added to the `TPubSub`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const size: <A>(self: TPubSub<A>) => STM.STM<number> = internal.size\n\n/**\n * Creates a bounded `TPubSub` with the sliding strategy. The `TPubSub` will add new\n * messages and drop old messages if the `TPubSub` is at capacity.\n *\n * For best performance use capacities that are powers of two.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const sliding: <A>(requestedCapacity: number) => STM.STM<TPubSub<A>> = internal.sliding\n\n/**\n * Subscribes to receive messages from the `TPubSub`. The resulting subscription can\n * be evaluated multiple times to take a message from the `TPubSub` each time. The\n * caller is responsible for unsubscribing from the `TPubSub` by shutting down the\n * queue.\n *\n * @since 2.0.0\n * @category mutations\n */\nexport const subscribe: <A>(self: TPubSub<A>) => STM.STM<TQueue.TDequeue<A>> = internal.subscribe\n\n/**\n * Subscribes to receive messages from the `TPubSub`. The resulting subscription can\n * be evaluated multiple times within the scope to take a message from the `TPubSub`\n * each time.\n *\n * @since 2.0.0\n * @category mutations\n */\nexport const subscribeScoped: <A>(self: TPubSub<A>) => Effect.Effect<TQueue.TDequeue<A>, never, Scope.Scope> =\n  internal.subscribeScoped\n\n/**\n * Creates an unbounded `TPubSub`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const unbounded: <A>() => STM.STM<TPubSub<A>> = internal.unbounded\n"],"names":["internal","TPubSubTypeId","awaitShutdown","bounded","capacity","dropping","isEmpty","isFull","shutdown","isShutdown","publish","publishAll","size","sliding","subscribe","subscribeScoped","unbounded"],"mappings":";;;;;;;;;;;;;;;;;;AAKA,OAAO,KAAKA,QAAQ,MAAM,2BAA2B;;AAY9C,MAAMC,aAAa,GAAkBD,QAAQ,kNAACC,aAAa;AA8C3D,MAAMC,aAAa,GAA2CF,QAAQ,kNAACE,aAAa;AAUpF,MAAMC,OAAO,GAA0DH,QAAQ,kNAACG,OAAO;AAQvF,MAAMC,QAAQ,GAAoCJ,QAAQ,kNAACI,QAAQ;AASnE,MAAMC,QAAQ,GAA0DL,QAAQ,kNAACK,QAAQ;AAQzF,MAAMC,OAAO,GAA8CN,QAAQ,kNAACM,OAAO;AAS3E,MAAMC,MAAM,GAA8CP,QAAQ,kNAACO,MAAM;AASzE,MAAMC,QAAQ,GAA2CR,QAAQ,kNAACQ,QAAQ;AAQ1E,MAAMC,UAAU,GAA8CT,QAAQ,kNAACS,UAAU;AASjF,MAAMC,OAAO,GAiBhBV,QAAQ,kNAACU,OAAO;AASb,MAAMC,UAAU,GAiBnBX,QAAQ,kNAACW,UAAU;AAUhB,MAAMC,IAAI,GAA6CZ,QAAQ,kNAACY,IAAI;AAWpE,MAAMC,OAAO,GAA0Db,QAAQ,kNAACa,OAAO;AAWvF,MAAMC,SAAS,GAAyDd,QAAQ,kNAACc,SAAS;AAU1F,MAAMC,eAAe,GAC1Bf,QAAQ,kNAACe,eAAe;AAQnB,MAAMC,SAAS,GAAiChB,QAAQ,kNAACgB,SAAS","ignoreList":[0]}},
    {"offset": {"line": 17310, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17316, "column": 0}, "map": {"version":3,"file":"TQueue.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/TQueue.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport * as internal from \"./internal/stm/tQueue.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Predicate } from \"./Predicate.js\"\nimport type * as STM from \"./STM.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const TDequeueTypeId: unique symbol = internal.TDequeueTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type TDequeueTypeId = typeof TDequeueTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const TEnqueueTypeId: unique symbol = internal.TEnqueueTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type TEnqueueTypeId = typeof TEnqueueTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface TQueue<in out A> extends TEnqueue<A>, TDequeue<A> {}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface TEnqueue<in A> extends TQueue.TEnqueueVariance<A>, BaseTQueue {\n  /**\n   * Places one value in the queue.\n   */\n  offer(value: A): STM.STM<boolean>\n\n  /**\n   * For Bounded TQueue: uses the `BackPressure` Strategy, places the values in\n   * the queue and always returns true. If the queue has reached capacity, then\n   * the fiber performing the `offerAll` will be suspended until there is room\n   * in the queue.\n   *\n   * For Unbounded TQueue: Places all values in the queue and returns true.\n   *\n   * For Sliding TQueue: uses `Sliding` Strategy If there is room in the queue,\n   * it places the values otherwise it removes the old elements and enqueues the\n   * new ones. Always returns true.\n   *\n   * For Dropping TQueue: uses `Dropping` Strategy, It places the values in the\n   * queue but if there is no room it will not enqueue them and return false.\n   */\n  offerAll(iterable: Iterable<A>): STM.STM<boolean>\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface TDequeue<out A> extends TQueue.TDequeueVariance<A>, BaseTQueue {\n  /**\n   * Views the next element in the queue without removing it, retrying if the\n   * queue is empty.\n   */\n  readonly peek: STM.STM<A>\n\n  /**\n   * Views the next element in the queue without removing it, returning `None`\n   * if the queue is empty.\n   */\n  readonly peekOption: STM.STM<Option.Option<A>>\n\n  /**\n   * Takes the oldest value in the queue. If the queue is empty, this will return\n   * a computation that resumes when an item has been added to the queue.\n   */\n  readonly take: STM.STM<A>\n\n  /**\n   * Takes all the values in the queue and returns the values. If the queue is\n   * empty returns an empty collection.\n   */\n  readonly takeAll: STM.STM<Array<A>>\n\n  /**\n   * Takes up to max number of values from the queue.\n   */\n  takeUpTo(max: number): STM.STM<Array<A>>\n}\n\n/**\n * The base interface that all `TQueue`s must implement.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface BaseTQueue {\n  /**\n   * Returns the number of elements the queue can hold.\n   */\n  capacity(): number\n\n  /**\n   * Retrieves the size of the queue, which is equal to the number of elements\n   * in the queue. This may be negative if fibers are suspended waiting for\n   * elements to be added to the queue.\n   */\n  readonly size: STM.STM<number>\n\n  /**\n   * Returns `true` if the `TQueue` contains at least one element, `false`\n   * otherwise.\n   */\n  readonly isFull: STM.STM<boolean>\n\n  /**\n   * Returns `true` if the `TQueue` contains zero elements, `false` otherwise.\n   */\n  readonly isEmpty: STM.STM<boolean>\n\n  /**\n   * Interrupts any fibers that are suspended on `offer` or `take`. Future calls\n   * to `offer*` and `take*` will be interrupted immediately.\n   */\n  readonly shutdown: STM.STM<void>\n\n  /**\n   * Returns `true` if `shutdown` has been called, otherwise returns `false`.\n   */\n  readonly isShutdown: STM.STM<boolean>\n\n  /**\n   * Waits until the queue is shutdown. The `STM` returned by this method will\n   * not resume until the queue has been shutdown. If the queue is already\n   * shutdown, the `STM` will resume right away.\n   */\n  readonly awaitShutdown: STM.STM<void>\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace TQueue {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface TEnqueueVariance<in A> {\n    readonly [TEnqueueTypeId]: {\n      readonly _In: Types.Contravariant<A>\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface TDequeueVariance<out A> {\n    readonly [TDequeueTypeId]: {\n      readonly _Out: Types.Covariant<A>\n    }\n  }\n}\n\n/**\n * Returns `true` if the specified value is a `TQueue`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isTQueue: (u: unknown) => u is TQueue<unknown> = internal.isTQueue\n\n/**\n * Returns `true` if the specified value is a `TDequeue`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isTDequeue: (u: unknown) => u is TDequeue<unknown> = internal.isTDequeue\n\n/**\n * Returns `true` if the specified value is a `TEnqueue`, `false` otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isTEnqueue: (u: unknown) => u is TEnqueue<unknown> = internal.isTEnqueue\n\n/**\n * Waits until the queue is shutdown. The `STM` returned by this method will\n * not resume until the queue has been shutdown. If the queue is already\n * shutdown, the `STM` will resume right away.\n *\n * @since 2.0.0\n * @category mutations\n */\nexport const awaitShutdown: <A>(self: TDequeue<A> | TEnqueue<A>) => STM.STM<void> = internal.awaitShutdown\n\n/**\n * Creates a bounded queue with the back pressure strategy. The queue will\n * retain values until they have been taken, applying back pressure to\n * offerors if the queue is at capacity.\n *\n * For best performance use capacities that are powers of two.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const bounded: <A>(requestedCapacity: number) => STM.STM<TQueue<A>> = internal.bounded\n\n/**\n * Returns the number of elements the queue can hold.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const capacity: <A>(self: TDequeue<A> | TEnqueue<A>) => number = internal.capacity\n\n/**\n * Creates a bounded queue with the dropping strategy. The queue will drop new\n * values if the queue is at capacity.\n *\n * For best performance use capacities that are powers of two.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const dropping: <A>(requestedCapacity: number) => STM.STM<TQueue<A>> = internal.dropping\n\n/**\n * Returns `true` if the `TQueue` contains zero elements, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isEmpty: <A>(self: TDequeue<A> | TEnqueue<A>) => STM.STM<boolean> = internal.isEmpty\n\n/**\n * Returns `true` if the `TQueue` contains at least one element, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isFull: <A>(self: TDequeue<A> | TEnqueue<A>) => STM.STM<boolean> = internal.isFull\n\n/**\n * Returns `true` if `shutdown` has been called, otherwise returns `false`.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isShutdown: <A>(self: TDequeue<A> | TEnqueue<A>) => STM.STM<boolean> = internal.isShutdown\n\n/**\n * Places one value in the queue.\n *\n * @since 2.0.0\n * @category mutations\n */\nexport const offer: {\n  /**\n   * Places one value in the queue.\n   *\n   * @since 2.0.0\n   * @category mutations\n   */\n  <A>(value: A): (self: TEnqueue<A>) => STM.STM<void>\n  /**\n   * Places one value in the queue.\n   *\n   * @since 2.0.0\n   * @category mutations\n   */\n  <A>(self: TEnqueue<A>, value: A): STM.STM<void>\n} = internal.offer\n\n/**\n * For Bounded TQueue: uses the `BackPressure` Strategy, places the values in\n * the queue and always returns true. If the queue has reached capacity, then\n * the fiber performing the `offerAll` will be suspended until there is room\n * in the queue.\n *\n * For Unbounded TQueue: Places all values in the queue and returns true.\n *\n * For Sliding TQueue: uses `Sliding` Strategy If there is room in the queue,\n * it places the values otherwise it removes the old elements and enqueues the\n * new ones. Always returns true.\n *\n * For Dropping TQueue: uses `Dropping` Strategy, It places the values in the\n * queue but if there is no room it will not enqueue them and return false.\n *\n * @since 2.0.0\n * @category mutations\n */\nexport const offerAll: {\n  /**\n   * For Bounded TQueue: uses the `BackPressure` Strategy, places the values in\n   * the queue and always returns true. If the queue has reached capacity, then\n   * the fiber performing the `offerAll` will be suspended until there is room\n   * in the queue.\n   *\n   * For Unbounded TQueue: Places all values in the queue and returns true.\n   *\n   * For Sliding TQueue: uses `Sliding` Strategy If there is room in the queue,\n   * it places the values otherwise it removes the old elements and enqueues the\n   * new ones. Always returns true.\n   *\n   * For Dropping TQueue: uses `Dropping` Strategy, It places the values in the\n   * queue but if there is no room it will not enqueue them and return false.\n   *\n   * @since 2.0.0\n   * @category mutations\n   */\n  <A>(iterable: Iterable<A>): (self: TEnqueue<A>) => STM.STM<boolean>\n  /**\n   * For Bounded TQueue: uses the `BackPressure` Strategy, places the values in\n   * the queue and always returns true. If the queue has reached capacity, then\n   * the fiber performing the `offerAll` will be suspended until there is room\n   * in the queue.\n   *\n   * For Unbounded TQueue: Places all values in the queue and returns true.\n   *\n   * For Sliding TQueue: uses `Sliding` Strategy If there is room in the queue,\n   * it places the values otherwise it removes the old elements and enqueues the\n   * new ones. Always returns true.\n   *\n   * For Dropping TQueue: uses `Dropping` Strategy, It places the values in the\n   * queue but if there is no room it will not enqueue them and return false.\n   *\n   * @since 2.0.0\n   * @category mutations\n   */\n  <A>(self: TEnqueue<A>, iterable: Iterable<A>): STM.STM<boolean>\n} = internal.offerAll\n\n/**\n * Views the next element in the queue without removing it, retrying if the\n * queue is empty.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const peek: <A>(self: TDequeue<A>) => STM.STM<A> = internal.peek\n\n/**\n * Views the next element in the queue without removing it, returning `None`\n * if the queue is empty.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const peekOption: <A>(self: TDequeue<A>) => STM.STM<Option.Option<A>> = internal.peekOption\n\n/**\n * Takes a single element from the queue, returning `None` if the queue is\n * empty.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const poll: <A>(self: TDequeue<A>) => STM.STM<Option.Option<A>> = internal.poll\n\n/**\n * Drops elements from the queue while they do not satisfy the predicate,\n * taking and returning the first element that does satisfy the predicate.\n * Retries if no elements satisfy the predicate.\n *\n * @since 2.0.0\n * @category mutations\n */\nexport const seek: {\n  /**\n   * Drops elements from the queue while they do not satisfy the predicate,\n   * taking and returning the first element that does satisfy the predicate.\n   * Retries if no elements satisfy the predicate.\n   *\n   * @since 2.0.0\n   * @category mutations\n   */\n  <A>(predicate: Predicate<A>): (self: TDequeue<A>) => STM.STM<A>\n  /**\n   * Drops elements from the queue while they do not satisfy the predicate,\n   * taking and returning the first element that does satisfy the predicate.\n   * Retries if no elements satisfy the predicate.\n   *\n   * @since 2.0.0\n   * @category mutations\n   */\n  <A>(self: TDequeue<A>, predicate: Predicate<A>): STM.STM<A>\n} = internal.seek\n\n/**\n * Interrupts any fibers that are suspended on `offer` or `take`. Future calls\n * to `offer*` and `take*` will be interrupted immediately.\n *\n * @since 2.0.0\n * @category mutations\n */\nexport const shutdown: <A>(self: TDequeue<A> | TEnqueue<A>) => STM.STM<void> = internal.shutdown\n\n/**\n * Retrieves the size of the queue, which is equal to the number of elements\n * in the queue. This may be negative if fibers are suspended waiting for\n * elements to be added to the queue.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const size: <A>(self: TDequeue<A> | TEnqueue<A>) => STM.STM<number> = internal.size\n\n/**\n * Creates a bounded queue with the sliding strategy. The queue will add new\n * values and drop old values if the queue is at capacity.\n *\n * For best performance use capacities that are powers of two.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const sliding: <A>(requestedCapacity: number) => STM.STM<TQueue<A>> = internal.sliding\n\n/**\n * Takes the oldest value in the queue. If the queue is empty, this will return\n * a computation that resumes when an item has been added to the queue.\n *\n * @since 2.0.0\n * @category mutations\n */\nexport const take: <A>(self: TDequeue<A>) => STM.STM<A> = internal.take\n\n/**\n * Takes all the values in the queue and returns the values. If the queue is\n * empty returns an empty collection.\n *\n * @since 2.0.0\n * @category mutations\n */\nexport const takeAll: <A>(self: TDequeue<A>) => STM.STM<Array<A>> = internal.takeAll\n\n/**\n * Takes a number of elements from the queue between the specified minimum and\n * maximum. If there are fewer than the minimum number of elements available,\n * retries until at least the minimum number of elements have been collected.\n *\n * @since 2.0.0\n * @category mutations\n */\nexport const takeBetween: {\n  /**\n   * Takes a number of elements from the queue between the specified minimum and\n   * maximum. If there are fewer than the minimum number of elements available,\n   * retries until at least the minimum number of elements have been collected.\n   *\n   * @since 2.0.0\n   * @category mutations\n   */\n  (min: number, max: number): <A>(self: TDequeue<A>) => STM.STM<Array<A>>\n  /**\n   * Takes a number of elements from the queue between the specified minimum and\n   * maximum. If there are fewer than the minimum number of elements available,\n   * retries until at least the minimum number of elements have been collected.\n   *\n   * @since 2.0.0\n   * @category mutations\n   */\n  <A>(self: TDequeue<A>, min: number, max: number): STM.STM<Array<A>>\n} = internal.takeBetween\n\n/**\n * Takes the specified number of elements from the queue. If there are fewer\n * than the specified number of elements available, it retries until they\n * become available.\n *\n * @since 2.0.0\n * @category mutations\n */\nexport const takeN: {\n  /**\n   * Takes the specified number of elements from the queue. If there are fewer\n   * than the specified number of elements available, it retries until they\n   * become available.\n   *\n   * @since 2.0.0\n   * @category mutations\n   */\n  (n: number): <A>(self: TDequeue<A>) => STM.STM<Array<A>>\n  /**\n   * Takes the specified number of elements from the queue. If there are fewer\n   * than the specified number of elements available, it retries until they\n   * become available.\n   *\n   * @since 2.0.0\n   * @category mutations\n   */\n  <A>(self: TDequeue<A>, n: number): STM.STM<Array<A>>\n} = internal.takeN\n\n/**\n * Takes up to max number of values from the queue.\n *\n * @since 2.0.0\n * @category mutations\n */\nexport const takeUpTo: {\n  /**\n   * Takes up to max number of values from the queue.\n   *\n   * @since 2.0.0\n   * @category mutations\n   */\n  (max: number): <A>(self: TDequeue<A>) => STM.STM<Array<A>>\n  /**\n   * Takes up to max number of values from the queue.\n   *\n   * @since 2.0.0\n   * @category mutations\n   */\n  <A>(self: TDequeue<A>, max: number): STM.STM<Array<A>>\n} = internal.takeUpTo\n\n/**\n * Creates an unbounded queue.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const unbounded: <A>() => STM.STM<TQueue<A>> = internal.unbounded\n"],"names":["internal","TDequeueTypeId","TEnqueueTypeId","isTQueue","isTDequeue","isTEnqueue","awaitShutdown","bounded","capacity","dropping","isEmpty","isFull","isShutdown","offer","offerAll","peek","peekOption","poll","seek","shutdown","size","sliding","take","takeAll","takeBetween","takeN","takeUpTo","unbounded"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,OAAO,KAAKA,QAAQ,MAAM,0BAA0B;;AAU7C,MAAMC,cAAc,GAAkBD,QAAQ,iNAACC,cAAc;AAY7D,MAAMC,cAAc,GAAkBF,QAAQ,iNAACE,cAAc;AA6J7D,MAAMC,QAAQ,GAAyCH,QAAQ,iNAACG,QAAQ;AAQxE,MAAMC,UAAU,GAA2CJ,QAAQ,iNAACI,UAAU;AAQ9E,MAAMC,UAAU,GAA2CL,QAAQ,iNAACK,UAAU;AAU9E,MAAMC,aAAa,GAA0DN,QAAQ,iNAACM,aAAa;AAYnG,MAAMC,OAAO,GAAyDP,QAAQ,iNAACO,OAAO;AAQtF,MAAMC,QAAQ,GAAmDR,QAAQ,iNAACQ,QAAQ;AAWlF,MAAMC,QAAQ,GAAyDT,QAAQ,iNAACS,QAAQ;AAQxF,MAAMC,OAAO,GAA6DV,QAAQ,iNAACU,OAAO;AAS1F,MAAMC,MAAM,GAA6DX,QAAQ,iNAACW,MAAM;AAQxF,MAAMC,UAAU,GAA6DZ,QAAQ,iNAACY,UAAU;AAQhG,MAAMC,KAAK,GAedb,QAAQ,iNAACa,KAAK;AAoBX,MAAMC,QAAQ,GAuCjBd,QAAQ,iNAACc,QAAQ;AASd,MAAMC,IAAI,GAAyCf,QAAQ,iNAACe,IAAI;AAShE,MAAMC,UAAU,GAAwDhB,QAAQ,iNAACgB,UAAU;AAS3F,MAAMC,IAAI,GAAwDjB,QAAQ,iNAACiB,IAAI;AAU/E,MAAMC,IAAI,GAmBblB,QAAQ,iNAACkB,IAAI;AASV,MAAMC,QAAQ,GAA0DnB,QAAQ,iNAACmB,QAAQ;AAUzF,MAAMC,IAAI,GAA4DpB,QAAQ,iNAACoB,IAAI;AAWnF,MAAMC,OAAO,GAAyDrB,QAAQ,iNAACqB,OAAO;AAStF,MAAMC,IAAI,GAAyCtB,QAAQ,iNAACsB,IAAI;AAShE,MAAMC,OAAO,GAAgDvB,QAAQ,iNAACuB,OAAO;AAU7E,MAAMC,WAAW,GAmBpBxB,QAAQ,iNAACwB,WAAW;AAUjB,MAAMC,KAAK,GAmBdzB,QAAQ,iNAACyB,KAAK;AAQX,MAAMC,QAAQ,GAejB1B,QAAQ,iNAAC0B,QAAQ;AAQd,MAAMC,SAAS,GAAgC3B,QAAQ,iNAAC2B,SAAS","ignoreList":[0]}},
    {"offset": {"line": 17376, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17382, "column": 0}, "map": {"version":3,"file":"StreamHaltStrategy.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/StreamHaltStrategy.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport * as internal from \"./internal/stream/haltStrategy.js\"\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type HaltStrategy = Left | Right | Both | Either\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport type HaltStrategyInput = HaltStrategy | \"left\" | \"right\" | \"both\" | \"either\"\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Left {\n  readonly _tag: \"Left\"\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Right {\n  readonly _tag: \"Right\"\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Both {\n  readonly _tag: \"Both\"\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Either {\n  readonly _tag: \"Either\"\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Left: HaltStrategy = internal.Left\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Right: HaltStrategy = internal.Right\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Both: HaltStrategy = internal.Both\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Either: HaltStrategy = internal.Either\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const fromInput: (input: HaltStrategyInput) => HaltStrategy = internal.fromInput\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isLeft: (self: HaltStrategy) => self is Left = internal.isLeft\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isRight: (self: HaltStrategy) => self is Right = internal.isRight\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isBoth: (self: HaltStrategy) => self is Both = internal.isBoth\n\n/**\n * @since 2.0.0\n * @category refinements\n */\nexport const isEither: (self: HaltStrategy) => self is Either = internal.isEither\n\n/**\n * Folds over the specified `HaltStrategy` using the provided case functions.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const match: {\n  /**\n   * Folds over the specified `HaltStrategy` using the provided case functions.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <Z>(\n    options: {\n      readonly onLeft: () => Z\n      readonly onRight: () => Z\n      readonly onBoth: () => Z\n      readonly onEither: () => Z\n    }\n  ): (self: HaltStrategy) => Z\n  /**\n   * Folds over the specified `HaltStrategy` using the provided case functions.\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <Z>(\n    self: HaltStrategy,\n    options: {\n      readonly onLeft: () => Z\n      readonly onRight: () => Z\n      readonly onBoth: () => Z\n      readonly onEither: () => Z\n    }\n  ): Z\n} = internal.match\n"],"names":["internal","Left","Right","Both","Either","fromInput","isLeft","isRight","isBoth","isEither","match"],"mappings":"AAAA;;;;;;;;;;;;;;AAGA,OAAO,KAAKA,QAAQ,MAAM,mCAAmC;;AAkDtD,MAAMC,IAAI,GAAiBD,QAAQ,0NAACC,IAAI;AAMxC,MAAMC,KAAK,GAAiBF,QAAQ,0NAACE,KAAK;AAM1C,MAAMC,IAAI,GAAiBH,QAAQ,0NAACG,IAAI;AAMxC,MAAMC,MAAM,GAAiBJ,QAAQ,0NAACI,MAAM;AAM5C,MAAMC,SAAS,GAA+CL,QAAQ,0NAACK,SAAS;AAMhF,MAAMC,MAAM,GAAyCN,QAAQ,0NAACM,MAAM;AAMpE,MAAMC,OAAO,GAA0CP,QAAQ,0NAACO,OAAO;AAMvE,MAAMC,MAAM,GAAyCR,QAAQ,0NAACQ,MAAM;AAMpE,MAAMC,QAAQ,GAA2CT,QAAQ,0NAACS,QAAQ;AAQ1E,MAAMC,KAAK,GA8BdV,QAAQ,0NAACU,KAAK","ignoreList":[0]}},
    {"offset": {"line": 17408, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17414, "column": 0}, "map": {"version":3,"file":"MergeDecision.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/MergeDecision.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Effect from \"./Effect.js\"\nimport type * as Exit from \"./Exit.js\"\nimport * as internal from \"./internal/channel/mergeDecision.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const MergeDecisionTypeId: unique symbol = internal.MergeDecisionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type MergeDecisionTypeId = typeof MergeDecisionTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface MergeDecision<out R, in E0, in Z0, out E, out Z> extends MergeDecision.Variance<R, E0, Z0, E, Z> {}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace MergeDecision {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<out R, in E0, in Z0, out E, out Z> {\n    readonly [MergeDecisionTypeId]: {\n      _R: Types.Covariant<R>\n      _E0: Types.Contravariant<E0>\n      _Z0: Types.Contravariant<Z0>\n      _E: Types.Covariant<E>\n      _Z: Types.Covariant<Z>\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Done: <Z, E, R>(effect: Effect.Effect<Z, E, R>) => MergeDecision<R, unknown, unknown, E, Z> = internal.Done\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Await: <R, E0, Z0, E, Z>(\n  f: (exit: Exit.Exit<Z0, E0>) => Effect.Effect<Z, E, R>\n) => MergeDecision<R, E0, Z0, E, Z> = internal.Await\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const AwaitConst: <Z, E, R>(effect: Effect.Effect<Z, E, R>) => MergeDecision<R, unknown, unknown, E, Z> =\n  internal.AwaitConst\n\n/**\n * Returns `true` if the specified value is a `MergeDecision`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isMergeDecision: (u: unknown) => u is MergeDecision<unknown, unknown, unknown, unknown, unknown> =\n  internal.isMergeDecision\n\n/**\n * @since 2.0.0\n * @category folding\n */\nexport const match: {\n  /**\n   * @since 2.0.0\n   * @category folding\n   */\n  <R, E0, Z0, E, Z, Z2>(\n    options: {\n      readonly onDone: (effect: Effect.Effect<Z, E, R>) => Z2\n      readonly onAwait: (f: (exit: Exit.Exit<Z0, E0>) => Effect.Effect<Z, E, R>) => Z2\n    }\n  ): (self: MergeDecision<R, E0, Z0, E, Z>) => Z2\n  /**\n   * @since 2.0.0\n   * @category folding\n   */\n  <R, E0, Z0, E, Z, Z2>(\n    self: MergeDecision<R, E0, Z0, E, Z>,\n    options: {\n      readonly onDone: (effect: Effect.Effect<Z, E, R>) => Z2\n      readonly onAwait: (f: (exit: Exit.Exit<Z0, E0>) => Effect.Effect<Z, E, R>) => Z2\n    }\n  ): Z2\n} = internal.match\n"],"names":["internal","MergeDecisionTypeId","Done","Await","AwaitConst","isMergeDecision","match"],"mappings":";;;;;;;;AAKA,OAAO,KAAKA,QAAQ,MAAM,qCAAqC;;AAOxD,MAAMC,mBAAmB,GAAkBD,QAAQ,4NAACC,mBAAmB;AAqCvE,MAAMC,IAAI,GAA0FF,QAAQ,4NAACE,IAAI;AAMjH,MAAMC,KAAK,GAEoBH,QAAQ,4NAACG,KAAK;AAM7C,MAAMC,UAAU,GACrBJ,QAAQ,4NAACI,UAAU;AASd,MAAMC,eAAe,GAC1BL,QAAQ,4NAACK,eAAe;AAMnB,MAAMC,KAAK,GAsBdN,QAAQ,4NAACM,KAAK","ignoreList":[0]}},
    {"offset": {"line": 17430, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 17436, "column": 0}, "map": {"version":3,"file":"Stream.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Stream.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Cause from \"./Cause.js\"\nimport type * as Channel from \"./Channel.js\"\nimport type * as Chunk from \"./Chunk.js\"\nimport type * as Context from \"./Context.js\"\nimport type * as Deferred from \"./Deferred.js\"\nimport type * as Duration from \"./Duration.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Either from \"./Either.js\"\nimport type * as Exit from \"./Exit.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport type * as GroupBy from \"./GroupBy.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport * as _groupBy from \"./internal/groupBy.js\"\nimport * as internal from \"./internal/stream.js\"\nimport type * as Layer from \"./Layer.js\"\nimport type * as Option from \"./Option.js\"\nimport type * as Order from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport type * as PubSub from \"./PubSub.js\"\nimport type * as Queue from \"./Queue.js\"\nimport type { Runtime } from \"./Runtime.js\"\nimport type * as Schedule from \"./Schedule.js\"\nimport type * as Scope from \"./Scope.js\"\nimport type * as Sink from \"./Sink.js\"\nimport type * as Emit from \"./StreamEmit.js\"\nimport type * as HaltStrategy from \"./StreamHaltStrategy.js\"\nimport type * as Take from \"./Take.js\"\nimport type { TPubSub } from \"./TPubSub.js\"\nimport type { TDequeue } from \"./TQueue.js\"\nimport type * as Tracer from \"./Tracer.js\"\nimport type { Covariant, NoInfer, TupleOf } from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const StreamTypeId: unique symbol = internal.StreamTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type StreamTypeId = typeof StreamTypeId\n\n/**\n * A `Stream<A, E, R>` is a description of a program that, when evaluated, may\n * emit zero or more values of type `A`, may fail with errors of type `E`, and\n * uses an context of type `R`. One way to think of `Stream` is as a\n * `Effect` program that could emit multiple values.\n *\n * `Stream` is a purely functional *pull* based stream. Pull based streams offer\n * inherent laziness and backpressure, relieving users of the need to manage\n * buffers between operators. As an optimization, `Stream` does not emit\n * single values, but rather an array of values. This allows the cost of effect\n * evaluation to be amortized.\n *\n * `Stream` forms a monad on its `A` type parameter, and has error management\n * facilities for its `E` type parameter, modeled similarly to `Effect` (with\n * some adjustments for the multiple-valued nature of `Stream`). These aspects\n * allow for rich and expressive composition of streams.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Stream<out A, out E = never, out R = never> extends Stream.Variance<A, E, R>, Pipeable {\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: StreamUnify<this>\n  [Unify.ignoreSymbol]?: StreamUnifyIgnore\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface StreamUnify<A extends { [Unify.typeSymbol]?: any }> extends Effect.EffectUnify<A> {\n  Stream?: () => A[Unify.typeSymbol] extends Stream<infer A0, infer E0, infer R0> | infer _ ? Stream<A0, E0, R0> : never\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface StreamUnifyIgnore extends Effect.EffectUnifyIgnore {\n  Effect?: true\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\ndeclare module \"./Effect.js\" {\n  interface Effect<A, E, R> extends Stream<A, E, R> {}\n}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface StreamTypeLambda extends TypeLambda {\n  readonly type: Stream<this[\"Target\"], this[\"Out1\"], this[\"Out2\"]>\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Stream {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<out A, out E, out R> {\n    readonly [StreamTypeId]: VarianceStruct<A, E, R>\n  }\n\n  /**\n   * @since 3.4.0\n   * @category models\n   */\n  export interface VarianceStruct<out A, out E, out R> {\n    readonly _A: Covariant<A>\n    readonly _E: Covariant<E>\n    readonly _R: Covariant<R>\n  }\n\n  /**\n   * @since 3.4.0\n   * @category type-level\n   */\n  export type Success<T extends Stream<any, any, any>> = [T] extends [Stream<infer _A, infer _E, infer _R>] ? _A : never\n\n  /**\n   * @since 3.4.0\n   * @category type-level\n   */\n  export type Error<T extends Stream<any, any, any>> = [T] extends [Stream<infer _A, infer _E, infer _R>] ? _E : never\n\n  /**\n   * @since 3.4.0\n   * @category type-level\n   */\n  export type Context<T extends Stream<any, any, any>> = [T] extends [Stream<infer _A, infer _E, infer _R>] ? _R : never\n\n  /**\n   * @since 2.0.0\n   * @category models\n   * @deprecated use Types.TupleOf instead\n   */\n  export type DynamicTuple<T, N extends number> = N extends N ? number extends N ? Array<T> : DynamicTupleOf<T, N, []>\n    : never\n\n  /**\n   * @since 2.0.0\n   * @category models\n   * @deprecated use Types.TupleOf instead\n   */\n  export type DynamicTupleOf<T, N extends number, R extends Array<unknown>> = R[\"length\"] extends N ? R\n    : DynamicTupleOf<T, N, [T, ...R]>\n}\n\n/**\n * The default chunk size used by the various combinators and constructors of\n * `Stream`.\n *\n * @since 2.0.0\n * @category constants\n */\nexport const DefaultChunkSize: number = internal.DefaultChunkSize\n\n/**\n * Collects each underlying Chunk of the stream into a new chunk, and emits it\n * on each pull.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const accumulate: <A, E, R>(self: Stream<A, E, R>) => Stream<Chunk.Chunk<A>, E, R> = internal.accumulate\n\n/**\n * Re-chunks the elements of the stream by accumulating each underlying chunk.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const accumulateChunks: <A, E, R>(self: Stream<A, E, R>) => Stream<A, E, R> = internal.accumulateChunks\n\n/**\n * Creates a stream from a single value that will get cleaned up after the\n * stream is consumed.\n *\n * @example\n * import { Console, Effect, Stream } from \"effect\"\n *\n * // Simulating File operations\n * const open = (filename: string) =>\n *   Effect.gen(function*() {\n *     yield* Console.log(`Opening ${filename}`)\n *     return {\n *       getLines: Effect.succeed([\"Line 1\", \"Line 2\", \"Line 3\"]),\n *       close: Console.log(`Closing ${filename}`)\n *     }\n *   })\n *\n * const stream = Stream.acquireRelease(\n *   open(\"file.txt\"),\n *   (file) => file.close\n * ).pipe(Stream.flatMap((file) => file.getLines))\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // Opening file.txt\n * // Closing file.txt\n * // { _id: 'Chunk', values: [ [ 'Line 1', 'Line 2', 'Line 3' ] ] }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const acquireRelease: <A, E, R, R2, X>(\n  acquire: Effect.Effect<A, E, R>,\n  release: (resource: A, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R2>\n) => Stream<A, E, R | R2> = internal.acquireRelease\n\n/**\n * Aggregates elements of this stream using the provided sink for as long as\n * the downstream operators on the stream are busy.\n *\n * This operator divides the stream into two asynchronous \"islands\". Operators\n * upstream of this operator run on one fiber, while downstream operators run\n * on another. Whenever the downstream fiber is busy processing elements, the\n * upstream fiber will feed elements into the sink until it signals\n * completion.\n *\n * Any sink can be used here, but see `Sink.foldWeightedEffect` and\n * `Sink.foldUntilEffect` for sinks that cover the common usecases.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const aggregate: {\n  /**\n   * Aggregates elements of this stream using the provided sink for as long as\n   * the downstream operators on the stream are busy.\n   *\n   * This operator divides the stream into two asynchronous \"islands\". Operators\n   * upstream of this operator run on one fiber, while downstream operators run\n   * on another. Whenever the downstream fiber is busy processing elements, the\n   * upstream fiber will feed elements into the sink until it signals\n   * completion.\n   *\n   * Any sink can be used here, but see `Sink.foldWeightedEffect` and\n   * `Sink.foldUntilEffect` for sinks that cover the common usecases.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <B, A, A2, E2, R2>(sink: Sink.Sink<B, A | A2, A2, E2, R2>): <E, R>(self: Stream<A, E, R>) => Stream<B, E2 | E, R2 | R>\n  /**\n   * Aggregates elements of this stream using the provided sink for as long as\n   * the downstream operators on the stream are busy.\n   *\n   * This operator divides the stream into two asynchronous \"islands\". Operators\n   * upstream of this operator run on one fiber, while downstream operators run\n   * on another. Whenever the downstream fiber is busy processing elements, the\n   * upstream fiber will feed elements into the sink until it signals\n   * completion.\n   *\n   * Any sink can be used here, but see `Sink.foldWeightedEffect` and\n   * `Sink.foldUntilEffect` for sinks that cover the common usecases.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, B, A2, E2, R2>(self: Stream<A, E, R>, sink: Sink.Sink<B, A | A2, A2, E2, R2>): Stream<B, E | E2, R | R2>\n} = internal.aggregate\n\n/**\n * Like `aggregateWithinEither`, but only returns the `Right` results.\n *\n * @param sink A `Sink` used to perform the aggregation.\n * @param schedule A `Schedule` used to signal when to stop the aggregation.\n * @since 2.0.0\n * @category utils\n */\nexport const aggregateWithin: {\n  /**\n   * Like `aggregateWithinEither`, but only returns the `Right` results.\n   *\n   * @param sink A `Sink` used to perform the aggregation.\n   * @param schedule A `Schedule` used to signal when to stop the aggregation.\n   * @since 2.0.0\n   * @category utils\n   */\n  <B, A, A2, E2, R2, C, R3>(\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>,\n    schedule: Schedule.Schedule<C, Option.Option<B>, R3>\n  ): <E, R>(self: Stream<A, E, R>) => Stream<B, E2 | E, R2 | R3 | R>\n  /**\n   * Like `aggregateWithinEither`, but only returns the `Right` results.\n   *\n   * @param sink A `Sink` used to perform the aggregation.\n   * @param schedule A `Schedule` used to signal when to stop the aggregation.\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, B, A2, E2, R2, C, R3>(\n    self: Stream<A, E, R>,\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>,\n    schedule: Schedule.Schedule<C, Option.Option<B>, R3>\n  ): Stream<B, E | E2, R | R2 | R3>\n} = internal.aggregateWithin\n\n/**\n * Aggregates elements using the provided sink until it completes, or until\n * the delay signalled by the schedule has passed.\n *\n * This operator divides the stream into two asynchronous islands. Operators\n * upstream of this operator run on one fiber, while downstream operators run\n * on another. Elements will be aggregated by the sink until the downstream\n * fiber pulls the aggregated value, or until the schedule's delay has passed.\n *\n * Aggregated elements will be fed into the schedule to determine the delays\n * between pulls.\n *\n * @param sink A `Sink` used to perform the aggregation.\n * @param schedule A `Schedule` used to signal when to stop the aggregation.\n * @since 2.0.0\n * @category utils\n */\nexport const aggregateWithinEither: {\n  /**\n   * Aggregates elements using the provided sink until it completes, or until\n   * the delay signalled by the schedule has passed.\n   *\n   * This operator divides the stream into two asynchronous islands. Operators\n   * upstream of this operator run on one fiber, while downstream operators run\n   * on another. Elements will be aggregated by the sink until the downstream\n   * fiber pulls the aggregated value, or until the schedule's delay has passed.\n   *\n   * Aggregated elements will be fed into the schedule to determine the delays\n   * between pulls.\n   *\n   * @param sink A `Sink` used to perform the aggregation.\n   * @param schedule A `Schedule` used to signal when to stop the aggregation.\n   * @since 2.0.0\n   * @category utils\n   */\n  <B, A, A2, E2, R2, C, R3>(\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>,\n    schedule: Schedule.Schedule<C, Option.Option<B>, R3>\n  ): <E, R>(self: Stream<A, E, R>) => Stream<Either.Either<B, C>, E2 | E, R2 | R3 | R>\n  /**\n   * Aggregates elements using the provided sink until it completes, or until\n   * the delay signalled by the schedule has passed.\n   *\n   * This operator divides the stream into two asynchronous islands. Operators\n   * upstream of this operator run on one fiber, while downstream operators run\n   * on another. Elements will be aggregated by the sink until the downstream\n   * fiber pulls the aggregated value, or until the schedule's delay has passed.\n   *\n   * Aggregated elements will be fed into the schedule to determine the delays\n   * between pulls.\n   *\n   * @param sink A `Sink` used to perform the aggregation.\n   * @param schedule A `Schedule` used to signal when to stop the aggregation.\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, B, A2, E2, R2, C, R3>(\n    self: Stream<A, E, R>,\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>,\n    schedule: Schedule.Schedule<C, Option.Option<B>, R3>\n  ): Stream<Either.Either<B, C>, E | E2, R | R2 | R3>\n} = internal.aggregateWithinEither\n\n/**\n * Maps the success values of this stream to the specified constant value.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const stream = Stream.range(1, 5).pipe(Stream.as(null))\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [ null, null, null, null, null ] }\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const as: {\n  /**\n   * Maps the success values of this stream to the specified constant value.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.range(1, 5).pipe(Stream.as(null))\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ null, null, null, null, null ] }\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <B>(value: B): <A, E, R>(self: Stream<A, E, R>) => Stream<B, E, R>\n  /**\n   * Maps the success values of this stream to the specified constant value.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.range(1, 5).pipe(Stream.as(null))\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ null, null, null, null, null ] }\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, R, B>(self: Stream<A, E, R>, value: B): Stream<B, E, R>\n} = internal.as\n\nconst _async: <A, E = never, R = never>(\n  register: (emit: Emit.Emit<R, E, A, void>) => Effect.Effect<void, never, R> | void,\n  bufferSize?: number | \"unbounded\" | {\n    readonly bufferSize?: number | undefined\n    readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n  } | undefined\n) => Stream<A, E, R> = internal._async\n\nexport {\n  /**\n   * Creates a stream from an asynchronous callback that can be called multiple\n   * times. The optionality of the error type `E` in `Emit` can be used to\n   * signal the end of the stream by setting it to `None`.\n   *\n   * The registration function can optionally return an `Effect`, which will be\n   * executed if the `Fiber` executing this Effect is interrupted.\n   *\n   * @example\n   * import type { StreamEmit } from \"effect\"\n   * import { Chunk, Effect, Option, Stream } from \"effect\"\n   *\n   * const events = [1, 2, 3, 4]\n   *\n   * const stream = Stream.async(\n   *   (emit: StreamEmit.Emit<never, never, number, void>) => {\n   *     events.forEach((n) => {\n   *       setTimeout(() => {\n   *         if (n === 3) {\n   *           emit(Effect.fail(Option.none())) // Terminate the stream\n   *         } else {\n   *           emit(Effect.succeed(Chunk.of(n))) // Add the current item to the stream\n   *         }\n   *       }, 100 * n)\n   *     })\n   *   }\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 1, 2 ] }\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  _async as async\n}\n\n/**\n * Creates a stream from an asynchronous callback that can be called multiple\n * times The registration of the callback itself returns an effect. The\n * optionality of the error type `E` can be used to signal the end of the\n * stream, by setting it to `None`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const asyncEffect: <A, E = never, R = never>(\n  register: (emit: Emit.Emit<R, E, A, void>) => Effect.Effect<unknown, E, R>,\n  bufferSize?: number | \"unbounded\" | {\n    readonly bufferSize?: number | undefined\n    readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n  } | undefined\n) => Stream<A, E, R> = internal.asyncEffect\n\n/**\n * Creates a stream from an external push-based resource.\n *\n * You can use the `emit` helper to emit values to the stream. The `emit` helper\n * returns a boolean indicating whether the value was emitted or not.\n *\n * You can also use the `emit` helper to signal the end of the stream by\n * using apis such as `emit.end` or `emit.fail`.\n *\n * By default it uses an \"unbounded\" buffer size.\n * You can customize the buffer size and strategy by passing an object as the\n * second argument with the `bufferSize` and `strategy` fields.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * Stream.asyncPush<string>((emit) =>\n *   Effect.acquireRelease(\n *     Effect.gen(function*() {\n *       yield* Effect.log(\"subscribing\")\n *       return setInterval(() => emit.single(\"tick\"), 1000)\n *     }),\n *     (handle) =>\n *       Effect.gen(function*() {\n *         yield* Effect.log(\"unsubscribing\")\n *         clearInterval(handle)\n *       })\n *   ), { bufferSize: 16, strategy: \"dropping\" })\n *\n * @since 3.6.0\n * @category constructors\n */\nexport const asyncPush: <A, E = never, R = never>(\n  register: (emit: Emit.EmitOpsPush<E, A>) => Effect.Effect<unknown, E, R | Scope.Scope>,\n  options?: { readonly bufferSize: \"unbounded\" } | {\n    readonly bufferSize?: number | undefined\n    readonly strategy?: \"dropping\" | \"sliding\" | undefined\n  } | undefined\n) => Stream<A, E, Exclude<R, Scope.Scope>> = internal.asyncPush\n\n/**\n * Creates a stream from an asynchronous callback that can be called multiple\n * times. The registration of the callback itself returns an a scoped\n * resource. The optionality of the error type `E` can be used to signal the\n * end of the stream, by setting it to `None`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const asyncScoped: <A, E = never, R = never>(\n  register: (emit: Emit.Emit<R, E, A, void>) => Effect.Effect<unknown, E, R | Scope.Scope>,\n  bufferSize?: number | \"unbounded\" | {\n    readonly bufferSize?: number | undefined\n    readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n  } | undefined\n) => Stream<A, E, Exclude<R, Scope.Scope>> = internal.asyncScoped\n\n/**\n * Returns a `Stream` that first collects `n` elements from the input `Stream`,\n * and then creates a new `Stream` using the specified function, and sends all\n * the following elements through that.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const branchAfter: {\n  /**\n   * Returns a `Stream` that first collects `n` elements from the input `Stream`,\n   * and then creates a new `Stream` using the specified function, and sends all\n   * the following elements through that.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, A2, E2, R2>(\n    n: number,\n    f: (input: Chunk.Chunk<A>) => Stream<A2, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Stream<A2, E2 | E, R2 | R>\n  /**\n   * Returns a `Stream` that first collects `n` elements from the input `Stream`,\n   * and then creates a new `Stream` using the specified function, and sends all\n   * the following elements through that.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Stream<A, E, R>,\n    n: number,\n    f: (input: Chunk.Chunk<A>) => Stream<A2, E2, R2>\n  ): Stream<A2, E | E2, R | R2>\n} = internal.branchAfter\n\n/**\n * Fan out the stream, producing a list of streams that have the same elements\n * as this stream. The driver stream will only ever advance the `maximumLag`\n * chunks before the slowest downstream stream.\n *\n * @example\n * import { Console, Effect, Fiber, Schedule, Stream } from \"effect\"\n *\n * const numbers = Effect.scoped(\n *   Stream.range(1, 20).pipe(\n *     Stream.tap((n) => Console.log(`Emit ${n} element before broadcasting`)),\n *     Stream.broadcast(2, 5),\n *     Stream.flatMap(([first, second]) =>\n *       Effect.gen(function*() {\n *         const fiber1 = yield* Stream.runFold(first, 0, (acc, e) => Math.max(acc, e)).pipe(\n *           Effect.andThen((max) => Console.log(`Maximum: ${max}`)),\n *           Effect.fork\n *         )\n *         const fiber2 = yield* second.pipe(\n *           Stream.schedule(Schedule.spaced(\"1 second\")),\n *           Stream.runForEach((n) => Console.log(`Logging to the Console: ${n}`)),\n *           Effect.fork\n *         )\n *         yield* Fiber.join(fiber1).pipe(\n *           Effect.zip(Fiber.join(fiber2), { concurrent: true })\n *         )\n *       })\n *     ),\n *     Stream.runCollect\n *   )\n * )\n *\n * // Effect.runPromise(numbers).then(console.log)\n * // Emit 1 element before broadcasting\n * // Emit 2 element before broadcasting\n * // Emit 3 element before broadcasting\n * // Emit 4 element before broadcasting\n * // Emit 5 element before broadcasting\n * // Emit 6 element before broadcasting\n * // Emit 7 element before broadcasting\n * // Emit 8 element before broadcasting\n * // Emit 9 element before broadcasting\n * // Emit 10 element before broadcasting\n * // Emit 11 element before broadcasting\n * // Logging to the Console: 1\n * // Logging to the Console: 2\n * // Logging to the Console: 3\n * // Logging to the Console: 4\n * // Logging to the Console: 5\n * // Emit 12 element before broadcasting\n * // Emit 13 element before broadcasting\n * // Emit 14 element before broadcasting\n * // Emit 15 element before broadcasting\n * // Emit 16 element before broadcasting\n * // Logging to the Console: 6\n * // Logging to the Console: 7\n * // Logging to the Console: 8\n * // Logging to the Console: 9\n * // Logging to the Console: 10\n * // Emit 17 element before broadcasting\n * // Emit 18 element before broadcasting\n * // Emit 19 element before broadcasting\n * // Emit 20 element before broadcasting\n * // Logging to the Console: 11\n * // Logging to the Console: 12\n * // Logging to the Console: 13\n * // Logging to the Console: 14\n * // Logging to the Console: 15\n * // Maximum: 20\n * // Logging to the Console: 16\n * // Logging to the Console: 17\n * // Logging to the Console: 18\n * // Logging to the Console: 19\n * // Logging to the Console: 20\n * // { _id: 'Chunk', values: [ undefined ] }\n *\n * @since 2.0.0\n * @category utils\n */\nexport const broadcast: {\n  /**\n   * Fan out the stream, producing a list of streams that have the same elements\n   * as this stream. The driver stream will only ever advance the `maximumLag`\n   * chunks before the slowest downstream stream.\n   *\n   * @example\n   * import { Console, Effect, Fiber, Schedule, Stream } from \"effect\"\n   *\n   * const numbers = Effect.scoped(\n   *   Stream.range(1, 20).pipe(\n   *     Stream.tap((n) => Console.log(`Emit ${n} element before broadcasting`)),\n   *     Stream.broadcast(2, 5),\n   *     Stream.flatMap(([first, second]) =>\n   *       Effect.gen(function*() {\n   *         const fiber1 = yield* Stream.runFold(first, 0, (acc, e) => Math.max(acc, e)).pipe(\n   *           Effect.andThen((max) => Console.log(`Maximum: ${max}`)),\n   *           Effect.fork\n   *         )\n   *         const fiber2 = yield* second.pipe(\n   *           Stream.schedule(Schedule.spaced(\"1 second\")),\n   *           Stream.runForEach((n) => Console.log(`Logging to the Console: ${n}`)),\n   *           Effect.fork\n   *         )\n   *         yield* Fiber.join(fiber1).pipe(\n   *           Effect.zip(Fiber.join(fiber2), { concurrent: true })\n   *         )\n   *       })\n   *     ),\n   *     Stream.runCollect\n   *   )\n   * )\n   *\n   * // Effect.runPromise(numbers).then(console.log)\n   * // Emit 1 element before broadcasting\n   * // Emit 2 element before broadcasting\n   * // Emit 3 element before broadcasting\n   * // Emit 4 element before broadcasting\n   * // Emit 5 element before broadcasting\n   * // Emit 6 element before broadcasting\n   * // Emit 7 element before broadcasting\n   * // Emit 8 element before broadcasting\n   * // Emit 9 element before broadcasting\n   * // Emit 10 element before broadcasting\n   * // Emit 11 element before broadcasting\n   * // Logging to the Console: 1\n   * // Logging to the Console: 2\n   * // Logging to the Console: 3\n   * // Logging to the Console: 4\n   * // Logging to the Console: 5\n   * // Emit 12 element before broadcasting\n   * // Emit 13 element before broadcasting\n   * // Emit 14 element before broadcasting\n   * // Emit 15 element before broadcasting\n   * // Emit 16 element before broadcasting\n   * // Logging to the Console: 6\n   * // Logging to the Console: 7\n   * // Logging to the Console: 8\n   * // Logging to the Console: 9\n   * // Logging to the Console: 10\n   * // Emit 17 element before broadcasting\n   * // Emit 18 element before broadcasting\n   * // Emit 19 element before broadcasting\n   * // Emit 20 element before broadcasting\n   * // Logging to the Console: 11\n   * // Logging to the Console: 12\n   * // Logging to the Console: 13\n   * // Logging to the Console: 14\n   * // Logging to the Console: 15\n   * // Maximum: 20\n   * // Logging to the Console: 16\n   * // Logging to the Console: 17\n   * // Logging to the Console: 18\n   * // Logging to the Console: 19\n   * // Logging to the Console: 20\n   * // { _id: 'Chunk', values: [ undefined ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <N extends number>(\n    n: N,\n    maximumLag: number | { readonly capacity: \"unbounded\"; readonly replay?: number | undefined } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ): <A, E, R>(self: Stream<A, E, R>) => Effect.Effect<TupleOf<N, Stream<A, E>>, never, Scope.Scope | R>\n  /**\n   * Fan out the stream, producing a list of streams that have the same elements\n   * as this stream. The driver stream will only ever advance the `maximumLag`\n   * chunks before the slowest downstream stream.\n   *\n   * @example\n   * import { Console, Effect, Fiber, Schedule, Stream } from \"effect\"\n   *\n   * const numbers = Effect.scoped(\n   *   Stream.range(1, 20).pipe(\n   *     Stream.tap((n) => Console.log(`Emit ${n} element before broadcasting`)),\n   *     Stream.broadcast(2, 5),\n   *     Stream.flatMap(([first, second]) =>\n   *       Effect.gen(function*() {\n   *         const fiber1 = yield* Stream.runFold(first, 0, (acc, e) => Math.max(acc, e)).pipe(\n   *           Effect.andThen((max) => Console.log(`Maximum: ${max}`)),\n   *           Effect.fork\n   *         )\n   *         const fiber2 = yield* second.pipe(\n   *           Stream.schedule(Schedule.spaced(\"1 second\")),\n   *           Stream.runForEach((n) => Console.log(`Logging to the Console: ${n}`)),\n   *           Effect.fork\n   *         )\n   *         yield* Fiber.join(fiber1).pipe(\n   *           Effect.zip(Fiber.join(fiber2), { concurrent: true })\n   *         )\n   *       })\n   *     ),\n   *     Stream.runCollect\n   *   )\n   * )\n   *\n   * // Effect.runPromise(numbers).then(console.log)\n   * // Emit 1 element before broadcasting\n   * // Emit 2 element before broadcasting\n   * // Emit 3 element before broadcasting\n   * // Emit 4 element before broadcasting\n   * // Emit 5 element before broadcasting\n   * // Emit 6 element before broadcasting\n   * // Emit 7 element before broadcasting\n   * // Emit 8 element before broadcasting\n   * // Emit 9 element before broadcasting\n   * // Emit 10 element before broadcasting\n   * // Emit 11 element before broadcasting\n   * // Logging to the Console: 1\n   * // Logging to the Console: 2\n   * // Logging to the Console: 3\n   * // Logging to the Console: 4\n   * // Logging to the Console: 5\n   * // Emit 12 element before broadcasting\n   * // Emit 13 element before broadcasting\n   * // Emit 14 element before broadcasting\n   * // Emit 15 element before broadcasting\n   * // Emit 16 element before broadcasting\n   * // Logging to the Console: 6\n   * // Logging to the Console: 7\n   * // Logging to the Console: 8\n   * // Logging to the Console: 9\n   * // Logging to the Console: 10\n   * // Emit 17 element before broadcasting\n   * // Emit 18 element before broadcasting\n   * // Emit 19 element before broadcasting\n   * // Emit 20 element before broadcasting\n   * // Logging to the Console: 11\n   * // Logging to the Console: 12\n   * // Logging to the Console: 13\n   * // Logging to the Console: 14\n   * // Logging to the Console: 15\n   * // Maximum: 20\n   * // Logging to the Console: 16\n   * // Logging to the Console: 17\n   * // Logging to the Console: 18\n   * // Logging to the Console: 19\n   * // Logging to the Console: 20\n   * // { _id: 'Chunk', values: [ undefined ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, N extends number>(\n    self: Stream<A, E, R>,\n    n: N,\n    maximumLag: number | { readonly capacity: \"unbounded\"; readonly replay?: number | undefined } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ): Effect.Effect<TupleOf<N, Stream<A, E>>, never, Scope.Scope | R>\n} = internal.broadcast\n\n/**\n * Returns a new Stream that multicasts the original Stream, subscribing to it as soon as the first consumer subscribes.\n * As long as there is at least one consumer, the upstream will continue running and emitting data.\n * When all consumers have exited, the upstream will be finalized.\n *\n * @since 3.8.0\n * @category utils\n */\nexport const share: {\n  /**\n   * Returns a new Stream that multicasts the original Stream, subscribing to it as soon as the first consumer subscribes.\n   * As long as there is at least one consumer, the upstream will continue running and emitting data.\n   * When all consumers have exited, the upstream will be finalized.\n   *\n   * @since 3.8.0\n   * @category utils\n   */\n  <A, E>(\n    config: {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n      readonly idleTimeToLive?: Duration.DurationInput | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n      readonly idleTimeToLive?: Duration.DurationInput | undefined\n    }\n  ): <R>(self: Stream<A, E, R>) => Effect.Effect<Stream<A, E>, never, R | Scope.Scope>\n  /**\n   * Returns a new Stream that multicasts the original Stream, subscribing to it as soon as the first consumer subscribes.\n   * As long as there is at least one consumer, the upstream will continue running and emitting data.\n   * When all consumers have exited, the upstream will be finalized.\n   *\n   * @since 3.8.0\n   * @category utils\n   */\n  <A, E, R>(\n    self: Stream<A, E, R>,\n    config: {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n      readonly idleTimeToLive?: Duration.DurationInput | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n      readonly idleTimeToLive?: Duration.DurationInput | undefined\n    }\n  ): Effect.Effect<Stream<A, E>, never, R | Scope.Scope>\n} = internal.share\n\n/**\n * Fan out the stream, producing a dynamic number of streams that have the\n * same elements as this stream. The driver stream will only ever advance the\n * `maximumLag` chunks before the slowest downstream stream.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const broadcastDynamic: {\n  /**\n   * Fan out the stream, producing a dynamic number of streams that have the\n   * same elements as this stream. The driver stream will only ever advance the\n   * `maximumLag` chunks before the slowest downstream stream.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (\n    maximumLag: number | { readonly capacity: \"unbounded\"; readonly replay?: number | undefined } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ): <A, E, R>(self: Stream<A, E, R>) => Effect.Effect<Stream<A, E>, never, Scope.Scope | R>\n  /**\n   * Fan out the stream, producing a dynamic number of streams that have the\n   * same elements as this stream. The driver stream will only ever advance the\n   * `maximumLag` chunks before the slowest downstream stream.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(\n    self: Stream<A, E, R>,\n    maximumLag: number | { readonly capacity: \"unbounded\"; readonly replay?: number | undefined } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ): Effect.Effect<Stream<A, E>, never, Scope.Scope | R>\n} = internal.broadcastDynamic\n\n/**\n * Converts the stream to a scoped list of queues. Every value will be\n * replicated to every queue with the slowest queue being allowed to buffer\n * `maximumLag` chunks before the driver is back pressured.\n *\n * Queues can unsubscribe from upstream by shutting down.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const broadcastedQueues: {\n  /**\n   * Converts the stream to a scoped list of queues. Every value will be\n   * replicated to every queue with the slowest queue being allowed to buffer\n   * `maximumLag` chunks before the driver is back pressured.\n   *\n   * Queues can unsubscribe from upstream by shutting down.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <N extends number>(\n    n: N,\n    maximumLag: number | { readonly capacity: \"unbounded\"; readonly replay?: number | undefined } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ): <A, E, R>(\n    self: Stream<A, E, R>\n  ) => Effect.Effect<TupleOf<N, Queue.Dequeue<Take.Take<A, E>>>, never, Scope.Scope | R>\n  /**\n   * Converts the stream to a scoped list of queues. Every value will be\n   * replicated to every queue with the slowest queue being allowed to buffer\n   * `maximumLag` chunks before the driver is back pressured.\n   *\n   * Queues can unsubscribe from upstream by shutting down.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, N extends number>(\n    self: Stream<A, E, R>,\n    n: N,\n    maximumLag: number | { readonly capacity: \"unbounded\"; readonly replay?: number | undefined } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ): Effect.Effect<TupleOf<N, Queue.Dequeue<Take.Take<A, E>>>, never, Scope.Scope | R>\n} = internal.broadcastedQueues\n\n/**\n * Converts the stream to a scoped dynamic amount of queues. Every chunk will\n * be replicated to every queue with the slowest queue being allowed to buffer\n * `maximumLag` chunks before the driver is back pressured.\n *\n * Queues can unsubscribe from upstream by shutting down.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const broadcastedQueuesDynamic: {\n  /**\n   * Converts the stream to a scoped dynamic amount of queues. Every chunk will\n   * be replicated to every queue with the slowest queue being allowed to buffer\n   * `maximumLag` chunks before the driver is back pressured.\n   *\n   * Queues can unsubscribe from upstream by shutting down.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (\n    maximumLag: number | { readonly capacity: \"unbounded\"; readonly replay?: number | undefined } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ): <A, E, R>(\n    self: Stream<A, E, R>\n  ) => Effect.Effect<Effect.Effect<Queue.Dequeue<Take.Take<A, E>>, never, Scope.Scope>, never, Scope.Scope | R>\n  /**\n   * Converts the stream to a scoped dynamic amount of queues. Every chunk will\n   * be replicated to every queue with the slowest queue being allowed to buffer\n   * `maximumLag` chunks before the driver is back pressured.\n   *\n   * Queues can unsubscribe from upstream by shutting down.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(\n    self: Stream<A, E, R>,\n    maximumLag: number | { readonly capacity: \"unbounded\"; readonly replay?: number | undefined } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ): Effect.Effect<Effect.Effect<Queue.Dequeue<Take.Take<A, E>>, never, Scope.Scope>, never, Scope.Scope | R>\n} = internal.broadcastedQueuesDynamic\n\n/**\n * Allows a faster producer to progress independently of a slower consumer by\n * buffering up to `capacity` elements in a queue.\n *\n * Note: This combinator destroys the chunking structure. It's recommended to\n *       use rechunk afterwards. Additionally, prefer capacities that are powers\n *       of 2 for better performance.\n *\n * @example\n * import { Console, Effect, Schedule, Stream } from \"effect\"\n *\n * const stream = Stream.range(1, 10).pipe(\n *   Stream.tap((n) => Console.log(`before buffering: ${n}`)),\n *   Stream.buffer({ capacity: 4 }),\n *   Stream.tap((n) => Console.log(`after buffering: ${n}`)),\n *   Stream.schedule(Schedule.spaced(\"5 seconds\"))\n * )\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // before buffering: 1\n * // before buffering: 2\n * // before buffering: 3\n * // before buffering: 4\n * // before buffering: 5\n * // before buffering: 6\n * // after buffering: 1\n * // after buffering: 2\n * // before buffering: 7\n * // after buffering: 3\n * // before buffering: 8\n * // after buffering: 4\n * // before buffering: 9\n * // after buffering: 5\n * // before buffering: 10\n * // ...\n *\n * @since 2.0.0\n * @category utils\n */\nexport const buffer: {\n  /**\n   * Allows a faster producer to progress independently of a slower consumer by\n   * buffering up to `capacity` elements in a queue.\n   *\n   * Note: This combinator destroys the chunking structure. It's recommended to\n   *       use rechunk afterwards. Additionally, prefer capacities that are powers\n   *       of 2 for better performance.\n   *\n   * @example\n   * import { Console, Effect, Schedule, Stream } from \"effect\"\n   *\n   * const stream = Stream.range(1, 10).pipe(\n   *   Stream.tap((n) => Console.log(`before buffering: ${n}`)),\n   *   Stream.buffer({ capacity: 4 }),\n   *   Stream.tap((n) => Console.log(`after buffering: ${n}`)),\n   *   Stream.schedule(Schedule.spaced(\"5 seconds\"))\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // before buffering: 1\n   * // before buffering: 2\n   * // before buffering: 3\n   * // before buffering: 4\n   * // before buffering: 5\n   * // before buffering: 6\n   * // after buffering: 1\n   * // after buffering: 2\n   * // before buffering: 7\n   * // after buffering: 3\n   * // before buffering: 8\n   * // after buffering: 4\n   * // before buffering: 9\n   * // after buffering: 5\n   * // before buffering: 10\n   * // ...\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (\n    options: { readonly capacity: \"unbounded\" } | {\n      readonly capacity: number\n      readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n    }\n  ): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E, R>\n  /**\n   * Allows a faster producer to progress independently of a slower consumer by\n   * buffering up to `capacity` elements in a queue.\n   *\n   * Note: This combinator destroys the chunking structure. It's recommended to\n   *       use rechunk afterwards. Additionally, prefer capacities that are powers\n   *       of 2 for better performance.\n   *\n   * @example\n   * import { Console, Effect, Schedule, Stream } from \"effect\"\n   *\n   * const stream = Stream.range(1, 10).pipe(\n   *   Stream.tap((n) => Console.log(`before buffering: ${n}`)),\n   *   Stream.buffer({ capacity: 4 }),\n   *   Stream.tap((n) => Console.log(`after buffering: ${n}`)),\n   *   Stream.schedule(Schedule.spaced(\"5 seconds\"))\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // before buffering: 1\n   * // before buffering: 2\n   * // before buffering: 3\n   * // before buffering: 4\n   * // before buffering: 5\n   * // before buffering: 6\n   * // after buffering: 1\n   * // after buffering: 2\n   * // before buffering: 7\n   * // after buffering: 3\n   * // before buffering: 8\n   * // after buffering: 4\n   * // before buffering: 9\n   * // after buffering: 5\n   * // before buffering: 10\n   * // ...\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(\n    self: Stream<A, E, R>,\n    options: { readonly capacity: \"unbounded\" } | {\n      readonly capacity: number\n      readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n    }\n  ): Stream<A, E, R>\n} = internal.buffer\n\n/**\n * Allows a faster producer to progress independently of a slower consumer by\n * buffering up to `capacity` chunks in a queue.\n *\n * @note Prefer capacities that are powers of 2 for better performance.\n * @since 2.0.0\n * @category utils\n */\nexport const bufferChunks: {\n  /**\n   * Allows a faster producer to progress independently of a slower consumer by\n   * buffering up to `capacity` chunks in a queue.\n   *\n   * @note Prefer capacities that are powers of 2 for better performance.\n   * @since 2.0.0\n   * @category utils\n   */\n  (\n    options: { readonly capacity: number; readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined }\n  ): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E, R>\n  /**\n   * Allows a faster producer to progress independently of a slower consumer by\n   * buffering up to `capacity` chunks in a queue.\n   *\n   * @note Prefer capacities that are powers of 2 for better performance.\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(\n    self: Stream<A, E, R>,\n    options: { readonly capacity: number; readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined }\n  ): Stream<A, E, R>\n} = internal.bufferChunks\n\n/**\n * Switches over to the stream produced by the provided function in case this\n * one fails with a typed error.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchAll: {\n  /**\n   * Switches over to the stream produced by the provided function in case this\n   * one fails with a typed error.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <E, A2, E2, R2>(f: (error: E) => Stream<A2, E2, R2>): <A, R>(self: Stream<A, E, R>) => Stream<A2 | A, E2, R2 | R>\n  /**\n   * Switches over to the stream produced by the provided function in case this\n   * one fails with a typed error.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, A2, E2, R2>(self: Stream<A, E, R>, f: (error: E) => Stream<A2, E2, R2>): Stream<A | A2, E2, R | R2>\n} = internal.catchAll\n\n/**\n * Switches over to the stream produced by the provided function in case this\n * one fails. Allows recovery from all causes of failure, including\n * interruption if the stream is uninterruptible.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchAllCause: {\n  /**\n   * Switches over to the stream produced by the provided function in case this\n   * one fails. Allows recovery from all causes of failure, including\n   * interruption if the stream is uninterruptible.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <E, A2, E2, R2>(\n    f: (cause: Cause.Cause<E>) => Stream<A2, E2, R2>\n  ): <A, R>(self: Stream<A, E, R>) => Stream<A2 | A, E2, R2 | R>\n  /**\n   * Switches over to the stream produced by the provided function in case this\n   * one fails. Allows recovery from all causes of failure, including\n   * interruption if the stream is uninterruptible.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Stream<A, E, R>,\n    f: (cause: Cause.Cause<E>) => Stream<A2, E2, R2>\n  ): Stream<A | A2, E2, R | R2>\n} = internal.catchAllCause\n\n/**\n * Switches over to the stream produced by the provided function in case this\n * one fails with some typed error.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchSome: {\n  /**\n   * Switches over to the stream produced by the provided function in case this\n   * one fails with some typed error.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <E, A2, E2, R2>(\n    pf: (error: E) => Option.Option<Stream<A2, E2, R2>>\n  ): <A, R>(self: Stream<A, E, R>) => Stream<A2 | A, E | E2, R2 | R>\n  /**\n   * Switches over to the stream produced by the provided function in case this\n   * one fails with some typed error.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Stream<A, E, R>,\n    pf: (error: E) => Option.Option<Stream<A2, E2, R2>>\n  ): Stream<A | A2, E | E2, R | R2>\n} = internal.catchSome\n\n/**\n * Switches over to the stream produced by the provided function in case this\n * one fails with an error matching the given `_tag`.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchTag: {\n  /**\n   * Switches over to the stream produced by the provided function in case this\n   * one fails with an error matching the given `_tag`.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <K extends E[\"_tag\"] & string, E extends { _tag: string }, A1, E1, R1>(\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Stream<A1, E1, R1>\n  ): <A, R>(self: Stream<A, E, R>) => Stream<A1 | A, E1 | Exclude<E, { _tag: K }>, R1 | R>\n  /**\n   * Switches over to the stream produced by the provided function in case this\n   * one fails with an error matching the given `_tag`.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E extends { _tag: string }, R, K extends E[\"_tag\"] & string, A1, E1, R1>(\n    self: Stream<A, E, R>,\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Stream<A1, E1, R1>\n  ): Stream<A | A1, E1 | Exclude<E, { _tag: K }>, R | R1>\n} = internal.catchTag\n\n/**\n * Switches over to the stream produced by one of the provided functions, in\n * case this one fails with an error matching one of the given `_tag`'s.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchTags: {\n  /**\n   * Switches over to the stream produced by one of the provided functions, in\n   * case this one fails with an error matching one of the given `_tag`'s.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <\n    E extends { _tag: string },\n    Cases extends { [K in E[\"_tag\"]]+?: (error: Extract<E, { _tag: K }>) => Stream<any, any, any> }\n  >(cases: Cases): <A, R>(\n    self: Stream<A, E, R>\n  ) => Stream<\n    | A\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Stream.Variance<infer A, infer _E, infer _R> ? A\n        : never\n    }[keyof Cases],\n    | Exclude<E, { _tag: keyof Cases }>\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Stream.Variance<infer _A, infer E, infer _R> ? E\n        : never\n    }[keyof Cases],\n    | R\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Stream.Variance<infer _A, infer _E, infer R> ? R\n        : never\n    }[keyof Cases]\n  >\n  /**\n   * Switches over to the stream produced by one of the provided functions, in\n   * case this one fails with an error matching one of the given `_tag`'s.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <\n    A,\n    E extends { _tag: string },\n    R,\n    Cases extends { [K in E[\"_tag\"]]+?: (error: Extract<E, { _tag: K }>) => Stream<any, any, any> }\n  >(self: Stream<A, E, R>, cases: Cases): Stream<\n    | A\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Stream.Variance<infer _R, infer _E, infer A> ? A\n        : never\n    }[keyof Cases],\n    | Exclude<E, { _tag: keyof Cases }>\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Stream.Variance<infer _R, infer E, infer _A> ? E\n        : never\n    }[keyof Cases],\n    | R\n    | {\n      [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Stream.Variance<infer R, infer _E, infer _A> ? R\n        : never\n    }[keyof Cases]\n  >\n} = internal.catchTags\n\n/**\n * Switches over to the stream produced by the provided function in case this\n * one fails with some errors. Allows recovery from all causes of failure,\n * including interruption if the stream is uninterruptible.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchSomeCause: {\n  /**\n   * Switches over to the stream produced by the provided function in case this\n   * one fails with some errors. Allows recovery from all causes of failure,\n   * including interruption if the stream is uninterruptible.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <E, A2, E2, R2>(\n    pf: (cause: Cause.Cause<E>) => Option.Option<Stream<A2, E2, R2>>\n  ): <A, R>(self: Stream<A, E, R>) => Stream<A2 | A, E | E2, R2 | R>\n  /**\n   * Switches over to the stream produced by the provided function in case this\n   * one fails with some errors. Allows recovery from all causes of failure,\n   * including interruption if the stream is uninterruptible.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Stream<A, E, R>,\n    pf: (cause: Cause.Cause<E>) => Option.Option<Stream<A2, E2, R2>>\n  ): Stream<A | A2, E | E2, R | R2>\n} = internal.catchSomeCause\n\n/**\n * Returns a new stream that only emits elements that are not equal to the\n * previous element emitted, using natural equality to determine whether two\n * elements are equal.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const stream = Stream.make(1, 1, 1, 2, 2, 3, 4).pipe(Stream.changes)\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [ 1, 2, 3, 4 ] }\n *\n * @since 2.0.0\n * @category utils\n */\nexport const changes: <A, E, R>(self: Stream<A, E, R>) => Stream<A, E, R> = internal.changes\n\n/**\n * Returns a new stream that only emits elements that are not equal to the\n * previous element emitted, using the specified function to determine whether\n * two elements are equal.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const changesWith: {\n  /**\n   * Returns a new stream that only emits elements that are not equal to the\n   * previous element emitted, using the specified function to determine whether\n   * two elements are equal.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(f: (x: A, y: A) => boolean): <E, R>(self: Stream<A, E, R>) => Stream<A, E, R>\n  /**\n   * Returns a new stream that only emits elements that are not equal to the\n   * previous element emitted, using the specified function to determine whether\n   * two elements are equal.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(self: Stream<A, E, R>, f: (x: A, y: A) => boolean): Stream<A, E, R>\n} = internal.changesWith\n\n/**\n * Returns a new stream that only emits elements that are not equal to the\n * previous element emitted, using the specified effectual function to\n * determine whether two elements are equal.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const changesWithEffect: {\n  /**\n   * Returns a new stream that only emits elements that are not equal to the\n   * previous element emitted, using the specified effectual function to\n   * determine whether two elements are equal.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E2, R2>(\n    f: (x: A, y: A) => Effect.Effect<boolean, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Stream<A, E2 | E, R2 | R>\n  /**\n   * Returns a new stream that only emits elements that are not equal to the\n   * previous element emitted, using the specified effectual function to\n   * determine whether two elements are equal.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, E2, R2>(self: Stream<A, E, R>, f: (x: A, y: A) => Effect.Effect<boolean, E2, R2>): Stream<A, E | E2, R | R2>\n} = internal.changesWithEffect\n\n/**\n * Exposes the underlying chunks of the stream as a stream of chunks of\n * elements.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const chunks: <A, E, R>(self: Stream<A, E, R>) => Stream<Chunk.Chunk<A>, E, R> = internal.chunks\n\n/**\n * Performs the specified stream transformation with the chunk structure of\n * the stream exposed.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const chunksWith: {\n  /**\n   * Performs the specified stream transformation with the chunk structure of\n   * the stream exposed.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, A2, E2, R2>(\n    f: (stream: Stream<Chunk.Chunk<A>, E, R>) => Stream<Chunk.Chunk<A2>, E2, R2>\n  ): (self: Stream<A, E, R>) => Stream<A2, E | E2, R | R2>\n  /**\n   * Performs the specified stream transformation with the chunk structure of\n   * the stream exposed.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Stream<A, E, R>,\n    f: (stream: Stream<Chunk.Chunk<A>, E, R>) => Stream<Chunk.Chunk<A2>, E2, R2>\n  ): Stream<A2, E | E2, R | R2>\n} = internal.chunksWith\n\n/**\n * Combines the elements from this stream and the specified stream by\n * repeatedly applying the function `f` to extract an element using both sides\n * and conceptually \"offer\" it to the destination stream. `f` can maintain\n * some internal state to control the combining process, with the initial\n * state being specified by `s`.\n *\n * Where possible, prefer `Stream.combineChunks` for a more efficient\n * implementation.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const combine: {\n  /**\n   * Combines the elements from this stream and the specified stream by\n   * repeatedly applying the function `f` to extract an element using both sides\n   * and conceptually \"offer\" it to the destination stream. `f` can maintain\n   * some internal state to control the combining process, with the initial\n   * state being specified by `s`.\n   *\n   * Where possible, prefer `Stream.combineChunks` for a more efficient\n   * implementation.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A2, E2, R2, S, R3, E, A, R4, R5, A3>(\n    that: Stream<A2, E2, R2>,\n    s: S,\n    f: (\n      s: S,\n      pullLeft: Effect.Effect<A, Option.Option<E>, R3>,\n      pullRight: Effect.Effect<A2, Option.Option<E2>, R4>\n    ) => Effect.Effect<Exit.Exit<readonly [A3, S], Option.Option<E2 | E>>, never, R5>\n  ): <R>(self: Stream<A, E, R>) => Stream<A3, E2 | E, R2 | R3 | R4 | R5 | R>\n  /**\n   * Combines the elements from this stream and the specified stream by\n   * repeatedly applying the function `f` to extract an element using both sides\n   * and conceptually \"offer\" it to the destination stream. `f` can maintain\n   * some internal state to control the combining process, with the initial\n   * state being specified by `s`.\n   *\n   * Where possible, prefer `Stream.combineChunks` for a more efficient\n   * implementation.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <R, A2, E2, R2, S, R3, E, A, R4, R5, A3>(\n    self: Stream<A, E, R>,\n    that: Stream<A2, E2, R2>,\n    s: S,\n    f: (\n      s: S,\n      pullLeft: Effect.Effect<A, Option.Option<E>, R3>,\n      pullRight: Effect.Effect<A2, Option.Option<E2>, R4>\n    ) => Effect.Effect<Exit.Exit<readonly [A3, S], Option.Option<E2 | E>>, never, R5>\n  ): Stream<A3, E2 | E, R | R2 | R3 | R4 | R5>\n} = internal.combine\n\n/**\n * Combines the chunks from this stream and the specified stream by repeatedly\n * applying the function `f` to extract a chunk using both sides and\n * conceptually \"offer\" it to the destination stream. `f` can maintain some\n * internal state to control the combining process, with the initial state\n * being specified by `s`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const combineChunks: {\n  /**\n   * Combines the chunks from this stream and the specified stream by repeatedly\n   * applying the function `f` to extract a chunk using both sides and\n   * conceptually \"offer\" it to the destination stream. `f` can maintain some\n   * internal state to control the combining process, with the initial state\n   * being specified by `s`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A2, E2, R2, S, R3, E, A, R4, R5, A3>(\n    that: Stream<A2, E2, R2>,\n    s: S,\n    f: (\n      s: S,\n      pullLeft: Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R3>,\n      pullRight: Effect.Effect<Chunk.Chunk<A2>, Option.Option<E2>, R4>\n    ) => Effect.Effect<Exit.Exit<readonly [Chunk.Chunk<A3>, S], Option.Option<E2 | E>>, never, R5>\n  ): <R>(self: Stream<A, E, R>) => Stream<A3, E2 | E, R2 | R3 | R4 | R5 | R>\n  /**\n   * Combines the chunks from this stream and the specified stream by repeatedly\n   * applying the function `f` to extract a chunk using both sides and\n   * conceptually \"offer\" it to the destination stream. `f` can maintain some\n   * internal state to control the combining process, with the initial state\n   * being specified by `s`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <R, A2, E2, R2, S, R3, E, A, R4, R5, A3>(\n    self: Stream<A, E, R>,\n    that: Stream<A2, E2, R2>,\n    s: S,\n    f: (\n      s: S,\n      pullLeft: Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R3>,\n      pullRight: Effect.Effect<Chunk.Chunk<A2>, Option.Option<E2>, R4>\n    ) => Effect.Effect<Exit.Exit<readonly [Chunk.Chunk<A3>, S], Option.Option<E2 | E>>, never, R5>\n  ): Stream<A3, E2 | E, R | R2 | R3 | R4 | R5>\n} = internal.combineChunks\n\n/**\n * Concatenates the specified stream with this stream, resulting in a stream\n * that emits the elements from this stream and then the elements from the\n * specified stream.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const s1 = Stream.make(1, 2, 3)\n * const s2 = Stream.make(4, 5)\n *\n * const stream = Stream.concat(s1, s2)\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [ 1, 2, 3, 4, 5 ] }\n *\n * @since 2.0.0\n * @category utils\n */\nexport const concat: {\n  /**\n   * Concatenates the specified stream with this stream, resulting in a stream\n   * that emits the elements from this stream and then the elements from the\n   * specified stream.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const s1 = Stream.make(1, 2, 3)\n   * const s2 = Stream.make(4, 5)\n   *\n   * const stream = Stream.concat(s1, s2)\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 1, 2, 3, 4, 5 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A2, E2, R2>(that: Stream<A2, E2, R2>): <A, E, R>(self: Stream<A, E, R>) => Stream<A2 | A, E2 | E, R2 | R>\n  /**\n   * Concatenates the specified stream with this stream, resulting in a stream\n   * that emits the elements from this stream and then the elements from the\n   * specified stream.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const s1 = Stream.make(1, 2, 3)\n   * const s2 = Stream.make(4, 5)\n   *\n   * const stream = Stream.concat(s1, s2)\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 1, 2, 3, 4, 5 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, A2, E2, R2>(self: Stream<A, E, R>, that: Stream<A2, E2, R2>): Stream<A | A2, E | E2, R | R2>\n} = internal.concat\n\n/**\n * Concatenates all of the streams in the chunk to one stream.\n *\n * @example\n * import { Chunk, Effect, Stream } from \"effect\"\n *\n * const s1 = Stream.make(1, 2, 3)\n * const s2 = Stream.make(4, 5)\n * const s3 = Stream.make(6, 7, 8)\n *\n * const stream = Stream.concatAll(Chunk.make(s1, s2, s3))\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // {\n * //   _id: 'Chunk',\n * //   values: [\n * //     1, 2, 3, 4,\n * //     5, 6, 7, 8\n * //   ]\n * // }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const concatAll: <A, E, R>(streams: Chunk.Chunk<Stream<A, E, R>>) => Stream<A, E, R> = internal.concatAll\n\n/**\n * Composes this stream with the specified stream to create a cartesian\n * product of elements. The `right` stream would be run multiple times, for\n * every element in the `left` stream.\n *\n * See also `Stream.zip` for the more common point-wise variant.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const s1 = Stream.make(1, 2, 3)\n * const s2 = Stream.make(\"a\", \"b\")\n *\n * const product = Stream.cross(s1, s2)\n *\n * // Effect.runPromise(Stream.runCollect(product)).then(console.log)\n * // {\n * //   _id: \"Chunk\",\n * //   values: [\n * //     [ 1, \"a\" ], [ 1, \"b\" ], [ 2, \"a\" ], [ 2, \"b\" ], [ 3, \"a\" ], [ 3, \"b\" ]\n * //   ]\n * // }\n *\n * @since 2.0.0\n * @category utils\n */\nexport const cross: {\n  /**\n   * Composes this stream with the specified stream to create a cartesian\n   * product of elements. The `right` stream would be run multiple times, for\n   * every element in the `left` stream.\n   *\n   * See also `Stream.zip` for the more common point-wise variant.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const s1 = Stream.make(1, 2, 3)\n   * const s2 = Stream.make(\"a\", \"b\")\n   *\n   * const product = Stream.cross(s1, s2)\n   *\n   * // Effect.runPromise(Stream.runCollect(product)).then(console.log)\n   * // {\n   * //   _id: \"Chunk\",\n   * //   values: [\n   * //     [ 1, \"a\" ], [ 1, \"b\" ], [ 2, \"a\" ], [ 2, \"b\" ], [ 3, \"a\" ], [ 3, \"b\" ]\n   * //   ]\n   * // }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <AR, ER, RR>(right: Stream<AR, ER, RR>): <AL, EL, RL>(left: Stream<AL, EL, RL>) => Stream<[AL, AR], EL | ER, RL | RR>\n  /**\n   * Composes this stream with the specified stream to create a cartesian\n   * product of elements. The `right` stream would be run multiple times, for\n   * every element in the `left` stream.\n   *\n   * See also `Stream.zip` for the more common point-wise variant.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const s1 = Stream.make(1, 2, 3)\n   * const s2 = Stream.make(\"a\", \"b\")\n   *\n   * const product = Stream.cross(s1, s2)\n   *\n   * // Effect.runPromise(Stream.runCollect(product)).then(console.log)\n   * // {\n   * //   _id: \"Chunk\",\n   * //   values: [\n   * //     [ 1, \"a\" ], [ 1, \"b\" ], [ 2, \"a\" ], [ 2, \"b\" ], [ 3, \"a\" ], [ 3, \"b\" ]\n   * //   ]\n   * // }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <AL, ER, RR, AR, EL, RL>(left: Stream<AL, ER, RR>, right: Stream<AR, EL, RL>): Stream<[AL, AR], EL | ER, RL | RR>\n} = internal.cross\n\n/**\n * Composes this stream with the specified stream to create a cartesian\n * product of elements, but keeps only elements from `left` stream. The `right`\n * stream would be run multiple times, for every element in the `left` stream.\n *\n * See also `Stream.zipLeft` for the more common point-wise variant.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const crossLeft: {\n  /**\n   * Composes this stream with the specified stream to create a cartesian\n   * product of elements, but keeps only elements from `left` stream. The `right`\n   * stream would be run multiple times, for every element in the `left` stream.\n   *\n   * See also `Stream.zipLeft` for the more common point-wise variant.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <AR, ER, RR>(right: Stream<AR, ER, RR>): <AL, EL, RL>(left: Stream<AL, EL, RL>) => Stream<AL, EL | ER, RL | RR>\n  /**\n   * Composes this stream with the specified stream to create a cartesian\n   * product of elements, but keeps only elements from `left` stream. The `right`\n   * stream would be run multiple times, for every element in the `left` stream.\n   *\n   * See also `Stream.zipLeft` for the more common point-wise variant.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <AL, EL, RL, AR, ER, RR>(left: Stream<AL, EL, RL>, right: Stream<AR, ER, RR>): Stream<AL, EL | ER, RL | RR>\n} = internal.crossLeft\n\n/**\n * Composes this stream with the specified stream to create a cartesian\n * product of elements, but keeps only elements from the `right` stream. The\n * `left` stream would be run multiple times, for every element in the `right`\n * stream.\n *\n * See also `Stream.zipRight` for the more common point-wise variant.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const crossRight: {\n  /**\n   * Composes this stream with the specified stream to create a cartesian\n   * product of elements, but keeps only elements from the `right` stream. The\n   * `left` stream would be run multiple times, for every element in the `right`\n   * stream.\n   *\n   * See also `Stream.zipRight` for the more common point-wise variant.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <AR, ER, RR>(right: Stream<AR, ER, RR>): <AL, EL, RL>(left: Stream<AL, EL, RL>) => Stream<AR, EL | ER, RL | RR>\n  /**\n   * Composes this stream with the specified stream to create a cartesian\n   * product of elements, but keeps only elements from the `right` stream. The\n   * `left` stream would be run multiple times, for every element in the `right`\n   * stream.\n   *\n   * See also `Stream.zipRight` for the more common point-wise variant.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <AL, EL, RL, AR, ER, RR>(left: Stream<AL, EL, RL>, right: Stream<AR, ER, RR>): Stream<AR, EL | ER, RL | RR>\n} = internal.crossRight\n\n/**\n * Composes this stream with the specified stream to create a cartesian\n * product of elements with a specified function. The `right` stream would be\n * run multiple times, for every element in the `left` stream.\n *\n * See also `Stream.zipWith` for the more common point-wise variant.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const crossWith: {\n  /**\n   * Composes this stream with the specified stream to create a cartesian\n   * product of elements with a specified function. The `right` stream would be\n   * run multiple times, for every element in the `left` stream.\n   *\n   * See also `Stream.zipWith` for the more common point-wise variant.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <AR, ER, RR, AL, A>(\n    right: Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): <EL, RL>(left: Stream<AL, EL, RL>) => Stream<A, EL | ER, RL | RR>\n  /**\n   * Composes this stream with the specified stream to create a cartesian\n   * product of elements with a specified function. The `right` stream would be\n   * run multiple times, for every element in the `left` stream.\n   *\n   * See also `Stream.zipWith` for the more common point-wise variant.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <AL, EL, RL, AR, ER, RR, A>(\n    left: Stream<AL, EL, RL>,\n    right: Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): Stream<A, EL | ER, RL | RR>\n} = internal.crossWith\n\n/**\n * Delays the emission of values by holding new values for a set duration. If\n * no new values arrive during that time the value is emitted, however if a\n * new value is received during the holding period the previous value is\n * discarded and the process is repeated with the new value.\n *\n * This operator is useful if you have a stream of \"bursty\" events which\n * eventually settle down and you only need the final event of the burst. For\n * example, a search engine may only want to initiate a search after a user\n * has paused typing so as to not prematurely recommend results.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * let last = Date.now()\n * const log = (message: string) =>\n *   Effect.sync(() => {\n *     const end = Date.now()\n *     console.log(`${message} after ${end - last}ms`)\n *     last = end\n *   })\n *\n * const stream = Stream.make(1, 2, 3).pipe(\n *   Stream.concat(\n *     Stream.fromEffect(Effect.sleep(\"200 millis\").pipe(Effect.as(4))) // Emit 4 after 200 ms\n *   ),\n *   Stream.concat(Stream.make(5, 6)), // Continue with more rapid values\n *   Stream.concat(\n *     Stream.fromEffect(Effect.sleep(\"150 millis\").pipe(Effect.as(7))) // Emit 7 after 150 ms\n *   ),\n *   Stream.concat(Stream.make(8)),\n *   Stream.tap((n) => log(`Received ${n}`)),\n *   Stream.debounce(\"100 millis\"), // Only emit values after a pause of at least 100 milliseconds,\n *   Stream.tap((n) => log(`> Emitted ${n}`))\n * )\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // Received 1 after 5ms\n * // Received 2 after 2ms\n * // Received 3 after 0ms\n * // > Emitted 3 after 104ms\n * // Received 4 after 99ms\n * // Received 5 after 1ms\n * // Received 6 after 0ms\n * // > Emitted 6 after 101ms\n * // Received 7 after 50ms\n * // Received 8 after 1ms\n * // > Emitted 8 after 101ms\n * // { _id: 'Chunk', values: [ 3, 6, 8 ] }\n *\n * @since 2.0.0\n * @category utils\n */\nexport const debounce: {\n  /**\n   * Delays the emission of values by holding new values for a set duration. If\n   * no new values arrive during that time the value is emitted, however if a\n   * new value is received during the holding period the previous value is\n   * discarded and the process is repeated with the new value.\n   *\n   * This operator is useful if you have a stream of \"bursty\" events which\n   * eventually settle down and you only need the final event of the burst. For\n   * example, a search engine may only want to initiate a search after a user\n   * has paused typing so as to not prematurely recommend results.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * let last = Date.now()\n   * const log = (message: string) =>\n   *   Effect.sync(() => {\n   *     const end = Date.now()\n   *     console.log(`${message} after ${end - last}ms`)\n   *     last = end\n   *   })\n   *\n   * const stream = Stream.make(1, 2, 3).pipe(\n   *   Stream.concat(\n   *     Stream.fromEffect(Effect.sleep(\"200 millis\").pipe(Effect.as(4))) // Emit 4 after 200 ms\n   *   ),\n   *   Stream.concat(Stream.make(5, 6)), // Continue with more rapid values\n   *   Stream.concat(\n   *     Stream.fromEffect(Effect.sleep(\"150 millis\").pipe(Effect.as(7))) // Emit 7 after 150 ms\n   *   ),\n   *   Stream.concat(Stream.make(8)),\n   *   Stream.tap((n) => log(`Received ${n}`)),\n   *   Stream.debounce(\"100 millis\"), // Only emit values after a pause of at least 100 milliseconds,\n   *   Stream.tap((n) => log(`> Emitted ${n}`))\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // Received 1 after 5ms\n   * // Received 2 after 2ms\n   * // Received 3 after 0ms\n   * // > Emitted 3 after 104ms\n   * // Received 4 after 99ms\n   * // Received 5 after 1ms\n   * // Received 6 after 0ms\n   * // > Emitted 6 after 101ms\n   * // Received 7 after 50ms\n   * // Received 8 after 1ms\n   * // > Emitted 8 after 101ms\n   * // { _id: 'Chunk', values: [ 3, 6, 8 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (duration: Duration.DurationInput): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E, R>\n  /**\n   * Delays the emission of values by holding new values for a set duration. If\n   * no new values arrive during that time the value is emitted, however if a\n   * new value is received during the holding period the previous value is\n   * discarded and the process is repeated with the new value.\n   *\n   * This operator is useful if you have a stream of \"bursty\" events which\n   * eventually settle down and you only need the final event of the burst. For\n   * example, a search engine may only want to initiate a search after a user\n   * has paused typing so as to not prematurely recommend results.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * let last = Date.now()\n   * const log = (message: string) =>\n   *   Effect.sync(() => {\n   *     const end = Date.now()\n   *     console.log(`${message} after ${end - last}ms`)\n   *     last = end\n   *   })\n   *\n   * const stream = Stream.make(1, 2, 3).pipe(\n   *   Stream.concat(\n   *     Stream.fromEffect(Effect.sleep(\"200 millis\").pipe(Effect.as(4))) // Emit 4 after 200 ms\n   *   ),\n   *   Stream.concat(Stream.make(5, 6)), // Continue with more rapid values\n   *   Stream.concat(\n   *     Stream.fromEffect(Effect.sleep(\"150 millis\").pipe(Effect.as(7))) // Emit 7 after 150 ms\n   *   ),\n   *   Stream.concat(Stream.make(8)),\n   *   Stream.tap((n) => log(`Received ${n}`)),\n   *   Stream.debounce(\"100 millis\"), // Only emit values after a pause of at least 100 milliseconds,\n   *   Stream.tap((n) => log(`> Emitted ${n}`))\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // Received 1 after 5ms\n   * // Received 2 after 2ms\n   * // Received 3 after 0ms\n   * // > Emitted 3 after 104ms\n   * // Received 4 after 99ms\n   * // Received 5 after 1ms\n   * // Received 6 after 0ms\n   * // > Emitted 6 after 101ms\n   * // Received 7 after 50ms\n   * // Received 8 after 1ms\n   * // > Emitted 8 after 101ms\n   * // { _id: 'Chunk', values: [ 3, 6, 8 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(self: Stream<A, E, R>, duration: Duration.DurationInput): Stream<A, E, R>\n} = internal.debounce\n\n/**\n * The stream that dies with the specified defect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const die: (defect: unknown) => Stream<never> = internal.die\n\n/**\n * The stream that dies with the specified lazily evaluated defect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const dieSync: (evaluate: LazyArg<unknown>) => Stream<never> = internal.dieSync\n\n/**\n * The stream that dies with an exception described by `message`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const dieMessage: (message: string) => Stream<never> = internal.dieMessage\n\n/**\n * More powerful version of `Stream.broadcast`. Allows to provide a function\n * that determines what queues should receive which elements. The decide\n * function will receive the indices of the queues in the resulting list.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const distributedWith: {\n  /**\n   * More powerful version of `Stream.broadcast`. Allows to provide a function\n   * that determines what queues should receive which elements. The decide\n   * function will receive the indices of the queues in the resulting list.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <N extends number, A>(\n    options: {\n      readonly size: N\n      readonly maximumLag: number\n      readonly decide: (a: A) => Effect.Effect<Predicate<number>>\n    }\n  ): <E, R>(\n    self: Stream<A, E, R>\n  ) => Effect.Effect<TupleOf<N, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>>, never, Scope.Scope | R>\n  /**\n   * More powerful version of `Stream.broadcast`. Allows to provide a function\n   * that determines what queues should receive which elements. The decide\n   * function will receive the indices of the queues in the resulting list.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, N extends number>(\n    self: Stream<A, E, R>,\n    options: {\n      readonly size: N\n      readonly maximumLag: number\n      readonly decide: (a: A) => Effect.Effect<Predicate<number>>\n    }\n  ): Effect.Effect<TupleOf<N, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>>, never, Scope.Scope | R>\n} = internal.distributedWith\n\n/**\n * More powerful version of `Stream.distributedWith`. This returns a function\n * that will produce new queues and corresponding indices. You can also\n * provide a function that will be executed after the final events are\n * enqueued in all queues. Shutdown of the queues is handled by the driver.\n * Downstream users can also shutdown queues manually. In this case the driver\n * will continue but no longer backpressure on them.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const distributedWithDynamic: {\n  /**\n   * More powerful version of `Stream.distributedWith`. This returns a function\n   * that will produce new queues and corresponding indices. You can also\n   * provide a function that will be executed after the final events are\n   * enqueued in all queues. Shutdown of the queues is handled by the driver.\n   * Downstream users can also shutdown queues manually. In this case the driver\n   * will continue but no longer backpressure on them.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(\n    options: { readonly maximumLag: number; readonly decide: (a: A) => Effect.Effect<Predicate<number>, never, never> }\n  ): <E, R>(\n    self: Stream<A, E, R>\n  ) => Effect.Effect<\n    Effect.Effect<[number, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>], never, never>,\n    never,\n    Scope.Scope | R\n  >\n  /**\n   * More powerful version of `Stream.distributedWith`. This returns a function\n   * that will produce new queues and corresponding indices. You can also\n   * provide a function that will be executed after the final events are\n   * enqueued in all queues. Shutdown of the queues is handled by the driver.\n   * Downstream users can also shutdown queues manually. In this case the driver\n   * will continue but no longer backpressure on them.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(\n    self: Stream<A, E, R>,\n    options: { readonly maximumLag: number; readonly decide: (a: A) => Effect.Effect<Predicate<number>, never, never> }\n  ): Effect.Effect<\n    Effect.Effect<[number, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>], never, never>,\n    never,\n    Scope.Scope | R\n  >\n} = internal.distributedWithDynamic\n\n/**\n * Converts this stream to a stream that executes its effects but emits no\n * elements. Useful for sequencing effects using streams:\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * // We create a stream and immediately drain it.\n * const stream = Stream.range(1, 6).pipe(Stream.drain)\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [] }\n *\n * @since 2.0.0\n * @category utils\n */\nexport const drain: <A, E, R>(self: Stream<A, E, R>) => Stream<never, E, R> = internal.drain\n\n/**\n * Drains the provided stream in the background for as long as this stream is\n * running. If this stream ends before `other`, `other` will be interrupted.\n * If `other` fails, this stream will fail with that error.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const drainFork: {\n  /**\n   * Drains the provided stream in the background for as long as this stream is\n   * running. If this stream ends before `other`, `other` will be interrupted.\n   * If `other` fails, this stream will fail with that error.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A2, E2, R2>(that: Stream<A2, E2, R2>): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E2 | E, R2 | R>\n  /**\n   * Drains the provided stream in the background for as long as this stream is\n   * running. If this stream ends before `other`, `other` will be interrupted.\n   * If `other` fails, this stream will fail with that error.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, A2, E2, R2>(self: Stream<A, E, R>, that: Stream<A2, E2, R2>): Stream<A, E | E2, R | R2>\n} = internal.drainFork\n\n/**\n * Drops the specified number of elements from this stream.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const drop: {\n  /**\n   * Drops the specified number of elements from this stream.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (n: number): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E, R>\n  /**\n   * Drops the specified number of elements from this stream.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(self: Stream<A, E, R>, n: number): Stream<A, E, R>\n} = internal.drop\n\n/**\n * Drops the last specified number of elements from this stream.\n *\n * @note This combinator keeps `n` elements in memory. Be careful with big\n *       numbers.\n * @since 2.0.0\n * @category utils\n */\nexport const dropRight: {\n  /**\n   * Drops the last specified number of elements from this stream.\n   *\n   * @note This combinator keeps `n` elements in memory. Be careful with big\n   *       numbers.\n   * @since 2.0.0\n   * @category utils\n   */\n  (n: number): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E, R>\n  /**\n   * Drops the last specified number of elements from this stream.\n   *\n   * @note This combinator keeps `n` elements in memory. Be careful with big\n   *       numbers.\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(self: Stream<A, E, R>, n: number): Stream<A, E, R>\n} = internal.dropRight\n\n/**\n * Drops all elements of the stream until the specified predicate evaluates to\n * `true`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const dropUntil: {\n  /**\n   * Drops all elements of the stream until the specified predicate evaluates to\n   * `true`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): <E, R>(self: Stream<A, E, R>) => Stream<A, E, R>\n  /**\n   * Drops all elements of the stream until the specified predicate evaluates to\n   * `true`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(self: Stream<A, E, R>, predicate: Predicate<A>): Stream<A, E, R>\n} = internal.dropUntil\n\n/**\n * Drops all elements of the stream until the specified effectful predicate\n * evaluates to `true`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const dropUntilEffect: {\n  /**\n   * Drops all elements of the stream until the specified effectful predicate\n   * evaluates to `true`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E2, R2>(\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Stream<A, E2 | E, R2 | R>\n  /**\n   * Drops all elements of the stream until the specified effectful predicate\n   * evaluates to `true`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, E2, R2>(\n    self: Stream<A, E, R>,\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ): Stream<A, E | E2, R | R2>\n} = internal.dropUntilEffect\n\n/**\n * Drops all elements of the stream for as long as the specified predicate\n * evaluates to `true`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const dropWhile: {\n  /**\n   * Drops all elements of the stream for as long as the specified predicate\n   * evaluates to `true`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): <E, R>(self: Stream<A, E, R>) => Stream<A, E, R>\n  /**\n   * Drops all elements of the stream for as long as the specified predicate\n   * evaluates to `true`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(self: Stream<A, E, R>, predicate: Predicate<A>): Stream<A, E, R>\n} = internal.dropWhile\n\n/**\n * Drops all elements of the stream for as long as the specified predicate\n * produces an effect that evalutates to `true`\n *\n * @since 2.0.0\n * @category utils\n */\nexport const dropWhileEffect: {\n  /**\n   * Drops all elements of the stream for as long as the specified predicate\n   * produces an effect that evalutates to `true`\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E2, R2>(\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Stream<A, E2 | E, R2 | R>\n  /**\n   * Drops all elements of the stream for as long as the specified predicate\n   * produces an effect that evalutates to `true`\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, E2, R2>(\n    self: Stream<A, E, R>,\n    predicate: (a: A) => Effect.Effect<boolean, E2, R2>\n  ): Stream<A, E | E2, R | R2>\n} = internal.dropWhileEffect\n\n/**\n * Returns a stream whose failures and successes have been lifted into an\n * `Either`. The resulting stream cannot fail, because the failures have been\n * exposed as part of the `Either` success case.\n *\n * @note The stream will end as soon as the first error occurs.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const either: <A, E, R>(self: Stream<A, E, R>) => Stream<Either.Either<A, E>, never, R> = internal.either\n\n/**\n * The empty stream.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const stream = Stream.empty\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [] }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: Stream<never> = internal.empty\n\n/**\n * Executes the provided finalizer after this stream's finalizers run.\n *\n * @example\n * import { Console, Effect, Stream } from \"effect\"\n *\n * const program = Stream.fromEffect(Console.log(\"Application Logic.\")).pipe(\n *   Stream.concat(Stream.finalizer(Console.log(\"Finalizing the stream\"))),\n *   Stream.ensuring(\n *     Console.log(\"Doing some other works after stream's finalization\")\n *   )\n * )\n *\n * // Effect.runPromise(Stream.runCollect(program)).then(console.log)\n * // Application Logic.\n * // Finalizing the stream\n * // Doing some other works after stream's finalization\n * // { _id: 'Chunk', values: [ undefined, undefined ] }\n *\n * @since 2.0.0\n * @category utils\n */\nexport const ensuring: {\n  /**\n   * Executes the provided finalizer after this stream's finalizers run.\n   *\n   * @example\n   * import { Console, Effect, Stream } from \"effect\"\n   *\n   * const program = Stream.fromEffect(Console.log(\"Application Logic.\")).pipe(\n   *   Stream.concat(Stream.finalizer(Console.log(\"Finalizing the stream\"))),\n   *   Stream.ensuring(\n   *     Console.log(\"Doing some other works after stream's finalization\")\n   *   )\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(program)).then(console.log)\n   * // Application Logic.\n   * // Finalizing the stream\n   * // Doing some other works after stream's finalization\n   * // { _id: 'Chunk', values: [ undefined, undefined ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <X, R2>(finalizer: Effect.Effect<X, never, R2>): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E, R2 | R>\n  /**\n   * Executes the provided finalizer after this stream's finalizers run.\n   *\n   * @example\n   * import { Console, Effect, Stream } from \"effect\"\n   *\n   * const program = Stream.fromEffect(Console.log(\"Application Logic.\")).pipe(\n   *   Stream.concat(Stream.finalizer(Console.log(\"Finalizing the stream\"))),\n   *   Stream.ensuring(\n   *     Console.log(\"Doing some other works after stream's finalization\")\n   *   )\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(program)).then(console.log)\n   * // Application Logic.\n   * // Finalizing the stream\n   * // Doing some other works after stream's finalization\n   * // { _id: 'Chunk', values: [ undefined, undefined ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, X, R2>(self: Stream<A, E, R>, finalizer: Effect.Effect<X, never, R2>): Stream<A, E, R | R2>\n} = internal.ensuring\n\n/**\n * Executes the provided finalizer after this stream's finalizers run.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const ensuringWith: {\n  /**\n   * Executes the provided finalizer after this stream's finalizers run.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <E, R2>(\n    finalizer: (exit: Exit.Exit<unknown, E>) => Effect.Effect<unknown, never, R2>\n  ): <A, R>(self: Stream<A, E, R>) => Stream<A, E, R2 | R>\n  /**\n   * Executes the provided finalizer after this stream's finalizers run.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, R2>(\n    self: Stream<A, E, R>,\n    finalizer: (exit: Exit.Exit<unknown, E>) => Effect.Effect<unknown, never, R2>\n  ): Stream<A, E, R | R2>\n} = internal.ensuringWith\n\n/**\n * Accesses the whole context of the stream.\n *\n * @since 2.0.0\n * @category context\n */\nexport const context: <R>() => Stream<Context.Context<R>, never, R> = internal.context\n\n/**\n * Accesses the context of the stream.\n *\n * @since 2.0.0\n * @category context\n */\nexport const contextWith: <R, A>(f: (env: Context.Context<R>) => A) => Stream<A, never, R> = internal.contextWith\n\n/**\n * Accesses the context of the stream in the context of an effect.\n *\n * @since 2.0.0\n * @category context\n */\nexport const contextWithEffect: <R0, A, E, R>(\n  f: (env: Context.Context<R0>) => Effect.Effect<A, E, R>\n) => Stream<A, E, R0 | R> = internal.contextWithEffect\n\n/**\n * Accesses the context of the stream in the context of a stream.\n *\n * @since 2.0.0\n * @category context\n */\nexport const contextWithStream: <R0, A, E, R>(\n  f: (env: Context.Context<R0>) => Stream<A, E, R>\n) => Stream<A, E, R0 | R> = internal.contextWithStream\n\n/**\n * Creates a stream that executes the specified effect but emits no elements.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const execute: <X, E, R>(effect: Effect.Effect<X, E, R>) => Stream<never, E, R> = internal.execute\n\n/**\n * Terminates with the specified error.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const stream = Stream.fail(\"Uh oh!\")\n *\n * Effect.runPromiseExit(Stream.runCollect(stream)).then(console.log)\n * // {\n * //   _id: 'Exit',\n * //   _tag: 'Failure',\n * //   cause: { _id: 'Cause', _tag: 'Fail', failure: 'Uh oh!' }\n * // }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fail: <E>(error: E) => Stream<never, E> = internal.fail\n\n/**\n * Terminates with the specified lazily evaluated error.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const failSync: <E>(evaluate: LazyArg<E>) => Stream<never, E> = internal.failSync\n\n/**\n * The stream that always fails with the specified `Cause`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const failCause: <E>(cause: Cause.Cause<E>) => Stream<never, E> = internal.failCause\n\n/**\n * The stream that always fails with the specified lazily evaluated `Cause`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const failCauseSync: <E>(evaluate: LazyArg<Cause.Cause<E>>) => Stream<never, E> = internal.failCauseSync\n\n/**\n * Filters the elements emitted by this stream using the provided function.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const stream = Stream.range(1, 11).pipe(Stream.filter((n) => n % 2 === 0))\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [ 2, 4, 6, 8, 10 ] }\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filter: {\n  /**\n   * Filters the elements emitted by this stream using the provided function.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.range(1, 11).pipe(Stream.filter((n) => n % 2 === 0))\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 2, 4, 6, 8, 10 ] }\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): <E, R>(self: Stream<A, E, R>) => Stream<B, E, R>\n  /**\n   * Filters the elements emitted by this stream using the provided function.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.range(1, 11).pipe(Stream.filter((n) => n % 2 === 0))\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 2, 4, 6, 8, 10 ] }\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A, B extends A>(predicate: Predicate<B>): <E, R>(self: Stream<A, E, R>) => Stream<A, E, R>\n  /**\n   * Filters the elements emitted by this stream using the provided function.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.range(1, 11).pipe(Stream.filter((n) => n % 2 === 0))\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 2, 4, 6, 8, 10 ] }\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A, E, R, B extends A>(self: Stream<A, E, R>, refinement: Refinement<A, B>): Stream<B, E, R>\n  /**\n   * Filters the elements emitted by this stream using the provided function.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.range(1, 11).pipe(Stream.filter((n) => n % 2 === 0))\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 2, 4, 6, 8, 10 ] }\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A, E, R>(self: Stream<A, E, R>, predicate: Predicate<A>): Stream<A, E, R>\n} = internal.filter\n\n/**\n * Effectfully filters the elements emitted by this stream.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filterEffect: {\n  /**\n   * Effectfully filters the elements emitted by this stream.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A, E2, R2>(\n    f: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Stream<A, E2 | E, R2 | R>\n  /**\n   * Effectfully filters the elements emitted by this stream.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A, E, R, E2, R2>(self: Stream<A, E, R>, f: (a: A) => Effect.Effect<boolean, E2, R2>): Stream<A, E | E2, R | R2>\n} = internal.filterEffect\n\n/**\n * Performs a filter and map in a single step.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const filterMap: {\n  /**\n   * Performs a filter and map in a single step.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, B>(pf: (a: A) => Option.Option<B>): <E, R>(self: Stream<A, E, R>) => Stream<B, E, R>\n  /**\n   * Performs a filter and map in a single step.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, B>(self: Stream<A, E, R>, pf: (a: A) => Option.Option<B>): Stream<B, E, R>\n} = internal.filterMap\n\n/**\n * Performs an effectful filter and map in a single step.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const filterMapEffect: {\n  /**\n   * Performs an effectful filter and map in a single step.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, A2, E2, R2>(\n    pf: (a: A) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ): <E, R>(self: Stream<A, E, R>) => Stream<A2, E2 | E, R2 | R>\n  /**\n   * Performs an effectful filter and map in a single step.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Stream<A, E, R>,\n    pf: (a: A) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ): Stream<A2, E | E2, R | R2>\n} = internal.filterMapEffect\n\n/**\n * Transforms all elements of the stream for as long as the specified partial\n * function is defined.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const filterMapWhile: {\n  /**\n   * Transforms all elements of the stream for as long as the specified partial\n   * function is defined.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, A2>(pf: (a: A) => Option.Option<A2>): <E, R>(self: Stream<A, E, R>) => Stream<A2, E, R>\n  /**\n   * Transforms all elements of the stream for as long as the specified partial\n   * function is defined.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, A2>(self: Stream<A, E, R>, pf: (a: A) => Option.Option<A2>): Stream<A2, E, R>\n} = internal.filterMapWhile\n\n/**\n * Effectfully transforms all elements of the stream for as long as the\n * specified partial function is defined.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const filterMapWhileEffect: {\n  /**\n   * Effectfully transforms all elements of the stream for as long as the\n   * specified partial function is defined.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, A2, E2, R2>(\n    pf: (a: A) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ): <E, R>(self: Stream<A, E, R>) => Stream<A2, E2 | E, R2 | R>\n  /**\n   * Effectfully transforms all elements of the stream for as long as the\n   * specified partial function is defined.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Stream<A, E, R>,\n    pf: (a: A) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ): Stream<A2, E | E2, R | R2>\n} = internal.filterMapWhileEffect\n\n/**\n * Creates a one-element stream that never fails and executes the finalizer\n * when it ends.\n *\n * @example\n * import { Console, Effect, Stream } from \"effect\"\n *\n * const application = Stream.fromEffect(Console.log(\"Application Logic.\"))\n *\n * const deleteDir = (dir: string) => Console.log(`Deleting dir: ${dir}`)\n *\n * const program = application.pipe(\n *   Stream.concat(\n *     Stream.finalizer(\n *       deleteDir(\"tmp\").pipe(\n *         Effect.andThen(Console.log(\"Temporary directory was deleted.\"))\n *       )\n *     )\n *   )\n * )\n *\n * // Effect.runPromise(Stream.runCollect(program)).then(console.log)\n * // Application Logic.\n * // Deleting dir: tmp\n * // Temporary directory was deleted.\n * // { _id: 'Chunk', values: [ undefined, undefined ] }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const finalizer: <R, X>(finalizer: Effect.Effect<X, never, R>) => Stream<void, never, R> = internal.finalizer\n\n/**\n * Finds the first element emitted by this stream that satisfies the provided\n * predicate.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const find: {\n  /**\n   * Finds the first element emitted by this stream that satisfies the provided\n   * predicate.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): <E, R>(self: Stream<A, E, R>) => Stream<B, E, R>\n  /**\n   * Finds the first element emitted by this stream that satisfies the provided\n   * predicate.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): <E, R>(self: Stream<A, E, R>) => Stream<A, E, R>\n  /**\n   * Finds the first element emitted by this stream that satisfies the provided\n   * predicate.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, E, R, B extends A>(self: Stream<A, E, R>, refinement: Refinement<A, B>): Stream<B, E, R>\n  /**\n   * Finds the first element emitted by this stream that satisfies the provided\n   * predicate.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, E, R>(self: Stream<A, E, R>, predicate: Predicate<A>): Stream<A, E, R>\n} = internal.find\n\n/**\n * Finds the first element emitted by this stream that satisfies the provided\n * effectful predicate.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const findEffect: {\n  /**\n   * Finds the first element emitted by this stream that satisfies the provided\n   * effectful predicate.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, E2, R2>(\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Stream<A, E2 | E, R2 | R>\n  /**\n   * Finds the first element emitted by this stream that satisfies the provided\n   * effectful predicate.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, E, R, E2, R2>(\n    self: Stream<A, E, R>,\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ): Stream<A, E | E2, R | R2>\n} = internal.findEffect\n\n/**\n * Returns a stream made of the concatenation in strict order of all the\n * streams produced by passing each element of this stream to `f0`\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  /**\n   * Returns a stream made of the concatenation in strict order of all the\n   * streams produced by passing each element of this stream to `f0`\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, A2, E2, R2>(\n    f: (a: A) => Stream<A2, E2, R2>,\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly bufferSize?: number | undefined\n      readonly switch?: boolean | undefined\n    } | undefined\n  ): <E, R>(self: Stream<A, E, R>) => Stream<A2, E2 | E, R2 | R>\n  /**\n   * Returns a stream made of the concatenation in strict order of all the\n   * streams produced by passing each element of this stream to `f0`\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Stream<A, E, R>,\n    f: (a: A) => Stream<A2, E2, R2>,\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly bufferSize?: number | undefined\n      readonly switch?: boolean | undefined\n    } | undefined\n  ): Stream<A2, E | E2, R | R2>\n} = internal.flatMap\n\n/**\n * Flattens this stream-of-streams into a stream made of the concatenation in\n * strict order of all the streams.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatten: {\n  /**\n   * Flattens this stream-of-streams into a stream made of the concatenation in\n   * strict order of all the streams.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  (\n    options?:\n      | { readonly concurrency?: number | \"unbounded\" | undefined; readonly bufferSize?: number | undefined }\n      | undefined\n  ): <A, E2, R2, E, R>(self: Stream<Stream<A, E2, R2>, E, R>) => Stream<A, E2 | E, R2 | R>\n  /**\n   * Flattens this stream-of-streams into a stream made of the concatenation in\n   * strict order of all the streams.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E2, R2, E, R>(\n    self: Stream<Stream<A, E2, R2>, E, R>,\n    options?:\n      | { readonly concurrency?: number | \"unbounded\" | undefined; readonly bufferSize?: number | undefined }\n      | undefined\n  ): Stream<A, E2 | E, R2 | R>\n} = internal.flatten\n\n/**\n * Submerges the chunks carried by this stream into the stream's structure,\n * while still preserving them.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flattenChunks: <A, E, R>(self: Stream<Chunk.Chunk<A>, E, R>) => Stream<A, E, R> = internal.flattenChunks\n\n/**\n * Flattens `Effect` values into the stream's structure, preserving all\n * information about the effect.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flattenEffect: {\n  /**\n   * Flattens `Effect` values into the stream's structure, preserving all\n   * information about the effect.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  (\n    options?:\n      | { readonly concurrency?: number | \"unbounded\" | undefined; readonly unordered?: boolean | undefined }\n      | undefined\n  ): <A, E2, R2, E, R>(self: Stream<Effect.Effect<A, E2, R2>, E, R>) => Stream<A, E2 | E, R2 | R>\n  /**\n   * Flattens `Effect` values into the stream's structure, preserving all\n   * information about the effect.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E2, R2, E, R>(\n    self: Stream<Effect.Effect<A, E2, R2>, E, R>,\n    options?:\n      | { readonly concurrency?: number | \"unbounded\" | undefined; readonly unordered?: boolean | undefined }\n      | undefined\n  ): Stream<A, E2 | E, R2 | R>\n} = internal.flattenEffect\n\n/**\n * Unwraps `Exit` values that also signify end-of-stream by failing with `None`.\n *\n * For `Exit` values that do not signal end-of-stream, prefer:\n *\n * ```ts\n * stream.mapZIO(ZIO.done(_))\n * ```\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flattenExitOption: <A, E2, E, R>(\n  self: Stream<Exit.Exit<A, Option.Option<E2>>, E, R>\n) => Stream<A, E | E2, R> = internal.flattenExitOption\n\n/**\n * Submerges the iterables carried by this stream into the stream's structure,\n * while still preserving them.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flattenIterables: <A, E, R>(self: Stream<Iterable<A>, E, R>) => Stream<A, E, R> = internal.flattenIterables\n\n/**\n * Unwraps `Exit` values and flatten chunks that also signify end-of-stream\n * by failing with `None`.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flattenTake: <A, E2, E, R>(self: Stream<Take.Take<A, E2>, E, R>) => Stream<A, E | E2, R> =\n  internal.flattenTake\n\n/**\n * Repeats this stream forever.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const forever: <A, E, R>(self: Stream<A, E, R>) => Stream<A, E, R> = internal.forever\n\n/**\n * Creates a stream from an `AsyncIterable`.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const myAsyncIterable = async function*() {\n *   yield 1\n *   yield 2\n * }\n *\n * const stream = Stream.fromAsyncIterable(\n *   myAsyncIterable(),\n *   (e) => new Error(String(e)) // Error Handling\n * )\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [ 1, 2 ] }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromAsyncIterable: <A, E>(iterable: AsyncIterable<A>, onError: (e: unknown) => E) => Stream<A, E> =\n  internal.fromAsyncIterable\n\n/**\n * Creates a stream from a `Channel`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromChannel: <A, E, R>(\n  channel: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown, R>\n) => Stream<A, E, R> = internal.fromChannel\n\n/**\n * Creates a channel from a `Stream`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const toChannel: <A, E, R>(\n  stream: Stream<A, E, R>\n) => Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown, R> = internal.toChannel\n\n/**\n * Creates a stream from a `Chunk` of values.\n *\n * @example\n * import { Chunk, Effect, Stream } from \"effect\"\n *\n * // Creating a stream with values from a single Chunk\n * const stream = Stream.fromChunk(Chunk.make(1, 2, 3))\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [ 1, 2, 3 ] }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromChunk: <A>(chunk: Chunk.Chunk<A>) => Stream<A> = internal.fromChunk\n\n/**\n * Creates a stream from a subscription to a `PubSub`.\n *\n * @param shutdown If `true`, the `PubSub` will be shutdown after the stream is evaluated (defaults to `false`)\n * @since 2.0.0\n * @category constructors\n */\nexport const fromChunkPubSub: {\n  /**\n   * Creates a stream from a subscription to a `PubSub`.\n   *\n   * @param shutdown If `true`, the `PubSub` will be shutdown after the stream is evaluated (defaults to `false`)\n   * @since 2.0.0\n   * @category constructors\n   */\n  <A>(\n    pubsub: PubSub.PubSub<Chunk.Chunk<A>>,\n    options: { readonly scoped: true; readonly shutdown?: boolean | undefined }\n  ): Effect.Effect<Stream<A>, never, Scope.Scope>\n  /**\n   * Creates a stream from a subscription to a `PubSub`.\n   *\n   * @param shutdown If `true`, the `PubSub` will be shutdown after the stream is evaluated (defaults to `false`)\n   * @since 2.0.0\n   * @category constructors\n   */\n  <A>(\n    pubsub: PubSub.PubSub<Chunk.Chunk<A>>,\n    options?: { readonly scoped?: false | undefined; readonly shutdown?: boolean | undefined } | undefined\n  ): Stream<A>\n} = internal.fromChunkPubSub\n\n/**\n * Creates a stream from a `Queue` of values.\n *\n * @param shutdown If `true`, the queue will be shutdown after the stream is evaluated (defaults to `false`)\n * @since 2.0.0\n * @category constructors\n */\nexport const fromChunkQueue: <A>(\n  queue: Queue.Dequeue<Chunk.Chunk<A>>,\n  options?: {\n    readonly shutdown?: boolean | undefined\n  }\n) => Stream<A> = internal.fromChunkQueue\n\n/**\n * Creates a stream from an arbitrary number of chunks.\n *\n * @example\n * import { Chunk, Effect, Stream } from \"effect\"\n *\n * // Creating a stream with values from multiple Chunks\n * const stream = Stream.fromChunks(Chunk.make(1, 2, 3), Chunk.make(4, 5, 6))\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [ 1, 2, 3, 4, 5, 6 ] }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromChunks: <A>(...chunks: Array<Chunk.Chunk<A>>) => Stream<A> = internal.fromChunks\n\n/**\n * Either emits the success value of this effect or terminates the stream\n * with the failure value of this effect.\n *\n * @example\n * import { Effect, Random, Stream } from \"effect\"\n *\n * const stream = Stream.fromEffect(Random.nextInt)\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // Example Output: { _id: 'Chunk', values: [ 922694024 ] }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromEffect: <A, E, R>(effect: Effect.Effect<A, E, R>) => Stream<A, E, R> = internal.fromEffect\n\n/**\n * Creates a stream from an effect producing a value of type `A` or an empty\n * `Stream`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromEffectOption: <A, E, R>(effect: Effect.Effect<A, Option.Option<E>, R>) => Stream<A, E, R> =\n  internal.fromEffectOption\n\n/**\n * Creates a stream from a subscription to a `PubSub`.\n *\n * @param shutdown If `true`, the `PubSub` will be shutdown after the stream is evaluated (defaults to `false`)\n * @since 2.0.0\n * @category constructors\n */\nexport const fromPubSub: {\n  /**\n   * Creates a stream from a subscription to a `PubSub`.\n   *\n   * @param shutdown If `true`, the `PubSub` will be shutdown after the stream is evaluated (defaults to `false`)\n   * @since 2.0.0\n   * @category constructors\n   */\n  <A>(\n    pubsub: PubSub.PubSub<A>,\n    options: {\n      readonly scoped: true\n      readonly maxChunkSize?: number | undefined\n      readonly shutdown?: boolean | undefined\n    }\n  ): Effect.Effect<Stream<A>, never, Scope.Scope>\n  /**\n   * Creates a stream from a subscription to a `PubSub`.\n   *\n   * @param shutdown If `true`, the `PubSub` will be shutdown after the stream is evaluated (defaults to `false`)\n   * @since 2.0.0\n   * @category constructors\n   */\n  <A>(\n    pubsub: PubSub.PubSub<A>,\n    options?: {\n      readonly scoped?: false | undefined\n      readonly maxChunkSize?: number | undefined\n      readonly shutdown?: boolean | undefined\n    } | undefined\n  ): Stream<A>\n} = internal.fromPubSub\n\n/**\n * Creates a stream from a subscription to a `TPubSub`.\n *\n * @since 3.10.0\n * @category constructors\n */\nexport const fromTPubSub: <A>(pubsub: TPubSub<A>) => Stream<A> = internal.fromTPubSub\n\n/**\n * Creates a new `Stream` from an iterable collection of values.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n *\n * const stream = Stream.fromIterable(numbers)\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [ 1, 2, 3 ] }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterable: <A>(iterable: Iterable<A>) => Stream<A> = internal.fromIterable\n\n/**\n * Creates a stream from an effect producing a value of type `Iterable<A>`.\n *\n * @example\n * import { Context, Effect, Stream } from \"effect\"\n *\n * class Database extends Context.Tag(\"Database\")<\n *   Database,\n *   { readonly getUsers: Effect.Effect<Array<string>> }\n * >() {}\n *\n * const getUsers = Database.pipe(Effect.andThen((_) => _.getUsers))\n *\n * const stream = Stream.fromIterableEffect(getUsers)\n *\n * // Effect.runPromise(\n * //   Stream.runCollect(stream.pipe(Stream.provideService(Database, { getUsers: Effect.succeed([\"user1\", \"user2\"]) })))\n * // ).then(console.log)\n * // { _id: 'Chunk', values: [ 'user1', 'user2' ] }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIterableEffect: <A, E, R>(effect: Effect.Effect<Iterable<A>, E, R>) => Stream<A, E, R> =\n  internal.fromIterableEffect\n\n/**\n * Creates a stream from an iterator\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromIteratorSucceed: <A>(iterator: IterableIterator<A>, maxChunkSize?: number) => Stream<A> =\n  internal.fromIteratorSucceed\n\n/**\n * Creates a stream from an effect that pulls elements from another stream.\n *\n * See `Stream.toPull` for reference.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromPull: <R, R2, E, A>(\n  effect: Effect.Effect<Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R2>, never, Scope.Scope | R>\n) => Stream<A, E, R2 | Exclude<R, Scope.Scope>> = internal.fromPull\n\n/**\n * Creates a stream from a queue of values\n *\n * @param maxChunkSize The maximum number of queued elements to put in one chunk in the stream\n * @param shutdown If `true`, the queue will be shutdown after the stream is evaluated (defaults to `false`)\n * @since 2.0.0\n * @category constructors\n */\nexport const fromQueue: <A>(\n  queue: Queue.Dequeue<A>,\n  options?: {\n    readonly maxChunkSize?: number | undefined\n    readonly shutdown?: boolean | undefined\n  }\n) => Stream<A> = internal.fromQueue\n\n/**\n * Creates a stream from a TQueue of values\n *\n * @since 3.10.0\n * @category constructors\n */\nexport const fromTQueue: <A>(queue: TDequeue<A>) => Stream<A> = internal.fromTQueue\n\n/**\n * Creates a stream from a `ReadableStream`.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromReadableStream: {\n  /**\n   * Creates a stream from a `ReadableStream`.\n   *\n   * See https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <A, E>(\n    options: {\n      readonly evaluate: LazyArg<ReadableStream<A>>\n      readonly onError: (error: unknown) => E\n      readonly releaseLockOnEnd?: boolean | undefined\n    }\n  ): Stream<A, E>\n  /**\n   * Creates a stream from a `ReadableStream`.\n   *\n   * See https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <A, E>(evaluate: LazyArg<ReadableStream<A>>, onError: (error: unknown) => E): Stream<A, E>\n} = internal.fromReadableStream\n\n/**\n * Creates a stream from a `ReadableStreamBYOBReader`.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamBYOBReader.\n *\n * @param allocSize Controls the size of the underlying `ArrayBuffer` (defaults to `4096`).\n * @since 2.0.0\n * @category constructors\n */\nexport const fromReadableStreamByob: {\n  /**\n   * Creates a stream from a `ReadableStreamBYOBReader`.\n   *\n   * See https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamBYOBReader.\n   *\n   * @param allocSize Controls the size of the underlying `ArrayBuffer` (defaults to `4096`).\n   * @since 2.0.0\n   * @category constructors\n   */\n  <E>(\n    options: {\n      readonly evaluate: LazyArg<ReadableStream<Uint8Array>>\n      readonly onError: (error: unknown) => E\n      readonly bufferSize?: number | undefined\n      readonly releaseLockOnEnd?: boolean | undefined\n    }\n  ): Stream<Uint8Array, E>\n  /**\n   * Creates a stream from a `ReadableStreamBYOBReader`.\n   *\n   * See https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamBYOBReader.\n   *\n   * @param allocSize Controls the size of the underlying `ArrayBuffer` (defaults to `4096`).\n   * @since 2.0.0\n   * @category constructors\n   */\n  <E>(\n    evaluate: LazyArg<ReadableStream<Uint8Array>>,\n    onError: (error: unknown) => E,\n    allocSize?: number\n  ): Stream<Uint8Array, E>\n} = internal.fromReadableStreamByob\n\n/**\n * Creates a stream from a `Schedule` that does not require any further\n * input. The stream will emit an element for each value output from the\n * schedule, continuing for as long as the schedule continues.\n *\n * @example\n * import { Effect, Schedule, Stream } from \"effect\"\n *\n * // Emits values every 1 second for a total of 5 emissions\n * const schedule = Schedule.spaced(\"1 second\").pipe(\n *   Schedule.compose(Schedule.recurs(5))\n * )\n *\n * const stream = Stream.fromSchedule(schedule)\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [ 0, 1, 2, 3, 4 ] }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromSchedule: <A, R>(schedule: Schedule.Schedule<A, unknown, R>) => Stream<A, never, R> =\n  internal.fromSchedule\n\n/**\n * Creates a pipeline that groups on adjacent keys, calculated by the\n * specified function.\n *\n * @since 2.0.0\n * @category grouping\n */\nexport const groupAdjacentBy: {\n  /**\n   * Creates a pipeline that groups on adjacent keys, calculated by the\n   * specified function.\n   *\n   * @since 2.0.0\n   * @category grouping\n   */\n  <A, K>(f: (a: A) => K): <E, R>(self: Stream<A, E, R>) => Stream<[K, Chunk.NonEmptyChunk<A>], E, R>\n  /**\n   * Creates a pipeline that groups on adjacent keys, calculated by the\n   * specified function.\n   *\n   * @since 2.0.0\n   * @category grouping\n   */\n  <A, E, R, K>(self: Stream<A, E, R>, f: (a: A) => K): Stream<[K, Chunk.NonEmptyChunk<A>], E, R>\n} = internal.groupAdjacentBy\n\n/**\n * More powerful version of `Stream.groupByKey`.\n *\n * @example\n * import { Chunk, Effect, GroupBy, Stream } from \"effect\"\n *\n * const groupByKeyResult = Stream.fromIterable([\n *   \"Mary\",\n *   \"James\",\n *   \"Robert\",\n *   \"Patricia\",\n *   \"John\",\n *   \"Jennifer\",\n *   \"Rebecca\",\n *   \"Peter\"\n * ]).pipe(\n *   Stream.groupBy((name) => Effect.succeed([name.substring(0, 1), name]))\n * )\n *\n * const stream = GroupBy.evaluate(groupByKeyResult, (key, stream) =>\n *   Stream.fromEffect(\n *     Stream.runCollect(stream).pipe(\n *       Effect.andThen((chunk) => [key, Chunk.size(chunk)] as const)\n *     )\n *   ))\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // {\n * //   _id: 'Chunk',\n * //   values: [ [ 'M', 1 ], [ 'J', 3 ], [ 'R', 2 ], [ 'P', 2 ] ]\n * // }\n *\n * @since 2.0.0\n * @category grouping\n */\nexport const groupBy: {\n  /**\n   * More powerful version of `Stream.groupByKey`.\n   *\n   * @example\n   * import { Chunk, Effect, GroupBy, Stream } from \"effect\"\n   *\n   * const groupByKeyResult = Stream.fromIterable([\n   *   \"Mary\",\n   *   \"James\",\n   *   \"Robert\",\n   *   \"Patricia\",\n   *   \"John\",\n   *   \"Jennifer\",\n   *   \"Rebecca\",\n   *   \"Peter\"\n   * ]).pipe(\n   *   Stream.groupBy((name) => Effect.succeed([name.substring(0, 1), name]))\n   * )\n   *\n   * const stream = GroupBy.evaluate(groupByKeyResult, (key, stream) =>\n   *   Stream.fromEffect(\n   *     Stream.runCollect(stream).pipe(\n   *       Effect.andThen((chunk) => [key, Chunk.size(chunk)] as const)\n   *     )\n   *   ))\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // {\n   * //   _id: 'Chunk',\n   * //   values: [ [ 'M', 1 ], [ 'J', 3 ], [ 'R', 2 ], [ 'P', 2 ] ]\n   * // }\n   *\n   * @since 2.0.0\n   * @category grouping\n   */\n  <A, K, V, E2, R2>(\n    f: (a: A) => Effect.Effect<readonly [K, V], E2, R2>,\n    options?: { readonly bufferSize?: number | undefined } | undefined\n  ): <E, R>(self: Stream<A, E, R>) => GroupBy.GroupBy<K, V, E2 | E, R2 | R>\n  /**\n   * More powerful version of `Stream.groupByKey`.\n   *\n   * @example\n   * import { Chunk, Effect, GroupBy, Stream } from \"effect\"\n   *\n   * const groupByKeyResult = Stream.fromIterable([\n   *   \"Mary\",\n   *   \"James\",\n   *   \"Robert\",\n   *   \"Patricia\",\n   *   \"John\",\n   *   \"Jennifer\",\n   *   \"Rebecca\",\n   *   \"Peter\"\n   * ]).pipe(\n   *   Stream.groupBy((name) => Effect.succeed([name.substring(0, 1), name]))\n   * )\n   *\n   * const stream = GroupBy.evaluate(groupByKeyResult, (key, stream) =>\n   *   Stream.fromEffect(\n   *     Stream.runCollect(stream).pipe(\n   *       Effect.andThen((chunk) => [key, Chunk.size(chunk)] as const)\n   *     )\n   *   ))\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // {\n   * //   _id: 'Chunk',\n   * //   values: [ [ 'M', 1 ], [ 'J', 3 ], [ 'R', 2 ], [ 'P', 2 ] ]\n   * // }\n   *\n   * @since 2.0.0\n   * @category grouping\n   */\n  <A, E, R, K, V, E2, R2>(\n    self: Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<readonly [K, V], E2, R2>,\n    options?: { readonly bufferSize?: number | undefined } | undefined\n  ): GroupBy.GroupBy<K, V, E | E2, R | R2>\n} = _groupBy.groupBy\n\n/**\n * Partition a stream using a function and process each stream individually.\n * This returns a data structure that can be used to further filter down which\n * groups shall be processed.\n *\n * After calling apply on the GroupBy object, the remaining groups will be\n * processed in parallel and the resulting streams merged in a\n * nondeterministic fashion.\n *\n * Up to `buffer` elements may be buffered in any group stream before the\n * producer is backpressured. Take care to consume from all streams in order\n * to prevent deadlocks.\n *\n * For example, to collect the first 2 words for every starting letter from a\n * stream of words:\n *\n * ```ts\n * import * as GroupBy from \"./GroupBy\"\n * import * as Stream from \"./Stream\"\n * import { pipe } from \"./Function\"\n *\n * pipe(\n *   Stream.fromIterable([\"hello\", \"world\", \"hi\", \"holla\"]),\n *   Stream.groupByKey((word) => word[0]),\n *   GroupBy.evaluate((key, stream) =>\n *     pipe(\n *       stream,\n *       Stream.take(2),\n *       Stream.map((words) => [key, words] as const)\n *     )\n *   )\n * )\n * ```\n *\n * @since 2.0.0\n * @category grouping\n */\nexport const groupByKey: {\n  /**\n   * Partition a stream using a function and process each stream individually.\n   * This returns a data structure that can be used to further filter down which\n   * groups shall be processed.\n   *\n   * After calling apply on the GroupBy object, the remaining groups will be\n   * processed in parallel and the resulting streams merged in a\n   * nondeterministic fashion.\n   *\n   * Up to `buffer` elements may be buffered in any group stream before the\n   * producer is backpressured. Take care to consume from all streams in order\n   * to prevent deadlocks.\n   *\n   * For example, to collect the first 2 words for every starting letter from a\n   * stream of words:\n   *\n   * ```ts\n   * import * as GroupBy from \"./GroupBy\"\n   * import * as Stream from \"./Stream\"\n   * import { pipe } from \"./Function\"\n   *\n   * pipe(\n   *   Stream.fromIterable([\"hello\", \"world\", \"hi\", \"holla\"]),\n   *   Stream.groupByKey((word) => word[0]),\n   *   GroupBy.evaluate((key, stream) =>\n   *     pipe(\n   *       stream,\n   *       Stream.take(2),\n   *       Stream.map((words) => [key, words] as const)\n   *     )\n   *   )\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category grouping\n   */\n  <A, K>(\n    f: (a: A) => K,\n    options?: {\n      readonly bufferSize?: number | undefined\n    }\n  ): <E, R>(self: Stream<A, E, R>) => GroupBy.GroupBy<K, A, E, R>\n  /**\n   * Partition a stream using a function and process each stream individually.\n   * This returns a data structure that can be used to further filter down which\n   * groups shall be processed.\n   *\n   * After calling apply on the GroupBy object, the remaining groups will be\n   * processed in parallel and the resulting streams merged in a\n   * nondeterministic fashion.\n   *\n   * Up to `buffer` elements may be buffered in any group stream before the\n   * producer is backpressured. Take care to consume from all streams in order\n   * to prevent deadlocks.\n   *\n   * For example, to collect the first 2 words for every starting letter from a\n   * stream of words:\n   *\n   * ```ts\n   * import * as GroupBy from \"./GroupBy\"\n   * import * as Stream from \"./Stream\"\n   * import { pipe } from \"./Function\"\n   *\n   * pipe(\n   *   Stream.fromIterable([\"hello\", \"world\", \"hi\", \"holla\"]),\n   *   Stream.groupByKey((word) => word[0]),\n   *   GroupBy.evaluate((key, stream) =>\n   *     pipe(\n   *       stream,\n   *       Stream.take(2),\n   *       Stream.map((words) => [key, words] as const)\n   *     )\n   *   )\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category grouping\n   */\n  <A, E, R, K>(\n    self: Stream<A, E, R>,\n    f: (a: A) => K,\n    options?: {\n      readonly bufferSize?: number | undefined\n    }\n  ): GroupBy.GroupBy<K, A, E, R>\n} = _groupBy.groupByKey\n\n/**\n * Partitions the stream with specified `chunkSize`.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const stream = Stream.range(0, 8).pipe(Stream.grouped(3))\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then((chunks) => console.log(\"%o\", chunks))\n * // {\n * //   _id: 'Chunk',\n * //   values: [\n * //     { _id: 'Chunk', values: [ 0, 1, 2, [length]: 3 ] },\n * //     { _id: 'Chunk', values: [ 3, 4, 5, [length]: 3 ] },\n * //     { _id: 'Chunk', values: [ 6, 7, 8, [length]: 3 ] },\n * //     [length]: 3\n * //   ]\n * // }\n *\n * @since 2.0.0\n * @category grouping\n */\nexport const grouped: {\n  /**\n   * Partitions the stream with specified `chunkSize`.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.range(0, 8).pipe(Stream.grouped(3))\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then((chunks) => console.log(\"%o\", chunks))\n   * // {\n   * //   _id: 'Chunk',\n   * //   values: [\n   * //     { _id: 'Chunk', values: [ 0, 1, 2, [length]: 3 ] },\n   * //     { _id: 'Chunk', values: [ 3, 4, 5, [length]: 3 ] },\n   * //     { _id: 'Chunk', values: [ 6, 7, 8, [length]: 3 ] },\n   * //     [length]: 3\n   * //   ]\n   * // }\n   *\n   * @since 2.0.0\n   * @category grouping\n   */\n  (chunkSize: number): <A, E, R>(self: Stream<A, E, R>) => Stream<Chunk.Chunk<A>, E, R>\n  /**\n   * Partitions the stream with specified `chunkSize`.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.range(0, 8).pipe(Stream.grouped(3))\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then((chunks) => console.log(\"%o\", chunks))\n   * // {\n   * //   _id: 'Chunk',\n   * //   values: [\n   * //     { _id: 'Chunk', values: [ 0, 1, 2, [length]: 3 ] },\n   * //     { _id: 'Chunk', values: [ 3, 4, 5, [length]: 3 ] },\n   * //     { _id: 'Chunk', values: [ 6, 7, 8, [length]: 3 ] },\n   * //     [length]: 3\n   * //   ]\n   * // }\n   *\n   * @since 2.0.0\n   * @category grouping\n   */\n  <A, E, R>(self: Stream<A, E, R>, chunkSize: number): Stream<Chunk.Chunk<A>, E, R>\n} = internal.grouped\n\n/**\n * Partitions the stream with the specified `chunkSize` or until the specified\n * `duration` has passed, whichever is satisfied first.\n *\n * @example\n * import { Chunk, Effect, Schedule, Stream } from \"effect\"\n *\n * const stream = Stream.range(0, 9).pipe(\n *   Stream.repeat(Schedule.spaced(\"1 second\")),\n *   Stream.groupedWithin(18, \"1.5 seconds\"),\n *   Stream.take(3)\n * )\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then((chunks) => console.log(Chunk.toArray(chunks)))\n * // [\n * //   {\n * //     _id: 'Chunk',\n * //     values: [\n * //       0, 1, 2, 3, 4, 5, 6,\n * //       7, 8, 9, 0, 1, 2, 3,\n * //       4, 5, 6, 7\n * //     ]\n * //   },\n * //   {\n * //     _id: 'Chunk',\n * //     values: [\n * //       8, 9, 0, 1, 2,\n * //       3, 4, 5, 6, 7,\n * //       8, 9\n * //     ]\n * //   },\n * //   {\n * //     _id: 'Chunk',\n * //     values: [\n * //       0, 1, 2, 3, 4, 5, 6,\n * //       7, 8, 9, 0, 1, 2, 3,\n * //       4, 5, 6, 7\n * //     ]\n * //   }\n * // ]\n *\n * @since 2.0.0\n * @category grouping\n */\nexport const groupedWithin: {\n  /**\n   * Partitions the stream with the specified `chunkSize` or until the specified\n   * `duration` has passed, whichever is satisfied first.\n   *\n   * @example\n   * import { Chunk, Effect, Schedule, Stream } from \"effect\"\n   *\n   * const stream = Stream.range(0, 9).pipe(\n   *   Stream.repeat(Schedule.spaced(\"1 second\")),\n   *   Stream.groupedWithin(18, \"1.5 seconds\"),\n   *   Stream.take(3)\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then((chunks) => console.log(Chunk.toArray(chunks)))\n   * // [\n   * //   {\n   * //     _id: 'Chunk',\n   * //     values: [\n   * //       0, 1, 2, 3, 4, 5, 6,\n   * //       7, 8, 9, 0, 1, 2, 3,\n   * //       4, 5, 6, 7\n   * //     ]\n   * //   },\n   * //   {\n   * //     _id: 'Chunk',\n   * //     values: [\n   * //       8, 9, 0, 1, 2,\n   * //       3, 4, 5, 6, 7,\n   * //       8, 9\n   * //     ]\n   * //   },\n   * //   {\n   * //     _id: 'Chunk',\n   * //     values: [\n   * //       0, 1, 2, 3, 4, 5, 6,\n   * //       7, 8, 9, 0, 1, 2, 3,\n   * //       4, 5, 6, 7\n   * //     ]\n   * //   }\n   * // ]\n   *\n   * @since 2.0.0\n   * @category grouping\n   */\n  (\n    chunkSize: number,\n    duration: Duration.DurationInput\n  ): <A, E, R>(self: Stream<A, E, R>) => Stream<Chunk.Chunk<A>, E, R>\n  /**\n   * Partitions the stream with the specified `chunkSize` or until the specified\n   * `duration` has passed, whichever is satisfied first.\n   *\n   * @example\n   * import { Chunk, Effect, Schedule, Stream } from \"effect\"\n   *\n   * const stream = Stream.range(0, 9).pipe(\n   *   Stream.repeat(Schedule.spaced(\"1 second\")),\n   *   Stream.groupedWithin(18, \"1.5 seconds\"),\n   *   Stream.take(3)\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then((chunks) => console.log(Chunk.toArray(chunks)))\n   * // [\n   * //   {\n   * //     _id: 'Chunk',\n   * //     values: [\n   * //       0, 1, 2, 3, 4, 5, 6,\n   * //       7, 8, 9, 0, 1, 2, 3,\n   * //       4, 5, 6, 7\n   * //     ]\n   * //   },\n   * //   {\n   * //     _id: 'Chunk',\n   * //     values: [\n   * //       8, 9, 0, 1, 2,\n   * //       3, 4, 5, 6, 7,\n   * //       8, 9\n   * //     ]\n   * //   },\n   * //   {\n   * //     _id: 'Chunk',\n   * //     values: [\n   * //       0, 1, 2, 3, 4, 5, 6,\n   * //       7, 8, 9, 0, 1, 2, 3,\n   * //       4, 5, 6, 7\n   * //     ]\n   * //   }\n   * // ]\n   *\n   * @since 2.0.0\n   * @category grouping\n   */\n  <A, E, R>(self: Stream<A, E, R>, chunkSize: number, duration: Duration.DurationInput): Stream<Chunk.Chunk<A>, E, R>\n} = internal.groupedWithin\n\n/**\n * Specialized version of haltWhen which halts the evaluation of this stream\n * after the given duration.\n *\n * An element in the process of being pulled will not be interrupted when the\n * given duration completes. See `interruptAfter` for this behavior.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const haltAfter: {\n  /**\n   * Specialized version of haltWhen which halts the evaluation of this stream\n   * after the given duration.\n   *\n   * An element in the process of being pulled will not be interrupted when the\n   * given duration completes. See `interruptAfter` for this behavior.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (duration: Duration.DurationInput): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E, R>\n  /**\n   * Specialized version of haltWhen which halts the evaluation of this stream\n   * after the given duration.\n   *\n   * An element in the process of being pulled will not be interrupted when the\n   * given duration completes. See `interruptAfter` for this behavior.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(self: Stream<A, E, R>, duration: Duration.DurationInput): Stream<A, E, R>\n} = internal.haltAfter\n\n/**\n * Halts the evaluation of this stream when the provided effect completes. The\n * given effect will be forked as part of the returned stream, and its success\n * will be discarded.\n *\n * An element in the process of being pulled will not be interrupted when the\n * effect completes. See `interruptWhen` for this behavior.\n *\n * If the effect completes with a failure, the stream will emit that failure.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const haltWhen: {\n  /**\n   * Halts the evaluation of this stream when the provided effect completes. The\n   * given effect will be forked as part of the returned stream, and its success\n   * will be discarded.\n   *\n   * An element in the process of being pulled will not be interrupted when the\n   * effect completes. See `interruptWhen` for this behavior.\n   *\n   * If the effect completes with a failure, the stream will emit that failure.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <X, E2, R2>(effect: Effect.Effect<X, E2, R2>): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E2 | E, R2 | R>\n  /**\n   * Halts the evaluation of this stream when the provided effect completes. The\n   * given effect will be forked as part of the returned stream, and its success\n   * will be discarded.\n   *\n   * An element in the process of being pulled will not be interrupted when the\n   * effect completes. See `interruptWhen` for this behavior.\n   *\n   * If the effect completes with a failure, the stream will emit that failure.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, X, E2, R2>(self: Stream<A, E, R>, effect: Effect.Effect<X, E2, R2>): Stream<A, E | E2, R | R2>\n} = internal.haltWhen\n\n/**\n * Halts the evaluation of this stream when the provided promise resolves.\n *\n * If the promise completes with a failure, the stream will emit that failure.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const haltWhenDeferred: {\n  /**\n   * Halts the evaluation of this stream when the provided promise resolves.\n   *\n   * If the promise completes with a failure, the stream will emit that failure.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <X, E2>(deferred: Deferred.Deferred<X, E2>): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E2 | E, R>\n  /**\n   * Halts the evaluation of this stream when the provided promise resolves.\n   *\n   * If the promise completes with a failure, the stream will emit that failure.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, X, E2>(self: Stream<A, E, R>, deferred: Deferred.Deferred<X, E2>): Stream<A, E | E2, R>\n} = internal.haltWhenDeferred\n\n/**\n * The identity pipeline, which does not modify streams in any way.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const identity: <A, E = never, R = never>() => Stream<A, E, R> = internal.identityStream\n\n/**\n * Interleaves this stream and the specified stream deterministically by\n * alternating pulling values from this stream and the specified stream. When\n * one stream is exhausted all remaining values in the other stream will be\n * pulled.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const s1 = Stream.make(1, 2, 3)\n * const s2 = Stream.make(4, 5, 6)\n *\n * const stream = Stream.interleave(s1, s2)\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [ 1, 4, 2, 5, 3, 6 ] }\n * @since 2.0.0\n * @category utils\n */\nexport const interleave: {\n  /**\n   * Interleaves this stream and the specified stream deterministically by\n   * alternating pulling values from this stream and the specified stream. When\n   * one stream is exhausted all remaining values in the other stream will be\n   * pulled.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const s1 = Stream.make(1, 2, 3)\n   * const s2 = Stream.make(4, 5, 6)\n   *\n   * const stream = Stream.interleave(s1, s2)\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 1, 4, 2, 5, 3, 6 ] }\n   * @since 2.0.0\n   * @category utils\n   */\n  <A2, E2, R2>(that: Stream<A2, E2, R2>): <A, E, R>(self: Stream<A, E, R>) => Stream<A2 | A, E2 | E, R2 | R>\n  /**\n   * Interleaves this stream and the specified stream deterministically by\n   * alternating pulling values from this stream and the specified stream. When\n   * one stream is exhausted all remaining values in the other stream will be\n   * pulled.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const s1 = Stream.make(1, 2, 3)\n   * const s2 = Stream.make(4, 5, 6)\n   *\n   * const stream = Stream.interleave(s1, s2)\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 1, 4, 2, 5, 3, 6 ] }\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, A2, E2, R2>(self: Stream<A, E, R>, that: Stream<A2, E2, R2>): Stream<A | A2, E | E2, R | R2>\n} = internal.interleave\n\n/**\n * Combines this stream and the specified stream deterministically using the\n * stream of boolean values `pull` to control which stream to pull from next.\n * A value of `true` indicates to pull from this stream and a value of `false`\n * indicates to pull from the specified stream. Only consumes as many elements\n * as requested by the `pull` stream. If either this stream or the specified\n * stream are exhausted further requests for values from that stream will be\n * ignored.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const s1 = Stream.make(1, 3, 5, 7, 9)\n * const s2 = Stream.make(2, 4, 6, 8, 10)\n *\n * const booleanStream = Stream.make(true, false, false).pipe(Stream.forever)\n *\n * const stream = Stream.interleaveWith(s1, s2, booleanStream)\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // {\n * //   _id: 'Chunk',\n * //   values: [\n * //     1, 2,  4, 3, 6,\n * //     8, 5, 10, 7, 9\n * //   ]\n * // }\n *\n * @since 2.0.0\n * @category utils\n */\nexport const interleaveWith: {\n  /**\n   * Combines this stream and the specified stream deterministically using the\n   * stream of boolean values `pull` to control which stream to pull from next.\n   * A value of `true` indicates to pull from this stream and a value of `false`\n   * indicates to pull from the specified stream. Only consumes as many elements\n   * as requested by the `pull` stream. If either this stream or the specified\n   * stream are exhausted further requests for values from that stream will be\n   * ignored.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const s1 = Stream.make(1, 3, 5, 7, 9)\n   * const s2 = Stream.make(2, 4, 6, 8, 10)\n   *\n   * const booleanStream = Stream.make(true, false, false).pipe(Stream.forever)\n   *\n   * const stream = Stream.interleaveWith(s1, s2, booleanStream)\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // {\n   * //   _id: 'Chunk',\n   * //   values: [\n   * //     1, 2,  4, 3, 6,\n   * //     8, 5, 10, 7, 9\n   * //   ]\n   * // }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A2, E2, R2, E3, R3>(\n    that: Stream<A2, E2, R2>,\n    decider: Stream<boolean, E3, R3>\n  ): <A, E, R>(self: Stream<A, E, R>) => Stream<A2 | A, E2 | E3 | E, R2 | R3 | R>\n  /**\n   * Combines this stream and the specified stream deterministically using the\n   * stream of boolean values `pull` to control which stream to pull from next.\n   * A value of `true` indicates to pull from this stream and a value of `false`\n   * indicates to pull from the specified stream. Only consumes as many elements\n   * as requested by the `pull` stream. If either this stream or the specified\n   * stream are exhausted further requests for values from that stream will be\n   * ignored.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const s1 = Stream.make(1, 3, 5, 7, 9)\n   * const s2 = Stream.make(2, 4, 6, 8, 10)\n   *\n   * const booleanStream = Stream.make(true, false, false).pipe(Stream.forever)\n   *\n   * const stream = Stream.interleaveWith(s1, s2, booleanStream)\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // {\n   * //   _id: 'Chunk',\n   * //   values: [\n   * //     1, 2,  4, 3, 6,\n   * //     8, 5, 10, 7, 9\n   * //   ]\n   * // }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, A2, E2, R2, E3, R3>(\n    self: Stream<A, E, R>,\n    that: Stream<A2, E2, R2>,\n    decider: Stream<boolean, E3, R3>\n  ): Stream<A | A2, E | E2 | E3, R | R2 | R3>\n} = internal.interleaveWith\n\n/**\n * Intersperse stream with provided `element`.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const stream = Stream.make(1, 2, 3, 4, 5).pipe(Stream.intersperse(0))\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // {\n * //   _id: 'Chunk',\n * //   values: [\n * //     1, 0, 2, 0, 3,\n * //     0, 4, 0, 5\n * //   ]\n * // }\n *\n * @since 2.0.0\n * @category utils\n */\nexport const intersperse: {\n  /**\n   * Intersperse stream with provided `element`.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.make(1, 2, 3, 4, 5).pipe(Stream.intersperse(0))\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // {\n   * //   _id: 'Chunk',\n   * //   values: [\n   * //     1, 0, 2, 0, 3,\n   * //     0, 4, 0, 5\n   * //   ]\n   * // }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A2>(element: A2): <A, E, R>(self: Stream<A, E, R>) => Stream<A2 | A, E, R>\n  /**\n   * Intersperse stream with provided `element`.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.make(1, 2, 3, 4, 5).pipe(Stream.intersperse(0))\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // {\n   * //   _id: 'Chunk',\n   * //   values: [\n   * //     1, 0, 2, 0, 3,\n   * //     0, 4, 0, 5\n   * //   ]\n   * // }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, A2>(self: Stream<A, E, R>, element: A2): Stream<A | A2, E, R>\n} = internal.intersperse\n\n/**\n * Intersperse the specified element, also adding a prefix and a suffix.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const stream = Stream.make(1, 2, 3, 4, 5).pipe(\n *   Stream.intersperseAffixes({\n *     start: \"[\",\n *     middle: \"-\",\n *     end: \"]\"\n *   })\n * )\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // {\n * //   _id: 'Chunk',\n * //   values: [\n * //     '[', 1,   '-', 2,   '-',\n * //     3,   '-', 4,   '-', 5,\n * //     ']'\n * //   ]\n * // }\n *\n * @since 2.0.0\n * @category utils\n */\nexport const intersperseAffixes: {\n  /**\n   * Intersperse the specified element, also adding a prefix and a suffix.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.make(1, 2, 3, 4, 5).pipe(\n   *   Stream.intersperseAffixes({\n   *     start: \"[\",\n   *     middle: \"-\",\n   *     end: \"]\"\n   *   })\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // {\n   * //   _id: 'Chunk',\n   * //   values: [\n   * //     '[', 1,   '-', 2,   '-',\n   * //     3,   '-', 4,   '-', 5,\n   * //     ']'\n   * //   ]\n   * // }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A2, A3, A4>(\n    options: { readonly start: A2; readonly middle: A3; readonly end: A4 }\n  ): <A, E, R>(self: Stream<A, E, R>) => Stream<A2 | A3 | A4 | A, E, R>\n  /**\n   * Intersperse the specified element, also adding a prefix and a suffix.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.make(1, 2, 3, 4, 5).pipe(\n   *   Stream.intersperseAffixes({\n   *     start: \"[\",\n   *     middle: \"-\",\n   *     end: \"]\"\n   *   })\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // {\n   * //   _id: 'Chunk',\n   * //   values: [\n   * //     '[', 1,   '-', 2,   '-',\n   * //     3,   '-', 4,   '-', 5,\n   * //     ']'\n   * //   ]\n   * // }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, A2, A3, A4>(\n    self: Stream<A, E, R>,\n    options: { readonly start: A2; readonly middle: A3; readonly end: A4 }\n  ): Stream<A | A2 | A3 | A4, E, R>\n} = internal.intersperseAffixes\n\n/**\n * Specialized version of `Stream.interruptWhen` which interrupts the\n * evaluation of this stream after the given `Duration`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const interruptAfter: {\n  /**\n   * Specialized version of `Stream.interruptWhen` which interrupts the\n   * evaluation of this stream after the given `Duration`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (duration: Duration.DurationInput): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E, R>\n  /**\n   * Specialized version of `Stream.interruptWhen` which interrupts the\n   * evaluation of this stream after the given `Duration`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(self: Stream<A, E, R>, duration: Duration.DurationInput): Stream<A, E, R>\n} = internal.interruptAfter\n\n/**\n * Interrupts the evaluation of this stream when the provided effect\n * completes. The given effect will be forked as part of this stream, and its\n * success will be discarded. This combinator will also interrupt any\n * in-progress element being pulled from upstream.\n *\n * If the effect completes with a failure before the stream completes, the\n * returned stream will emit that failure.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const interruptWhen: {\n  /**\n   * Interrupts the evaluation of this stream when the provided effect\n   * completes. The given effect will be forked as part of this stream, and its\n   * success will be discarded. This combinator will also interrupt any\n   * in-progress element being pulled from upstream.\n   *\n   * If the effect completes with a failure before the stream completes, the\n   * returned stream will emit that failure.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <X, E2, R2>(effect: Effect.Effect<X, E2, R2>): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E2 | E, R2 | R>\n  /**\n   * Interrupts the evaluation of this stream when the provided effect\n   * completes. The given effect will be forked as part of this stream, and its\n   * success will be discarded. This combinator will also interrupt any\n   * in-progress element being pulled from upstream.\n   *\n   * If the effect completes with a failure before the stream completes, the\n   * returned stream will emit that failure.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, X, E2, R2>(self: Stream<A, E, R>, effect: Effect.Effect<X, E2, R2>): Stream<A, E | E2, R | R2>\n} = internal.interruptWhen\n\n/**\n * Interrupts the evaluation of this stream when the provided promise\n * resolves. This combinator will also interrupt any in-progress element being\n * pulled from upstream.\n *\n * If the promise completes with a failure, the stream will emit that failure.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const interruptWhenDeferred: {\n  /**\n   * Interrupts the evaluation of this stream when the provided promise\n   * resolves. This combinator will also interrupt any in-progress element being\n   * pulled from upstream.\n   *\n   * If the promise completes with a failure, the stream will emit that failure.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <X, E2>(deferred: Deferred.Deferred<X, E2>): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E2 | E, R>\n  /**\n   * Interrupts the evaluation of this stream when the provided promise\n   * resolves. This combinator will also interrupt any in-progress element being\n   * pulled from upstream.\n   *\n   * If the promise completes with a failure, the stream will emit that failure.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, X, E2>(self: Stream<A, E, R>, deferred: Deferred.Deferred<X, E2>): Stream<A, E | E2, R>\n} = internal.interruptWhenDeferred\n\n/**\n * The infinite stream of iterative function application: a, f(a), f(f(a)),\n * f(f(f(a))), ...\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * // An infinite Stream of numbers starting from 1 and incrementing\n * const stream = Stream.iterate(1, (n) => n + 1)\n *\n * // Effect.runPromise(Stream.runCollect(stream.pipe(Stream.take(10)))).then(console.log)\n * // { _id: 'Chunk', values: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const iterate: <A>(value: A, next: (value: A) => A) => Stream<A> = internal.iterate\n\n/**\n * Creates a stream from an sequence of values.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const stream = Stream.make(1, 2, 3)\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [ 1, 2, 3 ] }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <As extends Array<any>>(...as: As) => Stream<As[number]> = internal.make\n\n/**\n * Transforms the elements of this stream using the supplied function.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const stream = Stream.make(1, 2, 3).pipe(Stream.map((n) => n + 1))\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [ 2, 3, 4 ] }\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  /**\n   * Transforms the elements of this stream using the supplied function.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.make(1, 2, 3).pipe(Stream.map((n) => n + 1))\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 2, 3, 4 ] }\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, B>(f: (a: A) => B): <E, R>(self: Stream<A, E, R>) => Stream<B, E, R>\n  /**\n   * Transforms the elements of this stream using the supplied function.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.make(1, 2, 3).pipe(Stream.map((n) => n + 1))\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 2, 3, 4 ] }\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, R, B>(self: Stream<A, E, R>, f: (a: A) => B): Stream<B, E, R>\n} = internal.map\n\n/**\n * Statefully maps over the elements of this stream to produce new elements.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const runningTotal = (stream: Stream.Stream<number>): Stream.Stream<number> =>\n *   stream.pipe(Stream.mapAccum(0, (s, a) => [s + a, s + a]))\n *\n * // input:  0, 1, 2, 3, 4, 5, 6\n * // Effect.runPromise(Stream.runCollect(runningTotal(Stream.range(0, 6)))).then(\n * //   console.log\n * // )\n * // { _id: \"Chunk\", values: [ 0, 1, 3, 6, 10, 15, 21 ] }\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapAccum: {\n  /**\n   * Statefully maps over the elements of this stream to produce new elements.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const runningTotal = (stream: Stream.Stream<number>): Stream.Stream<number> =>\n   *   stream.pipe(Stream.mapAccum(0, (s, a) => [s + a, s + a]))\n   *\n   * // input:  0, 1, 2, 3, 4, 5, 6\n   * // Effect.runPromise(Stream.runCollect(runningTotal(Stream.range(0, 6)))).then(\n   * //   console.log\n   * // )\n   * // { _id: \"Chunk\", values: [ 0, 1, 3, 6, 10, 15, 21 ] }\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <S, A, A2>(s: S, f: (s: S, a: A) => readonly [S, A2]): <E, R>(self: Stream<A, E, R>) => Stream<A2, E, R>\n  /**\n   * Statefully maps over the elements of this stream to produce new elements.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const runningTotal = (stream: Stream.Stream<number>): Stream.Stream<number> =>\n   *   stream.pipe(Stream.mapAccum(0, (s, a) => [s + a, s + a]))\n   *\n   * // input:  0, 1, 2, 3, 4, 5, 6\n   * // Effect.runPromise(Stream.runCollect(runningTotal(Stream.range(0, 6)))).then(\n   * //   console.log\n   * // )\n   * // { _id: \"Chunk\", values: [ 0, 1, 3, 6, 10, 15, 21 ] }\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, R, S, A2>(self: Stream<A, E, R>, s: S, f: (s: S, a: A) => readonly [S, A2]): Stream<A2, E, R>\n} = internal.mapAccum\n\n/**\n * Statefully and effectfully maps over the elements of this stream to produce\n * new elements.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapAccumEffect: {\n  /**\n   * Statefully and effectfully maps over the elements of this stream to produce\n   * new elements.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <S, A, A2, E2, R2>(\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<readonly [S, A2], E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Stream<A2, E2 | E, R2 | R>\n  /**\n   * Statefully and effectfully maps over the elements of this stream to produce\n   * new elements.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, R, S, A2, E2, R2>(\n    self: Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<readonly [S, A2], E2, R2>\n  ): Stream<A2, E | E2, R | R2>\n} = internal.mapAccumEffect\n\n/**\n * Returns a stream whose failure and success channels have been mapped by the\n * specified `onFailure` and `onSuccess` functions.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const mapBoth: {\n  /**\n   * Returns a stream whose failure and success channels have been mapped by the\n   * specified `onFailure` and `onSuccess` functions.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <E, E2, A, A2>(\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): <R>(self: Stream<A, E, R>) => Stream<A2, E2, R>\n  /**\n   * Returns a stream whose failure and success channels have been mapped by the\n   * specified `onFailure` and `onSuccess` functions.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, E2, A2>(\n    self: Stream<A, E, R>,\n    options: { readonly onFailure: (e: E) => E2; readonly onSuccess: (a: A) => A2 }\n  ): Stream<A2, E2, R>\n} = internal.mapBoth\n\n/**\n * Transforms the chunks emitted by this stream.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapChunks: {\n  /**\n   * Transforms the chunks emitted by this stream.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, B>(f: (chunk: Chunk.Chunk<A>) => Chunk.Chunk<B>): <E, R>(self: Stream<A, E, R>) => Stream<B, E, R>\n  /**\n   * Transforms the chunks emitted by this stream.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, R, B>(self: Stream<A, E, R>, f: (chunk: Chunk.Chunk<A>) => Chunk.Chunk<B>): Stream<B, E, R>\n} = internal.mapChunks\n\n/**\n * Effectfully transforms the chunks emitted by this stream.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapChunksEffect: {\n  /**\n   * Effectfully transforms the chunks emitted by this stream.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, B, E2, R2>(\n    f: (chunk: Chunk.Chunk<A>) => Effect.Effect<Chunk.Chunk<B>, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Stream<B, E2 | E, R2 | R>\n  /**\n   * Effectfully transforms the chunks emitted by this stream.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, R, B, E2, R2>(\n    self: Stream<A, E, R>,\n    f: (chunk: Chunk.Chunk<A>) => Effect.Effect<Chunk.Chunk<B>, E2, R2>\n  ): Stream<B, E | E2, R | R2>\n} = internal.mapChunksEffect\n\n/**\n * Maps each element to an iterable, and flattens the iterables into the\n * output of this stream.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const numbers = Stream.make(\"1-2-3\", \"4-5\", \"6\").pipe(\n *   Stream.mapConcat((s) => s.split(\"-\")),\n *   Stream.map((s) => parseInt(s))\n * )\n *\n * // Effect.runPromise(Stream.runCollect(numbers)).then(console.log)\n * // { _id: 'Chunk', values: [ 1, 2, 3, 4, 5, 6 ] }\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapConcat: {\n  /**\n   * Maps each element to an iterable, and flattens the iterables into the\n   * output of this stream.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const numbers = Stream.make(\"1-2-3\", \"4-5\", \"6\").pipe(\n   *   Stream.mapConcat((s) => s.split(\"-\")),\n   *   Stream.map((s) => parseInt(s))\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(numbers)).then(console.log)\n   * // { _id: 'Chunk', values: [ 1, 2, 3, 4, 5, 6 ] }\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, A2>(f: (a: A) => Iterable<A2>): <E, R>(self: Stream<A, E, R>) => Stream<A2, E, R>\n  /**\n   * Maps each element to an iterable, and flattens the iterables into the\n   * output of this stream.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const numbers = Stream.make(\"1-2-3\", \"4-5\", \"6\").pipe(\n   *   Stream.mapConcat((s) => s.split(\"-\")),\n   *   Stream.map((s) => parseInt(s))\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(numbers)).then(console.log)\n   * // { _id: 'Chunk', values: [ 1, 2, 3, 4, 5, 6 ] }\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, R, A2>(self: Stream<A, E, R>, f: (a: A) => Iterable<A2>): Stream<A2, E, R>\n} = internal.mapConcat\n\n/**\n * Maps each element to a chunk, and flattens the chunks into the output of\n * this stream.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapConcatChunk: {\n  /**\n   * Maps each element to a chunk, and flattens the chunks into the output of\n   * this stream.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, A2>(f: (a: A) => Chunk.Chunk<A2>): <E, R>(self: Stream<A, E, R>) => Stream<A2, E, R>\n  /**\n   * Maps each element to a chunk, and flattens the chunks into the output of\n   * this stream.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, R, A2>(self: Stream<A, E, R>, f: (a: A) => Chunk.Chunk<A2>): Stream<A2, E, R>\n} = internal.mapConcatChunk\n\n/**\n * Effectfully maps each element to a chunk, and flattens the chunks into the\n * output of this stream.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapConcatChunkEffect: {\n  /**\n   * Effectfully maps each element to a chunk, and flattens the chunks into the\n   * output of this stream.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, A2, E2, R2>(\n    f: (a: A) => Effect.Effect<Chunk.Chunk<A2>, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Stream<A2, E2 | E, R2 | R>\n  /**\n   * Effectfully maps each element to a chunk, and flattens the chunks into the\n   * output of this stream.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<Chunk.Chunk<A2>, E2, R2>\n  ): Stream<A2, E | E2, R | R2>\n} = internal.mapConcatChunkEffect\n\n/**\n * Effectfully maps each element to an iterable, and flattens the iterables\n * into the output of this stream.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapConcatEffect: {\n  /**\n   * Effectfully maps each element to an iterable, and flattens the iterables\n   * into the output of this stream.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, A2, E2, R2>(\n    f: (a: A) => Effect.Effect<Iterable<A2>, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Stream<A2, E2 | E, R2 | R>\n  /**\n   * Effectfully maps each element to an iterable, and flattens the iterables\n   * into the output of this stream.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<Iterable<A2>, E2, R2>\n  ): Stream<A2, E | E2, R | R2>\n} = internal.mapConcatEffect\n\n/**\n * Maps over elements of the stream with the specified effectful function.\n *\n * @example\n * import { Effect, Random, Stream } from \"effect\"\n *\n * const stream = Stream.make(10, 20, 30).pipe(\n *   Stream.mapEffect((n) => Random.nextIntBetween(0, n))\n * )\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // Example Output: { _id: 'Chunk', values: [ 7, 19, 8 ] }\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapEffect: {\n  /**\n   * Maps over elements of the stream with the specified effectful function.\n   *\n   * @example\n   * import { Effect, Random, Stream } from \"effect\"\n   *\n   * const stream = Stream.make(10, 20, 30).pipe(\n   *   Stream.mapEffect((n) => Random.nextIntBetween(0, n))\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // Example Output: { _id: 'Chunk', values: [ 7, 19, 8 ] }\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, A2, E2, R2>(\n    f: (a: A) => Effect.Effect<A2, E2, R2>,\n    options?:\n      | { readonly concurrency?: number | \"unbounded\" | undefined; readonly unordered?: boolean | undefined }\n      | undefined\n  ): <E, R>(self: Stream<A, E, R>) => Stream<A2, E2 | E, R2 | R>\n  /**\n   * Maps over elements of the stream with the specified effectful function.\n   *\n   * @example\n   * import { Effect, Random, Stream } from \"effect\"\n   *\n   * const stream = Stream.make(10, 20, 30).pipe(\n   *   Stream.mapEffect((n) => Random.nextIntBetween(0, n))\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // Example Output: { _id: 'Chunk', values: [ 7, 19, 8 ] }\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, A2, E2, R2, K>(\n    f: (a: A) => Effect.Effect<A2, E2, R2>,\n    options: { readonly key: (a: A) => K; readonly bufferSize?: number | undefined }\n  ): <E, R>(self: Stream<A, E, R>) => Stream<A2, E2 | E, R2 | R>\n  /**\n   * Maps over elements of the stream with the specified effectful function.\n   *\n   * @example\n   * import { Effect, Random, Stream } from \"effect\"\n   *\n   * const stream = Stream.make(10, 20, 30).pipe(\n   *   Stream.mapEffect((n) => Random.nextIntBetween(0, n))\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // Example Output: { _id: 'Chunk', values: [ 7, 19, 8 ] }\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<A2, E2, R2>,\n    options?:\n      | { readonly concurrency?: number | \"unbounded\" | undefined; readonly unordered?: boolean | undefined }\n      | undefined\n  ): Stream<A2, E | E2, R | R2>\n  /**\n   * Maps over elements of the stream with the specified effectful function.\n   *\n   * @example\n   * import { Effect, Random, Stream } from \"effect\"\n   *\n   * const stream = Stream.make(10, 20, 30).pipe(\n   *   Stream.mapEffect((n) => Random.nextIntBetween(0, n))\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // Example Output: { _id: 'Chunk', values: [ 7, 19, 8 ] }\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, R, A2, E2, R2, K>(\n    self: Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<A2, E2, R2>,\n    options: { readonly key: (a: A) => K; readonly bufferSize?: number | undefined }\n  ): Stream<A2, E | E2, R | R2>\n} = _groupBy.mapEffectOptions\n\n/**\n * Transforms the errors emitted by this stream using `f`.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapError: {\n  /**\n   * Transforms the errors emitted by this stream using `f`.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <E, E2>(f: (error: E) => E2): <A, R>(self: Stream<A, E, R>) => Stream<A, E2, R>\n  /**\n   * Transforms the errors emitted by this stream using `f`.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, R, E2>(self: Stream<A, E, R>, f: (error: E) => E2): Stream<A, E2, R>\n} = internal.mapError\n\n/**\n * Transforms the full causes of failures emitted by this stream.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapErrorCause: {\n  /**\n   * Transforms the full causes of failures emitted by this stream.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <E, E2>(f: (cause: Cause.Cause<E>) => Cause.Cause<E2>): <A, R>(self: Stream<A, E, R>) => Stream<A, E2, R>\n  /**\n   * Transforms the full causes of failures emitted by this stream.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, E, R, E2>(self: Stream<A, E, R>, f: (cause: Cause.Cause<E>) => Cause.Cause<E2>): Stream<A, E2, R>\n} = internal.mapErrorCause\n\n/**\n * Merges this stream and the specified stream together.\n *\n * New produced stream will terminate when both specified stream terminate if\n * no termination strategy is specified.\n *\n * @example\n * import { Effect, Schedule, Stream } from \"effect\"\n *\n * const s1 = Stream.make(1, 2, 3).pipe(\n *   Stream.schedule(Schedule.spaced(\"100 millis\"))\n * )\n * const s2 = Stream.make(4, 5, 6).pipe(\n *   Stream.schedule(Schedule.spaced(\"200 millis\"))\n * )\n *\n * const stream = Stream.merge(s1, s2)\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [ 1, 4, 2, 3, 5, 6 ] }\n *\n * @since 2.0.0\n * @category utils\n */\nexport const merge: {\n  /**\n   * Merges this stream and the specified stream together.\n   *\n   * New produced stream will terminate when both specified stream terminate if\n   * no termination strategy is specified.\n   *\n   * @example\n   * import { Effect, Schedule, Stream } from \"effect\"\n   *\n   * const s1 = Stream.make(1, 2, 3).pipe(\n   *   Stream.schedule(Schedule.spaced(\"100 millis\"))\n   * )\n   * const s2 = Stream.make(4, 5, 6).pipe(\n   *   Stream.schedule(Schedule.spaced(\"200 millis\"))\n   * )\n   *\n   * const stream = Stream.merge(s1, s2)\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 1, 4, 2, 3, 5, 6 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A2, E2, R2>(\n    that: Stream<A2, E2, R2>,\n    options?: { readonly haltStrategy?: HaltStrategy.HaltStrategyInput | undefined } | undefined\n  ): <A, E, R>(self: Stream<A, E, R>) => Stream<A2 | A, E2 | E, R2 | R>\n  /**\n   * Merges this stream and the specified stream together.\n   *\n   * New produced stream will terminate when both specified stream terminate if\n   * no termination strategy is specified.\n   *\n   * @example\n   * import { Effect, Schedule, Stream } from \"effect\"\n   *\n   * const s1 = Stream.make(1, 2, 3).pipe(\n   *   Stream.schedule(Schedule.spaced(\"100 millis\"))\n   * )\n   * const s2 = Stream.make(4, 5, 6).pipe(\n   *   Stream.schedule(Schedule.spaced(\"200 millis\"))\n   * )\n   *\n   * const stream = Stream.merge(s1, s2)\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 1, 4, 2, 3, 5, 6 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Stream<A, E, R>,\n    that: Stream<A2, E2, R2>,\n    options?: { readonly haltStrategy?: HaltStrategy.HaltStrategyInput | undefined } | undefined\n  ): Stream<A | A2, E | E2, R | R2>\n} = internal.merge\n\n/**\n * Merges a variable list of streams in a non-deterministic fashion. Up to `n`\n * streams may be consumed in parallel and up to `outputBuffer` chunks may be\n * buffered by this operator.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const mergeAll: {\n  /**\n   * Merges a variable list of streams in a non-deterministic fashion. Up to `n`\n   * streams may be consumed in parallel and up to `outputBuffer` chunks may be\n   * buffered by this operator.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (\n    options: {\n      readonly concurrency: number | \"unbounded\"\n      readonly bufferSize?: number | undefined\n    }\n  ): <A, E, R>(streams: Iterable<Stream<A, E, R>>) => Stream<A, E, R>\n  /**\n   * Merges a variable list of streams in a non-deterministic fashion. Up to `n`\n   * streams may be consumed in parallel and up to `outputBuffer` chunks may be\n   * buffered by this operator.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(\n    streams: Iterable<Stream<A, E, R>>,\n    options: {\n      readonly concurrency: number | \"unbounded\"\n      readonly bufferSize?: number | undefined\n    }\n  ): Stream<A, E, R>\n} = internal.mergeAll\n\n/**\n * Merges a struct of streams into a single stream of tagged values.\n * @category combinators\n * @since 3.8.5\n *\n * @example\n * import { Stream } from \"effect\"\n * // Stream.Stream<{ _tag: \"a\"; value: number; } | { _tag: \"b\"; value: string; }>\n * const res = Stream.mergeWithTag({\n *    a: Stream.make(0),\n *    b: Stream.make(\"\")\n * }, { concurrency: \"unbounded\" })\n */\nexport const mergeWithTag: {\n  /**\n   * Merges a struct of streams into a single stream of tagged values.\n   * @category combinators\n   * @since 3.8.5\n   *\n   * @example\n   * import { Stream } from \"effect\"\n   * // Stream.Stream<{ _tag: \"a\"; value: number; } | { _tag: \"b\"; value: string; }>\n   * const res = Stream.mergeWithTag({\n   *    a: Stream.make(0),\n   *    b: Stream.make(\"\")\n   * }, { concurrency: \"unbounded\" })\n   */\n  <S extends { [k in string]: Stream<any, any, any> }>(\n    streams: S,\n    options: {\n      readonly concurrency: number | \"unbounded\"\n      readonly bufferSize?: number | undefined\n    }\n  ): Stream<\n    { [K in keyof S]: { _tag: K; value: Stream.Success<S[K]> } }[keyof S],\n    Stream.Error<S[keyof S]>,\n    Stream.Context<S[keyof S]>\n  >\n  /**\n   * Merges a struct of streams into a single stream of tagged values.\n   * @category combinators\n   * @since 3.8.5\n   *\n   * @example\n   * import { Stream } from \"effect\"\n   * // Stream.Stream<{ _tag: \"a\"; value: number; } | { _tag: \"b\"; value: string; }>\n   * const res = Stream.mergeWithTag({\n   *    a: Stream.make(0),\n   *    b: Stream.make(\"\")\n   * }, { concurrency: \"unbounded\" })\n   */\n  (\n    options: {\n      readonly concurrency: number | \"unbounded\"\n      readonly bufferSize?: number | undefined\n    }\n  ): <S extends { [k in string]: Stream<any, any, any> }>(streams: S) => Stream<\n    { [K in keyof S]: { _tag: K; value: Stream.Success<S[K]> } }[keyof S],\n    Stream.Error<S[keyof S]>,\n    Stream.Context<S[keyof S]>\n  >\n} = internal.mergeWithTag\n\n/**\n * Merges this stream and the specified stream together to a common element\n * type with the specified mapping functions.\n *\n * New produced stream will terminate when both specified stream terminate if\n * no termination strategy is specified.\n *\n * @example\n * import { Effect, Schedule, Stream } from \"effect\"\n *\n * const s1 = Stream.make(\"1\", \"2\", \"3\").pipe(\n *   Stream.schedule(Schedule.spaced(\"100 millis\"))\n * )\n * const s2 = Stream.make(4.1, 5.3, 6.2).pipe(\n *   Stream.schedule(Schedule.spaced(\"200 millis\"))\n * )\n *\n * const stream = Stream.mergeWith(s1, s2, {\n *   onSelf: (s) => parseInt(s),\n *   onOther: (n) => Math.floor(n)\n * })\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [ 1, 4, 2, 3, 5, 6 ] }\n *\n * @since 2.0.0\n * @category utils\n */\nexport const mergeWith: {\n  /**\n   * Merges this stream and the specified stream together to a common element\n   * type with the specified mapping functions.\n   *\n   * New produced stream will terminate when both specified stream terminate if\n   * no termination strategy is specified.\n   *\n   * @example\n   * import { Effect, Schedule, Stream } from \"effect\"\n   *\n   * const s1 = Stream.make(\"1\", \"2\", \"3\").pipe(\n   *   Stream.schedule(Schedule.spaced(\"100 millis\"))\n   * )\n   * const s2 = Stream.make(4.1, 5.3, 6.2).pipe(\n   *   Stream.schedule(Schedule.spaced(\"200 millis\"))\n   * )\n   *\n   * const stream = Stream.mergeWith(s1, s2, {\n   *   onSelf: (s) => parseInt(s),\n   *   onOther: (n) => Math.floor(n)\n   * })\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 1, 4, 2, 3, 5, 6 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A2, E2, R2, A, A3, A4>(\n    other: Stream<A2, E2, R2>,\n    options: {\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A4\n      readonly haltStrategy?: HaltStrategy.HaltStrategyInput | undefined\n    }\n  ): <E, R>(self: Stream<A, E, R>) => Stream<A3 | A4, E2 | E, R2 | R>\n  /**\n   * Merges this stream and the specified stream together to a common element\n   * type with the specified mapping functions.\n   *\n   * New produced stream will terminate when both specified stream terminate if\n   * no termination strategy is specified.\n   *\n   * @example\n   * import { Effect, Schedule, Stream } from \"effect\"\n   *\n   * const s1 = Stream.make(\"1\", \"2\", \"3\").pipe(\n   *   Stream.schedule(Schedule.spaced(\"100 millis\"))\n   * )\n   * const s2 = Stream.make(4.1, 5.3, 6.2).pipe(\n   *   Stream.schedule(Schedule.spaced(\"200 millis\"))\n   * )\n   *\n   * const stream = Stream.mergeWith(s1, s2, {\n   *   onSelf: (s) => parseInt(s),\n   *   onOther: (n) => Math.floor(n)\n   * })\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 1, 4, 2, 3, 5, 6 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, A2, E2, R2, A3, A4>(\n    self: Stream<A, E, R>,\n    other: Stream<A2, E2, R2>,\n    options: {\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A4\n      readonly haltStrategy?: HaltStrategy.HaltStrategyInput | undefined\n    }\n  ): Stream<A3 | A4, E | E2, R | R2>\n} = internal.mergeWith\n\n/**\n * Merges this stream and the specified stream together to produce a stream of\n * eithers.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const mergeEither: {\n  /**\n   * Merges this stream and the specified stream together to produce a stream of\n   * eithers.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A2, E2, R2>(\n    that: Stream<A2, E2, R2>\n  ): <A, E, R>(self: Stream<A, E, R>) => Stream<Either.Either<A2, A>, E2 | E, R2 | R>\n  /**\n   * Merges this stream and the specified stream together to produce a stream of\n   * eithers.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, A2, E2, R2>(self: Stream<A, E, R>, that: Stream<A2, E2, R2>): Stream<Either.Either<A2, A>, E | E2, R | R2>\n} = internal.mergeEither\n\n/**\n * Merges this stream and the specified stream together, discarding the values\n * from the right stream.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const mergeLeft: {\n  /**\n   * Merges this stream and the specified stream together, discarding the values\n   * from the right stream.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <AR, ER, RR>(right: Stream<AR, ER, RR>): <AL, EL, RL>(left: Stream<AL, EL, RL>) => Stream<AL, ER | EL, RR | RL>\n  /**\n   * Merges this stream and the specified stream together, discarding the values\n   * from the right stream.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <AL, EL, RL, AR, ER, RR>(left: Stream<AL, EL, RL>, right: Stream<AR, ER, RR>): Stream<AL, EL | ER, RL | RR>\n} = internal.mergeLeft\n\n/**\n * Merges this stream and the specified stream together, discarding the values\n * from the left stream.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const mergeRight: {\n  /**\n   * Merges this stream and the specified stream together, discarding the values\n   * from the left stream.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <AR, ER, RR>(right: Stream<AR, ER, RR>): <AL, EL, RL>(left: Stream<AL, EL, RL>) => Stream<AR, ER | EL, RR | RL>\n  /**\n   * Merges this stream and the specified stream together, discarding the values\n   * from the left stream.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <AL, EL, RL, AR, ER, RR>(left: Stream<AL, EL, RL>, right: Stream<AR, ER, RR>): Stream<AR, EL | ER, RL | RR>\n} = internal.mergeRight\n\n/**\n * Returns a combined string resulting from concatenating each of the values\n * from the stream.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const mkString: <E, R>(self: Stream<string, E, R>) => Effect.Effect<string, E, R> = internal.mkString\n\n/**\n * The stream that never produces any value or fails with any error.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const never: Stream<never> = internal.never\n\n/**\n * Adds an effect to be executed at the end of the stream.\n *\n * @example\n * import { Console, Effect, Stream } from \"effect\"\n *\n * const stream = Stream.make(1, 2, 3).pipe(\n *   Stream.map((n) => n * 2),\n *   Stream.tap((n) => Console.log(`after mapping: ${n}`)),\n *   Stream.onEnd(Console.log(\"Stream ended\"))\n * )\n *\n * Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // after mapping: 2\n * // after mapping: 4\n * // after mapping: 6\n * // Stream ended\n * // { _id: 'Chunk', values: [ 2, 4, 6 ] }\n *\n * @since 3.6.0\n * @category sequencing\n */\nexport const onEnd: {\n  /**\n   * Adds an effect to be executed at the end of the stream.\n   *\n   * @example\n   * import { Console, Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.make(1, 2, 3).pipe(\n   *   Stream.map((n) => n * 2),\n   *   Stream.tap((n) => Console.log(`after mapping: ${n}`)),\n   *   Stream.onEnd(Console.log(\"Stream ended\"))\n   * )\n   *\n   * Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // after mapping: 2\n   * // after mapping: 4\n   * // after mapping: 6\n   * // Stream ended\n   * // { _id: 'Chunk', values: [ 2, 4, 6 ] }\n   *\n   * @since 3.6.0\n   * @category sequencing\n   */\n  <_, E2, R2>(effect: Effect.Effect<_, E2, R2>): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E2 | E, R2 | R>\n  /**\n   * Adds an effect to be executed at the end of the stream.\n   *\n   * @example\n   * import { Console, Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.make(1, 2, 3).pipe(\n   *   Stream.map((n) => n * 2),\n   *   Stream.tap((n) => Console.log(`after mapping: ${n}`)),\n   *   Stream.onEnd(Console.log(\"Stream ended\"))\n   * )\n   *\n   * Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // after mapping: 2\n   * // after mapping: 4\n   * // after mapping: 6\n   * // Stream ended\n   * // { _id: 'Chunk', values: [ 2, 4, 6 ] }\n   *\n   * @since 3.6.0\n   * @category sequencing\n   */\n  <A, E, R, _, E2, R2>(self: Stream<A, E, R>, effect: Effect.Effect<_, E2, R2>): Stream<A, E | E2, R | R2>\n} = internal.onEnd\n\n/**\n * Runs the specified effect if this stream fails, providing the error to the\n * effect if it exists.\n *\n * Note: Unlike `Effect.onError` there is no guarantee that the provided\n * effect will not be interrupted.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const onError: {\n  /**\n   * Runs the specified effect if this stream fails, providing the error to the\n   * effect if it exists.\n   *\n   * Note: Unlike `Effect.onError` there is no guarantee that the provided\n   * effect will not be interrupted.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <E, X, R2>(\n    cleanup: (cause: Cause.Cause<E>) => Effect.Effect<X, never, R2>\n  ): <A, R>(self: Stream<A, E, R>) => Stream<A, E, R2 | R>\n  /**\n   * Runs the specified effect if this stream fails, providing the error to the\n   * effect if it exists.\n   *\n   * Note: Unlike `Effect.onError` there is no guarantee that the provided\n   * effect will not be interrupted.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, X, R2>(\n    self: Stream<A, E, R>,\n    cleanup: (cause: Cause.Cause<E>) => Effect.Effect<X, never, R2>\n  ): Stream<A, E, R | R2>\n} = internal.onError\n\n/**\n * Runs the specified effect if this stream ends.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const onDone: {\n  /**\n   * Runs the specified effect if this stream ends.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <X, R2>(cleanup: () => Effect.Effect<X, never, R2>): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E, R2 | R>\n  /**\n   * Runs the specified effect if this stream ends.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, X, R2>(self: Stream<A, E, R>, cleanup: () => Effect.Effect<X, never, R2>): Stream<A, E, R | R2>\n} = internal.onDone\n\n/**\n * Adds an effect to be executed at the start of the stream.\n *\n * @example\n * import { Console, Effect, Stream } from \"effect\"\n *\n * const stream = Stream.make(1, 2, 3).pipe(\n *   Stream.onStart(Console.log(\"Stream started\")),\n *   Stream.map((n) => n * 2),\n *   Stream.tap((n) => Console.log(`after mapping: ${n}`))\n * )\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // Stream started\n * // after mapping: 2\n * // after mapping: 4\n * // after mapping: 6\n * // { _id: 'Chunk', values: [ 2, 4, 6 ] }\n *\n * @since 3.6.0\n * @category sequencing\n */\nexport const onStart: {\n  /**\n   * Adds an effect to be executed at the start of the stream.\n   *\n   * @example\n   * import { Console, Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.make(1, 2, 3).pipe(\n   *   Stream.onStart(Console.log(\"Stream started\")),\n   *   Stream.map((n) => n * 2),\n   *   Stream.tap((n) => Console.log(`after mapping: ${n}`))\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // Stream started\n   * // after mapping: 2\n   * // after mapping: 4\n   * // after mapping: 6\n   * // { _id: 'Chunk', values: [ 2, 4, 6 ] }\n   *\n   * @since 3.6.0\n   * @category sequencing\n   */\n  <_, E2, R2>(effect: Effect.Effect<_, E2, R2>): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E2 | E, R2 | R>\n  /**\n   * Adds an effect to be executed at the start of the stream.\n   *\n   * @example\n   * import { Console, Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.make(1, 2, 3).pipe(\n   *   Stream.onStart(Console.log(\"Stream started\")),\n   *   Stream.map((n) => n * 2),\n   *   Stream.tap((n) => Console.log(`after mapping: ${n}`))\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // Stream started\n   * // after mapping: 2\n   * // after mapping: 4\n   * // after mapping: 6\n   * // { _id: 'Chunk', values: [ 2, 4, 6 ] }\n   *\n   * @since 3.6.0\n   * @category sequencing\n   */\n  <A, E, R, _, E2, R2>(self: Stream<A, E, R>, effect: Effect.Effect<_, E2, R2>): Stream<A, E | E2, R | R2>\n} = internal.onStart\n\n/**\n * Translates any failure into a stream termination, making the stream\n * infallible and all failures unchecked.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const orDie: <A, E, R>(self: Stream<A, E, R>) => Stream<A, never, R> = internal.orDie\n\n/**\n * Keeps none of the errors, and terminates the stream with them, using the\n * specified function to convert the `E` into a defect.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const orDieWith: {\n  /**\n   * Keeps none of the errors, and terminates the stream with them, using the\n   * specified function to convert the `E` into a defect.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <E>(f: (e: E) => unknown): <A, R>(self: Stream<A, E, R>) => Stream<A, never, R>\n  /**\n   * Keeps none of the errors, and terminates the stream with them, using the\n   * specified function to convert the `E` into a defect.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R>(self: Stream<A, E, R>, f: (e: E) => unknown): Stream<A, never, R>\n} = internal.orDieWith\n\n/**\n * Switches to the provided stream in case this one fails with a typed error.\n *\n * See also `Stream.catchAll`.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const orElse: {\n  /**\n   * Switches to the provided stream in case this one fails with a typed error.\n   *\n   * See also `Stream.catchAll`.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A2, E2, R2>(that: LazyArg<Stream<A2, E2, R2>>): <A, E, R>(self: Stream<A, E, R>) => Stream<A2 | A, E2, R2 | R>\n  /**\n   * Switches to the provided stream in case this one fails with a typed error.\n   *\n   * See also `Stream.catchAll`.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, A2, E2, R2>(self: Stream<A, E, R>, that: LazyArg<Stream<A2, E2, R2>>): Stream<A | A2, E2, R | R2>\n} = internal.orElse\n\n/**\n * Switches to the provided stream in case this one fails with a typed error.\n *\n * See also `Stream.catchAll`.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const orElseEither: {\n  /**\n   * Switches to the provided stream in case this one fails with a typed error.\n   *\n   * See also `Stream.catchAll`.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A2, E2, R2>(\n    that: LazyArg<Stream<A2, E2, R2>>\n  ): <A, E, R>(self: Stream<A, E, R>) => Stream<Either.Either<A2, A>, E2, R2 | R>\n  /**\n   * Switches to the provided stream in case this one fails with a typed error.\n   *\n   * See also `Stream.catchAll`.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Stream<A, E, R>,\n    that: LazyArg<Stream<A2, E2, R2>>\n  ): Stream<Either.Either<A2, A>, E2, R | R2>\n} = internal.orElseEither\n\n/**\n * Fails with given error in case this one fails with a typed error.\n *\n * See also `Stream.catchAll`.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const orElseFail: {\n  /**\n   * Fails with given error in case this one fails with a typed error.\n   *\n   * See also `Stream.catchAll`.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <E2>(error: LazyArg<E2>): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E2, R>\n  /**\n   * Fails with given error in case this one fails with a typed error.\n   *\n   * See also `Stream.catchAll`.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, E2>(self: Stream<A, E, R>, error: LazyArg<E2>): Stream<A, E2, R>\n} = internal.orElseFail\n\n/**\n * Produces the specified element if this stream is empty.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const orElseIfEmpty: {\n  /**\n   * Produces the specified element if this stream is empty.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A2>(element: LazyArg<A2>): <A, E, R>(self: Stream<A, E, R>) => Stream<A2 | A, E, R>\n  /**\n   * Produces the specified element if this stream is empty.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, A2>(self: Stream<A, E, R>, element: LazyArg<A2>): Stream<A | A2, E, R>\n} = internal.orElseIfEmpty\n\n/**\n * Produces the specified chunk if this stream is empty.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const orElseIfEmptyChunk: {\n  /**\n   * Produces the specified chunk if this stream is empty.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A2>(chunk: LazyArg<Chunk.Chunk<A2>>): <A, E, R>(self: Stream<A, E, R>) => Stream<A2 | A, E, R>\n  /**\n   * Produces the specified chunk if this stream is empty.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, A2>(self: Stream<A, E, R>, chunk: LazyArg<Chunk.Chunk<A2>>): Stream<A | A2, E, R>\n} = internal.orElseIfEmptyChunk\n\n/**\n * Switches to the provided stream in case this one is empty.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const orElseIfEmptyStream: {\n  /**\n   * Switches to the provided stream in case this one is empty.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A2, E2, R2>(stream: LazyArg<Stream<A2, E2, R2>>): <A, E, R>(self: Stream<A, E, R>) => Stream<A2 | A, E2 | E, R2 | R>\n  /**\n   * Switches to the provided stream in case this one is empty.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, A2, E2, R2>(self: Stream<A, E, R>, stream: LazyArg<Stream<A2, E2, R2>>): Stream<A | A2, E | E2, R | R2>\n} = internal.orElseIfEmptyStream\n\n/**\n * Succeeds with the specified value if this one fails with a typed error.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const orElseSucceed: {\n  /**\n   * Succeeds with the specified value if this one fails with a typed error.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A2>(value: LazyArg<A2>): <A, E, R>(self: Stream<A, E, R>) => Stream<A2 | A, never, R>\n  /**\n   * Succeeds with the specified value if this one fails with a typed error.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, A2>(self: Stream<A, E, R>, value: LazyArg<A2>): Stream<A | A2, never, R>\n} = internal.orElseSucceed\n\n/**\n * Like `Stream.unfold`, but allows the emission of values to end one step further\n * than the unfolding of the state. This is useful for embedding paginated\n * APIs, hence the name.\n *\n * @example\n * import { Effect, Option, Stream } from \"effect\"\n *\n * const stream = Stream.paginate(0, (n) => [\n *   n,\n *   n < 3 ? Option.some(n + 1) : Option.none()\n * ])\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [ 0, 1, 2, 3 ] }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const paginate: <S, A>(s: S, f: (s: S) => readonly [A, Option.Option<S>]) => Stream<A> = internal.paginate\n\n/**\n * Like `Stream.unfoldChunk`, but allows the emission of values to end one step\n * further than the unfolding of the state. This is useful for embedding\n * paginated APIs, hence the name.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const paginateChunk: <S, A>(\n  s: S,\n  f: (s: S) => readonly [Chunk.Chunk<A>, Option.Option<S>]\n) => Stream<A> = internal.paginateChunk\n\n/**\n * Like `Stream.unfoldChunkEffect`, but allows the emission of values to end one step\n * further than the unfolding of the state. This is useful for embedding\n * paginated APIs, hence the name.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const paginateChunkEffect: <S, A, E, R>(\n  s: S,\n  f: (s: S) => Effect.Effect<readonly [Chunk.Chunk<A>, Option.Option<S>], E, R>\n) => Stream<A, E, R> = internal.paginateChunkEffect\n\n/**\n * Like `Stream.unfoldEffect` but allows the emission of values to end one step\n * further than the unfolding of the state. This is useful for embedding\n * paginated APIs, hence the name.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const paginateEffect: <S, A, E, R>(\n  s: S,\n  f: (s: S) => Effect.Effect<readonly [A, Option.Option<S>], E, R>\n) => Stream<A, E, R> = internal.paginateEffect\n\n/**\n * Partition a stream using a predicate. The first stream will contain all\n * element evaluated to true and the second one will contain all element\n * evaluated to false. The faster stream may advance by up to buffer elements\n * further than the slower one.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const partition = Stream.range(1, 10).pipe(\n *   Stream.partition((n) => n % 2 === 0, { bufferSize: 5 })\n * )\n *\n * const program = Effect.scoped(\n *   Effect.gen(function*() {\n *     const [evens, odds] = yield* partition\n *     console.log(yield* Stream.runCollect(evens))\n *     console.log(yield* Stream.runCollect(odds))\n *   })\n * )\n *\n * // Effect.runPromise(program)\n * // { _id: 'Chunk', values: [ 2, 4, 6, 8, 10 ] }\n * // { _id: 'Chunk', values: [ 1, 3, 5, 7, 9 ] }\n *\n * @since 2.0.0\n * @category utils\n */\nexport const partition: {\n  /**\n   * Partition a stream using a predicate. The first stream will contain all\n   * element evaluated to true and the second one will contain all element\n   * evaluated to false. The faster stream may advance by up to buffer elements\n   * further than the slower one.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const partition = Stream.range(1, 10).pipe(\n   *   Stream.partition((n) => n % 2 === 0, { bufferSize: 5 })\n   * )\n   *\n   * const program = Effect.scoped(\n   *   Effect.gen(function*() {\n   *     const [evens, odds] = yield* partition\n   *     console.log(yield* Stream.runCollect(evens))\n   *     console.log(yield* Stream.runCollect(odds))\n   *   })\n   * )\n   *\n   * // Effect.runPromise(program)\n   * // { _id: 'Chunk', values: [ 2, 4, 6, 8, 10 ] }\n   * // { _id: 'Chunk', values: [ 1, 3, 5, 7, 9 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <C extends A, B extends A, A = C>(\n    refinement: Refinement<NoInfer<A>, B>,\n    options?: { bufferSize?: number | undefined } | undefined\n  ): <E, R>(\n    self: Stream<C, E, R>\n  ) => Effect.Effect<[excluded: Stream<Exclude<C, B>, E, never>, satisfying: Stream<B, E, never>], E, R | Scope.Scope>\n  /**\n   * Partition a stream using a predicate. The first stream will contain all\n   * element evaluated to true and the second one will contain all element\n   * evaluated to false. The faster stream may advance by up to buffer elements\n   * further than the slower one.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const partition = Stream.range(1, 10).pipe(\n   *   Stream.partition((n) => n % 2 === 0, { bufferSize: 5 })\n   * )\n   *\n   * const program = Effect.scoped(\n   *   Effect.gen(function*() {\n   *     const [evens, odds] = yield* partition\n   *     console.log(yield* Stream.runCollect(evens))\n   *     console.log(yield* Stream.runCollect(odds))\n   *   })\n   * )\n   *\n   * // Effect.runPromise(program)\n   * // { _id: 'Chunk', values: [ 2, 4, 6, 8, 10 ] }\n   * // { _id: 'Chunk', values: [ 1, 3, 5, 7, 9 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(\n    predicate: Predicate<A>,\n    options?: { bufferSize?: number | undefined } | undefined\n  ): <E, R>(\n    self: Stream<A, E, R>\n  ) => Effect.Effect<[excluded: Stream<A, E, never>, satisfying: Stream<A, E, never>], E, Scope.Scope | R>\n  /**\n   * Partition a stream using a predicate. The first stream will contain all\n   * element evaluated to true and the second one will contain all element\n   * evaluated to false. The faster stream may advance by up to buffer elements\n   * further than the slower one.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const partition = Stream.range(1, 10).pipe(\n   *   Stream.partition((n) => n % 2 === 0, { bufferSize: 5 })\n   * )\n   *\n   * const program = Effect.scoped(\n   *   Effect.gen(function*() {\n   *     const [evens, odds] = yield* partition\n   *     console.log(yield* Stream.runCollect(evens))\n   *     console.log(yield* Stream.runCollect(odds))\n   *   })\n   * )\n   *\n   * // Effect.runPromise(program)\n   * // { _id: 'Chunk', values: [ 2, 4, 6, 8, 10 ] }\n   * // { _id: 'Chunk', values: [ 1, 3, 5, 7, 9 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <C extends A, E, R, B extends A, A = C>(\n    self: Stream<C, E, R>,\n    refinement: Refinement<A, B>,\n    options?: { bufferSize?: number | undefined } | undefined\n  ): Effect.Effect<[excluded: Stream<Exclude<C, B>, E, never>, satisfying: Stream<B, E, never>], E, R | Scope.Scope>\n  /**\n   * Partition a stream using a predicate. The first stream will contain all\n   * element evaluated to true and the second one will contain all element\n   * evaluated to false. The faster stream may advance by up to buffer elements\n   * further than the slower one.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const partition = Stream.range(1, 10).pipe(\n   *   Stream.partition((n) => n % 2 === 0, { bufferSize: 5 })\n   * )\n   *\n   * const program = Effect.scoped(\n   *   Effect.gen(function*() {\n   *     const [evens, odds] = yield* partition\n   *     console.log(yield* Stream.runCollect(evens))\n   *     console.log(yield* Stream.runCollect(odds))\n   *   })\n   * )\n   *\n   * // Effect.runPromise(program)\n   * // { _id: 'Chunk', values: [ 2, 4, 6, 8, 10 ] }\n   * // { _id: 'Chunk', values: [ 1, 3, 5, 7, 9 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(\n    self: Stream<A, E, R>,\n    predicate: Predicate<A>,\n    options?: { bufferSize?: number | undefined } | undefined\n  ): Effect.Effect<[excluded: Stream<A, E, never>, satisfying: Stream<A, E, never>], E, R | Scope.Scope>\n} = internal.partition\n\n/**\n * Split a stream by an effectful predicate. The faster stream may advance by\n * up to buffer elements further than the slower one.\n *\n * @example\n * import { Effect, Either, Stream } from \"effect\"\n *\n * const partition = Stream.range(1, 9).pipe(\n *   Stream.partitionEither(\n *     (n) => Effect.succeed(n % 2 === 0 ? Either.left(n) : Either.right(n)),\n *     { bufferSize: 5 }\n *   )\n * )\n *\n * const program = Effect.scoped(\n *   Effect.gen(function*() {\n *     const [evens, odds] = yield* partition\n *     console.log(yield* Stream.runCollect(evens))\n *     console.log(yield* Stream.runCollect(odds))\n *   })\n * )\n *\n * // Effect.runPromise(program)\n * // { _id: 'Chunk', values: [ 2, 4, 6, 8 ] }\n * // { _id: 'Chunk', values: [ 1, 3, 5, 7, 9 ] }\n *\n * @since 2.0.0\n * @category utils\n */\nexport const partitionEither: {\n  /**\n   * Split a stream by an effectful predicate. The faster stream may advance by\n   * up to buffer elements further than the slower one.\n   *\n   * @example\n   * import { Effect, Either, Stream } from \"effect\"\n   *\n   * const partition = Stream.range(1, 9).pipe(\n   *   Stream.partitionEither(\n   *     (n) => Effect.succeed(n % 2 === 0 ? Either.left(n) : Either.right(n)),\n   *     { bufferSize: 5 }\n   *   )\n   * )\n   *\n   * const program = Effect.scoped(\n   *   Effect.gen(function*() {\n   *     const [evens, odds] = yield* partition\n   *     console.log(yield* Stream.runCollect(evens))\n   *     console.log(yield* Stream.runCollect(odds))\n   *   })\n   * )\n   *\n   * // Effect.runPromise(program)\n   * // { _id: 'Chunk', values: [ 2, 4, 6, 8 ] }\n   * // { _id: 'Chunk', values: [ 1, 3, 5, 7, 9 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, A3, A2, E2, R2>(\n    predicate: (a: NoInfer<A>) => Effect.Effect<Either.Either<A3, A2>, E2, R2>,\n    options?: { readonly bufferSize?: number | undefined } | undefined\n  ): <E, R>(\n    self: Stream<A, E, R>\n  ) => Effect.Effect<[left: Stream<A2, E2 | E, never>, right: Stream<A3, E2 | E, never>], E2 | E, Scope.Scope | R2 | R>\n  /**\n   * Split a stream by an effectful predicate. The faster stream may advance by\n   * up to buffer elements further than the slower one.\n   *\n   * @example\n   * import { Effect, Either, Stream } from \"effect\"\n   *\n   * const partition = Stream.range(1, 9).pipe(\n   *   Stream.partitionEither(\n   *     (n) => Effect.succeed(n % 2 === 0 ? Either.left(n) : Either.right(n)),\n   *     { bufferSize: 5 }\n   *   )\n   * )\n   *\n   * const program = Effect.scoped(\n   *   Effect.gen(function*() {\n   *     const [evens, odds] = yield* partition\n   *     console.log(yield* Stream.runCollect(evens))\n   *     console.log(yield* Stream.runCollect(odds))\n   *   })\n   * )\n   *\n   * // Effect.runPromise(program)\n   * // { _id: 'Chunk', values: [ 2, 4, 6, 8 ] }\n   * // { _id: 'Chunk', values: [ 1, 3, 5, 7, 9 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, A3, A2, E2, R2>(\n    self: Stream<A, E, R>,\n    predicate: (a: A) => Effect.Effect<Either.Either<A3, A2>, E2, R2>,\n    options?: { readonly bufferSize?: number | undefined } | undefined\n  ): Effect.Effect<[left: Stream<A2, E | E2, never>, right: Stream<A3, E | E2, never>], E | E2, Scope.Scope | R | R2>\n} = internal.partitionEither\n\n/**\n * Peels off enough material from the stream to construct a `Z` using the\n * provided `Sink` and then returns both the `Z` and the rest of the\n * `Stream` in a scope. Like all scoped values, the provided stream is\n * valid only within the scope.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const peel: {\n  /**\n   * Peels off enough material from the stream to construct a `Z` using the\n   * provided `Sink` and then returns both the `Z` and the rest of the\n   * `Stream` in a scope. Like all scoped values, the provided stream is\n   * valid only within the scope.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A2, A, E2, R2>(\n    sink: Sink.Sink<A2, A, A, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Effect.Effect<[A2, Stream<A, E, never>], E2 | E, Scope.Scope | R2 | R>\n  /**\n   * Peels off enough material from the stream to construct a `Z` using the\n   * provided `Sink` and then returns both the `Z` and the rest of the\n   * `Stream` in a scope. Like all scoped values, the provided stream is\n   * valid only within the scope.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Stream<A, E, R>,\n    sink: Sink.Sink<A2, A, A, E2, R2>\n  ): Effect.Effect<[A2, Stream<A, E, never>], E | E2, Scope.Scope | R | R2>\n} = internal.peel\n\n/**\n * Pipes all of the values from this stream through the provided sink.\n *\n * See also `Stream.transduce`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const pipeThrough: {\n  /**\n   * Pipes all of the values from this stream through the provided sink.\n   *\n   * See also `Stream.transduce`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A2, A, L, E2, R2>(sink: Sink.Sink<A2, A, L, E2, R2>): <E, R>(self: Stream<A, E, R>) => Stream<L, E2 | E, R2 | R>\n  /**\n   * Pipes all of the values from this stream through the provided sink.\n   *\n   * See also `Stream.transduce`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, A2, L, E2, R2>(self: Stream<A, E, R>, sink: Sink.Sink<A2, A, L, E2, R2>): Stream<L, E | E2, R | R2>\n} = internal.pipeThrough\n\n/**\n * Pipes all the values from this stream through the provided channel.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const pipeThroughChannel: {\n  /**\n   * Pipes all the values from this stream through the provided channel.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <R2, E, E2, A, A2>(\n    channel: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, E, unknown, unknown, R2>\n  ): <R>(self: Stream<A, E, R>) => Stream<A2, E2, R2 | R>\n  /**\n   * Pipes all the values from this stream through the provided channel.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <R, R2, E, E2, A, A2>(\n    self: Stream<A, E, R>,\n    channel: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, E, unknown, unknown, R2>\n  ): Stream<A2, E2, R | R2>\n} = internal.pipeThroughChannel\n\n/**\n * Pipes all values from this stream through the provided channel, passing\n * through any error emitted by this stream unchanged.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const pipeThroughChannelOrFail: {\n  /**\n   * Pipes all values from this stream through the provided channel, passing\n   * through any error emitted by this stream unchanged.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <R2, E, E2, A, A2>(\n    chan: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, E, unknown, unknown, R2>\n  ): <R>(self: Stream<A, E, R>) => Stream<A2, E | E2, R2 | R>\n  /**\n   * Pipes all values from this stream through the provided channel, passing\n   * through any error emitted by this stream unchanged.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <R, R2, E, E2, A, A2>(\n    self: Stream<A, E, R>,\n    chan: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, E, unknown, unknown, R2>\n  ): Stream<A2, E | E2, R | R2>\n} = internal.pipeThroughChannelOrFail\n\n/**\n * Emits the provided chunk before emitting any other value.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const prepend: {\n  /**\n   * Emits the provided chunk before emitting any other value.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <B>(values: Chunk.Chunk<B>): <A, E, R>(self: Stream<A, E, R>) => Stream<B | A, E, R>\n  /**\n   * Emits the provided chunk before emitting any other value.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, B>(self: Stream<A, E, R>, values: Chunk.Chunk<B>): Stream<A | B, E, R>\n} = internal.prepend\n\n/**\n * Provides the stream with its required context, which eliminates its\n * dependency on `R`.\n *\n * @since 2.0.0\n * @category context\n */\nexport const provideContext: {\n  /**\n   * Provides the stream with its required context, which eliminates its\n   * dependency on `R`.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <R>(context: Context.Context<R>): <A, E>(self: Stream<A, E, R>) => Stream<A, E>\n  /**\n   * Provides the stream with its required context, which eliminates its\n   * dependency on `R`.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <A, E, R>(self: Stream<A, E, R>, context: Context.Context<R>): Stream<A, E>\n} = internal.provideContext\n\n/**\n * Provides a `Layer` to the stream, which translates it to another level.\n *\n * @since 2.0.0\n * @category context\n */\nexport const provideLayer: {\n  /**\n   * Provides a `Layer` to the stream, which translates it to another level.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <RIn, E2, ROut>(layer: Layer.Layer<ROut, E2, RIn>): <A, E>(self: Stream<A, E, ROut>) => Stream<A, E2 | E, RIn>\n  /**\n   * Provides a `Layer` to the stream, which translates it to another level.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <A, E, RIn, E2, ROut>(self: Stream<A, E, ROut>, layer: Layer.Layer<ROut, E2, RIn>): Stream<A, E | E2, RIn>\n} = internal.provideLayer\n\n/**\n * Provides the stream with the single service it requires. If the stream\n * requires more than one service use `Stream.provideContext` instead.\n *\n * @since 2.0.0\n * @category context\n */\nexport const provideService: {\n  /**\n   * Provides the stream with the single service it requires. If the stream\n   * requires more than one service use `Stream.provideContext` instead.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    resource: Context.Tag.Service<T>\n  ): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E, Exclude<R, Context.Tag.Identifier<T>>>\n  /**\n   * Provides the stream with the single service it requires. If the stream\n   * requires more than one service use `Stream.provideContext` instead.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Stream<A, E, R>,\n    tag: T,\n    resource: Context.Tag.Service<T>\n  ): Stream<A, E, Exclude<R, Context.Tag.Identifier<T>>>\n} = internal.provideService\n\n/**\n * Provides the stream with the single service it requires. If the stream\n * requires more than one service use `Stream.provideContext` instead.\n *\n * @since 2.0.0\n * @category context\n */\nexport const provideServiceEffect: {\n  /**\n   * Provides the stream with the single service it requires. If the stream\n   * requires more than one service use `Stream.provideContext` instead.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <T extends Context.Tag<any, any>, E2, R2>(\n    tag: T,\n    effect: Effect.Effect<Context.Tag.Service<T>, E2, R2>\n  ): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E2 | E, R2 | Exclude<R, Context.Tag.Identifier<T>>>\n  /**\n   * Provides the stream with the single service it requires. If the stream\n   * requires more than one service use `Stream.provideContext` instead.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <A, E, R, T extends Context.Tag<any, any>, E2, R2>(\n    self: Stream<A, E, R>,\n    tag: T,\n    effect: Effect.Effect<Context.Tag.Service<T>, E2, R2>\n  ): Stream<A, E | E2, R2 | Exclude<R, Context.Tag.Identifier<T>>>\n} = internal.provideServiceEffect\n\n/**\n * Provides the stream with the single service it requires. If the stream\n * requires more than one service use `Stream.provideContext` instead.\n *\n * @since 2.0.0\n * @category context\n */\nexport const provideServiceStream: {\n  /**\n   * Provides the stream with the single service it requires. If the stream\n   * requires more than one service use `Stream.provideContext` instead.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <T extends Context.Tag<any, any>, E2, R2>(\n    tag: T,\n    stream: Stream<Context.Tag.Service<T>, E2, R2>\n  ): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E2 | E, R2 | Exclude<R, Context.Tag.Identifier<T>>>\n  /**\n   * Provides the stream with the single service it requires. If the stream\n   * requires more than one service use `Stream.provideContext` instead.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <A, E, R, T extends Context.Tag<any, any>, E2, R2>(\n    self: Stream<A, E, R>,\n    tag: T,\n    stream: Stream<Context.Tag.Service<T>, E2, R2>\n  ): Stream<A, E | E2, R2 | Exclude<R, Context.Tag.Identifier<T>>>\n} = internal.provideServiceStream\n\n/**\n * Transforms the context being provided to the stream with the specified\n * function.\n *\n * @since 2.0.0\n * @category context\n */\nexport const mapInputContext: {\n  /**\n   * Transforms the context being provided to the stream with the specified\n   * function.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <R0, R>(f: (env: Context.Context<R0>) => Context.Context<R>): <A, E>(self: Stream<A, E, R>) => Stream<A, E, R0>\n  /**\n   * Transforms the context being provided to the stream with the specified\n   * function.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <A, E, R0, R>(self: Stream<A, E, R>, f: (env: Context.Context<R0>) => Context.Context<R>): Stream<A, E, R0>\n} = internal.mapInputContext\n\n/**\n * Splits the context into two parts, providing one part using the\n * specified layer and leaving the remainder `R0`.\n *\n * @since 2.0.0\n * @category context\n */\nexport const provideSomeLayer: {\n  /**\n   * Splits the context into two parts, providing one part using the\n   * specified layer and leaving the remainder `R0`.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <RIn, E2, ROut>(\n    layer: Layer.Layer<ROut, E2, RIn>\n  ): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E2 | E, RIn | Exclude<R, ROut>>\n  /**\n   * Splits the context into two parts, providing one part using the\n   * specified layer and leaving the remainder `R0`.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <A, E, R, RIn, E2, ROut>(\n    self: Stream<A, E, R>,\n    layer: Layer.Layer<ROut, E2, RIn>\n  ): Stream<A, E | E2, RIn | Exclude<R, ROut>>\n} = internal.provideSomeLayer\n\n/**\n * Returns a stream that mirrors the first upstream to emit an item.\n * As soon as one of the upstream emits a first value, the other is interrupted.\n * The resulting stream will forward all items from the \"winning\" source stream.\n * Any upstream failures will cause the returned stream to fail.\n *\n * @example\n * import { Stream, Schedule, Console, Effect } from \"effect\"\n *\n * const stream = Stream.fromSchedule(Schedule.spaced('2 millis')).pipe(\n *   Stream.race(Stream.fromSchedule(Schedule.spaced('1 millis'))),\n *   Stream.take(6),\n *   Stream.tap(Console.log)\n * )\n *\n * Effect.runPromise(Stream.runDrain(stream))\n * // Output each millisecond from the first stream, the rest streams are interrupted\n * // 0\n * // 1\n * // 2\n * // 3\n * // 4\n * // 5\n * @since 3.7.0\n * @category racing\n */\nexport const race: {\n  /**\n   * Returns a stream that mirrors the first upstream to emit an item.\n   * As soon as one of the upstream emits a first value, the other is interrupted.\n   * The resulting stream will forward all items from the \"winning\" source stream.\n   * Any upstream failures will cause the returned stream to fail.\n   *\n   * @example\n   * import { Stream, Schedule, Console, Effect } from \"effect\"\n   *\n   * const stream = Stream.fromSchedule(Schedule.spaced('2 millis')).pipe(\n   *   Stream.race(Stream.fromSchedule(Schedule.spaced('1 millis'))),\n   *   Stream.take(6),\n   *   Stream.tap(Console.log)\n   * )\n   *\n   * Effect.runPromise(Stream.runDrain(stream))\n   * // Output each millisecond from the first stream, the rest streams are interrupted\n   * // 0\n   * // 1\n   * // 2\n   * // 3\n   * // 4\n   * // 5\n   * @since 3.7.0\n   * @category racing\n   */\n  <AR, ER, RR>(right: Stream<AR, ER, RR>): <AL, EL, RL>(left: Stream<AL, EL, RL>) => Stream<AL | AR, EL | ER, RL | RR>\n  /**\n   * Returns a stream that mirrors the first upstream to emit an item.\n   * As soon as one of the upstream emits a first value, the other is interrupted.\n   * The resulting stream will forward all items from the \"winning\" source stream.\n   * Any upstream failures will cause the returned stream to fail.\n   *\n   * @example\n   * import { Stream, Schedule, Console, Effect } from \"effect\"\n   *\n   * const stream = Stream.fromSchedule(Schedule.spaced('2 millis')).pipe(\n   *   Stream.race(Stream.fromSchedule(Schedule.spaced('1 millis'))),\n   *   Stream.take(6),\n   *   Stream.tap(Console.log)\n   * )\n   *\n   * Effect.runPromise(Stream.runDrain(stream))\n   * // Output each millisecond from the first stream, the rest streams are interrupted\n   * // 0\n   * // 1\n   * // 2\n   * // 3\n   * // 4\n   * // 5\n   * @since 3.7.0\n   * @category racing\n   */\n  <AL, EL, RL, AR, ER, RR>(left: Stream<AL, EL, RL>, right: Stream<AR, ER, RR>): Stream<AL | AR, EL | ER, RL | RR>\n} = internal.race\n\n/**\n * Returns a stream that mirrors the first upstream to emit an item.\n * As soon as one of the upstream emits a first value, all the others are interrupted.\n * The resulting stream will forward all items from the \"winning\" source stream.\n * Any upstream failures will cause the returned stream to fail.\n *\n * @example\n * import { Stream, Schedule, Console, Effect } from \"effect\"\n *\n * const stream = Stream.raceAll(\n *   Stream.fromSchedule(Schedule.spaced('1 millis')),\n *   Stream.fromSchedule(Schedule.spaced('2 millis')),\n *   Stream.fromSchedule(Schedule.spaced('4 millis')),\n * ).pipe(Stream.take(6), Stream.tap(Console.log))\n *\n * Effect.runPromise(Stream.runDrain(stream))\n * // Output each millisecond from the first stream, the rest streams are interrupted\n * // 0\n * // 1\n * // 2\n * // 3\n * // 4\n * // 5\n * @since 3.5.0\n * @category racing\n */\nexport const raceAll: <S extends ReadonlyArray<Stream<any, any, any>>>(\n  ...streams: S\n) => Stream<\n  Stream.Success<S[number]>,\n  Stream.Error<S[number]>,\n  Stream.Context<S[number]>\n> = internal.raceAll\n\n/**\n * Constructs a stream from a range of integers, including both endpoints.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * // A Stream with a range of numbers from 1 to 5\n * const stream = Stream.range(1, 5)\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [ 1, 2, 3, 4, 5 ] }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const range: (min: number, max: number, chunkSize?: number) => Stream<number> = internal.range\n\n/**\n * Re-chunks the elements of the stream into chunks of `n` elements each. The\n * last chunk might contain less than `n` elements.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const rechunk: {\n  /**\n   * Re-chunks the elements of the stream into chunks of `n` elements each. The\n   * last chunk might contain less than `n` elements.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (n: number): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E, R>\n  /**\n   * Re-chunks the elements of the stream into chunks of `n` elements each. The\n   * last chunk might contain less than `n` elements.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(self: Stream<A, E, R>, n: number): Stream<A, E, R>\n} = internal.rechunk\n\n/**\n * Keeps some of the errors, and terminates the fiber with the rest\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const refineOrDie: {\n  /**\n   * Keeps some of the errors, and terminates the fiber with the rest\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <E, E2>(pf: (error: E) => Option.Option<E2>): <A, R>(self: Stream<A, E, R>) => Stream<A, E2, R>\n  /**\n   * Keeps some of the errors, and terminates the fiber with the rest\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, E2>(self: Stream<A, E, R>, pf: (error: E) => Option.Option<E2>): Stream<A, E2, R>\n} = internal.refineOrDie\n\n/**\n * Keeps some of the errors, and terminates the fiber with the rest, using the\n * specified function to convert the `E` into a defect.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const refineOrDieWith: {\n  /**\n   * Keeps some of the errors, and terminates the fiber with the rest, using the\n   * specified function to convert the `E` into a defect.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <E, E2>(\n    pf: (error: E) => Option.Option<E2>,\n    f: (error: E) => unknown\n  ): <A, R>(self: Stream<A, E, R>) => Stream<A, E2, R>\n  /**\n   * Keeps some of the errors, and terminates the fiber with the rest, using the\n   * specified function to convert the `E` into a defect.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, E, R, E2>(\n    self: Stream<A, E, R>,\n    pf: (error: E) => Option.Option<E2>,\n    f: (error: E) => unknown\n  ): Stream<A, E2, R>\n} = internal.refineOrDieWith\n\n/**\n * Repeats the entire stream using the specified schedule. The stream will\n * execute normally, and then repeat again according to the provided schedule.\n *\n * @example\n * import { Effect, Schedule, Stream } from \"effect\"\n *\n * const stream = Stream.repeat(Stream.succeed(1), Schedule.forever)\n *\n * // Effect.runPromise(Stream.runCollect(stream.pipe(Stream.take(5)))).then(console.log)\n * // { _id: 'Chunk', values: [ 1, 1, 1, 1, 1 ] }\n *\n * @since 2.0.0\n * @category utils\n */\nexport const repeat: {\n  /**\n   * Repeats the entire stream using the specified schedule. The stream will\n   * execute normally, and then repeat again according to the provided schedule.\n   *\n   * @example\n   * import { Effect, Schedule, Stream } from \"effect\"\n   *\n   * const stream = Stream.repeat(Stream.succeed(1), Schedule.forever)\n   *\n   * // Effect.runPromise(Stream.runCollect(stream.pipe(Stream.take(5)))).then(console.log)\n   * // { _id: 'Chunk', values: [ 1, 1, 1, 1, 1 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <B, R2>(schedule: Schedule.Schedule<B, unknown, R2>): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E, R2 | R>\n  /**\n   * Repeats the entire stream using the specified schedule. The stream will\n   * execute normally, and then repeat again according to the provided schedule.\n   *\n   * @example\n   * import { Effect, Schedule, Stream } from \"effect\"\n   *\n   * const stream = Stream.repeat(Stream.succeed(1), Schedule.forever)\n   *\n   * // Effect.runPromise(Stream.runCollect(stream.pipe(Stream.take(5)))).then(console.log)\n   * // { _id: 'Chunk', values: [ 1, 1, 1, 1, 1 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, B, R2>(self: Stream<A, E, R>, schedule: Schedule.Schedule<B, unknown, R2>): Stream<A, E, R | R2>\n} = internal.repeat\n\n/**\n * Creates a stream from an effect producing a value of type `A` which repeats\n * forever.\n *\n * @example\n * import { Effect, Random, Stream } from \"effect\"\n *\n * const stream = Stream.repeatEffect(Random.nextInt)\n *\n * // Effect.runPromise(Stream.runCollect(stream.pipe(Stream.take(5)))).then(console.log)\n * // Example Output: { _id: 'Chunk', values: [ 3891571149, 4239494205, 2352981603, 2339111046, 1488052210 ] }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const repeatEffect: <A, E, R>(effect: Effect.Effect<A, E, R>) => Stream<A, E, R> = internal.repeatEffect\n\n/**\n * Creates a stream from an effect producing chunks of `A` values which\n * repeats forever.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const repeatEffectChunk: <A, E, R>(effect: Effect.Effect<Chunk.Chunk<A>, E, R>) => Stream<A, E, R> =\n  internal.repeatEffectChunk\n\n/**\n * Creates a stream from an effect producing chunks of `A` values until it\n * fails with `None`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const repeatEffectChunkOption: <A, E, R>(\n  effect: Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R>\n) => Stream<A, E, R> = internal.repeatEffectChunkOption\n\n/**\n * Creates a stream from an effect producing values of type `A` until it fails\n * with `None`.\n *\n * @example\n * // In this example, we're draining an Iterator to create a stream from it\n * import { Stream, Effect, Option } from \"effect\"\n *\n * const drainIterator = <A>(it: Iterator<A>): Stream.Stream<A> =>\n *   Stream.repeatEffectOption(\n *     Effect.sync(() => it.next()).pipe(\n *       Effect.andThen((res) => {\n *         if (res.done) {\n *           return Effect.fail(Option.none())\n *         }\n *         return Effect.succeed(res.value)\n *       })\n *     )\n *   )\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const repeatEffectOption: <A, E, R>(effect: Effect.Effect<A, Option.Option<E>, R>) => Stream<A, E, R> =\n  internal.repeatEffectOption\n\n/**\n * Creates a stream from an effect producing a value of type `A`, which is\n * repeated using the specified schedule.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const repeatEffectWithSchedule: <A, E, R, X, A0 extends A, R2>(\n  effect: Effect.Effect<A, E, R>,\n  schedule: Schedule.Schedule<X, A0, R2>\n) => Stream<A, E, R | R2> = internal.repeatEffectWithSchedule\n\n/**\n * Repeats the entire stream using the specified schedule. The stream will\n * execute normally, and then repeat again according to the provided schedule.\n * The schedule output will be emitted at the end of each repetition.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const repeatEither: {\n  /**\n   * Repeats the entire stream using the specified schedule. The stream will\n   * execute normally, and then repeat again according to the provided schedule.\n   * The schedule output will be emitted at the end of each repetition.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <B, R2>(\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ): <A, E, R>(self: Stream<A, E, R>) => Stream<Either.Either<A, B>, E, R2 | R>\n  /**\n   * Repeats the entire stream using the specified schedule. The stream will\n   * execute normally, and then repeat again according to the provided schedule.\n   * The schedule output will be emitted at the end of each repetition.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, B, R2>(\n    self: Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ): Stream<Either.Either<A, B>, E, R | R2>\n} = internal.repeatEither\n\n/**\n * Repeats each element of the stream using the provided schedule. Repetitions\n * are done in addition to the first execution, which means using\n * `Schedule.recurs(1)` actually results in the original effect, plus an\n * additional recurrence, for a total of two repetitions of each value in the\n * stream.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const repeatElements: {\n  /**\n   * Repeats each element of the stream using the provided schedule. Repetitions\n   * are done in addition to the first execution, which means using\n   * `Schedule.recurs(1)` actually results in the original effect, plus an\n   * additional recurrence, for a total of two repetitions of each value in the\n   * stream.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <B, R2>(schedule: Schedule.Schedule<B, unknown, R2>): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E, R2 | R>\n  /**\n   * Repeats each element of the stream using the provided schedule. Repetitions\n   * are done in addition to the first execution, which means using\n   * `Schedule.recurs(1)` actually results in the original effect, plus an\n   * additional recurrence, for a total of two repetitions of each value in the\n   * stream.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, B, R2>(self: Stream<A, E, R>, schedule: Schedule.Schedule<B, unknown, R2>): Stream<A, E, R | R2>\n} = internal.repeatElements\n\n/**\n * Repeats each element of the stream using the provided schedule. When the\n * schedule is finished, then the output of the schedule will be emitted into\n * the stream. Repetitions are done in addition to the first execution, which\n * means using `Schedule.recurs(1)` actually results in the original effect,\n * plus an additional recurrence, for a total of two repetitions of each value\n * in the stream.\n *\n * This function accepts two conversion functions, which allow the output of\n * this stream and the output of the provided schedule to be unified into a\n * single type. For example, `Either` or similar data type.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const repeatElementsWith: {\n  /**\n   * Repeats each element of the stream using the provided schedule. When the\n   * schedule is finished, then the output of the schedule will be emitted into\n   * the stream. Repetitions are done in addition to the first execution, which\n   * means using `Schedule.recurs(1)` actually results in the original effect,\n   * plus an additional recurrence, for a total of two repetitions of each value\n   * in the stream.\n   *\n   * This function accepts two conversion functions, which allow the output of\n   * this stream and the output of the provided schedule to be unified into a\n   * single type. For example, `Either` or similar data type.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <B, R2, A, C>(\n    schedule: Schedule.Schedule<B, unknown, R2>,\n    options: { readonly onElement: (a: A) => C; readonly onSchedule: (b: B) => C }\n  ): <E, R>(self: Stream<A, E, R>) => Stream<C, E, R2 | R>\n  /**\n   * Repeats each element of the stream using the provided schedule. When the\n   * schedule is finished, then the output of the schedule will be emitted into\n   * the stream. Repetitions are done in addition to the first execution, which\n   * means using `Schedule.recurs(1)` actually results in the original effect,\n   * plus an additional recurrence, for a total of two repetitions of each value\n   * in the stream.\n   *\n   * This function accepts two conversion functions, which allow the output of\n   * this stream and the output of the provided schedule to be unified into a\n   * single type. For example, `Either` or similar data type.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, B, R2, C>(\n    self: Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>,\n    options: { readonly onElement: (a: A) => C; readonly onSchedule: (b: B) => C }\n  ): Stream<C, E, R | R2>\n} = internal.repeatElementsWith\n\n/**\n * Repeats the provided value infinitely.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const stream = Stream.repeatValue(0)\n *\n * // Effect.runPromise(Stream.runCollect(stream.pipe(Stream.take(5)))).then(console.log)\n * // { _id: 'Chunk', values: [ 0, 0, 0, 0, 0 ] }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const repeatValue: <A>(value: A) => Stream<A> = internal.repeatValue\n\n/**\n * Repeats the entire stream using the specified schedule. The stream will\n * execute normally, and then repeat again according to the provided schedule.\n * The schedule output will be emitted at the end of each repetition and can\n * be unified with the stream elements using the provided functions.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const repeatWith: {\n  /**\n   * Repeats the entire stream using the specified schedule. The stream will\n   * execute normally, and then repeat again according to the provided schedule.\n   * The schedule output will be emitted at the end of each repetition and can\n   * be unified with the stream elements using the provided functions.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <B, R2, A, C>(\n    schedule: Schedule.Schedule<B, unknown, R2>,\n    options: { readonly onElement: (a: A) => C; readonly onSchedule: (b: B) => C }\n  ): <E, R>(self: Stream<A, E, R>) => Stream<C, E, R2 | R>\n  /**\n   * Repeats the entire stream using the specified schedule. The stream will\n   * execute normally, and then repeat again according to the provided schedule.\n   * The schedule output will be emitted at the end of each repetition and can\n   * be unified with the stream elements using the provided functions.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, B, R2, C>(\n    self: Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>,\n    options: { readonly onElement: (a: A) => C; readonly onSchedule: (b: B) => C }\n  ): Stream<C, E, R | R2>\n} = internal.repeatWith\n\n/**\n * When the stream fails, retry it according to the given schedule\n *\n * This retries the entire stream, so will re-execute all of the stream's\n * acquire operations.\n *\n * The schedule is reset as soon as the first element passes through the\n * stream again.\n *\n * @param schedule A `Schedule` receiving as input the errors of the stream.\n * @since 2.0.0\n * @category utils\n */\nexport const retry: {\n  /**\n   * When the stream fails, retry it according to the given schedule\n   *\n   * This retries the entire stream, so will re-execute all of the stream's\n   * acquire operations.\n   *\n   * The schedule is reset as soon as the first element passes through the\n   * stream again.\n   *\n   * @param schedule A `Schedule` receiving as input the errors of the stream.\n   * @since 2.0.0\n   * @category utils\n   */\n  <E0 extends E, R2, E, X>(\n    schedule: Schedule.Schedule<X, E0, R2>\n  ): <A, R>(self: Stream<A, E, R>) => Stream<A, E, R2 | R>\n  /**\n   * When the stream fails, retry it according to the given schedule\n   *\n   * This retries the entire stream, so will re-execute all of the stream's\n   * acquire operations.\n   *\n   * The schedule is reset as soon as the first element passes through the\n   * stream again.\n   *\n   * @param schedule A `Schedule` receiving as input the errors of the stream.\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, X, E0 extends E, R2>(self: Stream<A, E, R>, schedule: Schedule.Schedule<X, E0, R2>): Stream<A, E, R | R2>\n} = internal.retry\n\n/**\n * Runs the sink on the stream to produce either the sink's result or an error.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const run: {\n  /**\n   * Runs the sink on the stream to produce either the sink's result or an error.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A2, A, E2, R2>(\n    sink: Sink.Sink<A2, A, unknown, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Effect.Effect<A2, E2 | E, Exclude<R | R2, Scope.Scope>>\n  /**\n   * Runs the sink on the stream to produce either the sink's result or an error.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Stream<A, E, R>,\n    sink: Sink.Sink<A2, A, unknown, E2, R2>\n  ): Effect.Effect<A2, E | E2, Exclude<R | R2, Scope.Scope>>\n} = internal.run\n\n/**\n * Runs the stream and collects all of its elements to a chunk.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runCollect: <A, E, R>(self: Stream<A, E, R>) => Effect.Effect<Chunk.Chunk<A>, E, Exclude<R, Scope.Scope>> =\n  internal.runCollect\n\n/**\n * Runs the stream and emits the number of elements processed\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runCount: <A, E, R>(self: Stream<A, E, R>) => Effect.Effect<number, E, Exclude<R, Scope.Scope>> =\n  internal.runCount\n\n/**\n * Runs the stream only for its effects. The emitted elements are discarded.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runDrain: <A, E, R>(self: Stream<A, E, R>) => Effect.Effect<void, E, Exclude<R, Scope.Scope>> =\n  internal.runDrain\n\n/**\n * Executes a pure fold over the stream of values - reduces all elements in\n * the stream to a value of type `S`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runFold: {\n  /**\n   * Executes a pure fold over the stream of values - reduces all elements in\n   * the stream to a value of type `S`.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <S, A>(s: S, f: (s: S, a: A) => S): <E, R>(self: Stream<A, E, R>) => Effect.Effect<S, E, Exclude<R, Scope.Scope>>\n  /**\n   * Executes a pure fold over the stream of values - reduces all elements in\n   * the stream to a value of type `S`.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R, S>(self: Stream<A, E, R>, s: S, f: (s: S, a: A) => S): Effect.Effect<S, E, Exclude<R, Scope.Scope>>\n} = internal.runFold\n\n/**\n * Executes an effectful fold over the stream of values.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runFoldEffect: {\n  /**\n   * Executes an effectful fold over the stream of values.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <S, A, E2, R2>(\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Effect.Effect<S, E2 | E, Exclude<R | R2, Scope.Scope>>\n  /**\n   * Executes an effectful fold over the stream of values.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R, S, E2, R2>(\n    self: Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ): Effect.Effect<S, E | E2, Exclude<R | R2, Scope.Scope>>\n} = internal.runFoldEffect\n\n/**\n * Executes a pure fold over the stream of values. Returns a scoped value that\n * represents the scope of the stream.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runFoldScoped: {\n  /**\n   * Executes a pure fold over the stream of values. Returns a scoped value that\n   * represents the scope of the stream.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <S, A>(s: S, f: (s: S, a: A) => S): <E, R>(self: Stream<A, E, R>) => Effect.Effect<S, E, Scope.Scope | R>\n  /**\n   * Executes a pure fold over the stream of values. Returns a scoped value that\n   * represents the scope of the stream.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R, S>(self: Stream<A, E, R>, s: S, f: (s: S, a: A) => S): Effect.Effect<S, E, Scope.Scope | R>\n} = internal.runFoldScoped\n\n/**\n * Executes an effectful fold over the stream of values. Returns a scoped\n * value that represents the scope of the stream.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runFoldScopedEffect: {\n  /**\n   * Executes an effectful fold over the stream of values. Returns a scoped\n   * value that represents the scope of the stream.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <S, A, E2, R2>(\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Effect.Effect<S, E2 | E, Scope.Scope | R2 | R>\n  /**\n   * Executes an effectful fold over the stream of values. Returns a scoped\n   * value that represents the scope of the stream.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R, S, E2, R2>(\n    self: Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ): Effect.Effect<S, E | E2, Scope.Scope | R | R2>\n} = internal.runFoldScopedEffect\n\n/**\n * Reduces the elements in the stream to a value of type `S`. Stops the fold\n * early when the condition is not fulfilled. Example:\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runFoldWhile: {\n  /**\n   * Reduces the elements in the stream to a value of type `S`. Stops the fold\n   * early when the condition is not fulfilled. Example:\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <S, A>(\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => S\n  ): <E, R>(self: Stream<A, E, R>) => Effect.Effect<S, E, Exclude<R, Scope.Scope>>\n  /**\n   * Reduces the elements in the stream to a value of type `S`. Stops the fold\n   * early when the condition is not fulfilled. Example:\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R, S>(\n    self: Stream<A, E, R>,\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => S\n  ): Effect.Effect<S, E, Exclude<R, Scope.Scope>>\n} = internal.runFoldWhile\n\n/**\n * Executes an effectful fold over the stream of values. Stops the fold early\n * when the condition is not fulfilled.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runFoldWhileEffect: {\n  /**\n   * Executes an effectful fold over the stream of values. Stops the fold early\n   * when the condition is not fulfilled.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <S, A, E2, R2>(\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Effect.Effect<S, E2 | E, Exclude<R | R2, Scope.Scope>>\n  /**\n   * Executes an effectful fold over the stream of values. Stops the fold early\n   * when the condition is not fulfilled.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R, S, E2, R2>(\n    self: Stream<A, E, R>,\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ): Effect.Effect<S, E | E2, Exclude<R | R2, Scope.Scope>>\n} = internal.runFoldWhileEffect\n\n/**\n * Executes a pure fold over the stream of values. Returns a scoped value that\n * represents the scope of the stream. Stops the fold early when the condition\n * is not fulfilled.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runFoldWhileScoped: {\n  /**\n   * Executes a pure fold over the stream of values. Returns a scoped value that\n   * represents the scope of the stream. Stops the fold early when the condition\n   * is not fulfilled.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <S, A>(\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => S\n  ): <E, R>(self: Stream<A, E, R>) => Effect.Effect<S, E, Scope.Scope | R>\n  /**\n   * Executes a pure fold over the stream of values. Returns a scoped value that\n   * represents the scope of the stream. Stops the fold early when the condition\n   * is not fulfilled.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R, S>(\n    self: Stream<A, E, R>,\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => S\n  ): Effect.Effect<S, E, Scope.Scope | R>\n} = internal.runFoldWhileScoped\n\n/**\n * Executes an effectful fold over the stream of values. Returns a scoped\n * value that represents the scope of the stream. Stops the fold early when\n * the condition is not fulfilled.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runFoldWhileScopedEffect: {\n  /**\n   * Executes an effectful fold over the stream of values. Returns a scoped\n   * value that represents the scope of the stream. Stops the fold early when\n   * the condition is not fulfilled.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <S, A, E2, R2>(\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Effect.Effect<S, E2 | E, R2 | R | Scope.Scope>\n  /**\n   * Executes an effectful fold over the stream of values. Returns a scoped\n   * value that represents the scope of the stream. Stops the fold early when\n   * the condition is not fulfilled.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R, S, E2, R2>(\n    self: Stream<A, E, R>,\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ): Effect.Effect<S, E | E2, Scope.Scope | R | R2>\n} = internal.runFoldWhileScopedEffect\n\n/**\n * Consumes all elements of the stream, passing them to the specified\n * callback.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runForEach: {\n  /**\n   * Consumes all elements of the stream, passing them to the specified\n   * callback.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, X, E2, R2>(\n    f: (a: A) => Effect.Effect<X, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Effect.Effect<void, E2 | E, R2 | R>\n  /**\n   * Consumes all elements of the stream, passing them to the specified\n   * callback.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R, X, E2, R2>(\n    self: Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<X, E2, R2>\n  ): Effect.Effect<void, E | E2, R | R2>\n} = internal.runForEach\n\n/**\n * Consumes all elements of the stream, passing them to the specified\n * callback.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runForEachChunk: {\n  /**\n   * Consumes all elements of the stream, passing them to the specified\n   * callback.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, X, E2, R2>(\n    f: (a: Chunk.Chunk<A>) => Effect.Effect<X, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Effect.Effect<void, E2 | E, R2 | R>\n  /**\n   * Consumes all elements of the stream, passing them to the specified\n   * callback.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R, X, E2, R2>(\n    self: Stream<A, E, R>,\n    f: (a: Chunk.Chunk<A>) => Effect.Effect<X, E2, R2>\n  ): Effect.Effect<void, E | E2, R | R2>\n} = internal.runForEachChunk\n\n/**\n * Like `Stream.runForEachChunk`, but returns a scoped effect so the\n * finalization order can be controlled.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runForEachChunkScoped: {\n  /**\n   * Like `Stream.runForEachChunk`, but returns a scoped effect so the\n   * finalization order can be controlled.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, X, E2, R2>(\n    f: (a: Chunk.Chunk<A>) => Effect.Effect<X, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Effect.Effect<void, E2 | E, Scope.Scope | R2 | R>\n  /**\n   * Like `Stream.runForEachChunk`, but returns a scoped effect so the\n   * finalization order can be controlled.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R, X, E2, R2>(\n    self: Stream<A, E, R>,\n    f: (a: Chunk.Chunk<A>) => Effect.Effect<X, E2, R2>\n  ): Effect.Effect<void, E | E2, Scope.Scope | R | R2>\n} = internal.runForEachChunkScoped\n\n/**\n * Like `Stream.forEach`, but returns a scoped effect so the finalization\n * order can be controlled.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runForEachScoped: {\n  /**\n   * Like `Stream.forEach`, but returns a scoped effect so the finalization\n   * order can be controlled.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, X, E2, R2>(\n    f: (a: A) => Effect.Effect<X, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Effect.Effect<void, E2 | E, Scope.Scope | R2 | R>\n  /**\n   * Like `Stream.forEach`, but returns a scoped effect so the finalization\n   * order can be controlled.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R, X, E2, R2>(\n    self: Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<X, E2, R2>\n  ): Effect.Effect<void, E | E2, Scope.Scope | R | R2>\n} = internal.runForEachScoped\n\n/**\n * Consumes elements of the stream, passing them to the specified callback,\n * and terminating consumption when the callback returns `false`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runForEachWhile: {\n  /**\n   * Consumes elements of the stream, passing them to the specified callback,\n   * and terminating consumption when the callback returns `false`.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E2, R2>(\n    f: (a: A) => Effect.Effect<boolean, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Effect.Effect<void, E2 | E, R2 | R>\n  /**\n   * Consumes elements of the stream, passing them to the specified callback,\n   * and terminating consumption when the callback returns `false`.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R, E2, R2>(\n    self: Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<boolean, E2, R2>\n  ): Effect.Effect<void, E | E2, R | R2>\n} = internal.runForEachWhile\n\n/**\n * Like `Stream.runForEachWhile`, but returns a scoped effect so the\n * finalization order can be controlled.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runForEachWhileScoped: {\n  /**\n   * Like `Stream.runForEachWhile`, but returns a scoped effect so the\n   * finalization order can be controlled.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E2, R2>(\n    f: (a: A) => Effect.Effect<boolean, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Effect.Effect<void, E2 | E, Scope.Scope | R2 | R>\n  /**\n   * Like `Stream.runForEachWhile`, but returns a scoped effect so the\n   * finalization order can be controlled.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R, E2, R2>(\n    self: Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<boolean, E2, R2>\n  ): Effect.Effect<void, E | E2, Scope.Scope | R | R2>\n} = internal.runForEachWhileScoped\n\n/**\n * Runs the stream to completion and yields the first value emitted by it,\n * discarding the rest of the elements.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runHead: <A, E, R>(self: Stream<A, E, R>) => Effect.Effect<Option.Option<A>, E, R> = internal.runHead\n\n/**\n * Publishes elements of this stream to a `PubSub`. Stream failure and ending will\n * also be signalled.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runIntoPubSub: {\n  /**\n   * Publishes elements of this stream to a `PubSub`. Stream failure and ending will\n   * also be signalled.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E>(pubsub: PubSub.PubSub<Take.Take<A, E>>): <R>(self: Stream<A, E, R>) => Effect.Effect<void, never, R>\n  /**\n   * Publishes elements of this stream to a `PubSub`. Stream failure and ending will\n   * also be signalled.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R>(self: Stream<A, E, R>, pubsub: PubSub.PubSub<Take.Take<A, E>>): Effect.Effect<void, never, R>\n} = internal.runIntoPubSub\n\n/**\n * Like `Stream.runIntoPubSub`, but provides the result as a scoped effect to\n * allow for scope composition.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runIntoPubSubScoped: {\n  /**\n   * Like `Stream.runIntoPubSub`, but provides the result as a scoped effect to\n   * allow for scope composition.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E>(\n    pubsub: PubSub.PubSub<Take.Take<A, E>>\n  ): <R>(self: Stream<A, E, R>) => Effect.Effect<void, never, Scope.Scope | R>\n  /**\n   * Like `Stream.runIntoPubSub`, but provides the result as a scoped effect to\n   * allow for scope composition.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R>(self: Stream<A, E, R>, pubsub: PubSub.PubSub<Take.Take<A, E>>): Effect.Effect<void, never, Scope.Scope | R>\n} = internal.runIntoPubSubScoped\n\n/**\n * Enqueues elements of this stream into a queue. Stream failure and ending\n * will also be signalled.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runIntoQueue: {\n  /**\n   * Enqueues elements of this stream into a queue. Stream failure and ending\n   * will also be signalled.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E>(queue: Queue.Enqueue<Take.Take<A, E>>): <R>(self: Stream<A, E, R>) => Effect.Effect<void, never, R>\n  /**\n   * Enqueues elements of this stream into a queue. Stream failure and ending\n   * will also be signalled.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R>(self: Stream<A, E, R>, queue: Queue.Enqueue<Take.Take<A, E>>): Effect.Effect<void, never, R>\n} = internal.runIntoQueue\n\n/**\n * Like `Stream.runIntoQueue`, but provides the result as a scoped [[ZIO]]\n * to allow for scope composition.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runIntoQueueElementsScoped: {\n  /**\n   * Like `Stream.runIntoQueue`, but provides the result as a scoped [[ZIO]]\n   * to allow for scope composition.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E>(\n    queue: Queue.Enqueue<Exit.Exit<A, Option.Option<E>>>\n  ): <R>(self: Stream<A, E, R>) => Effect.Effect<void, never, Scope.Scope | R>\n  /**\n   * Like `Stream.runIntoQueue`, but provides the result as a scoped [[ZIO]]\n   * to allow for scope composition.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R>(\n    self: Stream<A, E, R>,\n    queue: Queue.Enqueue<Exit.Exit<A, Option.Option<E>>>\n  ): Effect.Effect<void, never, Scope.Scope | R>\n} = internal.runIntoQueueElementsScoped\n\n/**\n * Like `Stream.runIntoQueue`, but provides the result as a scoped effect\n * to allow for scope composition.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runIntoQueueScoped: {\n  /**\n   * Like `Stream.runIntoQueue`, but provides the result as a scoped effect\n   * to allow for scope composition.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E>(\n    queue: Queue.Enqueue<Take.Take<A, E>>\n  ): <R>(self: Stream<A, E, R>) => Effect.Effect<void, never, Scope.Scope | R>\n  /**\n   * Like `Stream.runIntoQueue`, but provides the result as a scoped effect\n   * to allow for scope composition.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R>(self: Stream<A, E, R>, queue: Queue.Enqueue<Take.Take<A, E>>): Effect.Effect<void, never, Scope.Scope | R>\n} = internal.runIntoQueueScoped\n\n/**\n * Runs the stream to completion and yields the last value emitted by it,\n * discarding the rest of the elements.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runLast: <A, E, R>(self: Stream<A, E, R>) => Effect.Effect<Option.Option<A>, E, R> = internal.runLast\n\n/**\n * @since 2.0.0\n * @category destructors\n */\nexport const runScoped: {\n  /**\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A2, A, E2, R2>(\n    sink: Sink.Sink<A2, A, unknown, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Effect.Effect<A2, E2 | E, Scope.Scope | R2 | R>\n  /**\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Stream<A, E, R>,\n    sink: Sink.Sink<A2, A, unknown, E2, R2>\n  ): Effect.Effect<A2, E | E2, Scope.Scope | R | R2>\n} = internal.runScoped\n\n/**\n * Runs the stream to a sink which sums elements, provided they are Numeric.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runSum: <E, R>(self: Stream<number, E, R>) => Effect.Effect<number, E, R> = internal.runSum\n\n/**\n * Statefully maps over the elements of this stream to produce all\n * intermediate results of type `S` given an initial S.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const stream = Stream.range(1, 6).pipe(Stream.scan(0, (a, b) => a + b))\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [ 0,  1,  3, 6, 10, 15, 21 ] }\n *\n * @since 2.0.0\n * @category utils\n */\nexport const scan: {\n  /**\n   * Statefully maps over the elements of this stream to produce all\n   * intermediate results of type `S` given an initial S.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.range(1, 6).pipe(Stream.scan(0, (a, b) => a + b))\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 0,  1,  3, 6, 10, 15, 21 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <S, A>(s: S, f: (s: S, a: A) => S): <E, R>(self: Stream<A, E, R>) => Stream<S, E, R>\n  /**\n   * Statefully maps over the elements of this stream to produce all\n   * intermediate results of type `S` given an initial S.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.range(1, 6).pipe(Stream.scan(0, (a, b) => a + b))\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 0,  1,  3, 6, 10, 15, 21 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, S>(self: Stream<A, E, R>, s: S, f: (s: S, a: A) => S): Stream<S, E, R>\n} = internal.scan\n\n/**\n * Statefully and effectfully maps over the elements of this stream to produce\n * all intermediate results of type `S` given an initial S.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const scanEffect: {\n  /**\n   * Statefully and effectfully maps over the elements of this stream to produce\n   * all intermediate results of type `S` given an initial S.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <S, A, E2, R2>(\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Stream<S, E2 | E, R2 | R>\n  /**\n   * Statefully and effectfully maps over the elements of this stream to produce\n   * all intermediate results of type `S` given an initial S.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, S, E2, R2>(\n    self: Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ): Stream<S, E | E2, R | R2>\n} = internal.scanEffect\n\n/**\n * Statefully maps over the elements of this stream to produce all\n * intermediate results.\n *\n * See also `Stream.scan`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const scanReduce: {\n  /**\n   * Statefully maps over the elements of this stream to produce all\n   * intermediate results.\n   *\n   * See also `Stream.scan`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A2, A>(f: (a2: A2 | A, a: A) => A2): <E, R>(self: Stream<A, E, R>) => Stream<A2 | A, E, R>\n  /**\n   * Statefully maps over the elements of this stream to produce all\n   * intermediate results.\n   *\n   * See also `Stream.scan`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, A2>(self: Stream<A, E, R>, f: (a2: A | A2, a: A) => A2): Stream<A | A2, E, R>\n} = internal.scanReduce\n\n/**\n * Statefully and effectfully maps over the elements of this stream to produce\n * all intermediate results.\n *\n * See also `Stream.scanEffect`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const scanReduceEffect: {\n  /**\n   * Statefully and effectfully maps over the elements of this stream to produce\n   * all intermediate results.\n   *\n   * See also `Stream.scanEffect`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A2, A, E2, R2>(\n    f: (a2: A2 | A, a: A) => Effect.Effect<A2 | A, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Stream<A2 | A, E2 | E, R2 | R>\n  /**\n   * Statefully and effectfully maps over the elements of this stream to produce\n   * all intermediate results.\n   *\n   * See also `Stream.scanEffect`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Stream<A, E, R>,\n    f: (a2: A | A2, a: A) => Effect.Effect<A | A2, E2, R2>\n  ): Stream<A | A2, E | E2, R | R2>\n} = internal.scanReduceEffect\n\n/**\n * Schedules the output of the stream using the provided `schedule`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const schedule: {\n  /**\n   * Schedules the output of the stream using the provided `schedule`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <X, A0 extends A, R2, A>(\n    schedule: Schedule.Schedule<X, A0, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Stream<A, E, R2 | R>\n  /**\n   * Schedules the output of the stream using the provided `schedule`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, X, A0 extends A, R2>(self: Stream<A, E, R>, schedule: Schedule.Schedule<X, A0, R2>): Stream<A, E, R | R2>\n} = internal.schedule\n\n/**\n * Schedules the output of the stream using the provided `schedule` and emits\n * its output at the end (if `schedule` is finite). Uses the provided function\n * to align the stream and schedule outputs on the same type.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const scheduleWith: {\n  /**\n   * Schedules the output of the stream using the provided `schedule` and emits\n   * its output at the end (if `schedule` is finite). Uses the provided function\n   * to align the stream and schedule outputs on the same type.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <B, A0 extends A, R2, A, C>(\n    schedule: Schedule.Schedule<B, A0, R2>,\n    options: { readonly onElement: (a: A) => C; readonly onSchedule: (b: B) => C }\n  ): <E, R>(self: Stream<A, E, R>) => Stream<C, E, R2 | R>\n  /**\n   * Schedules the output of the stream using the provided `schedule` and emits\n   * its output at the end (if `schedule` is finite). Uses the provided function\n   * to align the stream and schedule outputs on the same type.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, B, A0 extends A, R2, C>(\n    self: Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, A0, R2>,\n    options: { readonly onElement: (a: A) => C; readonly onSchedule: (b: B) => C }\n  ): Stream<C, E, R | R2>\n} = internal.scheduleWith\n\n/**\n * Creates a single-valued stream from a scoped resource.\n *\n * @example\n * import { Console, Effect, Stream } from \"effect\"\n *\n * // Creating a single-valued stream from a scoped resource\n * const stream = Stream.scoped(\n *   Effect.acquireUseRelease(\n *     Console.log(\"acquire\"),\n *     () => Console.log(\"use\"),\n *     () => Console.log(\"release\")\n *   )\n * )\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // acquire\n * // use\n * // release\n * // { _id: 'Chunk', values: [ undefined ] }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const scoped: <A, E, R>(effect: Effect.Effect<A, E, R>) => Stream<A, E, Exclude<R, Scope.Scope>> =\n  internal.scoped\n\n/**\n * Emits a sliding window of `n` elements.\n *\n * ```ts\n * import * as Stream from \"./Stream\"\n * import { pipe } from \"./Function\"\n *\n * pipe(\n *   Stream.make(1, 2, 3, 4),\n *   Stream.sliding(2),\n *   Stream.runCollect\n * )\n * // => Chunk(Chunk(1, 2), Chunk(2, 3), Chunk(3, 4))\n * ```\n *\n * @since 2.0.0\n * @category utils\n */\nexport const sliding: {\n  /**\n   * Emits a sliding window of `n` elements.\n   *\n   * ```ts\n   * import * as Stream from \"./Stream\"\n   * import { pipe } from \"./Function\"\n   *\n   * pipe(\n   *   Stream.make(1, 2, 3, 4),\n   *   Stream.sliding(2),\n   *   Stream.runCollect\n   * )\n   * // => Chunk(Chunk(1, 2), Chunk(2, 3), Chunk(3, 4))\n   * ```\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (chunkSize: number): <A, E, R>(self: Stream<A, E, R>) => Stream<Chunk.Chunk<A>, E, R>\n  /**\n   * Emits a sliding window of `n` elements.\n   *\n   * ```ts\n   * import * as Stream from \"./Stream\"\n   * import { pipe } from \"./Function\"\n   *\n   * pipe(\n   *   Stream.make(1, 2, 3, 4),\n   *   Stream.sliding(2),\n   *   Stream.runCollect\n   * )\n   * // => Chunk(Chunk(1, 2), Chunk(2, 3), Chunk(3, 4))\n   * ```\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(self: Stream<A, E, R>, chunkSize: number): Stream<Chunk.Chunk<A>, E, R>\n} = internal.sliding\n\n/**\n * Like `sliding`, but with a configurable `stepSize` parameter.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const slidingSize: {\n  /**\n   * Like `sliding`, but with a configurable `stepSize` parameter.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (chunkSize: number, stepSize: number): <A, E, R>(self: Stream<A, E, R>) => Stream<Chunk.Chunk<A>, E, R>\n  /**\n   * Like `sliding`, but with a configurable `stepSize` parameter.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(self: Stream<A, E, R>, chunkSize: number, stepSize: number): Stream<Chunk.Chunk<A>, E, R>\n} = internal.slidingSize\n\n/**\n * Converts an option on values into an option on errors.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const some: <A, E, R>(self: Stream<Option.Option<A>, E, R>) => Stream<A, Option.Option<E>, R> = internal.some\n\n/**\n * Extracts the optional value, or returns the given 'default'.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const someOrElse: {\n  /**\n   * Extracts the optional value, or returns the given 'default'.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A2>(fallback: LazyArg<A2>): <A, E, R>(self: Stream<Option.Option<A>, E, R>) => Stream<A2 | A, E, R>\n  /**\n   * Extracts the optional value, or returns the given 'default'.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, A2>(self: Stream<Option.Option<A>, E, R>, fallback: LazyArg<A2>): Stream<A | A2, E, R>\n} = internal.someOrElse\n\n/**\n * Extracts the optional value, or fails with the given error 'e'.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const someOrFail: {\n  /**\n   * Extracts the optional value, or fails with the given error 'e'.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <E2>(error: LazyArg<E2>): <A, E, R>(self: Stream<Option.Option<A>, E, R>) => Stream<A, E2 | E, R>\n  /**\n   * Extracts the optional value, or fails with the given error 'e'.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, E2>(self: Stream<Option.Option<A>, E, R>, error: LazyArg<E2>): Stream<A, E | E2, R>\n} = internal.someOrFail\n\n/**\n * Splits elements based on a predicate.\n *\n * ```ts\n * import * as Stream from \"./Stream\"\n * import { pipe } from \"./Function\"\n *\n * pipe(\n *   Stream.range(1, 10),\n *   Stream.split((n) => n % 4 === 0),\n *   Stream.runCollect\n * )\n * // => Chunk(Chunk(1, 2, 3), Chunk(5, 6, 7), Chunk(9))\n * ```\n *\n * @since 2.0.0\n * @category utils\n */\nexport const split: {\n  /**\n   * Splits elements based on a predicate.\n   *\n   * ```ts\n   * import * as Stream from \"./Stream\"\n   * import { pipe } from \"./Function\"\n   *\n   * pipe(\n   *   Stream.range(1, 10),\n   *   Stream.split((n) => n % 4 === 0),\n   *   Stream.runCollect\n   * )\n   * // => Chunk(Chunk(1, 2, 3), Chunk(5, 6, 7), Chunk(9))\n   * ```\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): <E, R>(self: Stream<A, E, R>) => Stream<Chunk.Chunk<A>, E, R>\n  /**\n   * Splits elements based on a predicate.\n   *\n   * ```ts\n   * import * as Stream from \"./Stream\"\n   * import { pipe } from \"./Function\"\n   *\n   * pipe(\n   *   Stream.range(1, 10),\n   *   Stream.split((n) => n % 4 === 0),\n   *   Stream.runCollect\n   * )\n   * // => Chunk(Chunk(1, 2, 3), Chunk(5, 6, 7), Chunk(9))\n   * ```\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(self: Stream<A, E, R>, predicate: Predicate<A>): Stream<Chunk.Chunk<A>, E, R>\n} = internal.split\n\n/**\n * Splits elements on a delimiter and transforms the splits into desired output.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const splitOnChunk: {\n  /**\n   * Splits elements on a delimiter and transforms the splits into desired output.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(delimiter: Chunk.Chunk<A>): <E, R>(self: Stream<A, E, R>) => Stream<Chunk.Chunk<A>, E, R>\n  /**\n   * Splits elements on a delimiter and transforms the splits into desired output.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(self: Stream<A, E, R>, delimiter: Chunk.Chunk<A>): Stream<Chunk.Chunk<A>, E, R>\n} = internal.splitOnChunk\n\n/**\n * Splits strings on newlines. Handles both Windows newlines (`\\r\\n`) and UNIX\n * newlines (`\\n`).\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const splitLines: <E, R>(self: Stream<string, E, R>) => Stream<string, E, R> = internal.splitLines\n\n/**\n * Creates a single-valued pure stream.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * // A Stream with a single number\n * const stream = Stream.succeed(3)\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [ 3 ] }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeed: <A>(value: A) => Stream<A> = internal.succeed\n\n/**\n * Creates a single-valued pure stream.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const sync: <A>(evaluate: LazyArg<A>) => Stream<A> = internal.sync\n\n/**\n * Returns a lazily constructed stream.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const suspend: <A, E, R>(stream: LazyArg<Stream<A, E, R>>) => Stream<A, E, R> = internal.suspend\n\n/**\n * Takes the specified number of elements from this stream.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const stream = Stream.take(Stream.iterate(0, (n) => n + 1), 5)\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [ 0, 1, 2, 3, 4 ] }\n *\n * @since 2.0.0\n * @category utils\n */\nexport const take: {\n  /**\n   * Takes the specified number of elements from this stream.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.take(Stream.iterate(0, (n) => n + 1), 5)\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 0, 1, 2, 3, 4 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (n: number): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E, R>\n  /**\n   * Takes the specified number of elements from this stream.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.take(Stream.iterate(0, (n) => n + 1), 5)\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 0, 1, 2, 3, 4 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(self: Stream<A, E, R>, n: number): Stream<A, E, R>\n} = internal.take\n\n/**\n * Takes the last specified number of elements from this stream.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const stream = Stream.takeRight(Stream.make(1, 2, 3, 4, 5, 6), 3)\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [ 4, 5, 6 ] }\n *\n * @since 2.0.0\n * @category utils\n */\nexport const takeRight: {\n  /**\n   * Takes the last specified number of elements from this stream.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.takeRight(Stream.make(1, 2, 3, 4, 5, 6), 3)\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 4, 5, 6 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (n: number): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E, R>\n  /**\n   * Takes the last specified number of elements from this stream.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.takeRight(Stream.make(1, 2, 3, 4, 5, 6), 3)\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 4, 5, 6 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(self: Stream<A, E, R>, n: number): Stream<A, E, R>\n} = internal.takeRight\n\n/**\n * Takes all elements of the stream until the specified predicate evaluates to\n * `true`.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const stream = Stream.takeUntil(Stream.iterate(0, (n) => n + 1), (n) => n === 4)\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [ 0, 1, 2, 3, 4 ] }\n *\n * @since 2.0.0\n * @category utils\n */\nexport const takeUntil: {\n  /**\n   * Takes all elements of the stream until the specified predicate evaluates to\n   * `true`.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.takeUntil(Stream.iterate(0, (n) => n + 1), (n) => n === 4)\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 0, 1, 2, 3, 4 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): <E, R>(self: Stream<A, E, R>) => Stream<A, E, R>\n  /**\n   * Takes all elements of the stream until the specified predicate evaluates to\n   * `true`.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.takeUntil(Stream.iterate(0, (n) => n + 1), (n) => n === 4)\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 0, 1, 2, 3, 4 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(self: Stream<A, E, R>, predicate: Predicate<A>): Stream<A, E, R>\n} = internal.takeUntil\n\n/**\n * Takes all elements of the stream until the specified effectual predicate\n * evaluates to `true`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const takeUntilEffect: {\n  /**\n   * Takes all elements of the stream until the specified effectual predicate\n   * evaluates to `true`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E2, R2>(\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Stream<A, E2 | E, R2 | R>\n  /**\n   * Takes all elements of the stream until the specified effectual predicate\n   * evaluates to `true`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, E2, R2>(\n    self: Stream<A, E, R>,\n    predicate: (a: A) => Effect.Effect<boolean, E2, R2>\n  ): Stream<A, E | E2, R | R2>\n} = internal.takeUntilEffect\n\n/**\n * Takes all elements of the stream for as long as the specified predicate\n * evaluates to `true`.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const stream = Stream.takeWhile(Stream.iterate(0, (n) => n + 1), (n) => n < 5)\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [ 0, 1, 2, 3, 4 ] }\n *\n * @since 2.0.0\n * @category utils\n */\nexport const takeWhile: {\n  /**\n   * Takes all elements of the stream for as long as the specified predicate\n   * evaluates to `true`.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.takeWhile(Stream.iterate(0, (n) => n + 1), (n) => n < 5)\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 0, 1, 2, 3, 4 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): <E, R>(self: Stream<A, E, R>) => Stream<B, E, R>\n  /**\n   * Takes all elements of the stream for as long as the specified predicate\n   * evaluates to `true`.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.takeWhile(Stream.iterate(0, (n) => n + 1), (n) => n < 5)\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 0, 1, 2, 3, 4 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): <E, R>(self: Stream<A, E, R>) => Stream<A, E, R>\n  /**\n   * Takes all elements of the stream for as long as the specified predicate\n   * evaluates to `true`.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.takeWhile(Stream.iterate(0, (n) => n + 1), (n) => n < 5)\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 0, 1, 2, 3, 4 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, B extends A>(self: Stream<A, E, R>, refinement: Refinement<A, B>): Stream<B, E, R>\n  /**\n   * Takes all elements of the stream for as long as the specified predicate\n   * evaluates to `true`.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.takeWhile(Stream.iterate(0, (n) => n + 1), (n) => n < 5)\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ 0, 1, 2, 3, 4 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(self: Stream<A, E, R>, predicate: Predicate<A>): Stream<A, E, R>\n} = internal.takeWhile\n\n/**\n * Adds an effect to consumption of every element of the stream.\n *\n * @example\n * import { Console, Effect, Stream } from \"effect\"\n *\n * const stream = Stream.make(1, 2, 3).pipe(\n *   Stream.tap((n) => Console.log(`before mapping: ${n}`)),\n *   Stream.map((n) => n * 2),\n *   Stream.tap((n) => Console.log(`after mapping: ${n}`))\n * )\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // before mapping: 1\n * // after mapping: 2\n * // before mapping: 2\n * // after mapping: 4\n * // before mapping: 3\n * // after mapping: 6\n * // { _id: 'Chunk', values: [ 2, 4, 6 ] }\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tap: {\n  /**\n   * Adds an effect to consumption of every element of the stream.\n   *\n   * @example\n   * import { Console, Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.make(1, 2, 3).pipe(\n   *   Stream.tap((n) => Console.log(`before mapping: ${n}`)),\n   *   Stream.map((n) => n * 2),\n   *   Stream.tap((n) => Console.log(`after mapping: ${n}`))\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // before mapping: 1\n   * // after mapping: 2\n   * // before mapping: 2\n   * // after mapping: 4\n   * // before mapping: 3\n   * // after mapping: 6\n   * // { _id: 'Chunk', values: [ 2, 4, 6 ] }\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, X, E2, R2>(\n    f: (a: NoInfer<A>) => Effect.Effect<X, E2, R2>\n  ): <E, R>(self: Stream<A, E, R>) => Stream<A, E2 | E, R2 | R>\n  /**\n   * Adds an effect to consumption of every element of the stream.\n   *\n   * @example\n   * import { Console, Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.make(1, 2, 3).pipe(\n   *   Stream.tap((n) => Console.log(`before mapping: ${n}`)),\n   *   Stream.map((n) => n * 2),\n   *   Stream.tap((n) => Console.log(`after mapping: ${n}`))\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // before mapping: 1\n   * // after mapping: 2\n   * // before mapping: 2\n   * // after mapping: 4\n   * // before mapping: 3\n   * // after mapping: 6\n   * // { _id: 'Chunk', values: [ 2, 4, 6 ] }\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, R, X, E2, R2>(self: Stream<A, E, R>, f: (a: NoInfer<A>) => Effect.Effect<X, E2, R2>): Stream<A, E | E2, R | R2>\n} = internal.tap\n\n/**\n * Returns a stream that effectfully \"peeks\" at the failure or success of\n * the stream.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapBoth: {\n  /**\n   * Returns a stream that effectfully \"peeks\" at the failure or success of\n   * the stream.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <E, X1, E2, R2, A, X2, E3, R3>(\n    options: {\n      readonly onFailure: (e: NoInfer<E>) => Effect.Effect<X1, E2, R2>\n      readonly onSuccess: (a: NoInfer<A>) => Effect.Effect<X2, E3, R3>\n    }\n  ): <R>(self: Stream<A, E, R>) => Stream<A, E | E2 | E3, R2 | R3 | R>\n  /**\n   * Returns a stream that effectfully \"peeks\" at the failure or success of\n   * the stream.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, R, X1, E2, R2, X2, E3, R3>(\n    self: Stream<A, E, R>,\n    options: {\n      readonly onFailure: (e: NoInfer<E>) => Effect.Effect<X1, E2, R2>\n      readonly onSuccess: (a: NoInfer<A>) => Effect.Effect<X2, E3, R3>\n    }\n  ): Stream<A, E | E2 | E3, R | R2 | R3>\n} = internal.tapBoth\n\n/**\n * Returns a stream that effectfully \"peeks\" at the failure of the stream.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapError: {\n  /**\n   * Returns a stream that effectfully \"peeks\" at the failure of the stream.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <E, X, E2, R2>(\n    f: (error: NoInfer<E>) => Effect.Effect<X, E2, R2>\n  ): <A, R>(self: Stream<A, E, R>) => Stream<A, E | E2, R2 | R>\n  /**\n   * Returns a stream that effectfully \"peeks\" at the failure of the stream.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, R, X, E2, R2>(self: Stream<A, E, R>, f: (error: E) => Effect.Effect<X, E2, R2>): Stream<A, E | E2, R | R2>\n} = internal.tapError\n\n/**\n * Returns a stream that effectfully \"peeks\" at the cause of failure of the\n * stream.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const tapErrorCause: {\n  /**\n   * Returns a stream that effectfully \"peeks\" at the cause of failure of the\n   * stream.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <E, X, E2, R2>(\n    f: (cause: Cause.Cause<NoInfer<E>>) => Effect.Effect<X, E2, R2>\n  ): <A, R>(self: Stream<A, E, R>) => Stream<A, E | E2, R2 | R>\n  /**\n   * Returns a stream that effectfully \"peeks\" at the cause of failure of the\n   * stream.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, X, E2, R2>(\n    self: Stream<A, E, R>,\n    f: (cause: Cause.Cause<E>) => Effect.Effect<X, E2, R2>\n  ): Stream<A, E | E2, R | R2>\n} = internal.tapErrorCause\n\n/**\n * Sends all elements emitted by this stream to the specified sink in addition\n * to emitting them.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapSink: {\n  /**\n   * Sends all elements emitted by this stream to the specified sink in addition\n   * to emitting them.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E2, R2>(sink: Sink.Sink<unknown, A, unknown, E2, R2>): <E, R>(self: Stream<A, E, R>) => Stream<A, E2 | E, R2 | R>\n  /**\n   * Sends all elements emitted by this stream to the specified sink in addition\n   * to emitting them.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, E, R, E2, R2>(self: Stream<A, E, R>, sink: Sink.Sink<unknown, A, unknown, E2, R2>): Stream<A, E | E2, R | R2>\n} = internal.tapSink\n\n/**\n * Delays the chunks of this stream according to the given bandwidth\n * parameters using the token bucket algorithm. Allows for burst in the\n * processing of elements by allowing the token bucket to accumulate tokens up\n * to a `units + burst` threshold. The weight of each chunk is determined by\n * the `cost` function.\n *\n * If using the \"enforce\" strategy, chunks that do not meet the bandwidth\n * constraints are dropped. If using the \"shape\" strategy, chunks are delayed\n * until they can be emitted without exceeding the bandwidth constraints.\n *\n * Defaults to the \"shape\" strategy.\n *\n * @example\n * import { Chunk, Effect, Schedule, Stream } from \"effect\"\n *\n * let last = Date.now()\n * const log = (message: string) =>\n *   Effect.sync(() => {\n *     const end = Date.now()\n *     console.log(`${message} after ${end - last}ms`)\n *     last = end\n *   })\n *\n * const stream = Stream.fromSchedule(Schedule.spaced(\"50 millis\")).pipe(\n *   Stream.take(6),\n *   Stream.tap((n) => log(`Received ${n}`)),\n *   Stream.throttle({\n *     cost: Chunk.size,\n *     duration: \"100 millis\",\n *     units: 1\n *   }),\n *   Stream.tap((n) => log(`> Emitted ${n}`))\n * )\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // Received 0 after 56ms\n * // > Emitted 0 after 0ms\n * // Received 1 after 52ms\n * // > Emitted 1 after 48ms\n * // Received 2 after 52ms\n * // > Emitted 2 after 49ms\n * // Received 3 after 52ms\n * // > Emitted 3 after 48ms\n * // Received 4 after 52ms\n * // > Emitted 4 after 47ms\n * // Received 5 after 52ms\n * // > Emitted 5 after 49ms\n * // { _id: 'Chunk', values: [ 0, 1, 2, 3, 4, 5 ] }\n *\n * @since 2.0.0\n * @category utils\n */\nexport const throttle: {\n  /**\n   * Delays the chunks of this stream according to the given bandwidth\n   * parameters using the token bucket algorithm. Allows for burst in the\n   * processing of elements by allowing the token bucket to accumulate tokens up\n   * to a `units + burst` threshold. The weight of each chunk is determined by\n   * the `cost` function.\n   *\n   * If using the \"enforce\" strategy, chunks that do not meet the bandwidth\n   * constraints are dropped. If using the \"shape\" strategy, chunks are delayed\n   * until they can be emitted without exceeding the bandwidth constraints.\n   *\n   * Defaults to the \"shape\" strategy.\n   *\n   * @example\n   * import { Chunk, Effect, Schedule, Stream } from \"effect\"\n   *\n   * let last = Date.now()\n   * const log = (message: string) =>\n   *   Effect.sync(() => {\n   *     const end = Date.now()\n   *     console.log(`${message} after ${end - last}ms`)\n   *     last = end\n   *   })\n   *\n   * const stream = Stream.fromSchedule(Schedule.spaced(\"50 millis\")).pipe(\n   *   Stream.take(6),\n   *   Stream.tap((n) => log(`Received ${n}`)),\n   *   Stream.throttle({\n   *     cost: Chunk.size,\n   *     duration: \"100 millis\",\n   *     units: 1\n   *   }),\n   *   Stream.tap((n) => log(`> Emitted ${n}`))\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // Received 0 after 56ms\n   * // > Emitted 0 after 0ms\n   * // Received 1 after 52ms\n   * // > Emitted 1 after 48ms\n   * // Received 2 after 52ms\n   * // > Emitted 2 after 49ms\n   * // Received 3 after 52ms\n   * // > Emitted 3 after 48ms\n   * // Received 4 after 52ms\n   * // > Emitted 4 after 47ms\n   * // Received 5 after 52ms\n   * // > Emitted 5 after 49ms\n   * // { _id: 'Chunk', values: [ 0, 1, 2, 3, 4, 5 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A>(\n    options: {\n      readonly cost: (chunk: Chunk.Chunk<A>) => number\n      readonly units: number\n      readonly duration: Duration.DurationInput\n      readonly burst?: number | undefined\n      readonly strategy?: \"enforce\" | \"shape\" | undefined\n    }\n  ): <E, R>(self: Stream<A, E, R>) => Stream<A, E, R>\n  /**\n   * Delays the chunks of this stream according to the given bandwidth\n   * parameters using the token bucket algorithm. Allows for burst in the\n   * processing of elements by allowing the token bucket to accumulate tokens up\n   * to a `units + burst` threshold. The weight of each chunk is determined by\n   * the `cost` function.\n   *\n   * If using the \"enforce\" strategy, chunks that do not meet the bandwidth\n   * constraints are dropped. If using the \"shape\" strategy, chunks are delayed\n   * until they can be emitted without exceeding the bandwidth constraints.\n   *\n   * Defaults to the \"shape\" strategy.\n   *\n   * @example\n   * import { Chunk, Effect, Schedule, Stream } from \"effect\"\n   *\n   * let last = Date.now()\n   * const log = (message: string) =>\n   *   Effect.sync(() => {\n   *     const end = Date.now()\n   *     console.log(`${message} after ${end - last}ms`)\n   *     last = end\n   *   })\n   *\n   * const stream = Stream.fromSchedule(Schedule.spaced(\"50 millis\")).pipe(\n   *   Stream.take(6),\n   *   Stream.tap((n) => log(`Received ${n}`)),\n   *   Stream.throttle({\n   *     cost: Chunk.size,\n   *     duration: \"100 millis\",\n   *     units: 1\n   *   }),\n   *   Stream.tap((n) => log(`> Emitted ${n}`))\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // Received 0 after 56ms\n   * // > Emitted 0 after 0ms\n   * // Received 1 after 52ms\n   * // > Emitted 1 after 48ms\n   * // Received 2 after 52ms\n   * // > Emitted 2 after 49ms\n   * // Received 3 after 52ms\n   * // > Emitted 3 after 48ms\n   * // Received 4 after 52ms\n   * // > Emitted 4 after 47ms\n   * // Received 5 after 52ms\n   * // > Emitted 5 after 49ms\n   * // { _id: 'Chunk', values: [ 0, 1, 2, 3, 4, 5 ] }\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(\n    self: Stream<A, E, R>,\n    options: {\n      readonly cost: (chunk: Chunk.Chunk<A>) => number\n      readonly units: number\n      readonly duration: Duration.DurationInput\n      readonly burst?: number | undefined\n      readonly strategy?: \"enforce\" | \"shape\" | undefined\n    }\n  ): Stream<A, E, R>\n} = internal.throttle\n\n/**\n * Delays the chunks of this stream according to the given bandwidth\n * parameters using the token bucket algorithm. Allows for burst in the\n * processing of elements by allowing the token bucket to accumulate tokens up\n * to a `units + burst` threshold. The weight of each chunk is determined by\n * the effectful `costFn` function.\n *\n * If using the \"enforce\" strategy, chunks that do not meet the bandwidth\n * constraints are dropped. If using the \"shape\" strategy, chunks are delayed\n * until they can be emitted without exceeding the bandwidth constraints.\n *\n * Defaults to the \"shape\" strategy.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const throttleEffect: {\n  /**\n   * Delays the chunks of this stream according to the given bandwidth\n   * parameters using the token bucket algorithm. Allows for burst in the\n   * processing of elements by allowing the token bucket to accumulate tokens up\n   * to a `units + burst` threshold. The weight of each chunk is determined by\n   * the effectful `costFn` function.\n   *\n   * If using the \"enforce\" strategy, chunks that do not meet the bandwidth\n   * constraints are dropped. If using the \"shape\" strategy, chunks are delayed\n   * until they can be emitted without exceeding the bandwidth constraints.\n   *\n   * Defaults to the \"shape\" strategy.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E2, R2>(\n    options: {\n      readonly cost: (chunk: Chunk.Chunk<A>) => Effect.Effect<number, E2, R2>\n      readonly units: number\n      readonly duration: Duration.DurationInput\n      readonly burst?: number | undefined\n      readonly strategy?: \"enforce\" | \"shape\" | undefined\n    }\n  ): <E, R>(self: Stream<A, E, R>) => Stream<A, E2 | E, R2 | R>\n  /**\n   * Delays the chunks of this stream according to the given bandwidth\n   * parameters using the token bucket algorithm. Allows for burst in the\n   * processing of elements by allowing the token bucket to accumulate tokens up\n   * to a `units + burst` threshold. The weight of each chunk is determined by\n   * the effectful `costFn` function.\n   *\n   * If using the \"enforce\" strategy, chunks that do not meet the bandwidth\n   * constraints are dropped. If using the \"shape\" strategy, chunks are delayed\n   * until they can be emitted without exceeding the bandwidth constraints.\n   *\n   * Defaults to the \"shape\" strategy.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, E2, R2>(\n    self: Stream<A, E, R>,\n    options: {\n      readonly cost: (chunk: Chunk.Chunk<A>) => Effect.Effect<number, E2, R2>\n      readonly units: number\n      readonly duration: Duration.DurationInput\n      readonly burst?: number | undefined\n      readonly strategy?: \"enforce\" | \"shape\" | undefined\n    }\n  ): Stream<A, E | E2, R | R2>\n} = internal.throttleEffect\n\n/**\n * A stream that emits void values spaced by the specified duration.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * let last = Date.now()\n * const log = (message: string) =>\n *   Effect.sync(() => {\n *     const end = Date.now()\n *     console.log(`${message} after ${end - last}ms`)\n *     last = end\n *   })\n *\n * const stream = Stream.tick(\"1 seconds\").pipe(Stream.tap(() => log(\"tick\")))\n *\n * // Effect.runPromise(Stream.runCollect(stream.pipe(Stream.take(5)))).then(console.log)\n * // tick after 4ms\n * // tick after 1003ms\n * // tick after 1001ms\n * // tick after 1002ms\n * // tick after 1002ms\n * // { _id: 'Chunk', values: [ undefined, undefined, undefined, undefined, undefined ] }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const tick: (interval: Duration.DurationInput) => Stream<void> = internal.tick\n\n/**\n * Ends the stream if it does not produce a value after the specified duration.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const timeout: {\n  /**\n   * Ends the stream if it does not produce a value after the specified duration.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (duration: Duration.DurationInput): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E, R>\n  /**\n   * Ends the stream if it does not produce a value after the specified duration.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(self: Stream<A, E, R>, duration: Duration.DurationInput): Stream<A, E, R>\n} = internal.timeout\n\n/**\n * Fails the stream with given error if it does not produce a value after d\n * duration.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const timeoutFail: {\n  /**\n   * Fails the stream with given error if it does not produce a value after d\n   * duration.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <E2>(error: LazyArg<E2>, duration: Duration.DurationInput): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E2 | E, R>\n  /**\n   * Fails the stream with given error if it does not produce a value after d\n   * duration.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, E2>(\n    self: Stream<A, E, R>,\n    error: LazyArg<E2>,\n    duration: Duration.DurationInput\n  ): Stream<A, E | E2, R>\n} = internal.timeoutFail\n\n/**\n * Fails the stream with given cause if it does not produce a value after d\n * duration.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const timeoutFailCause: {\n  /**\n   * Fails the stream with given cause if it does not produce a value after d\n   * duration.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <E2>(\n    cause: LazyArg<Cause.Cause<E2>>,\n    duration: Duration.DurationInput\n  ): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E2 | E, R>\n  /**\n   * Fails the stream with given cause if it does not produce a value after d\n   * duration.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, E2>(\n    self: Stream<A, E, R>,\n    cause: LazyArg<Cause.Cause<E2>>,\n    duration: Duration.DurationInput\n  ): Stream<A, E | E2, R>\n} = internal.timeoutFailCause\n\n/**\n * Switches the stream if it does not produce a value after the specified\n * duration.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const timeoutTo: {\n  /**\n   * Switches the stream if it does not produce a value after the specified\n   * duration.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A2, E2, R2>(\n    duration: Duration.DurationInput,\n    that: Stream<A2, E2, R2>\n  ): <A, E, R>(self: Stream<A, E, R>) => Stream<A2 | A, E2 | E, R2 | R>\n  /**\n   * Switches the stream if it does not produce a value after the specified\n   * duration.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Stream<A, E, R>,\n    duration: Duration.DurationInput,\n    that: Stream<A2, E2, R2>\n  ): Stream<A | A2, E | E2, R | R2>\n} = internal.timeoutTo\n\n/**\n * Converts the stream to a scoped `PubSub` of chunks. After the scope is closed,\n * the `PubSub` will never again produce values and should be discarded.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const toPubSub: {\n  /**\n   * Converts the stream to a scoped `PubSub` of chunks. After the scope is closed,\n   * the `PubSub` will never again produce values and should be discarded.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  (\n    capacity: number | { readonly capacity: \"unbounded\"; readonly replay?: number | undefined } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ): <A, E, R>(self: Stream<A, E, R>) => Effect.Effect<PubSub.PubSub<Take.Take<A, E>>, never, Scope.Scope | R>\n  /**\n   * Converts the stream to a scoped `PubSub` of chunks. After the scope is closed,\n   * the `PubSub` will never again produce values and should be discarded.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R>(\n    self: Stream<A, E, R>,\n    capacity: number | { readonly capacity: \"unbounded\"; readonly replay?: number | undefined } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ): Effect.Effect<PubSub.PubSub<Take.Take<A, E>>, never, Scope.Scope | R>\n} = internal.toPubSub\n\n/**\n * Returns in a scope a ZIO effect that can be used to repeatedly pull chunks\n * from the stream. The pull effect fails with None when the stream is\n * finished, or with Some error if it fails, otherwise it returns a chunk of\n * the stream's output.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * // Simulate a chunked stream\n * const stream = Stream.fromIterable([1, 2, 3, 4, 5]).pipe(Stream.rechunk(2))\n *\n * const program = Effect.gen(function*() {\n *   // Create an effect to get data chunks from the stream\n *   const getChunk = yield* Stream.toPull(stream)\n *\n *   // Continuously fetch and process chunks\n *   while (true) {\n *     const chunk = yield* getChunk\n *     console.log(chunk)\n *   }\n * })\n *\n * // Effect.runPromise(Effect.scoped(program)).then(console.log, console.error)\n * // { _id: 'Chunk', values: [ 1, 2 ] }\n * // { _id: 'Chunk', values: [ 3, 4 ] }\n * // { _id: 'Chunk', values: [ 5 ] }\n * // (FiberFailure) Error: {\n * //   \"_id\": \"Option\",\n * //   \"_tag\": \"None\"\n * // }\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const toPull: <A, E, R>(\n  self: Stream<A, E, R>\n) => Effect.Effect<Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R>, never, Scope.Scope | R> = internal.toPull\n\n/**\n * Converts the stream to a scoped queue of chunks. After the scope is closed,\n * the queue will never again produce values and should be discarded.\n *\n * Defaults to the \"suspend\" back pressure strategy with a capacity of 2.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const toQueue: {\n  /**\n   * Converts the stream to a scoped queue of chunks. After the scope is closed,\n   * the queue will never again produce values and should be discarded.\n   *\n   * Defaults to the \"suspend\" back pressure strategy with a capacity of 2.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  (\n    options?:\n      | { readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined; readonly capacity?: number | undefined }\n      | { readonly strategy: \"unbounded\" }\n      | undefined\n  ): <A, E, R>(self: Stream<A, E, R>) => Effect.Effect<Queue.Dequeue<Take.Take<A, E>>, never, Scope.Scope | R>\n  /**\n   * Converts the stream to a scoped queue of chunks. After the scope is closed,\n   * the queue will never again produce values and should be discarded.\n   *\n   * Defaults to the \"suspend\" back pressure strategy with a capacity of 2.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R>(\n    self: Stream<A, E, R>,\n    options?:\n      | { readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined; readonly capacity?: number | undefined }\n      | { readonly strategy: \"unbounded\" }\n      | undefined\n  ): Effect.Effect<Queue.Dequeue<Take.Take<A, E>>, never, Scope.Scope | R>\n} = internal.toQueue\n\n/**\n * Converts the stream to a scoped queue of elements. After the scope is\n * closed, the queue will never again produce values and should be discarded.\n *\n * Defaults to a capacity of 2.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const toQueueOfElements: {\n  /**\n   * Converts the stream to a scoped queue of elements. After the scope is\n   * closed, the queue will never again produce values and should be discarded.\n   *\n   * Defaults to a capacity of 2.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  (options?: { readonly capacity?: number | undefined } | undefined): <A, E, R>(\n    self: Stream<A, E, R>\n  ) => Effect.Effect<Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>, never, Scope.Scope | R>\n  /**\n   * Converts the stream to a scoped queue of elements. After the scope is\n   * closed, the queue will never again produce values and should be discarded.\n   *\n   * Defaults to a capacity of 2.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R>(\n    self: Stream<A, E, R>,\n    options?: { readonly capacity?: number | undefined } | undefined\n  ): Effect.Effect<Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>, never, Scope.Scope | R>\n} = internal.toQueueOfElements\n\n/**\n * Converts the stream to a `ReadableStream`.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const toReadableStream: {\n  /**\n   * Converts the stream to a `ReadableStream`.\n   *\n   * See https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A>(options?: { readonly strategy?: QueuingStrategy<A> | undefined }): <E>(\n    self: Stream<A, E>\n  ) => ReadableStream<A>\n  /**\n   * Converts the stream to a `ReadableStream`.\n   *\n   * See https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E>(\n    self: Stream<A, E>,\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ): ReadableStream<A>\n} = internal.toReadableStream\n\n/**\n * Converts the stream to a `Effect<ReadableStream>`.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const toReadableStreamEffect: {\n  /**\n   * Converts the stream to a `Effect<ReadableStream>`.\n   *\n   * See https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A>(options?: { readonly strategy?: QueuingStrategy<A> | undefined }): <E, R>(\n    self: Stream<A, E, R>\n  ) => Effect.Effect<ReadableStream<A>, never, R>\n  /**\n   * Converts the stream to a `Effect<ReadableStream>`.\n   *\n   * See https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, R>(\n    self: Stream<A, E, R>,\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ): Effect.Effect<ReadableStream<A>, never, R>\n} = internal.toReadableStreamEffect\n\n/**\n * Converts the stream to a `ReadableStream` using the provided runtime.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const toReadableStreamRuntime: {\n  /**\n   * Converts the stream to a `ReadableStream` using the provided runtime.\n   *\n   * See https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, XR>(\n    runtime: Runtime<XR>,\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ): <E, R extends XR>(self: Stream<A, E, R>) => ReadableStream<A>\n  /**\n   * Converts the stream to a `ReadableStream` using the provided runtime.\n   *\n   * See https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream.\n   *\n   * @since 2.0.0\n   * @category destructors\n   */\n  <A, E, XR, R extends XR>(\n    self: Stream<A, E, R>,\n    runtime: Runtime<XR>,\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ): ReadableStream<A>\n} = internal.toReadableStreamRuntime\n\n/**\n * Applies the transducer to the stream and emits its outputs.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const transduce: {\n  /**\n   * Applies the transducer to the stream and emits its outputs.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A2, A, E2, R2>(sink: Sink.Sink<A2, A, A, E2, R2>): <E, R>(self: Stream<A, E, R>) => Stream<A2, E2 | E, R2 | R>\n  /**\n   * Applies the transducer to the stream and emits its outputs.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, A2, E2, R2>(self: Stream<A, E, R>, sink: Sink.Sink<A2, A, A, E2, R2>): Stream<A2, E | E2, R | R2>\n} = internal.transduce\n\n/**\n * Creates a stream by peeling off the \"layers\" of a value of type `S`.\n *\n * @example\n * import { Effect, Option, Stream } from \"effect\"\n *\n * const stream = Stream.unfold(1, (n) => Option.some([n, n + 1]))\n *\n * // Effect.runPromise(Stream.runCollect(stream.pipe(Stream.take(5)))).then(console.log)\n * // { _id: 'Chunk', values: [ 1, 2, 3, 4, 5 ] }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const unfold: <S, A>(s: S, f: (s: S) => Option.Option<readonly [A, S]>) => Stream<A> = internal.unfold\n\n/**\n * Creates a stream by peeling off the \"layers\" of a value of type `S`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const unfoldChunk: <S, A>(\n  s: S,\n  f: (s: S) => Option.Option<readonly [Chunk.Chunk<A>, S]>\n) => Stream<A> = internal.unfoldChunk\n\n/**\n * Creates a stream by effectfully peeling off the \"layers\" of a value of type\n * `S`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const unfoldChunkEffect: <S, A, E, R>(\n  s: S,\n  f: (s: S) => Effect.Effect<Option.Option<readonly [Chunk.Chunk<A>, S]>, E, R>\n) => Stream<A, E, R> = internal.unfoldChunkEffect\n\n/**\n * Creates a stream by effectfully peeling off the \"layers\" of a value of type\n * `S`.\n *\n * @example\n * import { Effect, Option, Random, Stream } from \"effect\"\n *\n * const stream = Stream.unfoldEffect(1, (n) =>\n *   Random.nextBoolean.pipe(\n *     Effect.map((b) => (b ? Option.some([n, -n]) : Option.some([n, n])))\n *   ))\n *\n * // Effect.runPromise(Stream.runCollect(stream.pipe(Stream.take(5)))).then(console.log)\n * // { _id: 'Chunk', values: [ 1, -1, -1, -1, -1 ] }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const unfoldEffect: <S, A, E, R>(\n  s: S,\n  f: (s: S) => Effect.Effect<Option.Option<readonly [A, S]>, E, R>\n) => Stream<A, E, R> = internal.unfoldEffect\n\nconst void_: Stream<void> = internal.void\nexport {\n  /**\n   * A stream that contains a single `void` value.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.void\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ undefined ] }\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  void_ as void\n}\n\n/**\n * Creates a stream produced from an `Effect`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const unwrap: <A, E2, R2, E, R>(effect: Effect.Effect<Stream<A, E2, R2>, E, R>) => Stream<A, E | E2, R | R2> =\n  internal.unwrap\n\n/**\n * Creates a stream produced from a scoped `Effect`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const unwrapScoped: <A, E2, R2, E, R>(\n  effect: Effect.Effect<Stream<A, E2, R2>, E, R>\n) => Stream<A, E | E2, R2 | Exclude<R, Scope.Scope>> = internal.unwrapScoped\n\n/**\n * Updates the specified service within the context of the `Stream`.\n *\n * @since 2.0.0\n * @category context\n */\nexport const updateService: {\n  /**\n   * Updates the specified service within the context of the `Stream`.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    f: (service: Context.Tag.Service<T>) => Context.Tag.Service<T>\n  ): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E, T | R>\n  /**\n   * Updates the specified service within the context of the `Stream`.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Stream<A, E, R>,\n    tag: T,\n    f: (service: Context.Tag.Service<T>) => Context.Tag.Service<T>\n  ): Stream<A, E, R | T>\n} = internal.updateService\n\n/**\n * Returns the specified stream if the given condition is satisfied, otherwise\n * returns an empty stream.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const when: {\n  /**\n   * Returns the specified stream if the given condition is satisfied, otherwise\n   * returns an empty stream.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (test: LazyArg<boolean>): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E, R>\n  /**\n   * Returns the specified stream if the given condition is satisfied, otherwise\n   * returns an empty stream.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R>(self: Stream<A, E, R>, test: LazyArg<boolean>): Stream<A, E, R>\n} = internal.when\n\n/**\n * Returns the resulting stream when the given `PartialFunction` is defined\n * for the given value, otherwise returns an empty stream.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const whenCase: <A, A2, E, R>(\n  evaluate: LazyArg<A>,\n  pf: (a: A) => Option.Option<Stream<A2, E, R>>\n) => Stream<A2, E, R> = internal.whenCase\n\n/**\n * Returns the stream when the given partial function is defined for the given\n * effectful value, otherwise returns an empty stream.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const whenCaseEffect: {\n  /**\n   * Returns the stream when the given partial function is defined for the given\n   * effectful value, otherwise returns an empty stream.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, A2, E2, R2>(\n    pf: (a: A) => Option.Option<Stream<A2, E2, R2>>\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Stream<A2, E2 | E, R2 | R>\n  /**\n   * Returns the stream when the given partial function is defined for the given\n   * effectful value, otherwise returns an empty stream.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    pf: (a: A) => Option.Option<Stream<A2, E2, R2>>\n  ): Stream<A2, E | E2, R | R2>\n} = internal.whenCaseEffect\n\n/**\n * Returns the stream if the given effectful condition is satisfied, otherwise\n * returns an empty stream.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const whenEffect: {\n  /**\n   * Returns the stream if the given effectful condition is satisfied, otherwise\n   * returns an empty stream.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <E2, R2>(effect: Effect.Effect<boolean, E2, R2>): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E2 | E, R2 | R>\n  /**\n   * Returns the stream if the given effectful condition is satisfied, otherwise\n   * returns an empty stream.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, E, R, E2, R2>(self: Stream<A, E, R>, effect: Effect.Effect<boolean, E2, R2>): Stream<A, E | E2, R | R2>\n} = internal.whenEffect\n\n/**\n * Wraps the stream with a new span for tracing.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const withSpan: {\n  /**\n   * Wraps the stream with a new span for tracing.\n   *\n   * @since 2.0.0\n   * @category tracing\n   */\n  (\n    name: string,\n    options?: Tracer.SpanOptions | undefined\n  ): <A, E, R>(self: Stream<A, E, R>) => Stream<A, E, Exclude<R, Tracer.ParentSpan>>\n  /**\n   * Wraps the stream with a new span for tracing.\n   *\n   * @since 2.0.0\n   * @category tracing\n   */\n  <A, E, R>(\n    self: Stream<A, E, R>,\n    name: string,\n    options?: Tracer.SpanOptions | undefined\n  ): Stream<A, E, Exclude<R, Tracer.ParentSpan>>\n} = internal.withSpan\n\n/**\n * Zips this stream with another point-wise and emits tuples of elements from\n * both streams.\n *\n * The new stream will end when one of the sides ends.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * // We create two streams and zip them together.\n * const stream = Stream.zip(\n *   Stream.make(1, 2, 3, 4, 5, 6),\n *   Stream.make(\"a\", \"b\", \"c\")\n * )\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [ [ 1, 'a' ], [ 2, 'b' ], [ 3, 'c' ] ] }\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zip: {\n  /**\n   * Zips this stream with another point-wise and emits tuples of elements from\n   * both streams.\n   *\n   * The new stream will end when one of the sides ends.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * // We create two streams and zip them together.\n   * const stream = Stream.zip(\n   *   Stream.make(1, 2, 3, 4, 5, 6),\n   *   Stream.make(\"a\", \"b\", \"c\")\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ [ 1, 'a' ], [ 2, 'b' ], [ 3, 'c' ] ] }\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2, R2>(that: Stream<A2, E2, R2>): <A, E, R>(self: Stream<A, E, R>) => Stream<[A, A2], E2 | E, R2 | R>\n  /**\n   * Zips this stream with another point-wise and emits tuples of elements from\n   * both streams.\n   *\n   * The new stream will end when one of the sides ends.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * // We create two streams and zip them together.\n   * const stream = Stream.zip(\n   *   Stream.make(1, 2, 3, 4, 5, 6),\n   *   Stream.make(\"a\", \"b\", \"c\")\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ [ 1, 'a' ], [ 2, 'b' ], [ 3, 'c' ] ] }\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, R, A2, E2, R2>(self: Stream<A, E, R>, that: Stream<A2, E2, R2>): Stream<[A, A2], E | E2, R | R2>\n} = internal.zip\n\n/**\n * Zips this stream with another point-wise and emits tuples of elements from\n * both streams.\n *\n * The new stream will end when one of the sides ends.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipFlatten: {\n  /**\n   * Zips this stream with another point-wise and emits tuples of elements from\n   * both streams.\n   *\n   * The new stream will end when one of the sides ends.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2, R2>(\n    that: Stream<A2, E2, R2>\n  ): <A extends ReadonlyArray<any>, E, R>(self: Stream<A, E, R>) => Stream<[...A, A2], E2 | E, R2 | R>\n  /**\n   * Zips this stream with another point-wise and emits tuples of elements from\n   * both streams.\n   *\n   * The new stream will end when one of the sides ends.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A extends ReadonlyArray<any>, E, R, A2, E2, R2>(\n    self: Stream<A, E, R>,\n    that: Stream<A2, E2, R2>\n  ): Stream<[...A, A2], E | E2, R | R2>\n} = internal.zipFlatten\n\n/**\n * Zips this stream with another point-wise, creating a new stream of pairs of\n * elements from both sides.\n *\n * The defaults `defaultLeft` and `defaultRight` will be used if the streams\n * have different lengths and one of the streams has ended before the other.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const stream = Stream.zipAll(Stream.make(1, 2, 3, 4, 5, 6), {\n *   other: Stream.make(\"a\", \"b\", \"c\"),\n *   defaultSelf: 0,\n *   defaultOther: \"x\"\n * })\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: \"Chunk\", values: [ [ 1, \"a\" ], [ 2, \"b\" ], [ 3, \"c\" ], [ 4, \"x\" ], [ 5, \"x\" ], [ 6, \"x\" ] ] }\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipAll: {\n  /**\n   * Zips this stream with another point-wise, creating a new stream of pairs of\n   * elements from both sides.\n   *\n   * The defaults `defaultLeft` and `defaultRight` will be used if the streams\n   * have different lengths and one of the streams has ended before the other.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.zipAll(Stream.make(1, 2, 3, 4, 5, 6), {\n   *   other: Stream.make(\"a\", \"b\", \"c\"),\n   *   defaultSelf: 0,\n   *   defaultOther: \"x\"\n   * })\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: \"Chunk\", values: [ [ 1, \"a\" ], [ 2, \"b\" ], [ 3, \"c\" ], [ 4, \"x\" ], [ 5, \"x\" ], [ 6, \"x\" ] ] }\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2, R2, A>(\n    options: { readonly other: Stream<A2, E2, R2>; readonly defaultSelf: A; readonly defaultOther: A2 }\n  ): <E, R>(self: Stream<A, E, R>) => Stream<[A, A2], E2 | E, R2 | R>\n  /**\n   * Zips this stream with another point-wise, creating a new stream of pairs of\n   * elements from both sides.\n   *\n   * The defaults `defaultLeft` and `defaultRight` will be used if the streams\n   * have different lengths and one of the streams has ended before the other.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.zipAll(Stream.make(1, 2, 3, 4, 5, 6), {\n   *   other: Stream.make(\"a\", \"b\", \"c\"),\n   *   defaultSelf: 0,\n   *   defaultOther: \"x\"\n   * })\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: \"Chunk\", values: [ [ 1, \"a\" ], [ 2, \"b\" ], [ 3, \"c\" ], [ 4, \"x\" ], [ 5, \"x\" ], [ 6, \"x\" ] ] }\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, R, A2, E2, R2>(\n    self: Stream<A, E, R>,\n    options: { readonly other: Stream<A2, E2, R2>; readonly defaultSelf: A; readonly defaultOther: A2 }\n  ): Stream<[A, A2], E | E2, R | R2>\n} = internal.zipAll\n\n/**\n * Zips this stream with another point-wise, and keeps only elements from this\n * stream.\n *\n * The provided default value will be used if the other stream ends before\n * this one.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipAllLeft: {\n  /**\n   * Zips this stream with another point-wise, and keeps only elements from this\n   * stream.\n   *\n   * The provided default value will be used if the other stream ends before\n   * this one.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2, R2, A>(that: Stream<A2, E2, R2>, defaultLeft: A): <E, R>(self: Stream<A, E, R>) => Stream<A, E2 | E, R2 | R>\n  /**\n   * Zips this stream with another point-wise, and keeps only elements from this\n   * stream.\n   *\n   * The provided default value will be used if the other stream ends before\n   * this one.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, R, A2, E2, R2>(self: Stream<A, E, R>, that: Stream<A2, E2, R2>, defaultLeft: A): Stream<A, E | E2, R | R2>\n} = internal.zipAllLeft\n\n/**\n * Zips this stream with another point-wise, and keeps only elements from the\n * other stream.\n *\n * The provided default value will be used if this stream ends before the\n * other one.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipAllRight: {\n  /**\n   * Zips this stream with another point-wise, and keeps only elements from the\n   * other stream.\n   *\n   * The provided default value will be used if this stream ends before the\n   * other one.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2, R2>(\n    that: Stream<A2, E2, R2>,\n    defaultRight: A2\n  ): <A, E, R>(self: Stream<A, E, R>) => Stream<A2, E2 | E, R2 | R>\n  /**\n   * Zips this stream with another point-wise, and keeps only elements from the\n   * other stream.\n   *\n   * The provided default value will be used if this stream ends before the\n   * other one.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, R, A2, E2, R2>(self: Stream<A, E, R>, that: Stream<A2, E2, R2>, defaultRight: A2): Stream<A2, E | E2, R | R2>\n} = internal.zipAllRight\n\n/**\n * Zips this stream that is sorted by distinct keys and the specified stream\n * that is sorted by distinct keys to produce a new stream that is sorted by\n * distinct keys. Combines values associated with each key into a tuple,\n * using the specified values `defaultLeft` and `defaultRight` to fill in\n * missing values.\n *\n * This allows zipping potentially unbounded streams of data by key in\n * constant space but the caller is responsible for ensuring that the\n * streams are sorted by distinct keys.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipAllSortedByKey: {\n  /**\n   * Zips this stream that is sorted by distinct keys and the specified stream\n   * that is sorted by distinct keys to produce a new stream that is sorted by\n   * distinct keys. Combines values associated with each key into a tuple,\n   * using the specified values `defaultLeft` and `defaultRight` to fill in\n   * missing values.\n   *\n   * This allows zipping potentially unbounded streams of data by key in\n   * constant space but the caller is responsible for ensuring that the\n   * streams are sorted by distinct keys.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2, R2, A, K>(\n    options: {\n      readonly other: Stream<readonly [K, A2], E2, R2>\n      readonly defaultSelf: A\n      readonly defaultOther: A2\n      readonly order: Order.Order<K>\n    }\n  ): <E, R>(self: Stream<readonly [K, A], E, R>) => Stream<[K, [A, A2]], E2 | E, R2 | R>\n  /**\n   * Zips this stream that is sorted by distinct keys and the specified stream\n   * that is sorted by distinct keys to produce a new stream that is sorted by\n   * distinct keys. Combines values associated with each key into a tuple,\n   * using the specified values `defaultLeft` and `defaultRight` to fill in\n   * missing values.\n   *\n   * This allows zipping potentially unbounded streams of data by key in\n   * constant space but the caller is responsible for ensuring that the\n   * streams are sorted by distinct keys.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <K, A, E, R, A2, E2, R2>(\n    self: Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream<readonly [K, A2], E2, R2>\n      readonly defaultSelf: A\n      readonly defaultOther: A2\n      readonly order: Order.Order<K>\n    }\n  ): Stream<[K, [A, A2]], E | E2, R | R2>\n} = internal.zipAllSortedByKey\n\n/**\n * Zips this stream that is sorted by distinct keys and the specified stream\n * that is sorted by distinct keys to produce a new stream that is sorted by\n * distinct keys. Keeps only values from this stream, using the specified\n * value `default` to fill in missing values.\n *\n * This allows zipping potentially unbounded streams of data by key in\n * constant space but the caller is responsible for ensuring that the\n * streams are sorted by distinct keys.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipAllSortedByKeyLeft: {\n  /**\n   * Zips this stream that is sorted by distinct keys and the specified stream\n   * that is sorted by distinct keys to produce a new stream that is sorted by\n   * distinct keys. Keeps only values from this stream, using the specified\n   * value `default` to fill in missing values.\n   *\n   * This allows zipping potentially unbounded streams of data by key in\n   * constant space but the caller is responsible for ensuring that the\n   * streams are sorted by distinct keys.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2, R2, A, K>(\n    options: {\n      readonly other: Stream<readonly [K, A2], E2, R2>\n      readonly defaultSelf: A\n      readonly order: Order.Order<K>\n    }\n  ): <E, R>(self: Stream<readonly [K, A], E, R>) => Stream<[K, A], E2 | E, R2 | R>\n  /**\n   * Zips this stream that is sorted by distinct keys and the specified stream\n   * that is sorted by distinct keys to produce a new stream that is sorted by\n   * distinct keys. Keeps only values from this stream, using the specified\n   * value `default` to fill in missing values.\n   *\n   * This allows zipping potentially unbounded streams of data by key in\n   * constant space but the caller is responsible for ensuring that the\n   * streams are sorted by distinct keys.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <K, A, E, R, A2, E2, R2>(\n    self: Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream<readonly [K, A2], E2, R2>\n      readonly defaultSelf: A\n      readonly order: Order.Order<K>\n    }\n  ): Stream<[K, A], E | E2, R | R2>\n} = internal.zipAllSortedByKeyLeft\n\n/**\n * Zips this stream that is sorted by distinct keys and the specified stream\n * that is sorted by distinct keys to produce a new stream that is sorted by\n * distinct keys. Keeps only values from that stream, using the specified\n * value `default` to fill in missing values.\n *\n * This allows zipping potentially unbounded streams of data by key in\n * constant space but the caller is responsible for ensuring that the\n * streams are sorted by distinct keys.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipAllSortedByKeyRight: {\n  /**\n   * Zips this stream that is sorted by distinct keys and the specified stream\n   * that is sorted by distinct keys to produce a new stream that is sorted by\n   * distinct keys. Keeps only values from that stream, using the specified\n   * value `default` to fill in missing values.\n   *\n   * This allows zipping potentially unbounded streams of data by key in\n   * constant space but the caller is responsible for ensuring that the\n   * streams are sorted by distinct keys.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <K, A2, E2, R2>(\n    options: {\n      readonly other: Stream<readonly [K, A2], E2, R2>\n      readonly defaultOther: A2\n      readonly order: Order.Order<K>\n    }\n  ): <A, E, R>(self: Stream<readonly [K, A], E, R>) => Stream<[K, A2], E2 | E, R2 | R>\n  /**\n   * Zips this stream that is sorted by distinct keys and the specified stream\n   * that is sorted by distinct keys to produce a new stream that is sorted by\n   * distinct keys. Keeps only values from that stream, using the specified\n   * value `default` to fill in missing values.\n   *\n   * This allows zipping potentially unbounded streams of data by key in\n   * constant space but the caller is responsible for ensuring that the\n   * streams are sorted by distinct keys.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, R, K, A2, E2, R2>(\n    self: Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream<readonly [K, A2], E2, R2>\n      readonly defaultOther: A2\n      readonly order: Order.Order<K>\n    }\n  ): Stream<[K, A2], E | E2, R | R2>\n} = internal.zipAllSortedByKeyRight\n\n/**\n * Zips this stream that is sorted by distinct keys and the specified stream\n * that is sorted by distinct keys to produce a new stream that is sorted by\n * distinct keys. Uses the functions `left`, `right`, and `both` to handle\n * the cases where a key and value exist in this stream, that stream, or\n * both streams.\n *\n * This allows zipping potentially unbounded streams of data by key in\n * constant space but the caller is responsible for ensuring that the\n * streams are sorted by distinct keys.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipAllSortedByKeyWith: {\n  /**\n   * Zips this stream that is sorted by distinct keys and the specified stream\n   * that is sorted by distinct keys to produce a new stream that is sorted by\n   * distinct keys. Uses the functions `left`, `right`, and `both` to handle\n   * the cases where a key and value exist in this stream, that stream, or\n   * both streams.\n   *\n   * This allows zipping potentially unbounded streams of data by key in\n   * constant space but the caller is responsible for ensuring that the\n   * streams are sorted by distinct keys.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <K, A2, E2, R2, A, A3>(\n    options: {\n      readonly other: Stream<readonly [K, A2], E2, R2>\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A3\n      readonly onBoth: (a: A, a2: A2) => A3\n      readonly order: Order.Order<K>\n    }\n  ): <E, R>(self: Stream<readonly [K, A], E, R>) => Stream<[K, A3], E2 | E, R2 | R>\n  /**\n   * Zips this stream that is sorted by distinct keys and the specified stream\n   * that is sorted by distinct keys to produce a new stream that is sorted by\n   * distinct keys. Uses the functions `left`, `right`, and `both` to handle\n   * the cases where a key and value exist in this stream, that stream, or\n   * both streams.\n   *\n   * This allows zipping potentially unbounded streams of data by key in\n   * constant space but the caller is responsible for ensuring that the\n   * streams are sorted by distinct keys.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <K, A, E, R, A2, E2, R2, A3>(\n    self: Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream<readonly [K, A2], E2, R2>\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A3\n      readonly onBoth: (a: A, a2: A2) => A3\n      readonly order: Order.Order<K>\n    }\n  ): Stream<[K, A3], E | E2, R | R2>\n} = internal.zipAllSortedByKeyWith\n\n/**\n * Zips this stream with another point-wise. The provided functions will be\n * used to create elements for the composed stream.\n *\n * The functions `left` and `right` will be used if the streams have different\n * lengths and one of the streams has ended before the other.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const stream = Stream.zipAllWith(Stream.make(1, 2, 3, 4, 5, 6), {\n *   other: Stream.make(\"a\", \"b\", \"c\"),\n *   onSelf: (n) => [n, \"x\"],\n *   onOther: (s) => [0, s],\n *   onBoth: (n, s) => [n - s.length, s]\n * })\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: \"Chunk\", values: [ [ 0, \"a\" ], [ 1, \"b\" ], [ 2, \"c\" ], [ 4, \"x\" ], [ 5, \"x\" ], [ 6, \"x\" ] ] }\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipAllWith: {\n  /**\n   * Zips this stream with another point-wise. The provided functions will be\n   * used to create elements for the composed stream.\n   *\n   * The functions `left` and `right` will be used if the streams have different\n   * lengths and one of the streams has ended before the other.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.zipAllWith(Stream.make(1, 2, 3, 4, 5, 6), {\n   *   other: Stream.make(\"a\", \"b\", \"c\"),\n   *   onSelf: (n) => [n, \"x\"],\n   *   onOther: (s) => [0, s],\n   *   onBoth: (n, s) => [n - s.length, s]\n   * })\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: \"Chunk\", values: [ [ 0, \"a\" ], [ 1, \"b\" ], [ 2, \"c\" ], [ 4, \"x\" ], [ 5, \"x\" ], [ 6, \"x\" ] ] }\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2, R2, A, A3>(\n    options: {\n      readonly other: Stream<A2, E2, R2>\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A3\n      readonly onBoth: (a: A, a2: A2) => A3\n    }\n  ): <E, R>(self: Stream<A, E, R>) => Stream<A3, E2 | E, R2 | R>\n  /**\n   * Zips this stream with another point-wise. The provided functions will be\n   * used to create elements for the composed stream.\n   *\n   * The functions `left` and `right` will be used if the streams have different\n   * lengths and one of the streams has ended before the other.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * const stream = Stream.zipAllWith(Stream.make(1, 2, 3, 4, 5, 6), {\n   *   other: Stream.make(\"a\", \"b\", \"c\"),\n   *   onSelf: (n) => [n, \"x\"],\n   *   onOther: (s) => [0, s],\n   *   onBoth: (n, s) => [n - s.length, s]\n   * })\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: \"Chunk\", values: [ [ 0, \"a\" ], [ 1, \"b\" ], [ 2, \"c\" ], [ 4, \"x\" ], [ 5, \"x\" ], [ 6, \"x\" ] ] }\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, R, A2, E2, R2, A3>(\n    self: Stream<A, E, R>,\n    options: {\n      readonly other: Stream<A2, E2, R2>\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A3\n      readonly onBoth: (a: A, a2: A2) => A3\n    }\n  ): Stream<A3, E | E2, R | R2>\n} = internal.zipAllWith\n\n/**\n * Zips the two streams so that when a value is emitted by either of the two\n * streams, it is combined with the latest value from the other stream to\n * produce a result.\n *\n * Note: tracking the latest value is done on a per-chunk basis. That means\n * that emitted elements that are not the last value in chunks will never be\n * used for zipping.\n *\n * @example\n * import { Effect, Schedule, Stream } from \"effect\"\n *\n * const s1 = Stream.make(1, 2, 3).pipe(\n *   Stream.schedule(Schedule.spaced(\"1 second\"))\n * )\n *\n * const s2 = Stream.make(\"a\", \"b\", \"c\", \"d\").pipe(\n *   Stream.schedule(Schedule.spaced(\"500 millis\"))\n * )\n *\n * const stream = Stream.zipLatest(s1, s2)\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: \"Chunk\", values: [ [ 1, \"a\" ], [ 1, \"b\" ], [ 2, \"b\" ], [ 2, \"c\" ], [ 2, \"d\" ], [ 3, \"d\" ] ] }\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipLatest: {\n  /**\n   * Zips the two streams so that when a value is emitted by either of the two\n   * streams, it is combined with the latest value from the other stream to\n   * produce a result.\n   *\n   * Note: tracking the latest value is done on a per-chunk basis. That means\n   * that emitted elements that are not the last value in chunks will never be\n   * used for zipping.\n   *\n   * @example\n   * import { Effect, Schedule, Stream } from \"effect\"\n   *\n   * const s1 = Stream.make(1, 2, 3).pipe(\n   *   Stream.schedule(Schedule.spaced(\"1 second\"))\n   * )\n   *\n   * const s2 = Stream.make(\"a\", \"b\", \"c\", \"d\").pipe(\n   *   Stream.schedule(Schedule.spaced(\"500 millis\"))\n   * )\n   *\n   * const stream = Stream.zipLatest(s1, s2)\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: \"Chunk\", values: [ [ 1, \"a\" ], [ 1, \"b\" ], [ 2, \"b\" ], [ 2, \"c\" ], [ 2, \"d\" ], [ 3, \"d\" ] ] }\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <AR, ER, RR>(right: Stream<AR, ER, RR>): <AL, EL, RL>(left: Stream<AL, EL, RL>) => Stream<[AL, AR], EL | ER, RL | RR>\n  /**\n   * Zips the two streams so that when a value is emitted by either of the two\n   * streams, it is combined with the latest value from the other stream to\n   * produce a result.\n   *\n   * Note: tracking the latest value is done on a per-chunk basis. That means\n   * that emitted elements that are not the last value in chunks will never be\n   * used for zipping.\n   *\n   * @example\n   * import { Effect, Schedule, Stream } from \"effect\"\n   *\n   * const s1 = Stream.make(1, 2, 3).pipe(\n   *   Stream.schedule(Schedule.spaced(\"1 second\"))\n   * )\n   *\n   * const s2 = Stream.make(\"a\", \"b\", \"c\", \"d\").pipe(\n   *   Stream.schedule(Schedule.spaced(\"500 millis\"))\n   * )\n   *\n   * const stream = Stream.zipLatest(s1, s2)\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: \"Chunk\", values: [ [ 1, \"a\" ], [ 1, \"b\" ], [ 2, \"b\" ], [ 2, \"c\" ], [ 2, \"d\" ], [ 3, \"d\" ] ] }\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <AL, EL, RL, AR, ER, RR>(left: Stream<AL, EL, RL>, right: Stream<AR, ER, RR>): Stream<[AL, AR], EL | ER, RL | RR>\n} = internal.zipLatest\n\n/**\n * Zips multiple streams so that when a value is emitted by any of the streams,\n * it is combined with the latest values from the other streams to produce a result.\n *\n * Note: tracking the latest value is done on a per-chunk basis. That means\n * that emitted elements that are not the last value in chunks will never be\n * used for zipping.\n *\n * @example\n * import { Stream, Schedule, Console, Effect } from \"effect\"\n *\n * const stream = Stream.zipLatestAll(\n *     Stream.fromSchedule(Schedule.spaced('1 millis')),\n *     Stream.fromSchedule(Schedule.spaced('2 millis')),\n *     Stream.fromSchedule(Schedule.spaced('4 millis')),\n * ).pipe(Stream.take(6), Stream.tap(Console.log))\n *\n * // Effect.runPromise(Stream.runDrain(stream))\n * // Output:\n * // [ 0, 0, 0 ]\n * // [ 1, 0, 0 ]\n * // [ 1, 1, 0 ]\n * // [ 2, 1, 0 ]\n * // [ 3, 1, 0 ]\n * // [ 3, 1, 1 ]\n * // .....\n *\n * @since 3.3.0\n * @category zipping\n */\nexport const zipLatestAll: <T extends ReadonlyArray<Stream<any, any, any>>>(\n  ...streams: T\n) => Stream<\n  [T[number]] extends [never] ? never\n    : { [K in keyof T]: T[K] extends Stream<infer A, infer _E, infer _R> ? A : never },\n  [T[number]] extends [never] ? never : T[number] extends Stream<infer _A, infer _E, infer _R> ? _E : never,\n  [T[number]] extends [never] ? never : T[number] extends Stream<infer _A, infer _E, infer _R> ? _R : never\n> = internal.zipLatestAll\n\n/**\n * Zips the two streams so that when a value is emitted by either of the two\n * streams, it is combined with the latest value from the other stream to\n * produce a result.\n *\n * Note: tracking the latest value is done on a per-chunk basis. That means\n * that emitted elements that are not the last value in chunks will never be\n * used for zipping.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipLatestWith: {\n  /**\n   * Zips the two streams so that when a value is emitted by either of the two\n   * streams, it is combined with the latest value from the other stream to\n   * produce a result.\n   *\n   * Note: tracking the latest value is done on a per-chunk basis. That means\n   * that emitted elements that are not the last value in chunks will never be\n   * used for zipping.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <AR, ER, RR, AL, A>(\n    right: Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): <EL, RL>(left: Stream<AL, EL, RL>) => Stream<A, EL | ER, RL | RR>\n  /**\n   * Zips the two streams so that when a value is emitted by either of the two\n   * streams, it is combined with the latest value from the other stream to\n   * produce a result.\n   *\n   * Note: tracking the latest value is done on a per-chunk basis. That means\n   * that emitted elements that are not the last value in chunks will never be\n   * used for zipping.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <AL, EL, RL, AR, ER, RR, A>(\n    left: Stream<AL, EL, RL>,\n    right: Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): Stream<A, EL | ER, RL | RR>\n} = internal.zipLatestWith\n\n/**\n * Zips this stream with another point-wise, but keeps only the outputs of\n * `left` stream.\n *\n * The new stream will end when one of the sides ends.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipLeft: {\n  /**\n   * Zips this stream with another point-wise, but keeps only the outputs of\n   * `left` stream.\n   *\n   * The new stream will end when one of the sides ends.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <AR, ER, RR>(right: Stream<AR, ER, RR>): <AL, EL, RL>(left: Stream<AL, EL, RL>) => Stream<AL, ER | EL, RR | RL>\n  /**\n   * Zips this stream with another point-wise, but keeps only the outputs of\n   * `left` stream.\n   *\n   * The new stream will end when one of the sides ends.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <AL, EL, RL, AR, ER, RR>(left: Stream<AL, EL, RL>, right: Stream<AR, ER, RR>): Stream<AL, EL | ER, RL | RR>\n} = internal.zipLeft\n\n/**\n * Zips this stream with another point-wise, but keeps only the outputs of the\n * `right` stream.\n *\n * The new stream will end when one of the sides ends.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipRight: {\n  /**\n   * Zips this stream with another point-wise, but keeps only the outputs of the\n   * `right` stream.\n   *\n   * The new stream will end when one of the sides ends.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <AR, ER, RR>(right: Stream<AR, ER, RR>): <AL, EL, RL>(left: Stream<AL, EL, RL>) => Stream<AR, ER | EL, RR | RL>\n  /**\n   * Zips this stream with another point-wise, but keeps only the outputs of the\n   * `right` stream.\n   *\n   * The new stream will end when one of the sides ends.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <AL, EL, RL, AR, ER, RR>(left: Stream<AL, EL, RL>, right: Stream<AR, ER, RR>): Stream<AR, EL | ER, RL | RR>\n} = internal.zipRight\n\n/**\n * Zips this stream with another point-wise and applies the function to the\n * paired elements.\n *\n * The new stream will end when one of the sides ends.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * // We create two streams and zip them with custom logic.\n * const stream = Stream.zipWith(\n *   Stream.make(1, 2, 3, 4, 5, 6),\n *   Stream.make(\"a\", \"b\", \"c\"),\n *   (n, s) => [n - s.length, s]\n * )\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n * // { _id: 'Chunk', values: [ [ 0, 'a' ], [ 1, 'b' ], [ 2, 'c' ] ] }\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWith: {\n  /**\n   * Zips this stream with another point-wise and applies the function to the\n   * paired elements.\n   *\n   * The new stream will end when one of the sides ends.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * // We create two streams and zip them with custom logic.\n   * const stream = Stream.zipWith(\n   *   Stream.make(1, 2, 3, 4, 5, 6),\n   *   Stream.make(\"a\", \"b\", \"c\"),\n   *   (n, s) => [n - s.length, s]\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ [ 0, 'a' ], [ 1, 'b' ], [ 2, 'c' ] ] }\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <AR, ER, RR, AL, A>(\n    right: Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): <EL, RL>(left: Stream<AL, EL, RL>) => Stream<A, EL | ER, RL | RR>\n  /**\n   * Zips this stream with another point-wise and applies the function to the\n   * paired elements.\n   *\n   * The new stream will end when one of the sides ends.\n   *\n   * @example\n   * import { Effect, Stream } from \"effect\"\n   *\n   * // We create two streams and zip them with custom logic.\n   * const stream = Stream.zipWith(\n   *   Stream.make(1, 2, 3, 4, 5, 6),\n   *   Stream.make(\"a\", \"b\", \"c\"),\n   *   (n, s) => [n - s.length, s]\n   * )\n   *\n   * // Effect.runPromise(Stream.runCollect(stream)).then(console.log)\n   * // { _id: 'Chunk', values: [ [ 0, 'a' ], [ 1, 'b' ], [ 2, 'c' ] ] }\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <AL, EL, RL, AR, ER, RR, A>(\n    left: Stream<AL, EL, RL>,\n    right: Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): Stream<A, EL | ER, RL | RR>\n} = internal.zipWith\n\n/**\n * Zips this stream with another point-wise and applies the function to the\n * paired elements.\n *\n * The new stream will end when one of the sides ends.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWithChunks: {\n  /**\n   * Zips this stream with another point-wise and applies the function to the\n   * paired elements.\n   *\n   * The new stream will end when one of the sides ends.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, E2, R2, A, A3>(\n    that: Stream<A2, E2, R2>,\n    f: (\n      left: Chunk.Chunk<A>,\n      right: Chunk.Chunk<A2>\n    ) => readonly [Chunk.Chunk<A3>, Either.Either<Chunk.Chunk<A2>, Chunk.Chunk<A>>]\n  ): <E, R>(self: Stream<A, E, R>) => Stream<A3, E2 | E, R2 | R>\n  /**\n   * Zips this stream with another point-wise and applies the function to the\n   * paired elements.\n   *\n   * The new stream will end when one of the sides ends.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, E, R, A2, E2, R2, A3>(\n    self: Stream<A, E, R>,\n    that: Stream<A2, E2, R2>,\n    f: (\n      left: Chunk.Chunk<A>,\n      right: Chunk.Chunk<A2>\n    ) => readonly [Chunk.Chunk<A3>, Either.Either<Chunk.Chunk<A2>, Chunk.Chunk<A>>]\n  ): Stream<A3, E | E2, R | R2>\n} = internal.zipWithChunks\n\n/**\n * Zips each element with the next element if present.\n *\n * @example\n * import { Chunk, Effect, Stream } from \"effect\"\n *\n * const stream = Stream.zipWithNext(Stream.make(1, 2, 3, 4))\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then((chunk) => console.log(Chunk.toArray(chunk)))\n * // [\n * //   [ 1, { _id: 'Option', _tag: 'Some', value: 2 } ],\n * //   [ 2, { _id: 'Option', _tag: 'Some', value: 3 } ],\n * //   [ 3, { _id: 'Option', _tag: 'Some', value: 4 } ],\n * //   [ 4, { _id: 'Option', _tag: 'None' } ]\n * // ]\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWithNext: <A, E, R>(self: Stream<A, E, R>) => Stream<[A, Option.Option<A>], E, R> = internal.zipWithNext\n\n/**\n * Zips each element with the previous element. Initially accompanied by\n * `None`.\n *\n * @example\n * import { Chunk, Effect, Stream } from \"effect\"\n *\n * const stream = Stream.zipWithPrevious(Stream.make(1, 2, 3, 4))\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then((chunk) => console.log(Chunk.toArray(chunk)))\n * // [\n * //   [ { _id: 'Option', _tag: 'None' }, 1 ],\n * //   [ { _id: 'Option', _tag: 'Some', value: 1 }, 2 ],\n * //   [ { _id: 'Option', _tag: 'Some', value: 2 }, 3 ],\n * //   [ { _id: 'Option', _tag: 'Some', value: 3 }, 4 ]\n * // ]\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWithPrevious: <A, E, R>(self: Stream<A, E, R>) => Stream<[Option.Option<A>, A], E, R> =\n  internal.zipWithPrevious\n\n/**\n * Zips each element with both the previous and next element.\n *\n * @example\n * import { Chunk, Effect, Stream } from \"effect\"\n *\n * const stream = Stream.zipWithPreviousAndNext(Stream.make(1, 2, 3, 4))\n *\n * // Effect.runPromise(Stream.runCollect(stream)).then((chunk) => console.log(Chunk.toArray(chunk)))\n * // [\n * //   [\n * //     { _id: 'Option', _tag: 'None' },\n * //     1,\n * //     { _id: 'Option', _tag: 'Some', value: 2 }\n * //   ],\n * //   [\n * //     { _id: 'Option', _tag: 'Some', value: 1 },\n * //     2,\n * //     { _id: 'Option', _tag: 'Some', value: 3 }\n * //   ],\n * //   [\n * //     { _id: 'Option', _tag: 'Some', value: 2 },\n * //     3,\n * //     { _id: 'Option', _tag: 'Some', value: 4 }\n * //   ],\n * //   [\n * //     { _id: 'Option', _tag: 'Some', value: 3 },\n * //     4,\n * //     { _id: 'Option', _tag: 'None' }\n * //   ]\n * // ]\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWithPreviousAndNext: <A, E, R>(\n  self: Stream<A, E, R>\n) => Stream<[Option.Option<A>, A, Option.Option<A>], E, R> = internal.zipWithPreviousAndNext\n\n/**\n * Zips this stream together with the index of elements.\n *\n * @example\n * import { Effect, Stream } from \"effect\"\n *\n * const stream = Stream.make(\"Mary\", \"James\", \"Robert\", \"Patricia\")\n *\n * const indexedStream = Stream.zipWithIndex(stream)\n *\n * // Effect.runPromise(Stream.runCollect(indexedStream)).then(console.log)\n * // {\n * //   _id: 'Chunk',\n * //   values: [ [ 'Mary', 0 ], [ 'James', 1 ], [ 'Robert', 2 ], [ 'Patricia', 3 ] ]\n * // }\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWithIndex: <A, E, R>(self: Stream<A, E, R>) => Stream<[A, number], E, R> = internal.zipWithIndex\n\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Stream` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link bindTo}\n * @see {@link bind}\n * @see {@link bindEffect}\n * @see {@link let_ let}\n *\n * @example\n * import { Chunk, Effect, pipe, Stream } from \"effect\"\n *\n * const result = pipe(\n *   Stream.Do,\n *   Stream.bind(\"x\", () => Stream.succeed(2)),\n *   Stream.bind(\"y\", () => Stream.succeed(3)),\n *   Stream.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(Effect.runSync(Stream.runCollect(result)), Chunk.of({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const Do: Stream<{}> = internal.Do\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Stream` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link Do}\n * @see {@link bindTo}\n * @see {@link bindEffect}\n * @see {@link let_ let}\n *\n * @example\n * import { Chunk, Effect, pipe, Stream } from \"effect\"\n *\n * const result = pipe(\n *   Stream.Do,\n *   Stream.bind(\"x\", () => Stream.succeed(2)),\n *   Stream.bind(\"y\", () => Stream.succeed(3)),\n *   Stream.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(Effect.runSync(Stream.runCollect(result)), Chunk.of({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bind: {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Stream` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link bindEffect}\n   * @see {@link let_ let}\n   *\n   * @example\n   * import { Chunk, Effect, pipe, Stream } from \"effect\"\n   *\n   * const result = pipe(\n   *   Stream.Do,\n   *   Stream.bind(\"x\", () => Stream.succeed(2)),\n   *   Stream.bind(\"y\", () => Stream.succeed(3)),\n   *   Stream.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(Effect.runSync(Stream.runCollect(result)), Chunk.of({ x: 2, y: 3, sum: 5 }))\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  <N extends string, A, B, E2, R2>(\n    tag: Exclude<N, keyof A>,\n    f: (_: NoInfer<A>) => Stream<B, E2, R2>,\n    options?:\n      | { readonly concurrency?: number | \"unbounded\" | undefined; readonly bufferSize?: number | undefined }\n      | undefined\n  ): <E, R>(self: Stream<A, E, R>) => Stream<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E2 | E, R2 | R>\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Stream` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link bindEffect}\n   * @see {@link let_ let}\n   *\n   * @example\n   * import { Chunk, Effect, pipe, Stream } from \"effect\"\n   *\n   * const result = pipe(\n   *   Stream.Do,\n   *   Stream.bind(\"x\", () => Stream.succeed(2)),\n   *   Stream.bind(\"y\", () => Stream.succeed(3)),\n   *   Stream.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(Effect.runSync(Stream.runCollect(result)), Chunk.of({ x: 2, y: 3, sum: 5 }))\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  <A, E, R, N extends string, B, E2, R2>(\n    self: Stream<A, E, R>,\n    tag: Exclude<N, keyof A>,\n    f: (_: NoInfer<A>) => Stream<B, E2, R2>,\n    options?:\n      | { readonly concurrency?: number | \"unbounded\" | undefined; readonly bufferSize?: number | undefined }\n      | undefined\n  ): Stream<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E | E2, R | R2>\n} = internal.bind\n\n/**\n * Binds an effectful value in a `do` scope\n *\n * @see {@link Do}\n * @see {@link bindTo}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @since 2.0.0\n * @category do notation\n */\nexport const bindEffect: {\n  /**\n   * Binds an effectful value in a `do` scope\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link bind}\n   * @see {@link let_ let}\n   *\n   * @since 2.0.0\n   * @category do notation\n   */\n  <N extends string, A, B, E2, R2>(\n    tag: Exclude<N, keyof A>,\n    f: (_: NoInfer<A>) => Effect.Effect<B, E2, R2>,\n    options?: { readonly concurrency?: number | \"unbounded\" | undefined; readonly bufferSize?: number | undefined }\n  ): <E, R>(self: Stream<A, E, R>) => Stream<{ [K in keyof A | N]: K extends keyof A ? A[K] : B }, E | E2, R | R2>\n  /**\n   * Binds an effectful value in a `do` scope\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link bind}\n   * @see {@link let_ let}\n   *\n   * @since 2.0.0\n   * @category do notation\n   */\n  <A, E, R, N extends string, B, E2, R2>(\n    self: Stream<A, E, R>,\n    tag: Exclude<N, keyof A>,\n    f: (_: NoInfer<A>) => Effect.Effect<B, E2, R2>,\n    options?: { readonly concurrency?: number | \"unbounded\" | undefined; readonly unordered?: boolean | undefined }\n  ): Stream<{ [K in keyof A | N]: K extends keyof A ? A[K] : B }, E | E2, R | R2>\n} = _groupBy.bindEffect\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Stream` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link Do}\n * @see {@link bind}\n * @see {@link bindEffect}\n * @see {@link let_ let}\n *\n * @example\n * import { Chunk, Effect, pipe, Stream } from \"effect\"\n *\n * const result = pipe(\n *   Stream.Do,\n *   Stream.bind(\"x\", () => Stream.succeed(2)),\n *   Stream.bind(\"y\", () => Stream.succeed(3)),\n *   Stream.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(Effect.runSync(Stream.runCollect(result)), Chunk.of({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bindTo: {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Stream` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link bindEffect}\n   * @see {@link let_ let}\n   *\n   * @example\n   * import { Chunk, Effect, pipe, Stream } from \"effect\"\n   *\n   * const result = pipe(\n   *   Stream.Do,\n   *   Stream.bind(\"x\", () => Stream.succeed(2)),\n   *   Stream.bind(\"y\", () => Stream.succeed(3)),\n   *   Stream.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(Effect.runSync(Stream.runCollect(result)), Chunk.of({ x: 2, y: 3, sum: 5 }))\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  <N extends string>(name: N): <A, E, R>(self: Stream<A, E, R>) => Stream<{ [K in N]: A }, E, R>\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Stream` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link bindEffect}\n   * @see {@link let_ let}\n   *\n   * @example\n   * import { Chunk, Effect, pipe, Stream } from \"effect\"\n   *\n   * const result = pipe(\n   *   Stream.Do,\n   *   Stream.bind(\"x\", () => Stream.succeed(2)),\n   *   Stream.bind(\"y\", () => Stream.succeed(3)),\n   *   Stream.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(Effect.runSync(Stream.runCollect(result)), Chunk.of({ x: 2, y: 3, sum: 5 }))\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  <A, E, R, N extends string>(self: Stream<A, E, R>, name: N): Stream<{ [K in N]: A }, E, R>\n} = internal.bindTo\n\nconst let_: {\n  <N extends string, A extends object, B>(\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): <E, R>(self: Stream<A, E, R>) => Stream<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E, R>\n  <A extends object, E, R, N extends string, B>(\n    self: Stream<A, E, R>,\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): Stream<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E, R>\n} = internal.let_\n\nexport {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Stream` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link bind}\n   * @see {@link bindEffect}\n   *\n   * @example\n   * import { Chunk, Effect, pipe, Stream } from \"effect\"\n   *\n   * const result = pipe(\n   *   Stream.Do,\n   *   Stream.bind(\"x\", () => Stream.succeed(2)),\n   *   Stream.bind(\"y\", () => Stream.succeed(3)),\n   *   Stream.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(Effect.runSync(Stream.runCollect(result)), Chunk.of({ x: 2, y: 3, sum: 5 }))\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  let_ as let\n}\n\n// -------------------------------------------------------------------------------------\n// encoding\n// -------------------------------------------------------------------------------------\n\n/**\n * Decode Uint8Array chunks into a stream of strings using the specified encoding.\n *\n * @since 2.0.0\n * @category encoding\n */\nexport const decodeText: {\n  // -------------------------------------------------------------------------------------\n  // encoding\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * Decode Uint8Array chunks into a stream of strings using the specified encoding.\n   *\n   * @since 2.0.0\n   * @category encoding\n   */\n  (encoding?: string | undefined): <E, R>(self: Stream<Uint8Array, E, R>) => Stream<string, E, R>\n  // -------------------------------------------------------------------------------------\n  // encoding\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * Decode Uint8Array chunks into a stream of strings using the specified encoding.\n   *\n   * @since 2.0.0\n   * @category encoding\n   */\n  <E, R>(self: Stream<Uint8Array, E, R>, encoding?: string | undefined): Stream<string, E, R>\n} = internal.decodeText\n\n/**\n * Encode a stream of strings into a stream of Uint8Array chunks using the specified encoding.\n *\n * @since 2.0.0\n * @category encoding\n */\nexport const encodeText: <E, R>(self: Stream<string, E, R>) => Stream<Uint8Array, E, R> = internal.encodeText\n\n/**\n * @since 3.4.0\n * @category models\n */\nexport interface EventListener<A> {\n  addEventListener(\n    event: string,\n    f: (event: A) => void,\n    options?: {\n      readonly capture?: boolean\n      readonly passive?: boolean\n      readonly once?: boolean\n      readonly signal?: AbortSignal\n    } | boolean\n  ): void\n  removeEventListener(\n    event: string,\n    f: (event: A) => void,\n    options?: {\n      readonly capture?: boolean\n    } | boolean\n  ): void\n}\n\n/**\n * Creates a `Stream` using addEventListener.\n * @since 3.1.0\n */\nexport const fromEventListener: <A = unknown>(\n  target: EventListener<A>,\n  type: string,\n  options?: boolean | {\n    readonly capture?: boolean\n    readonly passive?: boolean\n    readonly once?: boolean\n    readonly bufferSize?: number | \"unbounded\" | undefined\n  } | undefined\n) => Stream<A> = internal.fromEventListener\n"],"names":["_groupBy","internal","StreamTypeId","DefaultChunkSize","accumulate","accumulateChunks","acquireRelease","aggregate","aggregateWithin","aggregateWithinEither","as","_async","async","asyncEffect","asyncPush","asyncScoped","branchAfter","broadcast","share","broadcastDynamic","broadcastedQueues","broadcastedQueuesDynamic","buffer","bufferChunks","catchAll","catchAllCause","catchSome","catchTag","catchTags","catchSomeCause","changes","changesWith","changesWithEffect","chunks","chunksWith","combine","combineChunks","concat","concatAll","cross","crossLeft","crossRight","crossWith","debounce","die","dieSync","dieMessage","distributedWith","distributedWithDynamic","drain","drainFork","drop","dropRight","dropUntil","dropUntilEffect","dropWhile","dropWhileEffect","either","empty","ensuring","ensuringWith","context","contextWith","contextWithEffect","contextWithStream","execute","fail","failSync","failCause","failCauseSync","filter","filterEffect","filterMap","filterMapEffect","filterMapWhile","filterMapWhileEffect","finalizer","find","findEffect","flatMap","flatten","flattenChunks","flattenEffect","flattenExitOption","flattenIterables","flattenTake","forever","fromAsyncIterable","fromChannel","toChannel","fromChunk","fromChunkPubSub","fromChunkQueue","fromChunks","fromEffect","fromEffectOption","fromPubSub","fromTPubSub","fromIterable","fromIterableEffect","fromIteratorSucceed","fromPull","fromQueue","fromTQueue","fromReadableStream","fromReadableStreamByob","fromSchedule","groupAdjacentBy","groupBy","groupByKey","grouped","groupedWithin","haltAfter","haltWhen","haltWhenDeferred","identity","identityStream","interleave","interleaveWith","intersperse","intersperseAffixes","interruptAfter","interruptWhen","interruptWhenDeferred","iterate","make","map","mapAccum","mapAccumEffect","mapBoth","mapChunks","mapChunksEffect","mapConcat","mapConcatChunk","mapConcatChunkEffect","mapConcatEffect","mapEffect","mapEffectOptions","mapError","mapErrorCause","merge","mergeAll","mergeWithTag","mergeWith","mergeEither","mergeLeft","mergeRight","mkString","never","onEnd","onError","onDone","onStart","orDie","orDieWith","orElse","orElseEither","orElseFail","orElseIfEmpty","orElseIfEmptyChunk","orElseIfEmptyStream","orElseSucceed","paginate","paginateChunk","paginateChunkEffect","paginateEffect","partition","partitionEither","peel","pipeThrough","pipeThroughChannel","pipeThroughChannelOrFail","prepend","provideContext","provideLayer","provideService","provideServiceEffect","provideServiceStream","mapInputContext","provideSomeLayer","race","raceAll","range","rechunk","refineOrDie","refineOrDieWith","repeat","repeatEffect","repeatEffectChunk","repeatEffectChunkOption","repeatEffectOption","repeatEffectWithSchedule","repeatEither","repeatElements","repeatElementsWith","repeatValue","repeatWith","retry","run","runCollect","runCount","runDrain","runFold","runFoldEffect","runFoldScoped","runFoldScopedEffect","runFoldWhile","runFoldWhileEffect","runFoldWhileScoped","runFoldWhileScopedEffect","runForEach","runForEachChunk","runForEachChunkScoped","runForEachScoped","runForEachWhile","runForEachWhileScoped","runHead","runIntoPubSub","runIntoPubSubScoped","runIntoQueue","runIntoQueueElementsScoped","runIntoQueueScoped","runLast","runScoped","runSum","scan","scanEffect","scanReduce","scanReduceEffect","schedule","scheduleWith","scoped","sliding","slidingSize","some","someOrElse","someOrFail","split","splitOnChunk","splitLines","succeed","sync","suspend","take","takeRight","takeUntil","takeUntilEffect","takeWhile","tap","tapBoth","tapError","tapErrorCause","tapSink","throttle","throttleEffect","tick","timeout","timeoutFail","timeoutFailCause","timeoutTo","toPubSub","toPull","toQueue","toQueueOfElements","toReadableStream","toReadableStreamEffect","toReadableStreamRuntime","transduce","unfold","unfoldChunk","unfoldChunkEffect","unfoldEffect","void_","void","unwrap","unwrapScoped","updateService","when","whenCase","whenCaseEffect","whenEffect","withSpan","zip","zipFlatten","zipAll","zipAllLeft","zipAllRight","zipAllSortedByKey","zipAllSortedByKeyLeft","zipAllSortedByKeyRight","zipAllSortedByKeyWith","zipAllWith","zipLatest","zipLatestAll","zipLatestWith","zipLeft","zipRight","zipWith","zipWithChunks","zipWithNext","zipWithPrevious","zipWithPreviousAndNext","zipWithIndex","Do","bind","bindEffect","bindTo","let_","let","decodeText","encodeText","fromEventListener"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 18055, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 18061, "column": 0}, "map": {"version":3,"file":"Logger.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Logger.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Cause from \"./Cause.js\"\nimport type { DurationInput } from \"./Duration.js\"\nimport type { Effect } from \"./Effect.js\"\nimport type * as FiberId from \"./FiberId.js\"\nimport type * as FiberRefs from \"./FiberRefs.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport type * as HashMap from \"./HashMap.js\"\nimport * as fiberRuntime from \"./internal/fiberRuntime.js\"\nimport * as circular from \"./internal/layer/circular.js\"\nimport * as internalCircular from \"./internal/logger-circular.js\"\nimport * as internal from \"./internal/logger.js\"\nimport type * as Layer from \"./Layer.js\"\nimport type * as List from \"./List.js\"\nimport type * as LogLevel from \"./LogLevel.js\"\nimport type * as LogSpan from \"./LogSpan.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Scope } from \"./Scope.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const LoggerTypeId: unique symbol = internal.LoggerTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type LoggerTypeId = typeof LoggerTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Logger<in Message, out Output> extends Logger.Variance<Message, Output>, Pipeable {\n  log(options: Logger.Options<Message>): Output\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Logger {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<in Message, out Output> {\n    readonly [LoggerTypeId]: {\n      readonly _Message: Types.Contravariant<Message>\n      readonly _Output: Types.Covariant<Output>\n    }\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Options<out Message> {\n    readonly fiberId: FiberId.FiberId\n    readonly logLevel: LogLevel.LogLevel\n    readonly message: Message\n    readonly cause: Cause.Cause<unknown>\n    readonly context: FiberRefs.FiberRefs\n    readonly spans: List.List<LogSpan.LogSpan>\n    readonly annotations: HashMap.HashMap<string, unknown>\n    readonly date: Date\n  }\n}\n\n/**\n * Creates a custom logger that formats log messages according to the provided\n * function.\n *\n * @example\n * import { Effect, Logger, LogLevel } from \"effect\"\n *\n * const logger = Logger.make(({ logLevel, message }) => {\n *   globalThis.console.log(`[${logLevel.label}] ${message}`)\n * })\n *\n * const task1 = Effect.logDebug(\"task1 done\")\n * const task2 = Effect.logDebug(\"task2 done\")\n *\n * const program = Effect.gen(function*() {\n *   yield* Effect.log(\"start\")\n *   yield* task1\n *   yield* task2\n *   yield* Effect.log(\"done\")\n * }).pipe(\n *   Logger.withMinimumLogLevel(LogLevel.Debug),\n *   Effect.provide(Logger.replace(Logger.defaultLogger, logger))\n * )\n *\n * // Effect.runFork(program)\n * // [INFO] start\n * // [DEBUG] task1 done\n * // [DEBUG] task2 done\n * // [INFO] done\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const make: <Message, Output>(log: (options: Logger.Options<Message>) => Output) => Logger<Message, Output> =\n  internal.makeLogger\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const add: <B>(logger: Logger<unknown, B>) => Layer.Layer<never> = circular.addLogger\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const addEffect: <A, E, R>(effect: Effect<Logger<unknown, A>, E, R>) => Layer.Layer<never, E, R> =\n  circular.addLoggerEffect\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const addScoped: <A, E, R>(\n  effect: Effect<Logger<unknown, A>, E, R>\n) => Layer.Layer<never, E, Exclude<R, Scope>> = circular.addLoggerScoped\n\n/**\n * @since 2.0.0\n * @category mapping\n */\nexport const mapInput: {\n  /**\n   * @since 2.0.0\n   * @category mapping\n   */\n  <Message, Message2>(\n    f: (message: Message2) => Message\n  ): <Output>(self: Logger<Message, Output>) => Logger<Message2, Output>\n  /**\n   * @since 2.0.0\n   * @category mapping\n   */\n  <Output, Message, Message2>(\n    self: Logger<Message, Output>,\n    f: (message: Message2) => Message\n  ): Logger<Message2, Output>\n} = internal.mapInput\n\n/**\n * @since 2.0.0\n * @category mapping\n */\nexport const mapInputOptions: {\n  /**\n   * @since 2.0.0\n   * @category mapping\n   */\n  <Message, Message2>(\n    f: (options: Logger.Options<Message2>) => Logger.Options<Message>\n  ): <Output>(self: Logger<Message, Output>) => Logger<Message2, Output>\n  /**\n   * @since 2.0.0\n   * @category mapping\n   */\n  <Output, Message, Message2>(\n    self: Logger<Message, Output>,\n    f: (options: Logger.Options<Message2>) => Logger.Options<Message>\n  ): Logger<Message2, Output>\n} = internal.mapInputOptions\n\n/**\n * Returns a version of this logger that only logs messages when the log level\n * satisfies the specified predicate.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filterLogLevel: {\n  /**\n   * Returns a version of this logger that only logs messages when the log level\n   * satisfies the specified predicate.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  (\n    f: (logLevel: LogLevel.LogLevel) => boolean\n  ): <Message, Output>(self: Logger<Message, Output>) => Logger<Message, Option.Option<Output>>\n  /**\n   * Returns a version of this logger that only logs messages when the log level\n   * satisfies the specified predicate.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <Message, Output>(\n    self: Logger<Message, Output>,\n    f: (logLevel: LogLevel.LogLevel) => boolean\n  ): Logger<Message, Option.Option<Output>>\n} = internal.filterLogLevel\n\n/**\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  /**\n   * @since 2.0.0\n   * @category mapping\n   */\n  <Output, Output2>(\n    f: (output: Output) => Output2\n  ): <Message>(self: Logger<Message, Output>) => Logger<Message, Output2>\n  /**\n   * @since 2.0.0\n   * @category mapping\n   */\n  <Message, Output, Output2>(self: Logger<Message, Output>, f: (output: Output) => Output2): Logger<Message, Output2>\n} = internal.map\n\n/**\n * Creates a batched logger that groups log messages together and processes them\n * in intervals.\n *\n * @param window - The time window in which to batch log messages.\n *\n * @example\n * import { Console, Effect, Logger } from \"effect\"\n *\n * const LoggerLive = Logger.replaceScoped(\n *   Logger.defaultLogger,\n *   Logger.logfmtLogger.pipe(\n *     Logger.batched(\"500 millis\", (messages) => Console.log(\"BATCH\", `[\\n${messages.join(\"\\n\")}\\n]`))\n *   )\n * )\n *\n * const program = Effect.gen(function*() {\n *   yield* Effect.log(\"one\")\n *   yield* Effect.log(\"two\")\n *   yield* Effect.log(\"three\")\n * }).pipe(Effect.provide(LoggerLive))\n *\n * // Effect.runFork(program)\n * // BATCH [\n * // timestamp=... level=INFO fiber=#0 message=one\n * // timestamp=... level=INFO fiber=#0 message=two\n * // timestamp=... level=INFO fiber=#0 message=three\n * // ]\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const batched: {\n  /**\n   * Creates a batched logger that groups log messages together and processes them\n   * in intervals.\n   *\n   * @param window - The time window in which to batch log messages.\n   *\n   * @example\n   * import { Console, Effect, Logger } from \"effect\"\n   *\n   * const LoggerLive = Logger.replaceScoped(\n   *   Logger.defaultLogger,\n   *   Logger.logfmtLogger.pipe(\n   *     Logger.batched(\"500 millis\", (messages) => Console.log(\"BATCH\", `[\\n${messages.join(\"\\n\")}\\n]`))\n   *   )\n   * )\n   *\n   * const program = Effect.gen(function*() {\n   *   yield* Effect.log(\"one\")\n   *   yield* Effect.log(\"two\")\n   *   yield* Effect.log(\"three\")\n   * }).pipe(Effect.provide(LoggerLive))\n   *\n   * // Effect.runFork(program)\n   * // BATCH [\n   * // timestamp=... level=INFO fiber=#0 message=one\n   * // timestamp=... level=INFO fiber=#0 message=two\n   * // timestamp=... level=INFO fiber=#0 message=three\n   * // ]\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <Output, R>(\n    window: DurationInput,\n    f: (messages: Array<Types.NoInfer<Output>>) => Effect<void, never, R>\n  ): <Message>(self: Logger<Message, Output>) => Effect<Logger<Message, void>, never, R | Scope>\n  /**\n   * Creates a batched logger that groups log messages together and processes them\n   * in intervals.\n   *\n   * @param window - The time window in which to batch log messages.\n   *\n   * @example\n   * import { Console, Effect, Logger } from \"effect\"\n   *\n   * const LoggerLive = Logger.replaceScoped(\n   *   Logger.defaultLogger,\n   *   Logger.logfmtLogger.pipe(\n   *     Logger.batched(\"500 millis\", (messages) => Console.log(\"BATCH\", `[\\n${messages.join(\"\\n\")}\\n]`))\n   *   )\n   * )\n   *\n   * const program = Effect.gen(function*() {\n   *   yield* Effect.log(\"one\")\n   *   yield* Effect.log(\"two\")\n   *   yield* Effect.log(\"three\")\n   * }).pipe(Effect.provide(LoggerLive))\n   *\n   * // Effect.runFork(program)\n   * // BATCH [\n   * // timestamp=... level=INFO fiber=#0 message=one\n   * // timestamp=... level=INFO fiber=#0 message=two\n   * // timestamp=... level=INFO fiber=#0 message=three\n   * // ]\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <Message, Output, R>(\n    self: Logger<Message, Output>,\n    window: DurationInput,\n    f: (messages: Array<Types.NoInfer<Output>>) => Effect<void, never, R>\n  ): Effect<Logger<Message, void>, never, Scope | R>\n} = fiberRuntime.batchedLogger\n\n/**\n * @since 2.0.0\n * @category console\n */\nexport const withConsoleLog: <M, O>(self: Logger<M, O>) => Logger<M, void> = fiberRuntime.loggerWithConsoleLog\n\n/**\n * Takes a `Logger<M, O>` and returns a logger that calls the respective `Console` method\n * based on the log level.\n *\n * @example\n * import { Logger, Effect } from \"effect\"\n *\n * const loggerLayer = Logger.replace(\n *   Logger.defaultLogger,\n *   Logger.withLeveledConsole(Logger.stringLogger),\n * )\n *\n * Effect.gen(function* () {\n *   yield* Effect.logError(\"an error\")\n *   yield* Effect.logInfo(\"an info\")\n * }).pipe(Effect.provide(loggerLayer))\n *\n * @since 3.8.0\n * @category console\n */\nexport const withLeveledConsole: <M, O>(self: Logger<M, O>) => Logger<M, void> = fiberRuntime.loggerWithLeveledLog\n\n/**\n * @since 2.0.0\n * @category console\n */\nexport const withConsoleError: <M, O>(self: Logger<M, O>) => Logger<M, void> = fiberRuntime.loggerWithConsoleError\n\n/**\n * A logger that does nothing in response to logging events.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const none: Logger<unknown, void> = internal.none\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const remove: <A>(logger: Logger<unknown, A>) => Layer.Layer<never> = circular.removeLogger\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const replace: {\n  /**\n   * @since 2.0.0\n   * @category context\n   */\n  <B>(that: Logger<unknown, B>): <A>(self: Logger<unknown, A>) => Layer.Layer<never>\n  /**\n   * @since 2.0.0\n   * @category context\n   */\n  <A, B>(self: Logger<unknown, A>, that: Logger<unknown, B>): Layer.Layer<never>\n} = circular.replaceLogger\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const replaceEffect: {\n  /**\n   * @since 2.0.0\n   * @category context\n   */\n  <B, E, R>(that: Effect<Logger<unknown, B>, E, R>): <A>(self: Logger<unknown, A>) => Layer.Layer<never, E, R>\n  /**\n   * @since 2.0.0\n   * @category context\n   */\n  <A, B, E, R>(self: Logger<unknown, A>, that: Effect<Logger<unknown, B>, E, R>): Layer.Layer<never, E, R>\n} = circular.replaceLoggerEffect\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const replaceScoped: {\n  /**\n   * @since 2.0.0\n   * @category context\n   */\n  <B, E, R>(\n    that: Effect<Logger<unknown, B>, E, R>\n  ): <A>(self: Logger<unknown, A>) => Layer.Layer<never, E, Exclude<R, Scope>>\n  /**\n   * @since 2.0.0\n   * @category context\n   */\n  <A, B, E, R>(\n    self: Logger<unknown, A>,\n    that: Effect<Logger<unknown, B>, E, R>\n  ): Layer.Layer<never, E, Exclude<R, Scope>>\n} = circular.replaceLoggerScoped\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const simple: <A, B>(log: (a: A) => B) => Logger<A, B> = internal.simple\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const succeed: <A>(value: A) => Logger<unknown, A> = internal.succeed\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const sync: <A>(evaluate: LazyArg<A>) => Logger<unknown, A> = internal.sync\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const test: {\n  /**\n   * @since 2.0.0\n   * @category constructors\n   */\n  <Message>(input: Message): <Output>(self: Logger<Message, Output>) => Output\n  /**\n   * @since 2.0.0\n   * @category constructors\n   */\n  <Message, Output>(self: Logger<Message, Output>, input: Message): Output\n} = internalCircular.test\n\n/**\n * Sets the minimum log level for subsequent logging operations, allowing\n * control over which log messages are displayed based on their severity.\n *\n * @example\n * import { Effect, Logger, LogLevel } from \"effect\"\n *\n * const program = Effect.logDebug(\"message1\").pipe(Logger.withMinimumLogLevel(LogLevel.Debug))\n *\n * // Effect.runFork(program)\n * // timestamp=... level=DEBUG fiber=#0 message=message1\n *\n * @since 2.0.0\n * @category context\n */\nexport const withMinimumLogLevel: {\n  /**\n   * Sets the minimum log level for subsequent logging operations, allowing\n   * control over which log messages are displayed based on their severity.\n   *\n   * @example\n   * import { Effect, Logger, LogLevel } from \"effect\"\n   *\n   * const program = Effect.logDebug(\"message1\").pipe(Logger.withMinimumLogLevel(LogLevel.Debug))\n   *\n   * // Effect.runFork(program)\n   * // timestamp=... level=DEBUG fiber=#0 message=message1\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  (level: LogLevel.LogLevel): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  /**\n   * Sets the minimum log level for subsequent logging operations, allowing\n   * control over which log messages are displayed based on their severity.\n   *\n   * @example\n   * import { Effect, Logger, LogLevel } from \"effect\"\n   *\n   * const program = Effect.logDebug(\"message1\").pipe(Logger.withMinimumLogLevel(LogLevel.Debug))\n   *\n   * // Effect.runFork(program)\n   * // timestamp=... level=DEBUG fiber=#0 message=message1\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <A, E, R>(self: Effect<A, E, R>, level: LogLevel.LogLevel): Effect<A, E, R>\n} = circular.withMinimumLogLevel\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const withSpanAnnotations: <Message, Output>(self: Logger<Message, Output>) => Logger<Message, Output> =\n  fiberRuntime.loggerWithSpanAnnotations\n\n/**\n * Combines this logger with the specified logger to produce a new logger that\n * logs to both this logger and that logger.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zip: {\n  /**\n   * Combines this logger with the specified logger to produce a new logger that\n   * logs to both this logger and that logger.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <Message2, Output2>(\n    that: Logger<Message2, Output2>\n  ): <Message, Output>(self: Logger<Message, Output>) => Logger<Message & Message2, [Output, Output2]>\n  /**\n   * Combines this logger with the specified logger to produce a new logger that\n   * logs to both this logger and that logger.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <Message, Output, Message2, Output2>(\n    self: Logger<Message, Output>,\n    that: Logger<Message2, Output2>\n  ): Logger<Message & Message2, [Output, Output2]>\n} = internal.zip\n\n/**\n * @since 2.0.0\n * @category zipping\n */\nexport const zipLeft: {\n  /**\n   * @since 2.0.0\n   * @category zipping\n   */\n  <Message2, Output2>(\n    that: Logger<Message2, Output2>\n  ): <Message, Output>(self: Logger<Message, Output>) => Logger<Message & Message2, Output>\n  /**\n   * @since 2.0.0\n   * @category zipping\n   */\n  <Message, Output, Message2, Output2>(\n    self: Logger<Message, Output>,\n    that: Logger<Message2, Output2>\n  ): Logger<Message & Message2, Output>\n} = internal.zipLeft\n\n/**\n * @since 2.0.0\n * @category zipping\n */\nexport const zipRight: {\n  /**\n   * @since 2.0.0\n   * @category zipping\n   */\n  <Message2, Output2>(\n    that: Logger<Message2, Output2>\n  ): <Message, Output>(self: Logger<Message, Output>) => Logger<Message & Message2, Output2>\n  /**\n   * @since 2.0.0\n   * @category zipping\n   */\n  <Message, Output, Message2, Output2>(\n    self: Logger<Message, Output>,\n    that: Logger<Message2, Output2>\n  ): Logger<Message & Message2, Output2>\n} = internal.zipRight\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const defaultLogger: Logger<unknown, void> = fiberRuntime.defaultLogger\n\n/**\n * The `jsonLogger` logger formats log entries as JSON objects, making them easy to\n * integrate with logging systems that consume JSON data.\n *\n * @example\n * import { Effect, Logger } from \"effect\"\n *\n * const program = Effect.log(\"message1\", \"message2\").pipe(\n *   Effect.annotateLogs({ key1: \"value1\", key2: \"value2\" }),\n *   Effect.withLogSpan(\"myspan\")\n * )\n *\n * // Effect.runFork(program.pipe(Effect.provide(Logger.json)))\n * // {\"message\":[\"message1\",\"message2\"],\"logLevel\":\"INFO\",\"timestamp\":\"...\",\"annotations\":{\"key2\":\"value2\",\"key1\":\"value1\"},\"spans\":{\"myspan\":0},\"fiberId\":\"#0\"}\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const jsonLogger: Logger<unknown, string> = internal.jsonLogger\n\n/**\n * This logger outputs logs in a human-readable format that is easy to read\n * during development or in a production console.\n *\n * @example\n * import { Effect, Logger } from \"effect\"\n *\n * const program = Effect.log(\"message1\", \"message2\").pipe(\n *   Effect.annotateLogs({ key1: \"value1\", key2: \"value2\" }),\n *   Effect.withLogSpan(\"myspan\")\n * )\n *\n * // Effect.runFork(program.pipe(Effect.provide(Logger.logFmt)))\n * // timestamp=... level=INFO fiber=#0 message=message1 message=message2 myspan=0ms key2=value2 key1=value1\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const logfmtLogger: Logger<unknown, string> = internal.logfmtLogger\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const stringLogger: Logger<unknown, string> = internal.stringLogger\n\n/**\n * The pretty logger utilizes the capabilities of the console API to generate\n * visually engaging and color-enhanced log outputs. This feature is\n * particularly useful for improving the readability of log messages during\n * development and debugging processes.\n *\n * @example\n * import { Effect, Logger } from \"effect\"\n *\n * const program = Effect.log(\"message1\", \"message2\").pipe(\n *   Effect.annotateLogs({ key1: \"value1\", key2: \"value2\" }),\n *   Effect.withLogSpan(\"myspan\")\n * )\n *\n * // Effect.runFork(program.pipe(Effect.provide(Logger.pretty)))\n * //         green --v                      v-- bold and cyan\n * // [07:51:54.434] INFO (#0) myspan=1ms: message1\n * //   message2\n * //    v-- bold\n * //   key2: value2\n * //   key1: value1\n *\n * @since 3.5.0\n * @category constructors\n */\nexport const prettyLogger: (\n  options?: {\n    readonly colors?: \"auto\" | boolean | undefined\n    readonly stderr?: boolean | undefined\n    readonly formatDate?: ((date: Date) => string) | undefined\n    readonly mode?: \"browser\" | \"tty\" | \"auto\" | undefined\n  }\n) => Logger<unknown, void> = internal.prettyLogger\n\n/**\n * A default version of the pretty logger.\n *\n * @since 3.8.0\n * @category constructors\n */\nexport const prettyLoggerDefault: Logger<unknown, void> = internal.prettyLoggerDefault\n\n/**\n * The structured logger provides detailed log outputs, structured in a way that\n * retains comprehensive traceability of the events, suitable for deeper\n * analysis and troubleshooting.\n *\n * @example\n * import { Effect, Logger } from \"effect\"\n *\n * const program = Effect.log(\"message1\", \"message2\").pipe(\n *   Effect.annotateLogs({ key1: \"value1\", key2: \"value2\" }),\n *   Effect.withLogSpan(\"myspan\")\n * )\n *\n * // Effect.runFork(program.pipe(Effect.provide(Logger.structured)))\n * // {\n * //   message: [ 'message1', 'message2' ],\n * //   logLevel: 'INFO',\n * //   timestamp: '2024-07-09T14:05:41.623Z',\n * //   cause: undefined,\n * //   annotations: { key2: 'value2', key1: 'value1' },\n * //   spans: { myspan: 0 },\n * //   fiberId: '#0'\n * // }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const structuredLogger: Logger<\n  unknown,\n  {\n    readonly logLevel: string\n    readonly fiberId: string\n    readonly timestamp: string\n    readonly message: unknown\n    readonly cause: string | undefined\n    readonly annotations: Record<string, unknown>\n    readonly spans: Record<string, number>\n  }\n> = internal.structuredLogger\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const tracerLogger: Logger<unknown, void> = fiberRuntime.tracerLogger\n\n/**\n * The `json` logger formats log entries as JSON objects, making them easy to\n * integrate with logging systems that consume JSON data.\n *\n * @example\n * import { Effect, Logger } from \"effect\"\n *\n * const program = Effect.log(\"message1\", \"message2\").pipe(\n *   Effect.annotateLogs({ key1: \"value1\", key2: \"value2\" }),\n *   Effect.withLogSpan(\"myspan\")\n * )\n *\n * // Effect.runFork(program.pipe(Effect.provide(Logger.json)))\n * // {\"message\":[\"message1\",\"message2\"],\"logLevel\":\"INFO\",\"timestamp\":\"...\",\"annotations\":{\"key2\":\"value2\",\"key1\":\"value1\"},\"spans\":{\"myspan\":0},\"fiberId\":\"#0\"}\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const json: Layer.Layer<never> = replace(fiberRuntime.defaultLogger, fiberRuntime.jsonLogger)\n\n/**\n * This logger outputs logs in a human-readable format that is easy to read\n * during development or in a production console.\n *\n * @example\n * import { Effect, Logger } from \"effect\"\n *\n * const program = Effect.log(\"message1\", \"message2\").pipe(\n *   Effect.annotateLogs({ key1: \"value1\", key2: \"value2\" }),\n *   Effect.withLogSpan(\"myspan\")\n * )\n *\n * // Effect.runFork(program.pipe(Effect.provide(Logger.logFmt)))\n * // timestamp=... level=INFO fiber=#0 message=message1 message=message2 myspan=0ms key2=value2 key1=value1\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const logFmt: Layer.Layer<never> = replace(fiberRuntime.defaultLogger, fiberRuntime.logFmtLogger)\n\n/**\n * The pretty logger utilizes the capabilities of the console API to generate\n * visually engaging and color-enhanced log outputs. This feature is\n * particularly useful for improving the readability of log messages during\n * development and debugging processes.\n *\n * @example\n * import { Effect, Logger } from \"effect\"\n *\n * const program = Effect.log(\"message1\", \"message2\").pipe(\n *   Effect.annotateLogs({ key1: \"value1\", key2: \"value2\" }),\n *   Effect.withLogSpan(\"myspan\")\n * )\n *\n * // Effect.runFork(program.pipe(Effect.provide(Logger.pretty)))\n * //         green --v                      v-- bold and cyan\n * // [07:51:54.434] INFO (#0) myspan=1ms: message1\n * //   message2\n * //    v-- bold\n * //   key2: value2\n * //   key1: value1\n *\n * @since 3.5.0\n * @category constructors\n */\nexport const pretty: Layer.Layer<never> = replace(fiberRuntime.defaultLogger, fiberRuntime.prettyLogger)\n\n/**\n * The structured logger provides detailed log outputs, structured in a way that\n * retains comprehensive traceability of the events, suitable for deeper\n * analysis and troubleshooting.\n *\n * @example\n * import { Effect, Logger } from \"effect\"\n *\n * const program = Effect.log(\"message1\", \"message2\").pipe(\n *   Effect.annotateLogs({ key1: \"value1\", key2: \"value2\" }),\n *   Effect.withLogSpan(\"myspan\")\n * )\n *\n * // Effect.runFork(program.pipe(Effect.provide(Logger.structured)))\n * // {\n * //   message: [ 'message1', 'message2' ],\n * //   logLevel: 'INFO',\n * //   timestamp: '2024-07-09T14:05:41.623Z',\n * //   cause: undefined,\n * //   annotations: { key2: 'value2', key1: 'value1' },\n * //   spans: { myspan: 0 },\n * //   fiberId: '#0'\n * // }\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const structured: Layer.Layer<never> = replace(fiberRuntime.defaultLogger, fiberRuntime.structuredLogger)\n\n/**\n * Sets the minimum log level for logging operations, allowing control over\n * which log messages are displayed based on their severity.\n *\n * @example\n * import { Effect, Logger, LogLevel } from \"effect\"\n *\n * const program = Effect.gen(function*() {\n *   yield* Effect.log(\"Executing task...\")\n *   yield* Effect.sleep(\"100 millis\")\n *   console.log(\"task done\")\n * })\n *\n * // Logging disabled using a layer\n * // Effect.runFork(program.pipe(Effect.provide(Logger.minimumLogLevel(LogLevel.None))))\n * // task done\n *\n * @since 2.0.0\n * @category context\n */\nexport const minimumLogLevel: (level: LogLevel.LogLevel) => Layer.Layer<never> = circular.minimumLogLevel\n\n/**\n * Returns `true` if the specified value is a `Logger`, otherwise returns `false`.\n *\n * @since 1.0.0\n * @category guards\n */\nexport const isLogger: (u: unknown) => u is Logger<unknown, unknown> = internal.isLogger\n"],"names":["fiberRuntime","circular","internalCircular","internal","LoggerTypeId","make","makeLogger","add","addLogger","addEffect","addLoggerEffect","addScoped","addLoggerScoped","mapInput","mapInputOptions","filterLogLevel","map","batched","batchedLogger","withConsoleLog","loggerWithConsoleLog","withLeveledConsole","loggerWithLeveledLog","withConsoleError","loggerWithConsoleError","none","remove","removeLogger","replace","replaceLogger","replaceEffect","replaceLoggerEffect","replaceScoped","replaceLoggerScoped","simple","succeed","sync","test","withMinimumLogLevel","withSpanAnnotations","loggerWithSpanAnnotations","zip","zipLeft","zipRight","defaultLogger","jsonLogger","logfmtLogger","stringLogger","prettyLogger","prettyLoggerDefault","structuredLogger","tracerLogger","json","logFmt","logFmtLogger","pretty","structured","minimumLogLevel","isLogger"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 18153, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 18169, "column": 0}, "map": {"version":3,"file":"Sink.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Sink.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Cause from \"./Cause.js\"\nimport type * as Channel from \"./Channel.js\"\nimport type * as Chunk from \"./Chunk.js\"\nimport type * as Context from \"./Context.js\"\nimport type * as Duration from \"./Duration.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Either from \"./Either.js\"\nimport type * as Exit from \"./Exit.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport type * as HashMap from \"./HashMap.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport * as internal from \"./internal/sink.js\"\nimport type * as MergeDecision from \"./MergeDecision.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport type * as PubSub from \"./PubSub.js\"\nimport type * as Queue from \"./Queue.js\"\nimport type * as Scope from \"./Scope.js\"\nimport type * as Types from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const SinkTypeId: unique symbol = internal.SinkTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type SinkTypeId = typeof SinkTypeId\n\n/**\n * A `Sink<A, In, L, E, R>` is used to consume elements produced by a `Stream`.\n * You can think of a sink as a function that will consume a variable amount of\n * `In` elements (could be 0, 1, or many), might fail with an error of type `E`,\n * and will eventually yield a value of type `A` together with a remainder of\n * type `L` (i.e. any leftovers).\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Sink<out A, in In = unknown, out L = never, out E = never, out R = never>\n  extends Sink.Variance<A, In, L, E, R>, Pipeable\n{}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface SinkUnify<A extends { [Unify.typeSymbol]?: any }> extends Effect.EffectUnify<A> {\n  Sink?: () => A[Unify.typeSymbol] extends\n    | Sink<\n      infer A,\n      infer In,\n      infer L,\n      infer E,\n      infer R\n    >\n    | infer _ ? Sink<A, In, L, E, R>\n    : never\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface SinkUnifyIgnore extends Effect.EffectUnifyIgnore {\n  Sink?: true\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\ndeclare module \"./Effect.js\" {\n  interface Effect<A, E, R> extends Sink<A, unknown, never, E, R> {}\n  interface EffectUnifyIgnore {\n    Sink?: true\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Sink {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<out A, in In, out L, out E, out R> {\n    readonly [SinkTypeId]: VarianceStruct<A, In, L, E, R>\n  }\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface VarianceStruct<out A, in In, out L, out E, out R> {\n    _A: Types.Covariant<A>\n    _In: Types.Contravariant<In>\n    _L: Types.Covariant<L>\n    _E: Types.Covariant<E>\n    _R: Types.Covariant<R>\n  }\n}\n\n/**\n * Replaces this sink's result with the provided value.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const as: {\n  /**\n   * Replaces this sink's result with the provided value.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A2>(a: A2): <A, In, L, E, R>(self: Sink<A, In, L, E, R>) => Sink<A2, In, L, E, R>\n  /**\n   * Replaces this sink's result with the provided value.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, In, L, E, R, A2>(self: Sink<A, In, L, E, R>, a: A2): Sink<A2, In, L, E, R>\n} = internal.as\n\n/**\n * A sink that collects all elements into a `Chunk`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const collectAll: <In>() => Sink<Chunk.Chunk<In>, In> = internal.collectAll\n\n/**\n * A sink that collects first `n` elements into a chunk.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const collectAllN: <In>(n: number) => Sink<Chunk.Chunk<In>, In, In> = internal.collectAllN\n\n/**\n * Repeatedly runs the sink and accumulates its results into a `Chunk`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const collectAllFrom: <A, In, L extends In, E, R>(\n  self: Sink<A, In, L, E, R>\n) => Sink<Chunk.Chunk<A>, In, L, E, R> = internal.collectAllFrom\n\n/**\n * A sink that collects all of its inputs into a map. The keys are extracted\n * from inputs using the keying function `key`; if multiple inputs use the\n * same key, they are merged using the `merge` function.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const collectAllToMap: <In, K>(\n  key: (input: In) => K,\n  merge: (x: In, y: In) => In\n) => Sink<HashMap.HashMap<K, In>, In> = internal.collectAllToMap\n\n/**\n * A sink that collects first `n` keys into a map. The keys are calculated\n * from inputs using the keying function `key`; if multiple inputs use the the\n * same key, they are merged using the `merge` function.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const collectAllToMapN: <In, K>(\n  n: number,\n  key: (input: In) => K,\n  merge: (x: In, y: In) => In\n) => Sink<HashMap.HashMap<K, In>, In, In> = internal.collectAllToMapN\n\n/**\n * A sink that collects all of its inputs into a set.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const collectAllToSet: <In>() => Sink<HashSet.HashSet<In>, In> = internal.collectAllToSet\n\n/**\n * A sink that collects first `n` distinct inputs into a set.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const collectAllToSetN: <In>(n: number) => Sink<HashSet.HashSet<In>, In, In> = internal.collectAllToSetN\n\n/**\n * Accumulates incoming elements into a chunk until predicate `p` is\n * satisfied.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const collectAllUntil: <In>(p: Predicate<In>) => Sink<Chunk.Chunk<In>, In, In> = internal.collectAllUntil\n\n/**\n * Accumulates incoming elements into a chunk until effectful predicate `p` is\n * satisfied.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const collectAllUntilEffect: <In, E, R>(\n  p: (input: In) => Effect.Effect<boolean, E, R>\n) => Sink<Chunk.Chunk<In>, In, In, E, R> = internal.collectAllUntilEffect\n\n/**\n * Accumulates incoming elements into a chunk as long as they verify predicate\n * `p`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const collectAllWhile: {\n  /**\n   * Accumulates incoming elements into a chunk as long as they verify predicate\n   * `p`.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <In, Out extends In>(refinement: Refinement<In, Out>): Sink<Chunk.Chunk<Out>, In, In>\n  /**\n   * Accumulates incoming elements into a chunk as long as they verify predicate\n   * `p`.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  <In>(predicate: Predicate<In>): Sink<Chunk.Chunk<In>, In, In>\n} = internal.collectAllWhile\n\n/**\n * Accumulates incoming elements into a chunk as long as they verify effectful\n * predicate `p`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const collectAllWhileEffect: <In, E, R>(\n  predicate: (input: In) => Effect.Effect<boolean, E, R>\n) => Sink<Chunk.Chunk<In>, In, In, E, R> = internal.collectAllWhileEffect\n\n/**\n * Repeatedly runs the sink for as long as its results satisfy the predicate\n * `p`. The sink's results will be accumulated using the stepping function `f`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const collectAllWhileWith: {\n  /**\n   * Repeatedly runs the sink for as long as its results satisfy the predicate\n   * `p`. The sink's results will be accumulated using the stepping function `f`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, S>(\n    options: { readonly initial: S; readonly while: Predicate<A>; readonly body: (s: S, a: A) => S }\n  ): <In, L extends In, E, R>(self: Sink<A, In, L, E, R>) => Sink<S, In, L, E, R>\n  /**\n   * Repeatedly runs the sink for as long as its results satisfy the predicate\n   * `p`. The sink's results will be accumulated using the stepping function `f`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, In, L extends In, E, R, S>(\n    self: Sink<A, In, L, E, R>,\n    options: { readonly initial: S; readonly while: Predicate<A>; readonly body: (s: S, a: A) => S }\n  ): Sink<S, In, L, E, R>\n} = internal.collectAllWhileWith as any\n\n/**\n * Collects the leftovers from the stream when the sink succeeds and returns\n * them as part of the sink's result.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const collectLeftover: <A, In, L, E, R>(\n  self: Sink<A, In, L, E, R>\n) => Sink<[A, Chunk.Chunk<L>], In, never, E, R> = internal.collectLeftover\n\n/**\n * Transforms this sink's input elements.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapInput: {\n  /**\n   * Transforms this sink's input elements.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <In0, In>(f: (input: In0) => In): <A, L, E, R>(self: Sink<A, In, L, E, R>) => Sink<A, In0, L, E, R>\n  /**\n   * Transforms this sink's input elements.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, In, L, E, R, In0>(self: Sink<A, In, L, E, R>, f: (input: In0) => In): Sink<A, In0, L, E, R>\n} = internal.mapInput\n\n/**\n * Effectfully transforms this sink's input elements.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapInputEffect: {\n  /**\n   * Effectfully transforms this sink's input elements.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <In0, In, E2, R2>(\n    f: (input: In0) => Effect.Effect<In, E2, R2>\n  ): <A, L, E, R>(self: Sink<A, In, L, E, R>) => Sink<A, In0, L, E2 | E, R2 | R>\n  /**\n   * Effectfully transforms this sink's input elements.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, In, L, E, R, In0, E2, R2>(\n    self: Sink<A, In, L, E, R>,\n    f: (input: In0) => Effect.Effect<In, E2, R2>\n  ): Sink<A, In0, L, E | E2, R | R2>\n} = internal.mapInputEffect\n\n/**\n * Transforms this sink's input chunks. `f` must preserve chunking-invariance.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapInputChunks: {\n  /**\n   * Transforms this sink's input chunks. `f` must preserve chunking-invariance.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <In0, In>(\n    f: (chunk: Chunk.Chunk<In0>) => Chunk.Chunk<In>\n  ): <A, L, E, R>(self: Sink<A, In, L, E, R>) => Sink<A, In0, L, E, R>\n  /**\n   * Transforms this sink's input chunks. `f` must preserve chunking-invariance.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, In, L, E, R, In0>(\n    self: Sink<A, In, L, E, R>,\n    f: (chunk: Chunk.Chunk<In0>) => Chunk.Chunk<In>\n  ): Sink<A, In0, L, E, R>\n} = internal.mapInputChunks\n\n/**\n * Effectfully transforms this sink's input chunks. `f` must preserve\n * chunking-invariance.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapInputChunksEffect: {\n  /**\n   * Effectfully transforms this sink's input chunks. `f` must preserve\n   * chunking-invariance.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <In0, In, E2, R2>(\n    f: (chunk: Chunk.Chunk<In0>) => Effect.Effect<Chunk.Chunk<In>, E2, R2>\n  ): <A, L, E, R>(self: Sink<A, In, L, E, R>) => Sink<A, In0, L, E2 | E, R2 | R>\n  /**\n   * Effectfully transforms this sink's input chunks. `f` must preserve\n   * chunking-invariance.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, In, L, E, R, In0, E2, R2>(\n    self: Sink<A, In, L, E, R>,\n    f: (chunk: Chunk.Chunk<In0>) => Effect.Effect<Chunk.Chunk<In>, E2, R2>\n  ): Sink<A, In0, L, E | E2, R | R2>\n} = internal.mapInputChunksEffect\n\n/**\n * A sink that counts the number of elements fed to it.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const count: Sink<number, unknown> = internal.count\n\n/**\n * Creates a sink halting with the specified defect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const die: (defect: unknown) => Sink<never, unknown> = internal.die\n\n/**\n * Creates a sink halting with the specified message, wrapped in a\n * `RuntimeException`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const dieMessage: (message: string) => Sink<never, unknown> = internal.dieMessage\n\n/**\n * Creates a sink halting with the specified defect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const dieSync: (evaluate: LazyArg<unknown>) => Sink<never, unknown> = internal.dieSync\n\n/**\n * Transforms both inputs and result of this sink using the provided\n * functions.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const dimap: {\n  /**\n   * Transforms both inputs and result of this sink using the provided\n   * functions.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <In0, In, A, A2>(\n    options: { readonly onInput: (input: In0) => In; readonly onDone: (a: A) => A2 }\n  ): <L, E, R>(self: Sink<A, In, L, E, R>) => Sink<A2, In0, L, E, R>\n  /**\n   * Transforms both inputs and result of this sink using the provided\n   * functions.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, In, L, E, R, In0, A2>(\n    self: Sink<A, In, L, E, R>,\n    options: { readonly onInput: (input: In0) => In; readonly onDone: (a: A) => A2 }\n  ): Sink<A2, In0, L, E, R>\n} = internal.dimap\n\n/**\n * Effectfully transforms both inputs and result of this sink using the\n * provided functions.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const dimapEffect: {\n  /**\n   * Effectfully transforms both inputs and result of this sink using the\n   * provided functions.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <In0, In, E2, R2, A, A2, E3, R3>(\n    options: {\n      readonly onInput: (input: In0) => Effect.Effect<In, E2, R2>\n      readonly onDone: (a: A) => Effect.Effect<A2, E3, R3>\n    }\n  ): <L, E, R>(self: Sink<A, In, L, E, R>) => Sink<A2, In0, L, E2 | E3 | E, R2 | R3 | R>\n  /**\n   * Effectfully transforms both inputs and result of this sink using the\n   * provided functions.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, In, L, E, R, In0, E2, R2, A2, E3, R3>(\n    self: Sink<A, In, L, E, R>,\n    options: {\n      readonly onInput: (input: In0) => Effect.Effect<In, E2, R2>\n      readonly onDone: (a: A) => Effect.Effect<A2, E3, R3>\n    }\n  ): Sink<A2, In0, L, E | E2 | E3, R | R2 | R3>\n} = internal.dimapEffect\n\n/**\n * Transforms both input chunks and result of this sink using the provided\n * functions.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const dimapChunks: {\n  /**\n   * Transforms both input chunks and result of this sink using the provided\n   * functions.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <In0, In, A, A2>(\n    options: { readonly onInput: (chunk: Chunk.Chunk<In0>) => Chunk.Chunk<In>; readonly onDone: (a: A) => A2 }\n  ): <L, E, R>(self: Sink<A, In, L, E, R>) => Sink<A2, In0, L, E, R>\n  /**\n   * Transforms both input chunks and result of this sink using the provided\n   * functions.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, In, L, E, R, In0, A2>(\n    self: Sink<A, In, L, E, R>,\n    options: { readonly onInput: (chunk: Chunk.Chunk<In0>) => Chunk.Chunk<In>; readonly onDone: (a: A) => A2 }\n  ): Sink<A2, In0, L, E, R>\n} = internal.dimapChunks\n\n/**\n * Effectfully transforms both input chunks and result of this sink using the\n * provided functions. `f` and `g` must preserve chunking-invariance.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const dimapChunksEffect: {\n  /**\n   * Effectfully transforms both input chunks and result of this sink using the\n   * provided functions. `f` and `g` must preserve chunking-invariance.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <In0, In, E2, R2, A, A2, E3, R3>(\n    options: {\n      readonly onInput: (chunk: Chunk.Chunk<In0>) => Effect.Effect<Chunk.Chunk<In>, E2, R2>\n      readonly onDone: (a: A) => Effect.Effect<A2, E3, R3>\n    }\n  ): <L, E, R>(self: Sink<A, In, L, E, R>) => Sink<A2, In0, L, E2 | E3 | E, R2 | R3 | R>\n  /**\n   * Effectfully transforms both input chunks and result of this sink using the\n   * provided functions. `f` and `g` must preserve chunking-invariance.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, In, L, E, R, In0, E2, R2, A2, E3, R3>(\n    self: Sink<A, In, L, E, R>,\n    options: {\n      readonly onInput: (chunk: Chunk.Chunk<In0>) => Effect.Effect<Chunk.Chunk<In>, E2, R2>\n      readonly onDone: (a: A) => Effect.Effect<A2, E3, R3>\n    }\n  ): Sink<A2, In0, L, E | E2 | E3, R | R2 | R3>\n} = internal.dimapChunksEffect\n\n/**\n * A sink that ignores its inputs.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const drain: Sink<void, unknown> = internal.drain\n\n/**\n * Creates a sink that drops `n` elements.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const drop: <In>(n: number) => Sink<unknown, In, In> = internal.drop\n\n/**\n * Drops incoming elements until the predicate is satisfied.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const dropUntil: <In>(predicate: Predicate<In>) => Sink<unknown, In, In> = internal.dropUntil\n\n/**\n * Drops incoming elements until the effectful predicate is satisfied.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const dropUntilEffect: <In, E, R>(\n  predicate: (input: In) => Effect.Effect<boolean, E, R>\n) => Sink<unknown, In, In, E, R> = internal.dropUntilEffect\n\n/**\n * Drops incoming elements as long as the predicate is satisfied.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const dropWhile: <In>(predicate: Predicate<In>) => Sink<unknown, In, In> = internal.dropWhile\n\n/**\n * Drops incoming elements as long as the effectful predicate is satisfied.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const dropWhileEffect: <In, E, R>(\n  predicate: (input: In) => Effect.Effect<boolean, E, R>\n) => Sink<unknown, In, In, E, R> = internal.dropWhileEffect\n\n/**\n * Returns a new sink with an attached finalizer. The finalizer is guaranteed\n * to be executed so long as the sink begins execution (and regardless of\n * whether or not it completes).\n *\n * @since 2.0.0\n * @category finalization\n */\nexport const ensuring: {\n  /**\n   * Returns a new sink with an attached finalizer. The finalizer is guaranteed\n   * to be executed so long as the sink begins execution (and regardless of\n   * whether or not it completes).\n   *\n   * @since 2.0.0\n   * @category finalization\n   */\n  <X, R2>(\n    finalizer: Effect.Effect<X, never, R2>\n  ): <A, In, L, E, R>(self: Sink<A, In, L, E, R>) => Sink<A, In, L, E, R2 | R>\n  /**\n   * Returns a new sink with an attached finalizer. The finalizer is guaranteed\n   * to be executed so long as the sink begins execution (and regardless of\n   * whether or not it completes).\n   *\n   * @since 2.0.0\n   * @category finalization\n   */\n  <A, In, L, E, R, X, R2>(self: Sink<A, In, L, E, R>, finalizer: Effect.Effect<X, never, R2>): Sink<A, In, L, E, R | R2>\n} = internal.ensuring\n\n/**\n * Returns a new sink with an attached finalizer. The finalizer is guaranteed\n * to be executed so long as the sink begins execution (and regardless of\n * whether or not it completes).\n *\n * @since 2.0.0\n * @category finalization\n */\nexport const ensuringWith: {\n  /**\n   * Returns a new sink with an attached finalizer. The finalizer is guaranteed\n   * to be executed so long as the sink begins execution (and regardless of\n   * whether or not it completes).\n   *\n   * @since 2.0.0\n   * @category finalization\n   */\n  <A, E, X, R2>(\n    finalizer: (exit: Exit.Exit<A, E>) => Effect.Effect<X, never, R2>\n  ): <In, L, R>(self: Sink<A, In, L, E, R>) => Sink<A, In, L, E, R2 | R>\n  /**\n   * Returns a new sink with an attached finalizer. The finalizer is guaranteed\n   * to be executed so long as the sink begins execution (and regardless of\n   * whether or not it completes).\n   *\n   * @since 2.0.0\n   * @category finalization\n   */\n  <A, In, L, E, R, X, R2>(\n    self: Sink<A, In, L, E, R>,\n    finalizer: (exit: Exit.Exit<A, E>) => Effect.Effect<X, never, R2>\n  ): Sink<A, In, L, E, R | R2>\n} = internal.ensuringWith\n\n/**\n * Accesses the whole context of the sink.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const context: <R>() => Sink<Context.Context<R>, unknown, never, never, R> = internal.context\n\n/**\n * Accesses the context of the sink.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const contextWith: <R, Z>(f: (context: Context.Context<R>) => Z) => Sink<Z, unknown, never, never, R> =\n  internal.contextWith\n\n/**\n * Accesses the context of the sink in the context of an effect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const contextWithEffect: <R0, A, E, R>(\n  f: (context: Context.Context<R0>) => Effect.Effect<A, E, R>\n) => Sink<A, unknown, never, E, R0 | R> = internal.contextWithEffect\n\n/**\n * Accesses the context of the sink in the context of a sink.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const contextWithSink: <R0, A, In, L, E, R>(\n  f: (context: Context.Context<R0>) => Sink<A, In, L, E, R>\n) => Sink<A, In, L, E, R0 | R> = internal.contextWithSink\n\n/**\n * A sink that returns whether all elements satisfy the specified predicate.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const every: <In>(predicate: Predicate<In>) => Sink<boolean, In, In> = internal.every\n\n/**\n * A sink that always fails with the specified error.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fail: <E>(e: E) => Sink<never, unknown, never, E> = internal.fail\n\n/**\n * A sink that always fails with the specified lazily evaluated error.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const failSync: <E>(evaluate: LazyArg<E>) => Sink<never, unknown, never, E> = internal.failSync\n\n/**\n * Creates a sink halting with a specified `Cause`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const failCause: <E>(cause: Cause.Cause<E>) => Sink<never, unknown, never, E> = internal.failCause\n\n/**\n * Creates a sink halting with a specified lazily evaluated `Cause`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const failCauseSync: <E>(evaluate: LazyArg<Cause.Cause<E>>) => Sink<never, unknown, never, E> =\n  internal.failCauseSync\n\n/**\n * Filters the sink's input with the given predicate.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filterInput: {\n  /**\n   * Filters the sink's input with the given predicate.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <In, In1 extends In, In2 extends In1>(\n    f: Refinement<In1, In2>\n  ): <A, L, E, R>(self: Sink<A, In, L, E, R>) => Sink<A, In2, L, E, R>\n  /**\n   * Filters the sink's input with the given predicate.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <In, In1 extends In>(f: Predicate<In1>): <A, L, E, R>(self: Sink<A, In, L, E, R>) => Sink<A, In1, L, E, R>\n} = internal.filterInput\n\n/**\n * Effectfully filter the input of this sink using the specified predicate.\n *\n * @since 2.0.0\n * @category filtering\n */\nexport const filterInputEffect: {\n  /**\n   * Effectfully filter the input of this sink using the specified predicate.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <In, In1 extends In, E2, R2>(\n    f: (input: In1) => Effect.Effect<boolean, E2, R2>\n  ): <A, L, E, R>(self: Sink<A, In, L, E, R>) => Sink<A, In1, L, E2 | E, R2 | R>\n  /**\n   * Effectfully filter the input of this sink using the specified predicate.\n   *\n   * @since 2.0.0\n   * @category filtering\n   */\n  <A, In, L, E, R, In1 extends In, E2, R2>(\n    self: Sink<A, In, L, E, R>,\n    f: (input: In1) => Effect.Effect<boolean, E2, R2>\n  ): Sink<A, In1, L, E | E2, R | R2>\n} = internal.filterInputEffect\n\n/**\n * Creates a sink that produces values until one verifies the predicate `f`.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const findEffect: {\n  /**\n   * Creates a sink that produces values until one verifies the predicate `f`.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, E2, R2>(\n    f: (a: A) => Effect.Effect<boolean, E2, R2>\n  ): <In, L extends In, E, R>(self: Sink<A, In, L, E, R>) => Sink<Option.Option<A>, In, L, E2 | E, R2 | R>\n  /**\n   * Creates a sink that produces values until one verifies the predicate `f`.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, In, L extends In, E, R, E2, R2>(\n    self: Sink<A, In, L, E, R>,\n    f: (a: A) => Effect.Effect<boolean, E2, R2>\n  ): Sink<Option.Option<A>, In, L, E | E2, R | R2>\n} = internal.findEffect as any\n\n/**\n * A sink that folds its inputs with the provided function, termination\n * predicate and initial state.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const fold: <S, In>(s: S, contFn: Predicate<S>, f: (s: S, input: In) => S) => Sink<S, In, In> = internal.fold\n\n/**\n * Folds over the result of the sink\n *\n * @since 2.0.0\n * @category folding\n */\nexport const foldSink: {\n  /**\n   * Folds over the result of the sink\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <E, A1, In, In1 extends In, L1, E1, R1, A, A2, In2 extends In, L2, E2, R2>(\n    options: {\n      readonly onFailure: (err: E) => Sink<A1, In1, L1, E1, R1>\n      readonly onSuccess: (a: A) => Sink<A2, In2, L2, E2, R2>\n    }\n  ): <L, R>(self: Sink<A, In, L, E, R>) => Sink<A1 | A2, In1 & In2, L1 | L2, E1 | E2, R1 | R2 | R>\n  /**\n   * Folds over the result of the sink\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <A, In, L, E, R, A1, In1 extends In, L1, E1, R1, A2, In2 extends In, L2, E2, R2>(\n    self: Sink<A, In, L, E, R>,\n    options: {\n      readonly onFailure: (err: E) => Sink<A1, In1, L1, E1, R1>\n      readonly onSuccess: (a: A) => Sink<A2, In2, L2, E2, R2>\n    }\n  ): Sink<A1 | A2, In1 & In2, L1 | L2, E1 | E2, R | R1 | R2>\n} = internal.foldSink\n\n/**\n * A sink that folds its input chunks with the provided function, termination\n * predicate and initial state. `contFn` condition is checked only for the\n * initial value and at the end of processing of each chunk. `f` and `contFn`\n * must preserve chunking-invariance.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const foldChunks: <S, In>(\n  s: S,\n  contFn: Predicate<S>,\n  f: (s: S, chunk: Chunk.Chunk<In>) => S\n) => Sink<S, In> = internal.foldChunks\n\n/**\n * A sink that effectfully folds its input chunks with the provided function,\n * termination predicate and initial state. `contFn` condition is checked only\n * for the initial value and at the end of processing of each chunk. `f` and\n * `contFn` must preserve chunking-invariance.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const foldChunksEffect: <S, In, E, R>(\n  s: S,\n  contFn: Predicate<S>,\n  f: (s: S, chunk: Chunk.Chunk<In>) => Effect.Effect<S, E, R>\n) => Sink<S, In, In, E, R> = internal.foldChunksEffect\n\n/**\n * A sink that effectfully folds its inputs with the provided function,\n * termination predicate and initial state.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const foldEffect: <S, In, E, R>(\n  s: S,\n  contFn: Predicate<S>,\n  f: (s: S, input: In) => Effect.Effect<S, E, R>\n) => Sink<S, In, In, E, R> = internal.foldEffect\n\n/**\n * A sink that folds its inputs with the provided function and initial state.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const foldLeft: <S, In>(s: S, f: (s: S, input: In) => S) => Sink<S, In> = internal.foldLeft\n\n/**\n * A sink that folds its input chunks with the provided function and initial\n * state. `f` must preserve chunking-invariance.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const foldLeftChunks: <S, In>(s: S, f: (s: S, chunk: Chunk.Chunk<In>) => S) => Sink<S, In> =\n  internal.foldLeftChunks\n\n/**\n * A sink that effectfully folds its input chunks with the provided function\n * and initial state. `f` must preserve chunking-invariance.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const foldLeftChunksEffect: <S, In, E, R>(\n  s: S,\n  f: (s: S, chunk: Chunk.Chunk<In>) => Effect.Effect<S, E, R>\n) => Sink<S, In, never, E, R> = internal.foldLeftChunksEffect\n\n/**\n * A sink that effectfully folds its inputs with the provided function and\n * initial state.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const foldLeftEffect: <S, In, E, R>(\n  s: S,\n  f: (s: S, input: In) => Effect.Effect<S, E, R>\n) => Sink<S, In, In, E, R> = internal.foldLeftEffect\n\n/**\n * Creates a sink that folds elements of type `In` into a structure of type\n * `S` until `max` elements have been folded.\n *\n * Like `Sink.foldWeighted`, but with a constant cost function of `1`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const foldUntil: <In, S>(s: S, max: number, f: (s: S, input: In) => S) => Sink<S, In, In> = internal.foldUntil\n\n/**\n * Creates a sink that effectfully folds elements of type `In` into a\n * structure of type `S` until `max` elements have been folded.\n *\n * Like `Sink.foldWeightedEffect` but with a constant cost function of `1`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const foldUntilEffect: <S, In, E, R>(\n  s: S,\n  max: number,\n  f: (s: S, input: In) => Effect.Effect<S, E, R>\n) => Sink<S, In, In, E, R> = internal.foldUntilEffect\n\n/**\n * Creates a sink that folds elements of type `In` into a structure of type\n * `S`, until `max` worth of elements (determined by the `costFn`) have been\n * folded.\n *\n * @note\n *   Elements that have an individual cost larger than `max` will force the\n *   sink to cross the `max` cost. See `Sink.foldWeightedDecompose` for a\n *   variant that can handle these cases.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const foldWeighted: <S, In>(\n  options: {\n    readonly initial: S\n    readonly maxCost: number\n    readonly cost: (s: S, input: In) => number\n    readonly body: (s: S, input: In) => S\n  }\n) => Sink<S, In, In> = internal.foldWeighted\n\n/**\n * Creates a sink that folds elements of type `In` into a structure of type\n * `S`, until `max` worth of elements (determined by the `costFn`) have been\n * folded.\n *\n * The `decompose` function will be used for decomposing elements that cause\n * an `S` aggregate to cross `max` into smaller elements. For example:\n *\n * ```ts\n * pipe(\n *   Stream.make(1, 5, 1),\n *   Stream.transduce(\n *     Sink.foldWeightedDecompose(\n *       Chunk.empty<number>(),\n *       4,\n *       (n: number) => n,\n *       (n: number) => Chunk.make(n - 1, 1),\n *       (acc, el) => pipe(acc, Chunk.append(el))\n *     )\n *   ),\n *   Stream.runCollect\n * )\n * ```\n *\n * The stream would emit the elements `Chunk(1), Chunk(4), Chunk(1, 1)`.\n *\n * Be vigilant with this function, it has to generate \"simpler\" values or the\n * fold may never end. A value is considered indivisible if `decompose` yields\n * the empty chunk or a single-valued chunk. In these cases, there is no other\n * choice than to yield a value that will cross the threshold.\n *\n * `Sink.foldWeightedDecomposeEffect` allows the decompose function to return an\n * effect value, and consequently it allows the sink to fail.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const foldWeightedDecompose: <S, In>(\n  options: {\n    readonly initial: S\n    readonly maxCost: number\n    readonly cost: (s: S, input: In) => number\n    readonly decompose: (input: In) => Chunk.Chunk<In>\n    readonly body: (s: S, input: In) => S\n  }\n) => Sink<S, In, In> = internal.foldWeightedDecompose\n\n/**\n * Creates a sink that effectfully folds elements of type `In` into a\n * structure of type `S`, until `max` worth of elements (determined by the\n * `costFn`) have been folded.\n *\n * The `decompose` function will be used for decomposing elements that cause\n * an `S` aggregate to cross `max` into smaller elements. Be vigilant with\n * this function, it has to generate \"simpler\" values or the fold may never\n * end. A value is considered indivisible if `decompose` yields the empty\n * chunk or a single-valued chunk. In these cases, there is no other choice\n * than to yield a value that will cross the threshold.\n *\n * See `Sink.foldWeightedDecompose` for an example.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const foldWeightedDecomposeEffect: <S, In, E, R, E2, R2, E3, R3>(\n  options: {\n    readonly initial: S\n    readonly maxCost: number\n    readonly cost: (s: S, input: In) => Effect.Effect<number, E, R>\n    readonly decompose: (input: In) => Effect.Effect<Chunk.Chunk<In>, E2, R2>\n    readonly body: (s: S, input: In) => Effect.Effect<S, E3, R3>\n  }\n) => Sink<S, In, In, E | E2 | E3, R | R2 | R3> = internal.foldWeightedDecomposeEffect\n\n/**\n * Creates a sink that effectfully folds elements of type `In` into a\n * structure of type `S`, until `max` worth of elements (determined by the\n * `costFn`) have been folded.\n *\n * @note\n *   Elements that have an individual cost larger than `max` will force the\n *   sink to cross the `max` cost. See `Sink.foldWeightedDecomposeEffect` for\n *   a variant that can handle these cases.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const foldWeightedEffect: <S, In, E, R, E2, R2>(\n  options: {\n    readonly initial: S\n    readonly maxCost: number\n    readonly cost: (s: S, input: In) => Effect.Effect<number, E, R>\n    readonly body: (s: S, input: In) => Effect.Effect<S, E2, R2>\n  }\n) => Sink<S, In, In, E | E2, R | R2> = internal.foldWeightedEffect\n\n/**\n * A sink that executes the provided effectful function for every element fed\n * to it.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const forEach: <In, X, E, R>(f: (input: In) => Effect.Effect<X, E, R>) => Sink<void, In, never, E, R> =\n  internal.forEach\n\n/**\n * A sink that executes the provided effectful function for every chunk fed to\n * it.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const forEachChunk: <In, X, E, R>(\n  f: (input: Chunk.Chunk<In>) => Effect.Effect<X, E, R>\n) => Sink<void, In, never, E, R> = internal.forEachChunk\n\n/**\n * A sink that executes the provided effectful function for every chunk fed to\n * it until `f` evaluates to `false`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const forEachChunkWhile: <In, E, R>(\n  f: (input: Chunk.Chunk<In>) => Effect.Effect<boolean, E, R>\n) => Sink<void, In, In, E, R> = internal.forEachChunkWhile\n\n/**\n * A sink that executes the provided effectful function for every element fed\n * to it until `f` evaluates to `false`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const forEachWhile: <In, E, R>(f: (input: In) => Effect.Effect<boolean, E, R>) => Sink<void, In, In, E, R> =\n  internal.forEachWhile\n\n/**\n * Runs this sink until it yields a result, then uses that result to create\n * another sink from the provided function which will continue to run until it\n * yields a result.\n *\n * This function essentially runs sinks in sequence.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  /**\n   * Runs this sink until it yields a result, then uses that result to create\n   * another sink from the provided function which will continue to run until it\n   * yields a result.\n   *\n   * This function essentially runs sinks in sequence.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, A1, In, In1 extends In, L1, E1, R1>(\n    f: (a: A) => Sink<A1, In1, L1, E1, R1>\n  ): <L, E, R>(self: Sink<A, In, L, E, R>) => Sink<A1, In & In1, L1 | L, E1 | E, R1 | R>\n  /**\n   * Runs this sink until it yields a result, then uses that result to create\n   * another sink from the provided function which will continue to run until it\n   * yields a result.\n   *\n   * This function essentially runs sinks in sequence.\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <A, In, L, E, R, A1, In1 extends In, L1, E1, R1>(\n    self: Sink<A, In, L, E, R>,\n    f: (a: A) => Sink<A1, In1, L1, E1, R1>\n  ): Sink<A1, In & In1, L | L1, E | E1, R | R1>\n} = internal.flatMap\n\n/**\n * Creates a sink from a `Channel`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromChannel: <L, In, E, A, R>(\n  channel: Channel.Channel<Chunk.Chunk<L>, Chunk.Chunk<In>, E, never, A, unknown, R>\n) => Sink<A, In, L, E, R> = internal.fromChannel\n\n/**\n * Creates a `Channel` from a Sink.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const toChannel: <A, In, L, E, R>(\n  self: Sink<A, In, L, E, R>\n) => Channel.Channel<Chunk.Chunk<L>, Chunk.Chunk<In>, E, never, A, unknown, R> = internal.toChannel\n\n/**\n * Creates a single-value sink produced from an effect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromEffect: <A, E, R>(effect: Effect.Effect<A, E, R>) => Sink<A, unknown, never, E, R> =\n  internal.fromEffect\n\n/**\n * Create a sink which publishes each element to the specified `PubSub`.\n *\n * @param shutdown If `true`, the `PubSub` will be shutdown after the sink is evaluated (defaults to `false`)\n * @since 2.0.0\n * @category constructors\n */\nexport const fromPubSub: <In>(\n  pubsub: PubSub.PubSub<In>,\n  options?: {\n    readonly shutdown?: boolean | undefined\n  }\n) => Sink<void, In> = internal.fromPubSub\n\n/**\n * Creates a sink from a chunk processing function.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromPush: <In, L0, R0, L, R>(\n  push: Effect.Effect<\n    (_: Option.Option<Chunk.Chunk<In>>) => Effect.Effect<void, readonly [Either.Either<R0, L0>, Chunk.Chunk<L>], R>,\n    never,\n    R\n  >\n) => Sink<R0, In, L, L0, Exclude<R, Scope.Scope>> = internal.fromPush\n\n/**\n * Create a sink which enqueues each element into the specified queue.\n *\n * @param shutdown If `true`, the queue will be shutdown after the sink is evaluated (defaults to `false`)\n * @since 2.0.0\n * @category constructors\n */\nexport const fromQueue: <In>(\n  queue: Queue.Enqueue<In>,\n  options?: {\n    readonly shutdown?: boolean | undefined\n  }\n) => Sink<void, In> = internal.fromQueue\n\n/**\n * Creates a sink containing the first value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const head: <In>() => Sink<Option.Option<In>, In, In> = internal.head\n\n/**\n * Drains the remaining elements from the stream after the sink finishes\n *\n * @since 2.0.0\n * @category utils\n */\nexport const ignoreLeftover: <A, In, L, E, R>(self: Sink<A, In, L, E, R>) => Sink<A, In, never, E, R> =\n  internal.ignoreLeftover\n\n/**\n * Creates a sink containing the last value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const last: <In>() => Sink<Option.Option<In>, In, In> = internal.last\n\n/**\n * Creates a sink that does not consume any input but provides the given chunk\n * as its leftovers\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const leftover: <L>(chunk: Chunk.Chunk<L>) => Sink<void, unknown, L> = internal.leftover\n\n/**\n * Transforms this sink's result.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  /**\n   * Transforms this sink's result.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, A2>(f: (a: A) => A2): <In, L, E, R>(self: Sink<A, In, L, E, R>) => Sink<A2, In, L, E, R>\n  /**\n   * Transforms this sink's result.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, In, L, E, R, A2>(self: Sink<A, In, L, E, R>, f: (a: A) => A2): Sink<A2, In, L, E, R>\n} = internal.map\n\n/**\n * Effectfully transforms this sink's result.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapEffect: {\n  /**\n   * Effectfully transforms this sink's result.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, A2, E2, R2>(\n    f: (a: A) => Effect.Effect<A2, E2, R2>\n  ): <In, L, E, R>(self: Sink<A, In, L, E, R>) => Sink<A2, In, L, E2 | E, R2 | R>\n  /**\n   * Effectfully transforms this sink's result.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, In, L, E, R, A2, E2, R2>(\n    self: Sink<A, In, L, E, R>,\n    f: (a: A) => Effect.Effect<A2, E2, R2>\n  ): Sink<A2, In, L, E | E2, R | R2>\n} = internal.mapEffect\n\n/**\n * Transforms the errors emitted by this sink using `f`.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapError: {\n  /**\n   * Transforms the errors emitted by this sink using `f`.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <E, E2>(f: (error: E) => E2): <A, In, L, R>(self: Sink<A, In, L, E, R>) => Sink<A, In, L, E2, R>\n  /**\n   * Transforms the errors emitted by this sink using `f`.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, In, L, E, R, E2>(self: Sink<A, In, L, E, R>, f: (error: E) => E2): Sink<A, In, L, E2, R>\n} = internal.mapError\n\n/**\n * Transforms the leftovers emitted by this sink using `f`.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapLeftover: {\n  /**\n   * Transforms the leftovers emitted by this sink using `f`.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <L, L2>(f: (leftover: L) => L2): <A, In, E, R>(self: Sink<A, In, L, E, R>) => Sink<A, In, L2, E, R>\n  /**\n   * Transforms the leftovers emitted by this sink using `f`.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <A, In, L, E, R, L2>(self: Sink<A, In, L, E, R>, f: (leftover: L) => L2): Sink<A, In, L2, E, R>\n} = internal.mapLeftover\n\n/**\n * Creates a sink which transforms it's inputs into a string.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const mkString: Sink<string, unknown> = internal.mkString\n\n/**\n * Creates a sink which never terminates.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const never: Sink<never, unknown> = internal.never\n\n/**\n * Switch to another sink in case of failure\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const orElse: {\n  /**\n   * Switch to another sink in case of failure\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A2, In2, L2, E2, R2>(\n    that: LazyArg<Sink<A2, In2, L2, E2, R2>>\n  ): <A, In, L, E, R>(self: Sink<A, In, L, E, R>) => Sink<A2 | A, In & In2, L2 | L, E2 | E, R2 | R>\n  /**\n   * Switch to another sink in case of failure\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, In, L, E, R, A2, In2, L2, E2, R2>(\n    self: Sink<A, In, L, E, R>,\n    that: LazyArg<Sink<A2, In2, L2, E2, R2>>\n  ): Sink<A | A2, In & In2, L | L2, E | E2, R | R2>\n} = internal.orElse\n\n/**\n * Provides the sink with its required context, which eliminates its\n * dependency on `R`.\n *\n * @since 2.0.0\n * @category context\n */\nexport const provideContext: {\n  /**\n   * Provides the sink with its required context, which eliminates its\n   * dependency on `R`.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <R>(context: Context.Context<R>): <A, In, L, E>(self: Sink<A, In, L, E, R>) => Sink<A, In, L, E, never>\n  /**\n   * Provides the sink with its required context, which eliminates its\n   * dependency on `R`.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <A, In, L, E, R>(self: Sink<A, In, L, E, R>, context: Context.Context<R>): Sink<A, In, L, E, never>\n} = internal.provideContext\n\n/**\n * Runs both sinks in parallel on the input, , returning the result or the\n * error from the one that finishes first.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const race: {\n  /**\n   * Runs both sinks in parallel on the input, , returning the result or the\n   * error from the one that finishes first.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <R1, E1, In1, L1, A1>(\n    that: Sink<A1, In1, L1, E1, R1>\n  ): <A, In, L, E, R>(self: Sink<A, In, L, E, R>) => Sink<A1 | A, In & In1, L1 | L, E1 | E, R1 | R>\n  /**\n   * Runs both sinks in parallel on the input, , returning the result or the\n   * error from the one that finishes first.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, In, L, E, R, A1, In1, L1, E1, R1>(\n    self: Sink<A, In, L, E, R>,\n    that: Sink<A1, In1, L1, E1, R1>\n  ): Sink<A | A1, In & In1, L | L1, E | E1, R | R1>\n} = internal.race\n\n/**\n * Runs both sinks in parallel on the input, returning the result or the error\n * from the one that finishes first.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const raceBoth: {\n  /**\n   * Runs both sinks in parallel on the input, returning the result or the error\n   * from the one that finishes first.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A1, In1, L1, E1, R1>(\n    that: Sink<A1, In1, L1, E1, R1>,\n    options?: { readonly capacity?: number | undefined } | undefined\n  ): <A, In, L, E, R>(self: Sink<A, In, L, E, R>) => Sink<Either.Either<A1, A>, In & In1, L1 | L, E1 | E, R1 | R>\n  /**\n   * Runs both sinks in parallel on the input, returning the result or the error\n   * from the one that finishes first.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, In, L, E, R, A1, In1, L1, E1, R1>(\n    self: Sink<A, In, L, E, R>,\n    that: Sink<A1, In1, L1, E1, R1>,\n    options?: { readonly capacity?: number | undefined } | undefined\n  ): Sink<Either.Either<A1, A>, In & In1, L | L1, E | E1, R | R1>\n} = internal.raceBoth\n\n/**\n * Runs both sinks in parallel on the input, using the specified merge\n * function as soon as one result or the other has been computed.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const raceWith: {\n  /**\n   * Runs both sinks in parallel on the input, using the specified merge\n   * function as soon as one result or the other has been computed.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A2, In2, L2, E2, R2, A, E, A3, A4>(\n    options: {\n      readonly other: Sink<A2, In2, L2, E2, R2>\n      readonly onSelfDone: (exit: Exit.Exit<A, E>) => MergeDecision.MergeDecision<R2, E2, A2, E2 | E, A3>\n      readonly onOtherDone: (exit: Exit.Exit<A2, E2>) => MergeDecision.MergeDecision<R2, E, A, E2 | E, A4>\n      readonly capacity?: number | undefined\n    }\n  ): <In, L, R>(self: Sink<A, In, L, E, R>) => Sink<A3 | A4, In & In2, L2 | L, E2 | E, R2 | R>\n  /**\n   * Runs both sinks in parallel on the input, using the specified merge\n   * function as soon as one result or the other has been computed.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, In, L, E, R, A2, In2, L2, E2, R2, A3, A4>(\n    self: Sink<A, In, L, E, R>,\n    options: {\n      readonly other: Sink<A2, In2, L2, E2, R2>\n      readonly onSelfDone: (exit: Exit.Exit<A, E>) => MergeDecision.MergeDecision<R2, E2, A2, E | E2, A3>\n      readonly onOtherDone: (exit: Exit.Exit<A2, E2>) => MergeDecision.MergeDecision<R2, E, A, E | E2, A4>\n      readonly capacity?: number | undefined\n    }\n  ): Sink<A3 | A4, In & In2, L | L2, E | E2, R | R2>\n} = internal.raceWith\n\n/**\n * @since 2.0.0\n * @category error handling\n */\nexport const refineOrDie: {\n  /**\n   * @since 2.0.0\n   * @category error handling\n   */\n  <E, E2>(pf: (error: E) => Option.Option<E2>): <A, In, L, R>(self: Sink<A, In, L, E, R>) => Sink<A, In, L, E2, R>\n  /**\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, In, L, E, R, E2>(self: Sink<A, In, L, E, R>, pf: (error: E) => Option.Option<E2>): Sink<A, In, L, E2, R>\n} = internal.refineOrDie\n\n/**\n * @since 2.0.0\n * @category error handling\n */\nexport const refineOrDieWith: {\n  /**\n   * @since 2.0.0\n   * @category error handling\n   */\n  <E, E2>(\n    pf: (error: E) => Option.Option<E2>,\n    f: (error: E) => unknown\n  ): <A, In, L, R>(self: Sink<A, In, L, E, R>) => Sink<A, In, L, E2, R>\n  /**\n   * @since 2.0.0\n   * @category error handling\n   */\n  <A, In, L, E, R, E2>(\n    self: Sink<A, In, L, E, R>,\n    pf: (error: E) => Option.Option<E2>,\n    f: (error: E) => unknown\n  ): Sink<A, In, L, E2, R>\n} = internal.refineOrDieWith\n\n/**\n * A sink that returns whether an element satisfies the specified predicate.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const some: <In>(predicate: Predicate<In>) => Sink<boolean, In, In> = internal.some\n\n/**\n * Splits the sink on the specified predicate, returning a new sink that\n * consumes elements until an element after the first satisfies the specified\n * predicate.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const splitWhere: {\n  /**\n   * Splits the sink on the specified predicate, returning a new sink that\n   * consumes elements until an element after the first satisfies the specified\n   * predicate.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <In>(f: Predicate<In>): <A, L extends In, E, R>(self: Sink<A, In, L, E, R>) => Sink<A, In, In, E, R>\n  /**\n   * Splits the sink on the specified predicate, returning a new sink that\n   * consumes elements until an element after the first satisfies the specified\n   * predicate.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, In, L extends In, E, R>(self: Sink<A, In, L, E, R>, f: Predicate<In>): Sink<A, In, In, E, R>\n} = internal.splitWhere\n\n/**\n * A sink that immediately ends with the specified value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeed: <A>(a: A) => Sink<A, unknown> = internal.succeed\n\n/**\n * A sink that sums incoming numeric values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const sum: Sink<number, number> = internal.sum\n\n/**\n * Summarize a sink by running an effect when the sink starts and again when\n * it completes.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const summarized: {\n  /**\n   * Summarize a sink by running an effect when the sink starts and again when\n   * it completes.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A2, E2, R2, A3>(\n    summary: Effect.Effect<A2, E2, R2>,\n    f: (start: A2, end: A2) => A3\n  ): <A, In, L, E, R>(self: Sink<A, In, L, E, R>) => Sink<[A, A3], In, L, E2 | E, R2 | R>\n  /**\n   * Summarize a sink by running an effect when the sink starts and again when\n   * it completes.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <A, In, L, E, R, A2, E2, R2, A3>(\n    self: Sink<A, In, L, E, R>,\n    summary: Effect.Effect<A2, E2, R2>,\n    f: (start: A2, end: A2) => A3\n  ): Sink<[A, A3], In, L, E | E2, R | R2>\n} = internal.summarized\n\n/**\n * Returns a lazily constructed sink that may require effects for its\n * creation.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const suspend: <A, In, L, E, R>(evaluate: LazyArg<Sink<A, In, L, E, R>>) => Sink<A, In, L, E, R> =\n  internal.suspend\n\n/**\n * A sink that immediately ends with the specified lazy value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const sync: <A>(evaluate: LazyArg<A>) => Sink<A, unknown> = internal.sync\n\n/**\n * A sink that takes the specified number of values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const take: <In>(n: number) => Sink<Chunk.Chunk<In>, In, In> = internal.take\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const timed: Sink<Duration.Duration, unknown> = internal.timed\n\n/**\n * Creates a sink produced from an effect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const unwrap: <A, In, L, E2, R2, E, R>(\n  effect: Effect.Effect<Sink<A, In, L, E2, R2>, E, R>\n) => Sink<A, In, L, E2 | E, R2 | R> = internal.unwrap\n\n/**\n * Creates a sink produced from a scoped effect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const unwrapScoped: <A, In, L, E, R>(\n  effect: Effect.Effect<Sink<A, In, L, E, R>, E, R>\n) => Sink<A, In, L, E, Exclude<R, Scope.Scope>> = internal.unwrapScoped\n\n/**\n * Returns the sink that executes this one and times its execution.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const withDuration: <A, In, L, E, R>(\n  self: Sink<A, In, L, E, R>\n) => Sink<[A, Duration.Duration], In, L, E, R> = internal.withDuration\n\n/**\n * Feeds inputs to this sink until it yields a result, then switches over to\n * the provided sink until it yields a result, finally combining the two\n * results into a tuple.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zip: {\n  /**\n   * Feeds inputs to this sink until it yields a result, then switches over to\n   * the provided sink until it yields a result, finally combining the two\n   * results into a tuple.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, In, In2 extends In, L2, E2, R2>(\n    that: Sink<A2, In2, L2, E2, R2>,\n    options?: { readonly concurrent?: boolean | undefined } | undefined\n  ): <A, L, E, R>(self: Sink<A, In, L, E, R>) => Sink<[A, A2], In & In2, L2 | L, E2 | E, R2 | R>\n  /**\n   * Feeds inputs to this sink until it yields a result, then switches over to\n   * the provided sink until it yields a result, finally combining the two\n   * results into a tuple.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, In, L, E, R, A2, In2 extends In, L2, E2, R2>(\n    self: Sink<A, In, L, E, R>,\n    that: Sink<A2, In2, L2, E2, R2>,\n    options?: { readonly concurrent?: boolean | undefined } | undefined\n  ): Sink<[A, A2], In & In2, L | L2, E | E2, R | R2>\n} = internal.zip\n\n/**\n * Like `Sink.zip` but keeps only the result from this sink.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipLeft: {\n  /**\n   * Like `Sink.zip` but keeps only the result from this sink.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, In, In2 extends In, L2, E2, R2>(\n    that: Sink<A2, In2, L2, E2, R2>,\n    options?: { readonly concurrent?: boolean | undefined } | undefined\n  ): <A, L, E, R>(self: Sink<A, In, L, E, R>) => Sink<A, In & In2, L2 | L, E2 | E, R2 | R>\n  /**\n   * Like `Sink.zip` but keeps only the result from this sink.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, In, L, E, R, A2, In2 extends In, L2, E2, R2>(\n    self: Sink<A, In, L, E, R>,\n    that: Sink<A2, In2, L2, E2, R2>,\n    options?: { readonly concurrent?: boolean | undefined } | undefined\n  ): Sink<A, In & In2, L | L2, E | E2, R | R2>\n} = internal.zipLeft\n\n/**\n * Like `Sink.zip` but keeps only the result from `that` sink.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipRight: {\n  /**\n   * Like `Sink.zip` but keeps only the result from `that` sink.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, In, In2 extends In, L2, E2, R2>(\n    that: Sink<A2, In2, L2, E2, R2>,\n    options?: { readonly concurrent?: boolean | undefined } | undefined\n  ): <A, L, E, R>(self: Sink<A, In, L, E, R>) => Sink<A2, In & In2, L2 | L, E2 | E, R2 | R>\n  /**\n   * Like `Sink.zip` but keeps only the result from `that` sink.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, In, L, E, R, A2, In2 extends In, L2, E2, R2>(\n    self: Sink<A, In, L, E, R>,\n    that: Sink<A2, In2, L2, E2, R2>,\n    options?: { readonly concurrent?: boolean | undefined } | undefined\n  ): Sink<A2, In & In2, L | L2, E | E2, R | R2>\n} = internal.zipRight\n\n/**\n * Feeds inputs to this sink until it yields a result, then switches over to\n * the provided sink until it yields a result, finally combining the two\n * results with `f`.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWith: {\n  /**\n   * Feeds inputs to this sink until it yields a result, then switches over to\n   * the provided sink until it yields a result, finally combining the two\n   * results with `f`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A2, In, In2 extends In, L2, E2, R2, A, A3>(\n    that: Sink<A2, In2, L2, E2, R2>,\n    f: (a: A, a2: A2) => A3,\n    options?: { readonly concurrent?: boolean | undefined } | undefined\n  ): <L, E, R>(self: Sink<A, In, L, E, R>) => Sink<A3, In & In2, L2 | L, E2 | E, R2 | R>\n  /**\n   * Feeds inputs to this sink until it yields a result, then switches over to\n   * the provided sink until it yields a result, finally combining the two\n   * results with `f`.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <A, In, L, E, R, A2, In2 extends In, L2, E2, R2, A3>(\n    self: Sink<A, In, L, E, R>,\n    that: Sink<A2, In2, L2, E2, R2>,\n    f: (a: A, a2: A2) => A3,\n    options?: { readonly concurrent?: boolean | undefined } | undefined\n  ): Sink<A3, In & In2, L | L2, E | E2, R | R2>\n} = internal.zipWith\n"],"names":["internal","SinkTypeId","as","collectAll","collectAllN","collectAllFrom","collectAllToMap","collectAllToMapN","collectAllToSet","collectAllToSetN","collectAllUntil","collectAllUntilEffect","collectAllWhile","collectAllWhileEffect","collectAllWhileWith","collectLeftover","mapInput","mapInputEffect","mapInputChunks","mapInputChunksEffect","count","die","dieMessage","dieSync","dimap","dimapEffect","dimapChunks","dimapChunksEffect","drain","drop","dropUntil","dropUntilEffect","dropWhile","dropWhileEffect","ensuring","ensuringWith","context","contextWith","contextWithEffect","contextWithSink","every","fail","failSync","failCause","failCauseSync","filterInput","filterInputEffect","findEffect","fold","foldSink","foldChunks","foldChunksEffect","foldEffect","foldLeft","foldLeftChunks","foldLeftChunksEffect","foldLeftEffect","foldUntil","foldUntilEffect","foldWeighted","foldWeightedDecompose","foldWeightedDecomposeEffect","foldWeightedEffect","forEach","forEachChunk","forEachChunkWhile","forEachWhile","flatMap","fromChannel","toChannel","fromEffect","fromPubSub","fromPush","fromQueue","head","ignoreLeftover","last","leftover","map","mapEffect","mapError","mapLeftover","mkString","never","orElse","provideContext","race","raceBoth","raceWith","refineOrDie","refineOrDieWith","some","splitWhere","succeed","sum","summarized","suspend","sync","take","timed","unwrap","unwrapScoped","withDuration","zip","zipLeft","zipRight","zipWith"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 18385, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 18391, "column": 0}, "map": {"version":3,"file":"Channel.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Channel.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Cause from \"./Cause.js\"\nimport type * as ChildExecutorDecision from \"./ChildExecutorDecision.js\"\nimport type * as Chunk from \"./Chunk.js\"\nimport type * as Context from \"./Context.js\"\nimport type * as Deferred from \"./Deferred.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Either from \"./Either.js\"\nimport type * as Exit from \"./Exit.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport * as channel from \"./internal/channel.js\"\nimport * as core from \"./internal/core-stream.js\"\nimport * as sink from \"./internal/sink.js\"\nimport * as stream from \"./internal/stream.js\"\nimport type * as Layer from \"./Layer.js\"\nimport type * as MergeDecision from \"./MergeDecision.js\"\nimport type * as MergeStrategy from \"./MergeStrategy.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate } from \"./Predicate.js\"\nimport type * as PubSub from \"./PubSub.js\"\nimport type * as Queue from \"./Queue.js\"\nimport type * as Ref from \"./Ref.js\"\nimport type * as Scope from \"./Scope.js\"\nimport type * as SingleProducerAsyncInput from \"./SingleProducerAsyncInput.js\"\nimport type * as Sink from \"./Sink.js\"\nimport type * as Stream from \"./Stream.js\"\nimport type * as Tracer from \"./Tracer.js\"\nimport type * as Types from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\nimport type * as UpstreamPullRequest from \"./UpstreamPullRequest.js\"\nimport type * as UpstreamPullStrategy from \"./UpstreamPullStrategy.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const ChannelTypeId: unique symbol = core.ChannelTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type ChannelTypeId = typeof ChannelTypeId\n\n/**\n * A `Channel` is a nexus of I/O operations, which supports both reading and\n * writing. A channel may read values of type `InElem` and write values of type\n * `OutElem`. When the channel finishes, it yields a value of type `OutDone`. A\n * channel may fail with a value of type `OutErr`.\n *\n * Channels are the foundation of Streams: both streams and sinks are built on\n * channels. Most users shouldn't have to use channels directly, as streams and\n * sinks are much more convenient and cover all common use cases. However, when\n * adding new stream and sink operators, or doing something highly specialized,\n * it may be useful to use channels directly.\n *\n * Channels compose in a variety of ways:\n *\n *  - **Piping**: One channel can be piped to another channel, assuming the\n *    input type of the second is the same as the output type of the first.\n *  - **Sequencing**: The terminal value of one channel can be used to create\n *    another channel, and both the first channel and the function that makes\n *    the second channel can be composed into a channel.\n *  - **Concatenating**: The output of one channel can be used to create other\n *    channels, which are all concatenated together. The first channel and the\n *    function that makes the other channels can be composed into a channel.\n *\n * @since 2.0.0\n * @category models\n */\n// export interface Channel<out Env, in InErr, in InElem, in InDone, out OutErr, out OutElem, out OutDone>\nexport interface Channel<\n  out OutElem,\n  in InElem = unknown,\n  out OutErr = never,\n  in InErr = unknown,\n  out OutDone = void,\n  in InDone = unknown,\n  out Env = never\n> extends\n  Channel.Variance<\n    OutElem,\n    InElem,\n    OutErr,\n    InErr,\n    OutDone,\n    InDone,\n    Env\n  >,\n  Pipeable\n{\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: ChannelUnify<this>\n  [Unify.ignoreSymbol]?: ChannelUnifyIgnore\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface ChannelUnify<A extends { [Unify.typeSymbol]?: any }> extends Effect.EffectUnify<A> {\n  Channel?: () => A[Unify.typeSymbol] extends\n    | Channel<\n      infer OutElem,\n      infer InElem,\n      infer OutErr,\n      infer InErr,\n      infer OutDone,\n      infer InDone,\n      infer Env\n    >\n    | infer _ ? Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n    : never\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface ChannelUnifyIgnore extends Effect.EffectUnifyIgnore {\n  Channel?: true\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\ndeclare module \"./Effect.js\" {\n  interface Effect<A, E, R> extends Channel<never, unknown, E, unknown, A, unknown, R> {}\n  interface EffectUnifyIgnore {\n    Channel?: true\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Channel {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<out OutElem, in InElem, out OutErr, in InErr, out OutDone, in InDone, out Env> {\n    readonly [ChannelTypeId]: VarianceStruct<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  }\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface VarianceStruct<out OutElem, in InElem, out OutErr, in InErr, out OutDone, in InDone, out Env> {\n    _Env: Types.Covariant<Env>\n    _InErr: Types.Contravariant<InErr>\n    _InElem: Types.Contravariant<InElem>\n    _InDone: Types.Contravariant<InDone>\n    _OutErr: Types.Covariant<OutErr>\n    _OutElem: Types.Covariant<OutElem>\n    _OutDone: Types.Covariant<OutDone>\n  }\n}\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const ChannelExceptionTypeId: unique symbol = channel.ChannelExceptionTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type ChannelExceptionTypeId = typeof ChannelExceptionTypeId\n\n/**\n * Represents a generic checked exception which occurs when a `Channel` is\n * executed.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface ChannelException<out E> {\n  readonly _tag: \"ChannelException\"\n  readonly [ChannelExceptionTypeId]: ChannelExceptionTypeId\n  readonly error: E\n}\n\n/**\n * @since 3.5.4\n * @category refinements\n */\nexport const isChannel: (u: unknown) => u is Channel<\n  unknown,\n  unknown,\n  unknown,\n  unknown,\n  unknown,\n  unknown,\n  unknown\n> = core.isChannel\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const acquireUseRelease: <Acquired, OutErr, Env, OutElem1, InElem, InErr, OutDone, InDone>(\n  acquire: Effect.Effect<Acquired, OutErr, Env>,\n  use: (a: Acquired) => Channel<OutElem1, InElem, OutErr, InErr, OutDone, InDone, Env>,\n  release: (a: Acquired, exit: Exit.Exit<OutDone, OutErr>) => Effect.Effect<any, never, Env>\n) => Channel<OutElem1, InElem, OutErr, InErr, OutDone, InDone, Env> = channel.acquireUseRelease\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const acquireReleaseOut: {\n  /**\n   * @since 2.0.0\n   * @category constructors\n   */\n  <Z, R2>(\n    release: (z: Z, e: Exit.Exit<unknown, unknown>) => Effect.Effect<unknown, never, R2>\n  ): <E, R>(self: Effect.Effect<Z, E, R>) => Channel<Z, unknown, E, unknown, void, unknown, R2 | R>\n  /**\n   * @since 2.0.0\n   * @category constructors\n   */\n  <Z, E, R, R2>(\n    self: Effect.Effect<Z, E, R>,\n    release: (z: Z, e: Exit.Exit<unknown, unknown>) => Effect.Effect<unknown, never, R2>\n  ): Channel<Z, unknown, E, unknown, void, unknown, R | R2>\n} = core.acquireReleaseOut\n\n/**\n * Returns a new channel that is the same as this one, except the terminal\n * value of the channel is the specified constant value.\n *\n * This method produces the same result as mapping this channel to the\n * specified constant value.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const as: {\n  /**\n   * Returns a new channel that is the same as this one, except the terminal\n   * value of the channel is the specified constant value.\n   *\n   * This method produces the same result as mapping this channel to the\n   * specified constant value.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <OutDone2>(value: OutDone2): <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem, InElem, OutErr, InErr, OutDone2, InDone, Env>\n  /**\n   * Returns a new channel that is the same as this one, except the terminal\n   * value of the channel is the specified constant value.\n   *\n   * This method produces the same result as mapping this channel to the\n   * specified constant value.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, OutDone2>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    value: OutDone2\n  ): Channel<OutElem, InElem, OutErr, InErr, OutDone2, InDone, Env>\n} = channel.as\n\n/**\n * @since 2.0.0\n * @category mapping\n */\nexport const asVoid: <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>(\n  self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n) => Channel<OutElem, InElem, OutErr, InErr, void, InDone, Env> = channel.asVoid\n\n/**\n * Creates a channel backed by a buffer. When the buffer is empty, the channel\n * will simply passthrough its input as output. However, when the buffer is\n * non-empty, the value inside the buffer will be passed along as output.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const buffer: <InElem, InErr, InDone>(\n  options: { readonly empty: InElem; readonly isEmpty: Predicate<InElem>; readonly ref: Ref.Ref<InElem> }\n) => Channel<InElem, InElem, InErr, InErr, InDone, InDone, never> = channel.buffer\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const bufferChunk: <InElem, InErr, InDone>(\n  ref: Ref.Ref<Chunk.Chunk<InElem>>\n) => Channel<Chunk.Chunk<InElem>, Chunk.Chunk<InElem>, InErr, InErr, InDone, InDone> = channel.bufferChunk\n\n/**\n * Returns a new channel that is the same as this one, except if this channel\n * errors for any typed error, then the returned channel will switch over to\n * using the fallback channel returned by the specified error handler.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchAll: {\n  /**\n   * Returns a new channel that is the same as this one, except if this channel\n   * errors for any typed error, then the returned channel will switch over to\n   * using the fallback channel returned by the specified error handler.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <OutErr, OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>(\n    f: (error: OutErr) => Channel<OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>\n  ): <OutElem, InElem, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<\n    OutElem1 | OutElem,\n    InElem & InElem1,\n    OutErr1,\n    InErr & InErr1,\n    OutDone1 | OutDone,\n    InDone & InDone1,\n    Env1 | Env\n  >\n  /**\n   * Returns a new channel that is the same as this one, except if this channel\n   * errors for any typed error, then the returned channel will switch over to\n   * using the fallback channel returned by the specified error handler.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    f: (error: OutErr) => Channel<OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>\n  ): Channel<\n    OutElem | OutElem1,\n    InElem & InElem1,\n    OutErr1,\n    InErr & InErr1,\n    OutDone | OutDone1,\n    InDone & InDone1,\n    Env | Env1\n  >\n} = channel.catchAll\n\n/**\n * Returns a new channel that is the same as this one, except if this channel\n * errors for any typed error, then the returned channel will switch over to\n * using the fallback channel returned by the specified error handler.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchAllCause: {\n  /**\n   * Returns a new channel that is the same as this one, except if this channel\n   * errors for any typed error, then the returned channel will switch over to\n   * using the fallback channel returned by the specified error handler.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <OutErr, OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>(\n    f: (cause: Cause.Cause<OutErr>) => Channel<OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>\n  ): <OutElem, InElem, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<\n    OutElem1 | OutElem,\n    InElem & InElem1,\n    OutErr1,\n    InErr & InErr1,\n    OutDone1 | OutDone,\n    InDone & InDone1,\n    Env1 | Env\n  >\n  /**\n   * Returns a new channel that is the same as this one, except if this channel\n   * errors for any typed error, then the returned channel will switch over to\n   * using the fallback channel returned by the specified error handler.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    f: (cause: Cause.Cause<OutErr>) => Channel<OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>\n  ): Channel<\n    OutElem | OutElem1,\n    InElem & InElem1,\n    OutErr1,\n    InErr & InErr1,\n    OutDone | OutDone1,\n    InDone & InDone1,\n    Env | Env1\n  >\n} = core.catchAllCause\n\n/**\n * Concat sequentially a channel of channels.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const concatAll: <OutElem, InElem, OutErr, InErr, InDone, Env>(\n  channels: Channel<Channel<OutElem, InElem, OutErr, InErr, any, InDone, Env>, InElem, OutErr, InErr, any, InDone, Env>\n) => Channel<OutElem, InElem, OutErr, InErr, any, InDone, Env> = core.concatAll\n\n/**\n * Concat sequentially a channel of channels.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const concatAllWith: <\n  OutElem,\n  InElem2,\n  OutErr2,\n  InErr2,\n  OutDone,\n  InDone2,\n  Env2,\n  InElem,\n  OutErr,\n  InErr,\n  OutDone2,\n  InDone,\n  Env,\n  OutDone3\n>(\n  channels: Channel<\n    Channel<OutElem, InElem2, OutErr2, InErr2, OutDone, InDone2, Env2>,\n    InElem,\n    OutErr,\n    InErr,\n    OutDone2,\n    InDone,\n    Env\n  >,\n  f: (o: OutDone, o1: OutDone) => OutDone,\n  g: (o: OutDone, o2: OutDone2) => OutDone3\n) => Channel<OutElem, InElem & InElem2, OutErr2 | OutErr, InErr & InErr2, OutDone3, InDone & InDone2, Env2 | Env> =\n  core.concatAllWith\n\n/**\n * Returns a new channel whose outputs are fed to the specified factory\n * function, which creates new channels in response. These new channels are\n * sequentially concatenated together, and all their outputs appear as outputs\n * of the newly returned channel.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const concatMap: {\n  /**\n   * Returns a new channel whose outputs are fed to the specified factory\n   * function, which creates new channels in response. These new channels are\n   * sequentially concatenated together, and all their outputs appear as outputs\n   * of the newly returned channel.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutElem, OutElem2, InElem2, OutErr2, InErr2, X, InDone2, Env2>(\n    f: (o: OutElem) => Channel<OutElem2, InElem2, OutErr2, InErr2, X, InDone2, Env2>\n  ): <Env, InErr, InElem, InDone, OutErr, OutDone>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem2, InElem & InElem2, OutErr2 | OutErr, InErr & InErr2, unknown, InDone & InDone2, Env2 | Env>\n  /**\n   * Returns a new channel whose outputs are fed to the specified factory\n   * function, which creates new channels in response. These new channels are\n   * sequentially concatenated together, and all their outputs appear as outputs\n   * of the newly returned channel.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Env, InErr, InElem, InDone, OutErr, OutDone, OutElem, OutElem2, Env2, InErr2, InElem2, InDone2, OutErr2, X>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    f: (o: OutElem) => Channel<OutElem2, InElem2, OutErr2, InErr2, X, InDone2, Env2>\n  ): Channel<OutElem2, InElem & InElem2, OutErr | OutErr2, InErr & InErr2, unknown, InDone & InDone2, Env | Env2>\n} = channel.concatMap\n\n/**\n * Returns a new channel whose outputs are fed to the specified factory\n * function, which creates new channels in response. These new channels are\n * sequentially concatenated together, and all their outputs appear as outputs\n * of the newly returned channel. The provided merging function is used to\n * merge the terminal values of all channels into the single terminal value of\n * the returned channel.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const concatMapWith: {\n  /**\n   * Returns a new channel whose outputs are fed to the specified factory\n   * function, which creates new channels in response. These new channels are\n   * sequentially concatenated together, and all their outputs appear as outputs\n   * of the newly returned channel. The provided merging function is used to\n   * merge the terminal values of all channels into the single terminal value of\n   * the returned channel.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutElem, OutElem2, InElem2, OutErr2, InErr2, OutDone, InDone2, Env2, OutDone2, OutDone3>(\n    f: (o: OutElem) => Channel<OutElem2, InElem2, OutErr2, InErr2, OutDone, InDone2, Env2>,\n    g: (o: OutDone, o1: OutDone) => OutDone,\n    h: (o: OutDone, o2: OutDone2) => OutDone3\n  ): <Env, InErr, InElem, InDone, OutErr>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone2, InDone, Env>\n  ) => Channel<OutElem2, InElem & InElem2, OutErr2 | OutErr, InErr & InErr2, OutDone3, InDone & InDone2, Env2 | Env>\n  /**\n   * Returns a new channel whose outputs are fed to the specified factory\n   * function, which creates new channels in response. These new channels are\n   * sequentially concatenated together, and all their outputs appear as outputs\n   * of the newly returned channel. The provided merging function is used to\n   * merge the terminal values of all channels into the single terminal value of\n   * the returned channel.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <\n    OutElem,\n    InElem,\n    OutErr,\n    InErr,\n    OutDone2,\n    InDone,\n    Env,\n    OutElem2,\n    InElem2,\n    OutErr2,\n    InErr2,\n    OutDone,\n    InDone2,\n    Env2,\n    OutDone3\n  >(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone2, InDone, Env>,\n    f: (o: OutElem) => Channel<OutElem2, InElem2, OutErr2, InErr2, OutDone, InDone2, Env2>,\n    g: (o: OutDone, o1: OutDone) => OutDone,\n    h: (o: OutDone, o2: OutDone2) => OutDone3\n  ): Channel<OutElem2, InElem & InElem2, OutErr | OutErr2, InErr & InErr2, OutDone3, InDone & InDone2, Env | Env2>\n} = core.concatMapWith\n\n/**\n * Returns a new channel whose outputs are fed to the specified factory\n * function, which creates new channels in response. These new channels are\n * sequentially concatenated together, and all their outputs appear as outputs\n * of the newly returned channel. The provided merging function is used to\n * merge the terminal values of all channels into the single terminal value of\n * the returned channel.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const concatMapWithCustom: {\n  /**\n   * Returns a new channel whose outputs are fed to the specified factory\n   * function, which creates new channels in response. These new channels are\n   * sequentially concatenated together, and all their outputs appear as outputs\n   * of the newly returned channel. The provided merging function is used to\n   * merge the terminal values of all channels into the single terminal value of\n   * the returned channel.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutElem, OutElem2, InElem2, OutErr2, InErr2, OutDone, InDone2, Env2, OutDone2, OutDone3>(\n    f: (o: OutElem) => Channel<OutElem2, InElem2, OutErr2, InErr2, OutDone, InDone2, Env2>,\n    g: (o: OutDone, o1: OutDone) => OutDone,\n    h: (o: OutDone, o2: OutDone2) => OutDone3,\n    onPull: (\n      upstreamPullRequest: UpstreamPullRequest.UpstreamPullRequest<OutElem>\n    ) => UpstreamPullStrategy.UpstreamPullStrategy<OutElem2>,\n    onEmit: (elem: OutElem2) => ChildExecutorDecision.ChildExecutorDecision\n  ): <Env, InErr, InElem, InDone, OutErr>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone2, InDone, Env>\n  ) => Channel<OutElem2, InElem & InElem2, OutErr2 | OutErr, InErr & InErr2, OutDone3, InDone & InDone2, Env2 | Env>\n  /**\n   * Returns a new channel whose outputs are fed to the specified factory\n   * function, which creates new channels in response. These new channels are\n   * sequentially concatenated together, and all their outputs appear as outputs\n   * of the newly returned channel. The provided merging function is used to\n   * merge the terminal values of all channels into the single terminal value of\n   * the returned channel.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <\n    OutElem,\n    InElem,\n    OutErr,\n    InErr,\n    OutDone2,\n    InDone,\n    Env,\n    OutElem2,\n    InElem2,\n    OutErr2,\n    InErr2,\n    OutDone,\n    InDone2,\n    Env2,\n    OutDone3\n  >(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone2, InDone, Env>,\n    f: (o: OutElem) => Channel<OutElem2, InElem2, OutErr2, InErr2, OutDone, InDone2, Env2>,\n    g: (o: OutDone, o1: OutDone) => OutDone,\n    h: (o: OutDone, o2: OutDone2) => OutDone3,\n    onPull: (\n      upstreamPullRequest: UpstreamPullRequest.UpstreamPullRequest<OutElem>\n    ) => UpstreamPullStrategy.UpstreamPullStrategy<OutElem2>,\n    onEmit: (elem: OutElem2) => ChildExecutorDecision.ChildExecutorDecision\n  ): Channel<OutElem2, InElem & InElem2, OutErr | OutErr2, InErr & InErr2, OutDone3, InDone & InDone2, Env | Env2>\n} = core.concatMapWithCustom\n\n/**\n * Returns a new channel, which is the same as this one, except its outputs\n * are filtered and transformed by the specified partial function.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const collect: {\n  /**\n   * Returns a new channel, which is the same as this one, except its outputs\n   * are filtered and transformed by the specified partial function.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutElem, OutElem2>(pf: (o: OutElem) => Option.Option<OutElem2>): <InElem, OutErr, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, unknown, never, unknown, void, unknown, never>\n  ) => Channel<OutElem2, InElem, OutErr, InErr, OutDone, InDone, Env>\n  /**\n   * Returns a new channel, which is the same as this one, except its outputs\n   * are filtered and transformed by the specified partial function.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, OutElem2>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    pf: (o: OutElem) => Option.Option<OutElem2>\n  ): Channel<OutElem2, InElem, OutErr, InErr, OutDone, InDone, Env>\n} = channel.collect\n\n/**\n * Returns a new channel, which is the concatenation of all the channels that\n * are written out by this channel. This method may only be called on channels\n * that output other channels.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const concatOut: <OutElem, InElem, OutErr, InErr, InDone, Env, OutDone>(\n  self: Channel<\n    Channel<OutElem, InElem, OutErr, InErr, unknown, InDone, Env>,\n    InElem,\n    OutErr,\n    InErr,\n    OutDone,\n    InDone,\n    Env\n  >\n) => Channel<OutElem, InElem, OutErr, InErr, unknown, InDone, Env> = channel.concatOut\n\n/**\n * Returns a new channel which is the same as this one but applies the given\n * function to the input channel's done value.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const mapInput: {\n  /**\n   * Returns a new channel which is the same as this one but applies the given\n   * function to the input channel's done value.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <InDone0, InDone>(f: (a: InDone0) => InDone): <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone0, Env>\n  /**\n   * Returns a new channel which is the same as this one but applies the given\n   * function to the input channel's done value.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, InDone0>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    f: (a: InDone0) => InDone\n  ): Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone0, Env>\n} = channel.mapInput\n\n/**\n * Returns a new channel which is the same as this one but applies the given\n * effectual function to the input channel's done value.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const mapInputEffect: {\n  /**\n   * Returns a new channel which is the same as this one but applies the given\n   * effectual function to the input channel's done value.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <InDone0, InDone, InErr, Env1>(\n    f: (i: InDone0) => Effect.Effect<InDone, InErr, Env1>\n  ): <OutElem, InElem, OutErr, OutDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone0, Env1 | Env>\n  /**\n   * Returns a new channel which is the same as this one but applies the given\n   * effectual function to the input channel's done value.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, InDone0, Env1>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    f: (i: InDone0) => Effect.Effect<InDone, InErr, Env1>\n  ): Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone0, Env | Env1>\n} = channel.mapInputEffect\n\n/**\n * Returns a new channel which is the same as this one but applies the given\n * function to the input channel's error value.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const mapInputError: {\n  /**\n   * Returns a new channel which is the same as this one but applies the given\n   * function to the input channel's error value.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <InErr0, InErr>(f: (a: InErr0) => InErr): <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem, InElem, OutErr, InErr0, OutDone, InDone, Env>\n  /**\n   * Returns a new channel which is the same as this one but applies the given\n   * function to the input channel's error value.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, InErr0>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    f: (a: InErr0) => InErr\n  ): Channel<OutElem, InElem, OutErr, InErr0, OutDone, InDone, Env>\n} = channel.mapInputError\n\n/**\n * Returns a new channel which is the same as this one but applies the given\n * effectual function to the input channel's error value.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const mapInputErrorEffect: {\n  /**\n   * Returns a new channel which is the same as this one but applies the given\n   * effectual function to the input channel's error value.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <InErr0, InDone, InErr, Env1>(\n    f: (error: InErr0) => Effect.Effect<InDone, InErr, Env1>\n  ): <OutElem, InElem, OutErr, OutDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem, InElem, OutErr, InErr0, OutDone, InDone, Env1 | Env>\n  /**\n   * Returns a new channel which is the same as this one but applies the given\n   * effectual function to the input channel's error value.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, InErr0, Env1>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    f: (error: InErr0) => Effect.Effect<InDone, InErr, Env1>\n  ): Channel<OutElem, InElem, OutErr, InErr0, OutDone, InDone, Env | Env1>\n} = channel.mapInputErrorEffect\n\n/**\n * Returns a new channel which is the same as this one but applies the given\n * function to the input channel's output elements.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const mapInputIn: {\n  /**\n   * Returns a new channel which is the same as this one but applies the given\n   * function to the input channel's output elements.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <InElem0, InElem>(f: (a: InElem0) => InElem): <OutElem, OutErr, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem, InElem0, OutErr, InErr, OutDone, InDone, Env>\n  /**\n   * Returns a new channel which is the same as this one but applies the given\n   * function to the input channel's output elements.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, InElem0>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    f: (a: InElem0) => InElem\n  ): Channel<OutElem, InElem0, OutErr, InErr, OutDone, InDone, Env>\n} = channel.mapInputIn\n\n/**\n * Returns a new channel which is the same as this one but applies the given\n * effectual function to the input channel's output elements.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const mapInputInEffect: {\n  /**\n   * Returns a new channel which is the same as this one but applies the given\n   * effectual function to the input channel's output elements.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <InElem0, InElem, InErr, Env1>(\n    f: (a: InElem0) => Effect.Effect<InElem, InErr, Env1>\n  ): <OutElem, OutErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem, InElem0, OutErr, InErr, OutDone, InDone, Env1 | Env>\n  /**\n   * Returns a new channel which is the same as this one but applies the given\n   * effectual function to the input channel's output elements.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, InElem0, Env1>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    f: (a: InElem0) => Effect.Effect<InElem, InErr, Env1>\n  ): Channel<OutElem, InElem0, OutErr, InErr, OutDone, InDone, Env | Env1>\n} = channel.mapInputInEffect\n\n/**\n * Returns a new channel, which is the same as this one, except that all the\n * outputs are collected and bundled into a tuple together with the terminal\n * value of this channel.\n *\n * As the channel returned from this channel collects all of this channel's\n * output into an in- memory chunk, it is not safe to call this method on\n * channels that output a large or unbounded number of values.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const doneCollect: <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>(\n  self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n) => Channel<never, InElem, OutErr, InErr, [Chunk.Chunk<OutElem>, OutDone], InDone, Env> = channel.doneCollect\n\n/**\n * Returns a new channel which reads all the elements from upstream's output\n * channel and ignores them, then terminates with the upstream result value.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const drain: <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>(\n  self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n) => Channel<never, InElem, OutErr, InErr, OutDone, InDone, Env> = channel.drain\n\n/**\n * Returns a new channel which connects the given `AsyncInputProducer` as\n * this channel's input.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const embedInput: {\n  /**\n   * Returns a new channel which connects the given `AsyncInputProducer` as\n   * this channel's input.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <InErr, InElem, InDone>(\n    input: SingleProducerAsyncInput.AsyncInputProducer<InErr, InElem, InDone>\n  ): <OutElem, OutErr, OutDone, Env>(\n    self: Channel<OutElem, unknown, OutErr, unknown, OutDone, unknown, Env>\n  ) => Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  /**\n   * Returns a new channel which connects the given `AsyncInputProducer` as\n   * this channel's input.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutElem, OutErr, OutDone, Env, InErr, InElem, InDone>(\n    self: Channel<OutElem, unknown, OutErr, unknown, OutDone, unknown, Env>,\n    input: SingleProducerAsyncInput.AsyncInputProducer<InErr, InElem, InDone>\n  ): Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n} = core.embedInput\n\n/**\n * Returns a new channel that collects the output and terminal value of this\n * channel, which it then writes as output of the returned channel.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const emitCollect: <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>(\n  self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n) => Channel<[Chunk.Chunk<OutElem>, OutDone], InElem, OutErr, InErr, void, InDone, Env> = channel.emitCollect\n\n/**\n * Returns a new channel with an attached finalizer. The finalizer is\n * guaranteed to be executed so long as the channel begins execution (and\n * regardless of whether or not it completes).\n *\n * @since 2.0.0\n * @category utils\n */\nexport const ensuring: {\n  /**\n   * Returns a new channel with an attached finalizer. The finalizer is\n   * guaranteed to be executed so long as the channel begins execution (and\n   * regardless of whether or not it completes).\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <Z, Env1>(finalizer: Effect.Effect<Z, never, Env1>): <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env1 | Env>\n  /**\n   * Returns a new channel with an attached finalizer. The finalizer is\n   * guaranteed to be executed so long as the channel begins execution (and\n   * regardless of whether or not it completes).\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, Z, Env1>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    finalizer: Effect.Effect<Z, never, Env1>\n  ): Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env | Env1>\n} = channel.ensuring\n\n/**\n * Returns a new channel with an attached finalizer. The finalizer is\n * guaranteed to be executed so long as the channel begins execution (and\n * regardless of whether or not it completes).\n *\n * @since 2.0.0\n * @category utils\n */\nexport const ensuringWith: {\n  /**\n   * Returns a new channel with an attached finalizer. The finalizer is\n   * guaranteed to be executed so long as the channel begins execution (and\n   * regardless of whether or not it completes).\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutDone, OutErr, Env2>(\n    finalizer: (e: Exit.Exit<OutDone, OutErr>) => Effect.Effect<unknown, never, Env2>\n  ): <OutElem, InElem, InErr, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env2 | Env>\n  /**\n   * Returns a new channel with an attached finalizer. The finalizer is\n   * guaranteed to be executed so long as the channel begins execution (and\n   * regardless of whether or not it completes).\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, Env2>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    finalizer: (e: Exit.Exit<OutDone, OutErr>) => Effect.Effect<unknown, never, Env2>\n  ): Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env | Env2>\n} = core.ensuringWith\n\n/**\n * Accesses the whole context of the channel.\n *\n * @since 2.0.0\n * @category context\n */\nexport const context: <Env>() => Channel<never, unknown, never, unknown, Context.Context<Env>, unknown, Env> =\n  channel.context\n\n/**\n * Accesses the context of the channel with the specified function.\n *\n * @since 2.0.0\n * @category context\n */\nexport const contextWith: <Env, OutDone>(\n  f: (env: Context.Context<Env>) => OutDone\n) => Channel<never, unknown, never, unknown, OutDone, unknown, Env> = channel.contextWith\n\n/**\n * Accesses the context of the channel in the context of a channel.\n *\n * @since 2.0.0\n * @category context\n */\nexport const contextWithChannel: <Env, OutElem, InElem, OutErr, InErr, OutDone, InDone, Env1>(\n  f: (env: Context.Context<Env>) => Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env1>\n) => Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env | Env1> = channel.contextWithChannel\n\n/**\n * Accesses the context of the channel in the context of an effect.\n *\n * @since 2.0.0\n * @category context\n */\nexport const contextWithEffect: <Env, OutDone, OutErr, Env1>(\n  f: (env: Context.Context<Env>) => Effect.Effect<OutDone, OutErr, Env1>\n) => Channel<never, unknown, OutErr, unknown, OutDone, unknown, Env | Env1> = channel.contextWithEffect\n\n/**\n * Constructs a channel that fails immediately with the specified error.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fail: <E>(error: E) => Channel<never, unknown, E, unknown, never, unknown> = core.fail\n\n/**\n * Constructs a channel that succeeds immediately with the specified lazily\n * evaluated value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const failSync: <E>(evaluate: LazyArg<E>) => Channel<never, unknown, E, unknown, never, unknown> = core.failSync\n\n/**\n * Constructs a channel that fails immediately with the specified `Cause`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const failCause: <E>(cause: Cause.Cause<E>) => Channel<never, unknown, E, unknown, never, unknown> =\n  core.failCause\n\n/**\n * Constructs a channel that succeeds immediately with the specified lazily\n * evaluated `Cause`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const failCauseSync: <E>(\n  evaluate: LazyArg<Cause.Cause<E>>\n) => Channel<never, unknown, E, unknown, never, unknown> = core.failCauseSync\n\n/**\n * Returns a new channel, which sequentially combines this channel, together\n * with the provided factory function, which creates a second channel based on\n * the terminal value of this channel. The result is a channel that will first\n * perform the functions of this channel, before performing the functions of\n * the created channel (including yielding its terminal value).\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  /**\n   * Returns a new channel, which sequentially combines this channel, together\n   * with the provided factory function, which creates a second channel based on\n   * the terminal value of this channel. The result is a channel that will first\n   * perform the functions of this channel, before performing the functions of\n   * the created channel (including yielding its terminal value).\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <OutDone, OutElem1, InElem1, OutErr1, InErr1, OutDone2, InDone1, Env1>(\n    f: (d: OutDone) => Channel<OutElem1, InElem1, OutErr1, InErr1, OutDone2, InDone1, Env1>\n  ): <OutElem, InElem, OutErr, InErr, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<\n    OutElem1 | OutElem,\n    InElem & InElem1,\n    OutErr1 | OutErr,\n    InErr & InErr1,\n    OutDone2,\n    InDone & InDone1,\n    Env1 | Env\n  >\n  /**\n   * Returns a new channel, which sequentially combines this channel, together\n   * with the provided factory function, which creates a second channel based on\n   * the terminal value of this channel. The result is a channel that will first\n   * perform the functions of this channel, before performing the functions of\n   * the created channel (including yielding its terminal value).\n   *\n   * @since 2.0.0\n   * @category sequencing\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, OutElem1, InElem1, OutErr1, InErr1, OutDone2, InDone1, Env1>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    f: (d: OutDone) => Channel<OutElem1, InElem1, OutErr1, InErr1, OutDone2, InDone1, Env1>\n  ): Channel<\n    OutElem | OutElem1,\n    InElem & InElem1,\n    OutErr | OutErr1,\n    InErr & InErr1,\n    OutDone2,\n    InDone & InDone1,\n    Env | Env1\n  >\n} = core.flatMap\n\n/**\n * Returns a new channel, which flattens the terminal value of this channel.\n * This function may only be called if the terminal value of this channel is\n * another channel of compatible types.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatten: <\n  OutElem,\n  InElem,\n  OutErr,\n  InErr,\n  OutElem1,\n  InElem1,\n  OutErr1,\n  InErr1,\n  OutDone2,\n  InDone1,\n  Env1,\n  InDone,\n  Env\n>(\n  self: Channel<\n    OutElem,\n    InElem,\n    OutErr,\n    InErr,\n    Channel<OutElem1, InElem1, OutErr1, InErr1, OutDone2, InDone1, Env1>,\n    InDone,\n    Env\n  >\n) => Channel<\n  OutElem | OutElem1,\n  InElem & InElem1,\n  OutErr | OutErr1,\n  InErr & InErr1,\n  OutDone2,\n  InDone & InDone1,\n  Env1 | Env\n> = channel.flatten\n\n/**\n * Folds over the result of this channel.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const foldChannel: {\n  /**\n   * Folds over the result of this channel.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <\n    OutErr,\n    OutElem1,\n    InElem1,\n    OutErr1,\n    InErr1,\n    OutDone1,\n    InDone1,\n    Env1,\n    OutDone,\n    OutElem2,\n    InElem2,\n    OutErr2,\n    InErr2,\n    OutDone2,\n    InDone2,\n    Env2\n  >(\n    options: {\n      readonly onFailure: (error: OutErr) => Channel<OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>\n      readonly onSuccess: (done: OutDone) => Channel<OutElem2, InElem2, OutErr2, InErr2, OutDone2, InDone2, Env2>\n    }\n  ): <Env, InErr, InElem, InDone, OutElem>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<\n    OutElem1 | OutElem2 | OutElem,\n    InElem & InElem1 & InElem2,\n    OutErr1 | OutErr2,\n    InErr & InErr1 & InErr2,\n    OutDone1 | OutDone2,\n    InDone & InDone1 & InDone2,\n    Env1 | Env2 | Env\n  >\n  /**\n   * Folds over the result of this channel.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <\n    OutElem,\n    InElem,\n    OutErr,\n    InErr,\n    OutDone,\n    InDone,\n    Env,\n    OutElem1,\n    InElem1,\n    OutErr1,\n    InErr1,\n    OutDone1,\n    InDone1,\n    Env1,\n    OutElem2,\n    InElem2,\n    OutErr2,\n    InErr2,\n    OutDone2,\n    InDone2,\n    Env2\n  >(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    options: {\n      readonly onFailure: (error: OutErr) => Channel<OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>\n      readonly onSuccess: (done: OutDone) => Channel<OutElem2, InElem2, OutErr2, InErr2, OutDone2, InDone2, Env2>\n    }\n  ): Channel<\n    OutElem | OutElem1 | OutElem2,\n    InElem & InElem1 & InElem2,\n    OutErr1 | OutErr2,\n    InErr & InErr1 & InErr2,\n    OutDone1 | OutDone2,\n    InDone & InDone1 & InDone2,\n    Env | Env1 | Env2\n  >\n} = channel.foldChannel\n\n/**\n * Folds over the result of this channel including any cause of termination.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const foldCauseChannel: {\n  /**\n   * Folds over the result of this channel including any cause of termination.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <\n    OutErr,\n    OutElem1,\n    InElem1,\n    OutErr2,\n    InErr1,\n    OutDone2,\n    InDone1,\n    Env1,\n    OutDone,\n    OutElem2,\n    InElem2,\n    OutErr3,\n    InErr2,\n    OutDone3,\n    InDone2,\n    Env2\n  >(\n    options: {\n      readonly onFailure: (\n        c: Cause.Cause<OutErr>\n      ) => Channel<OutElem1, InElem1, OutErr2, InErr1, OutDone2, InDone1, Env1>\n      readonly onSuccess: (o: OutDone) => Channel<OutElem2, InElem2, OutErr3, InErr2, OutDone3, InDone2, Env2>\n    }\n  ): <Env, InErr, InElem, InDone, OutElem>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<\n    OutElem1 | OutElem2 | OutElem,\n    InElem & InElem1 & InElem2,\n    OutErr2 | OutErr3,\n    InErr & InErr1 & InErr2,\n    OutDone2 | OutDone3,\n    InDone & InDone1 & InDone2,\n    Env1 | Env2 | Env\n  >\n  /**\n   * Folds over the result of this channel including any cause of termination.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <\n    OutElem,\n    InElem,\n    OutErr,\n    InErr,\n    OutDone,\n    InDone,\n    Env,\n    OutElem1,\n    InElem1,\n    OutErr2,\n    InErr1,\n    OutDone2,\n    InDone1,\n    Env1,\n    OutElem2,\n    InElem2,\n    OutErr3,\n    InErr2,\n    OutDone3,\n    InDone2,\n    Env2\n  >(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    options: {\n      readonly onFailure: (\n        c: Cause.Cause<OutErr>\n      ) => Channel<OutElem1, InElem1, OutErr2, InErr1, OutDone2, InDone1, Env1>\n      readonly onSuccess: (o: OutDone) => Channel<OutElem2, InElem2, OutErr3, InErr2, OutDone3, InDone2, Env2>\n    }\n  ): Channel<\n    OutElem | OutElem1 | OutElem2,\n    InElem & InElem1 & InElem2,\n    OutErr2 | OutErr3,\n    InErr & InErr1 & InErr2,\n    OutDone2 | OutDone3,\n    InDone & InDone1 & InDone2,\n    Env | Env1 | Env2\n  >\n} = core.foldCauseChannel\n\n/**\n * Use an effect to end a channel.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromEffect: <A, E, R>(\n  effect: Effect.Effect<A, E, R>\n) => Channel<never, unknown, E, unknown, A, unknown, R> = core.fromEffect\n\n/**\n * Constructs a channel from an `Either`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromEither: <R, L>(either: Either.Either<R, L>) => Channel<never, unknown, L, unknown, R, unknown> =\n  channel.fromEither\n\n/**\n * Construct a `Channel` from an `AsyncInputConsumer`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromInput: <Err, Elem, Done>(\n  input: SingleProducerAsyncInput.AsyncInputConsumer<Err, Elem, Done>\n) => Channel<Elem, unknown, Err, unknown, Done, unknown> = channel.fromInput\n\n/**\n * Construct a `Channel` from a `PubSub`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromPubSub: <Done, Err, Elem>(\n  pubsub: PubSub.PubSub<Either.Either<Elem, Exit.Exit<Done, Err>>>\n) => Channel<Elem, unknown, Err, unknown, Done, unknown> = channel.fromPubSub\n\n/**\n * Construct a `Channel` from a `PubSub` within a scoped effect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromPubSubScoped: <Done, Err, Elem>(\n  pubsub: PubSub.PubSub<Either.Either<Elem, Exit.Exit<Done, Err>>>\n) => Effect.Effect<Channel<Elem, unknown, Err, unknown, Done, unknown>, never, Scope.Scope> = channel.fromPubSubScoped\n\n/**\n * Construct a `Channel` from an `Option`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromOption: <A>(\n  option: Option.Option<A>\n) => Channel<never, unknown, Option.Option<never>, unknown, A, unknown> = channel.fromOption\n\n/**\n * Construct a `Channel` from a `Queue`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromQueue: <Done, Err, Elem>(\n  queue: Queue.Dequeue<Either.Either<Elem, Exit.Exit<Done, Err>>>\n) => Channel<Elem, unknown, Err, unknown, Done, unknown> = channel.fromQueue\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const identity: <Elem, Err, Done>() => Channel<Elem, Elem, Err, Err, Done, Done> = channel.identityChannel\n\n/**\n * Returns a new channel, which is the same as this one, except it will be\n * interrupted when the specified effect completes. If the effect completes\n * successfully before the underlying channel is done, then the returned\n * channel will yield the success value of the effect as its terminal value.\n * On the other hand, if the underlying channel finishes first, then the\n * returned channel will yield the success value of the underlying channel as\n * its terminal value.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const interruptWhen: {\n  /**\n   * Returns a new channel, which is the same as this one, except it will be\n   * interrupted when the specified effect completes. If the effect completes\n   * successfully before the underlying channel is done, then the returned\n   * channel will yield the success value of the effect as its terminal value.\n   * On the other hand, if the underlying channel finishes first, then the\n   * returned channel will yield the success value of the underlying channel as\n   * its terminal value.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutDone1, OutErr1, Env1>(\n    effect: Effect.Effect<OutDone1, OutErr1, Env1>\n  ): <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem, InElem, OutErr1 | OutErr, InErr, OutDone1 | OutDone, InDone, Env1 | Env>\n  /**\n   * Returns a new channel, which is the same as this one, except it will be\n   * interrupted when the specified effect completes. If the effect completes\n   * successfully before the underlying channel is done, then the returned\n   * channel will yield the success value of the effect as its terminal value.\n   * On the other hand, if the underlying channel finishes first, then the\n   * returned channel will yield the success value of the underlying channel as\n   * its terminal value.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, OutDone1, OutErr1, Env1>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    effect: Effect.Effect<OutDone1, OutErr1, Env1>\n  ): Channel<OutElem, InElem, OutErr | OutErr1, InErr, OutDone | OutDone1, InDone, Env | Env1>\n} = channel.interruptWhen\n\n/**\n * Returns a new channel, which is the same as this one, except it will be\n * interrupted when the specified deferred is completed. If the deferred is\n * completed before the underlying channel is done, then the returned channel\n * will yield the value of the deferred. Otherwise, if the underlying channel\n * finishes first, then the returned channel will yield the value of the\n * underlying channel.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const interruptWhenDeferred: {\n  /**\n   * Returns a new channel, which is the same as this one, except it will be\n   * interrupted when the specified deferred is completed. If the deferred is\n   * completed before the underlying channel is done, then the returned channel\n   * will yield the value of the deferred. Otherwise, if the underlying channel\n   * finishes first, then the returned channel will yield the value of the\n   * underlying channel.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutDone1, OutErr1>(\n    deferred: Deferred.Deferred<OutDone1, OutErr1>\n  ): <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem, InElem, OutErr1 | OutErr, InErr, OutDone1 | OutDone, InDone, Env>\n  /**\n   * Returns a new channel, which is the same as this one, except it will be\n   * interrupted when the specified deferred is completed. If the deferred is\n   * completed before the underlying channel is done, then the returned channel\n   * will yield the value of the deferred. Otherwise, if the underlying channel\n   * finishes first, then the returned channel will yield the value of the\n   * underlying channel.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, OutDone1, OutErr1>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    deferred: Deferred.Deferred<OutDone1, OutErr1>\n  ): Channel<OutElem, InElem, OutErr | OutErr1, InErr, OutDone | OutDone1, InDone, Env>\n} = channel.interruptWhenDeferred\n\n/**\n * Returns a new channel, which is the same as this one, except the terminal\n * value of the returned channel is created by applying the specified function\n * to the terminal value of this channel.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  /**\n   * Returns a new channel, which is the same as this one, except the terminal\n   * value of the returned channel is created by applying the specified function\n   * to the terminal value of this channel.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <OutDone, OutDone2>(f: (out: OutDone) => OutDone2): <OutElem, InElem, OutErr, InErr, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem, InElem, OutErr, InErr, OutDone2, InDone, Env>\n  /**\n   * Returns a new channel, which is the same as this one, except the terminal\n   * value of the returned channel is created by applying the specified function\n   * to the terminal value of this channel.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, OutDone2>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    f: (out: OutDone) => OutDone2\n  ): Channel<OutElem, InElem, OutErr, InErr, OutDone2, InDone, Env>\n} = channel.map\n\n/**\n * Returns a new channel, which is the same as this one, except the terminal\n * value of the returned channel is created by applying the specified\n * effectful function to the terminal value of this channel.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapEffect: {\n  /**\n   * Returns a new channel, which is the same as this one, except the terminal\n   * value of the returned channel is created by applying the specified\n   * effectful function to the terminal value of this channel.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <OutDone, OutDone1, OutErr1, Env1>(\n    f: (o: OutDone) => Effect.Effect<OutDone1, OutErr1, Env1>\n  ): <OutElem, InElem, OutErr, InErr, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem, InElem, OutErr1 | OutErr, InErr, OutDone1, InDone, Env1 | Env>\n  /**\n   * Returns a new channel, which is the same as this one, except the terminal\n   * value of the returned channel is created by applying the specified\n   * effectful function to the terminal value of this channel.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, OutDone1, OutErr1, Env1>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    f: (o: OutDone) => Effect.Effect<OutDone1, OutErr1, Env1>\n  ): Channel<OutElem, InElem, OutErr | OutErr1, InErr, OutDone1, InDone, Env | Env1>\n} = channel.mapEffect\n\n/**\n * Returns a new channel, which is the same as this one, except the failure\n * value of the returned channel is created by applying the specified function\n * to the failure value of this channel.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapError: {\n  /**\n   * Returns a new channel, which is the same as this one, except the failure\n   * value of the returned channel is created by applying the specified function\n   * to the failure value of this channel.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <OutErr, OutErr2>(f: (err: OutErr) => OutErr2): <OutElem, InElem, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem, InElem, OutErr2, InErr, OutDone, InDone, Env>\n  /**\n   * Returns a new channel, which is the same as this one, except the failure\n   * value of the returned channel is created by applying the specified function\n   * to the failure value of this channel.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, OutErr2>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    f: (err: OutErr) => OutErr2\n  ): Channel<OutElem, InElem, OutErr2, InErr, OutDone, InDone, Env>\n} = channel.mapError\n\n/**\n * A more powerful version of `mapError` which also surfaces the `Cause`\n * of the channel failure.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapErrorCause: {\n  /**\n   * A more powerful version of `mapError` which also surfaces the `Cause`\n   * of the channel failure.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <OutErr, OutErr2>(\n    f: (cause: Cause.Cause<OutErr>) => Cause.Cause<OutErr2>\n  ): <OutElem, InElem, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem, InElem, OutErr2, InErr, OutDone, InDone, Env>\n  /**\n   * A more powerful version of `mapError` which also surfaces the `Cause`\n   * of the channel failure.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, OutErr2>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    f: (cause: Cause.Cause<OutErr>) => Cause.Cause<OutErr2>\n  ): Channel<OutElem, InElem, OutErr2, InErr, OutDone, InDone, Env>\n} = channel.mapErrorCause\n\n/**\n * Maps the output of this channel using the specified function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapOut: {\n  /**\n   * Maps the output of this channel using the specified function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <OutElem, OutElem2>(f: (o: OutElem) => OutElem2): <InElem, OutErr, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem2, InElem, OutErr, InErr, OutDone, InDone, Env>\n  /**\n   * Maps the output of this channel using the specified function.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, OutElem2>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    f: (o: OutElem) => OutElem2\n  ): Channel<OutElem2, InElem, OutErr, InErr, OutDone, InDone, Env>\n} = channel.mapOut\n\n/**\n * Creates a channel that is like this channel but the given effectful function\n * gets applied to each emitted output element.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapOutEffect: {\n  /**\n   * Creates a channel that is like this channel but the given effectful function\n   * gets applied to each emitted output element.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <OutElem, OutElem1, OutErr1, Env1>(\n    f: (o: OutElem) => Effect.Effect<OutElem1, OutErr1, Env1>\n  ): <InElem, OutErr, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem1, InElem, OutErr1 | OutErr, InErr, OutDone, InDone, Env1 | Env>\n  /**\n   * Creates a channel that is like this channel but the given effectful function\n   * gets applied to each emitted output element.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, OutElem1, OutErr1, Env1>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    f: (o: OutElem) => Effect.Effect<OutElem1, OutErr1, Env1>\n  ): Channel<OutElem1, InElem, OutErr | OutErr1, InErr, OutDone, InDone, Env | Env1>\n} = channel.mapOutEffect\n\n/**\n * Creates a channel that is like this channel but the given ZIO function gets\n * applied to each emitted output element, taking `n` elements at once and\n * mapping them in parallel.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapOutEffectPar: {\n  /**\n   * Creates a channel that is like this channel but the given ZIO function gets\n   * applied to each emitted output element, taking `n` elements at once and\n   * mapping them in parallel.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <OutElem, OutElem1, OutErr1, Env1>(\n    f: (o: OutElem) => Effect.Effect<OutElem1, OutErr1, Env1>,\n    n: number\n  ): <InElem, OutErr, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem1, InElem, OutErr1 | OutErr, InErr, OutDone, InDone, Env1 | Env>\n  /**\n   * Creates a channel that is like this channel but the given ZIO function gets\n   * applied to each emitted output element, taking `n` elements at once and\n   * mapping them in parallel.\n   *\n   * @since 2.0.0\n   * @category mapping\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, OutElem1, OutErr1, Env1>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    f: (o: OutElem) => Effect.Effect<OutElem1, OutErr1, Env1>,\n    n: number\n  ): Channel<OutElem1, InElem, OutErr | OutErr1, InErr, OutDone, InDone, Env | Env1>\n} = channel.mapOutEffectPar\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const mergeAll: (\n  options: {\n    readonly concurrency: number | \"unbounded\"\n    readonly bufferSize?: number | undefined\n    readonly mergeStrategy?: MergeStrategy.MergeStrategy | undefined\n  }\n) => <OutElem, InElem1, OutErr1, InErr1, InDone1, Env1, InElem, OutErr, InErr, InDone, Env>(\n  channels: Channel<\n    Channel<OutElem, InElem1, OutErr1, InErr1, unknown, InDone1, Env1>,\n    InElem,\n    OutErr,\n    InErr,\n    unknown,\n    InDone,\n    Env\n  >\n) => Channel<OutElem, InElem & InElem1, OutErr1 | OutErr, InErr & InErr1, unknown, InDone & InDone1, Env1 | Env> =\n  channel.mergeAll\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const mergeAllUnbounded: <OutElem, InElem1, OutErr1, InErr1, InDone1, Env1, InElem, OutErr, InErr, InDone, Env>(\n  channels: Channel<\n    Channel<OutElem, InElem1, OutErr1, InErr1, unknown, InDone1, Env1>,\n    InElem,\n    OutErr,\n    InErr,\n    unknown,\n    InDone,\n    Env\n  >\n) => Channel<OutElem, InElem & InElem1, OutErr1 | OutErr, InErr & InErr1, unknown, InDone & InDone1, Env1 | Env> =\n  channel.mergeAllUnbounded\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const mergeAllUnboundedWith: <\n  OutElem,\n  InElem1,\n  OutErr1,\n  InErr1,\n  OutDone,\n  InDone1,\n  Env1,\n  InElem,\n  OutErr,\n  InErr,\n  InDone,\n  Env\n>(\n  channels: Channel<\n    Channel<OutElem, InElem1, OutErr1, InErr1, OutDone, InDone1, Env1>,\n    InElem,\n    OutErr,\n    InErr,\n    OutDone,\n    InDone,\n    Env\n  >,\n  f: (o1: OutDone, o2: OutDone) => OutDone\n) => Channel<OutElem, InElem & InElem1, OutErr1 | OutErr, InErr & InErr1, OutDone, InDone & InDone1, Env1 | Env> =\n  channel.mergeAllUnboundedWith\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const mergeAllWith: (\n  { bufferSize, concurrency, mergeStrategy }: {\n    readonly concurrency: number | \"unbounded\"\n    readonly bufferSize?: number | undefined\n    readonly mergeStrategy?: MergeStrategy.MergeStrategy | undefined\n  }\n) => <OutElem, InElem1, OutErr1, InErr1, OutDone, InDone1, Env1, InElem, OutErr, InErr, InDone, Env>(\n  channels: Channel<\n    Channel<OutElem, InElem1, OutErr1, InErr1, OutDone, InDone1, Env1>,\n    InElem,\n    OutErr,\n    InErr,\n    OutDone,\n    InDone,\n    Env\n  >,\n  f: (o1: OutDone, o2: OutDone) => OutDone\n) => Channel<OutElem, InElem & InElem1, OutErr1 | OutErr, InErr & InErr1, OutDone, InDone & InDone1, Env1 | Env> =\n  channel.mergeAllWith\n\n/**\n * Returns a new channel which creates a new channel for each emitted element\n * and merges some of them together. Different merge strategies control what\n * happens if there are more than the given maximum number of channels gets\n * created. See `Channel.mergeAll`.\n *\n * @param n The maximum number of channels to merge.\n * @param f The function that creates a new channel from each emitted element.\n * @since 2.0.0\n * @category mapping\n */\nexport const mergeMap: {\n  /**\n   * Returns a new channel which creates a new channel for each emitted element\n   * and merges some of them together. Different merge strategies control what\n   * happens if there are more than the given maximum number of channels gets\n   * created. See `Channel.mergeAll`.\n   *\n   * @param n The maximum number of channels to merge.\n   * @param f The function that creates a new channel from each emitted element.\n   * @since 2.0.0\n   * @category mapping\n   */\n  <OutElem, OutElem1, InElem1, OutErr1, InErr1, Z, InDone1, Env1>(\n    f: (outElem: OutElem) => Channel<OutElem1, InElem1, OutErr1, InErr1, Z, InDone1, Env1>,\n    options: {\n      readonly concurrency: number | \"unbounded\"\n      readonly bufferSize?: number | undefined\n      readonly mergeStrategy?: MergeStrategy.MergeStrategy | undefined\n    }\n  ): <InElem, OutErr, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem1, InElem & InElem1, OutErr1 | OutErr, InErr & InErr1, unknown, InDone & InDone1, Env1 | Env>\n  /**\n   * Returns a new channel which creates a new channel for each emitted element\n   * and merges some of them together. Different merge strategies control what\n   * happens if there are more than the given maximum number of channels gets\n   * created. See `Channel.mergeAll`.\n   *\n   * @param n The maximum number of channels to merge.\n   * @param f The function that creates a new channel from each emitted element.\n   * @since 2.0.0\n   * @category mapping\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, OutElem1, InElem1, OutErr1, InErr1, Z, InDone1, Env1>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    f: (outElem: OutElem) => Channel<OutElem1, InElem1, OutErr1, InErr1, Z, InDone1, Env1>,\n    options: {\n      readonly concurrency: number | \"unbounded\"\n      readonly bufferSize?: number | undefined\n      readonly mergeStrategy?: MergeStrategy.MergeStrategy | undefined\n    }\n  ): Channel<OutElem1, InElem & InElem1, OutErr | OutErr1, InErr & InErr1, unknown, InDone & InDone1, Env | Env1>\n} = channel.mergeMap\n\n/**\n * Returns a new channel which merges a number of channels emitted by this\n * channel using the back pressuring merge strategy. See `Channel.mergeAll`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const mergeOut: {\n  /**\n   * Returns a new channel which merges a number of channels emitted by this\n   * channel using the back pressuring merge strategy. See `Channel.mergeAll`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (n: number): <OutElem1, InElem1, OutErr1, InErr1, Z, InDone1, Env1, InElem, OutErr, InErr, OutDone, InDone, Env>(\n    self: Channel<\n      Channel<OutElem1, InElem1, OutErr1, InErr1, Z, InDone1, Env1>,\n      InElem,\n      OutErr,\n      InErr,\n      OutDone,\n      InDone,\n      Env\n    >\n  ) => Channel<OutElem1, InElem & InElem1, OutErr1 | OutErr, InErr & InErr1, unknown, InDone & InDone1, Env1 | Env>\n  /**\n   * Returns a new channel which merges a number of channels emitted by this\n   * channel using the back pressuring merge strategy. See `Channel.mergeAll`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutElem1, InElem1, OutErr1, InErr1, Z, InDone1, Env1, InElem, OutErr, InErr, OutDone, InDone, Env>(\n    self: Channel<\n      Channel<OutElem1, InElem1, OutErr1, InErr1, Z, InDone1, Env1>,\n      InElem,\n      OutErr,\n      InErr,\n      OutDone,\n      InDone,\n      Env\n    >,\n    n: number\n  ): Channel<OutElem1, InElem & InElem1, OutErr1 | OutErr, InErr & InErr1, unknown, InDone & InDone1, Env1 | Env>\n} = channel.mergeOut\n\n/**\n * Returns a new channel which merges a number of channels emitted by this\n * channel using the back pressuring merge strategy and uses a given function\n * to merge each completed subchannel's result value. See\n * `Channel.mergeAll`.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const mergeOutWith: {\n  /**\n   * Returns a new channel which merges a number of channels emitted by this\n   * channel using the back pressuring merge strategy and uses a given function\n   * to merge each completed subchannel's result value. See\n   * `Channel.mergeAll`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutDone1>(\n    n: number,\n    f: (o1: OutDone1, o2: OutDone1) => OutDone1\n  ): <OutElem1, InElem1, OutErr1, InErr1, InDone1, Env1, InElem, OutErr, InErr, InDone, Env>(\n    self: Channel<\n      Channel<OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>,\n      InElem,\n      OutErr,\n      InErr,\n      OutDone1,\n      InDone,\n      Env\n    >\n  ) => Channel<OutElem1, InElem & InElem1, OutErr1 | OutErr, InErr & InErr1, OutDone1, InDone & InDone1, Env1 | Env>\n  /**\n   * Returns a new channel which merges a number of channels emitted by this\n   * channel using the back pressuring merge strategy and uses a given function\n   * to merge each completed subchannel's result value. See\n   * `Channel.mergeAll`.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1, InElem, OutErr, InErr, InDone, Env>(\n    self: Channel<\n      Channel<OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>,\n      InElem,\n      OutErr,\n      InErr,\n      OutDone1,\n      InDone,\n      Env\n    >,\n    n: number,\n    f: (o1: OutDone1, o2: OutDone1) => OutDone1\n  ): Channel<OutElem1, InElem & InElem1, OutErr1 | OutErr, InErr & InErr1, OutDone1, InDone & InDone1, Env1 | Env>\n} = channel.mergeOutWith\n\n/**\n * Returns a new channel, which is the merge of this channel and the specified\n * channel, where the behavior of the returned channel on left or right early\n * termination is decided by the specified `leftDone` and `rightDone` merge\n * decisions.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const mergeWith: {\n  /**\n   * Returns a new channel, which is the merge of this channel and the specified\n   * channel, where the behavior of the returned channel on left or right early\n   * termination is decided by the specified `leftDone` and `rightDone` merge\n   * decisions.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1, OutDone, OutErr, OutErr2, OutDone2, OutErr3, OutDone3>(\n    options: {\n      readonly other: Channel<OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>\n      readonly onSelfDone: (\n        exit: Exit.Exit<OutDone, OutErr>\n      ) => MergeDecision.MergeDecision<Env1, OutErr1, OutDone1, OutErr2, OutDone2>\n      readonly onOtherDone: (\n        ex: Exit.Exit<OutDone1, OutErr1>\n      ) => MergeDecision.MergeDecision<Env1, OutErr, OutDone, OutErr3, OutDone3>\n    }\n  ): <Env, InErr, InElem, InDone, OutElem>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<\n    OutElem1 | OutElem,\n    InElem & InElem1,\n    OutErr2 | OutErr3,\n    InErr & InErr1,\n    OutDone2 | OutDone3,\n    InDone & InDone1,\n    Env1 | Env\n  >\n  /**\n   * Returns a new channel, which is the merge of this channel and the specified\n   * channel, where the behavior of the returned channel on left or right early\n   * termination is decided by the specified `leftDone` and `rightDone` merge\n   * decisions.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <\n    OutElem,\n    InElem,\n    OutErr,\n    InErr,\n    OutDone,\n    InDone,\n    Env,\n    OutElem1,\n    InElem1,\n    OutErr1,\n    InErr1,\n    OutDone1,\n    InDone1,\n    Env1,\n    OutErr2,\n    OutDone2,\n    OutErr3,\n    OutDone3\n  >(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    options: {\n      readonly other: Channel<OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>\n      readonly onSelfDone: (\n        exit: Exit.Exit<OutDone, OutErr>\n      ) => MergeDecision.MergeDecision<Env1, OutErr1, OutDone1, OutErr2, OutDone2>\n      readonly onOtherDone: (\n        ex: Exit.Exit<OutDone1, OutErr1>\n      ) => MergeDecision.MergeDecision<Env1, OutErr, OutDone, OutErr3, OutDone3>\n    }\n  ): Channel<\n    OutElem | OutElem1,\n    InElem & InElem1,\n    OutErr2 | OutErr3,\n    InErr & InErr1,\n    OutDone2 | OutDone3,\n    InDone & InDone1,\n    Env | Env1\n  >\n} = channel.mergeWith\n\n/**\n * Returns a channel that never completes\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const never: Channel<never, unknown, never, unknown, never, unknown> = channel.never\n\n/**\n * Translates channel failure into death of the fiber, making all failures\n * unchecked and not a part of the type of the channel.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const orDie: {\n  /**\n   * Translates channel failure into death of the fiber, making all failures\n   * unchecked and not a part of the type of the channel.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <E>(error: LazyArg<E>): <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem, InElem, never, InErr, OutDone, InDone, Env>\n  /**\n   * Translates channel failure into death of the fiber, making all failures\n   * unchecked and not a part of the type of the channel.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, E>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    error: LazyArg<E>\n  ): Channel<OutElem, InElem, never, InErr, OutDone, InDone, Env>\n} = channel.orDie\n\n/**\n * Keeps none of the errors, and terminates the fiber with them, using the\n * specified function to convert the `OutErr` into a defect.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const orDieWith: {\n  /**\n   * Keeps none of the errors, and terminates the fiber with them, using the\n   * specified function to convert the `OutErr` into a defect.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <OutErr>(f: (e: OutErr) => unknown): <OutElem, InElem, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem, InElem, never, InErr, OutDone, InDone, Env>\n  /**\n   * Keeps none of the errors, and terminates the fiber with them, using the\n   * specified function to convert the `OutErr` into a defect.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    f: (e: OutErr) => unknown\n  ): Channel<OutElem, InElem, never, InErr, OutDone, InDone, Env>\n} = channel.orDieWith\n\n/**\n * Returns a new channel that will perform the operations of this one, until\n * failure, and then it will switch over to the operations of the specified\n * fallback channel.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const orElse: {\n  /**\n   * Returns a new channel that will perform the operations of this one, until\n   * failure, and then it will switch over to the operations of the specified\n   * fallback channel.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>(\n    that: LazyArg<Channel<OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>>\n  ): <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<\n    OutElem1 | OutElem,\n    InElem & InElem1,\n    OutErr1,\n    InErr & InErr1,\n    OutDone1 | OutDone,\n    InDone & InDone1,\n    Env1 | Env\n  >\n  /**\n   * Returns a new channel that will perform the operations of this one, until\n   * failure, and then it will switch over to the operations of the specified\n   * fallback channel.\n   *\n   * @since 2.0.0\n   * @category error handling\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    that: LazyArg<Channel<OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>>\n  ): Channel<\n    OutElem | OutElem1,\n    InElem & InElem1,\n    OutErr1,\n    InErr & InErr1,\n    OutDone | OutDone1,\n    InDone & InDone1,\n    Env | Env1\n  >\n} = channel.orElse\n\n/**\n * Returns a new channel that pipes the output of this channel into the\n * specified channel. The returned channel has the input type of this channel,\n * and the output type of the specified channel, terminating with the value of\n * the specified channel.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const pipeTo: {\n  /**\n   * Returns a new channel that pipes the output of this channel into the\n   * specified channel. The returned channel has the input type of this channel,\n   * and the output type of the specified channel, terminating with the value of\n   * the specified channel.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutElem2, OutElem, OutErr2, OutErr, OutDone2, OutDone, Env2>(\n    that: Channel<OutElem2, OutElem, OutErr2, OutErr, OutDone2, OutDone, Env2>\n  ): <InElem, InErr, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem2, InElem, OutErr2, InErr, OutDone2, InDone, Env2 | Env>\n  /**\n   * Returns a new channel that pipes the output of this channel into the\n   * specified channel. The returned channel has the input type of this channel,\n   * and the output type of the specified channel, terminating with the value of\n   * the specified channel.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, OutElem2, OutErr2, OutDone2, Env2>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    that: Channel<OutElem2, OutElem, OutErr2, OutErr, OutDone2, OutDone, Env2>\n  ): Channel<OutElem2, InElem, OutErr2, InErr, OutDone2, InDone, Env | Env2>\n} = core.pipeTo\n\n/**\n * Returns a new channel that pipes the output of this channel into the\n * specified channel and preserves this channel's failures without providing\n * them to the other channel for observation.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const pipeToOrFail: {\n  /**\n   * Returns a new channel that pipes the output of this channel into the\n   * specified channel and preserves this channel's failures without providing\n   * them to the other channel for observation.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutElem2, OutElem, OutErr2, OutDone2, OutDone, Env2>(\n    that: Channel<OutElem2, OutElem, OutErr2, never, OutDone2, OutDone, Env2>\n  ): <InElem, OutErr, InErr, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem2, InElem, OutErr2 | OutErr, InErr, OutDone2, InDone, Env2 | Env>\n  /**\n   * Returns a new channel that pipes the output of this channel into the\n   * specified channel and preserves this channel's failures without providing\n   * them to the other channel for observation.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, OutElem2, OutErr2, OutDone2, Env2>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    that: Channel<OutElem2, OutElem, OutErr2, never, OutDone2, OutDone, Env2>\n  ): Channel<OutElem2, InElem, OutErr | OutErr2, InErr, OutDone2, InDone, Env | Env2>\n} = channel.pipeToOrFail\n\n/**\n * Provides the channel with its required context, which eliminates its\n * dependency on `Env`.\n *\n * @since 2.0.0\n * @category context\n */\nexport const provideContext: {\n  /**\n   * Provides the channel with its required context, which eliminates its\n   * dependency on `Env`.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <Env>(env: Context.Context<Env>): <OutElem, InElem, OutErr, InErr, OutDone, InDone>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, never>\n  /**\n   * Provides the channel with its required context, which eliminates its\n   * dependency on `Env`.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    env: Context.Context<Env>\n  ): Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, never>\n} = core.provideContext\n\n/**\n * Provides a layer to the channel, which translates it to another level.\n *\n * @since 2.0.0\n * @category context\n */\nexport const provideLayer: {\n  /**\n   * Provides a layer to the channel, which translates it to another level.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <Env, OutErr2, Env0>(layer: Layer.Layer<Env, OutErr2, Env0>): <OutElem, InElem, OutErr, InErr, OutDone, InDone>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem, InElem, OutErr2 | OutErr, InErr, OutDone, InDone, Env0>\n  /**\n   * Provides a layer to the channel, which translates it to another level.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, OutErr2, Env0>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    layer: Layer.Layer<Env, OutErr2, Env0>\n  ): Channel<OutElem, InElem, OutErr | OutErr2, InErr, OutDone, InDone, Env0>\n} = channel.provideLayer\n\n/**\n * Transforms the context being provided to the channel with the specified\n * function.\n *\n * @since 2.0.0\n * @category context\n */\nexport const mapInputContext: {\n  /**\n   * Transforms the context being provided to the channel with the specified\n   * function.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <Env0, Env>(\n    f: (env: Context.Context<Env0>) => Context.Context<Env>\n  ): <OutElem, InElem, OutErr, InErr, OutDone, InDone>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env0>\n  /**\n   * Transforms the context being provided to the channel with the specified\n   * function.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, Env0>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    f: (env: Context.Context<Env0>) => Context.Context<Env>\n  ): Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env0>\n} = channel.mapInputContext\n\n/**\n * Splits the context into two parts, providing one part using the\n * specified layer and leaving the remainder `Env0`.\n *\n * @since 2.0.0\n * @category context\n */\nexport const provideSomeLayer: {\n  /**\n   * Splits the context into two parts, providing one part using the\n   * specified layer and leaving the remainder `Env0`.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <R2, OutErr2, Env0>(layer: Layer.Layer<R2, OutErr2, Env0>): <OutElem, InElem, OutErr, InErr, OutDone, InDone, R>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, R>\n  ) => Channel<OutElem, InElem, OutErr2 | OutErr, InErr, OutDone, InDone, Env0 | Exclude<R, R2>>\n  /**\n   * Splits the context into two parts, providing one part using the\n   * specified layer and leaving the remainder `Env0`.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, R, R2, OutErr2, Env0>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, R>,\n    layer: Layer.Layer<R2, OutErr2, Env0>\n  ): Channel<OutElem, InElem, OutErr | OutErr2, InErr, OutDone, InDone, Env0 | Exclude<R, R2>>\n} = channel.provideSomeLayer\n\n/**\n * Provides the effect with the single service it requires. If the effect\n * requires more than one service use `provideContext` instead.\n *\n * @since 2.0.0\n * @category context\n */\nexport const provideService: {\n  /**\n   * Provides the effect with the single service it requires. If the effect\n   * requires more than one service use `provideContext` instead.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    service: Context.Tag.Service<T>\n  ): <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Exclude<Env, Context.Tag.Identifier<T>>>\n  /**\n   * Provides the effect with the single service it requires. If the effect\n   * requires more than one service use `provideContext` instead.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, T extends Context.Tag<any, any>>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    tag: T,\n    service: Context.Tag.Service<T>\n  ): Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Exclude<Env, Context.Tag.Identifier<T>>>\n} = channel.provideService\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const read: <In>() => Channel<never, In, Option.Option<never>, unknown, In, unknown> = channel.read\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const readOrFail: <E, In = unknown>(error: E) => Channel<never, In, E, unknown, In, unknown> = core.readOrFail\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const readWith: <\n  InElem,\n  OutElem,\n  OutErr,\n  InErr,\n  OutDone,\n  InDone,\n  Env,\n  OutElem2,\n  OutErr2,\n  OutDone2,\n  Env2,\n  OutElem3,\n  OutErr3,\n  OutDone3,\n  Env3\n>(\n  options: {\n    readonly onInput: (input: InElem) => Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n    readonly onFailure: (error: InErr) => Channel<OutElem2, InElem, OutErr2, InErr, OutDone2, InDone, Env2>\n    readonly onDone: (done: InDone) => Channel<OutElem3, InElem, OutErr3, InErr, OutDone3, InDone, Env3>\n  }\n) => Channel<\n  OutElem | OutElem2 | OutElem3,\n  InElem,\n  OutErr | OutErr2 | OutErr3,\n  InErr,\n  OutDone | OutDone2 | OutDone3,\n  InDone,\n  Env | Env2 | Env3\n> = core.readWith\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const readWithCause: <\n  InElem,\n  OutElem,\n  OutErr,\n  InErr,\n  OutDone,\n  InDone,\n  Env,\n  OutElem2,\n  OutErr2,\n  OutDone2,\n  Env2,\n  OutElem3,\n  OutErr3,\n  OutDone3,\n  Env3\n>(\n  options: {\n    readonly onInput: (input: InElem) => Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n    readonly onFailure: (cause: Cause.Cause<InErr>) => Channel<OutElem2, InElem, OutErr2, InErr, OutDone2, InDone, Env2>\n    readonly onDone: (done: InDone) => Channel<OutElem3, InElem, OutErr3, InErr, OutDone3, InDone, Env3>\n  }\n) => Channel<\n  OutElem | OutElem2 | OutElem3,\n  InElem,\n  OutErr | OutErr2 | OutErr3,\n  InErr,\n  OutDone | OutDone2 | OutDone3,\n  InDone,\n  Env | Env2 | Env3\n> = core.readWithCause\n\n/**\n * Creates a channel which repeatedly runs this channel.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const repeated: <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>(\n  self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n) => Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env> = channel.repeated\n\n/**\n * Runs a channel until the end is received.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const run: <OutErr, InErr, OutDone, InDone, Env>(\n  self: Channel<never, unknown, OutErr, InErr, OutDone, InDone, Env>\n) => Effect.Effect<OutDone, OutErr, Exclude<Env, Scope.Scope>> = channel.run\n\n/**\n * Run the channel until it finishes with a done value or fails with an error\n * and collects its emitted output elements.\n *\n * The channel must not read any input.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runCollect: <OutElem, OutErr, InErr, OutDone, InDone, Env>(\n  self: Channel<OutElem, unknown, OutErr, InErr, OutDone, InDone, Env>\n) => Effect.Effect<[Chunk.Chunk<OutElem>, OutDone], OutErr, Exclude<Env, Scope.Scope>> = channel.runCollect\n\n/**\n * Runs a channel until the end is received.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const runDrain: <OutElem, OutErr, InErr, OutDone, InDone, Env>(\n  self: Channel<OutElem, unknown, OutErr, InErr, OutDone, InDone, Env>\n) => Effect.Effect<OutDone, OutErr, Exclude<Env, Scope.Scope>> = channel.runDrain\n\n/**\n * Use a scoped effect to emit an output element.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const scoped: <A, E, R>(\n  effect: Effect.Effect<A, E, R>\n) => Channel<A, unknown, E, unknown, unknown, unknown, Exclude<R, Scope.Scope>> = channel.scoped\n\n/**\n * Splits strings on newlines. Handles both Windows newlines (`\\r\\n`) and UNIX\n * newlines (`\\n`).\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const splitLines: <Err, Done>() => Channel<\n  Chunk.Chunk<string>,\n  Chunk.Chunk<string>,\n  Err,\n  Err,\n  Done,\n  Done,\n  never\n> = channel.splitLines\n\n/**\n * Constructs a channel that succeeds immediately with the specified value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeed: <A>(value: A) => Channel<never, unknown, never, unknown, A, unknown> = core.succeed\n\n/**\n * Lazily constructs a channel from the given side effect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const suspend: <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>(\n  evaluate: LazyArg<Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>>\n) => Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env> = core.suspend\n\n/**\n * Constructs a channel that succeeds immediately with the specified lazy value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const sync: <OutDone>(\n  evaluate: LazyArg<OutDone>\n) => Channel<never, unknown, never, unknown, OutDone, unknown> = core.sync\n\n/**\n * Converts a `Channel` to a `PubSub`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const toPubSub: <Done, Err, Elem>(\n  pubsub: PubSub.PubSub<Either.Either<Elem, Exit.Exit<Done, Err>>>\n) => Channel<never, Elem, never, Err, unknown, Done> = channel.toPubSub\n\n/**\n * Returns a scoped `Effect` that can be used to repeatedly pull elements from\n * the constructed `Channel`. The pull effect fails with the channel's failure\n * in case the channel fails, or returns either the channel's done value or an\n * emitted element.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const toPull: <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>(\n  self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n) => Effect.Effect<Effect.Effect<Either.Either<OutElem, OutDone>, OutErr, Env>, never, Scope.Scope | Env> =\n  channel.toPull\n\n/**\n * Converts a `Channel` to a `Queue`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const toQueue: <Done, Err, Elem>(\n  queue: Queue.Enqueue<Either.Either<Elem, Exit.Exit<Done, Err>>>\n) => Channel<never, Elem, never, Err, unknown, Done> = channel.toQueue\n\n/** Converts this channel to a `Sink`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const toSink: <OutElem, InElem, OutErr, InErr, OutDone, Env>(\n  self: Channel<Chunk.Chunk<OutElem>, Chunk.Chunk<InElem>, OutErr, InErr, OutDone, unknown, Env>\n) => Sink.Sink<OutDone, InElem, OutElem, OutErr, Env> = sink.channelToSink\n\n/**\n * Converts this channel to a `Stream`.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const toStream: <OutElem, OutErr, OutDone, Env>(\n  self: Channel<Chunk.Chunk<OutElem>, unknown, OutErr, unknown, OutDone, unknown, Env>\n) => Stream.Stream<OutElem, OutErr, Env> = stream.channelToStream\n\nconst void_: Channel<never> = core.void\nexport {\n  /**\n   * @since 2.0.0\n   * @category constructors\n   */\n  void_ as void\n}\n\n/**\n * Makes a channel from an effect that returns a channel in case of success.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const unwrap: <OutElem, InElem, OutErr, InErr, OutDone, InDone, R2, E, R>(\n  channel: Effect.Effect<Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, R2>, E, R>\n) => Channel<OutElem, InElem, E | OutErr, InErr, OutDone, InDone, R | R2> = channel.unwrap\n\n/**\n * Makes a channel from a managed that returns a channel in case of success.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const unwrapScoped: <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, E, R>(\n  self: Effect.Effect<Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>, E, R>\n) => Channel<OutElem, InElem, E | OutErr, InErr, OutDone, InDone, Env | Exclude<R, Scope.Scope>> = channel.unwrapScoped\n\n/**\n * Updates a service in the context of this channel.\n *\n * @since 2.0.0\n * @category context\n */\nexport const updateService: {\n  /**\n   * Updates a service in the context of this channel.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    f: (resource: Context.Tag.Service<T>) => Context.Tag.Service<T>\n  ): <OutElem, OutErr, InErr, OutDone, InDone, R>(\n    self: Channel<OutElem, unknown, OutErr, InErr, OutDone, InDone, R>\n  ) => Channel<OutElem, unknown, OutErr, InErr, OutDone, InDone, T | R>\n  /**\n   * Updates a service in the context of this channel.\n   *\n   * @since 2.0.0\n   * @category context\n   */\n  <OutElem, OutErr, InErr, OutDone, InDone, R, T extends Context.Tag<any, any>>(\n    self: Channel<OutElem, unknown, OutErr, InErr, OutDone, InDone, R>,\n    tag: T,\n    f: (resource: Context.Tag.Service<T>) => Context.Tag.Service<T>\n  ): Channel<OutElem, unknown, OutErr, InErr, OutDone, InDone, R | T>\n} = channel.updateService\n\n/**\n * Wraps the channel with a new span for tracing.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const withSpan: {\n  /**\n   * Wraps the channel with a new span for tracing.\n   *\n   * @since 2.0.0\n   * @category tracing\n   */\n  (name: string, options?: Tracer.SpanOptions | undefined): <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Exclude<Env, Tracer.ParentSpan>>\n  /**\n   * Wraps the channel with a new span for tracing.\n   *\n   * @since 2.0.0\n   * @category tracing\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    name: string,\n    options?: Tracer.SpanOptions | undefined\n  ): Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Exclude<Env, Tracer.ParentSpan>>\n} = channel.withSpan\n\n/**\n * Writes a single value to the channel.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const write: <OutElem>(out: OutElem) => Channel<OutElem> = core.write\n\n/**\n * Writes a sequence of values to the channel.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const writeAll: <OutElems extends Array<any>>(\n  ...outs: OutElems\n) => Channel<OutElems[number]> = channel.writeAll\n\n/**\n * Writes a `Chunk` of values to the channel.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const writeChunk: <OutElem>(\n  outs: Chunk.Chunk<OutElem>\n) => Channel<OutElem> = channel.writeChunk\n\n/**\n * Returns a new channel that is the sequential composition of this channel\n * and the specified channel. The returned channel terminates with a tuple of\n * the terminal values of both channels.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zip: {\n  /**\n   * Returns a new channel that is the sequential composition of this channel\n   * and the specified channel. The returned channel terminates with a tuple of\n   * the terminal values of both channels.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>(\n    that: Channel<OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>,\n    options?: { readonly concurrent?: boolean | undefined } | undefined\n  ): <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<\n    OutElem1 | OutElem,\n    InElem & InElem1,\n    OutErr1 | OutErr,\n    InErr & InErr1,\n    readonly [OutDone, OutDone1],\n    InDone & InDone1,\n    Env1 | Env\n  >\n  /**\n   * Returns a new channel that is the sequential composition of this channel\n   * and the specified channel. The returned channel terminates with a tuple of\n   * the terminal values of both channels.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    that: Channel<OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>,\n    options?: { readonly concurrent?: boolean | undefined } | undefined\n  ): Channel<\n    OutElem | OutElem1,\n    InElem & InElem1,\n    OutErr | OutErr1,\n    InErr & InErr1,\n    readonly [OutDone, OutDone1],\n    InDone & InDone1,\n    Env | Env1\n  >\n} = channel.zip\n\n/**\n * Returns a new channel that is the sequential composition of this channel\n * and the specified channel. The returned channel terminates with the\n * terminal value of this channel.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipLeft: {\n  /**\n   * Returns a new channel that is the sequential composition of this channel\n   * and the specified channel. The returned channel terminates with the\n   * terminal value of this channel.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>(\n    that: Channel<OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>,\n    options?: { readonly concurrent?: boolean | undefined } | undefined\n  ): <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<\n    OutElem1 | OutElem,\n    InElem & InElem1,\n    OutErr1 | OutErr,\n    InErr & InErr1,\n    OutDone,\n    InDone & InDone1,\n    Env1 | Env\n  >\n  /**\n   * Returns a new channel that is the sequential composition of this channel\n   * and the specified channel. The returned channel terminates with the\n   * terminal value of this channel.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <OutElem, InElem, OutErr, InErr, OutDone, InDone, Env, OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    that: Channel<OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>,\n    options?: { readonly concurrent?: boolean | undefined } | undefined\n  ): Channel<\n    OutElem | OutElem1,\n    InElem & InElem1,\n    OutErr | OutErr1,\n    InErr & InErr1,\n    OutDone,\n    InDone & InDone1,\n    Env | Env1\n  >\n} = channel.zipLeft\n\n/**\n * Returns a new channel that is the sequential composition of this channel\n * and the specified channel. The returned channel terminates with the\n * terminal value of that channel.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipRight: {\n  /**\n   * Returns a new channel that is the sequential composition of this channel\n   * and the specified channel. The returned channel terminates with the\n   * terminal value of that channel.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone1>(\n    that: Channel<OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n    }\n  ): <Env, InErr, InElem, InDone, OutErr, OutElem, OutDone>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>\n  ) => Channel<\n    OutElem1 | OutElem,\n    InElem & InElem1,\n    OutErr1 | OutErr,\n    InErr & InErr1,\n    OutDone1,\n    InDone & InDone1,\n    Env1 | Env\n  >\n  /**\n   * Returns a new channel that is the sequential composition of this channel\n   * and the specified channel. The returned channel terminates with the\n   * terminal value of that channel.\n   *\n   * @since 2.0.0\n   * @category zipping\n   */\n  <Env, InErr, InElem, InDone, OutErr, OutElem, OutDone, Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone1>(\n    self: Channel<OutElem, InElem, OutErr, InErr, OutDone, InDone, Env>,\n    that: Channel<OutElem1, InElem1, OutErr1, InErr1, OutDone1, InDone1, Env1>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n    }\n  ): Channel<\n    OutElem | OutElem1,\n    InElem & InElem1,\n    OutErr | OutErr1,\n    InErr & InErr1,\n    OutDone1,\n    InDone & InDone1,\n    Env | Env1\n  >\n} = channel.zipRight\n\n/**\n * Represents a generic checked exception which occurs when a `Channel` is\n * executed.\n *\n * @since 2.0.0\n * @category errors\n */\nexport const ChannelException: <E>(error: E) => ChannelException<E> = channel.ChannelException\n\n/**\n * Returns `true` if the specified value is an `ChannelException`, `false`\n * otherwise.\n *\n * @since 2.0.0\n * @category refinements\n */\nexport const isChannelException: (u: unknown) => u is ChannelException<unknown> = channel.isChannelException\n"],"names":["channel","core","sink","stream","ChannelTypeId","ChannelExceptionTypeId","isChannel","acquireUseRelease","acquireReleaseOut","as","asVoid","buffer","bufferChunk","catchAll","catchAllCause","concatAll","concatAllWith","concatMap","concatMapWith","concatMapWithCustom","collect","concatOut","mapInput","mapInputEffect","mapInputError","mapInputErrorEffect","mapInputIn","mapInputInEffect","doneCollect","drain","embedInput","emitCollect","ensuring","ensuringWith","context","contextWith","contextWithChannel","contextWithEffect","fail","failSync","failCause","failCauseSync","flatMap","flatten","foldChannel","foldCauseChannel","fromEffect","fromEither","fromInput","fromPubSub","fromPubSubScoped","fromOption","fromQueue","identity","identityChannel","interruptWhen","interruptWhenDeferred","map","mapEffect","mapError","mapErrorCause","mapOut","mapOutEffect","mapOutEffectPar","mergeAll","mergeAllUnbounded","mergeAllUnboundedWith","mergeAllWith","mergeMap","mergeOut","mergeOutWith","mergeWith","never","orDie","orDieWith","orElse","pipeTo","pipeToOrFail","provideContext","provideLayer","mapInputContext","provideSomeLayer","provideService","read","readOrFail","readWith","readWithCause","repeated","run","runCollect","runDrain","scoped","splitLines","succeed","suspend","sync","toPubSub","toPull","toQueue","toSink","channelToSink","toStream","channelToStream","void_","void","unwrap","unwrapScoped","updateService","withSpan","write","writeAll","writeChunk","zip","zipLeft","zipRight","ChannelException","isChannelException"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 18620, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 18626, "column": 0}, "map": {"version":3,"file":"Brand.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Brand.ts"],"sourcesContent":["/**\n * This module provides types and utility functions to create and work with branded types,\n * which are TypeScript types with an added type tag to prevent accidental usage of a value in the wrong context.\n *\n * The `refined` and `nominal` functions are both used to create branded types in TypeScript.\n * The main difference between them is that `refined` allows for validation of the data, while `nominal` does not.\n *\n * The `nominal` function is used to create a new branded type that has the same underlying type as the input, but with a different name.\n * This is useful when you want to distinguish between two values of the same type that have different meanings.\n * The `nominal` function does not perform any validation of the input data.\n *\n * On the other hand, the `refined` function is used to create a new branded type that has the same underlying type as the input,\n * but with a different name, and it also allows for validation of the input data.\n * The `refined` function takes a predicate that is used to validate the input data.\n * If the input data fails the validation, a `BrandErrors` is returned, which provides information about the specific validation failure.\n *\n * @since 2.0.0\n */\nimport * as Arr from \"./Array.js\"\nimport * as Either from \"./Either.js\"\nimport { identity } from \"./Function.js\"\nimport * as Option from \"./Option.js\"\nimport type { Predicate } from \"./Predicate.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const BrandTypeId: unique symbol = Symbol.for(\"effect/Brand\")\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type BrandTypeId = typeof BrandTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const RefinedConstructorsTypeId: unique symbol = Symbol.for(\"effect/Brand/Refined\")\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type RefinedConstructorsTypeId = typeof RefinedConstructorsTypeId\n\n/**\n * A generic interface that defines a branded type.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface Brand<in out K extends string | symbol> {\n  readonly [BrandTypeId]: {\n    readonly [k in K]: K\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Brand {\n  /**\n   * Represents a list of refinement errors.\n   *\n   * @since 2.0.0\n   * @category models\n   */\n  export interface BrandErrors extends Array<RefinementError> {}\n\n  /**\n   * Represents an error that occurs when the provided value of the branded type does not pass the refinement predicate.\n   *\n   * @since 2.0.0\n   * @category models\n   */\n  export interface RefinementError {\n    readonly meta: unknown\n    readonly message: string\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Constructor<in out A extends Brand<any>> {\n    readonly [RefinedConstructorsTypeId]: RefinedConstructorsTypeId\n    /**\n     * Constructs a branded type from a value of type `A`, throwing an error if\n     * the provided `A` is not valid.\n     */\n    (args: Brand.Unbranded<A>): A\n    /**\n     * Constructs a branded type from a value of type `A`, returning `Some<A>`\n     * if the provided `A` is valid, `None` otherwise.\n     */\n    option(args: Brand.Unbranded<A>): Option.Option<A>\n    /**\n     * Constructs a branded type from a value of type `A`, returning `Right<A>`\n     * if the provided `A` is valid, `Left<BrandError>` otherwise.\n     */\n    either(args: Brand.Unbranded<A>): Either.Either<A, Brand.BrandErrors>\n    /**\n     * Attempts to refine the provided value of type `A`, returning `true` if\n     * the provided `A` is valid, `false` otherwise.\n     */\n    is(a: Brand.Unbranded<A>): a is Brand.Unbranded<A> & A\n  }\n\n  /**\n   * A utility type to extract a branded type from a `Brand.Constructor`.\n   *\n   * @since 2.0.0\n   * @category models\n   */\n  export type FromConstructor<A> = A extends Brand.Constructor<infer B> ? B : never\n\n  /**\n   * A utility type to extract the value type from a brand.\n   *\n   * @since 2.0.0\n   * @category models\n   */\n  export type Unbranded<P> = P extends infer Q & Brands<P> ? Q : P\n\n  /**\n   * A utility type to extract the brands from a branded type.\n   *\n   * @since 2.0.0\n   * @category models\n   */\n  export type Brands<P> = P extends Brand<any> ? Types.UnionToIntersection<\n      {\n        [k in keyof P[BrandTypeId]]: k extends string | symbol ? Brand<k>\n          : never\n      }[keyof P[BrandTypeId]]\n    >\n    : never\n\n  /**\n   * A utility type that checks that all brands have the same base type.\n   *\n   * @since 2.0.0\n   * @category models\n   */\n  export type EnsureCommonBase<\n    Brands extends readonly [Brand.Constructor<any>, ...Array<Brand.Constructor<any>>]\n  > = {\n    [B in keyof Brands]: Brand.Unbranded<Brand.FromConstructor<Brands[0]>> extends\n      Brand.Unbranded<Brand.FromConstructor<Brands[B]>>\n      ? Brand.Unbranded<Brand.FromConstructor<Brands[B]>> extends Brand.Unbranded<Brand.FromConstructor<Brands[0]>>\n        ? Brands[B]\n      : Brands[B]\n      : \"ERROR: All brands should have the same base type\"\n  }\n}\n\n/**\n * @category alias\n * @since 2.0.0\n */\nexport type Branded<A, K extends string | symbol> = A & Brand<K>\n\n/**\n * Returns a `BrandErrors` that contains a single `RefinementError`.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const error = (message: string, meta?: unknown): Brand.BrandErrors => [{\n  message,\n  meta\n}]\n\n/**\n * Takes a variable number of `BrandErrors` and returns a single `BrandErrors` that contains all refinement errors.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const errors: (...errors: Array<Brand.BrandErrors>) => Brand.BrandErrors = (\n  ...errors: Array<Brand.BrandErrors>\n): Brand.BrandErrors => Arr.flatten(errors)\n\n/**\n * Returns a `Brand.Constructor` that can construct a branded type from an unbranded value using the provided `refinement`\n * predicate as validation of the input data.\n *\n * If you don't want to perform any validation but only distinguish between two values of the same type but with different meanings,\n * see {@link nominal}.\n *\n * @param refinement - The refinement predicate to apply to the unbranded value.\n * @param onFailure - Takes the unbranded value that did not pass the `refinement` predicate and returns a `BrandErrors`.\n *\n * @example\n * import { Brand } from \"effect\"\n *\n * type Int = number & Brand.Brand<\"Int\">\n *\n * const Int = Brand.refined<Int>(\n *   (n) => Number.isInteger(n),\n *   (n) => Brand.error(`Expected ${n} to be an integer`)\n * )\n *\n * assert.strictEqual(Int(1), 1)\n * assert.throws(() => Int(1.1))\n *\n * @since 2.0.0\n * @category constructors\n */\nexport function refined<A extends Brand<any>>(\n  f: (unbranded: Brand.Unbranded<A>) => Option.Option<Brand.BrandErrors>\n): Brand.Constructor<A>\nexport function refined<A extends Brand<any>>(\n  refinement: Predicate<Brand.Unbranded<A>>,\n  onFailure: (unbranded: Brand.Unbranded<A>) => Brand.BrandErrors\n): Brand.Constructor<A>\nexport function refined<A extends Brand<any>>(\n  ...args: [(unbranded: Brand.Unbranded<A>) => Option.Option<Brand.BrandErrors>] | [\n    Predicate<Brand.Unbranded<A>>,\n    (unbranded: Brand.Unbranded<A>) => Brand.BrandErrors\n  ]\n): Brand.Constructor<A> {\n  const either: (unbranded: Brand.Unbranded<A>) => Either.Either<A, Brand.BrandErrors> = args.length === 2 ?\n    (unbranded) => args[0](unbranded) ? Either.right(unbranded as A) : Either.left(args[1](unbranded)) :\n    (unbranded) => {\n      return Option.match(args[0](unbranded), {\n        onNone: () => Either.right(unbranded as A),\n        onSome: Either.left\n      })\n    }\n  return Object.assign((unbranded: Brand.Unbranded<A>) => Either.getOrThrowWith(either(unbranded), identity), {\n    [RefinedConstructorsTypeId]: RefinedConstructorsTypeId,\n    option: (args: any) => Option.getRight(either(args)),\n    either,\n    is: (args: any): args is Brand.Unbranded<A> & A => Either.isRight(either(args))\n  }) as any\n}\n\n/**\n * This function returns a `Brand.Constructor` that **does not apply any runtime checks**, it just returns the provided value.\n * It can be used to create nominal types that allow distinguishing between two values of the same type but with different meanings.\n *\n * If you also want to perform some validation, see {@link refined}.\n *\n * @example\n * import { Brand } from \"effect\"\n *\n * type UserId = number & Brand.Brand<\"UserId\">\n *\n * const UserId = Brand.nominal<UserId>()\n *\n * assert.strictEqual(UserId(1), 1)\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const nominal = <A extends Brand<any>>(): Brand.Constructor<\n  A\n> => {\n  // @ts-expect-error\n  return Object.assign((args) => args, {\n    [RefinedConstructorsTypeId]: RefinedConstructorsTypeId,\n    option: (args: any) => Option.some(args),\n    either: (args: any) => Either.right(args),\n    is: (_args: any): _args is Brand.Unbranded<A> & A => true\n  })\n}\n\n/**\n * Combines two or more brands together to form a single branded type.\n * This API is useful when you want to validate that the input data passes multiple brand validators.\n *\n * @example\n * import { Brand } from \"effect\"\n *\n * type Int = number & Brand.Brand<\"Int\">\n * const Int = Brand.refined<Int>(\n *   (n) => Number.isInteger(n),\n *   (n) => Brand.error(`Expected ${n} to be an integer`)\n * )\n * type Positive = number & Brand.Brand<\"Positive\">\n * const Positive = Brand.refined<Positive>(\n *   (n) => n > 0,\n *   (n) => Brand.error(`Expected ${n} to be positive`)\n * )\n *\n * const PositiveInt = Brand.all(Int, Positive)\n *\n * assert.strictEqual(PositiveInt(1), 1)\n * assert.throws(() => PositiveInt(1.1))\n *\n * @since 2.0.0\n * @category combining\n */\nexport const all: <Brands extends readonly [Brand.Constructor<any>, ...Array<Brand.Constructor<any>>]>(\n  ...brands: Brand.EnsureCommonBase<Brands>\n) => Brand.Constructor<\n  Types.UnionToIntersection<{ [B in keyof Brands]: Brand.FromConstructor<Brands[B]> }[number]> extends\n    infer X extends Brand<any> ? X : Brand<any>\n> = <\n  Brands extends readonly [Brand.Constructor<any>, ...Array<Brand.Constructor<any>>]\n>(...brands: Brand.EnsureCommonBase<Brands>): Brand.Constructor<\n  Types.UnionToIntersection<\n    {\n      [B in keyof Brands]: Brand.FromConstructor<Brands[B]>\n    }[number]\n  > extends infer X extends Brand<any> ? X : Brand<any>\n> => {\n  const either = (args: any): Either.Either<any, Brand.BrandErrors> => {\n    let result: Either.Either<any, Brand.BrandErrors> = Either.right(args)\n    for (const brand of brands) {\n      const nextResult = brand.either(args)\n      if (Either.isLeft(result) && Either.isLeft(nextResult)) {\n        result = Either.left([...result.left, ...nextResult.left])\n      } else {\n        result = Either.isLeft(result) ? result : nextResult\n      }\n    }\n    return result\n  }\n  // @ts-expect-error\n  return Object.assign((args) =>\n    Either.match(either(args), {\n      onLeft: (e) => {\n        throw e\n      },\n      onRight: identity\n    }), {\n    [RefinedConstructorsTypeId]: RefinedConstructorsTypeId,\n    option: (args: any) => Option.getRight(either(args)),\n    either,\n    is: (args: any): args is any => Either.isRight(either(args))\n  })\n}\n"],"names":["Arr","Either","identity","Option","BrandTypeId","Symbol","for","RefinedConstructorsTypeId","error","message","meta","errors","flatten","refined","args","either","length","unbranded","right","left","match","onNone","onSome","Object","assign","getOrThrowWith","option","getRight","is","isRight","nominal","some","_args","all","brands","result","brand","nextResult","isLeft","onLeft","e","onRight"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 18721, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 18727, "column": 0}, "map": {"version":3,"file":"ManagedRuntime.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/ManagedRuntime.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type * as Effect from \"./Effect.js\"\nimport type * as Exit from \"./Exit.js\"\nimport type * as Fiber from \"./Fiber.js\"\nimport * as internal from \"./internal/managedRuntime.js\"\nimport * as circular from \"./internal/managedRuntime/circular.js\"\nimport type * as Layer from \"./Layer.js\"\nimport type * as Runtime from \"./Runtime.js\"\nimport type * as Unify from \"./Unify.js\"\n\n/**\n * @since 3.9.0\n * @category symbol\n */\nexport const TypeId: unique symbol = circular.TypeId as TypeId\n\n/**\n * @since 3.9.0\n * @category symbol\n */\nexport type TypeId = typeof TypeId\n\n/**\n * Checks if the provided argument is a `ManagedRuntime`.\n *\n * @param input - The value to be checked if it is a `ManagedRuntime`.\n\n * @since 3.9.0\n * @category guards\n */\nexport const isManagedRuntime: (input: unknown) => input is ManagedRuntime<unknown, unknown> = internal.isManagedRuntime\n\n/**\n * @since 3.4.0\n */\nexport declare namespace ManagedRuntime {\n  /**\n   * @category type-level\n   * @since 3.4.0\n   */\n  export type Context<T extends ManagedRuntime<any, any>> = [T] extends [ManagedRuntime<infer R, infer _E>] ? R : never\n  /**\n   * @category type-level\n   * @since 3.4.0\n   */\n  export type Error<T extends ManagedRuntime<any, any>> = [T] extends [ManagedRuntime<infer _R, infer E>] ? E : never\n}\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface ManagedRuntime<in R, out ER> extends Effect.Effect<Runtime.Runtime<R>, ER> {\n  readonly [TypeId]: TypeId\n  readonly memoMap: Layer.MemoMap\n  readonly runtimeEffect: Effect.Effect<Runtime.Runtime<R>, ER>\n  readonly runtime: () => Promise<Runtime.Runtime<R>>\n\n  /**\n   * Executes the effect using the provided Scheduler or using the global\n   * Scheduler if not provided\n   */\n  readonly runFork: <A, E>(\n    self: Effect.Effect<A, E, R>,\n    options?: Runtime.RunForkOptions\n  ) => Fiber.RuntimeFiber<A, E | ER>\n\n  /**\n   * Executes the effect synchronously returning the exit.\n   *\n   * This method is effectful and should only be invoked at the edges of your\n   * program.\n   */\n  readonly runSyncExit: <A, E>(effect: Effect.Effect<A, E, R>) => Exit.Exit<A, ER | E>\n\n  /**\n   * Executes the effect synchronously throwing in case of errors or async boundaries.\n   *\n   * This method is effectful and should only be invoked at the edges of your\n   * program.\n   */\n  readonly runSync: <A, E>(effect: Effect.Effect<A, E, R>) => A\n\n  /**\n   * Executes the effect asynchronously, eventually passing the exit value to\n   * the specified callback.\n   *\n   * This method is effectful and should only be invoked at the edges of your\n   * program.\n   */\n  readonly runCallback: <A, E>(\n    effect: Effect.Effect<A, E, R>,\n    options?: Runtime.RunCallbackOptions<A, E | ER> | undefined\n  ) => Runtime.Cancel<A, E | ER>\n\n  /**\n   * Runs the `Effect`, returning a JavaScript `Promise` that will be resolved\n   * with the value of the effect once the effect has been executed, or will be\n   * rejected with the first error or exception throw by the effect.\n   *\n   * This method is effectful and should only be used at the edges of your\n   * program.\n   */\n  readonly runPromise: <A, E>(effect: Effect.Effect<A, E, R>, options?: {\n    readonly signal?: AbortSignal | undefined\n  }) => Promise<A>\n\n  /**\n   * Runs the `Effect`, returning a JavaScript `Promise` that will be resolved\n   * with the `Exit` state of the effect once the effect has been executed.\n   *\n   * This method is effectful and should only be used at the edges of your\n   * program.\n   */\n  readonly runPromiseExit: <A, E>(effect: Effect.Effect<A, E, R>, options?: {\n    readonly signal?: AbortSignal | undefined\n  }) => Promise<Exit.Exit<A, ER | E>>\n\n  /**\n   * Dispose of the resources associated with the runtime.\n   */\n  readonly dispose: () => Promise<void>\n\n  /**\n   * Dispose of the resources associated with the runtime.\n   */\n  readonly disposeEffect: Effect.Effect<void, never, never>\n\n  readonly [Unify.typeSymbol]?: unknown\n  readonly [Unify.unifySymbol]?: ManagedRuntimeUnify<this>\n  readonly [Unify.ignoreSymbol]?: ManagedRuntimeUnifyIgnore\n}\n\n/**\n * @category models\n * @since 3.9.0\n */\nexport interface ManagedRuntimeUnify<A extends { [Unify.typeSymbol]?: any }> extends Effect.EffectUnify<A> {\n  ManagedRuntime?: () => Extract<A[Unify.typeSymbol], ManagedRuntime<any, any>>\n}\n\n/**\n * @category models\n * @since 3.9.0\n */\nexport interface ManagedRuntimeUnifyIgnore extends Effect.EffectUnifyIgnore {\n  Effect?: true\n}\n\n/**\n * Convert a Layer into an ManagedRuntime, that can be used to run Effect's using\n * your services.\n *\n * @since 2.0.0\n * @category runtime class\n * @example\n * import { Console, Effect, Layer, ManagedRuntime } from \"effect\"\n *\n * class Notifications extends Effect.Tag(\"Notifications\")<\n *   Notifications,\n *   { readonly notify: (message: string) => Effect.Effect<void> }\n * >() {\n *   static Live = Layer.succeed(this, { notify: (message) => Console.log(message) })\n * }\n *\n * async function main() {\n *   const runtime = ManagedRuntime.make(Notifications.Live)\n *   await runtime.runPromise(Notifications.notify(\"Hello, world!\"))\n *   await runtime.dispose()\n * }\n *\n * main()\n */\nexport const make: <R, E>(\n  layer: Layer.Layer<R, E, never>,\n  memoMap?: Layer.MemoMap | undefined\n) => ManagedRuntime<R, E> = internal.make\n"],"names":["internal","circular","TypeId","isManagedRuntime","make"],"mappings":";;;;;AAOA,OAAO,KAAKC,QAAQ,MAAM,uCAAuC;AADjE,OAAO,KAAKD,QAAQ,MAAM,8BAA8B;;;AAUjD,MAAME,MAAM,GAAkBD,QAAQ,8NAACC,MAAgB;AAgBvD,MAAMC,gBAAgB,GAAkEH,QAAQ,kNAACG,gBAAgB;AA+IjH,MAAMC,IAAI,GAGWJ,QAAQ,kNAACI,IAAI","ignoreList":[0]}},
    {"offset": {"line": 18739, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 18745, "column": 0}, "map": {"version":3,"file":"Mailbox.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Mailbox.ts"],"sourcesContent":["/**\n * @since 3.8.0\n * @experimental\n */\nimport type { Cause, NoSuchElementException } from \"./Cause.js\"\nimport type { Channel } from \"./Channel.js\"\nimport type { Chunk } from \"./Chunk.js\"\nimport type { Effect } from \"./Effect.js\"\nimport type { Exit } from \"./Exit.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as internal from \"./internal/mailbox.js\"\nimport type { Option } from \"./Option.js\"\nimport { hasProperty } from \"./Predicate.js\"\nimport type { Stream } from \"./Stream.js\"\n\n/**\n * @since 3.8.0\n * @experimental\n * @category type ids\n */\nexport const TypeId: unique symbol = internal.TypeId\n\n/**\n * @since 3.8.0\n * @experimental\n * @category type ids\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 3.8.0\n * @experimental\n * @category type ids\n */\nexport const ReadonlyTypeId: unique symbol = internal.ReadonlyTypeId\n\n/**\n * @since 3.8.0\n * @experimental\n * @category type ids\n */\nexport type ReadonlyTypeId = typeof ReadonlyTypeId\n\n/**\n * @since 3.8.0\n * @experimental\n * @category guards\n */\nexport const isMailbox = <A = unknown, E = unknown>(u: unknown): u is Mailbox<A, E> => hasProperty(u, TypeId)\n\n/**\n * @since 3.8.0\n * @experimental\n * @category guards\n */\nexport const isReadonlyMailbox = <A = unknown, E = unknown>(u: unknown): u is ReadonlyMailbox<A, E> =>\n  hasProperty(u, ReadonlyTypeId)\n\n/**\n * A `Mailbox` is a queue that can be signaled to be done or failed.\n *\n * @since 3.8.0\n * @experimental\n * @category models\n */\nexport interface Mailbox<in out A, in out E = never> extends ReadonlyMailbox<A, E> {\n  readonly [TypeId]: TypeId\n  /**\n   * Add a message to the mailbox. Returns `false` if the mailbox is done.\n   */\n  readonly offer: (message: A) => Effect<boolean>\n  /**\n   * Add a message to the mailbox. Returns `false` if the mailbox is done.\n   */\n  readonly unsafeOffer: (message: A) => boolean\n  /**\n   * Add multiple messages to the mailbox. Returns the remaining messages that\n   * were not added.\n   */\n  readonly offerAll: (messages: Iterable<A>) => Effect<Chunk<A>>\n  /**\n   * Add multiple messages to the mailbox. Returns the remaining messages that\n   * were not added.\n   */\n  readonly unsafeOfferAll: (messages: Iterable<A>) => Chunk<A>\n  /**\n   * Fail the mailbox with an error. If the mailbox is already done, `false` is\n   * returned.\n   */\n  readonly fail: (error: E) => Effect<boolean>\n  /**\n   * Fail the mailbox with a cause. If the mailbox is already done, `false` is\n   * returned.\n   */\n  readonly failCause: (cause: Cause<E>) => Effect<boolean>\n  /**\n   * Signal that the mailbox is complete. If the mailbox is already done, `false` is\n   * returned.\n   */\n  readonly end: Effect<boolean>\n  /**\n   * Signal that the mailbox is done. If the mailbox is already done, `false` is\n   * returned.\n   */\n  readonly done: (exit: Exit<void, E>) => Effect<boolean>\n  /**\n   * Signal that the mailbox is done. If the mailbox is already done, `false` is\n   * returned.\n   */\n  readonly unsafeDone: (exit: Exit<void, E>) => boolean\n  /**\n   * Shutdown the mailbox, canceling any pending operations.\n   * If the mailbox is already done, `false` is returned.\n   */\n  readonly shutdown: Effect<boolean>\n}\n\n/**\n * A `ReadonlyMailbox` represents a mailbox that can only be read from.\n *\n * @since 3.8.0\n * @experimental\n * @category models\n */\nexport interface ReadonlyMailbox<out A, out E = never>\n  extends Effect<readonly [messages: Chunk<A>, done: boolean], E>, Inspectable\n{\n  readonly [ReadonlyTypeId]: ReadonlyTypeId\n  /**\n   * Take all messages from the mailbox, returning an empty Chunk if the mailbox\n   * is empty or done.\n   */\n  readonly clear: Effect<Chunk<A>, E>\n  /**\n   * Take all messages from the mailbox, or wait for messages to be available.\n   *\n   * If the mailbox is done, the `done` flag will be `true`. If the mailbox\n   * fails, the Effect will fail with the error.\n   */\n  readonly takeAll: Effect<readonly [messages: Chunk<A>, done: boolean], E>\n  /**\n   * Take a specified number of messages from the mailbox. It will only take\n   * up to the capacity of the mailbox.\n   *\n   * If the mailbox is done, the `done` flag will be `true`. If the mailbox\n   * fails, the Effect will fail with the error.\n   */\n  readonly takeN: (n: number) => Effect<readonly [messages: Chunk<A>, done: boolean], E>\n  /**\n   * Take a single message from the mailbox, or wait for a message to be\n   * available.\n   *\n   * If the mailbox is done, it will fail with `NoSuchElementException`. If the\n   * mailbox fails, the Effect will fail with the error.\n   */\n  readonly take: Effect<A, E | NoSuchElementException>\n  /** Wait for the mailbox to be done. */\n  readonly await: Effect<void, E>\n  /**\n   * Check the size of the mailbox.\n   *\n   * If the mailbox is complete, it will return `None`.\n   */\n  readonly size: Effect<Option<number>>\n  /**\n   * Check the size of the mailbox.\n   *\n   * If the mailbox is complete, it will return `None`.\n   */\n  readonly unsafeSize: () => Option<number>\n}\n\n/**\n * A `Mailbox` is a queue that can be signaled to be done or failed.\n *\n * @since 3.8.0\n * @experimental\n * @category constructors\n * @example\n * import { Effect, Mailbox } from \"effect\"\n *\n * Effect.gen(function*() {\n *   const mailbox = yield* Mailbox.make<number, string>()\n *\n *   // add messages to the mailbox\n *   yield* mailbox.offer(1)\n *   yield* mailbox.offer(2)\n *   yield* mailbox.offerAll([3, 4, 5])\n *\n *   // take messages from the mailbox\n *   const [messages, done] = yield* mailbox.takeAll\n *   assert.deepStrictEqual(messages, [1, 2, 3, 4, 5])\n *   assert.strictEqual(done, false)\n *\n *   // signal that the mailbox is done\n *   yield* mailbox.end\n *   const [messages2, done2] = yield* mailbox.takeAll\n *   assert.deepStrictEqual(messages2, [])\n *   assert.strictEqual(done2, true)\n *\n *   // signal that the mailbox has failed\n *   yield* mailbox.fail(\"boom\")\n * })\n */\nexport const make: <A, E = never>(capacity?: number | undefined) => Effect<Mailbox<A, E>> = internal.make\n\n/**\n * Run an `Effect` into a `Mailbox`, where success ends the mailbox and failure\n * fails the mailbox.\n *\n * @since 3.8.0\n * @experimental\n * @category combinators\n */\nexport const into: {\n  /**\n   * Run an `Effect` into a `Mailbox`, where success ends the mailbox and failure\n   * fails the mailbox.\n   *\n   * @since 3.8.0\n   * @experimental\n   * @category combinators\n   */\n  <A, E>(self: Mailbox<A, E>): <AX, EX extends E, RX>(effect: Effect<AX, EX, RX>) => Effect<boolean, never, RX>\n  /**\n   * Run an `Effect` into a `Mailbox`, where success ends the mailbox and failure\n   * fails the mailbox.\n   *\n   * @since 3.8.0\n   * @experimental\n   * @category combinators\n   */\n  <AX, E, EX extends E, RX, A>(effect: Effect<AX, EX, RX>, self: Mailbox<A, E>): Effect<boolean, never, RX>\n} = internal.into\n\n/**\n * Create a `Channel` from a `Mailbox`.\n *\n * @since 3.8.0\n * @experimental\n * @category conversions\n */\nexport const toChannel: <A, E>(self: ReadonlyMailbox<A, E>) => Channel<Chunk<A>, unknown, E> = internal.toChannel\n\n/**\n * Create a `Stream` from a `Mailbox`.\n *\n * @since 3.8.0\n * @experimental\n * @category conversions\n */\nexport const toStream: <A, E>(self: ReadonlyMailbox<A, E>) => Stream<A, E> = internal.toStream\n"],"names":["internal","hasProperty","TypeId","ReadonlyTypeId","isMailbox","u","isReadonlyMailbox","make","into","toChannel","toStream"],"mappings":";;;;;;;;;;AAUA,OAAO,KAAKA,QAAQ,MAAM,uBAAuB;AAEjD,SAASC,WAAW,QAAQ,gBAAgB;;;AAQrC,MAAMC,MAAM,GAAkBF,QAAQ,2MAACE,MAAM;AAc7C,MAAMC,cAAc,GAAkBH,QAAQ,2MAACG,cAAc;AAc7D,MAAMC,SAAS,IAA8BC,CAAU,gNAAyBJ,cAAAA,AAAW,EAACI,CAAC,EAAEH,MAAM,CAAC;AAOtG,MAAMI,iBAAiB,GAA8BD,CAAU,iNACpEJ,cAAAA,AAAW,EAACI,CAAC,EAAEF,cAAc,CAAC;AAoJzB,MAAMI,IAAI,GAA2EP,QAAQ,2MAACO,IAAI;AAUlG,MAAMC,IAAI,GAmBbR,QAAQ,2MAACQ,IAAI;AASV,MAAMC,SAAS,GAAyET,QAAQ,2MAACS,SAAS;AAS1G,MAAMC,QAAQ,GAAwDV,QAAQ,2MAACU,QAAQ","ignoreList":[0]}},
    {"offset": {"line": 18767, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 18773, "column": 0}, "map": {"version":3,"file":"FiberSet.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/FiberSet.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport * as Effect from \"effect/Effect\"\nimport * as FiberId from \"effect/FiberId\"\nimport type * as Scope from \"effect/Scope\"\nimport * as Cause from \"./Cause.js\"\nimport * as Deferred from \"./Deferred.js\"\nimport * as Exit from \"./Exit.js\"\nimport * as Fiber from \"./Fiber.js\"\nimport * as FiberRef from \"./FiberRef.js\"\nimport { constFalse, dual } from \"./Function.js\"\nimport * as HashSet from \"./HashSet.js\"\nimport * as Inspectable from \"./Inspectable.js\"\nimport type { FiberRuntime } from \"./internal/fiberRuntime.js\"\nimport * as Iterable from \"./Iterable.js\"\nimport * as Option from \"./Option.js\"\nimport { type Pipeable, pipeArguments } from \"./Pipeable.js\"\nimport * as Predicate from \"./Predicate.js\"\nimport * as Runtime from \"./Runtime.js\"\n\n/**\n * @since 2.0.0\n * @categories type ids\n */\nexport const TypeId: unique symbol = Symbol.for(\"effect/FiberSet\")\n\n/**\n * @since 2.0.0\n * @categories type ids\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @categories models\n */\nexport interface FiberSet<out A = unknown, out E = unknown>\n  extends Pipeable, Inspectable.Inspectable, Iterable<Fiber.RuntimeFiber<A, E>>\n{\n  readonly [TypeId]: TypeId\n  readonly deferred: Deferred.Deferred<void, unknown>\n  /** @internal */\n  state: {\n    readonly _tag: \"Open\"\n    readonly backing: Set<Fiber.RuntimeFiber<A, E>>\n  } | {\n    readonly _tag: \"Closed\"\n  }\n}\n\n/**\n * @since 2.0.0\n * @categories refinements\n */\nexport const isFiberSet = (u: unknown): u is FiberSet<unknown, unknown> => Predicate.hasProperty(u, TypeId)\n\nconst Proto = {\n  [TypeId]: TypeId,\n  [Symbol.iterator](this: FiberSet<unknown, unknown>) {\n    if (this.state._tag === \"Closed\") {\n      return Iterable.empty()\n    }\n    return this.state.backing[Symbol.iterator]()\n  },\n  toString(this: FiberSet<unknown, unknown>) {\n    return Inspectable.format(this.toJSON())\n  },\n  toJSON(this: FiberSet<unknown, unknown>) {\n    return {\n      _id: \"FiberMap\",\n      state: this.state\n    }\n  },\n  [Inspectable.NodeInspectSymbol](this: FiberSet<unknown, unknown>) {\n    return this.toJSON()\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst unsafeMake = <A, E>(\n  backing: Set<Fiber.RuntimeFiber<A, E>>,\n  deferred: Deferred.Deferred<void, unknown>\n): FiberSet<A, E> => {\n  const self = Object.create(Proto)\n  self.state = { _tag: \"Open\", backing }\n  self.deferred = deferred\n  return self\n}\n\n/**\n * A FiberSet can be used to store a collection of fibers.\n * When the associated Scope is closed, all fibers in the set will be interrupted.\n *\n * You can add fibers to the set using `FiberSet.add` or `FiberSet.run`, and the fibers will\n * be automatically removed from the FiberSet when they complete.\n *\n * @example\n * import { Effect, FiberSet } from \"effect\"\n *\n * Effect.gen(function*(_) {\n *   const set = yield* _(FiberSet.make())\n *\n *   // run some effects and add the fibers to the set\n *   yield* _(FiberSet.run(set, Effect.never))\n *   yield* _(FiberSet.run(set, Effect.never))\n *\n *   yield* _(Effect.sleep(1000))\n * }).pipe(\n *   Effect.scoped // The fibers will be interrupted when the scope is closed\n * )\n *\n * @since 2.0.0\n * @categories constructors\n */\nexport const make = <A = unknown, E = unknown>(): Effect.Effect<FiberSet<A, E>, never, Scope.Scope> =>\n  Effect.acquireRelease(\n    Effect.map(Deferred.make<void, unknown>(), (deferred) => unsafeMake(new Set(), deferred)),\n    (set) =>\n      Effect.zipRight(\n        clear(set),\n        Effect.suspend(() => {\n          set.state = { _tag: \"Closed\" }\n          return Deferred.done(set.deferred, Exit.void)\n        })\n      )\n  )\n\n/**\n * Create an Effect run function that is backed by a FiberSet.\n *\n * @since 2.0.0\n * @categories constructors\n */\nexport const makeRuntime = <R = never, A = unknown, E = unknown>(): Effect.Effect<\n  <XE extends E, XA extends A>(\n    effect: Effect.Effect<XA, XE, R>,\n    options?: Runtime.RunForkOptions | undefined\n  ) => Fiber.RuntimeFiber<XA, XE>,\n  never,\n  Scope.Scope | R\n> =>\n  Effect.flatMap(\n    make<A, E>(),\n    (self) => runtime(self)<R>()\n  )\n\nconst internalFiberIdId = -1\nconst internalFiberId = FiberId.make(internalFiberIdId, 0)\nconst isInternalInterruption = Cause.reduceWithContext(undefined, {\n  emptyCase: constFalse,\n  failCase: constFalse,\n  dieCase: constFalse,\n  interruptCase: (_, fiberId) => HashSet.has(FiberId.ids(fiberId), internalFiberIdId),\n  sequentialCase: (_, left, right) => left || right,\n  parallelCase: (_, left, right) => left || right\n})\n\n/**\n * Add a fiber to the FiberSet. When the fiber completes, it will be removed.\n *\n * @since 2.0.0\n * @categories combinators\n */\nexport const unsafeAdd: {\n  /**\n   * Add a fiber to the FiberSet. When the fiber completes, it will be removed.\n   *\n   * @since 2.0.0\n   * @categories combinators\n   */\n  <A, E, XE extends E, XA extends A>(\n    fiber: Fiber.RuntimeFiber<XA, XE>,\n    options?: {\n      readonly interruptAs?: FiberId.FiberId | undefined\n      readonly propagateInterruption?: boolean | undefined\n    } | undefined\n  ): (self: FiberSet<A, E>) => void\n  /**\n   * Add a fiber to the FiberSet. When the fiber completes, it will be removed.\n   *\n   * @since 2.0.0\n   * @categories combinators\n   */\n  <A, E, XE extends E, XA extends A>(\n    self: FiberSet<A, E>,\n    fiber: Fiber.RuntimeFiber<XA, XE>,\n    options?: {\n      readonly interruptAs?: FiberId.FiberId | undefined\n      readonly propagateInterruption?: boolean | undefined\n    } | undefined\n  ): void\n} = dual((args) => isFiberSet(args[0]), <A, E, XE extends E, XA extends A>(\n  self: FiberSet<A, E>,\n  fiber: Fiber.RuntimeFiber<XA, XE>,\n  options?: {\n    readonly interruptAs?: FiberId.FiberId | undefined\n    readonly propagateInterruption?: boolean | undefined\n  } | undefined\n): void => {\n  if (self.state._tag === \"Closed\") {\n    fiber.unsafeInterruptAsFork(FiberId.combine(options?.interruptAs ?? FiberId.none, internalFiberId))\n    return\n  } else if (self.state.backing.has(fiber)) {\n    return\n  }\n  ;(fiber as FiberRuntime<unknown, unknown>).setFiberRef(FiberRef.unhandledErrorLogLevel, Option.none())\n  self.state.backing.add(fiber)\n  fiber.addObserver((exit) => {\n    if (self.state._tag === \"Closed\") {\n      return\n    }\n    self.state.backing.delete(fiber)\n    if (\n      Exit.isFailure(exit) &&\n      (\n        options?.propagateInterruption === true ?\n          !isInternalInterruption(exit.cause) :\n          !Cause.isInterruptedOnly(exit.cause)\n      )\n    ) {\n      Deferred.unsafeDone(self.deferred, exit as any)\n    }\n  })\n})\n\n/**\n * Add a fiber to the FiberSet. When the fiber completes, it will be removed.\n *\n * @since 2.0.0\n * @categories combinators\n */\nexport const add: {\n  /**\n   * Add a fiber to the FiberSet. When the fiber completes, it will be removed.\n   *\n   * @since 2.0.0\n   * @categories combinators\n   */\n  <A, E, XE extends E, XA extends A>(\n    fiber: Fiber.RuntimeFiber<XA, XE>,\n    options?: {\n      readonly propagateInterruption?: boolean | undefined\n    } | undefined\n  ): (self: FiberSet<A, E>) => Effect.Effect<void>\n  /**\n   * Add a fiber to the FiberSet. When the fiber completes, it will be removed.\n   *\n   * @since 2.0.0\n   * @categories combinators\n   */\n  <A, E, XE extends E, XA extends A>(\n    self: FiberSet<A, E>,\n    fiber: Fiber.RuntimeFiber<XA, XE>,\n    options?: {\n      readonly propagateInterruption?: boolean | undefined\n    } | undefined\n  ): Effect.Effect<void>\n} = dual(\n  (args) => isFiberSet(args[0]),\n  <A, E, XE extends E, XA extends A>(\n    self: FiberSet<A, E>,\n    fiber: Fiber.RuntimeFiber<XA, XE>,\n    options?: {\n      readonly propagateInterruption?: boolean | undefined\n    } | undefined\n  ): Effect.Effect<void> =>\n    Effect.fiberIdWith((fiberId) =>\n      Effect.sync(() =>\n        unsafeAdd(self, fiber, {\n          ...options,\n          interruptAs: fiberId\n        })\n      )\n    )\n)\n\n/**\n * @since 2.0.0\n * @categories combinators\n */\nexport const clear = <A, E>(self: FiberSet<A, E>): Effect.Effect<void> =>\n  Effect.withFiberRuntime((clearFiber) => {\n    if (self.state._tag === \"Closed\") {\n      return Effect.void\n    }\n    return Effect.forEach(self.state.backing, (fiber) =>\n      // will be removed by the observer\n      Fiber.interruptAs(fiber, FiberId.combine(clearFiber.id(), internalFiberId)))\n  })\n\n/**\n * Fork an Effect and add the forked fiber to the FiberSet.\n * When the fiber completes, it will be removed from the FiberSet.\n *\n * @since 2.0.0\n * @categories combinators\n */\nexport const run: {\n  /**\n   * Fork an Effect and add the forked fiber to the FiberSet.\n   * When the fiber completes, it will be removed from the FiberSet.\n   *\n   * @since 2.0.0\n   * @categories combinators\n   */\n  <A, E>(\n    self: FiberSet<A, E>,\n    options?: {\n      readonly propagateInterruption?: boolean | undefined\n    } | undefined\n  ): <R, XE extends E, XA extends A>(\n    effect: Effect.Effect<XA, XE, R>\n  ) => Effect.Effect<Fiber.RuntimeFiber<XA, XE>, never, R>\n  /**\n   * Fork an Effect and add the forked fiber to the FiberSet.\n   * When the fiber completes, it will be removed from the FiberSet.\n   *\n   * @since 2.0.0\n   * @categories combinators\n   */\n  <A, E, R, XE extends E, XA extends A>(\n    self: FiberSet<A, E>,\n    effect: Effect.Effect<XA, XE, R>,\n    options?: {\n      readonly propagateInterruption?: boolean | undefined\n    } | undefined\n  ): Effect.Effect<Fiber.RuntimeFiber<XA, XE>, never, R>\n} = function() {\n  const self = arguments[0] as FiberSet<any, any>\n  if (!Effect.isEffect(arguments[1])) {\n    const options = arguments[1] as { readonly propagateInterruption?: boolean | undefined } | undefined\n    return (effect: Effect.Effect<any, any, any>) =>\n      Effect.suspend(() => {\n        if (self.state._tag === \"Closed\") {\n          return Effect.interrupt\n        }\n        return Effect.uninterruptibleMask((restore) =>\n          Effect.tap(\n            restore(Effect.forkDaemon(effect)),\n            (fiber) => add(self, fiber, options)\n          )\n        )\n      })\n  }\n  const effect = arguments[1]\n  const options = arguments[2] as { readonly propagateInterruption?: boolean | undefined } | undefined\n  return Effect.suspend(() => {\n    if (self.state._tag === \"Closed\") {\n      return Effect.interrupt\n    }\n    return Effect.uninterruptibleMask((restore) =>\n      Effect.tap(\n        restore(Effect.forkDaemon(effect)),\n        (fiber) => add(self, fiber, options)\n      )\n    )\n  }) as any\n}\n\n/**\n * Capture a Runtime and use it to fork Effect's, adding the forked fibers to the FiberSet.\n *\n * @example\n * import { Context, Effect, FiberSet } from \"effect\"\n *\n * interface Users {\n *   readonly _: unique symbol\n * }\n * const Users = Context.GenericTag<Users, {\n *    getAll: Effect.Effect<Array<unknown>>\n * }>(\"Users\")\n *\n * Effect.gen(function*(_) {\n *   const set = yield* _(FiberSet.make())\n *   const run = yield* _(FiberSet.runtime(set)<Users>())\n *\n *   // run some effects and add the fibers to the set\n *   run(Effect.andThen(Users, _ => _.getAll))\n * }).pipe(\n *   Effect.scoped // The fibers will be interrupted when the scope is closed\n * )\n *\n * @since 2.0.0\n * @categories combinators\n */\nexport const runtime: <A, E>(\n  self: FiberSet<A, E>\n) => <R = never>() => Effect.Effect<\n  <XE extends E, XA extends A>(\n    effect: Effect.Effect<XA, XE, R>,\n    options?:\n      | Runtime.RunForkOptions & { readonly propagateInterruption?: boolean | undefined }\n      | undefined\n  ) => Fiber.RuntimeFiber<XA, XE>,\n  never,\n  R\n> = <A, E>(self: FiberSet<A, E>) => <R>() =>\n  Effect.map(\n    Effect.runtime<R>(),\n    (runtime) => {\n      const runFork = Runtime.runFork(runtime)\n      return <XE extends E, XA extends A>(\n        effect: Effect.Effect<XA, XE, R>,\n        options?:\n          | Runtime.RunForkOptions & { readonly propagateInterruption?: boolean | undefined }\n          | undefined\n      ) => {\n        const fiber = runFork(effect, options)\n        unsafeAdd(self, fiber)\n        return fiber\n      }\n    }\n  )\n\n/**\n * @since 2.0.0\n * @categories combinators\n */\nexport const size = <A, E>(self: FiberSet<A, E>): Effect.Effect<number> =>\n  Effect.sync(() => self.state._tag === \"Closed\" ? 0 : self.state.backing.size)\n\n/**\n * Join all fibers in the FiberSet. If any of the Fiber's in the set terminate with a failure,\n * the returned Effect will terminate with the first failure that occurred.\n *\n * @since 2.0.0\n * @categories combinators\n * @example\n * import { Effect, FiberSet } from \"effect\";\n *\n * Effect.gen(function* (_) {\n *   const set = yield* _(FiberSet.make());\n *   yield* _(FiberSet.add(set, Effect.runFork(Effect.fail(\"error\"))));\n *\n *   // parent fiber will fail with \"error\"\n *   yield* _(FiberSet.join(set));\n * });\n */\nexport const join = <A, E>(self: FiberSet<A, E>): Effect.Effect<void, E> =>\n  Deferred.await(self.deferred as Deferred.Deferred<void, E>)\n"],"names":["Effect","FiberId","Cause","Deferred","Exit","Fiber","FiberRef","constFalse","dual","HashSet","Inspectable","Iterable","Option","pipeArguments","Predicate","Runtime","TypeId","Symbol","for","isFiberSet","u","hasProperty","Proto","iterator","state","_tag","empty","backing","toString","format","toJSON","_id","NodeInspectSymbol","pipe","arguments","unsafeMake","deferred","self","Object","create","make","acquireRelease","map","Set","set","zipRight","clear","suspend","done","void","makeRuntime","flatMap","runtime","internalFiberIdId","internalFiberId","isInternalInterruption","reduceWithContext","undefined","emptyCase","failCase","dieCase","interruptCase","_","fiberId","has","ids","sequentialCase","left","right","parallelCase","unsafeAdd","args","fiber","options","unsafeInterruptAsFork","combine","interruptAs","none","setFiberRef","unhandledErrorLogLevel","add","addObserver","exit","delete","isFailure","propagateInterruption","cause","isInterruptedOnly","unsafeDone","fiberIdWith","sync","withFiberRuntime","clearFiber","forEach","id","run","isEffect","effect","interrupt","uninterruptibleMask","restore","tap","forkDaemon","runFork","size","join","await"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 18931, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 18937, "column": 0}, "map": {"version":3,"file":"Unify.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Unify.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\n\nimport { identity } from \"./Function.js\"\n\n/**\n * @since 2.0.0\n */\nexport declare const unifySymbol: unique symbol\n\n/**\n * @since 2.0.0\n */\nexport type unifySymbol = typeof unifySymbol\n\n/**\n * @since 2.0.0\n */\nexport declare const typeSymbol: unique symbol\n\n/**\n * @since 2.0.0\n */\nexport type typeSymbol = typeof typeSymbol\n\n/**\n * @since 2.0.0\n */\nexport declare const ignoreSymbol: unique symbol\n\n/**\n * @since 2.0.0\n */\nexport type ignoreSymbol = typeof ignoreSymbol\n\ntype MaybeReturn<F> = F extends () => infer R ? R : NonNullable<F>\n\ntype Values<X extends [any, any]> = X extends [infer A, infer Ignore]\n  ? Exclude<keyof A, Ignore> extends infer k ? k extends keyof A ? MaybeReturn<A[k]> : never : never\n  : never\n\ntype Ignore<X> = X extends { [ignoreSymbol]?: infer Obj } ? keyof NonNullable<Obj>\n  : never\n\ntype ExtractTypes<\n  X\n> = X extends {\n  [typeSymbol]?: infer _Type\n  [unifySymbol]?: infer _Unify\n} ? [NonNullable<_Unify>, Ignore<X>]\n  : never\n\ntype FilterIn<A> = A extends any ? typeSymbol extends keyof A ? A : never : never\n\ntype FilterOut<A> = A extends any ? typeSymbol extends keyof A ? never : A : never\n\n/**\n * @since 2.0.0\n */\nexport type Unify<A> = Values<\n  ExtractTypes<\n    (\n      & FilterIn<A>\n      & { [typeSymbol]: A }\n    )\n  >\n> extends infer Z ? Z | Exclude<A, Z> | FilterOut<A> : never\n\n/**\n * @since 2.0.0\n */\nexport const unify: {\n  /**\n   * @since 2.0.0\n   */\n  <\n    Args extends Array<any>,\n    Args2 extends Array<any>,\n    Args3 extends Array<any>,\n    Args4 extends Array<any>,\n    Args5 extends Array<any>,\n    T\n  >(\n    x: (...args: Args) => (...args: Args2) => (...args: Args3) => (...args: Args4) => (...args: Args5) => T\n  ): (...args: Args) => (...args: Args2) => (...args: Args3) => (...args: Args4) => (...args: Args5) => Unify<T>\n  /**\n   * @since 2.0.0\n   */\n  <\n    Args extends Array<any>,\n    Args2 extends Array<any>,\n    Args3 extends Array<any>,\n    Args4 extends Array<any>,\n    T\n  >(\n    x: (...args: Args) => (...args: Args2) => (...args: Args3) => (...args: Args4) => T\n  ): (...args: Args) => (...args: Args2) => (...args: Args3) => (...args: Args4) => Unify<T>\n  /**\n   * @since 2.0.0\n   */\n  <\n    Args extends Array<any>,\n    Args2 extends Array<any>,\n    Args3 extends Array<any>,\n    T\n  >(\n    x: (...args: Args) => (...args: Args2) => (...args: Args3) => T\n  ): (...args: Args) => (...args: Args2) => (...args: Args3) => Unify<T>\n  /**\n   * @since 2.0.0\n   */\n  <\n    Args extends Array<any>,\n    Args2 extends Array<any>,\n    T\n  >(x: (...args: Args) => (...args: Args2) => T): (...args: Args) => (...args: Args2) => Unify<T>\n  /**\n   * @since 2.0.0\n   */\n  <\n    Args extends Array<any>,\n    T\n  >(x: (...args: Args) => T): (...args: Args) => Unify<T>\n  /**\n   * @since 2.0.0\n   */\n  <T>(x: T): Unify<T>\n} = identity as any\n"],"names":["identity","unify"],"mappings":"AAAA;;;;;AAIA,SAASA,QAAQ,QAAQ,eAAe;;AAoEjC,MAAMC,KAAK,2MAwDdD,WAAe","ignoreList":[0]}},
    {"offset": {"line": 18945, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 18951, "column": 0}, "map": {"version":3,"file":"Match.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/Match.ts"],"sourcesContent":["/**\n * @since 1.0.0\n */\nimport type * as Either from \"./Either.js\"\nimport * as internal from \"./internal/matcher.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport * as Predicate from \"./Predicate.js\"\nimport type * as T from \"./Types.js\"\nimport type { Unify } from \"./Unify.js\"\n\n/**\n * @category type ids\n * @since 1.0.0\n */\nexport const MatcherTypeId: unique symbol = internal.TypeId\n\n/**\n * @category type ids\n * @since 1.0.0\n */\nexport type MatcherTypeId = typeof MatcherTypeId\n\n/**\n * @category model\n * @since 1.0.0\n */\nexport type Matcher<Input, Filters, RemainingApplied, Result, Provided, Return = any> =\n  | TypeMatcher<Input, Filters, RemainingApplied, Result, Return>\n  | ValueMatcher<Input, Filters, RemainingApplied, Result, Provided, Return>\n\n/**\n * @category model\n * @since 1.0.0\n */\nexport interface TypeMatcher<in Input, out Filters, out Remaining, out Result, out Return = any> extends Pipeable {\n  readonly _tag: \"TypeMatcher\"\n  readonly [MatcherTypeId]: {\n    readonly _input: T.Contravariant<Input>\n    readonly _filters: T.Covariant<Filters>\n    readonly _remaining: T.Covariant<Remaining>\n    readonly _result: T.Covariant<Result>\n    readonly _return: T.Covariant<Return>\n  }\n  readonly cases: ReadonlyArray<Case>\n  add<I, R, RA, A>(_case: Case): TypeMatcher<I, R, RA, A>\n}\n\n/**\n * @category model\n * @since 1.0.0\n */\nexport interface ValueMatcher<in Input, Filters, out Remaining, out Result, Provided, out Return = any>\n  extends Pipeable\n{\n  readonly _tag: \"ValueMatcher\"\n  readonly [MatcherTypeId]: {\n    readonly _input: T.Contravariant<Input>\n    readonly _filters: T.Covariant<Filters>\n    readonly _result: T.Covariant<Result>\n    readonly _return: T.Covariant<Return>\n  }\n  readonly provided: Provided\n  readonly value: Either.Either<Provided, Remaining>\n  add<I, R, RA, A, Pr>(_case: Case): ValueMatcher<I, R, RA, A, Pr>\n}\n\n/**\n * @category model\n * @since 1.0.0\n */\nexport type Case = When | Not\n\n/**\n * @category model\n * @since 1.0.0\n */\nexport interface When {\n  readonly _tag: \"When\"\n  guard(u: unknown): boolean\n  evaluate(input: unknown): any\n}\n\n/**\n * @category model\n * @since 1.0.0\n */\nexport interface Not {\n  readonly _tag: \"Not\"\n  guard(u: unknown): boolean\n  evaluate(input: unknown): any\n}\n\n/**\n * @category constructors\n * @since 1.0.0\n */\nexport const type: <I>() => Matcher<I, Types.Without<never>, I, never, never> = internal.type\n\n/**\n * @category constructors\n * @since 1.0.0\n */\nexport const value: <const I>(\n  i: I\n) => Matcher<I, Types.Without<never>, I, never, I> = internal.value\n\n/**\n * @category constructors\n * @since 1.0.0\n */\nexport const valueTags: <\n  const I,\n  P extends\n    & {\n      readonly [Tag in Types.Tags<\"_tag\", I> & string]: (\n        _: Extract<I, { readonly _tag: Tag }>\n      ) => any\n    }\n    & { readonly [Tag in Exclude<keyof P, Types.Tags<\"_tag\", I>>]: never }\n>(fields: P) => (input: I) => Unify<ReturnType<P[keyof P]>> = internal.valueTags\n\n/**\n * @category constructors\n * @since 1.0.0\n */\nexport const typeTags: <I>() => <\n  P extends\n    & {\n      readonly [Tag in Types.Tags<\"_tag\", I> & string]: (\n        _: Extract<I, { readonly _tag: Tag }>\n      ) => any\n    }\n    & { readonly [Tag in Exclude<keyof P, Types.Tags<\"_tag\", I>>]: never }\n>(fields: P) => (input: I) => Unify<ReturnType<P[keyof P]>> = internal.typeTags\n\n/**\n * @category combinators\n * @since 1.0.0\n */\nexport const withReturnType: <Ret>() => <I, F, R, A, Pr, _>(\n  self: Matcher<I, F, R, A, Pr, _>\n) => [Ret] extends [[A] extends [never] ? any : A] ? Matcher<I, F, R, A, Pr, Ret>\n  : \"withReturnType constraint does not extend Result type\" = internal.withReturnType\n\n/**\n * @category combinators\n * @since 1.0.0\n */\nexport const when: <\n  R,\n  const P extends Types.PatternPrimitive<R> | Types.PatternBase<R>,\n  Ret,\n  Fn extends (_: Types.WhenMatch<R, P>) => Ret\n>(\n  pattern: P,\n  f: Fn\n) => <I, F, A, Pr>(\n  self: Matcher<I, F, R, A, Pr, Ret>\n) => Matcher<\n  I,\n  Types.AddWithout<F, Types.PForExclude<P>>,\n  Types.ApplyFilters<I, Types.AddWithout<F, Types.PForExclude<P>>>,\n  A | ReturnType<Fn>,\n  Pr,\n  Ret\n> = internal.when\n\n/**\n * @category combinators\n * @since 1.0.0\n */\nexport const whenOr: <\n  R,\n  const P extends ReadonlyArray<Types.PatternPrimitive<R> | Types.PatternBase<R>>,\n  Ret,\n  Fn extends (_: Types.WhenMatch<R, P[number]>) => Ret\n>(\n  ...args: [...patterns: P, f: Fn]\n) => <I, F, A, Pr>(\n  self: Matcher<I, F, R, A, Pr, Ret>\n) => Matcher<\n  I,\n  Types.AddWithout<F, Types.PForExclude<P[number]>>,\n  Types.ApplyFilters<I, Types.AddWithout<F, Types.PForExclude<P[number]>>>,\n  A | ReturnType<Fn>,\n  Pr,\n  Ret\n> = internal.whenOr\n\n/**\n * @category combinators\n * @since 1.0.0\n */\nexport const whenAnd: <\n  R,\n  const P extends ReadonlyArray<Types.PatternPrimitive<R> | Types.PatternBase<R>>,\n  Ret,\n  Fn extends (_: Types.WhenMatch<R, T.UnionToIntersection<P[number]>>) => Ret\n>(\n  ...args: [...patterns: P, f: Fn]\n) => <I, F, A, Pr>(\n  self: Matcher<I, F, R, A, Pr, Ret>\n) => Matcher<\n  I,\n  Types.AddWithout<F, Types.PForExclude<T.UnionToIntersection<P[number]>>>,\n  Types.ApplyFilters<I, Types.AddWithout<F, Types.PForExclude<T.UnionToIntersection<P[number]>>>>,\n  A | ReturnType<Fn>,\n  Pr\n> = internal.whenAnd\n\n/**\n * @category combinators\n * @since 1.0.0\n */\nexport const discriminator: <D extends string>(\n  field: D\n) => <R, P extends Types.Tags<D, R> & string, Ret, B extends Ret>(\n  ...pattern: [first: P, ...values: Array<P>, f: (_: Extract<R, Record<D, P>>) => B]\n) => <I, F, A, Pr>(\n  self: Matcher<I, F, R, A, Pr, Ret>\n) => Matcher<\n  I,\n  Types.AddWithout<F, Extract<R, Record<D, P>>>,\n  Types.ApplyFilters<I, Types.AddWithout<F, Extract<R, Record<D, P>>>>,\n  B | A,\n  Pr,\n  Ret\n> = internal.discriminator\n\n/**\n * @category combinators\n * @since 1.0.0\n */\nexport const discriminatorStartsWith: <D extends string>(\n  field: D\n) => <R, P extends string, Ret, B extends Ret>(\n  pattern: P,\n  f: (_: Extract<R, Record<D, `${P}${string}`>>) => B\n) => <I, F, A, Pr>(\n  self: Matcher<I, F, R, A, Pr, Ret>\n) => Matcher<\n  I,\n  Types.AddWithout<F, Extract<R, Record<D, `${P}${string}`>>>,\n  Types.ApplyFilters<I, Types.AddWithout<F, Extract<R, Record<D, `${P}${string}`>>>>,\n  B | A,\n  Pr,\n  Ret\n> = internal.discriminatorStartsWith as any\n\n/**\n * @category combinators\n * @since 1.0.0\n */\nexport const discriminators: <D extends string>(\n  field: D\n) => <\n  R,\n  Ret,\n  P extends\n    & { readonly [Tag in Types.Tags<D, R> & string]?: ((_: Extract<R, Record<D, Tag>>) => Ret) | undefined }\n    & { readonly [Tag in Exclude<keyof P, Types.Tags<D, R>>]: never }\n>(\n  fields: P\n) => <I, F, A, Pr>(\n  self: Matcher<I, F, R, A, Pr, Ret>\n) => Matcher<\n  I,\n  Types.AddWithout<F, Extract<R, Record<D, keyof P>>>,\n  Types.ApplyFilters<I, Types.AddWithout<F, Extract<R, Record<D, keyof P>>>>,\n  A | ReturnType<P[keyof P] & {}>,\n  Pr,\n  Ret\n> = internal.discriminators\n\n/**\n * @category combinators\n * @since 1.0.0\n */\nexport const discriminatorsExhaustive: <D extends string>(\n  field: D\n) => <\n  R,\n  Ret,\n  P extends\n    & { readonly [Tag in Types.Tags<D, R> & string]: (_: Extract<R, Record<D, Tag>>) => Ret }\n    & { readonly [Tag in Exclude<keyof P, Types.Tags<D, R>>]: never }\n>(\n  fields: P\n) => <I, F, A, Pr>(\n  self: Matcher<I, F, R, A, Pr, Ret>\n) => [Pr] extends [never] ? (u: I) => Unify<A | ReturnType<P[keyof P]>> : Unify<A | ReturnType<P[keyof P]>> =\n  internal.discriminatorsExhaustive\n\n/**\n * @category combinators\n * @since 1.0.0\n */\nexport const tag: <R, P extends Types.Tags<\"_tag\", R> & string, Ret, B extends Ret>(\n  ...pattern: [first: P, ...values: Array<P>, f: (_: Extract<T.NoInfer<R>, Record<\"_tag\", P>>) => B]\n) => <I, F, A, Pr>(\n  self: Matcher<I, F, R, A, Pr, Ret>\n) => Matcher<\n  I,\n  Types.AddWithout<F, Extract<R, Record<\"_tag\", P>>>,\n  Types.ApplyFilters<I, Types.AddWithout<F, Extract<R, Record<\"_tag\", P>>>>,\n  B | A,\n  Pr,\n  Ret\n> = internal.tag\n\n/**\n * @category combinators\n * @since 1.0.0\n */\nexport const tagStartsWith: <R, P extends string, Ret, B extends Ret>(\n  pattern: P,\n  f: (_: Extract<T.NoInfer<R>, Record<\"_tag\", `${P}${string}`>>) => B\n) => <I, F, A, Pr>(\n  self: Matcher<I, F, R, A, Pr, Ret>\n) => Matcher<\n  I,\n  Types.AddWithout<F, Extract<R, Record<\"_tag\", `${P}${string}`>>>,\n  Types.ApplyFilters<I, Types.AddWithout<F, Extract<R, Record<\"_tag\", `${P}${string}`>>>>,\n  B | A,\n  Pr,\n  Ret\n> = internal.tagStartsWith as any\n\n/**\n * @category combinators\n * @since 1.0.0\n */\nexport const tags: <\n  R,\n  Ret,\n  P extends\n    & { readonly [Tag in Types.Tags<\"_tag\", R> & string]?: ((_: Extract<R, Record<\"_tag\", Tag>>) => Ret) | undefined }\n    & { readonly [Tag in Exclude<keyof P, Types.Tags<\"_tag\", R>>]: never }\n>(\n  fields: P\n) => <I, F, A, Pr>(\n  self: Matcher<I, F, R, A, Pr, Ret>\n) => Matcher<\n  I,\n  Types.AddWithout<F, Extract<R, Record<\"_tag\", keyof P>>>,\n  Types.ApplyFilters<I, Types.AddWithout<F, Extract<R, Record<\"_tag\", keyof P>>>>,\n  A | ReturnType<P[keyof P] & {}>,\n  Pr,\n  Ret\n> = internal.tags\n\n/**\n * @category combinators\n * @since 1.0.0\n */\nexport const tagsExhaustive: <\n  R,\n  Ret,\n  P extends\n    & { readonly [Tag in Types.Tags<\"_tag\", R> & string]: (_: Extract<R, Record<\"_tag\", Tag>>) => Ret }\n    & { readonly [Tag in Exclude<keyof P, Types.Tags<\"_tag\", R>>]: never }\n>(\n  fields: P\n) => <I, F, A, Pr>(\n  self: Matcher<I, F, R, A, Pr, Ret>\n) => [Pr] extends [never] ? (u: I) => Unify<A | ReturnType<P[keyof P]>> : Unify<A | ReturnType<P[keyof P]>> =\n  internal.tagsExhaustive\n\n/**\n * @category combinators\n * @since 1.0.0\n */\nexport const not: <\n  R,\n  const P extends Types.PatternPrimitive<R> | Types.PatternBase<R>,\n  Ret,\n  Fn extends (_: Exclude<R, Types.ExtractMatch<R, Types.PForExclude<P>>>) => Ret\n>(\n  pattern: P,\n  f: Fn\n) => <I, F, A, Pr>(\n  self: Matcher<I, F, R, A, Pr, Ret>\n) => Matcher<\n  I,\n  Types.AddOnly<F, Types.WhenMatch<R, P>>,\n  Types.ApplyFilters<I, Types.AddOnly<F, Types.WhenMatch<R, P>>>,\n  A | ReturnType<Fn>,\n  Pr,\n  Ret\n> = internal.not\n\n/**\n * @category predicates\n * @since 1.0.0\n */\nexport const nonEmptyString: SafeRefinement<string, never> = internal.nonEmptyString\n\n/**\n * @category predicates\n * @since 1.0.0\n */\nexport const is: <\n  Literals extends ReadonlyArray<string | number | bigint | boolean | null>\n>(...literals: Literals) => Predicate.Refinement<unknown, Literals[number]> = internal.is\n\n/**\n * @category predicates\n * @since 1.0.0\n */\nexport const string: Predicate.Refinement<unknown, string> = Predicate.isString\n\n/**\n * @category predicates\n * @since 1.0.0\n */\nexport const number: Predicate.Refinement<unknown, number> = Predicate.isNumber\n\n/**\n * @category predicates\n * @since 1.0.0\n */\nexport const any: SafeRefinement<unknown, any> = internal.any\n\n/**\n * @category predicates\n * @since 1.0.0\n */\nexport const defined: <A>(u: A) => u is A & {} = internal.defined\n\n/**\n * @category predicates\n * @since 1.0.0\n */\nexport const boolean: Predicate.Refinement<unknown, boolean> = Predicate.isBoolean\n\nconst _undefined: Predicate.Refinement<unknown, undefined> = Predicate.isUndefined\nexport {\n  /**\n   * @category predicates\n   * @since 1.0.0\n   */\n  _undefined as undefined\n}\n\nconst _null: Predicate.Refinement<unknown, null> = Predicate.isNull\nexport {\n  /**\n   * @category predicates\n   * @since 1.0.0\n   */\n  _null as null\n}\n\n/**\n * @category predicates\n * @since 1.0.0\n */\nexport const bigint: Predicate.Refinement<unknown, bigint> = Predicate.isBigInt\n\n/**\n * @category predicates\n * @since 1.0.0\n */\nexport const symbol: Predicate.Refinement<unknown, symbol> = Predicate.isSymbol\n\n/**\n * @category predicates\n * @since 1.0.0\n */\nexport const date: Predicate.Refinement<unknown, Date> = Predicate.isDate\n\n/**\n * @category predicates\n * @since 1.0.0\n */\nexport const record: Predicate.Refinement<unknown, { [x: string | symbol]: unknown }> = Predicate.isRecord\n\n/**\n * @category predicates\n * @since 1.0.0\n */\nexport const instanceOf: <A extends abstract new(...args: any) => any>(\n  constructor: A\n) => SafeRefinement<InstanceType<A>, never> = internal.instanceOf\n\n/**\n * @category predicates\n * @since 1.0.0\n */\nexport const instanceOfUnsafe: <A extends abstract new(...args: any) => any>(\n  constructor: A\n) => SafeRefinement<InstanceType<A>, InstanceType<A>> = internal.instanceOf\n\n/**\n * @category conversions\n * @since 1.0.0\n */\nexport const orElse: <RA, Ret, F extends (_: RA) => Ret>(\n  f: F\n) => <I, R, A, Pr>(\n  self: Matcher<I, R, RA, A, Pr, Ret>\n) => [Pr] extends [never] ? (input: I) => Unify<ReturnType<F> | A> : Unify<ReturnType<F> | A> = internal.orElse\n\n/**\n * @category conversions\n * @since 1.0.0\n */\nexport const orElseAbsurd: <I, R, RA, A, Pr, Ret>(\n  self: Matcher<I, R, RA, A, Pr, Ret>\n) => [Pr] extends [never] ? (input: I) => Unify<A> : Unify<A> = internal.orElseAbsurd\n\n/**\n * @category conversions\n * @since 1.0.0\n */\nexport const either: <I, F, R, A, Pr, Ret>(\n  self: Matcher<I, F, R, A, Pr, Ret>\n) => [Pr] extends [never] ? (input: I) => Either.Either<Unify<A>, R> : Either.Either<Unify<A>, R> = internal.either\n\n/**\n * @category conversions\n * @since 1.0.0\n */\nexport const option: <I, F, R, A, Pr, Ret>(\n  self: Matcher<I, F, R, A, Pr, Ret>\n) => [Pr] extends [never] ? (input: I) => Option.Option<Unify<A>> : Option.Option<Unify<A>> = internal.option\n\n/**\n * @category conversions\n * @since 1.0.0\n */\nexport const exhaustive: <I, F, A, Pr, Ret>(\n  self: Matcher<I, F, never, A, Pr, Ret>\n) => [Pr] extends [never] ? (u: I) => Unify<A> : Unify<A> = internal.exhaustive\n\n/**\n * @since 1.0.0\n * @category type ids\n */\nexport const SafeRefinementId = Symbol.for(\"effect/SafeRefinement\")\n\n/**\n * @since 1.0.0\n * @category type ids\n */\nexport type SafeRefinementId = typeof SafeRefinementId\n\n/**\n * @category model\n * @since 1.0.0\n */\nexport interface SafeRefinement<in A, out R = A> {\n  readonly [SafeRefinementId]: (a: A) => R\n}\n\nconst Fail = Symbol.for(\"effect/Fail\")\ntype Fail = typeof Fail\n\n/**\n * @since 1.0.0\n */\nexport declare namespace Types {\n  /**\n   * @since 1.0.0\n   */\n  export type WhenMatch<R, P> =\n    // check for any\n    [0] extends [1 & R] ? PForMatch<P>\n      : P extends SafeRefinement<infer SP, never> ? SP\n      : P extends Predicate.Refinement<infer _R, infer RP>\n      // try to narrow refinement\n        ? [Extract<R, RP>] extends [infer X] ? [X] extends [never]\n            // fallback to original refinement\n            ? RP\n          : X\n        : never\n      : P extends PredicateA<infer PP> ? PP\n      : ExtractMatch<R, PForMatch<P>>\n\n  /**\n   * @since 1.0.0\n   */\n  export type NotMatch<R, P> = Exclude<R, ExtractMatch<R, PForExclude<P>>>\n\n  /**\n   * @since 1.0.0\n   */\n  export type PForMatch<P> = [SafeRefinementP<ResolvePred<P>>] extends [infer X] ? X\n    : never\n\n  /**\n   * @since 1.0.0\n   */\n  export type PForExclude<P> = [SafeRefinementR<ToSafeRefinement<P>>] extends [infer X] ? X\n    : never\n\n  // utilities\n  type PredicateA<A> = Predicate.Predicate<A> | Predicate.Refinement<A, A>\n\n  type SafeRefinementP<A> = A extends never ? never\n    : A extends SafeRefinement<infer S, infer _> ? S\n    : A extends Function ? A\n    : A extends Record<string, any> ? { [K in keyof A]: SafeRefinementP<A[K]> }\n    : A\n\n  type SafeRefinementR<A> = A extends never ? never\n    : A extends SafeRefinement<infer _, infer R> ? R\n    : A extends Function ? A\n    : A extends Record<string, any> ? { [K in keyof A]: SafeRefinementR<A[K]> }\n    : A\n\n  type ResolvePred<A> = A extends never ? never\n    : A extends Predicate.Refinement<any, infer P> ? P\n    : A extends Predicate.Predicate<infer P> ? P\n    : A extends SafeRefinement<any> ? A\n    : A extends Record<string, any> ? { [K in keyof A]: ResolvePred<A[K]> }\n    : A\n\n  type ToSafeRefinement<A> = A extends never ? never\n    : A extends Predicate.Refinement<any, infer P> ? SafeRefinement<P, P>\n    : A extends Predicate.Predicate<infer P> ? SafeRefinement<P, never>\n    : A extends SafeRefinement<any> ? A\n    : A extends Record<string, any> ? { [K in keyof A]: ToSafeRefinement<A[K]> }\n    : NonLiteralsTo<A, never>\n\n  type NonLiteralsTo<A, T> = [A] extends [string | number | boolean | bigint] ? [string] extends [A] ? T\n    : [number] extends [A] ? T\n    : [boolean] extends [A] ? T\n    : [bigint] extends [A] ? T\n    : A\n    : A\n\n  /**\n   * @since 1.0.0\n   */\n  export type PatternBase<A> = A extends ReadonlyArray<infer _T> ? ReadonlyArray<any> | PatternPrimitive<A>\n    : A extends Record<string, any> ? Partial<\n        { [K in keyof A]: PatternPrimitive<A[K] & {}> | PatternBase<A[K] & {}> }\n      >\n    : never\n\n  /**\n   * @since 1.0.0\n   */\n  export type PatternPrimitive<A> = PredicateA<A> | A | SafeRefinement<any>\n\n  /**\n   * @since 1.0.0\n   */\n  export interface Without<out X> {\n    readonly _tag: \"Without\"\n    readonly _X: X\n  }\n\n  /**\n   * @since 1.0.0\n   */\n  export interface Only<out X> {\n    readonly _tag: \"Only\"\n    readonly _X: X\n  }\n\n  /**\n   * @since 1.0.0\n   */\n  export type AddWithout<A, X> = [A] extends [Without<infer WX>] ? Without<X | WX>\n    : [A] extends [Only<infer OX>] ? Only<Exclude<OX, X>>\n    : never\n\n  /**\n   * @since 1.0.0\n   */\n  export type AddOnly<A, X> = [A] extends [Without<infer WX>] ? [X] extends [WX] ? never\n    : Only<X>\n    : [A] extends [Only<infer OX>] ? [X] extends [OX] ? Only<X>\n      : never\n    : never\n\n  /**\n   * @since 1.0.0\n   */\n  export type ApplyFilters<I, A> = A extends Only<infer X> ? X\n    : A extends Without<infer X> ? Exclude<I, X>\n    : never\n\n  /**\n   * @since 1.0.0\n   */\n  export type Tags<D extends string, P> = P extends Record<D, infer X> ? X : never\n\n  /**\n   * @since 1.0.0\n   */\n  export type ArrayToIntersection<A extends ReadonlyArray<any>> = T.UnionToIntersection<\n    A[number]\n  >\n\n  /**\n   * @since 1.0.0\n   */\n  export type ExtractMatch<I, P> = [ExtractAndNarrow<I, P>] extends [infer EI] ? EI\n    : never\n\n  type Replace<A, B> = A extends Function ? A\n    : A extends Record<string | number, any> ? { [K in keyof A]: K extends keyof B ? Replace<A[K], B[K]> : A[K] }\n    : [B] extends [A] ? B\n    : A\n\n  type MaybeReplace<I, P> = [P] extends [I] ? P\n    : [I] extends [P] ? Replace<I, P>\n    : Fail\n\n  type BuiltInObjects =\n    | Function\n    | Date\n    | RegExp\n    | Generator\n    | { readonly [Symbol.toStringTag]: string }\n\n  type IsPlainObject<T> = T extends BuiltInObjects ? false\n    : T extends Record<string, any> ? true\n    : false\n\n  type Simplify<A> = { [K in keyof A]: A[K] } & {}\n\n  type ExtractAndNarrow<Input, P> =\n    // unknown is a wildcard pattern\n    unknown extends P ? Input\n      : Input extends infer I ? Exclude<\n          I extends ReadonlyArray<any> ? P extends ReadonlyArray<any> ? {\n                readonly [K in keyof I]: K extends keyof P ? ExtractAndNarrow<I[K], P[K]>\n                  : I[K]\n              } extends infer R ? Fail extends R[keyof R] ? never\n                : R\n              : never\n            : never\n            : IsPlainObject<I> extends true ? string extends keyof I ? I extends P ? I\n                : never\n              : symbol extends keyof I ? I extends P ? I\n                : never\n              : Simplify<\n                & { [RK in Extract<keyof I, keyof P>]-?: ExtractAndNarrow<I[RK], P[RK]> }\n                & Omit<I, keyof P>\n              > extends infer R ? keyof P extends NonFailKeys<R> ? R\n                : never\n              : never\n            : MaybeReplace<I, P> extends infer R ? [I] extends [R] ? I\n              : R\n            : never,\n          Fail\n        > :\n      never\n\n  type NonFailKeys<A> = keyof A & {} extends infer K ? K extends keyof A ? A[K] extends Fail ? never : K\n    : never :\n    never\n}\n"],"names":["internal","Predicate","MatcherTypeId","TypeId","type","value","valueTags","typeTags","withReturnType","when","whenOr","whenAnd","discriminator","discriminatorStartsWith","discriminators","discriminatorsExhaustive","tag","tagStartsWith","tags","tagsExhaustive","not","nonEmptyString","is","string","isString","number","isNumber","any","defined","boolean","isBoolean","_undefined","isUndefined","undefined","_null","isNull","null","bigint","isBigInt","symbol","isSymbol","date","isDate","record","isRecord","instanceOf","instanceOfUnsafe","orElse","orElseAbsurd","either","option","exhaustive","SafeRefinementId","Symbol","for","Fail"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,OAAO,KAAKA,QAAQ,MAAM,uBAAuB;AAGjD,OAAO,KAAKC,SAAS,MAAM,gBAAgB;;;AAQpC,MAAMC,aAAa,GAAkBF,QAAQ,2MAACG,MAAM;AAkFpD,MAAMC,IAAI,GAA+DJ,QAAQ,2MAACI,IAAI;AAMtF,MAAMC,KAAK,GAEmCL,QAAQ,2MAACK,KAAK;AAM5D,MAAMC,SAAS,GASwCN,QAAQ,2MAACM,SAAS;AAMzE,MAAMC,QAAQ,GAQyCP,QAAQ,2MAACO,QAAQ;AAMxE,MAAMC,cAAc,GAGmCR,QAAQ,2MAACQ,cAAc;AAM9E,MAAMC,IAAI,GAiBbT,QAAQ,2MAACS,IAAI;AAMV,MAAMC,MAAM,GAgBfV,QAAQ,2MAACU,MAAM;AAMZ,MAAMC,OAAO,GAehBX,QAAQ,2MAACW,OAAO;AAMb,MAAMC,aAAa,GAatBZ,QAAQ,2MAACY,aAAa;AAMnB,MAAMC,uBAAuB,GAchCb,QAAQ,2MAACa,uBAA8B;AAMpC,MAAMC,cAAc,GAmBvBd,QAAQ,2MAACc,cAAc;AAMpB,MAAMC,wBAAwB,GAanCf,QAAQ,2MAACe,wBAAwB;AAM5B,MAAMC,GAAG,GAWZhB,QAAQ,2MAACgB,GAAG;AAMT,MAAMC,aAAa,GAYtBjB,QAAQ,2MAACiB,aAAoB;AAM1B,MAAMC,IAAI,GAiBblB,QAAQ,2MAACkB,IAAI;AAMV,MAAMC,cAAc,GAWzBnB,QAAQ,2MAACmB,cAAc;AAMlB,MAAMC,GAAG,GAiBZpB,QAAQ,2MAACoB,GAAG;AAMT,MAAMC,cAAc,GAAkCrB,QAAQ,2MAACqB,cAAc;AAM7E,MAAMC,EAAE,GAE+DtB,QAAQ,2MAACsB,EAAE;AAMlF,MAAMC,MAAM,GAA0CtB,SAAS,gMAACuB,QAAQ;AAMxE,MAAMC,MAAM,GAA0CxB,SAAS,gMAACyB,QAAQ;AAMxE,MAAMC,GAAG,GAAiC3B,QAAQ,2MAAC2B,GAAG;AAMtD,MAAMC,OAAO,GAA6B5B,QAAQ,2MAAC4B,OAAO;AAM1D,MAAMC,OAAO,GAA2C5B,SAAS,gMAAC6B,SAAS;AAElF,MAAMC,UAAU,GAA6C9B,SAAS,gMAAC+B,WAAW;;AASlF,MAAME,KAAK,GAAwCjC,SAAS,gMAACkC,MAAM;;AAa5D,MAAME,MAAM,GAA0CpC,SAAS,gMAACqC,QAAQ;AAMxE,MAAMC,MAAM,GAA0CtC,SAAS,gMAACuC,QAAQ;AAMxE,MAAMC,IAAI,GAAwCxC,SAAS,gMAACyC,MAAM;AAMlE,MAAMC,MAAM,GAAqE1C,SAAS,gMAAC2C,QAAQ;AAMnG,MAAMC,UAAU,GAEuB7C,QAAQ,2MAAC6C,UAAU;AAM1D,MAAMC,gBAAgB,GAE2B9C,QAAQ,2MAAC6C,UAAU;AAMpE,MAAME,MAAM,GAI6E/C,QAAQ,2MAAC+C,MAAM;AAMxG,MAAMC,YAAY,GAEuChD,QAAQ,2MAACgD,YAAY;AAM9E,MAAMC,MAAM,GAEiFjD,QAAQ,2MAACiD,MAAM;AAM5G,MAAMC,MAAM,GAE2ElD,QAAQ,2MAACkD,MAAM;AAMtG,MAAMC,UAAU,GAEqCnD,QAAQ,2MAACmD,UAAU;AAMxE,MAAMC,gBAAgB,GAAA,WAAA,GAAGC,MAAM,CAACC,GAAG,CAAC,uBAAuB,CAAC;AAgBnE,MAAMC,IAAI,GAAA,WAAA,GAAGF,MAAM,CAACC,GAAG,CAAC,aAAa,CAAC","ignoreList":[0]}},
    {"offset": {"line": 19038, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}