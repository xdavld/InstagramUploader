{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"fiberRuntime.js","sources":["file:///Users/david/src/5.%20Semester/SoftwareEngineering-Project/node_modules/.pnpm/effect%403.10.3/node_modules/effect/src/internal/fiberRuntime.ts"],"sourcesContent":["import { internalCall } from \"effect/Utils\"\nimport * as RA from \"../Array.js\"\nimport * as Boolean from \"../Boolean.js\"\nimport type * as Cause from \"../Cause.js\"\nimport * as Chunk from \"../Chunk.js\"\nimport type * as Clock from \"../Clock.js\"\nimport type { ConfigProvider } from \"../ConfigProvider.js\"\nimport * as Context from \"../Context.js\"\nimport type { DefaultServices } from \"../DefaultServices.js\"\nimport * as Deferred from \"../Deferred.js\"\nimport type * as Duration from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport * as Effectable from \"../Effectable.js\"\nimport type * as Either from \"../Either.js\"\nimport * as ExecutionStrategy from \"../ExecutionStrategy.js\"\nimport type * as Exit from \"../Exit.js\"\nimport type * as Fiber from \"../Fiber.js\"\nimport * as FiberId from \"../FiberId.js\"\nimport type * as FiberRef from \"../FiberRef.js\"\nimport * as FiberRefs from \"../FiberRefs.js\"\nimport * as FiberRefsPatch from \"../FiberRefsPatch.js\"\nimport * as FiberStatus from \"../FiberStatus.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { dual, identity, pipe } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport * as HashMap from \"../HashMap.js\"\nimport * as HashSet from \"../HashSet.js\"\nimport * as Inspectable from \"../Inspectable.js\"\nimport type { Logger } from \"../Logger.js\"\nimport * as LogLevel from \"../LogLevel.js\"\nimport type * as MetricLabel from \"../MetricLabel.js\"\nimport * as Micro from \"../Micro.js\"\nimport * as MRef from \"../MutableRef.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport * as Predicate from \"../Predicate.js\"\nimport type * as Random from \"../Random.js\"\nimport * as Ref from \"../Ref.js\"\nimport type { Entry, Request } from \"../Request.js\"\nimport type * as RequestBlock from \"../RequestBlock.js\"\nimport type * as RuntimeFlags from \"../RuntimeFlags.js\"\nimport * as RuntimeFlagsPatch from \"../RuntimeFlagsPatch.js\"\nimport { currentScheduler, type Scheduler } from \"../Scheduler.js\"\nimport type * as Scope from \"../Scope.js\"\nimport type * as Supervisor from \"../Supervisor.js\"\nimport type * as Tracer from \"../Tracer.js\"\nimport type { Concurrency, NoInfer } from \"../Types.js\"\nimport * as _RequestBlock from \"./blockedRequests.js\"\nimport * as internalCause from \"./cause.js\"\nimport * as clock from \"./clock.js\"\nimport { currentRequestMap } from \"./completedRequestMap.js\"\nimport * as concurrency from \"./concurrency.js\"\nimport { configProviderTag } from \"./configProvider.js\"\nimport * as internalEffect from \"./core-effect.js\"\nimport * as core from \"./core.js\"\nimport * as defaultServices from \"./defaultServices.js\"\nimport { consoleTag } from \"./defaultServices/console.js\"\nimport * as executionStrategy from \"./executionStrategy.js\"\nimport * as internalFiber from \"./fiber.js\"\nimport * as FiberMessage from \"./fiberMessage.js\"\nimport * as fiberRefs from \"./fiberRefs.js\"\nimport * as fiberScope from \"./fiberScope.js\"\nimport * as internalLogger from \"./logger.js\"\nimport * as metric from \"./metric.js\"\nimport * as metricBoundaries from \"./metric/boundaries.js\"\nimport * as metricLabel from \"./metric/label.js\"\nimport * as OpCodes from \"./opCodes/effect.js\"\nimport { randomTag } from \"./random.js\"\nimport { complete } from \"./request.js\"\nimport * as _runtimeFlags from \"./runtimeFlags.js\"\nimport { OpSupervision } from \"./runtimeFlags.js\"\nimport * as supervisor from \"./supervisor.js\"\nimport * as SupervisorPatch from \"./supervisor/patch.js\"\nimport * as tracer from \"./tracer.js\"\nimport * as version from \"./version.js\"\n\n/** @internal */\nexport const fiberStarted = metric.counter(\"effect_fiber_started\", { incremental: true })\n/** @internal */\nexport const fiberActive = metric.counter(\"effect_fiber_active\")\n/** @internal */\nexport const fiberSuccesses = metric.counter(\"effect_fiber_successes\", { incremental: true })\n/** @internal */\nexport const fiberFailures = metric.counter(\"effect_fiber_failures\", { incremental: true })\n/** @internal */\nexport const fiberLifetimes = metric.tagged(\n  metric.histogram(\n    \"effect_fiber_lifetimes\",\n    metricBoundaries.exponential({\n      start: 0.5,\n      factor: 2,\n      count: 35\n    })\n  ),\n  \"time_unit\",\n  \"milliseconds\"\n)\n\n/** @internal */\ntype EvaluationSignal =\n  | EvaluationSignalContinue\n  | EvaluationSignalDone\n  | EvaluationSignalYieldNow\n\n/** @internal */\nconst EvaluationSignalContinue = \"Continue\" as const\n\n/** @internal */\ntype EvaluationSignalContinue = typeof EvaluationSignalContinue\n\n/** @internal */\nconst EvaluationSignalDone = \"Done\" as const\n\n/** @internal */\ntype EvaluationSignalDone = typeof EvaluationSignalDone\n\n/** @internal */\nconst EvaluationSignalYieldNow = \"Yield\" as const\n\n/** @internal */\ntype EvaluationSignalYieldNow = typeof EvaluationSignalYieldNow\n\nconst runtimeFiberVariance = {\n  /* c8 ignore next */\n  _E: (_: never) => _,\n  /* c8 ignore next */\n  _A: (_: never) => _\n}\n\nconst absurd = (_: never): never => {\n  throw new Error(\n    `BUG: FiberRuntime - ${\n      Inspectable.toStringUnknown(_)\n    } - please report an issue at https://github.com/Effect-TS/effect/issues`\n  )\n}\n\nconst YieldedOp = Symbol.for(\"effect/internal/fiberRuntime/YieldedOp\")\ntype YieldedOp = typeof YieldedOp\nconst yieldedOpChannel: {\n  currentOp: core.Primitive | null\n} = globalValue(\"effect/internal/fiberRuntime/yieldedOpChannel\", () => ({\n  currentOp: null\n}))\n\nconst contOpSuccess = {\n  [OpCodes.OP_ON_SUCCESS]: (\n    _: FiberRuntime<any, any>,\n    cont: core.OnSuccess,\n    value: unknown\n  ) => {\n    return internalCall(() => cont.effect_instruction_i1(value))\n  },\n  [\"OnStep\"]: (\n    _: FiberRuntime<any, any>,\n    _cont: core.OnStep,\n    value: unknown\n  ) => {\n    return core.exitSucceed(core.exitSucceed(value))\n  },\n  [OpCodes.OP_ON_SUCCESS_AND_FAILURE]: (\n    _: FiberRuntime<any, any>,\n    cont: core.OnSuccessAndFailure,\n    value: unknown\n  ) => {\n    return internalCall(() => cont.effect_instruction_i2(value))\n  },\n  [OpCodes.OP_REVERT_FLAGS]: (\n    self: FiberRuntime<any, any>,\n    cont: core.RevertFlags,\n    value: unknown\n  ) => {\n    self.patchRuntimeFlags(self.currentRuntimeFlags, cont.patch)\n    if (_runtimeFlags.interruptible(self.currentRuntimeFlags) && self.isInterrupted()) {\n      return core.exitFailCause(self.getInterruptedCause())\n    } else {\n      return core.exitSucceed(value)\n    }\n  },\n  [OpCodes.OP_WHILE]: (\n    self: FiberRuntime<any, any>,\n    cont: core.While,\n    value: unknown\n  ) => {\n    internalCall(() => cont.effect_instruction_i2(value))\n    if (internalCall(() => cont.effect_instruction_i0())) {\n      self.pushStack(cont)\n      return internalCall(() => cont.effect_instruction_i1())\n    } else {\n      return core.void\n    }\n  }\n}\n\nconst drainQueueWhileRunningTable = {\n  [FiberMessage.OP_INTERRUPT_SIGNAL]: (\n    self: FiberRuntime<any, any>,\n    runtimeFlags: RuntimeFlags.RuntimeFlags,\n    cur: Effect.Effect<any, any, any>,\n    message: FiberMessage.FiberMessage & { _tag: FiberMessage.OP_INTERRUPT_SIGNAL }\n  ) => {\n    self.processNewInterruptSignal(message.cause)\n    return _runtimeFlags.interruptible(runtimeFlags) ? core.exitFailCause(message.cause) : cur\n  },\n  [FiberMessage.OP_RESUME]: (\n    _self: FiberRuntime<any, any>,\n    _runtimeFlags: RuntimeFlags.RuntimeFlags,\n    _cur: Effect.Effect<any, any, any>,\n    _message: FiberMessage.FiberMessage\n  ) => {\n    throw new Error(\"It is illegal to have multiple concurrent run loops in a single fiber\")\n  },\n  [FiberMessage.OP_STATEFUL]: (\n    self: FiberRuntime<any, any>,\n    runtimeFlags: RuntimeFlags.RuntimeFlags,\n    cur: Effect.Effect<any, any, any>,\n    message: FiberMessage.FiberMessage & { _tag: FiberMessage.OP_STATEFUL }\n  ) => {\n    message.onFiber(self, FiberStatus.running(runtimeFlags))\n    return cur\n  },\n  [FiberMessage.OP_YIELD_NOW]: (\n    _self: FiberRuntime<any, any>,\n    _runtimeFlags: RuntimeFlags.RuntimeFlags,\n    cur: Effect.Effect<any, any, any>,\n    _message: FiberMessage.FiberMessage & { _tag: FiberMessage.OP_YIELD_NOW }\n  ) => {\n    return core.flatMap(core.yieldNow(), () => cur)\n  }\n}\n\n/**\n * Executes all requests, submitting requests to each data source in parallel.\n */\nconst runBlockedRequests = (self: RequestBlock.RequestBlock) =>\n  core.forEachSequentialDiscard(\n    _RequestBlock.flatten(self),\n    (requestsByRequestResolver) =>\n      forEachConcurrentDiscard(\n        _RequestBlock.sequentialCollectionToChunk(requestsByRequestResolver),\n        ([dataSource, sequential]) => {\n          const map = new Map<Request<any, any>, Entry<any>>()\n          const arr: Array<Array<Entry<any>>> = []\n          for (const block of sequential) {\n            arr.push(Chunk.toReadonlyArray(block) as any)\n            for (const entry of block) {\n              map.set(entry.request as Request<any, any>, entry)\n            }\n          }\n          const flat = arr.flat()\n          return core.fiberRefLocally(\n            invokeWithInterrupt(dataSource.runAll(arr), flat, () =>\n              flat.forEach((entry) => {\n                entry.listeners.interrupted = true\n              })),\n            currentRequestMap,\n            map\n          )\n        },\n        false,\n        false\n      )\n  )\n\n/** @internal */\nexport interface Snapshot {\n  refs: FiberRefs.FiberRefs\n  flags: RuntimeFlags.RuntimeFlags\n}\n\n/** @internal */\nexport class FiberRuntime<in out A, in out E = never> extends Effectable.Class<A, E>\n  implements Fiber.RuntimeFiber<A, E>\n{\n  readonly [internalFiber.FiberTypeId] = internalFiber.fiberVariance\n  readonly [internalFiber.RuntimeFiberTypeId] = runtimeFiberVariance\n  private _fiberRefs: FiberRefs.FiberRefs\n  private _fiberId: FiberId.Runtime\n  private _queue = new Array<FiberMessage.FiberMessage>()\n  private _children: Set<FiberRuntime<any, any>> | null = null\n  private _observers = new Array<(exit: Exit.Exit<A, E>) => void>()\n  private _running = false\n  private _stack: Array<core.Continuation> = []\n  private _asyncInterruptor: ((effect: Effect.Effect<any, any, any>) => any) | null = null\n  private _asyncBlockingOn: FiberId.FiberId | null = null\n  private _exitValue: Exit.Exit<A, E> | null = null\n  private _steps: Array<Snapshot> = []\n  private _isYielding = false\n\n  public currentRuntimeFlags: RuntimeFlags.RuntimeFlags\n  public currentOpCount: number = 0\n  public currentSupervisor!: Supervisor.Supervisor<any>\n  public currentScheduler!: Scheduler\n  public currentTracer!: Tracer.Tracer\n  public currentSpan!: Tracer.AnySpan | undefined\n  public currentContext!: Context.Context<never>\n  public currentDefaultServices!: Context.Context<DefaultServices>\n\n  constructor(\n    fiberId: FiberId.Runtime,\n    fiberRefs0: FiberRefs.FiberRefs,\n    runtimeFlags0: RuntimeFlags.RuntimeFlags\n  ) {\n    super()\n    this.currentRuntimeFlags = runtimeFlags0\n    this._fiberId = fiberId\n    this._fiberRefs = fiberRefs0\n    if (_runtimeFlags.runtimeMetrics(runtimeFlags0)) {\n      const tags = this.getFiberRef(core.currentMetricLabels)\n      fiberStarted.unsafeUpdate(1, tags)\n      fiberActive.unsafeUpdate(1, tags)\n    }\n    this.refreshRefCache()\n  }\n\n  commit(): Effect.Effect<A, E, never> {\n    return internalFiber.join(this)\n  }\n\n  /**\n   * The identity of the fiber.\n   */\n  id(): FiberId.Runtime {\n    return this._fiberId\n  }\n\n  /**\n   * Begins execution of the effect associated with this fiber on in the\n   * background. This can be called to \"kick off\" execution of a fiber after\n   * it has been created.\n   */\n  resume<A, E>(effect: Effect.Effect<A, E, any>): void {\n    this.tell(FiberMessage.resume(effect))\n  }\n\n  /**\n   * The status of the fiber.\n   */\n  get status(): Effect.Effect<FiberStatus.FiberStatus> {\n    return this.ask((_, status) => status)\n  }\n\n  /**\n   * Gets the fiber runtime flags.\n   */\n  get runtimeFlags(): Effect.Effect<RuntimeFlags.RuntimeFlags> {\n    return this.ask((state, status) => {\n      if (FiberStatus.isDone(status)) {\n        return state.currentRuntimeFlags\n      }\n      return status.runtimeFlags\n    })\n  }\n\n  /**\n   * Returns the current `FiberScope` for the fiber.\n   */\n  scope(): fiberScope.FiberScope {\n    return fiberScope.unsafeMake(this)\n  }\n\n  /**\n   * Retrieves the immediate children of the fiber.\n   */\n  get children(): Effect.Effect<Array<Fiber.RuntimeFiber<any, any>>> {\n    return this.ask((fiber) => Array.from(fiber.getChildren()))\n  }\n\n  /**\n   * Gets the fiber's set of children.\n   */\n  getChildren(): Set<FiberRuntime<any, any>> {\n    if (this._children === null) {\n      this._children = new Set()\n    }\n    return this._children\n  }\n\n  /**\n   * Retrieves the interrupted cause of the fiber, which will be `Cause.empty`\n   * if the fiber has not been interrupted.\n   *\n   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked\n   * on this fiber, then values derived from the fiber's state (including the\n   * log annotations and log level) may not be up-to-date.\n   */\n  getInterruptedCause() {\n    return this.getFiberRef(core.currentInterruptedCause)\n  }\n\n  /**\n   * Retrieves the whole set of fiber refs.\n   */\n  fiberRefs(): Effect.Effect<FiberRefs.FiberRefs> {\n    return this.ask((fiber) => fiber.getFiberRefs())\n  }\n\n  /**\n   * Returns an effect that will contain information computed from the fiber\n   * state and status while running on the fiber.\n   *\n   * This allows the outside world to interact safely with mutable fiber state\n   * without locks or immutable data.\n   */\n  ask<Z>(\n    f: (runtime: FiberRuntime<any, any>, status: FiberStatus.FiberStatus) => Z\n  ): Effect.Effect<Z> {\n    return core.suspend(() => {\n      const deferred = core.deferredUnsafeMake<Z>(this._fiberId)\n      this.tell(\n        FiberMessage.stateful((fiber, status) => {\n          core.deferredUnsafeDone(deferred, core.sync(() => f(fiber, status)))\n        })\n      )\n      return core.deferredAwait(deferred)\n    })\n  }\n\n  /**\n   * Adds a message to be processed by the fiber on the fiber.\n   */\n  tell(message: FiberMessage.FiberMessage): void {\n    this._queue.push(message)\n    if (!this._running) {\n      this._running = true\n      this.drainQueueLaterOnExecutor()\n    }\n  }\n\n  get await(): Effect.Effect<Exit.Exit<A, E>> {\n    return core.async((resume) => {\n      const cb = (exit: Exit.Exit<A, E>) => resume(core.succeed(exit))\n      this.tell(\n        FiberMessage.stateful((fiber, _) => {\n          if (fiber._exitValue !== null) {\n            cb(this._exitValue!)\n          } else {\n            fiber.addObserver(cb)\n          }\n        })\n      )\n      return core.sync(() =>\n        this.tell(\n          FiberMessage.stateful((fiber, _) => {\n            fiber.removeObserver(cb)\n          })\n        )\n      )\n    }, this.id())\n  }\n\n  get inheritAll(): Effect.Effect<void> {\n    return core.withFiberRuntime((parentFiber, parentStatus) => {\n      const parentFiberId = parentFiber.id()\n      const parentFiberRefs = parentFiber.getFiberRefs()\n      const parentRuntimeFlags = parentStatus.runtimeFlags\n      const childFiberRefs = this.getFiberRefs()\n      const updatedFiberRefs = fiberRefs.joinAs(parentFiberRefs, parentFiberId, childFiberRefs)\n\n      parentFiber.setFiberRefs(updatedFiberRefs)\n\n      const updatedRuntimeFlags = parentFiber.getFiberRef(currentRuntimeFlags)\n\n      const patch = pipe(\n        _runtimeFlags.diff(parentRuntimeFlags, updatedRuntimeFlags),\n        // Do not inherit WindDown or Interruption!\n        RuntimeFlagsPatch.exclude(_runtimeFlags.Interruption),\n        RuntimeFlagsPatch.exclude(_runtimeFlags.WindDown)\n      )\n\n      return core.updateRuntimeFlags(patch)\n    })\n  }\n\n  /**\n   * Tentatively observes the fiber, but returns immediately if it is not\n   * already done.\n   */\n  get poll(): Effect.Effect<Option.Option<Exit.Exit<A, E>>> {\n    return core.sync(() => Option.fromNullable(this._exitValue))\n  }\n\n  /**\n   * Unsafely observes the fiber, but returns immediately if it is not\n   * already done.\n   */\n  unsafePoll(): Exit.Exit<A, E> | null {\n    return this._exitValue\n  }\n\n  /**\n   * In the background, interrupts the fiber as if interrupted from the specified fiber.\n   */\n  interruptAsFork(fiberId: FiberId.FiberId): Effect.Effect<void> {\n    return core.sync(() => this.tell(FiberMessage.interruptSignal(internalCause.interrupt(fiberId))))\n  }\n\n  /**\n   * In the background, interrupts the fiber as if interrupted from the specified fiber.\n   */\n  unsafeInterruptAsFork(fiberId: FiberId.FiberId) {\n    this.tell(FiberMessage.interruptSignal(internalCause.interrupt(fiberId)))\n  }\n\n  /**\n   * Adds an observer to the list of observers.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  addObserver(observer: (exit: Exit.Exit<A, E>) => void): void {\n    if (this._exitValue !== null) {\n      observer(this._exitValue!)\n    } else {\n      this._observers.push(observer)\n    }\n  }\n\n  /**\n   * Removes the specified observer from the list of observers that will be\n   * notified when the fiber exits.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  removeObserver(observer: (exit: Exit.Exit<A, E>) => void): void {\n    this._observers = this._observers.filter((o) => o !== observer)\n  }\n  /**\n   * Retrieves all fiber refs of the fiber.\n   *\n   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked\n   * on this fiber, then values derived from the fiber's state (including the\n   * log annotations and log level) may not be up-to-date.\n   */\n  getFiberRefs(): FiberRefs.FiberRefs {\n    this.setFiberRef(currentRuntimeFlags, this.currentRuntimeFlags)\n    return this._fiberRefs\n  }\n\n  /**\n   * Deletes the specified fiber ref.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  unsafeDeleteFiberRef<X>(fiberRef: FiberRef.FiberRef<X>): void {\n    this._fiberRefs = fiberRefs.delete_(this._fiberRefs, fiberRef)\n  }\n\n  /**\n   * Retrieves the state of the fiber ref, or else its initial value.\n   *\n   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked\n   * on this fiber, then values derived from the fiber's state (including the\n   * log annotations and log level) may not be up-to-date.\n   */\n  getFiberRef<X>(fiberRef: FiberRef.FiberRef<X>): X {\n    if (this._fiberRefs.locals.has(fiberRef)) {\n      return this._fiberRefs.locals.get(fiberRef)![0][1] as X\n    }\n    return fiberRef.initial\n  }\n\n  /**\n   * Sets the fiber ref to the specified value.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  setFiberRef<X>(fiberRef: FiberRef.FiberRef<X>, value: X): void {\n    this._fiberRefs = fiberRefs.updateAs(this._fiberRefs, {\n      fiberId: this._fiberId,\n      fiberRef,\n      value\n    })\n    this.refreshRefCache()\n  }\n\n  refreshRefCache() {\n    this.currentDefaultServices = this.getFiberRef(defaultServices.currentServices)\n    this.currentTracer = this.currentDefaultServices.unsafeMap.get(tracer.tracerTag.key)\n    this.currentSupervisor = this.getFiberRef(currentSupervisor)\n    this.currentScheduler = this.getFiberRef(currentScheduler)\n    this.currentContext = this.getFiberRef(core.currentContext)\n    this.currentSpan = this.currentContext.unsafeMap.get(tracer.spanTag.key)\n  }\n\n  /**\n   * Wholesale replaces all fiber refs of this fiber.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  setFiberRefs(fiberRefs: FiberRefs.FiberRefs): void {\n    this._fiberRefs = fiberRefs\n    this.refreshRefCache()\n  }\n\n  /**\n   * Adds a reference to the specified fiber inside the children set.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  addChild(child: FiberRuntime<any, any>) {\n    this.getChildren().add(child)\n  }\n\n  /**\n   * Removes a reference to the specified fiber inside the children set.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  removeChild(child: FiberRuntime<any, any>) {\n    this.getChildren().delete(child)\n  }\n\n  /**\n   * On the current thread, executes all messages in the fiber's inbox. This\n   * method may return before all work is done, in the event the fiber executes\n   * an asynchronous operation.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  drainQueueOnCurrentThread() {\n    let recurse = true\n    while (recurse) {\n      let evaluationSignal: EvaluationSignal = EvaluationSignalContinue\n      const prev = (globalThis as any)[internalFiber.currentFiberURI]\n      ;(globalThis as any)[internalFiber.currentFiberURI] = this\n      try {\n        while (evaluationSignal === EvaluationSignalContinue) {\n          evaluationSignal = this._queue.length === 0 ?\n            EvaluationSignalDone :\n            this.evaluateMessageWhileSuspended(this._queue.splice(0, 1)[0]!)\n        }\n      } finally {\n        this._running = false\n        ;(globalThis as any)[internalFiber.currentFiberURI] = prev\n      }\n      // Maybe someone added something to the queue between us checking, and us\n      // giving up the drain. If so, we need to restart the draining, but only\n      // if we beat everyone else to the restart:\n      if (this._queue.length > 0 && !this._running) {\n        this._running = true\n        if (evaluationSignal === EvaluationSignalYieldNow) {\n          this.drainQueueLaterOnExecutor()\n          recurse = false\n        } else {\n          recurse = true\n        }\n      } else {\n        recurse = false\n      }\n    }\n  }\n\n  /**\n   * Schedules the execution of all messages in the fiber's inbox.\n   *\n   * This method will return immediately after the scheduling\n   * operation is completed, but potentially before such messages have been\n   * executed.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  drainQueueLaterOnExecutor() {\n    this.currentScheduler.scheduleTask(\n      this.run,\n      this.getFiberRef(core.currentSchedulingPriority)\n    )\n  }\n\n  /**\n   * Drains the fiber's message queue while the fiber is actively running,\n   * returning the next effect to execute, which may be the input effect if no\n   * additional effect needs to be executed.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  drainQueueWhileRunning(\n    runtimeFlags: RuntimeFlags.RuntimeFlags,\n    cur0: Effect.Effect<any, any, any>\n  ) {\n    let cur = cur0\n    while (this._queue.length > 0) {\n      const message = this._queue.splice(0, 1)[0]\n      // @ts-expect-error\n      cur = drainQueueWhileRunningTable[message._tag](this, runtimeFlags, cur, message)\n    }\n    return cur\n  }\n\n  /**\n   * Determines if the fiber is interrupted.\n   *\n   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked\n   * on this fiber, then values derived from the fiber's state (including the\n   * log annotations and log level) may not be up-to-date.\n   */\n  isInterrupted(): boolean {\n    return !internalCause.isEmpty(this.getFiberRef(core.currentInterruptedCause))\n  }\n\n  /**\n   * Adds an interruptor to the set of interruptors that are interrupting this\n   * fiber.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  addInterruptedCause(cause: Cause.Cause<never>) {\n    const oldSC = this.getFiberRef(core.currentInterruptedCause)\n    this.setFiberRef(core.currentInterruptedCause, internalCause.sequential(oldSC, cause))\n  }\n\n  /**\n   * Processes a new incoming interrupt signal.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  processNewInterruptSignal(cause: Cause.Cause<never>): void {\n    this.addInterruptedCause(cause)\n    this.sendInterruptSignalToAllChildren()\n  }\n\n  /**\n   * Interrupts all children of the current fiber, returning an effect that will\n   * await the exit of the children. This method will return null if the fiber\n   * has no children.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  sendInterruptSignalToAllChildren(): boolean {\n    if (this._children === null || this._children.size === 0) {\n      return false\n    }\n    let told = false\n    for (const child of this._children) {\n      child.tell(FiberMessage.interruptSignal(internalCause.interrupt(this.id())))\n      told = true\n    }\n    return told\n  }\n\n  /**\n   * Interrupts all children of the current fiber, returning an effect that will\n   * await the exit of the children. This method will return null if the fiber\n   * has no children.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  interruptAllChildren() {\n    if (this.sendInterruptSignalToAllChildren()) {\n      const it = this._children!.values()\n      this._children = null\n      let isDone = false\n      const body = () => {\n        const next = it.next()\n        if (!next.done) {\n          return core.asVoid(next.value.await)\n        } else {\n          return core.sync(() => {\n            isDone = true\n          })\n        }\n      }\n      return core.whileLoop({\n        while: () => !isDone,\n        body,\n        step: () => {\n          //\n        }\n      })\n    }\n    return null\n  }\n\n  reportExitValue(exit: Exit.Exit<A, E>) {\n    if (_runtimeFlags.runtimeMetrics(this.currentRuntimeFlags)) {\n      const tags = this.getFiberRef(core.currentMetricLabels)\n      const startTimeMillis = this.id().startTimeMillis\n      const endTimeMillis = Date.now()\n      fiberLifetimes.unsafeUpdate(endTimeMillis - startTimeMillis, tags)\n      fiberActive.unsafeUpdate(-1, tags)\n      switch (exit._tag) {\n        case OpCodes.OP_SUCCESS: {\n          fiberSuccesses.unsafeUpdate(1, tags)\n          break\n        }\n        case OpCodes.OP_FAILURE: {\n          fiberFailures.unsafeUpdate(1, tags)\n          break\n        }\n      }\n    }\n    if (exit._tag === \"Failure\") {\n      const level = this.getFiberRef(core.currentUnhandledErrorLogLevel)\n      if (!internalCause.isInterruptedOnly(exit.cause) && level._tag === \"Some\") {\n        this.log(\"Fiber terminated with an unhandled error\", exit.cause, level)\n      }\n    }\n  }\n\n  setExitValue(exit: Exit.Exit<A, E>) {\n    this._exitValue = exit\n    this.reportExitValue(exit)\n    for (let i = this._observers.length - 1; i >= 0; i--) {\n      this._observers[i](exit)\n    }\n  }\n\n  getLoggers() {\n    return this.getFiberRef(currentLoggers)\n  }\n\n  log(\n    message: unknown,\n    cause: Cause.Cause<any>,\n    overrideLogLevel: Option.Option<LogLevel.LogLevel>\n  ): void {\n    const logLevel = Option.isSome(overrideLogLevel) ?\n      overrideLogLevel.value :\n      this.getFiberRef(core.currentLogLevel)\n    const minimumLogLevel = this.getFiberRef(currentMinimumLogLevel)\n    if (LogLevel.greaterThan(minimumLogLevel, logLevel)) {\n      return\n    }\n    const spans = this.getFiberRef(core.currentLogSpan)\n    const annotations = this.getFiberRef(core.currentLogAnnotations)\n    const loggers = this.getLoggers()\n    const contextMap = this.getFiberRefs()\n    if (HashSet.size(loggers) > 0) {\n      const clockService = Context.get(this.getFiberRef(defaultServices.currentServices), clock.clockTag)\n      const date = new Date(clockService.unsafeCurrentTimeMillis())\n      Inspectable.withRedactableContext(contextMap, () => {\n        for (const logger of loggers) {\n          logger.log({\n            fiberId: this.id(),\n            logLevel,\n            message,\n            cause,\n            context: contextMap,\n            spans,\n            annotations,\n            date\n          })\n        }\n      })\n    }\n  }\n\n  /**\n   * Evaluates a single message on the current thread, while the fiber is\n   * suspended. This method should only be called while evaluation of the\n   * fiber's effect is suspended due to an asynchronous operation.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  evaluateMessageWhileSuspended(message: FiberMessage.FiberMessage): EvaluationSignal {\n    switch (message._tag) {\n      case FiberMessage.OP_YIELD_NOW: {\n        return EvaluationSignalYieldNow\n      }\n      case FiberMessage.OP_INTERRUPT_SIGNAL: {\n        this.processNewInterruptSignal(message.cause)\n        if (this._asyncInterruptor !== null) {\n          this._asyncInterruptor(core.exitFailCause(message.cause))\n          this._asyncInterruptor = null\n        }\n        return EvaluationSignalContinue\n      }\n      case FiberMessage.OP_RESUME: {\n        this._asyncInterruptor = null\n        this._asyncBlockingOn = null\n        this.evaluateEffect(message.effect)\n        return EvaluationSignalContinue\n      }\n      case FiberMessage.OP_STATEFUL: {\n        message.onFiber(\n          this,\n          this._exitValue !== null ?\n            FiberStatus.done :\n            FiberStatus.suspended(this.currentRuntimeFlags, this._asyncBlockingOn!)\n        )\n        return EvaluationSignalContinue\n      }\n      default: {\n        return absurd(message)\n      }\n    }\n  }\n\n  /**\n   * Evaluates an effect until completion, potentially asynchronously.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  evaluateEffect(effect0: Effect.Effect<any, any, any>) {\n    this.currentSupervisor.onResume(this)\n    try {\n      let effect: Effect.Effect<any, any, any> | null =\n        _runtimeFlags.interruptible(this.currentRuntimeFlags) && this.isInterrupted() ?\n          core.exitFailCause(this.getInterruptedCause()) :\n          effect0\n      while (effect !== null) {\n        const eff: Effect.Effect<any, any, any> = effect\n        const exit = this.runLoop(eff)\n        if (exit === YieldedOp) {\n          const op = yieldedOpChannel.currentOp!\n          yieldedOpChannel.currentOp = null\n          if (op._op === OpCodes.OP_YIELD) {\n            if (_runtimeFlags.cooperativeYielding(this.currentRuntimeFlags)) {\n              this.tell(FiberMessage.yieldNow())\n              this.tell(FiberMessage.resume(core.exitVoid))\n              effect = null\n            } else {\n              effect = core.exitVoid\n            }\n          } else if (op._op === OpCodes.OP_ASYNC) {\n            // Terminate this evaluation, async resumption will continue evaluation:\n            effect = null\n          }\n        } else {\n          this.currentRuntimeFlags = pipe(this.currentRuntimeFlags, _runtimeFlags.enable(_runtimeFlags.WindDown))\n          const interruption = this.interruptAllChildren()\n          if (interruption !== null) {\n            effect = core.flatMap(interruption, () => exit)\n          } else {\n            if (this._queue.length === 0) {\n              // No more messages to process, so we will allow the fiber to end life:\n              this.setExitValue(exit)\n            } else {\n              // There are messages, possibly added by the final op executed by\n              // the fiber. To be safe, we should execute those now before we\n              // allow the fiber to end life:\n              this.tell(FiberMessage.resume(exit))\n            }\n            effect = null\n          }\n        }\n      }\n    } finally {\n      this.currentSupervisor.onSuspend(this)\n    }\n  }\n\n  /**\n   * Begins execution of the effect associated with this fiber on the current\n   * thread. This can be called to \"kick off\" execution of a fiber after it has\n   * been created, in hopes that the effect can be executed synchronously.\n   *\n   * This is not the normal way of starting a fiber, but it is useful when the\n   * express goal of executing the fiber is to synchronously produce its exit.\n   */\n  start<R>(effect: Effect.Effect<A, E, R>): void {\n    if (!this._running) {\n      this._running = true\n      const prev = (globalThis as any)[internalFiber.currentFiberURI]\n      ;(globalThis as any)[internalFiber.currentFiberURI] = this\n      try {\n        this.evaluateEffect(effect)\n      } finally {\n        this._running = false\n        ;(globalThis as any)[internalFiber.currentFiberURI] = prev\n        // Because we're special casing `start`, we have to be responsible\n        // for spinning up the fiber if there were new messages added to\n        // the queue between the completion of the effect and the transition\n        // to the not running state.\n        if (this._queue.length > 0) {\n          this.drainQueueLaterOnExecutor()\n        }\n      }\n    } else {\n      this.tell(FiberMessage.resume(effect))\n    }\n  }\n\n  /**\n   * Begins execution of the effect associated with this fiber on in the\n   * background, and on the correct thread pool. This can be called to \"kick\n   * off\" execution of a fiber after it has been created, in hopes that the\n   * effect can be executed synchronously.\n   */\n  startFork<R>(effect: Effect.Effect<A, E, R>): void {\n    this.tell(FiberMessage.resume(effect))\n  }\n\n  /**\n   * Takes the current runtime flags, patches them to return the new runtime\n   * flags, and then makes any changes necessary to fiber state based on the\n   * specified patch.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  patchRuntimeFlags(oldRuntimeFlags: RuntimeFlags.RuntimeFlags, patch: RuntimeFlagsPatch.RuntimeFlagsPatch) {\n    const newRuntimeFlags = _runtimeFlags.patch(oldRuntimeFlags, patch)\n    ;(globalThis as any)[internalFiber.currentFiberURI] = this\n    this.currentRuntimeFlags = newRuntimeFlags\n    return newRuntimeFlags\n  }\n\n  /**\n   * Initiates an asynchronous operation, by building a callback that will\n   * resume execution, and then feeding that callback to the registration\n   * function, handling error cases and repeated resumptions appropriately.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  initiateAsync(\n    runtimeFlags: RuntimeFlags.RuntimeFlags,\n    asyncRegister: (resume: (effect: Effect.Effect<any, any, any>) => void) => void\n  ) {\n    let alreadyCalled = false\n    const callback = (effect: Effect.Effect<any, any, any>) => {\n      if (!alreadyCalled) {\n        alreadyCalled = true\n        this.tell(FiberMessage.resume(effect))\n      }\n    }\n    if (_runtimeFlags.interruptible(runtimeFlags)) {\n      this._asyncInterruptor = callback\n    }\n    try {\n      asyncRegister(callback)\n    } catch (e) {\n      callback(core.failCause(internalCause.die(e)))\n    }\n  }\n\n  pushStack(cont: core.Continuation) {\n    this._stack.push(cont)\n    if (cont._op === \"OnStep\") {\n      this._steps.push({ refs: this.getFiberRefs(), flags: this.currentRuntimeFlags })\n    }\n  }\n\n  popStack() {\n    const item = this._stack.pop()\n    if (item) {\n      if (item._op === \"OnStep\") {\n        this._steps.pop()\n      }\n      return item\n    }\n    return\n  }\n\n  getNextSuccessCont() {\n    let frame = this.popStack()\n    while (frame) {\n      if (frame._op !== OpCodes.OP_ON_FAILURE) {\n        return frame\n      }\n      frame = this.popStack()\n    }\n  }\n\n  getNextFailCont() {\n    let frame = this.popStack()\n    while (frame) {\n      if (frame._op !== OpCodes.OP_ON_SUCCESS && frame._op !== OpCodes.OP_WHILE) {\n        return frame\n      }\n      frame = this.popStack()\n    }\n  }\n\n  [OpCodes.OP_TAG](op: core.Primitive & { _op: OpCodes.OP_SYNC }) {\n    return core.sync(() => Context.unsafeGet(this.currentContext, op as unknown as Context.Tag<any, any>))\n  }\n\n  [\"Left\"](op: core.Primitive & { _op: \"Left\" }) {\n    return core.fail(op.left)\n  }\n\n  [\"None\"](_: core.Primitive & { _op: \"None\" }) {\n    return core.fail(new core.NoSuchElementException())\n  }\n\n  [\"Right\"](op: core.Primitive & { _op: \"Right\" }) {\n    return core.exitSucceed(op.right)\n  }\n\n  [\"Some\"](op: core.Primitive & { _op: \"Some\" }) {\n    return core.exitSucceed(op.value)\n  }\n\n  [\"Micro\"](op: Micro.Micro<any, any, never> & { _op: \"Micro\" }) {\n    return core.unsafeAsync<any, any>((microResume) => {\n      const env = Micro.envUnsafeMakeEmpty().pipe(\n        Micro.envSet(Micro.currentContext, this.getFiberRef(core.currentContext))\n      )\n      let resume = microResume\n      op[Micro.runSymbol](env, (result) => {\n        if (result._tag === \"Right\") {\n          return resume(core.exitSucceed(result.right))\n        }\n        switch (result.left._tag) {\n          case \"Interrupt\": {\n            return resume(core.exitFailCause(internalCause.interrupt(FiberId.none)))\n          }\n          case \"Fail\": {\n            return resume(core.fail(result.left.error))\n          }\n          case \"Die\": {\n            return resume(core.die(result.left.defect))\n          }\n        }\n      })\n      return core.async<void>((abortResume) => {\n        resume = (_: any) => {\n          abortResume(core.void)\n        }\n        Micro.envGet(env, Micro.currentAbortController).abort()\n      })\n    })\n  }\n\n  [OpCodes.OP_SYNC](op: core.Primitive & { _op: OpCodes.OP_SYNC }) {\n    const value = internalCall(() => op.effect_instruction_i0())\n    const cont = this.getNextSuccessCont()\n    if (cont !== undefined) {\n      if (!(cont._op in contOpSuccess)) {\n        // @ts-expect-error\n        absurd(cont)\n      }\n      // @ts-expect-error\n      return contOpSuccess[cont._op](this, cont, value)\n    } else {\n      yieldedOpChannel.currentOp = core.exitSucceed(value) as any\n      return YieldedOp\n    }\n  }\n\n  [OpCodes.OP_SUCCESS](op: core.Primitive & { _op: OpCodes.OP_SUCCESS }) {\n    const oldCur = op\n    const cont = this.getNextSuccessCont()\n    if (cont !== undefined) {\n      if (!(cont._op in contOpSuccess)) {\n        // @ts-expect-error\n        absurd(cont)\n      }\n      // @ts-expect-error\n      return contOpSuccess[cont._op](this, cont, oldCur.effect_instruction_i0)\n    } else {\n      yieldedOpChannel.currentOp = oldCur\n      return YieldedOp\n    }\n  }\n\n  [OpCodes.OP_FAILURE](op: core.Primitive & { _op: OpCodes.OP_FAILURE }) {\n    const cause = op.effect_instruction_i0\n    const cont = this.getNextFailCont()\n    if (cont !== undefined) {\n      switch (cont._op) {\n        case OpCodes.OP_ON_FAILURE:\n        case OpCodes.OP_ON_SUCCESS_AND_FAILURE: {\n          if (!(_runtimeFlags.interruptible(this.currentRuntimeFlags) && this.isInterrupted())) {\n            return internalCall(() => cont.effect_instruction_i1(cause))\n          } else {\n            return core.exitFailCause(internalCause.stripFailures(cause))\n          }\n        }\n        case \"OnStep\": {\n          if (!(_runtimeFlags.interruptible(this.currentRuntimeFlags) && this.isInterrupted())) {\n            return core.exitSucceed(core.exitFailCause(cause))\n          } else {\n            return core.exitFailCause(internalCause.stripFailures(cause))\n          }\n        }\n        case OpCodes.OP_REVERT_FLAGS: {\n          this.patchRuntimeFlags(this.currentRuntimeFlags, cont.patch)\n          if (_runtimeFlags.interruptible(this.currentRuntimeFlags) && this.isInterrupted()) {\n            return core.exitFailCause(internalCause.sequential(cause, this.getInterruptedCause()))\n          } else {\n            return core.exitFailCause(cause)\n          }\n        }\n        default: {\n          absurd(cont)\n        }\n      }\n    } else {\n      yieldedOpChannel.currentOp = core.exitFailCause(cause) as any\n      return YieldedOp\n    }\n  }\n\n  [OpCodes.OP_WITH_RUNTIME](op: core.Primitive & { _op: OpCodes.OP_WITH_RUNTIME }) {\n    return internalCall(() =>\n      op.effect_instruction_i0(\n        this as FiberRuntime<unknown, unknown>,\n        FiberStatus.running(this.currentRuntimeFlags) as FiberStatus.Running\n      )\n    )\n  }\n\n  [\"Blocked\"](op: core.Primitive & { _op: \"Blocked\" }) {\n    const refs = this.getFiberRefs()\n    const flags = this.currentRuntimeFlags\n    if (this._steps.length > 0) {\n      const frames: Array<core.Continuation> = []\n      const snap = this._steps[this._steps.length - 1]\n      let frame = this.popStack()\n      while (frame && frame._op !== \"OnStep\") {\n        frames.push(frame)\n        frame = this.popStack()\n      }\n      this.setFiberRefs(snap.refs)\n      this.currentRuntimeFlags = snap.flags\n      const patchRefs = FiberRefsPatch.diff(snap.refs, refs)\n      const patchFlags = _runtimeFlags.diff(snap.flags, flags)\n      return core.exitSucceed(core.blocked(\n        op.effect_instruction_i0,\n        core.withFiberRuntime<unknown, unknown>((newFiber) => {\n          while (frames.length > 0) {\n            newFiber.pushStack(frames.pop()!)\n          }\n          newFiber.setFiberRefs(\n            FiberRefsPatch.patch(newFiber.id(), newFiber.getFiberRefs())(patchRefs)\n          )\n          newFiber.currentRuntimeFlags = _runtimeFlags.patch(patchFlags)(newFiber.currentRuntimeFlags)\n          return op.effect_instruction_i1\n        })\n      ))\n    }\n    return core.uninterruptibleMask((restore) =>\n      core.flatMap(\n        forkDaemon(core.runRequestBlock(op.effect_instruction_i0)),\n        () => restore(op.effect_instruction_i1)\n      )\n    )\n  }\n\n  [\"RunBlocked\"](op: core.Primitive & { _op: \"RunBlocked\" }) {\n    return runBlockedRequests(op.effect_instruction_i0)\n  }\n\n  [OpCodes.OP_UPDATE_RUNTIME_FLAGS](op: core.Primitive & { _op: OpCodes.OP_UPDATE_RUNTIME_FLAGS }) {\n    const updateFlags = op.effect_instruction_i0\n    const oldRuntimeFlags = this.currentRuntimeFlags\n    const newRuntimeFlags = _runtimeFlags.patch(oldRuntimeFlags, updateFlags)\n    // One more chance to short circuit: if we're immediately going\n    // to interrupt. Interruption will cause immediate reversion of\n    // the flag, so as long as we \"peek ahead\", there's no need to\n    // set them to begin with.\n    if (_runtimeFlags.interruptible(newRuntimeFlags) && this.isInterrupted()) {\n      return core.exitFailCause(this.getInterruptedCause())\n    } else {\n      // Impossible to short circuit, so record the changes\n      this.patchRuntimeFlags(this.currentRuntimeFlags, updateFlags)\n      if (op.effect_instruction_i1) {\n        // Since we updated the flags, we need to revert them\n        const revertFlags = _runtimeFlags.diff(newRuntimeFlags, oldRuntimeFlags)\n        this.pushStack(new core.RevertFlags(revertFlags, op))\n        return internalCall(() => op.effect_instruction_i1!(oldRuntimeFlags))\n      } else {\n        return core.exitVoid\n      }\n    }\n  }\n\n  [OpCodes.OP_ON_SUCCESS](op: core.Primitive & { _op: OpCodes.OP_ON_SUCCESS }) {\n    this.pushStack(op)\n    return op.effect_instruction_i0\n  }\n\n  [\"OnStep\"](op: core.Primitive & { _op: \"OnStep\" }) {\n    this.pushStack(op)\n    return op.effect_instruction_i0\n  }\n\n  [OpCodes.OP_ON_FAILURE](op: core.Primitive & { _op: OpCodes.OP_ON_FAILURE }) {\n    this.pushStack(op)\n    return op.effect_instruction_i0\n  }\n\n  [OpCodes.OP_ON_SUCCESS_AND_FAILURE](op: core.Primitive & { _op: OpCodes.OP_ON_SUCCESS_AND_FAILURE }) {\n    this.pushStack(op)\n    return op.effect_instruction_i0\n  }\n\n  [OpCodes.OP_ASYNC](op: core.Primitive & { _op: OpCodes.OP_ASYNC }) {\n    this._asyncBlockingOn = op.effect_instruction_i1\n    this.initiateAsync(this.currentRuntimeFlags, op.effect_instruction_i0)\n    yieldedOpChannel.currentOp = op\n    return YieldedOp\n  }\n\n  [OpCodes.OP_YIELD](op: core.Primitive & { op: OpCodes.OP_YIELD }) {\n    this._isYielding = false\n    yieldedOpChannel.currentOp = op\n    return YieldedOp\n  }\n\n  [OpCodes.OP_WHILE](op: core.Primitive & { _op: OpCodes.OP_WHILE }) {\n    const check = op.effect_instruction_i0\n    const body = op.effect_instruction_i1\n    if (check()) {\n      this.pushStack(op)\n      return body()\n    } else {\n      return core.exitVoid\n    }\n  }\n\n  [OpCodes.OP_COMMIT](op: core.Primitive & { _op: OpCodes.OP_COMMIT }) {\n    return internalCall(() => op.commit())\n  }\n\n  /**\n   * The main run-loop for evaluating effects.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  runLoop(effect0: Effect.Effect<any, any, any>): Exit.Exit<any, any> | YieldedOp {\n    let cur: Effect.Effect<any, any, any> | YieldedOp = effect0\n    this.currentOpCount = 0\n\n    while (true) {\n      if ((this.currentRuntimeFlags & OpSupervision) !== 0) {\n        this.currentSupervisor.onEffect(this, cur)\n      }\n      if (this._queue.length > 0) {\n        cur = this.drainQueueWhileRunning(this.currentRuntimeFlags, cur)\n      }\n      if (!this._isYielding) {\n        this.currentOpCount += 1\n        const shouldYield = this.currentScheduler.shouldYield(this)\n        if (shouldYield !== false) {\n          this._isYielding = true\n          this.currentOpCount = 0\n          const oldCur = cur\n          cur = core.flatMap(core.yieldNow({ priority: shouldYield }), () => oldCur)\n        }\n      }\n      try {\n        if (!(\"_op\" in cur) || !((cur as core.Primitive)._op in this)) {\n          // @ts-expect-error\n          absurd(cur)\n        }\n\n        // @ts-expect-error\n        cur = this.currentTracer.context(\n          () => {\n            if (version.getCurrentVersion() !== (cur as core.Primitive)[core.EffectTypeId]._V) {\n              return core.dieMessage(\n                `Cannot execute an Effect versioned ${\n                  (cur as core.Primitive)[core.EffectTypeId]._V\n                } with a Runtime of version ${version.getCurrentVersion()}`\n              )\n            }\n            // @ts-expect-error\n            return this[(cur as core.Primitive)._op](cur as core.Primitive)\n          },\n          this\n        )\n\n        if (cur === YieldedOp) {\n          const op = yieldedOpChannel.currentOp!\n          if (\n            op._op === OpCodes.OP_YIELD ||\n            op._op === OpCodes.OP_ASYNC\n          ) {\n            return YieldedOp\n          }\n\n          yieldedOpChannel.currentOp = null\n          return (\n              op._op === OpCodes.OP_SUCCESS ||\n              op._op === OpCodes.OP_FAILURE\n            ) ?\n            op as unknown as Exit.Exit<A, E> :\n            core.exitFailCause(internalCause.die(op))\n        }\n      } catch (e) {\n        if (core.isEffectError(e)) {\n          cur = core.exitFailCause(e.cause)\n        } else if (core.isInterruptedException(e)) {\n          cur = core.exitFailCause(\n            internalCause.sequential(internalCause.die(e), internalCause.interrupt(FiberId.none))\n          )\n        } else {\n          cur = core.die(e)\n        }\n      }\n    }\n  }\n\n  run = () => {\n    this.drainQueueOnCurrentThread()\n  }\n}\n\n// circular with Logger\n\n/** @internal */\nexport const currentMinimumLogLevel: FiberRef.FiberRef<LogLevel.LogLevel> = globalValue(\n  \"effect/FiberRef/currentMinimumLogLevel\",\n  () => core.fiberRefUnsafeMake<LogLevel.LogLevel>(LogLevel.fromLiteral(\"Info\"))\n)\n\n/** @internal */\nexport const loggerWithConsoleLog = <M, O>(self: Logger<M, O>): Logger<M, void> =>\n  internalLogger.makeLogger((opts) => {\n    const services = FiberRefs.getOrDefault(opts.context, defaultServices.currentServices)\n    Context.get(services, consoleTag).unsafe.log(self.log(opts))\n  })\n\n/** @internal */\nexport const loggerWithLeveledLog = <M, O>(self: Logger<M, O>): Logger<M, void> =>\n  internalLogger.makeLogger((opts) => {\n    const services = FiberRefs.getOrDefault(opts.context, defaultServices.currentServices)\n    const unsafeLogger = Context.get(services, consoleTag).unsafe\n    switch (opts.logLevel._tag) {\n      case \"Debug\":\n        return unsafeLogger.debug(self.log(opts))\n      case \"Info\":\n        return unsafeLogger.info(self.log(opts))\n      case \"Trace\":\n        return unsafeLogger.trace(self.log(opts))\n      case \"Warning\":\n        return unsafeLogger.warn(self.log(opts))\n      case \"Error\":\n      case \"Fatal\":\n        return unsafeLogger.error(self.log(opts))\n      default:\n        return unsafeLogger.log(self.log(opts))\n    }\n  })\n\n/** @internal */\nexport const loggerWithConsoleError = <M, O>(self: Logger<M, O>): Logger<M, void> =>\n  internalLogger.makeLogger((opts) => {\n    const services = FiberRefs.getOrDefault(opts.context, defaultServices.currentServices)\n    Context.get(services, consoleTag).unsafe.error(self.log(opts))\n  })\n\n/** @internal */\nexport const defaultLogger: Logger<unknown, void> = globalValue(\n  Symbol.for(\"effect/Logger/defaultLogger\"),\n  () => loggerWithConsoleLog(internalLogger.stringLogger)\n)\n\n/** @internal */\nexport const jsonLogger: Logger<unknown, void> = globalValue(\n  Symbol.for(\"effect/Logger/jsonLogger\"),\n  () => loggerWithConsoleLog(internalLogger.jsonLogger)\n)\n\n/** @internal */\nexport const logFmtLogger: Logger<unknown, void> = globalValue(\n  Symbol.for(\"effect/Logger/logFmtLogger\"),\n  () => loggerWithConsoleLog(internalLogger.logfmtLogger)\n)\n\n/** @internal */\nexport const prettyLogger: Logger<unknown, void> = globalValue(\n  Symbol.for(\"effect/Logger/prettyLogger\"),\n  () => internalLogger.prettyLoggerDefault\n)\n\n/** @internal */\nexport const structuredLogger: Logger<unknown, void> = globalValue(\n  Symbol.for(\"effect/Logger/structuredLogger\"),\n  () => loggerWithConsoleLog(internalLogger.structuredLogger)\n)\n\n/** @internal */\nexport const tracerLogger = globalValue(\n  Symbol.for(\"effect/Logger/tracerLogger\"),\n  () =>\n    internalLogger.makeLogger<unknown, void>(({\n      annotations,\n      cause,\n      context,\n      fiberId,\n      logLevel,\n      message\n    }) => {\n      const span = Context.getOption(\n        fiberRefs.getOrDefault(context, core.currentContext),\n        tracer.spanTag\n      )\n      if (span._tag === \"None\" || span.value._tag === \"ExternalSpan\") {\n        return\n      }\n      const clockService = Context.unsafeGet(\n        fiberRefs.getOrDefault(context, defaultServices.currentServices),\n        clock.clockTag\n      )\n\n      const attributes: Record<string, unknown> = {}\n      for (const [key, value] of annotations) {\n        attributes[key] = value\n      }\n      attributes[\"effect.fiberId\"] = FiberId.threadName(fiberId)\n      attributes[\"effect.logLevel\"] = logLevel.label\n\n      if (cause !== null && cause._tag !== \"Empty\") {\n        attributes[\"effect.cause\"] = internalCause.pretty(cause, { renderErrorCause: true })\n      }\n\n      span.value.event(\n        Inspectable.toStringUnknown(Array.isArray(message) ? message[0] : message),\n        clockService.unsafeCurrentTimeNanos(),\n        attributes\n      )\n    })\n)\n\n/** @internal */\nexport const loggerWithSpanAnnotations = <Message, Output>(self: Logger<Message, Output>): Logger<Message, Output> =>\n  internalLogger.mapInputOptions(self, (options: Logger.Options<Message>) => {\n    const span = Option.flatMap(fiberRefs.get(options.context, core.currentContext), Context.getOption(tracer.spanTag))\n    if (span._tag === \"None\") {\n      return options\n    }\n    return {\n      ...options,\n      annotations: pipe(\n        options.annotations,\n        HashMap.set(\"effect.traceId\", span.value.traceId as unknown),\n        HashMap.set(\"effect.spanId\", span.value.spanId as unknown),\n        span.value._tag === \"Span\" ? HashMap.set(\"effect.spanName\", span.value.name as unknown) : identity\n      )\n    }\n  })\n\n/** @internal */\nexport const currentLoggers: FiberRef.FiberRef<\n  HashSet.HashSet<Logger<unknown, any>>\n> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentLoggers\"),\n  () => core.fiberRefUnsafeMakeHashSet(HashSet.make(defaultLogger, tracerLogger))\n)\n\n/** @internal */\nexport const batchedLogger = dual<\n  <Output, R>(\n    window: Duration.DurationInput,\n    f: (messages: Array<NoInfer<Output>>) => Effect.Effect<void, never, R>\n  ) => <Message>(\n    self: Logger<Message, Output>\n  ) => Effect.Effect<Logger<Message, void>, never, Scope.Scope | R>,\n  <Message, Output, R>(\n    self: Logger<Message, Output>,\n    window: Duration.DurationInput,\n    f: (messages: Array<NoInfer<Output>>) => Effect.Effect<void, never, R>\n  ) => Effect.Effect<Logger<Message, void>, never, Scope.Scope | R>\n>(3, <Message, Output, R>(\n  self: Logger<Message, Output>,\n  window: Duration.DurationInput,\n  f: (messages: Array<NoInfer<Output>>) => Effect.Effect<void, never, R>\n): Effect.Effect<Logger<Message, void>, never, Scope.Scope | R> =>\n  core.flatMap(scope, (scope) => {\n    let buffer: Array<Output> = []\n    const flush = core.suspend(() => {\n      if (buffer.length === 0) {\n        return core.void\n      }\n      const arr = buffer\n      buffer = []\n      return f(arr)\n    })\n\n    return core.uninterruptibleMask((restore) =>\n      pipe(\n        internalEffect.sleep(window),\n        core.zipRight(flush),\n        internalEffect.forever,\n        restore,\n        forkDaemon,\n        core.flatMap((fiber) => core.scopeAddFinalizer(scope, core.interruptFiber(fiber))),\n        core.zipRight(addFinalizer(() => flush)),\n        core.as(\n          internalLogger.makeLogger((options) => {\n            buffer.push(self.log(options))\n          })\n        )\n      )\n    )\n  }))\n\nexport const annotateLogsScoped: {\n  (key: string, value: unknown): Effect.Effect<void, never, Scope.Scope>\n  (values: Record<string, unknown>): Effect.Effect<void, never, Scope.Scope>\n} = function() {\n  if (typeof arguments[0] === \"string\") {\n    return fiberRefLocallyScopedWith(\n      core.currentLogAnnotations,\n      HashMap.set(arguments[0], arguments[1])\n    )\n  }\n  const entries = Object.entries(arguments[0])\n  return fiberRefLocallyScopedWith(\n    core.currentLogAnnotations,\n    HashMap.mutate((annotations) => {\n      for (let i = 0; i < entries.length; i++) {\n        const [key, value] = entries[i]\n        HashMap.set(annotations, key, value)\n      }\n      return annotations\n    })\n  )\n}\n\n// circular with Effect\n\n/* @internal */\nexport const acquireRelease: {\n  <A, X, R2>(\n    release: (a: A, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R2>\n  ): <E, R>(acquire: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R2 | R | Scope.Scope>\n  <A, E, R, X, R2>(\n    acquire: Effect.Effect<A, E, R>,\n    release: (a: A, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R2>\n  ): Effect.Effect<A, E, R2 | R | Scope.Scope>\n} = dual((args) => core.isEffect(args[0]), (acquire, release) =>\n  core.uninterruptible(\n    core.tap(acquire, (a) => addFinalizer((exit) => release(a, exit)))\n  ))\n\n/* @internal */\nexport const acquireReleaseInterruptible: {\n  <X, R2>(\n    release: (exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R2>\n  ): <A, E, R>(acquire: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Scope.Scope | R2 | R>\n  <A, E, R, X, R2>(\n    acquire: Effect.Effect<A, E, R>,\n    release: (exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R2>\n  ): Effect.Effect<A, E, Scope.Scope | R2 | R>\n} = dual((args) => core.isEffect(args[0]), (acquire, release) =>\n  ensuring(\n    acquire,\n    addFinalizer((exit) => release(exit))\n  ))\n\n/* @internal */\nexport const addFinalizer = <X, R>(\n  finalizer: (exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R>\n): Effect.Effect<void, never, R | Scope.Scope> =>\n  core.withFiberRuntime(\n    (runtime) => {\n      const acquireRefs = runtime.getFiberRefs()\n      const acquireFlags = runtime.currentRuntimeFlags\n      return core.flatMap(scope, (scope) =>\n        core.scopeAddFinalizerExit(scope, (exit) =>\n          core.withFiberRuntime((runtimeFinalizer) => {\n            const preRefs = runtimeFinalizer.getFiberRefs()\n            const preFlags = runtimeFinalizer.currentRuntimeFlags\n            const patchRefs = FiberRefsPatch.diff(preRefs, acquireRefs)\n            const patchFlags = _runtimeFlags.diff(preFlags, acquireFlags)\n            const inverseRefs = FiberRefsPatch.diff(acquireRefs, preRefs)\n            runtimeFinalizer.setFiberRefs(\n              FiberRefsPatch.patch(patchRefs, runtimeFinalizer.id(), acquireRefs)\n            )\n\n            return ensuring(\n              core.withRuntimeFlags(finalizer(exit) as Effect.Effect<X>, patchFlags),\n              core.sync(() => {\n                runtimeFinalizer.setFiberRefs(\n                  FiberRefsPatch.patch(inverseRefs, runtimeFinalizer.id(), runtimeFinalizer.getFiberRefs())\n                )\n              })\n            )\n          })))\n    }\n  )\n\n/* @internal */\nexport const daemonChildren = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> => {\n  const forkScope = core.fiberRefLocally(core.currentForkScopeOverride, Option.some(fiberScope.globalScope))\n  return forkScope(self)\n}\n\n/** @internal */\nconst _existsParFound = Symbol.for(\"effect/Effect/existsPar/found\")\n\n/* @internal */\nexport const exists: {\n  <A, E, R>(f: (a: A, i: number) => Effect.Effect<boolean, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }): (elements: Iterable<A>) => Effect.Effect<boolean, E, R>\n  <A, E, R>(elements: Iterable<A>, f: (a: A, i: number) => Effect.Effect<boolean, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }): Effect.Effect<boolean, E, R>\n} = dual(\n  (args) => Predicate.isIterable(args[0]) && !core.isEffect(args[0]),\n  <A, E, R>(elements: Iterable<A>, f: (a: A, i: number) => Effect.Effect<boolean, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n  }) =>\n    concurrency.matchSimple(\n      options?.concurrency,\n      () => core.suspend(() => existsLoop(elements[Symbol.iterator](), 0, f)),\n      () =>\n        core.matchEffect(\n          forEach(\n            elements,\n            (a, i) => core.if_(f(a, i), { onTrue: () => core.fail(_existsParFound), onFalse: () => core.void }),\n            options\n          ),\n          {\n            onFailure: (e) => e === _existsParFound ? core.succeed(true) : core.fail(e),\n            onSuccess: () => core.succeed(false)\n          }\n        )\n    )\n)\n\nconst existsLoop = <A, E, R>(\n  iterator: Iterator<A>,\n  index: number,\n  f: (a: A, i: number) => Effect.Effect<boolean, E, R>\n): Effect.Effect<boolean, E, R> => {\n  const next = iterator.next()\n  if (next.done) {\n    return core.succeed(false)\n  }\n  return pipe(core.flatMap(\n    f(next.value, index),\n    (b) => b ? core.succeed(b) : existsLoop(iterator, index + 1, f)\n  ))\n}\n\n/* @internal */\nexport const filter = dual<\n  <A, E, R>(\n    f: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly negate?: boolean | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => (elements: Iterable<A>) => Effect.Effect<Array<A>, E, R>,\n  <A, E, R>(elements: Iterable<A>, f: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly negate?: boolean | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }) => Effect.Effect<Array<A>, E, R>\n>(\n  (args) => Predicate.isIterable(args[0]) && !core.isEffect(args[0]),\n  <A, E, R>(elements: Iterable<A>, f: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly negate?: boolean | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }) => {\n    const predicate = options?.negate ? (a: A, i: number) => core.map(f(a, i), Boolean.not) : f\n    return concurrency.matchSimple(\n      options?.concurrency,\n      () =>\n        core.suspend(() =>\n          RA.fromIterable(elements).reduceRight(\n            (effect, a, i) =>\n              core.zipWith(\n                effect,\n                core.suspend(() => predicate(a, i)),\n                (list, b) => b ? [a, ...list] : list\n              ),\n            core.sync(() => new Array<A>()) as Effect.Effect<Array<A>, E, R>\n          )\n        ),\n      () =>\n        core.map(\n          forEach(\n            elements,\n            (a, i) => core.map(predicate(a, i), (b) => (b ? Option.some(a) : Option.none())),\n            options\n          ),\n          RA.getSomes\n        )\n    )\n  }\n)\n\n// === all\n\nconst allResolveInput = (\n  input: Iterable<Effect.Effect<any, any, any>> | Record<string, Effect.Effect<any, any, any>>\n): [Iterable<Effect.Effect<any, any, any>>, Option.Option<(as: ReadonlyArray<any>) => any>] => {\n  if (Array.isArray(input) || Predicate.isIterable(input)) {\n    return [input, Option.none()]\n  }\n  const keys = Object.keys(input)\n  const size = keys.length\n  return [\n    keys.map((k) => input[k]),\n    Option.some((values: ReadonlyArray<any>) => {\n      const res = {}\n      for (let i = 0; i < size; i++) {\n        ;(res as any)[keys[i]] = values[i]\n      }\n      return res\n    })\n  ]\n}\n\nconst allValidate = (\n  effects: Iterable<Effect.Effect<any, any, any>>,\n  reconcile: Option.Option<(as: ReadonlyArray<any>) => any>,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n) => {\n  const eitherEffects: Array<Effect.Effect<Either.Either<unknown, unknown>, never, unknown>> = []\n  for (const effect of effects) {\n    eitherEffects.push(core.either(effect))\n  }\n  return core.flatMap(\n    forEach(eitherEffects, identity, {\n      concurrency: options?.concurrency,\n      batching: options?.batching\n    }),\n    (eithers) => {\n      const none = Option.none()\n      const size = eithers.length\n      const errors: Array<unknown> = new Array(size)\n      const successes: Array<unknown> = new Array(size)\n      let errored = false\n      for (let i = 0; i < size; i++) {\n        const either = eithers[i] as Either.Either<unknown, unknown>\n        if (either._tag === \"Left\") {\n          errors[i] = Option.some(either.left)\n          errored = true\n        } else {\n          successes[i] = either.right\n          errors[i] = none\n        }\n      }\n      if (errored) {\n        return reconcile._tag === \"Some\" ?\n          core.fail(reconcile.value(errors)) :\n          core.fail(errors)\n      } else if (options?.discard) {\n        return core.void\n      }\n      return reconcile._tag === \"Some\" ?\n        core.succeed(reconcile.value(successes)) :\n        core.succeed(successes)\n    }\n  )\n}\n\nconst allEither = (\n  effects: Iterable<Effect.Effect<any, any, any>>,\n  reconcile: Option.Option<(as: ReadonlyArray<any>) => any>,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n) => {\n  const eitherEffects: Array<Effect.Effect<Either.Either<unknown, unknown>, never, unknown>> = []\n  for (const effect of effects) {\n    eitherEffects.push(core.either(effect))\n  }\n\n  if (options?.discard) {\n    return forEach(eitherEffects, identity, {\n      concurrency: options?.concurrency,\n      batching: options?.batching,\n      discard: true\n    })\n  }\n\n  return core.map(\n    forEach(eitherEffects, identity, {\n      concurrency: options?.concurrency,\n      batching: options?.batching\n    }),\n    (eithers) =>\n      reconcile._tag === \"Some\" ?\n        reconcile.value(eithers) :\n        eithers\n  )\n}\n\n/* @internal */\nexport const all = <\n  const Arg extends Iterable<Effect.Effect<any, any, any>> | Record<string, Effect.Effect<any, any, any>>,\n  O extends {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n>(\n  arg: Arg,\n  options?: O\n): Effect.All.Return<Arg, O> => {\n  const [effects, reconcile] = allResolveInput(arg)\n\n  if (options?.mode === \"validate\") {\n    return allValidate(effects, reconcile, options) as any\n  } else if (options?.mode === \"either\") {\n    return allEither(effects, reconcile, options) as any\n  }\n\n  return options?.discard !== true && reconcile._tag === \"Some\"\n    ? core.map(\n      forEach(effects, identity, options as any),\n      reconcile.value\n    ) as any\n    : forEach(effects, identity, options as any) as any\n}\n\n/* @internal */\nexport const allWith = <\n  O extends {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n>(options?: O) =>\n<const Arg extends Iterable<Effect.Effect<any, any, any>> | Record<string, Effect.Effect<any, any, any>>>(\n  arg: Arg\n): Effect.All.Return<Arg, O> => all(arg, options)\n\n/* @internal */\nexport const allSuccesses = <Eff extends Effect.Effect<any, any, any>>(\n  elements: Iterable<Eff>,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n): Effect.Effect<Array<Effect.Effect.Success<Eff>>, never, Effect.Effect.Context<Eff>> =>\n  core.map(\n    all(RA.fromIterable(elements).map(core.exit), options),\n    RA.filterMap((exit) => core.exitIsSuccess(exit) ? Option.some(exit.effect_instruction_i0) : Option.none())\n  )\n\n/* @internal */\nexport const replicate = dual<\n  (n: number) => <A, E, R>(self: Effect.Effect<A, E, R>) => Array<Effect.Effect<A, E, R>>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, n: number) => Array<Effect.Effect<A, E, R>>\n>(2, (self, n) => Array.from({ length: n }, () => self))\n\n/* @internal */\nexport const replicateEffect: {\n  (\n    n: number,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<Array<A>, E, R>\n  (\n    n: number,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<void, E, R>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    n: number,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect.Effect<Array<A>, E, R>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    n: number,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect.Effect<void, E, R>\n} = dual(\n  (args) => core.isEffect(args[0]),\n  (self, n, options) => all(replicate(self, n), options)\n)\n\n/* @internal */\nexport const forEach: {\n  <B, E, R, S extends Iterable<any>>(\n    f: (a: RA.ReadonlyArray.Infer<S>, i: number) => Effect.Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    } | undefined\n  ): (\n    self: S\n  ) => Effect.Effect<RA.ReadonlyArray.With<S, B>, E, R>\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): (self: Iterable<A>) => Effect.Effect<void, E, R>\n  <A, B, E, R>(\n    self: RA.NonEmptyReadonlyArray<A>,\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    } | undefined\n  ): Effect.Effect<RA.NonEmptyArray<B>, E, R>\n  <A, B, E, R>(\n    self: Iterable<A>,\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    } | undefined\n  ): Effect.Effect<Array<B>, E, R>\n  <A, B, E, R>(\n    self: Iterable<A>,\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect.Effect<void, E, R>\n} = dual((args) => Predicate.isIterable(args[0]), <A, R, E, B>(\n  self: Iterable<A>,\n  f: (a: A, i: number) => Effect.Effect<B, E, R>,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n) =>\n  core.withFiberRuntime<A | void, E, R>((r) => {\n    const isRequestBatchingEnabled = options?.batching === true ||\n      (options?.batching === \"inherit\" && r.getFiberRef(core.currentRequestBatching))\n\n    if (options?.discard) {\n      return concurrency.match(\n        options.concurrency,\n        () =>\n          finalizersMaskInternal(ExecutionStrategy.sequential, options?.concurrentFinalizers)((restore) =>\n            isRequestBatchingEnabled\n              ? forEachConcurrentDiscard(self, (a, i) => restore(f(a, i)), true, false, 1)\n              : core.forEachSequentialDiscard(self, (a, i) => restore(f(a, i)))\n          ),\n        () =>\n          finalizersMaskInternal(ExecutionStrategy.parallel, options?.concurrentFinalizers)((restore) =>\n            forEachConcurrentDiscard(self, (a, i) => restore(f(a, i)), isRequestBatchingEnabled, false)\n          ),\n        (n) =>\n          finalizersMaskInternal(ExecutionStrategy.parallelN(n), options?.concurrentFinalizers)((restore) =>\n            forEachConcurrentDiscard(self, (a, i) => restore(f(a, i)), isRequestBatchingEnabled, false, n)\n          )\n      )\n    }\n\n    return concurrency.match(\n      options?.concurrency,\n      () =>\n        finalizersMaskInternal(ExecutionStrategy.sequential, options?.concurrentFinalizers)((restore) =>\n          isRequestBatchingEnabled\n            ? forEachParN(self, 1, (a, i) => restore(f(a, i)), true)\n            : core.forEachSequential(self, (a, i) => restore(f(a, i)))\n        ),\n      () =>\n        finalizersMaskInternal(ExecutionStrategy.parallel, options?.concurrentFinalizers)((restore) =>\n          forEachParUnbounded(self, (a, i) => restore(f(a, i)), isRequestBatchingEnabled)\n        ),\n      (n) =>\n        finalizersMaskInternal(ExecutionStrategy.parallelN(n), options?.concurrentFinalizers)((restore) =>\n          forEachParN(self, n, (a, i) => restore(f(a, i)), isRequestBatchingEnabled)\n        )\n    )\n  }))\n\n/* @internal */\nexport const forEachParUnbounded = <A, B, E, R>(\n  self: Iterable<A>,\n  f: (a: A, i: number) => Effect.Effect<B, E, R>,\n  batching: boolean\n): Effect.Effect<Array<B>, E, R> =>\n  core.suspend(() => {\n    const as = RA.fromIterable(self)\n    const array = new Array<B>(as.length)\n    const fn = (a: A, i: number) => core.flatMap(f(a, i), (b) => core.sync(() => array[i] = b))\n    return core.zipRight(forEachConcurrentDiscard(as, fn, batching, false), core.succeed(array))\n  })\n\n/** @internal */\nexport const forEachConcurrentDiscard = <A, X, E, R>(\n  self: Iterable<A>,\n  f: (a: A, i: number) => Effect.Effect<X, E, R>,\n  batching: boolean,\n  processAll: boolean,\n  n?: number\n): Effect.Effect<void, E, R> =>\n  core.uninterruptibleMask((restore) =>\n    core.transplant((graft) =>\n      core.withFiberRuntime((parent) => {\n        let todos = Array.from(self).reverse()\n        let target = todos.length\n        if (target === 0) {\n          return core.void\n        }\n        let counter = 0\n        let interrupted = false\n        const fibersCount = n ? Math.min(todos.length, n) : todos.length\n        const fibers = new Set<FiberRuntime<Exit.Exit<X, E> | Effect.Blocked<X, E>>>()\n        const results = new Array()\n        const interruptAll = () =>\n          fibers.forEach((fiber) => {\n            fiber.currentScheduler.scheduleTask(() => {\n              fiber.unsafeInterruptAsFork(parent.id())\n            }, 0)\n          })\n        const startOrder = new Array<FiberRuntime<Exit.Exit<X, E> | Effect.Blocked<X, E>>>()\n        const joinOrder = new Array<FiberRuntime<Exit.Exit<X, E> | Effect.Blocked<X, E>>>()\n        const residual = new Array<core.Blocked>()\n        const collectExits = () => {\n          const exits: Array<Exit.Exit<any, E>> = results\n            .filter(({ exit }) => exit._tag === \"Failure\")\n            .sort((a, b) => a.index < b.index ? -1 : a.index === b.index ? 0 : 1)\n            .map(({ exit }) => exit)\n          if (exits.length === 0) {\n            exits.push(core.exitVoid)\n          }\n          return exits\n        }\n        const runFiber = <A, E, R>(eff: Effect.Effect<A, E, R>, interruptImmediately = false) => {\n          const runnable = core.uninterruptible(graft(eff))\n          const fiber = unsafeForkUnstarted(\n            runnable,\n            parent,\n            parent.currentRuntimeFlags,\n            fiberScope.globalScope\n          )\n          parent.currentScheduler.scheduleTask(() => {\n            if (interruptImmediately) {\n              fiber.unsafeInterruptAsFork(parent.id())\n            }\n            fiber.resume(runnable)\n          }, 0)\n          return fiber\n        }\n        const onInterruptSignal = () => {\n          if (!processAll) {\n            target -= todos.length\n            todos = []\n          }\n          interrupted = true\n          interruptAll()\n        }\n        const stepOrExit = batching ? core.step : core.exit\n        const processingFiber = runFiber(\n          core.async<any, any, any>((resume) => {\n            const pushResult = <X, E>(res: Exit.Exit<X, E> | Effect.Blocked<X, E>, index: number) => {\n              if (res._op === \"Blocked\") {\n                residual.push(res as core.Blocked)\n              } else {\n                results.push({ index, exit: res })\n                if (res._op === \"Failure\" && !interrupted) {\n                  onInterruptSignal()\n                }\n              }\n            }\n            const next = () => {\n              if (todos.length > 0) {\n                const a = todos.pop()!\n                let index = counter++\n                const returnNextElement = () => {\n                  const a = todos.pop()!\n                  index = counter++\n                  return core.flatMap(core.yieldNow(), () =>\n                    core.flatMap(\n                      stepOrExit(restore(f(a, index))),\n                      onRes\n                    ))\n                }\n                const onRes = (\n                  res: Exit.Exit<X, E> | Effect.Blocked<X, E>\n                ): Effect.Effect<Exit.Exit<X, E> | Effect.Blocked<X, E>, never, R> => {\n                  if (todos.length > 0) {\n                    pushResult(res, index)\n                    if (todos.length > 0) {\n                      return returnNextElement()\n                    }\n                  }\n                  return core.succeed(res)\n                }\n                const todo = core.flatMap(\n                  stepOrExit(restore(f(a, index))),\n                  onRes\n                )\n                const fiber = runFiber(todo)\n                startOrder.push(fiber)\n                fibers.add(fiber)\n                if (interrupted) {\n                  fiber.currentScheduler.scheduleTask(() => {\n                    fiber.unsafeInterruptAsFork(parent.id())\n                  }, 0)\n                }\n                fiber.addObserver((wrapped) => {\n                  let exit: Exit.Exit<any, any> | core.Blocked\n                  if (wrapped._op === \"Failure\") {\n                    exit = wrapped\n                  } else {\n                    exit = wrapped.effect_instruction_i0 as any\n                  }\n                  joinOrder.push(fiber)\n                  fibers.delete(fiber)\n                  pushResult(exit, index)\n                  if (results.length === target) {\n                    resume(core.succeed(Option.getOrElse(\n                      core.exitCollectAll(collectExits(), { parallel: true }),\n                      () => core.exitVoid\n                    )))\n                  } else if (residual.length + results.length === target) {\n                    const requests = residual.map((blocked) => blocked.effect_instruction_i0).reduce(_RequestBlock.par)\n                    resume(core.succeed(core.blocked(\n                      requests,\n                      forEachConcurrentDiscard(\n                        [\n                          Option.getOrElse(\n                            core.exitCollectAll(collectExits(), { parallel: true }),\n                            () => core.exitVoid\n                          ),\n                          ...residual.map((blocked) => blocked.effect_instruction_i1)\n                        ],\n                        (i) => i,\n                        batching,\n                        true,\n                        n\n                      )\n                    )))\n                  } else {\n                    next()\n                  }\n                })\n              }\n            }\n            for (let i = 0; i < fibersCount; i++) {\n              next()\n            }\n          })\n        )\n        return core.asVoid(\n          core.onExit(\n            core.flatten(restore(internalFiber.join(processingFiber))),\n            core.exitMatch({\n              onFailure: () => {\n                onInterruptSignal()\n                const target = residual.length + 1\n                const concurrency = Math.min(typeof n === \"number\" ? n : residual.length, residual.length)\n                const toPop = Array.from(residual)\n                return core.async<any, any>((cb) => {\n                  const exits: Array<Exit.Exit<any, any>> = []\n                  let count = 0\n                  let index = 0\n                  const check = (index: number, hitNext: boolean) => (exit: Exit.Exit<any, any>) => {\n                    exits[index] = exit\n                    count++\n                    if (count === target) {\n                      cb(Option.getOrThrow(core.exitCollectAll(exits, { parallel: true })))\n                    }\n                    if (toPop.length > 0 && hitNext) {\n                      next()\n                    }\n                  }\n                  const next = () => {\n                    runFiber(toPop.pop()!, true).addObserver(check(index, true))\n                    index++\n                  }\n                  processingFiber.addObserver(check(index, false))\n                  index++\n                  for (let i = 0; i < concurrency; i++) {\n                    next()\n                  }\n                }) as any\n              },\n              onSuccess: () => core.forEachSequential(joinOrder, (f) => f.inheritAll)\n            })\n          )\n        )\n      })\n    )\n  )\n\n/* @internal */\nexport const forEachParN = <A, B, E, R>(\n  self: Iterable<A>,\n  n: number,\n  f: (a: A, i: number) => Effect.Effect<B, E, R>,\n  batching: boolean\n): Effect.Effect<Array<B>, E, R> =>\n  core.suspend(() => {\n    const as = RA.fromIterable(self)\n    const array = new Array<B>(as.length)\n    const fn = (a: A, i: number) => core.map(f(a, i), (b) => array[i] = b)\n    return core.zipRight(forEachConcurrentDiscard(as, fn, batching, false, n), core.succeed(array))\n  })\n\n/* @internal */\nexport const fork = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R> =>\n  core.withFiberRuntime((state, status) => core.succeed(unsafeFork(self, state, status.runtimeFlags)))\n\n/* @internal */\nexport const forkDaemon = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R> =>\n  forkWithScopeOverride(self, fiberScope.globalScope)\n\n/* @internal */\nexport const forkWithErrorHandler = dual<\n  <E, X>(\n    handler: (e: E) => Effect.Effect<X>\n  ) => <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R>,\n  <A, E, R, X>(\n    self: Effect.Effect<A, E, R>,\n    handler: (e: E) => Effect.Effect<X>\n  ) => Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R>\n>(2, (self, handler) =>\n  fork(core.onError(self, (cause) => {\n    const either = internalCause.failureOrCause(cause)\n    switch (either._tag) {\n      case \"Left\":\n        return handler(either.left)\n      case \"Right\":\n        return core.failCause(either.right)\n    }\n  })))\n\n/** @internal */\nexport const unsafeFork = <A, E, R, E2, B>(\n  effect: Effect.Effect<A, E, R>,\n  parentFiber: FiberRuntime<B, E2>,\n  parentRuntimeFlags: RuntimeFlags.RuntimeFlags,\n  overrideScope: fiberScope.FiberScope | null = null\n): FiberRuntime<A, E> => {\n  const childFiber = unsafeMakeChildFiber(effect, parentFiber, parentRuntimeFlags, overrideScope)\n  childFiber.resume(effect)\n  return childFiber\n}\n\n/** @internal */\nexport const unsafeForkUnstarted = <A, E, R, E2, B>(\n  effect: Effect.Effect<A, E, R>,\n  parentFiber: FiberRuntime<B, E2>,\n  parentRuntimeFlags: RuntimeFlags.RuntimeFlags,\n  overrideScope: fiberScope.FiberScope | null = null\n): FiberRuntime<A, E> => {\n  const childFiber = unsafeMakeChildFiber(effect, parentFiber, parentRuntimeFlags, overrideScope)\n  return childFiber\n}\n\n/** @internal */\nexport const unsafeMakeChildFiber = <A, E, R, E2, B>(\n  effect: Effect.Effect<A, E, R>,\n  parentFiber: FiberRuntime<B, E2>,\n  parentRuntimeFlags: RuntimeFlags.RuntimeFlags,\n  overrideScope: fiberScope.FiberScope | null = null\n): FiberRuntime<A, E> => {\n  const childId = FiberId.unsafeMake()\n  const parentFiberRefs = parentFiber.getFiberRefs()\n  const childFiberRefs = fiberRefs.forkAs(parentFiberRefs, childId)\n  const childFiber = new FiberRuntime<A, E>(childId, childFiberRefs, parentRuntimeFlags)\n  const childContext = fiberRefs.getOrDefault(\n    childFiberRefs,\n    core.currentContext as unknown as FiberRef.FiberRef<Context.Context<R>>\n  )\n  const supervisor = childFiber.currentSupervisor\n\n  supervisor.onStart(\n    childContext,\n    effect,\n    Option.some(parentFiber),\n    childFiber\n  )\n\n  childFiber.addObserver((exit) => supervisor.onEnd(exit, childFiber))\n\n  const parentScope = overrideScope !== null ? overrideScope : pipe(\n    parentFiber.getFiberRef(core.currentForkScopeOverride),\n    Option.getOrElse(() => parentFiber.scope())\n  )\n\n  parentScope.add(parentRuntimeFlags, childFiber)\n\n  return childFiber\n}\n\n/* @internal */\nconst forkWithScopeOverride = <A, E, R>(\n  self: Effect.Effect<A, E, R>,\n  scopeOverride: fiberScope.FiberScope\n): Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R> =>\n  core.withFiberRuntime((parentFiber, parentStatus) =>\n    core.succeed(unsafeFork(self, parentFiber, parentStatus.runtimeFlags, scopeOverride))\n  )\n\n/* @internal */\nexport const mergeAll = dual<\n  <Z, Eff extends Effect.Effect<any, any, any>>(\n    zero: Z,\n    f: (z: Z, a: Effect.Effect.Success<Eff>, i: number) => Z,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => (elements: Iterable<Eff>) => Effect.Effect<Z, Effect.Effect.Error<Eff>, Effect.Effect.Context<Eff>>,\n  <Eff extends Effect.Effect<any, any, any>, Z>(\n    elements: Iterable<Eff>,\n    zero: Z,\n    f: (z: Z, a: Effect.Effect.Success<Eff>, i: number) => Z,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => Effect.Effect<Z, Effect.Effect.Error<Eff>, Effect.Effect.Context<Eff>>\n>(\n  (args) => Predicate.isFunction(args[2]),\n  <A, E, R, Z>(elements: Iterable<Effect.Effect<A, E, R>>, zero: Z, f: (z: Z, a: A, i: number) => Z, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }) =>\n    concurrency.matchSimple(\n      options?.concurrency,\n      () =>\n        RA.fromIterable(elements).reduce(\n          (acc, a, i) => core.zipWith(acc, a, (acc, a) => f(acc, a, i)),\n          core.succeed(zero) as Effect.Effect<Z, E, R>\n        ),\n      () =>\n        core.flatMap(Ref.make(zero), (acc) =>\n          core.flatMap(\n            forEach(\n              elements,\n              (effect, i) => core.flatMap(effect, (a) => Ref.update(acc, (b) => f(b, a, i))),\n              options\n            ),\n            () => Ref.get(acc)\n          ))\n    )\n)\n\n/* @internal */\nexport const partition = dual<\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => (elements: Iterable<A>) => Effect.Effect<[excluded: Array<E>, satisfying: Array<B>], never, R>,\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => Effect.Effect<[excluded: Array<E>, satisfying: Array<B>], never, R>\n>((args) => Predicate.isIterable(args[0]), (elements, f, options) =>\n  pipe(\n    forEach(elements, (a, i) => core.either(f(a, i)), options),\n    core.map((chunk) => core.partitionMap(chunk, identity))\n  ))\n\n/* @internal */\nexport const validateAll = dual<\n  {\n    <A, B, E, R>(\n      f: (a: A, i: number) => Effect.Effect<B, E, R>,\n      options?: {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly discard?: false | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n    ): (elements: Iterable<A>) => Effect.Effect<Array<B>, Array<E>, R>\n    <A, B, E, R>(\n      f: (a: A, i: number) => Effect.Effect<B, E, R>,\n      options: {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly discard: true\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n    ): (elements: Iterable<A>) => Effect.Effect<void, Array<E>, R>\n  },\n  {\n    <A, B, E, R>(\n      elements: Iterable<A>,\n      f: (a: A, i: number) => Effect.Effect<B, E, R>,\n      options?: {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly discard?: false | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n    ): Effect.Effect<Array<B>, Array<E>, R>\n    <A, B, E, R>(\n      elements: Iterable<A>,\n      f: (a: A, i: number) => Effect.Effect<B, E, R>,\n      options: {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly discard: true\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n    ): Effect.Effect<void, Array<E>, R>\n  }\n>(\n  (args) => Predicate.isIterable(args[0]),\n  <A, B, E, R>(elements: Iterable<A>, f: (a: A, i: number) => Effect.Effect<B, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }): Effect.Effect<any, Array<E>, R> =>\n    core.flatMap(\n      partition(elements, f, {\n        concurrency: options?.concurrency,\n        batching: options?.batching\n      }),\n      ([es, bs]) =>\n        es.length === 0\n          ? options?.discard ? core.void : core.succeed(bs)\n          : core.fail(es)\n    )\n)\n\n/* @internal */\nexport const raceAll: <Eff extends Effect.Effect<any, any, any>>(\n  all: Iterable<Eff>\n) => Effect.Effect<Effect.Effect.Success<Eff>, Effect.Effect.Error<Eff>, Effect.Effect.Context<Eff>> = <\n  A,\n  E,\n  R\n>(all: Iterable<Effect.Effect<A, E, R>>): Effect.Effect<A, E, R> => {\n  const list = Chunk.fromIterable(all)\n  if (!Chunk.isNonEmpty(list)) {\n    return core.dieSync(() => new core.IllegalArgumentException(`Received an empty collection of effects`))\n  }\n  const self = Chunk.headNonEmpty(list)\n  const effects = Chunk.tailNonEmpty(list)\n  const inheritAll = (res: readonly [A, Fiber.Fiber<A, E>]) =>\n    pipe(\n      internalFiber.inheritAll(res[1]),\n      core.as(res[0])\n    )\n  return pipe(\n    core.deferredMake<readonly [A, Fiber.Fiber<A, E>], E>(),\n    core.flatMap((done) =>\n      pipe(\n        Ref.make(effects.length),\n        core.flatMap((fails) =>\n          core.uninterruptibleMask<A, E, R>((restore) =>\n            pipe(\n              fork(core.interruptible(self)),\n              core.flatMap((head) =>\n                pipe(\n                  effects,\n                  core.forEachSequential((effect) => fork(core.interruptible(effect))),\n                  core.map((fibers) => Chunk.unsafeFromArray(fibers)),\n                  core.map((tail) => pipe(tail, Chunk.prepend(head)) as Chunk.Chunk<Fiber.RuntimeFiber<A, E>>),\n                  core.tap((fibers) =>\n                    pipe(\n                      fibers,\n                      RA.reduce(core.void, (effect, fiber) =>\n                        pipe(\n                          effect,\n                          core.zipRight(\n                            pipe(\n                              internalFiber._await(fiber),\n                              core.flatMap(raceAllArbiter(fibers, fiber, done, fails)),\n                              fork,\n                              core.asVoid\n                            )\n                          )\n                        ))\n                    )\n                  ),\n                  core.flatMap((fibers) =>\n                    pipe(\n                      restore(pipe(Deferred.await(done), core.flatMap(inheritAll))),\n                      core.onInterrupt(() =>\n                        pipe(\n                          fibers,\n                          RA.reduce(\n                            core.void,\n                            (effect, fiber) => pipe(effect, core.zipLeft(core.interruptFiber(fiber)))\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n}\n\nconst raceAllArbiter = <E, E1, A, A1>(\n  fibers: Iterable<Fiber.Fiber<A | A1, E | E1>>,\n  winner: Fiber.Fiber<A | A1, E | E1>,\n  deferred: Deferred.Deferred<readonly [A | A1, Fiber.Fiber<A | A1, E | E1>], E | E1>,\n  fails: Ref.Ref<number>\n) =>\n(exit: Exit.Exit<A | A1, E | E1>): Effect.Effect<void> =>\n  core.exitMatchEffect(exit, {\n    onFailure: (cause) =>\n      pipe(\n        Ref.modify(fails, (fails) =>\n          [\n            fails === 0 ?\n              pipe(core.deferredFailCause(deferred, cause), core.asVoid) :\n              core.void,\n            fails - 1\n          ] as const),\n        core.flatten\n      ),\n    onSuccess: (value): Effect.Effect<void> =>\n      pipe(\n        core.deferredSucceed(deferred, [value, winner] as const),\n        core.flatMap((set) =>\n          set ?\n            pipe(\n              Chunk.fromIterable(fibers),\n              RA.reduce(\n                core.void,\n                (effect, fiber) =>\n                  fiber === winner ?\n                    effect :\n                    pipe(effect, core.zipLeft(core.interruptFiber(fiber)))\n              )\n            ) :\n            core.void\n        )\n      )\n  })\n\n/* @internal */\nexport const reduceEffect = dual<\n  <Z, E, R, Eff extends Effect.Effect<any, any, any>>(\n    zero: Effect.Effect<Z, E, R>,\n    f: (acc: NoInfer<Z>, a: Effect.Effect.Success<Eff>, i: number) => Z,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => (elements: Iterable<Eff>) => Effect.Effect<Z, E | Effect.Effect.Error<Eff>, R | Effect.Effect.Context<Eff>>,\n  <Eff extends Effect.Effect<any, any, any>, Z, E, R>(\n    elements: Iterable<Eff>,\n    zero: Effect.Effect<Z, E, R>,\n    f: (acc: NoInfer<Z>, a: Effect.Effect.Success<Eff>, i: number) => Z,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => Effect.Effect<Z, E | Effect.Effect.Error<Eff>, R | Effect.Effect.Context<Eff>>\n>((args) => Predicate.isIterable(args[0]) && !core.isEffect(args[0]), <A, E, R, Z>(\n  elements: Iterable<Effect.Effect<A, E, R>>,\n  zero: Effect.Effect<Z, E, R>,\n  f: (acc: NoInfer<Z>, a: NoInfer<A>, i: number) => Z,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n) =>\n  concurrency.matchSimple(\n    options?.concurrency,\n    () => RA.fromIterable(elements).reduce((acc, a, i) => core.zipWith(acc, a, (acc, a) => f(acc, a, i)), zero),\n    () =>\n      core.suspend(() =>\n        pipe(\n          mergeAll(\n            [zero, ...elements],\n            Option.none<Z>(),\n            (acc, elem, i) => {\n              switch (acc._tag) {\n                case \"None\": {\n                  return Option.some(elem as Z)\n                }\n                case \"Some\": {\n                  return Option.some(f(acc.value, elem as A, i))\n                }\n              }\n            },\n            options\n          ),\n          core.map((option) => {\n            switch (option._tag) {\n              case \"None\": {\n                throw new Error(\n                  \"BUG: Effect.reduceEffect - please report an issue at https://github.com/Effect-TS/effect/issues\"\n                )\n              }\n              case \"Some\": {\n                return option.value\n              }\n            }\n          })\n        )\n      )\n  ))\n\n/* @internal */\nexport const parallelFinalizers = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  core.contextWithEffect((context) =>\n    Option.match(Context.getOption(context, scopeTag), {\n      onNone: () => self,\n      onSome: (scope) => {\n        switch (scope.strategy._tag) {\n          case \"Parallel\":\n            return self\n          case \"Sequential\":\n          case \"ParallelN\":\n            return core.flatMap(\n              core.scopeFork(scope, ExecutionStrategy.parallel),\n              (inner) => scopeExtend(self, inner)\n            )\n        }\n      }\n    })\n  )\n\n/* @internal */\nexport const parallelNFinalizers =\n  (parallelism: number) => <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n    core.contextWithEffect((context) =>\n      Option.match(Context.getOption(context, scopeTag), {\n        onNone: () => self,\n        onSome: (scope) => {\n          if (scope.strategy._tag === \"ParallelN\" && scope.strategy.parallelism === parallelism) {\n            return self\n          }\n          return core.flatMap(\n            core.scopeFork(scope, ExecutionStrategy.parallelN(parallelism)),\n            (inner) => scopeExtend(self, inner)\n          )\n        }\n      })\n    )\n\n/* @internal */\nexport const finalizersMask = (strategy: ExecutionStrategy.ExecutionStrategy) =>\n<A, E, R>(\n  self: (\n    restore: <A1, E1, R1>(self: Effect.Effect<A1, E1, R1>) => Effect.Effect<A1, E1, R1>\n  ) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> => finalizersMaskInternal(strategy, true)(self)\n\n/* @internal */\nexport const finalizersMaskInternal =\n  (strategy: ExecutionStrategy.ExecutionStrategy, concurrentFinalizers?: boolean | undefined) =>\n  <A, E, R>(\n    self: (\n      restore: <A1, E1, R1>(self: Effect.Effect<A1, E1, R1>) => Effect.Effect<A1, E1, R1>\n    ) => Effect.Effect<A, E, R>\n  ): Effect.Effect<A, E, R> =>\n    core.contextWithEffect((context) =>\n      Option.match(Context.getOption(context, scopeTag), {\n        onNone: () => self(identity),\n        onSome: (scope) => {\n          if (concurrentFinalizers === true) {\n            const patch = strategy._tag === \"Parallel\"\n              ? parallelFinalizers\n              : strategy._tag === \"Sequential\"\n              ? sequentialFinalizers\n              : parallelNFinalizers(strategy.parallelism)\n            switch (scope.strategy._tag) {\n              case \"Parallel\":\n                return patch(self(parallelFinalizers))\n              case \"Sequential\":\n                return patch(self(sequentialFinalizers))\n              case \"ParallelN\":\n                return patch(self(parallelNFinalizers(scope.strategy.parallelism)))\n            }\n          } else {\n            return self(identity)\n          }\n        }\n      })\n    )\n\n/* @internal */\nexport const scopeWith = <A, E, R>(\n  f: (scope: Scope.Scope) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R | Scope.Scope> => core.flatMap(scopeTag, f)\n\n/* @internal */\nexport const scopedEffect = <A, E, R>(effect: Effect.Effect<A, E, R>): Effect.Effect<A, E, Exclude<R, Scope.Scope>> =>\n  core.flatMap(scopeMake(), (scope) => scopeUse(effect, scope))\n\n/* @internal */\nexport const sequentialFinalizers = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  core.contextWithEffect((context) =>\n    Option.match(Context.getOption(context, scopeTag), {\n      onNone: () => self,\n      onSome: (scope) => {\n        switch (scope.strategy._tag) {\n          case \"Sequential\":\n            return self\n          case \"Parallel\":\n          case \"ParallelN\":\n            return core.flatMap(\n              core.scopeFork(scope, ExecutionStrategy.sequential),\n              (inner) => scopeExtend(self, inner)\n            )\n        }\n      }\n    })\n  )\n\n/* @internal */\nexport const tagMetricsScoped = (key: string, value: string): Effect.Effect<void, never, Scope.Scope> =>\n  labelMetricsScoped([metricLabel.make(key, value)])\n\n/* @internal */\nexport const labelMetricsScoped = (\n  labels: Iterable<MetricLabel.MetricLabel>\n): Effect.Effect<void, never, Scope.Scope> =>\n  fiberRefLocallyScopedWith(core.currentMetricLabels, (old) => RA.union(old, labels))\n\n/* @internal */\nexport const using = dual<\n  <A, A2, E2, R2>(\n    use: (a: A) => Effect.Effect<A2, E2, R2>\n  ) => <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2, E | E2, Exclude<R, Scope.Scope> | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    use: (a: A) => Effect.Effect<A2, E2, R2>\n  ) => Effect.Effect<A2, E | E2, Exclude<R, Scope.Scope> | R2>\n>(2, (self, use) =>\n  core.acquireUseRelease(\n    scopeMake(),\n    (scope) => core.flatMap(scopeExtend(self, scope), use),\n    (scope, exit) => core.scopeClose(scope, exit)\n  ))\n\n/** @internal */\nexport const validate = dual<\n  <B, E1, R1>(\n    that: Effect.Effect<B, E1, R1>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<[A, B], E | E1, R | R1>,\n  <A, E, R, B, E1, R1>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<B, E1, R1>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => Effect.Effect<[A, B], E | E1, R | R1>\n>(\n  (args) => core.isEffect(args[1]),\n  (self, that, options) => validateWith(self, that, (a, b) => [a, b], options)\n)\n\n/** @internal */\nexport const validateWith = dual<\n  <B, E1, R1, A, C>(\n    that: Effect.Effect<B, E1, R1>,\n    f: (a: A, b: B) => C,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<C, E | E1, R | R1>,\n  <A, E, R, B, E1, R1, C>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<B, E1, R1>,\n    f: (a: A, b: B) => C,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => Effect.Effect<C, E | E1, R | R1>\n>((args) => core.isEffect(args[1]), (self, that, f, options) =>\n  core.flatten(zipWithOptions(\n    core.exit(self),\n    core.exit(that),\n    (ea, eb) =>\n      core.exitZipWith(ea, eb, {\n        onSuccess: f,\n        onFailure: (ca, cb) => options?.concurrent ? internalCause.parallel(ca, cb) : internalCause.sequential(ca, cb)\n      }),\n    options\n  )))\n\n/* @internal */\nexport const validateAllPar = dual<\n  <A, B, E, R>(\n    f: (a: A) => Effect.Effect<B, E, R>\n  ) => (elements: Iterable<A>) => Effect.Effect<Array<B>, Array<E>, R>,\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A) => Effect.Effect<B, E, R>\n  ) => Effect.Effect<Array<B>, Array<E>, R>\n>(2, (elements, f) =>\n  core.flatMap(\n    partition(elements, f),\n    ([es, bs]) =>\n      es.length === 0\n        ? core.succeed(bs)\n        : core.fail(es)\n  ))\n\n/* @internal */\nexport const validateAllParDiscard = dual<\n  <A, B, E, R>(\n    f: (a: A) => Effect.Effect<B, E, R>\n  ) => (elements: Iterable<A>) => Effect.Effect<void, Array<E>, R>,\n  <A, B, E, R>(elements: Iterable<A>, f: (a: A) => Effect.Effect<B, E, R>) => Effect.Effect<void, Array<E>, R>\n>(2, (elements, f) =>\n  core.flatMap(\n    partition(elements, f),\n    ([es, _]) =>\n      es.length === 0\n        ? core.void\n        : core.fail(es)\n  ))\n\n/* @internal */\nexport const validateFirst = dual<\n  <A, B, E, R>(f: (a: A, i: number) => Effect.Effect<B, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }) => (elements: Iterable<A>) => Effect.Effect<B, Array<E>, R>,\n  <A, B, E, R>(elements: Iterable<A>, f: (a: A, i: number) => Effect.Effect<B, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }) => Effect.Effect<B, Array<E>, R>\n>(\n  (args) => Predicate.isIterable(args[0]),\n  (elements, f, options) => core.flip(forEach(elements, (a, i) => core.flip(f(a, i)), options))\n)\n\n/* @internal */\nexport const withClockScoped = <A extends Clock.Clock>(value: A) =>\n  fiberRefLocallyScopedWith(defaultServices.currentServices, Context.add(clock.clockTag, value))\n\n/* @internal */\nexport const withRandomScoped = <A extends Random.Random>(value: A) =>\n  fiberRefLocallyScopedWith(defaultServices.currentServices, Context.add(randomTag, value))\n\n/* @internal */\nexport const withConfigProviderScoped = (value: ConfigProvider) =>\n  fiberRefLocallyScopedWith(defaultServices.currentServices, Context.add(configProviderTag, value))\n\n/* @internal */\nexport const withEarlyRelease = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Effect.Effect<[Effect.Effect<void>, A], E, R | Scope.Scope> =>\n  scopeWith((parent) =>\n    core.flatMap(core.scopeFork(parent, executionStrategy.sequential), (child) =>\n      pipe(\n        self,\n        scopeExtend(child),\n        core.map((value) => [\n          core.fiberIdWith((fiberId) => core.scopeClose(child, core.exitInterrupt(fiberId))),\n          value\n        ])\n      ))\n  )\n\n/** @internal */\nexport const zipOptions = dual<\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<[A, A2], E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => Effect.Effect<[A, A2], E | E2, R | R2>\n>((args) => core.isEffect(args[1]), (\n  self,\n  that,\n  options\n) => zipWithOptions(self, that, (a, b) => [a, b], options))\n\n/** @internal */\nexport const zipLeftOptions = dual<\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<A, E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => Effect.Effect<A, E | E2, R | R2>\n>(\n  (args) => core.isEffect(args[1]),\n  (self, that, options) => {\n    if (options?.concurrent !== true && (options?.batching === undefined || options.batching === false)) {\n      return core.zipLeft(self, that)\n    }\n    return zipWithOptions(self, that, (a, _) => a, options)\n  }\n)\n\n/** @internal */\nexport const zipRightOptions: {\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect.Effect<A2, E2 | E, R2 | R>\n} = dual((args) => core.isEffect(args[1]), <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>,\n  options?: {\n    readonly concurrent?: boolean | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n): Effect.Effect<A2, E2 | E, R2 | R> => {\n  if (options?.concurrent !== true && (options?.batching === undefined || options.batching === false)) {\n    return core.zipRight(self, that)\n  }\n  return zipWithOptions(self, that, (_, b) => b, options)\n})\n\n/** @internal */\nexport const zipWithOptions: {\n  <A2, E2, R2, A, B>(\n    that: Effect.Effect<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2, B>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect.Effect<B, E2 | E, R2 | R>\n} = dual((args) => core.isEffect(args[1]), <A, E, R, A2, E2, R2, B>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>,\n  f: (a: A, b: A2) => B,\n  options?: {\n    readonly concurrent?: boolean | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n): Effect.Effect<B, E2 | E, R2 | R> =>\n  core.map(\n    all([self, that], {\n      concurrency: options?.concurrent ? 2 : 1,\n      batching: options?.batching,\n      concurrentFinalizers: options?.concurrentFinalizers\n    }),\n    ([a, a2]) => f(a, a2)\n  ))\n\n/* @internal */\nexport const withRuntimeFlagsScoped = (\n  update: RuntimeFlagsPatch.RuntimeFlagsPatch\n): Effect.Effect<void, never, Scope.Scope> => {\n  if (update === RuntimeFlagsPatch.empty) {\n    return core.void\n  }\n  return pipe(\n    core.runtimeFlags,\n    core.flatMap((runtimeFlags) => {\n      const updatedRuntimeFlags = _runtimeFlags.patch(runtimeFlags, update)\n      const revertRuntimeFlags = _runtimeFlags.diff(updatedRuntimeFlags, runtimeFlags)\n      return pipe(\n        core.updateRuntimeFlags(update),\n        core.zipRight(addFinalizer(() => core.updateRuntimeFlags(revertRuntimeFlags))),\n        core.asVoid\n      )\n    }),\n    core.uninterruptible\n  )\n}\n\n// circular with Scope\n\n/** @internal */\nexport const scopeTag = Context.GenericTag<Scope.Scope>(\"effect/Scope\")\n\n/* @internal */\nexport const scope: Effect.Effect<Scope.Scope, never, Scope.Scope> = scopeTag\n\ninterface ScopeImpl extends Scope.CloseableScope {\n  state: {\n    readonly _tag: \"Open\"\n    readonly finalizers: Set<Scope.Scope.Finalizer>\n  } | {\n    readonly _tag: \"Closed\"\n    readonly exit: Exit.Exit<unknown, unknown>\n  }\n}\n\nconst scopeUnsafeAddFinalizer = (scope: ScopeImpl, fin: Scope.Scope.Finalizer): void => {\n  if (scope.state._tag === \"Open\") {\n    scope.state.finalizers.add(fin)\n  }\n}\n\nconst ScopeImplProto: Omit<ScopeImpl, \"strategy\" | \"state\"> = {\n  [core.ScopeTypeId]: core.ScopeTypeId,\n  [core.CloseableScopeTypeId]: core.CloseableScopeTypeId,\n  pipe() {\n    return pipeArguments(this, arguments)\n  },\n  fork(this: ScopeImpl, strategy) {\n    return core.sync(() => {\n      const newScope = scopeUnsafeMake(strategy)\n      if (this.state._tag === \"Closed\") {\n        newScope.state = this.state\n        return newScope\n      }\n      const fin = (exit: Exit.Exit<unknown, unknown>) => newScope.close(exit)\n      this.state.finalizers.add(fin)\n      scopeUnsafeAddFinalizer(newScope, (_) =>\n        core.sync(() => {\n          if (this.state._tag === \"Open\") {\n            this.state.finalizers.delete(fin)\n          }\n        }))\n      return newScope\n    })\n  },\n  close(this: ScopeImpl, exit) {\n    return core.suspend(() => {\n      if (this.state._tag === \"Closed\") {\n        return core.void\n      }\n      const finalizers = Array.from(this.state.finalizers.values()).reverse()\n      this.state = { _tag: \"Closed\", exit }\n      if (finalizers.length === 0) {\n        return core.void\n      }\n      return executionStrategy.isSequential(this.strategy) ?\n        pipe(\n          core.forEachSequential(finalizers, (fin) => core.exit(fin(exit))),\n          core.flatMap((results) =>\n            pipe(\n              core.exitCollectAll(results),\n              Option.map(core.exitAsVoid),\n              Option.getOrElse(() => core.exitVoid)\n            )\n          )\n        ) :\n        executionStrategy.isParallel(this.strategy) ?\n        pipe(\n          forEachParUnbounded(finalizers, (fin) => core.exit(fin(exit)), false),\n          core.flatMap((results) =>\n            pipe(\n              core.exitCollectAll(results, { parallel: true }),\n              Option.map(core.exitAsVoid),\n              Option.getOrElse(() => core.exitVoid)\n            )\n          )\n        ) :\n        pipe(\n          forEachParN(finalizers, this.strategy.parallelism, (fin) => core.exit(fin(exit)), false),\n          core.flatMap((results) =>\n            pipe(\n              core.exitCollectAll(results, { parallel: true }),\n              Option.map(core.exitAsVoid),\n              Option.getOrElse(() => core.exitVoid)\n            )\n          )\n        )\n    })\n  },\n  addFinalizer(this: ScopeImpl, fin) {\n    return core.suspend(() => {\n      if (this.state._tag === \"Closed\") {\n        return fin(this.state.exit)\n      }\n      this.state.finalizers.add(fin)\n      return core.void\n    })\n  }\n}\n\nconst scopeUnsafeMake = (\n  strategy: ExecutionStrategy.ExecutionStrategy = executionStrategy.sequential\n): ScopeImpl => {\n  const scope = Object.create(ScopeImplProto)\n  scope.strategy = strategy\n  scope.state = { _tag: \"Open\", finalizers: new Set() }\n  return scope\n}\n\n/* @internal */\nexport const scopeMake = (\n  strategy: ExecutionStrategy.ExecutionStrategy = executionStrategy.sequential\n): Effect.Effect<Scope.Scope.Closeable> => core.sync(() => scopeUnsafeMake(strategy))\n\n/* @internal */\nexport const scopeExtend = dual<\n  (scope: Scope.Scope) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, Scope.Scope>>,\n  <A, E, R>(effect: Effect.Effect<A, E, R>, scope: Scope.Scope) => Effect.Effect<A, E, Exclude<R, Scope.Scope>>\n>(\n  2,\n  <A, E, R>(effect: Effect.Effect<A, E, R>, scope: Scope.Scope) =>\n    core.mapInputContext<A, E, R, Exclude<R, Scope.Scope>>(\n      effect,\n      // @ts-expect-error\n      Context.merge(Context.make(scopeTag, scope))\n    )\n)\n\n/* @internal */\nexport const scopeUse = dual<\n  (\n    scope: Scope.Scope.Closeable\n  ) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, Scope.Scope>>,\n  <A, E, R>(\n    effect: Effect.Effect<A, E, R>,\n    scope: Scope.Scope.Closeable\n  ) => Effect.Effect<A, E, Exclude<R, Scope.Scope>>\n>(2, (effect, scope) =>\n  pipe(\n    effect,\n    scopeExtend(scope),\n    core.onExit((exit) => scope.close(exit))\n  ))\n\n// circular with Supervisor\n\n/** @internal */\nexport const fiberRefUnsafeMakeSupervisor = (\n  initial: Supervisor.Supervisor<any>\n): FiberRef.FiberRef<Supervisor.Supervisor<any>> =>\n  core.fiberRefUnsafeMakePatch(initial, {\n    differ: SupervisorPatch.differ,\n    fork: SupervisorPatch.empty\n  })\n\n// circular with FiberRef\n\n/* @internal */\nexport const fiberRefLocallyScoped = dual<\n  <A>(value: A) => (self: FiberRef.FiberRef<A>) => Effect.Effect<void, never, Scope.Scope>,\n  <A>(self: FiberRef.FiberRef<A>, value: A) => Effect.Effect<void, never, Scope.Scope>\n>(2, (self, value) =>\n  core.asVoid(\n    acquireRelease(\n      core.flatMap(\n        core.fiberRefGet(self),\n        (oldValue) => core.as(core.fiberRefSet(self, value), oldValue)\n      ),\n      (oldValue) => core.fiberRefSet(self, oldValue)\n    )\n  ))\n\n/* @internal */\nexport const fiberRefLocallyScopedWith = dual<\n  <A>(f: (a: A) => A) => (self: FiberRef.FiberRef<A>) => Effect.Effect<void, never, Scope.Scope>,\n  <A>(self: FiberRef.FiberRef<A>, f: (a: A) => A) => Effect.Effect<void, never, Scope.Scope>\n>(2, (self, f) => core.fiberRefGetWith(self, (a) => fiberRefLocallyScoped(self, f(a))))\n\n/* @internal */\nexport const fiberRefMake = <A>(\n  initial: A,\n  options?: {\n    readonly fork?: ((a: A) => A) | undefined\n    readonly join?: ((left: A, right: A) => A) | undefined\n  }\n): Effect.Effect<FiberRef.FiberRef<A>, never, Scope.Scope> =>\n  fiberRefMakeWith(() => core.fiberRefUnsafeMake(initial, options))\n\n/* @internal */\nexport const fiberRefMakeWith = <Value>(\n  ref: LazyArg<FiberRef.FiberRef<Value>>\n): Effect.Effect<FiberRef.FiberRef<Value>, never, Scope.Scope> =>\n  acquireRelease(\n    core.tap(core.sync(ref), (ref) => core.fiberRefUpdate(ref, identity)),\n    (fiberRef) => core.fiberRefDelete(fiberRef)\n  )\n\n/* @internal */\nexport const fiberRefMakeContext = <A>(\n  initial: Context.Context<A>\n): Effect.Effect<FiberRef.FiberRef<Context.Context<A>>, never, Scope.Scope> =>\n  fiberRefMakeWith(() => core.fiberRefUnsafeMakeContext(initial))\n\n/* @internal */\nexport const fiberRefMakeRuntimeFlags = (\n  initial: RuntimeFlags.RuntimeFlags\n): Effect.Effect<FiberRef.FiberRef<RuntimeFlags.RuntimeFlags>, never, Scope.Scope> =>\n  fiberRefMakeWith(() => core.fiberRefUnsafeMakeRuntimeFlags(initial))\n\n/** @internal */\nexport const currentRuntimeFlags: FiberRef.FiberRef<RuntimeFlags.RuntimeFlags> = core.fiberRefUnsafeMakeRuntimeFlags(\n  _runtimeFlags.none\n)\n\n/** @internal */\nexport const currentSupervisor: FiberRef.FiberRef<Supervisor.Supervisor<any>> = fiberRefUnsafeMakeSupervisor(\n  supervisor.none\n)\n\n// circular with Fiber\n\n/* @internal */\nexport const fiberAwaitAll = <const T extends Iterable<Fiber.Fiber<any, any>>>(\n  fibers: T\n): Effect.Effect<\n  [T] extends [ReadonlyArray<infer U>]\n    ? number extends T[\"length\"] ? Array<U extends Fiber.Fiber<infer A, infer E> ? Exit.Exit<A, E> : never>\n    : { -readonly [K in keyof T]: T[K] extends Fiber.Fiber<infer A, infer E> ? Exit.Exit<A, E> : never }\n    : Array<T extends Iterable<infer U> ? U extends Fiber.Fiber<infer A, infer E> ? Exit.Exit<A, E> : never : never>\n> => forEach(fibers, internalFiber._await) as any\n\n/** @internal */\nexport const fiberAll = <A, E>(fibers: Iterable<Fiber.Fiber<A, E>>): Fiber.Fiber<Array<A>, E> => {\n  const _fiberAll = {\n    ...Effectable.CommitPrototype,\n    commit() {\n      return internalFiber.join(this)\n    },\n    [internalFiber.FiberTypeId]: internalFiber.fiberVariance,\n    id: () =>\n      RA.fromIterable(fibers).reduce((id, fiber) => FiberId.combine(id, fiber.id()), FiberId.none as FiberId.FiberId),\n    await: core.exit(forEachParUnbounded(fibers, (fiber) => core.flatten(fiber.await), false)),\n    children: core.map(forEachParUnbounded(fibers, (fiber) => fiber.children, false), RA.flatten),\n    inheritAll: core.forEachSequentialDiscard(fibers, (fiber) => fiber.inheritAll),\n    poll: core.map(\n      core.forEachSequential(fibers, (fiber) => fiber.poll),\n      RA.reduceRight(\n        Option.some<Exit.Exit<Array<A>, E>>(core.exitSucceed(new Array())),\n        (optionB, optionA) => {\n          switch (optionA._tag) {\n            case \"None\": {\n              return Option.none()\n            }\n            case \"Some\": {\n              switch (optionB._tag) {\n                case \"None\": {\n                  return Option.none()\n                }\n                case \"Some\": {\n                  return Option.some(\n                    core.exitZipWith(optionA.value, optionB.value, {\n                      onSuccess: (a, chunk) => [a, ...chunk],\n                      onFailure: internalCause.parallel\n                    })\n                  )\n                }\n              }\n            }\n          }\n        }\n      )\n    ),\n    interruptAsFork: (fiberId: FiberId.FiberId) =>\n      core.forEachSequentialDiscard(fibers, (fiber) => fiber.interruptAsFork(fiberId))\n  }\n  return _fiberAll\n}\n\n/* @internal */\nexport const fiberInterruptFork = <A, E>(self: Fiber.Fiber<A, E>): Effect.Effect<void> =>\n  core.asVoid(forkDaemon(core.interruptFiber(self)))\n\n/* @internal */\nexport const fiberJoinAll = <A, E>(fibers: Iterable<Fiber.Fiber<A, E>>): Effect.Effect<Array<A>, E> =>\n  internalFiber.join(fiberAll(fibers))\n\n/* @internal */\nexport const fiberScoped = <A, E>(self: Fiber.Fiber<A, E>): Effect.Effect<Fiber.Fiber<A, E>, never, Scope.Scope> =>\n  acquireRelease(core.succeed(self), core.interruptFiber)\n\n//\n// circular race\n//\n\n/** @internal */\nexport const raceWith = dual<\n  <A1, E1, R1, E, A, A2, E2, R2, A3, E3, R3>(\n    other: Effect.Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfDone: (exit: Exit.Exit<A, E>, fiber: Fiber.Fiber<A1, E1>) => Effect.Effect<A2, E2, R2>\n      readonly onOtherDone: (exit: Exit.Exit<A1, E1>, fiber: Fiber.Fiber<A, E>) => Effect.Effect<A3, E3, R3>\n    }\n  ) => <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>,\n  <A, E, R, A1, E1, R1, A2, E2, R2, A3, E3, R3>(\n    self: Effect.Effect<A, E, R>,\n    other: Effect.Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfDone: (exit: Exit.Exit<A, E>, fiber: Fiber.Fiber<A1, E1>) => Effect.Effect<A2, E2, R2>\n      readonly onOtherDone: (exit: Exit.Exit<A1, E1>, fiber: Fiber.Fiber<A, E>) => Effect.Effect<A3, E3, R3>\n    }\n  ) => Effect.Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>\n>(3, (self, other, options) =>\n  raceFibersWith(self, other, {\n    onSelfWin: (winner, loser) =>\n      core.flatMap(winner.await, (exit) => {\n        switch (exit._tag) {\n          case OpCodes.OP_SUCCESS: {\n            return core.flatMap(\n              winner.inheritAll,\n              () => options.onSelfDone(exit, loser)\n            )\n          }\n          case OpCodes.OP_FAILURE: {\n            return options.onSelfDone(exit, loser)\n          }\n        }\n      }),\n    onOtherWin: (winner, loser) =>\n      core.flatMap(winner.await, (exit) => {\n        switch (exit._tag) {\n          case OpCodes.OP_SUCCESS: {\n            return core.flatMap(\n              winner.inheritAll,\n              () => options.onOtherDone(exit, loser)\n            )\n          }\n          case OpCodes.OP_FAILURE: {\n            return options.onOtherDone(exit, loser)\n          }\n        }\n      })\n  }))\n\n/** @internal */\nexport const disconnect = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  core.uninterruptibleMask((restore) =>\n    core.fiberIdWith((fiberId) =>\n      core.flatMap(forkDaemon(restore(self)), (fiber) =>\n        pipe(\n          restore(internalFiber.join(fiber)),\n          core.onInterrupt(() => pipe(fiber, internalFiber.interruptAsFork(fiberId)))\n        ))\n    )\n  )\n\n/** @internal */\nexport const race = dual<\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>\n  ) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<A | A2, E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>\n  ) => Effect.Effect<A | A2, E | E2, R | R2>\n>(\n  2,\n  (self, that) =>\n    core.fiberIdWith((parentFiberId) =>\n      raceWith(self, that, {\n        onSelfDone: (exit, right) =>\n          core.exitMatchEffect(exit, {\n            onFailure: (cause) =>\n              pipe(\n                internalFiber.join(right),\n                internalEffect.mapErrorCause((cause2) => internalCause.parallel(cause, cause2))\n              ),\n            onSuccess: (value) =>\n              pipe(\n                right,\n                core.interruptAsFiber(parentFiberId),\n                core.as(value)\n              )\n          }),\n        onOtherDone: (exit, left) =>\n          core.exitMatchEffect(exit, {\n            onFailure: (cause) =>\n              pipe(\n                internalFiber.join(left),\n                internalEffect.mapErrorCause((cause2) => internalCause.parallel(cause2, cause))\n              ),\n            onSuccess: (value) =>\n              pipe(\n                left,\n                core.interruptAsFiber(parentFiberId),\n                core.as(value)\n              )\n          })\n      })\n    )\n)\n\n/** @internal */\nexport const raceFibersWith = dual<\n  <A1, E1, R1, E, A, A2, E2, R2, A3, E3, R3>(\n    other: Effect.Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfWin: (\n        winner: Fiber.RuntimeFiber<A, E>,\n        loser: Fiber.RuntimeFiber<A1, E1>\n      ) => Effect.Effect<A2, E2, R2>\n      readonly onOtherWin: (\n        winner: Fiber.RuntimeFiber<A1, E1>,\n        loser: Fiber.RuntimeFiber<A, E>\n      ) => Effect.Effect<A3, E3, R3>\n      readonly selfScope?: fiberScope.FiberScope | undefined\n      readonly otherScope?: fiberScope.FiberScope | undefined\n    }\n  ) => <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>,\n  <A, E, R, A1, E1, R1, A2, E2, R2, A3, E3, R3>(\n    self: Effect.Effect<A, E, R>,\n    other: Effect.Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfWin: (\n        winner: Fiber.RuntimeFiber<A, E>,\n        loser: Fiber.RuntimeFiber<A1, E1>\n      ) => Effect.Effect<A2, E2, R2>\n      readonly onOtherWin: (\n        winner: Fiber.RuntimeFiber<A1, E1>,\n        loser: Fiber.RuntimeFiber<A, E>\n      ) => Effect.Effect<A3, E3, R3>\n      readonly selfScope?: fiberScope.FiberScope | undefined\n      readonly otherScope?: fiberScope.FiberScope | undefined\n    }\n  ) => Effect.Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>\n>(3, <A, E, R, A1, E1, R1, A2, E2, R2, A3, E3, R3>(\n  self: Effect.Effect<A, E, R>,\n  other: Effect.Effect<A1, E1, R1>,\n  options: {\n    readonly onSelfWin: (\n      winner: Fiber.RuntimeFiber<A, E>,\n      loser: Fiber.RuntimeFiber<A1, E1>\n    ) => Effect.Effect<A2, E2, R2>\n    readonly onOtherWin: (\n      winner: Fiber.RuntimeFiber<A1, E1>,\n      loser: Fiber.RuntimeFiber<A, E>\n    ) => Effect.Effect<A3, E3, R3>\n    readonly selfScope?: fiberScope.FiberScope | undefined\n    readonly otherScope?: fiberScope.FiberScope | undefined\n  }\n) =>\n  core.withFiberRuntime((parentFiber, parentStatus) => {\n    const parentRuntimeFlags = parentStatus.runtimeFlags\n    const raceIndicator = MRef.make(true)\n    const leftFiber: FiberRuntime<A, E> = unsafeMakeChildFiber(\n      self,\n      parentFiber,\n      parentRuntimeFlags,\n      options.selfScope\n    )\n    const rightFiber: FiberRuntime<A1, E1> = unsafeMakeChildFiber(\n      other,\n      parentFiber,\n      parentRuntimeFlags,\n      options.otherScope\n    )\n    return core.async((cb) => {\n      leftFiber.addObserver(() => completeRace(leftFiber, rightFiber, options.onSelfWin, raceIndicator, cb))\n      rightFiber.addObserver(() => completeRace(rightFiber, leftFiber, options.onOtherWin, raceIndicator, cb))\n      leftFiber.startFork(self)\n      rightFiber.startFork(other)\n    }, FiberId.combine(leftFiber.id(), rightFiber.id()))\n  }))\n\nconst completeRace = <A2, A3, E2, E3, R, R1, R2, R3>(\n  winner: Fiber.RuntimeFiber<any, any>,\n  loser: Fiber.RuntimeFiber<any, any>,\n  cont: (winner: Fiber.RuntimeFiber<any, any>, loser: Fiber.RuntimeFiber<any, any>) => Effect.Effect<any, any, any>,\n  ab: MRef.MutableRef<boolean>,\n  cb: (_: Effect.Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>) => void\n): void => {\n  if (MRef.compareAndSet(true, false)(ab)) {\n    cb(cont(winner, loser))\n  }\n}\n\n/** @internal */\nexport const ensuring: {\n  <X, R1>(\n    finalizer: Effect.Effect<X, never, R1>\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R1 | R>\n  <A, E, R, X, R1>(self: Effect.Effect<A, E, R>, finalizer: Effect.Effect<X, never, R1>): Effect.Effect<A, E, R1 | R>\n} = dual(\n  2,\n  <A, E, R, X, R1>(self: Effect.Effect<A, E, R>, finalizer: Effect.Effect<X, never, R1>): Effect.Effect<A, E, R1 | R> =>\n    core.uninterruptibleMask((restore) =>\n      core.matchCauseEffect(restore(self), {\n        onFailure: (cause1) =>\n          core.matchCauseEffect(finalizer, {\n            onFailure: (cause2) => core.failCause(internalCause.sequential(cause1, cause2)),\n            onSuccess: () => core.failCause(cause1)\n          }),\n        onSuccess: (a) => core.as(finalizer, a)\n      })\n    )\n)\n\n/** @internal */\nexport const invokeWithInterrupt: <A, E, R>(\n  self: Effect.Effect<A, E, R>,\n  entries: ReadonlyArray<Entry<unknown>>,\n  onInterrupt?: () => void\n) => Effect.Effect<void, E, R> = <A, E, R>(\n  self: Effect.Effect<A, E, R>,\n  entries: ReadonlyArray<Entry<unknown>>,\n  onInterrupt?: () => void\n) =>\n  core.fiberIdWith((id) =>\n    core.flatMap(\n      core.flatMap(\n        forkDaemon(core.interruptible(self)),\n        (processing) =>\n          core.async<void, E>((cb) => {\n            const counts = entries.map((_) => _.listeners.count)\n            const checkDone = () => {\n              if (counts.every((count) => count === 0)) {\n                if (\n                  entries.every((_) => {\n                    if (_.result.state.current._tag === \"Pending\") {\n                      return true\n                    } else if (\n                      _.result.state.current._tag === \"Done\" &&\n                      core.exitIsExit(_.result.state.current.effect) &&\n                      _.result.state.current.effect._tag === \"Failure\" &&\n                      internalCause.isInterrupted(_.result.state.current.effect.cause)\n                    ) {\n                      return true\n                    } else {\n                      return false\n                    }\n                  })\n                ) {\n                  cleanup.forEach((f) => f())\n                  onInterrupt?.()\n                  cb(core.interruptFiber(processing))\n                }\n              }\n            }\n            processing.addObserver((exit) => {\n              cleanup.forEach((f) => f())\n              cb(exit)\n            })\n            const cleanup = entries.map((r, i) => {\n              const observer = (count: number) => {\n                counts[i] = count\n                checkDone()\n              }\n              r.listeners.addObserver(observer)\n              return () => r.listeners.removeObserver(observer)\n            })\n            checkDone()\n            return core.sync(() => {\n              cleanup.forEach((f) => f())\n            })\n          })\n      ),\n      () =>\n        core.suspend(() => {\n          const residual = entries.flatMap((entry) => {\n            if (!entry.state.completed) {\n              return [entry]\n            }\n            return []\n          })\n          return core.forEachSequentialDiscard(\n            residual,\n            (entry) => complete(entry.request as any, core.exitInterrupt(id))\n          )\n        })\n    )\n  )\n\n/** @internal */\nexport const interruptWhenPossible = dual<\n  (all: Iterable<Request<any, any>>) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<void, E, R>,\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    all: Iterable<Request<any, any>>\n  ) => Effect.Effect<void, E, R>\n>(2, (self, all) =>\n  core.fiberRefGetWith(\n    currentRequestMap,\n    (map) =>\n      core.suspend(() => {\n        const entries = RA.fromIterable(all).flatMap((_) => map.has(_) ? [map.get(_)!] : [])\n        return invokeWithInterrupt(self, entries)\n      })\n  ))\n\n// circular Tracer\n\n/** @internal */\nexport const makeSpanScoped = (\n  name: string,\n  options?: Tracer.SpanOptions | undefined\n): Effect.Effect<Tracer.Span, never, Scope.Scope> => {\n  options = tracer.addSpanStackTrace(options)\n  return core.uninterruptible(\n    core.withFiberRuntime((fiber) => {\n      const scope = Context.unsafeGet(fiber.getFiberRef(core.currentContext), scopeTag)\n      const span = internalEffect.unsafeMakeSpan(fiber, name, options)\n      const timingEnabled = fiber.getFiberRef(core.currentTracerTimingEnabled)\n      const clock_ = Context.get(fiber.getFiberRef(defaultServices.currentServices), clock.clockTag)\n      return core.as(\n        core.scopeAddFinalizerExit(scope, (exit) => internalEffect.endSpan(span, exit, clock_, timingEnabled)),\n        span\n      )\n    })\n  )\n}\n\n/* @internal */\nexport const withTracerScoped = (value: Tracer.Tracer): Effect.Effect<void, never, Scope.Scope> =>\n  fiberRefLocallyScopedWith(defaultServices.currentServices, Context.add(tracer.tracerTag, value))\n\n/** @internal */\nexport const withSpanScoped: {\n  (\n    name: string,\n    options?: Tracer.SpanOptions\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Scope.Scope | Exclude<R, Tracer.ParentSpan>>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    name: string,\n    options?: Tracer.SpanOptions\n  ): Effect.Effect<A, E, Scope.Scope | Exclude<R, Tracer.ParentSpan>>\n} = function() {\n  const dataFirst = typeof arguments[0] !== \"string\"\n  const name = dataFirst ? arguments[1] : arguments[0]\n  const options = tracer.addSpanStackTrace(dataFirst ? arguments[2] : arguments[1])\n  if (dataFirst) {\n    const self = arguments[0]\n    return core.flatMap(\n      makeSpanScoped(name, tracer.addSpanStackTrace(options)),\n      (span) => internalEffect.provideService(self, tracer.spanTag, span)\n    )\n  }\n  return (self: Effect.Effect<any, any, any>) =>\n    core.flatMap(\n      makeSpanScoped(name, tracer.addSpanStackTrace(options)),\n      (span) => internalEffect.provideService(self, tracer.spanTag, span)\n    )\n} as any\n"],"names":["internalCall","RA","Boolean","Chunk","Context","Deferred","Effectable","ExecutionStrategy","FiberId","FiberRefs","FiberRefsPatch","FiberStatus","dual","identity","pipe","globalValue","HashMap","HashSet","Inspectable","LogLevel","Micro","MRef","Option","pipeArguments","Predicate","Ref","RuntimeFlagsPatch","currentScheduler","_RequestBlock","internalCause","clock","currentRequestMap","concurrency","configProviderTag","internalEffect","core","defaultServices","consoleTag","executionStrategy","internalFiber","FiberMessage","fiberRefs","fiberScope","internalLogger","metric","metricBoundaries","metricLabel","OpCodes","randomTag","complete","_runtimeFlags","OpSupervision","supervisor","SupervisorPatch","tracer","version","fiberStarted","counter","incremental","fiberActive","fiberSuccesses","fiberFailures","fiberLifetimes","tagged","histogram","exponential","start","factor","count","EvaluationSignalContinue","EvaluationSignalDone","EvaluationSignalYieldNow","runtimeFiberVariance","_E","_","_A","absurd","Error","toStringUnknown","YieldedOp","Symbol","for","yieldedOpChannel","currentOp","contOpSuccess","OP_ON_SUCCESS","cont","value","effect_instruction_i1","OnStep","_cont","exitSucceed","OP_ON_SUCCESS_AND_FAILURE","effect_instruction_i2","OP_REVERT_FLAGS","self","patchRuntimeFlags","currentRuntimeFlags","patch","interruptible","isInterrupted","exitFailCause","getInterruptedCause","OP_WHILE","effect_instruction_i0","pushStack","void","drainQueueWhileRunningTable","OP_INTERRUPT_SIGNAL","runtimeFlags","cur","message","processNewInterruptSignal","cause","OP_RESUME","_self","_cur","_message","OP_STATEFUL","onFiber","running","OP_YIELD_NOW","flatMap","yieldNow","runBlockedRequests","forEachSequentialDiscard","flatten","requestsByRequestResolver","forEachConcurrentDiscard","sequentialCollectionToChunk","dataSource","sequential","map","Map","arr","block","push","toReadonlyArray","entry","set","request","flat","fiberRefLocally","invokeWithInterrupt","runAll","forEach","listeners","interrupted","FiberRuntime","Class","FiberTypeId","fiberVariance","RuntimeFiberTypeId","_fiberRefs","_fiberId","_queue","Array","_children","_observers","_running","_stack","_asyncInterruptor","_asyncBlockingOn","_exitValue","_steps","_isYielding","currentOpCount","currentSupervisor","currentTracer","currentSpan","currentContext","currentDefaultServices","constructor","fiberId","fiberRefs0","runtimeFlags0","runtimeMetrics","tags","getFiberRef","currentMetricLabels","unsafeUpdate","refreshRefCache","commit","join","id","resume","effect","tell","status","ask","state","isDone","scope","unsafeMake","children","fiber","from","getChildren","Set","currentInterruptedCause","getFiberRefs","f","suspend","deferred","deferredUnsafeMake","stateful","deferredUnsafeDone","sync","deferredAwait","drainQueueLaterOnExecutor","await","async","cb","exit","succeed","addObserver","removeObserver","inheritAll","withFiberRuntime","parentFiber","parentStatus","parentFiberId","parentFiberRefs","parentRuntimeFlags","childFiberRefs","updatedFiberRefs","joinAs","setFiberRefs","updatedRuntimeFlags","diff","exclude","Interruption","WindDown","updateRuntimeFlags","poll","fromNullable","unsafePoll","interruptAsFork","interruptSignal","interrupt","unsafeInterruptAsFork","observer","filter","o","setFiberRef","unsafeDeleteFiberRef","fiberRef","delete_","locals","has","get","initial","updateAs","currentServices","unsafeMap","tracerTag","key","spanTag","addChild","child","add","removeChild","delete","drainQueueOnCurrentThread","recurse","evaluationSignal","prev","globalThis","currentFiberURI","length","evaluateMessageWhileSuspended","splice","scheduleTask","run","currentSchedulingPriority","drainQueueWhileRunning","cur0","_tag","isEmpty","addInterruptedCause","oldSC","sendInterruptSignalToAllChildren","size","told","interruptAllChildren","it","values","body","next","done","asVoid","whileLoop","while","step","reportExitValue","startTimeMillis","endTimeMillis","Date","now","OP_SUCCESS","OP_FAILURE","level","currentUnhandledErrorLogLevel","isInterruptedOnly","log","setExitValue","i","getLoggers","currentLoggers","overrideLogLevel","logLevel","isSome","currentLogLevel","minimumLogLevel","currentMinimumLogLevel","greaterThan","spans","currentLogSpan","annotations","currentLogAnnotations","loggers","contextMap","clockService","clockTag","date","unsafeCurrentTimeMillis","withRedactableContext","logger","context","evaluateEffect","suspended","effect0","onResume","eff","runLoop","op","_op","OP_YIELD","cooperativeYielding","exitVoid","OP_ASYNC","enable","interruption","onSuspend","startFork","oldRuntimeFlags","newRuntimeFlags","initiateAsync","asyncRegister","alreadyCalled","callback","e","failCause","die","refs","flags","popStack","item","pop","getNextSuccessCont","frame","OP_ON_FAILURE","getNextFailCont","OP_TAG","unsafeGet","Left","fail","left","None","NoSuchElementException","Right","right","Some","unsafeAsync","microResume","env","envUnsafeMakeEmpty","envSet","runSymbol","result","none","error","defect","abortResume","envGet","currentAbortController","abort","OP_SYNC","undefined","oldCur","stripFailures","OP_WITH_RUNTIME","Blocked","frames","snap","patchRefs","patchFlags","blocked","newFiber","uninterruptibleMask","restore","forkDaemon","runRequestBlock","RunBlocked","OP_UPDATE_RUNTIME_FLAGS","updateFlags","revertFlags","RevertFlags","check","OP_COMMIT","onEffect","shouldYield","priority","getCurrentVersion","EffectTypeId","_V","dieMessage","isEffectError","isInterruptedException","fiberRefUnsafeMake","fromLiteral","loggerWithConsoleLog","makeLogger","opts","services","getOrDefault","unsafe","loggerWithLeveledLog","unsafeLogger","debug","info","trace","warn","loggerWithConsoleError","defaultLogger","stringLogger","jsonLogger","logFmtLogger","logfmtLogger","prettyLogger","prettyLoggerDefault","structuredLogger","tracerLogger","span","getOption","attributes","threadName","label","pretty","renderErrorCause","event","isArray","unsafeCurrentTimeNanos","loggerWithSpanAnnotations","mapInputOptions","options","traceId","spanId","name","fiberRefUnsafeMakeHashSet","make","batchedLogger","window","buffer","flush","sleep","zipRight","forever","scopeAddFinalizer","interruptFiber","addFinalizer","as","annotateLogsScoped","arguments","fiberRefLocallyScopedWith","entries","Object","mutate","acquireRelease","args","isEffect","acquire","release","uninterruptible","tap","a","acquireReleaseInterruptible","ensuring","finalizer","runtime","acquireRefs","acquireFlags","scopeAddFinalizerExit","runtimeFinalizer","preRefs","preFlags","inverseRefs","withRuntimeFlags","daemonChildren","forkScope","currentForkScopeOverride","some","globalScope","_existsParFound","exists","isIterable","elements","matchSimple","existsLoop","iterator","matchEffect","if_","onTrue","onFalse","onFailure","onSuccess","index","b","predicate","negate","not","fromIterable","reduceRight","zipWith","list","getSomes","allResolveInput","input","keys","k","res","allValidate","effects","reconcile","eitherEffects","either","batching","eithers","errors","successes","errored","discard","allEither","all","arg","mode","allWith","allSuccesses","filterMap","exitIsSuccess","replicate","n","replicateEffect","r","isRequestBatchingEnabled","currentRequestBatching","match","finalizersMaskInternal","concurrentFinalizers","parallel","parallelN","forEachParN","forEachSequential","forEachParUnbounded","array","fn","processAll","transplant","graft","parent","todos","reverse","target","fibersCount","Math","min","fibers","results","interruptAll","startOrder","joinOrder","residual","collectExits","exits","sort","runFiber","interruptImmediately","runnable","unsafeForkUnstarted","onInterruptSignal","stepOrExit","processingFiber","pushResult","returnNextElement","onRes","todo","wrapped","getOrElse","exitCollectAll","requests","reduce","par","onExit","exitMatch","toPop","hitNext","getOrThrow","fork","unsafeFork","forkWithScopeOverride","forkWithErrorHandler","handler","onError","failureOrCause","overrideScope","childFiber","unsafeMakeChildFiber","childId","forkAs","childContext","onStart","onEnd","parentScope","scopeOverride","mergeAll","isFunction","zero","acc","update","partition","chunk","partitionMap","validateAll","es","bs","raceAll","isNonEmpty","dieSync","IllegalArgumentException","headNonEmpty","tailNonEmpty","deferredMake","fails","head","unsafeFromArray","tail","prepend","_await","raceAllArbiter","onInterrupt","zipLeft","winner","exitMatchEffect","modify","deferredFailCause","deferredSucceed","reduceEffect","elem","option","parallelFinalizers","contextWithEffect","scopeTag","onNone","onSome","strategy","scopeFork","inner","scopeExtend","parallelNFinalizers","parallelism","finalizersMask","sequentialFinalizers","scopeWith","scopedEffect","scopeMake","scopeUse","tagMetricsScoped","labelMetricsScoped","labels","old","union","using","use","acquireUseRelease","scopeClose","validate","that","validateWith","zipWithOptions","ea","eb","exitZipWith","ca","concurrent","validateAllPar","validateAllParDiscard","validateFirst","flip","withClockScoped","withRandomScoped","withConfigProviderScoped","withEarlyRelease","fiberIdWith","exitInterrupt","zipOptions","zipLeftOptions","zipRightOptions","a2","withRuntimeFlagsScoped","empty","revertRuntimeFlags","GenericTag","scopeUnsafeAddFinalizer","fin","finalizers","ScopeImplProto","ScopeTypeId","CloseableScopeTypeId","newScope","scopeUnsafeMake","close","isSequential","exitAsVoid","isParallel","create","mapInputContext","merge","fiberRefUnsafeMakeSupervisor","fiberRefUnsafeMakePatch","differ","fiberRefLocallyScoped","fiberRefGet","oldValue","fiberRefSet","fiberRefGetWith","fiberRefMake","fiberRefMakeWith","ref","fiberRefUpdate","fiberRefDelete","fiberRefMakeContext","fiberRefUnsafeMakeContext","fiberRefMakeRuntimeFlags","fiberRefUnsafeMakeRuntimeFlags","fiberAwaitAll","fiberAll","_fiberAll","CommitPrototype","combine","optionB","optionA","fiberInterruptFork","fiberJoinAll","fiberScoped","raceWith","other","raceFibersWith","onSelfWin","loser","onSelfDone","onOtherWin","onOtherDone","disconnect","race","mapErrorCause","cause2","interruptAsFiber","raceIndicator","leftFiber","selfScope","rightFiber","otherScope","completeRace","ab","compareAndSet","matchCauseEffect","cause1","processing","counts","checkDone","every","current","exitIsExit","cleanup","completed","interruptWhenPossible","makeSpanScoped","addSpanStackTrace","unsafeMakeSpan","timingEnabled","currentTracerTimingEnabled","clock_","endSpan","withTracerScoped","withSpanScoped","dataFirst","provideService"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2095, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}